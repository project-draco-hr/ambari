{
  injector=EasyMock.createMock(Injector.class);
  clusters=EasyMock.createMock(Clusters.class);
  cluster=EasyMock.createMock(Cluster.class);
  Config falconEnvConfig=new ConfigImpl("falcon-env"){
    Map<String,String> mockProperties=new HashMap<String,String>(){
{
        put("falcon_user","falcon");
      }
    }
;
    @Override public Map<String,String> getProperties(){
      return mockProperties;
    }
    @Override public void setProperties(    Map<String,String> properties){
      mockProperties.putAll(properties);
    }
    @Override public void persist(    boolean newConfig){
    }
  }
;
  Config oozieEnvConfig=new ConfigImpl("oozie-env"){
    Map<String,String> mockProperties=new HashMap<String,String>(){
{
        put("oozie_admin_users","oozie, oozie-admin");
      }
    }
;
    @Override public Map<String,String> getProperties(){
      return mockProperties;
    }
    @Override public void setProperties(    Map<String,String> properties){
      mockProperties.putAll(properties);
    }
    @Override public void persist(    boolean newConfig){
    }
  }
;
  expect(cluster.getDesiredConfigByType("falcon-env")).andReturn(falconEnvConfig).atLeastOnce();
  expect(cluster.getDesiredConfigByType("oozie-env")).andReturn(oozieEnvConfig).atLeastOnce();
  expect(clusters.getCluster((String)anyObject())).andReturn(cluster).anyTimes();
  expect(injector.getInstance(Clusters.class)).andReturn(clusters).atLeastOnce();
  replay(injector,clusters);
  clustersField=FixOozieAdminUsers.class.getDeclaredField("clusters");
  clustersField.setAccessible(true);
}
