def run_file(self, script, script_params, tmpoutfile, tmperrfile, timeout, tmpstructedoutfile, callback, task_id, override_output_files=True, handle=None, log_info_on_failure=True):
    pythonCommand = self.python_command(script, script_params)
    logger.debug(('Running command reflectively ' + pprint.pformat(pythonCommand)))
    script_dir = os.path.dirname(script)
    self.open_subprocess_files(tmpoutfile, tmperrfile, override_output_files)
    returncode = 1
    try:
        with PythonContext(script_dir, pythonCommand):
            imp.load_source('__main__', script)
    except SystemExit as e:
        returncode = e.code
        if returncode:
            logger.debug(('Reflective command failed with return_code=' + str(e)))
    except Exception:
        logger.debug('Reflective command failed with exception:', exc_info=1)
    else:
        returncode = 0
    return self.prepare_process_result(returncode, tmpoutfile, tmperrfile, tmpstructedoutfile, timeout=timeout)
