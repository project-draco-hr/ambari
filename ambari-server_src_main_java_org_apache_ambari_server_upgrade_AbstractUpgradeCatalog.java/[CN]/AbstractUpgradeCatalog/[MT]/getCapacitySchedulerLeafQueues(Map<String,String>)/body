{
  Set<String> leafQueues=new HashSet<>();
  Stack<String> toProcessQueues=new Stack<>();
  if (capacitySchedulerMap.containsKey(YARN_SCHEDULER_CAPACITY_ROOT_QUEUES)) {
    StringTokenizer queueTokenizer=new StringTokenizer(capacitySchedulerMap.get(YARN_SCHEDULER_CAPACITY_ROOT_QUEUES),",");
    while (queueTokenizer.hasMoreTokens()) {
      toProcessQueues.push(queueTokenizer.nextToken());
    }
  }
  while (!toProcessQueues.empty()) {
    String queue=toProcessQueues.pop();
    String queueKey=YARN_SCHEDULER_CAPACITY_ROOT_QUEUE + "." + queue+ "."+ QUEUES;
    if (capacitySchedulerMap.containsKey(queueKey)) {
      StringTokenizer queueTokenizer=new StringTokenizer(capacitySchedulerMap.get(queueKey),",");
      while (queueTokenizer.hasMoreTokens()) {
        toProcessQueues.push(queue + "." + queueTokenizer.nextToken());
      }
    }
 else {
      if (!queue.endsWith(".")) {
        String queueName=queue.substring(queue.lastIndexOf('.') + 1);
        leafQueues.add(queueName);
      }
 else {
        LOG.warn("Queue " + queue + " is not valid");
      }
    }
  }
  return leafQueues;
}
