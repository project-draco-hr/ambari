def execute(configurations={}, parameters={}, host_name=None):
    '\n  Returns a tuple containing the result code and a pre-formatted result label\n\n  Keyword arguments:\n  configurations (dictionary): a mapping of configuration key to value\n  parameters (dictionary): a mapping of script parameter key to value\n  host_name (string): the name of this host where the alert is running\n  '
    if (configurations is None):
        return ('UNKNOWN', ['There were no configurations supplied to the script.'])
    scheme = 'http'
    http_uri = None
    https_uri = None
    http_policy = 'HTTP_ONLY'
    security_enabled = False
    if (SECURITY_ENABLED_KEY in configurations):
        security_enabled = (str(configurations[SECURITY_ENABLED_KEY]).upper() == 'TRUE')
    kerberos_keytab = None
    if (KERBEROS_KEYTAB in configurations):
        kerberos_keytab = configurations[KERBEROS_KEYTAB]
    kerberos_principal = None
    if (KERBEROS_PRINCIPAL in configurations):
        kerberos_principal = configurations[KERBEROS_PRINCIPAL]
        kerberos_principal = kerberos_principal.replace('_HOST', host_name)
    if (NODEMANAGER_HTTP_ADDRESS_KEY in configurations):
        http_uri = configurations[NODEMANAGER_HTTP_ADDRESS_KEY]
    if (NODEMANAGER_HTTPS_ADDRESS_KEY in configurations):
        https_uri = configurations[NODEMANAGER_HTTPS_ADDRESS_KEY]
    if (YARN_HTTP_POLICY_KEY in configurations):
        http_policy = configurations[YARN_HTTP_POLICY_KEY]
    if (SMOKEUSER_KEY in configurations):
        smokeuser = configurations[SMOKEUSER_KEY]
    connection_timeout = CONNECTION_TIMEOUT_DEFAULT
    if (CONNECTION_TIMEOUT_KEY in parameters):
        connection_timeout = float(parameters[CONNECTION_TIMEOUT_KEY])
    uri = http_uri
    if (http_policy == 'HTTPS_ONLY'):
        scheme = 'https'
        if (https_uri is not None):
            uri = https_uri
    uri = ((str(host_name) + ':') + uri.split(':')[1])
    live_nodemanagers_qry = '{0}://{1}/jmx?qry=Hadoop:service=ResourceManager,name=RMNMInfo'.format(scheme, uri)
    convert_to_json_failed = False
    response_code = None
    try:
        if ((kerberos_principal is not None) and (kerberos_keytab is not None) and security_enabled):
            env = Environment.get_instance()
            curl_connection_timeout = int(connection_timeout)
            (url_response, error_msg, time_millis) = curl_krb_request(env.tmp_dir, kerberos_keytab, kerberos_principal, live_nodemanagers_qry, 'nm_health_summary_alert', None, False, 'NodeManager Health Summary', smokeuser, connection_timeout=curl_connection_timeout)
            try:
                url_response_json = json.loads(url_response)
                live_nodemanagers = json.loads(url_response_json['beans'][0]['LiveNodeManagers'])
            except ValueError as error:
                convert_to_json_failed = True
                if logger.isEnabledFor(logging.DEBUG):
                    logger.exception("[Alert][{0}] Convert response to json failed or json doesn't contain needed data: {1}".format('NodeManager Health Summary', str(error)))
            if convert_to_json_failed:
                (response_code, error_msg, time_millis) = curl_krb_request(env.tmp_dir, kerberos_keytab, kerberos_principal, live_nodemanagers_qry, 'nm_health_summary_alert', None, True, 'NodeManager Health Summary', smokeuser, connection_timeout=curl_connection_timeout)
        else:
            live_nodemanagers = json.loads(get_value_from_jmx(live_nodemanagers_qry, 'LiveNodeManagers', connection_timeout))
        if ((kerberos_principal is not None) and (kerberos_keytab is not None) and security_enabled):
            if ((response_code in [200, 307]) and convert_to_json_failed):
                return ('UNKNOWN', ['HTTP {0} response (metrics unavailable)'.format(str(response_code))])
            elif (convert_to_json_failed and (response_code not in [200, 307])):
                raise Exception('[Alert][NodeManager Health Summary] Getting data from {0} failed with http code {1}'.format(str(live_nodemanagers_qry), str(response_code)))
        unhealthy_count = 0
        for nodemanager in live_nodemanagers:
            health_report = nodemanager['State']
            if (health_report == 'UNHEALTHY'):
                unhealthy_count += 1
        if (unhealthy_count == 0):
            result_code = 'OK'
            label = OK_LABEL
        else:
            result_code = 'CRITICAL'
            if (unhealthy_count == 1):
                label = ERROR_LABEL.format(unhealthy_count, '', 'is')
            else:
                label = ERROR_LABEL.format(unhealthy_count, 's', 'are')
    except Exception as e:
        label = str(e)
        result_code = 'UNKNOWN'
    return (result_code, [label])
