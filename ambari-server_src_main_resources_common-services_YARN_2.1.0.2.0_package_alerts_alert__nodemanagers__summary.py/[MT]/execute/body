def execute(parameters=None, host_name=None):
    '\n  Returns a tuple containing the result code and a pre-formatted result label\n\n  Keyword arguments:\n  parameters (dictionary): a mapping of parameter key to value\n  host_name (string): the name of this host where the alert is running\n  '
    if (parameters is None):
        return ('UNKNOWN', ['There were no parameters supplied to the script.'])
    scheme = 'http'
    http_uri = None
    https_uri = None
    http_policy = 'HTTP_ONLY'
    if (NODEMANAGER_HTTP_ADDRESS_KEY in parameters):
        http_uri = parameters[NODEMANAGER_HTTP_ADDRESS_KEY]
    if (NODEMANAGER_HTTPS_ADDRESS_KEY in parameters):
        https_uri = parameters[NODEMANAGER_HTTPS_ADDRESS_KEY]
    if (YARN_HTTP_POLICY_KEY in parameters):
        http_policy = parameters[YARN_HTTP_POLICY_KEY]
    uri = http_uri
    if (http_policy == 'HTTPS_ONLY'):
        scheme = 'https'
        if (https_uri is not None):
            uri = https_uri
    live_nodemanagers_qry = '{0}://{1}/jmx?qry=Hadoop:service=ResourceManager,name=RMNMInfo'.format(scheme, uri)
    try:
        live_nodemanagers = json.loads(get_value_from_jmx(live_nodemanagers_qry, 'LiveNodeManagers'))
        unhealthy_count = 0
        for nodemanager in live_nodemanagers:
            health_report = nodemanager['State']
            if (health_report == 'UNHEALTHY'):
                unhealthy_count += 1
        if (unhealthy_count == 0):
            result_code = 'OK'
            label = OK_LABEL
        else:
            result_code = 'CRITICAL'
            if (unhealthy_count == 1):
                label = ERROR_LABEL.format(unhealthy_count, '', 'is')
            else:
                label = ERROR_LABEL.format(unhealthy_count, 's', 'are')
    except Exception as e:
        label = str(e)
        result_code = 'UNKNOWN'
    return (result_code, [label])
