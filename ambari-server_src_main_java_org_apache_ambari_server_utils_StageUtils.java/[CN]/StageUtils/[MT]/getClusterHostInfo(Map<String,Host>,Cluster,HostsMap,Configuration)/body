{
  Map<String,SortedSet<Integer>> hostRolesInfo=new HashMap<String,SortedSet<Integer>>();
  Map<String,Set<String>> clusterHostInfo=new HashMap<String,Set<String>>();
  Set<String> hostsSet=new LinkedHashSet<String>();
  List<Integer> portsList=new ArrayList<Integer>();
  for (  Host host : allHosts.values()) {
    Integer currentPingPort=host.getCurrentPingPort() == null ? DEFAULT_PING_PORT : host.getCurrentPingPort();
    hostsSet.add(host.getHostName());
    portsList.add(currentPingPort);
  }
  List<String> hostsList=new ArrayList<String>(hostsSet);
  for (  Entry<String,Service> serviceEntry : cluster.getServices().entrySet()) {
    Service service=serviceEntry.getValue();
    for (    Entry<String,ServiceComponent> serviceComponentEntry : service.getServiceComponents().entrySet()) {
      ServiceComponent serviceComponent=serviceComponentEntry.getValue();
      String componentName=serviceComponent.getName();
      for (      final String hostName : serviceComponent.getServiceComponentHosts().keySet()) {
        if (componentToClusterInfoKeyMap.containsKey(componentName)) {
          String roleName=componentToClusterInfoKeyMap.get(componentName);
          SortedSet<Integer> hostsForComponentsHost=hostRolesInfo.get(roleName);
          if (hostsForComponentsHost == null) {
            hostsForComponentsHost=new TreeSet<Integer>();
            hostRolesInfo.put(roleName,hostsForComponentsHost);
          }
          int hostIndex=hostsList.indexOf(hostName);
          hostsForComponentsHost.add(hostIndex);
        }
      }
    }
  }
  for (  String roleName : componentToClusterInfoKeyMap.values()) {
    if (hostRolesInfo.containsKey(roleName)) {
      TreeSet<Integer> sortedSet=new TreeSet<Integer>(hostRolesInfo.get(roleName));
      Set<String> replacedRangesSet=replaceRanges(sortedSet);
      clusterHostInfo.put(roleName,replacedRangesSet);
    }
  }
  clusterHostInfo.put(HOSTS_LIST,hostsSet);
  clusterHostInfo.put(PORTS,replaceMappedRanges(portsList));
  return clusterHostInfo;
}
