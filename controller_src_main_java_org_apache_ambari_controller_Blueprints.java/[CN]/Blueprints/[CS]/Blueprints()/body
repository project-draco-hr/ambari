{
  Blueprint bp=new Blueprint();
  bp.setName("MyClusterBlueprint");
  bp.setStackName("hortonworks-3.0");
  bp.setParentName("MySiteBlueprint");
  bp.setRevision("0");
  bp.setParentRevision("0");
  Component hdfsC=new Component();
  hdfsC.setName("hdfs");
  hdfsC.getProperty().add(getProperty("dfs.name.dir","${HADOOP_NN_DIR}"));
  hdfsC.getProperty().add(getProperty("dfs.data.dir","${HADOOP_DATA_DIR}"));
  Component mapredC=new Component();
  mapredC.setName("hdfs");
  mapredC.getProperty().add(getProperty("mapred.system.dir","/mapred/mapredsystem"));
  mapredC.getProperty().add(getProperty("mapred.local.dir","${HADOOP_MAPRED_DIR}"));
  List<Component> compList=new ArrayList();
  compList.add(mapredC);
  compList.add(hdfsC);
  bp.setComponents(compList);
  List<PackageRepository> prList=new ArrayList<PackageRepository>();
  PackageRepository pr=new PackageRepository();
  pr.setLocationURL("http://localhost/~vgogate/ambari");
  pr.setType("RPM");
  bp.setPackageRepositories(prList);
  Configuration bpDefaultCfg=new Configuration();
  ConfigurationCategory hdfs_site=new ConfigurationCategory();
  hdfs_site.setName("hdfs-site");
  ConfigurationCategory mapred_site=new ConfigurationCategory();
  mapred_site.setName("mapred-site");
  hdfs_site.getProperty().add(getProperty("dfs.name.dir","/tmp/namenode"));
  hdfs_site.getProperty().add(getProperty("dfs.data.dir","/tmp/datanode"));
  mapred_site.getProperty().add(getProperty("mapred.system.dir","/mapred/mapredsystem"));
  mapred_site.getProperty().add(getProperty("mapred.local.dir","/tmp/mapred"));
  bpDefaultCfg.getCategory().add(mapred_site);
  bpDefaultCfg.getCategory().add(hdfs_site);
  bp.setConfiguration(bpDefaultCfg);
  List<Role> roleList=new ArrayList<Role>();
  Role hdfs_nn_role=new Role();
  hdfs_nn_role.setName("hdfs-NN");
  hdfs_nn_role.setConfiguration(bpDefaultCfg);
  Role mapred_jt_role=new Role();
  mapred_jt_role.setName("mapred-JT");
  mapred_jt_role.setConfiguration(bpDefaultCfg);
  Role slaves_role=new Role();
  slaves_role.setName("slaves");
  slaves_role.setConfiguration(bpDefaultCfg);
  roleList.add(hdfs_nn_role);
  roleList.add(mapred_jt_role);
  roleList.add(slaves_role);
  bp.setRoles(roleList);
  ConcurrentHashMap<Integer,Blueprint> x=new ConcurrentHashMap<Integer,Blueprint>();
  x.put(new Integer(bp.getRevision()),bp);
  this.blueprints.put(bp.getName(),x);
}
