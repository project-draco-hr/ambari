@internalcode
def __call__(self, *args, **kwargs):
    arguments = list(args[:self._argument_count])
    off = len(arguments)
    if (off != self._argument_count):
        for (idx, name) in enumerate(self.arguments[len(arguments):]):
            try:
                value = kwargs.pop(name)
            except KeyError:
                try:
                    value = self.defaults[((idx - self._argument_count) + off)]
                except IndexError:
                    value = self._environment.undefined(('parameter %r was not provided' % name), name=name)
            arguments.append(value)
    if self.caller:
        caller = kwargs.pop('caller', None)
        if (caller is None):
            caller = self._environment.undefined('No caller defined', name='caller')
        arguments.append(caller)
    if self.catch_kwargs:
        arguments.append(kwargs)
    elif kwargs:
        raise TypeError(('macro %r takes no keyword argument %r' % (self.name, next(iter(kwargs)))))
    if self.catch_varargs:
        arguments.append(args[self._argument_count:])
    elif (len(args) > self._argument_count):
        raise TypeError(('macro %r takes not more than %d argument(s)' % (self.name, len(self.arguments))))
    return self._func(*arguments)
