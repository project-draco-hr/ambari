{
  if (request.getProperties().size() > 1) {
    throw new UnsupportedOperationException("Multiple requests cannot be executed at the same time.");
  }
  Iterator<Map<String,Object>> iterator=request.getProperties().iterator();
  String clName;
  final String desiredRepoVersion;
  String stackName;
  String stackVersion;
  Map<String,Object> propertyMap=iterator.next();
  Set<String> requiredProperties=new HashSet<String>();
  requiredProperties.add(CLUSTER_STACK_VERSION_CLUSTER_NAME_PROPERTY_ID);
  requiredProperties.add(CLUSTER_STACK_VERSION_REPOSITORY_VERSION_PROPERTY_ID);
  requiredProperties.add(CLUSTER_STACK_VERSION_STACK_PROPERTY_ID);
  requiredProperties.add(CLUSTER_STACK_VERSION_VERSION_PROPERTY_ID);
  for (  String requiredProperty : requiredProperties) {
    if (!propertyMap.containsKey(requiredProperty)) {
      throw new IllegalArgumentException(String.format("The required property %s is not defined",requiredProperty));
    }
  }
  clName=(String)propertyMap.get(CLUSTER_STACK_VERSION_CLUSTER_NAME_PROPERTY_ID);
  desiredRepoVersion=(String)propertyMap.get(CLUSTER_STACK_VERSION_REPOSITORY_VERSION_PROPERTY_ID);
  Cluster cluster;
  AmbariManagementController managementController=getManagementController();
  AmbariMetaInfo ami=managementController.getAmbariMetaInfo();
  try {
    Clusters clusters=managementController.getClusters();
    cluster=clusters.getCluster(clName);
  }
 catch (  AmbariException e) {
    throw new NoSuchParentResourceException(e.getMessage(),e);
  }
  UpgradeEntity entity=cluster.getUpgradeInProgress();
  if (null != entity) {
    throw new IllegalArgumentException(String.format("Cluster %s %s is in progress.  Cannot install packages.",cluster.getClusterName(),entity.getDirection().getText(false)));
  }
  final StackId stackId;
  if (propertyMap.containsKey(CLUSTER_STACK_VERSION_STACK_PROPERTY_ID) && propertyMap.containsKey(CLUSTER_STACK_VERSION_VERSION_PROPERTY_ID)) {
    stackName=(String)propertyMap.get(CLUSTER_STACK_VERSION_STACK_PROPERTY_ID);
    stackVersion=(String)propertyMap.get(CLUSTER_STACK_VERSION_VERSION_PROPERTY_ID);
    stackId=new StackId(stackName,stackVersion);
    if (!ami.isSupportedStack(stackName,stackVersion)) {
      throw new NoSuchParentResourceException(String.format("Stack %s is not supported",stackId));
    }
  }
 else {
    StackId currentStackVersion=cluster.getCurrentStackVersion();
    stackId=currentStackVersion;
  }
  RepositoryVersionEntity repoVersionEnt=repositoryVersionDAO.findByStackAndVersion(stackId,desiredRepoVersion);
  if (repoVersionEnt == null) {
    throw new IllegalArgumentException(String.format("Repo version %s is not available for stack %s",desiredRepoVersion,stackId));
  }
  VersionDefinitionXml desiredVersionDefinition=null;
  try {
    desiredVersionDefinition=repoVersionEnt.getRepositoryXml();
  }
 catch (  Exception e) {
    throw new IllegalArgumentException(String.format("Version %s is backed by a version definition, but it could not be parsed",desiredRepoVersion),e);
  }
  List<Host> hosts=getHostsForStackDistribution(cluster);
  for (  ClusterVersionEntity clusterVersion : clusterVersionDAO.findByCluster(clName)) {
    RepositoryVersionEntity clusterRepoVersion=clusterVersion.getRepositoryVersion();
    int compare=compareVersions(clusterRepoVersion.getVersion(),desiredRepoVersion);
    if (compare <= 0) {
      continue;
    }
    if (!StringUtils.equals(clusterRepoVersion.getStackName(),repoVersionEnt.getStackName())) {
      continue;
    }
    if (null == desiredVersionDefinition) {
      continue;
    }
    for (    Host host : hosts) {
      if (StringUtils.isBlank(desiredVersionDefinition.getPackageVersion(host.getOsFamily()))) {
        String msg=String.format("Ambari cannot install version %s.  Version %s is already installed.",desiredRepoVersion,clusterRepoVersion.getVersion());
        throw new IllegalArgumentException(msg);
      }
    }
  }
  boolean forceInstalled=Boolean.parseBoolean((String)propertyMap.get(CLUSTER_STACK_VERSION_FORCE));
  final RequestStatusResponse response;
  try {
    if (forceInstalled) {
      createHostVersions(cluster,hosts,stackId,desiredRepoVersion,RepositoryVersionState.INSTALLED);
      response=null;
    }
 else {
      createHostVersions(cluster,hosts,stackId,desiredRepoVersion,RepositoryVersionState.INSTALLING);
      RequestStageContainer installRequest=createOrchestration(cluster,stackId,hosts,repoVersionEnt,propertyMap);
      response=installRequest.getRequestStatusResponse();
    }
  }
 catch (  AmbariException e) {
    throw new SystemException("Can not persist request",e);
  }
  return getRequestStatus(response);
}
