{
  final Set<Resource> resources=new HashSet<Resource>();
  final Set<String> requestedIds=getRequestPropertyIds(request,predicate);
  final Set<Map<String,Object>> propertyMaps=getPropertyMaps(predicate);
  List<ClusterVersionEntity> requestedEntities=new ArrayList<ClusterVersionEntity>();
  for (  Map<String,Object> propertyMap : propertyMaps) {
    final String clusterName=propertyMap.get(CLUSTER_STACK_VERSION_CLUSTER_NAME_PROPERTY_ID).toString();
    final Long id;
    if (propertyMap.get(CLUSTER_STACK_VERSION_ID_PROPERTY_ID) == null && propertyMaps.size() == 1) {
      requestedEntities=clusterVersionDAO.findByCluster(clusterName);
    }
 else {
      try {
        id=Long.parseLong(propertyMap.get(CLUSTER_STACK_VERSION_ID_PROPERTY_ID).toString());
      }
 catch (      Exception ex) {
        throw new SystemException("Stack version should have numerical id");
      }
      final ClusterVersionEntity entity=clusterVersionDAO.findByPK(id);
      if (entity == null) {
        throw new NoSuchResourceException("There is no stack version with id " + id);
      }
 else {
        requestedEntities.add(entity);
      }
    }
  }
  for (  ClusterVersionEntity entity : requestedEntities) {
    final Resource resource=new ResourceImpl(Resource.Type.ClusterStackVersion);
    final Map<String,List<String>> hostStates=new HashMap<String,List<String>>();
    for (    RepositoryVersionState state : RepositoryVersionState.values()) {
      hostStates.put(state.name(),new ArrayList<String>());
    }
    for (    HostVersionEntity hostVersionEntity : hostVersionDAO.findByClusterStackAndVersion(entity.getClusterEntity().getClusterName(),entity.getRepositoryVersion().getStack(),entity.getRepositoryVersion().getVersion())) {
      hostStates.get(hostVersionEntity.getState().name()).add(hostVersionEntity.getHostName());
    }
    StackId stackId=new StackId(entity.getRepositoryVersion().getStack());
    RepositoryVersionEntity repoVerEntity=repositoryVersionDAO.findByStackAndVersion(stackId.getStackId(),entity.getRepositoryVersion().getVersion());
    setResourceProperty(resource,CLUSTER_STACK_VERSION_CLUSTER_NAME_PROPERTY_ID,entity.getClusterEntity().getClusterName(),requestedIds);
    setResourceProperty(resource,CLUSTER_STACK_VERSION_HOST_STATES_PROPERTY_ID,hostStates,requestedIds);
    setResourceProperty(resource,CLUSTER_STACK_VERSION_ID_PROPERTY_ID,entity.getId(),requestedIds);
    setResourceProperty(resource,CLUSTER_STACK_VERSION_STACK_PROPERTY_ID,stackId.getStackName(),requestedIds);
    setResourceProperty(resource,CLUSTER_STACK_VERSION_STATE_PROPERTY_ID,entity.getState().name(),requestedIds);
    setResourceProperty(resource,CLUSTER_STACK_VERSION_VERSION_PROPERTY_ID,stackId.getStackVersion(),requestedIds);
    if (repoVerEntity != null) {
      Long repoVersionId=repoVerEntity.getId();
      setResourceProperty(resource,CLUSTER_STACK_VERSION_REPOSITORY_VERSION_PROPERTY_ID,repoVersionId,requestedIds);
    }
    if (predicate == null || predicate.evaluate(resource)) {
      resources.add(resource);
    }
  }
  return resources;
}
