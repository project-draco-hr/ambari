{
  String osFamily=host.getOsFamily();
  final List<RepositoryEntity> repoInfo=perOsRepos.get(osFamily);
  if (repoInfo == null) {
    throw new SystemException(String.format("Repositories for os type %s are " + "not defined. Repo version=%s, stackId=%s",osFamily,desiredRepoVersion,stackId));
  }
  List<ServiceOsSpecific.Package> packages=new ArrayList<ServiceOsSpecific.Package>();
  Set<String> servicesOnHost=new HashSet<String>();
  List<ServiceComponentHost> components=cluster.getServiceComponentHosts(host.getHostName());
  for (  ServiceComponentHost component : components) {
    if (repoServices.isEmpty() || repoServices.contains(component.getServiceName())) {
      servicesOnHost.add(component.getServiceName());
    }
  }
  if (servicesOnHost.isEmpty()) {
    return null;
  }
  List<String> blacklistedPackagePrefixes=configuration.getRollingUpgradeSkipPackagesPrefixes();
  for (  String serviceName : servicesOnHost) {
    ServiceInfo info;
    try {
      info=ami.getService(stackId.getStackName(),stackId.getStackVersion(),serviceName);
    }
 catch (    AmbariException e) {
      throw new SystemException("Cannot enumerate services",e);
    }
    List<ServiceOsSpecific.Package> packagesForService=managementController.getPackagesForServiceHost(info,new HashMap<String,String>(),osFamily);
    for (    ServiceOsSpecific.Package aPackage : packagesForService) {
      if (!aPackage.getSkipUpgrade()) {
        boolean blacklisted=false;
        for (        String prefix : blacklistedPackagePrefixes) {
          if (aPackage.getName().startsWith(prefix)) {
            blacklisted=true;
            break;
          }
        }
        if (!blacklisted) {
          packages.add(aPackage);
        }
      }
    }
  }
  final String packageList=gson.toJson(packages);
  final String repoList=gson.toJson(repoInfo);
  Map<String,String> params=new HashMap<String,String>();
  params.put("stack_id",stackId.getStackId());
  params.put("repository_version",desiredRepoVersion);
  params.put("base_urls",repoList);
  params.put("package_list",packageList);
  RequestResourceFilter filter=new RequestResourceFilter(null,null,Collections.singletonList(host.getHostName()));
  ActionExecutionContext actionContext=new ActionExecutionContext(cluster.getClusterName(),INSTALL_PACKAGES_ACTION,Collections.singletonList(filter),params);
  actionContext.setTimeout(Short.valueOf(configuration.getDefaultAgentTaskTimeout(true)));
  return actionContext;
}
