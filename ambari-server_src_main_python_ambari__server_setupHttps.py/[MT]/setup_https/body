def setup_https(options):
    if (not is_root()):
        warn = 'ambari-server setup-https is run as non-root user, some sudo privileges might be required'
        print warn
    options.exit_message = None
    if (not get_silent()):
        properties = get_ambari_properties()
        try:
            security_server_keys_dir = properties.get_property(SSL_KEY_DIR)
            client_api_ssl_port = (DEFAULT_SSL_API_PORT if (properties.get_property(SSL_API_PORT) in '') else properties.get_property(SSL_API_PORT))
            api_ssl = (properties.get_property(SSL_API) in ['true'])
            client_api_ssl_port_old_value = properties.get_property(SSL_API_PORT)
            api_ssl_old_value = properties.get_property(SSL_API)
            cert_was_imported = False
            cert_must_import = True
            disable_https = ((options.api_ssl in ['false']) if (options.api_ssl is not None) else None)
            configure_https = ((options.api_ssl in ['true']) if (options.api_ssl is not None) else None)
            if api_ssl:
                disable_https = (disable_https if (disable_https is not None) else get_YN_input('Do you want to disable HTTPS [y/n] (n)? ', False))
                if disable_https:
                    properties.process_pair(SSL_API, 'false')
                    cert_must_import = False
                else:
                    properties.process_pair(SSL_API_PORT, get_validated_string_input((('SSL port [' + str(client_api_ssl_port)) + '] ? '), str(client_api_ssl_port), '^[0-9]{1,5}$', 'Invalid port.', False, validatorFunction=is_valid_https_port, answer=options.api_ssl_port))
                    cert_was_imported = import_cert_and_key_action(security_server_keys_dir, properties, options)
            elif get_YN_input('Do you want to configure HTTPS [y/n] (y)? ', True, configure_https):
                properties.process_pair(SSL_API_PORT, get_validated_string_input((('SSL port [' + str(client_api_ssl_port)) + '] ? '), str(client_api_ssl_port), '^[0-9]{1,5}$', 'Invalid port.', False, validatorFunction=is_valid_https_port, answer=options.api_ssl_port))
                cert_was_imported = import_cert_and_key_action(security_server_keys_dir, properties, options)
            else:
                return False
            if (cert_must_import and (not cert_was_imported)):
                print 'Setup of HTTPS failed. Exiting.'
                return False
            conf_file = find_properties_file()
            f = open(conf_file, 'w')
            properties.store(f, "Changed by 'ambari-server setup-https' command")
            if ((api_ssl_old_value != properties.get_property(SSL_API)) or (client_api_ssl_port_old_value != properties.get_property(SSL_API_PORT))):
                print 'Ambari server URL changed. To make use of the Tez View in Ambari please update the property tez.tez-ui.history-url.base in tez-site'
            ambari_user = read_ambari_user()
            if ambari_user:
                adjust_directory_permissions(ambari_user)
            return True
        except KeyError as e:
            err = (('Property ' + str(e)) + ' is not defined')
            raise FatalException(1, err)
    else:
        warning = 'setup-https is not enabled in silent mode.'
        raise NonFatalException(warning)
