{
  String baseDn=ldapServerProperties.getBaseDN().toLowerCase();
  String groupBase=ldapServerProperties.getGroupBase().toLowerCase();
  String groupObjectClass=ldapServerProperties.getGroupObjectClass();
  String groupMembershipAttr=ldapServerProperties.getGroupMembershipAttr();
  String adminGroupMappingRules=ldapServerProperties.getAdminGroupMappingRules();
  final String groupNamingAttribute=ldapServerProperties.getGroupNamingAttr();
  String groupSearchFilter=ldapServerProperties.getGroupSearchFilter();
  int indexOfBaseDn=groupBase.indexOf(baseDn);
  groupBase=indexOfBaseDn <= 0 ? "" : groupBase.substring(0,indexOfBaseDn - 1);
  StringBuilder filterBuilder=new StringBuilder();
  filterBuilder.append("(&(");
  filterBuilder.append(groupMembershipAttr);
  filterBuilder.append("=");
  filterBuilder.append(user.getNameInNamespace());
  if ((groupSearchFilter == null) || groupSearchFilter.equals("")) {
    filterBuilder.append(")(objectclass=");
    filterBuilder.append(groupObjectClass);
    filterBuilder.append(")(|");
    String[] adminGroupMappingRegexs=adminGroupMappingRules.split(",");
    for (    String adminGroupMappingRegex : adminGroupMappingRegexs) {
      filterBuilder.append("(");
      filterBuilder.append(groupNamingAttribute);
      filterBuilder.append("=");
      filterBuilder.append(adminGroupMappingRegex);
      filterBuilder.append(")");
    }
    filterBuilder.append(")");
  }
 else {
    filterBuilder.append(")");
    filterBuilder.append(groupSearchFilter);
  }
  filterBuilder.append(")");
  logger.info("filter=" + filterBuilder);
  return user;
}
