{
  AgentResource.init(injector.getInstance(HeartBeatHandler.class));
  CertificateDownload.init(injector.getInstance(CertificateManager.class));
  ConnectionInfo.init(injector.getInstance(Configuration.class));
  CertificateSign.init(injector.getInstance(CertificateManager.class));
  GetResource.init(injector.getInstance(ResourceManager.class));
  PersistKeyValueService.init(injector.getInstance(PersistKeyValueImpl.class));
  KeyService.init(injector.getInstance(PersistKeyValueImpl.class));
  BootStrapResource.init(injector.getInstance(BootStrapImpl.class));
  StackAdvisorResourceProvider.init(injector.getInstance(StackAdvisorHelper.class));
  StageUtils.setGson(injector.getInstance(Gson.class));
  WorkflowJsonService.setDBProperties(injector.getInstance(Configuration.class));
  SecurityFilter.init(injector.getInstance(Configuration.class));
  StackDefinedPropertyProvider.init(injector);
  NagiosPropertyProvider.init(injector);
  AbstractControllerResourceProvider.init(injector.getInstance(ResourceProviderFactory.class));
  BlueprintResourceProvider.init(injector.getInstance(BlueprintDAO.class),injector.getInstance(Gson.class),ambariMetaInfo);
  StackDependencyResourceProvider.init(ambariMetaInfo);
  ClusterResourceProvider.init(injector.getInstance(BlueprintDAO.class),ambariMetaInfo,injector.getInstance(ConfigHelper.class));
  AlertDefinitionResourceProvider.init(injector.getInstance(AlertDefinitionDAO.class));
  PermissionResourceProvider.init(injector.getInstance(PermissionDAO.class));
  ViewPermissionResourceProvider.init(injector.getInstance(PermissionDAO.class));
  PrivilegeResourceProvider.init(injector.getInstance(PrivilegeDAO.class),injector.getInstance(UserDAO.class),injector.getInstance(GroupDAO.class),injector.getInstance(PrincipalDAO.class),injector.getInstance(PermissionDAO.class),injector.getInstance(ResourceDAO.class));
  ClusterPrivilegeResourceProvider.init(injector.getInstance(ClusterDAO.class));
  ViewRegistry.init(injector.getInstance(ViewDAO.class),injector.getInstance(ViewInstanceDAO.class),injector.getInstance(UserDAO.class),injector.getInstance(MemberDAO.class),injector.getInstance(PrivilegeDAO.class),injector.getInstance(SecurityHelper.class),injector.getInstance(ResourceDAO.class),injector.getInstance(ResourceTypeDAO.class));
}
