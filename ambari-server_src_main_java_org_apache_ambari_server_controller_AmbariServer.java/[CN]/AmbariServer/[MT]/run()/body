{
  server=new Server(CLIENT_PORT);
  try {
    ClassPathXmlApplicationContext parentSpringAppContext=new ClassPathXmlApplicationContext();
    parentSpringAppContext.refresh();
    ConfigurableListableBeanFactory factory=parentSpringAppContext.getBeanFactory();
    factory.registerSingleton("guiceInjector",injector);
    String[] contextLocations={SPRING_CONTEXT_LOCATION};
    ClassPathXmlApplicationContext springAppContext=new ClassPathXmlApplicationContext(contextLocations,parentSpringAppContext);
    WebAppContext webAppContext=new WebAppContext(warUrlString,CONTEXT_PATH);
    GenericWebApplicationContext springWebAppContext=new GenericWebApplicationContext();
    springWebAppContext.setServletContext(webAppContext.getServletContext());
    springWebAppContext.setParent(springAppContext);
    webAppContext.getServletContext().setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE,springWebAppContext);
    server.setHandler(webAppContext);
    certMan.initRootCert();
    Context root=webAppContext;
    ServletHolder rootServlet=root.addServlet(DefaultServlet.class,"/");
    rootServlet.setInitOrder(1);
    SslSocketConnector sslConnector=new SslSocketConnector();
    sslConnector.setPort(CLIENT_SECURED_PORT);
    Map<String,String> configsMap=configs.getConfigsMap();
    String keystore=configsMap.get(Configuration.SRVR_KSTR_DIR_KEY) + File.separator + configsMap.get(Configuration.KSTR_NAME_KEY);
    String srvrCrtPass=configsMap.get(Configuration.SRVR_CRT_PASS_KEY);
    sslConnector.setKeystore(keystore);
    sslConnector.setTruststore(keystore);
    sslConnector.setPassword(srvrCrtPass);
    sslConnector.setKeyPassword(srvrCrtPass);
    sslConnector.setTrustPassword(srvrCrtPass);
    sslConnector.setKeystoreType("PKCS12");
    sslConnector.setTruststoreType("PKCS12");
    sslConnector.setNeedClientAuth(true);
    server.addConnector(sslConnector);
    ServletHolder sh=new ServletHolder(ServletContainer.class);
    sh.setInitParameter("com.sun.jersey.config.property.resourceConfigClass","com.sun.jersey.api.core.PackagesResourceConfig");
    sh.setInitParameter("com.sun.jersey.config.property.packages","org.apache.ambari.server.api.rest");
    root.addServlet(sh,"/api/*");
    sh.setInitOrder(2);
    ServletHolder agent=new ServletHolder(ServletContainer.class);
    agent.setInitParameter("com.sun.jersey.config.property.resourceConfigClass","com.sun.jersey.api.core.PackagesResourceConfig");
    agent.setInitParameter("com.sun.jersey.config.property.packages","org.apache.ambari.server.agent.rest");
    root.addServlet(agent,"/agent/*");
    agent.setInitOrder(3);
    ServletHolder cert=new ServletHolder(ServletContainer.class);
    cert.setInitParameter("com.sun.jersey.config.property.resourceConfigClass","com.sun.jersey.api.core.PackagesResourceConfig");
    cert.setInitParameter("com.sun.jersey.config.property.packages","org.apache.ambari.server.security.unsecured.rest");
    root.addServlet(cert,"/cert/*");
    cert.setInitOrder(4);
    server.setStopAtShutdown(true);
    springAppContext.start();
    server.start();
    LOG.info("Started Server");
    server.join();
    LOG.info("Joined the Server");
  }
 catch (  Exception e) {
    LOG.error("Error in the server",e);
  }
}
