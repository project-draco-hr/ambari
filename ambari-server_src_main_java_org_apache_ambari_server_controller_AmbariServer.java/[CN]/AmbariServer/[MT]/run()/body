{
  performStaticInjection();
  initDB();
  server=new Server();
  server.setSessionIdManager(sessionIdManager);
  Server serverForAgent=new Server();
  setSystemProperties(configs);
  if (System.getProperty("skipDatabaseConsistencyValidation") == null) {
    DatabaseChecker.checkDBVersion();
    DatabaseChecker.checkDBConsistency();
    DatabaseChecker.checkDBConfigsConsistency();
  }
  try {
    ClassPathXmlApplicationContext parentSpringAppContext=new ClassPathXmlApplicationContext();
    parentSpringAppContext.refresh();
    ConfigurableListableBeanFactory factory=parentSpringAppContext.getBeanFactory();
    factory.registerSingleton("guiceInjector",injector);
    factory.registerSingleton("passwordEncoder",injector.getInstance(PasswordEncoder.class));
    factory.registerSingleton("ambariLocalUserService",injector.getInstance(AmbariLocalUserDetailsService.class));
    factory.registerSingleton("ambariLdapAuthenticationProvider",injector.getInstance(AmbariLdapAuthenticationProvider.class));
    factory.registerSingleton("ambariLdapDataPopulator",injector.getInstance(AmbariLdapDataPopulator.class));
    factory.registerSingleton("ambariAuthorizationFilter",injector.getInstance(AmbariAuthorizationFilter.class));
    factory.registerSingleton("ambariInternalAuthenticationProvider",injector.getInstance(AmbariInternalAuthenticationProvider.class));
    factory.registerSingleton("ambariJwtAuthenticationFilter",injector.getInstance(JwtAuthenticationFilter.class));
    String[] contextLocations={SPRING_CONTEXT_LOCATION};
    ClassPathXmlApplicationContext springAppContext=new ClassPathXmlApplicationContext(contextLocations,parentSpringAppContext);
    ServletContextHandler root=new ServletContextHandler(ServletContextHandler.SECURITY | ServletContextHandler.SESSIONS);
    configureRootHandler(root);
    configureSessionManager(sessionManager);
    root.getSessionHandler().setSessionManager(sessionManager);
    GenericWebApplicationContext springWebAppContext=new GenericWebApplicationContext();
    springWebAppContext.setServletContext(root.getServletContext());
    springWebAppContext.setParent(springAppContext);
    root.getServletContext().setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE,springWebAppContext);
    certMan.initRootCert();
    ServletContextHandler agentroot=new ServletContextHandler(serverForAgent,"/",ServletContextHandler.NO_SESSIONS);
    if (configs.isAgentApiGzipped()) {
      configureHandlerCompression(agentroot);
    }
    ServletHolder rootServlet=root.addServlet(DefaultServlet.class,"/");
    rootServlet.setInitParameter("dirAllowed","false");
    rootServlet.setInitOrder(1);
    rootServlet=agentroot.addServlet(DefaultServlet.class,"/");
    rootServlet.setInitOrder(1);
    root.addFilter(new FilterHolder(injector.getInstance(AmbariServerSecurityHeaderFilter.class)),"/*",DISPATCHER_TYPES);
    root.addFilter(new FilterHolder(injector.getInstance(AmbariViewsSecurityHeaderFilter.class)),"/api/v1/views/*",DISPATCHER_TYPES);
    root.addFilter(new FilterHolder(injector.getInstance(AmbariPersistFilter.class)),"/api/*",DISPATCHER_TYPES);
    root.addFilter(new FilterHolder(new MethodOverrideFilter()),"/api/*",DISPATCHER_TYPES);
    root.addEventListener(new RequestContextListener());
    root.addFilter(new FilterHolder(springSecurityFilter),"/api/*",DISPATCHER_TYPES);
    root.addFilter(new FilterHolder(new UserNameOverrideFilter()),"/api/v1/users/*",DISPATCHER_TYPES);
    agentroot.addFilter(new FilterHolder(injector.getInstance(AmbariPersistFilter.class)),"/agent/*",DISPATCHER_TYPES);
    agentroot.addFilter(SecurityFilter.class,"/*",DISPATCHER_TYPES);
    Map<String,String> configsMap=configs.getConfigsMap();
    if (configs.getAgentSSLAuthentication()) {
      SslContextFactory contextFactoryTwoWay=new SslContextFactory();
      HttpConfiguration httpConfigurationTwoWay=new HttpConfiguration();
      httpConfigurationTwoWay.setSecureScheme("https");
      httpConfigurationTwoWay.setSecurePort(configs.getTwoWayAuthPort());
      httpConfigurationTwoWay.addCustomizer(new SecureRequestCustomizer());
      setHeaderSize(httpConfigurationTwoWay);
      String keystore=configsMap.get(Configuration.SRVR_KSTR_DIR_KEY) + File.separator + configsMap.get(Configuration.KSTR_NAME_KEY);
      String truststore=configsMap.get(Configuration.SRVR_KSTR_DIR_KEY) + File.separator + configsMap.get(Configuration.TSTR_NAME_KEY);
      String srvrCrtPass=configsMap.get(Configuration.SRVR_CRT_PASS_KEY);
      contextFactoryTwoWay.setKeyStorePath(keystore);
      contextFactoryTwoWay.setTrustStorePath(truststore);
      contextFactoryTwoWay.setKeyManagerPassword(srvrCrtPass);
      contextFactoryTwoWay.setKeyStorePassword(srvrCrtPass);
      contextFactoryTwoWay.setTrustStorePassword(srvrCrtPass);
      contextFactoryTwoWay.setKeyStoreType(configsMap.get(Configuration.KSTR_TYPE_KEY));
      contextFactoryTwoWay.setTrustStoreType(configsMap.get(Configuration.TSTR_TYPE_KEY));
      contextFactoryTwoWay.setNeedClientAuth(configs.getTwoWaySsl());
      disableInsecureProtocols(contextFactoryTwoWay);
      SslContextFactory contextFactoryOneWay=new SslContextFactory(true);
      contextFactoryOneWay.setKeyStorePath(keystore);
      contextFactoryOneWay.setTrustStorePath(truststore);
      contextFactoryOneWay.setKeyStorePassword(srvrCrtPass);
      contextFactoryOneWay.setKeyManagerPassword(srvrCrtPass);
      contextFactoryOneWay.setTrustStorePassword(srvrCrtPass);
      contextFactoryOneWay.setKeyStoreType(configsMap.get(Configuration.KSTR_TYPE_KEY));
      contextFactoryOneWay.setTrustStoreType(configsMap.get(Configuration.TSTR_TYPE_KEY));
      contextFactoryOneWay.setNeedClientAuth(false);
      disableInsecureProtocols(contextFactoryOneWay);
      HttpConfiguration httpConfigurationOneWay=new HttpConfiguration();
      httpConfigurationOneWay.setSecureScheme("https");
      httpConfigurationOneWay.setSecurePort(configs.getOneWayAuthPort());
      httpConfigurationOneWay.addCustomizer(new SecureRequestCustomizer());
      setHeaderSize(httpConfigurationOneWay);
      Map<String,Integer> agentSelectorAcceptorMap=getDesiredAgentAcceptorSelector(serverForAgent);
      ServerConnector sslConnectorOneWay=new ServerConnector(serverForAgent,agentSelectorAcceptorMap.get("desiredAcceptors"),agentSelectorAcceptorMap.get("desiredSelectors"),new SslConnectionFactory(contextFactoryOneWay,HttpVersion.HTTP_1_1.asString()),new HttpConnectionFactory(httpConfigurationOneWay));
      sslConnectorOneWay.setPort(configs.getOneWayAuthPort());
      ServerConnector sslConnectorTwoWay=new ServerConnector(serverForAgent,agentSelectorAcceptorMap.get("desiredAcceptors"),agentSelectorAcceptorMap.get("desiredSelectors"),new SslConnectionFactory(contextFactoryTwoWay,HttpVersion.HTTP_1_1.asString()),new HttpConnectionFactory(httpConfigurationTwoWay));
      sslConnectorTwoWay.setPort(configs.getTwoWayAuthPort());
      configureJettyThreadPool(serverForAgent,sslConnectorOneWay.getAcceptors(),"qtp-ambari-agent",configs.getAgentThreadPoolSize());
      serverForAgent.addConnector(sslConnectorOneWay);
      serverForAgent.addConnector(sslConnectorTwoWay);
    }
 else {
      ServerConnector agentConnector=new ServerConnector(serverForAgent);
      agentConnector.setPort(configs.getOneWayAuthPort());
      agentConnector.setIdleTimeout(configs.getConnectionMaxIdleTime());
      configureJettyThreadPool(serverForAgent,agentConnector.getAcceptors(),"qtp-ambari-agent",configs.getAgentThreadPoolSize());
      serverForAgent.addConnector(agentConnector);
    }
    ServletHolder sh=new ServletHolder(ServletContainer.class);
    sh.setInitParameter("com.sun.jersey.config.property.resourceConfigClass","com.sun.jersey.api.core.PackagesResourceConfig");
    sh.setInitParameter("com.sun.jersey.config.property.packages","org.apache.ambari.server.api.rest;" + "org.apache.ambari.server.api.services;" + "org.apache.ambari.eventdb.webservice;"+ "org.apache.ambari.server.api");
    sh.setInitParameter("com.sun.jersey.api.json.POJOMappingFeature","true");
    root.addServlet(sh,"/api/v1/*");
    sh.setInitOrder(2);
    SecurityContextHolder.setStrategyName(SecurityContextHolder.MODE_INHERITABLETHREADLOCAL);
    viewRegistry.readViewArchives();
    handlerList.addHandler(root);
    server.setHandler(handlerList);
    ServletHolder agent=new ServletHolder(ServletContainer.class);
    agent.setInitParameter("com.sun.jersey.config.property.resourceConfigClass","com.sun.jersey.api.core.PackagesResourceConfig");
    agent.setInitParameter("com.sun.jersey.config.property.packages","org.apache.ambari.server.agent.rest;" + "org.apache.ambari.server.api");
    agent.setInitParameter("com.sun.jersey.api.json.POJOMappingFeature","true");
    agentroot.addServlet(agent,"/agent/v1/*");
    agent.setInitOrder(3);
    AgentResource.statHeartBeatHandler();
    LOG.info("********** Started Heartbeat handler **********");
    ServletHolder cert=new ServletHolder(ServletContainer.class);
    cert.setInitParameter("com.sun.jersey.config.property.resourceConfigClass","com.sun.jersey.api.core.PackagesResourceConfig");
    cert.setInitParameter("com.sun.jersey.config.property.packages","org.apache.ambari.server.security.unsecured.rest;" + "org.apache.ambari.server.api");
    cert.setInitParameter("com.sun.jersey.api.json.POJOMappingFeature","true");
    agentroot.addServlet(cert,"/*");
    cert.setInitOrder(4);
    ServletHolder resources=new ServletHolder(ServletContainer.class);
    resources.setInitParameter("com.sun.jersey.config.property.resourceConfigClass","com.sun.jersey.api.core.PackagesResourceConfig");
    resources.setInitParameter("com.sun.jersey.config.property.packages","org.apache.ambari.server.resources.api.rest;");
    root.addServlet(resources,"/resources/*");
    resources.setInitOrder(5);
    if (configs.csrfProtectionEnabled()) {
      sh.setInitParameter("com.sun.jersey.spi.container.ContainerRequestFilters","org.apache.ambari.server.api.AmbariCsrfProtectionFilter");
    }
    ServerConnector apiConnector;
    if (configs.getApiSSLAuthentication()) {
      String httpsKeystore=configsMap.get(Configuration.CLIENT_API_SSL_KSTR_DIR_NAME_KEY) + File.separator + configsMap.get(Configuration.CLIENT_API_SSL_KSTR_NAME_KEY);
      String httpsTruststore=configsMap.get(Configuration.CLIENT_API_SSL_KSTR_DIR_NAME_KEY) + File.separator + configsMap.get(Configuration.CLIENT_API_SSL_TSTR_NAME_KEY);
      LOG.info("API SSL Authentication is turned on. Keystore - " + httpsKeystore);
      String httpsCrtPass=configsMap.get(Configuration.CLIENT_API_SSL_CRT_PASS_KEY);
      SslContextFactory contextFactoryApi=new SslContextFactory();
      disableInsecureProtocols(contextFactoryApi);
      contextFactoryApi.setKeyStorePath(httpsKeystore);
      contextFactoryApi.setTrustStorePath(httpsTruststore);
      contextFactoryApi.setKeyManagerPassword(httpsCrtPass);
      contextFactoryApi.setKeyStorePassword(httpsCrtPass);
      contextFactoryApi.setTrustStorePassword(httpsCrtPass);
      contextFactoryApi.setKeyStoreType(configsMap.get(Configuration.CLIENT_API_SSL_KSTR_TYPE_KEY));
      contextFactoryApi.setTrustStoreType(configsMap.get(Configuration.CLIENT_API_SSL_KSTR_TYPE_KEY));
      HttpConfiguration httpConfigurationSSL=new HttpConfiguration();
      httpConfigurationSSL.setSecurePort(configs.getClientSSLApiPort());
      setHeaderSize(httpConfigurationSSL);
      ServerConnector https=new ServerConnector(server,new SslConnectionFactory(contextFactoryApi,"http/1.1"),new HttpConnectionFactory(httpConfigurationSSL));
      https.setPort(configs.getClientSSLApiPort());
      https.setIdleTimeout(configs.getConnectionMaxIdleTime());
      apiConnector=https;
    }
 else {
      HttpConfiguration httpConfiguration=new HttpConfiguration();
      httpConfiguration.setSecurePort(configs.getClientApiPort());
      setHeaderSize(httpConfiguration);
      apiConnector=new ServerConnector(server,new HttpConnectionFactory(httpConfiguration));
      apiConnector.setPort(configs.getClientApiPort());
      apiConnector.setIdleTimeout(configs.getConnectionMaxIdleTime());
    }
    configureJettyThreadPool(server,apiConnector.getAcceptors(),"qtp-ambari-client",configs.getClientThreadPoolSize());
    server.addConnector(apiConnector);
    server.setStopAtShutdown(true);
    serverForAgent.setStopAtShutdown(true);
    springAppContext.start();
    String osType=getServerOsType();
    if (osType == null || osType.isEmpty()) {
      throw new RuntimeException(Configuration.OS_VERSION_KEY + " is not " + " set in the ambari.properties file");
    }
    LOG.info("********* Initializing Clusters **********");
    Clusters clusters=injector.getInstance(Clusters.class);
    StringBuilder clusterDump=new StringBuilder();
    clusters.debugDump(clusterDump);
    LOG.info("********* Current Clusters State *********");
    LOG.info(clusterDump.toString());
    LOG.info("********* Reconciling Alert Definitions **********");
    ambariMetaInfo.reconcileAlertDefinitions(clusters);
    LOG.info("********* Initializing ActionManager **********");
    ActionManager manager=injector.getInstance(ActionManager.class);
    LOG.info("********* Initializing Controller **********");
    AmbariManagementController controller=injector.getInstance(AmbariManagementController.class);
    LOG.info("********* Initializing Scheduled Request Manager **********");
    ExecutionScheduleManager executionScheduleManager=injector.getInstance(ExecutionScheduleManager.class);
    clusterController=controller;
    StateRecoveryManager recoveryManager=injector.getInstance(StateRecoveryManager.class);
    recoveryManager.doWork();
    server.start();
    serverForAgent.start();
    LOG.info("********* Started Server **********");
    manager.start();
    LOG.info("********* Started ActionManager **********");
    executionScheduleManager.start();
    LOG.info("********* Started Scheduled Request Manager **********");
    serviceManager.startAsync();
    LOG.info("********* Started Services **********");
    server.join();
    LOG.info("Joined the Server");
  }
 catch (  BadPaddingException bpe) {
    LOG.error("Bad keystore or private key password. " + "HTTPS certificate re-importing may be required.");
    throw bpe;
  }
catch (  BindException bindException) {
    LOG.error("Could not bind to server port - instance may already be running. " + "Terminating this instance.",bindException);
    throw bindException;
  }
}
