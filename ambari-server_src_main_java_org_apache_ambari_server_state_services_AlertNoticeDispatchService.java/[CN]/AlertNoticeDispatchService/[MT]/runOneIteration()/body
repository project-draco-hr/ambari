{
  List<AlertNoticeEntity> pending=m_dao.findPendingNotices();
  if (pending.size() == 0) {
    return;
  }
  LOG.info("There are {} pending alert notices about to be dispatched..." + pending.size());
  Map<AlertTargetEntity,List<AlertNoticeEntity>> aggregateMap=new HashMap<AlertTargetEntity,List<AlertNoticeEntity>>(pending.size());
  for (  AlertNoticeEntity notice : pending) {
    AlertTargetEntity target=notice.getAlertTarget();
    List<AlertNoticeEntity> notices=aggregateMap.get(target);
    if (null == notices) {
      notices=new ArrayList<AlertNoticeEntity>();
      aggregateMap.put(target,notices);
    }
    notices.add(notice);
  }
  Set<AlertTargetEntity> targets=aggregateMap.keySet();
  for (  AlertTargetEntity target : targets) {
    List<AlertNoticeEntity> notices=aggregateMap.get(target);
    if (null == notices || notices.size() == 0) {
      continue;
    }
    String targetType=target.getNotificationType();
    String propertiesJson=target.getProperties();
    AlertTargetProperties targetProperties=m_gson.fromJson(propertiesJson,AlertTargetProperties.class);
    Map<String,String> properties=targetProperties.Properties;
    Notification notification=new Notification();
    notification.Callback=new AlertNoticeDispatchCallback();
    notification.CallbackIds=new ArrayList<String>(notices.size());
    List<AlertHistoryEntity> histories=new ArrayList<AlertHistoryEntity>(notices.size());
    for (    AlertNoticeEntity notice : notices) {
      AlertHistoryEntity history=notice.getAlertHistory();
      histories.add(history);
      notification.CallbackIds.add(notice.getUuid());
    }
    try {
      renderNotificationContent(notification,histories,target);
    }
 catch (    Exception exception) {
      LOG.error("Unable to create notification for alerts",exception);
      List<String> failedNoticeIds=new ArrayList<String>(notices.size());
      for (      AlertNoticeEntity notice : notices) {
        failedNoticeIds.add(notice.getUuid());
      }
      notification.Callback.onFailure(failedNoticeIds);
      continue;
    }
    if (properties.containsKey(AMBARI_DISPATCH_CREDENTIAL_USERNAME) && properties.containsKey(AMBARI_DISPATCH_CREDENTIAL_PASSWORD)) {
      DispatchCredentials credentials=new DispatchCredentials();
      credentials.UserName=properties.get(AMBARI_DISPATCH_CREDENTIAL_USERNAME);
      credentials.Password=properties.get(AMBARI_DISPATCH_CREDENTIAL_PASSWORD);
      notification.Credentials=credentials;
    }
    if (null != targetProperties.Recipients) {
      List<Recipient> recipients=new ArrayList<Recipient>(targetProperties.Recipients.size());
      for (      String stringRecipient : targetProperties.Recipients) {
        Recipient recipient=new Recipient();
        recipient.Identifier=stringRecipient;
        recipients.add(recipient);
      }
      notification.Recipients=recipients;
    }
    notification.DispatchProperties=properties;
    NotificationDispatcher dispatcher=m_dispatchFactory.getDispatcher(targetType);
    DispatchRunnable runnable=new DispatchRunnable(dispatcher,notification);
    m_executor.execute(runnable);
  }
}
