{
  List<AlertNoticeEntity> pending=m_dao.findPendingNotices();
  if (pending.size() == 0) {
    return;
  }
  LOG.info("There are {} pending alert notices about to be dispatched...",pending.size());
  Map<AlertTargetEntity,List<AlertNoticeEntity>> aggregateMap=new HashMap<AlertTargetEntity,List<AlertNoticeEntity>>(pending.size());
  for (  AlertNoticeEntity notice : pending) {
    AlertTargetEntity target=notice.getAlertTarget();
    List<AlertNoticeEntity> notices=aggregateMap.get(target);
    if (null == notices) {
      notices=new ArrayList<AlertNoticeEntity>();
      aggregateMap.put(target,notices);
    }
    notice.setNotifyState(NotificationState.DISPATCHED);
    notice=m_dao.merge(notice);
    notices.add(notice);
  }
  Set<AlertTargetEntity> targets=aggregateMap.keySet();
  for (  AlertTargetEntity target : targets) {
    List<AlertNoticeEntity> notices=aggregateMap.get(target);
    if (null == notices || notices.size() == 0) {
      continue;
    }
    String targetType=target.getNotificationType();
    NotificationDispatcher dispatcher=m_dispatchFactory.getDispatcher(targetType);
    if (dispatcher.isDigestSupported()) {
      AlertNotification notification=buildNotificationFromTarget(target);
      notification.CallbackIds=new ArrayList<String>(notices.size());
      List<AlertHistoryEntity> histories=new ArrayList<AlertHistoryEntity>(notices.size());
      for (      AlertNoticeEntity notice : notices) {
        AlertHistoryEntity history=notice.getAlertHistory();
        histories.add(history);
        notification.CallbackIds.add(notice.getUuid());
      }
      try {
        renderDigestNotificationContent(dispatcher,notification,histories,target);
        DispatchRunnable runnable=new DispatchRunnable(dispatcher,notification);
        m_executor.execute(runnable);
      }
 catch (      Exception exception) {
        LOG.error("Unable to create notification for alerts",exception);
        notification.Callback.onFailure(notification.CallbackIds);
      }
    }
 else {
      for (      AlertNoticeEntity notice : notices) {
        AlertNotification notification=buildNotificationFromTarget(target);
        AlertHistoryEntity history=notice.getAlertHistory();
        notification.CallbackIds=Collections.singletonList(notice.getUuid());
        try {
          renderNotificationContent(dispatcher,notification,history,target);
          DispatchRunnable runnable=new DispatchRunnable(dispatcher,notification);
          m_executor.execute(runnable);
        }
 catch (        Exception exception) {
          LOG.error("Unable to create notification for alert",exception);
          notification.Callback.onFailure(notification.CallbackIds);
        }
      }
    }
  }
}
