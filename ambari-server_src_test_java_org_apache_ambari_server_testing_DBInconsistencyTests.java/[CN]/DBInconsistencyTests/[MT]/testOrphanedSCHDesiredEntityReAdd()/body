{
  Long clusterId=helper.createCluster();
  Assert.assertNotNull(clusterId);
  Cluster cluster=clusters.getCluster(OrmTestHelper.CLUSTER_NAME);
  Assert.assertNotNull(cluster);
  helper.addHost(clusters,cluster,"h1");
  helper.installHdfsService(cluster,serviceFactory,serviceComponentFactory,serviceComponentHostFactory,"h1");
  Collection<ServiceComponentHost> schList=clusters.getCluster(OrmTestHelper.CLUSTER_NAME).getServiceComponentHosts("HDFS","DATANODE");
  Assert.assertNotNull(schList);
  Collection<ServiceComponent> scList=cluster.getService("HDFS").getServiceComponents().values();
  Assert.assertNotNull(schList);
  cluster.deleteService("HDFS");
  List<HostComponentDesiredStateEntity> hostComponentDesiredStateEntities=hostComponentDesiredStateDAO.findAll();
  Assert.assertTrue(hostComponentDesiredStateEntities == null || hostComponentDesiredStateEntities.isEmpty());
  List<ServiceComponentDesiredStateEntity> serviceComponentDesiredStateEntities=serviceComponentDesiredStateDAO.findAll();
  Assert.assertTrue(serviceComponentDesiredStateEntities == null || serviceComponentDesiredStateEntities.isEmpty());
  EntityManager em=helper.getEntityManager();
  final EntityTransaction txn=em.getTransaction();
  txn.begin();
  for (  ServiceComponentHost sch : schList) {
    sch.setDesiredState(State.DISABLED);
  }
  for (  ServiceComponent sc : scList) {
    sc.setDesiredState(State.DISABLED);
  }
  txn.commit();
  hostComponentDesiredStateEntities=hostComponentDesiredStateDAO.findAll();
  Assert.assertTrue(hostComponentDesiredStateEntities == null || hostComponentDesiredStateEntities.isEmpty());
  serviceComponentDesiredStateEntities=serviceComponentDesiredStateDAO.findAll();
  Assert.assertTrue(serviceComponentDesiredStateEntities == null || serviceComponentDesiredStateEntities.isEmpty());
}
