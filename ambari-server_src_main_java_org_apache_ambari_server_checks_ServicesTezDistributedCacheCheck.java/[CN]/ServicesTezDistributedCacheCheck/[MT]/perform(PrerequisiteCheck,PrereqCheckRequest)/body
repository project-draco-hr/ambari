{
  final String clusterName=request.getClusterName();
  final Cluster cluster=clustersProvider.get().getCluster(clusterName);
  final String tezConfigType="tez-site";
  final String coreSiteConfigType="core-site";
  final Map<String,DesiredConfig> desiredConfigs=cluster.getDesiredConfigs();
  final DesiredConfig tezDesiredConfig=desiredConfigs.get(tezConfigType);
  final Config tezConfig=cluster.getConfig(tezConfigType,tezDesiredConfig.getTag());
  final DesiredConfig coreSiteDesiredConfig=desiredConfigs.get(coreSiteConfigType);
  final Config coreSiteConfig=cluster.getConfig(coreSiteConfigType,coreSiteDesiredConfig.getTag());
  final String libUris=tezConfig.getProperties().get("tez.lib.uris");
  final String useHadoopLibs=tezConfig.getProperties().get("tez.use.cluster.hadoop-libs");
  final String defaultFS=coreSiteConfig.getProperties().get("fs.defaultFS");
  List<String> errorMessages=new ArrayList<String>();
  if (libUris == null || libUris.isEmpty()) {
    errorMessages.add("Property tez.lib.uris is missing from tez-site, please add it.");
  }
  if (useHadoopLibs == null || useHadoopLibs.isEmpty()) {
    errorMessages.add("Property tez.use.cluster.hadoop-libs is missing from tez-site, please add it.");
  }
  if (!errorMessages.isEmpty()) {
    prerequisiteCheck.getFailedOn().add("TEZ");
    prerequisiteCheck.setStatus(PrereqCheckStatus.FAIL);
    prerequisiteCheck.setFailReason(StringUtils.join(errorMessages," "));
    return;
  }
  if (!libUris.matches("^[^:]*dfs:.*") && (defaultFS == null || !defaultFS.matches("^[^:]*dfs:.*"))) {
    errorMessages.add("Property tez.lib.uris in tez-site should use a distributed file system. Please make sure that either tez-site's tez.lib.uris or core-site's fs.defaultFS begins with *dfs:");
  }
  if (!libUris.contains("tar.gz")) {
    errorMessages.add("Property tez.lib.uris in tez-site should end in tar.gz");
  }
  if (Boolean.parseBoolean(useHadoopLibs)) {
    errorMessages.add("Property tez.use.cluster.hadoop-libs in tez-site should be set to false");
  }
  if (!errorMessages.isEmpty()) {
    prerequisiteCheck.getFailedOn().add("TEZ");
    prerequisiteCheck.setStatus(PrereqCheckStatus.FAIL);
    prerequisiteCheck.setFailReason(StringUtils.join(errorMessages," "));
  }
}
