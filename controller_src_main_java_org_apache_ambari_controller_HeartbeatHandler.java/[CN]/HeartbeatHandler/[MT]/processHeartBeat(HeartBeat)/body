{
  ControllerResponse response=agentToHeartbeatResponseMap.get(heartbeat.getHostname());
  if (response != null) {
    if (response.getResponseId() == heartbeat.getResponseId()) {
      return response;
    }
  }
  short responseId=(short)(Short.parseShort(response.getResponseId()) + 1);
  Node node=Nodes.getInstance().getNodes().get(heartbeat.getHostname());
  NodeState state=node.getNodeState();
  GregorianCalendar c=new GregorianCalendar();
  c.setTime(new Date());
  state.setLastHeartbeatTime(DatatypeFactory.newInstance().newXMLGregorianCalendar(c));
  Cluster cluster=Clusters.getInstance().getClusterByName(state.getClusterName());
  ClusterContext clusterContext=new ClusterContextImpl(cluster,node);
  List<Action> allActions=new ArrayList<Action>();
  if (heartbeat.getIdle()) {
    List<ServerStatus> roleStatuses=heartbeat.getServersStatus();
    StartedComponentServers componentServers=new StartedComponentServers();
    for (    ServerStatus status : roleStatuses) {
      componentServers.roleServerStarted(status.getComponent(),status.getRole());
    }
    org.apache.ambari.resource.statemachine.Cluster clusterSMobject=StateMachineInvoker.getStateMachineClusterInstance(state.getClusterName());
    List<Service> clusterServices=clusterSMobject.getServices();
    for (    Service service : clusterServices) {
      List<Role> roles=service.getRoles();
      for (      Role role : roles) {
        boolean roleServerRunning=componentServers.isStarted(role.getAssociatedService().getServiceName(),role.getRoleName());
        HDFSPluginImpl plugin=new HDFSPluginImpl();
        if (role.shouldStart()) {
          if (!roleServerRunning) {
            short retryCount=retryCountForRole.get(role);
            if (retryCount > MAX_RETRY_COUNT) {
              StateMachineInvoker.getAMBARIEventHandler().handle(new RoleEvent(RoleEventType.S_START_FAILURE,role));
              retryCountForRole.reset(role);
              continue;
            }
            List<Action> actions=plugin.startRoleServer(clusterContext,role.getRoleName());
            allActions.addAll(actions);
            retryCountForRole.incr(role);
          }
          if (roleServerRunning) {
            retryCountForRole.reset(role);
            StateMachineInvoker.getAMBARIEventHandler().handle(new RoleEvent(RoleEventType.S_START_SUCCESS,role));
          }
        }
        if (role.shouldStop()) {
          if (roleServerRunning) {
            short retryCount=retryCountForRole.get(role);
            if (retryCount > MAX_RETRY_COUNT) {
              StateMachineInvoker.getAMBARIEventHandler().handle(new RoleEvent(RoleEventType.S_STOP_FAILURE,role));
              retryCountForRole.reset(role);
              continue;
            }
            List<Action> actions=plugin.stopRoleServer(clusterContext,role.getRoleName());
            allActions.addAll(actions);
            retryCountForRole.incr(role);
          }
          if (!roleServerRunning) {
            retryCountForRole.reset(role);
            StateMachineInvoker.getAMBARIEventHandler().handle(new RoleEvent(RoleEventType.S_STOP_SUCCESS,role));
          }
        }
      }
    }
  }
  ControllerResponse r=new ControllerResponse();
  r.setResponseId(String.valueOf(responseId));
  r.setActions(allActions);
  agentToHeartbeatResponseMap.put(heartbeat.getHostname(),r);
  return r;
}
