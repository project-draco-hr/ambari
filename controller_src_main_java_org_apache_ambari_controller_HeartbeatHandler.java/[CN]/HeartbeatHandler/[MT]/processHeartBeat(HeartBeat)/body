{
  ControllerResponse response=agentToHeartbeatResponseMap.get(heartbeat.getHostname());
  if (response != null) {
    if (response.getResponseId() == heartbeat.getResponseId()) {
      return response;
    }
  }
  short responseId=(short)(Short.parseShort(response.getResponseId()) + 1);
  String hostname=heartbeat.getHostname();
  Node node=Nodes.getInstance().getNodes().get(hostname);
  NodeState state=node.getNodeState();
  GregorianCalendar c=new GregorianCalendar();
  c.setTime(new Date());
  state.setLastHeartbeatTime(DatatypeFactory.newInstance().newXMLGregorianCalendar(c));
  Cluster cluster=Clusters.getInstance().getClusterByID(state.getClusterID());
  List<Action> allActions=new ArrayList<Action>();
  if (heartbeat.getIdle()) {
    String desiredClusterId=cluster.getID();
    InstalledOrStartedComponents componentStates=new InstalledOrStartedComponents();
    ClusterFSM clusterFsm=StateMachineInvoker.getStateMachineClusterInstance(desiredClusterId);
    allActions=inspectAgentState(heartbeat,cluster,componentStates,clusterFsm);
    checkAndCreateActions(cluster,clusterFsm,heartbeat,allActions);
    getGatewayInstallActions(cluster,allActions,componentStates);
    List<ServiceFSM> clusterServices=clusterFsm.getServices();
    for (    ServiceFSM service : clusterServices) {
      List<RoleFSM> roles=service.getRoles();
      for (      RoleFSM role : roles) {
        boolean roleInstalled=componentStates.isInstalled(role.getAssociatedService().getServiceName(),role.getRoleName());
        boolean roleServerRunning=componentStates.isStarted(role.getAssociatedService().getServiceName(),role.getRoleName());
        ComponentPlugin plugin=cluster.getComponentDefinition(service.getServiceName());
        if (role.shouldStart()) {
          if (!roleInstalled) {
            Action action=plugin.install(cluster.getName(),role.getRoleName());
            fillDetailsAndAddAction(action,allActions,desiredClusterId,cluster.getLatestRevision(),service.getServiceName(),role.getRoleName());
            action=plugin.configure(desiredClusterId,role.getRoleName());
            fillDetailsAndAddAction(action,allActions,desiredClusterId,cluster.getLatestRevision(),service.getServiceName(),role.getRoleName());
            continue;
          }
          if (!roleServerRunning) {
            Action action=plugin.startServer(cluster.getName(),role.getRoleName());
            fillDetailsAndAddAction(action,allActions,desiredClusterId,cluster.getLatestRevision(),service.getServiceName(),role.getRoleName());
          }
          if (roleServerRunning) {
            StateMachineInvoker.getAMBARIEventHandler().handle(new RoleEvent(RoleEventType.START_SUCCESS,role));
          }
        }
        if (role.shouldStop()) {
          if (roleServerRunning) {
            addAction(getStopRoleAction(cluster.getID(),cluster.getLatestRevision(),role.getAssociatedService().getServiceName(),role.getRoleName()),allActions);
          }
          if (!roleServerRunning) {
            StateMachineInvoker.getAMBARIEventHandler().handle(new RoleEvent(RoleEventType.STOP_SUCCESS,role));
          }
          if (roleInstalled && clusterFsm.getClusterState().equals(ClusterState.CLUSTER_STATE_ATTIC)) {
            Action action=plugin.uninstall(cluster.getName(),role.getRoleName());
            fillDetailsAndAddAction(action,allActions,cluster.getID(),cluster.getLatestRevision(),role.getAssociatedService().getServiceName(),role.getRoleName());
          }
        }
      }
    }
  }
  ControllerResponse r=new ControllerResponse();
  r.setResponseId(String.valueOf(responseId));
  r.setActions(allActions);
  agentToHeartbeatResponseMap.put(heartbeat.getHostname(),r);
  return r;
}
