{
  String hostname=heartbeat.getHostname();
  Date heartbeatTime=new Date(System.currentTimeMillis());
  nodes.checkAndUpdateNode(hostname,heartbeatTime);
  boolean firstContact=heartbeat.getFirstContact();
  if (firstContact) {
    nodes.markNodeHealthy(hostname);
  }
  List<CommandResult> commandResult;
  if ((commandResult=failedActions(heartbeat)) != null && !commandResult.isEmpty()) {
    nodes.markNodeUnhealthy(hostname,commandResult);
  }
  short responseId=(short)(heartbeat.getResponseId() + 1);
  String clusterName=null;
  int clusterRev=0;
  List<Action> allActions=new ArrayList<Action>();
  if (nodes.getHeathOfNode(hostname) == NodeState.UNHEALTHY) {
    return createResponse(responseId,allActions,heartbeat);
  }
  if (heartbeat.getIdle()) {
    List<ClusterNameAndRev> clustersNodeBelongsTo=getClustersNodeBelongsTo(hostname);
    if (clustersNodeBelongsTo.isEmpty()) {
      return createResponse(responseId,allActions,heartbeat);
    }
    String script=clusters.getInstallAndConfigureScript(clustersNodeBelongsTo.get(0).getClusterName(),clustersNodeBelongsTo.get(0).getRevision());
    getInstallAndConfigureAction(script,allActions);
    if (!installAndConfigDone(script,heartbeat)) {
      return createResponse(responseId,allActions,heartbeat);
    }
    for (    ClusterNameAndRev clusterIdAndRev : clustersNodeBelongsTo) {
      clusterName=clusterIdAndRev.getClusterName();
      clusterRev=clusterIdAndRev.getRevision();
      Cluster cluster=clusters.getClusterByName(clusterName);
      ClusterFSM clusterFsm=driver.getFSMClusterInstance(clusterName);
      List<ServiceFSM> clusterServices=clusterFsm.getServices();
      for (      ServiceFSM service : clusterServices) {
        ComponentPlugin plugin=cluster.getComponentDefinition(service.getServiceName());
        if (!dependentComponentsActive(plugin,clusterFsm)) {
          continue;
        }
        List<RoleFSM> roles=service.getRoles();
        for (        RoleFSM role : roles) {
          boolean nodePlayingRole=nodePlayingRole(hostname,role.getRoleName());
          if (nodePlayingRole) {
            if (role.shouldStart()) {
              Action action=plugin.startServer(cluster.getName(),role.getRoleName());
              fillDetailsAndAddAction(action,allActions,clusterName,clusterRev,service.getServiceName(),role.getRoleName());
              if (wasStartRoleSuccessful(clusterIdAndRev,service.getServiceName(),role.getRoleName(),heartbeat)) {
                stateMachineInvoker.getAMBARIEventHandler().handle(new RoleEvent(RoleEventType.START_SUCCESS,role));
                NodeRole rolestate=new NodeRole(role.getRoleName(),NodeRole.NODE_SERVER_STATE_UP,Util.getXMLGregorianCalendar(new Date()));
                nodes.getNode(hostname).getNodeState().updateRoleState(rolestate);
              }
            }
            if (role.shouldStop()) {
              if (wasStopRoleSuccessful(clusterIdAndRev,service.getServiceName(),role.getRoleName(),heartbeat)) {
                stateMachineInvoker.getAMBARIEventHandler().handle(new RoleEvent(RoleEventType.STOP_SUCCESS,role));
                NodeRole rolestate=new NodeRole(role.getRoleName(),NodeRole.NODE_SERVER_STATE_DOWN,Util.getXMLGregorianCalendar(new Date()));
                nodes.getNode(hostname).getNodeState().updateRoleState(rolestate);
              }
            }
          }
        }
        checkAndCreateActions(cluster,clusterFsm,clusterIdAndRev,service,heartbeat,allActions);
      }
    }
  }
  return createResponse(responseId,allActions,heartbeat);
}
