{
  ControllerResponse response=agentToHeartbeatResponseMap.get(heartbeat.getHostname());
  if (response != null) {
    if (response.getResponseId() == heartbeat.getResponseId()) {
      return response;
    }
  }
  short responseId=(short)(Short.parseShort(response.getResponseId()) + 1);
  String hostname=heartbeat.getHostname();
  Node node=Nodes.getInstance().getNodes().get(hostname);
  NodeState state=node.getNodeState();
  GregorianCalendar c=new GregorianCalendar();
  c.setTime(new Date());
  state.setLastHeartbeatTime(DatatypeFactory.newInstance().newXMLGregorianCalendar(c));
  Cluster cluster=Clusters.getInstance().getClusterByID(state.getClusterID());
  ClusterContext clusterContext=new ClusterContextImpl(cluster,node);
  List<Action> allActions=new ArrayList<Action>();
  if (heartbeat.getIdle()) {
    String desiredBlueprint=cluster.getLatestClusterDefinition().getBlueprintName();
    String desiredBlueprintRev=cluster.getLatestClusterDefinition().getBlueprintRevision();
    String desiredClusterId=cluster.getID();
    StartedComponentServers componentServers=new StartedComponentServers();
    allActions=getStopAndUninstallActions(heartbeat,clusterContext,componentServers);
    ClusterFSM clusterSMobject=StateMachineInvoker.getStateMachineClusterInstance(desiredClusterId,desiredBlueprint,desiredBlueprintRev);
    List<ServiceFSM> clusterServices=clusterSMobject.getServices();
    for (    ServiceFSM service : clusterServices) {
      List<RoleFSM> roles=service.getRoles();
      for (      RoleFSM role : roles) {
        boolean roleServerRunning=componentServers.isStarted(role.getAssociatedService().getServiceName(),role.getRoleName());
        HDFSPluginImpl plugin=new HDFSPluginImpl();
        if (role.shouldStart()) {
          if (!roleServerRunning) {
            short retryCount=retryCountForRole.get(hostname);
            if (retryCount > MAX_RETRY_COUNT) {
              StateMachineInvoker.getAMBARIEventHandler().handle(new RoleEvent(RoleEventType.START_FAILURE,role));
              retryCountForRole.resetAttemptCount(hostname);
              continue;
            }
            List<Action> actions=plugin.startRoleServer(clusterContext,role.getRoleName());
            allActions.addAll(actions);
            retryCountForRole.incrAttemptCount(hostname);
          }
          if (roleServerRunning) {
            retryCountForRole.resetAttemptCount(hostname);
            StateMachineInvoker.getAMBARIEventHandler().handle(new RoleEvent(RoleEventType.START_SUCCESS,role));
          }
        }
        if (role.shouldStop()) {
          if (roleServerRunning) {
            short retryCount=retryCountForRole.get(hostname);
            if (retryCount > MAX_RETRY_COUNT) {
              StateMachineInvoker.getAMBARIEventHandler().handle(new RoleEvent(RoleEventType.STOP_FAILURE,role));
              retryCountForRole.resetAttemptCount(hostname);
              continue;
            }
            List<Action> actions=plugin.stopRoleServer(clusterContext,role.getRoleName());
            allActions.addAll(actions);
            retryCountForRole.incrAttemptCount(hostname);
          }
          if (!roleServerRunning) {
            retryCountForRole.resetAttemptCount(hostname);
            StateMachineInvoker.getAMBARIEventHandler().handle(new RoleEvent(RoleEventType.STOP_SUCCESS,role));
          }
        }
      }
    }
  }
  ControllerResponse r=new ControllerResponse();
  r.setResponseId(String.valueOf(responseId));
  r.setActions(allActions);
  agentToHeartbeatResponseMap.put(heartbeat.getHostname(),r);
  return r;
}
