{
  ControllerResponse response=agentToHeartbeatResponseMap.get(heartbeat.getHostname());
  if (response != null) {
    if (response.getResponseId() == heartbeat.getResponseId()) {
      return response;
    }
  }
  short responseId=(short)(heartbeat.getResponseId() + 1);
  String hostname=heartbeat.getHostname();
  Date heartbeatTime=new Date(System.currentTimeMillis());
  String clusterName=null;
  long clusterRev=0L;
  Nodes.getInstance().checkAndUpdateNode(hostname,heartbeatTime);
  List<Action> allActions=new ArrayList<Action>();
  clusterName=Nodes.getInstance().getNode(hostname).getNodeState().getClusterName();
  if (clusterName != null) {
    clusterRev=Clusters.getInstance().getClusterByName(clusterName).getLatestRevision();
  }
  ComponentAndRoleStates componentStates=new ComponentAndRoleStates();
  inspectAgentState(heartbeat,componentStates);
  Set<ClusterIdAndRev> clustersNodeBelongsTo=componentStates.getClustersNodeBelongsTo();
  if (heartbeat.getIdle()) {
    for (    ClusterIdAndRev clusterIdAndRev : clustersNodeBelongsTo) {
      if (!isCompatible(clusterIdAndRev.getClusterId(),clusterIdAndRev.getRevision(),clusterName,clusterRev)) {
        createStopAndUninstallActions(componentStates,allActions,clusterIdAndRev,true);
        continue;
      }
      Cluster cluster=Clusters.getInstance().getClusterByName(clusterIdAndRev.getClusterId());
      ClusterFSM clusterFsm=StateMachineInvoker.getStateMachineClusterInstance(clusterIdAndRev.getClusterId());
      List<ServiceFSM> clusterServices=clusterFsm.getServices();
      for (      ServiceFSM service : clusterServices) {
        List<RoleFSM> roles=service.getRoles();
        for (        RoleFSM role : roles) {
          boolean nodePlayingRole=nodePlayingRole(hostname,role.getRoleName());
          if (nodePlayingRole) {
            boolean roleInstalled=componentStates.isInstalled(clusterIdAndRev,role.getAssociatedService().getServiceName(),role.getRoleName());
            boolean roleServerRunning=componentStates.isStarted(clusterIdAndRev,role.getAssociatedService().getServiceName(),role.getRoleName()) || componentStates.isStartInProgress(clusterIdAndRev,role.getAssociatedService().getServiceName(),role.getRoleName());
            boolean agentRoleStateChanged=componentStates.hasStateChanged(clusterIdAndRev,role.getAssociatedService().getServiceName(),role.getRoleName());
            ComponentPlugin plugin=cluster.getComponentDefinition(service.getServiceName());
            if (role.shouldStart()) {
              if (!roleInstalled) {
                Action action=new Action();
                action.setKind(Kind.CREATE_STRUCTURE_ACTION);
                fillDetailsAndAddAction(action,allActions,clusterName,clusterRev,service.getServiceName(),role.getRoleName());
                action=plugin.install(cluster.getName(),role.getRoleName());
                fillDetailsAndAddAction(action,allActions,clusterName,clusterRev,service.getServiceName(),role.getRoleName());
                action=plugin.configure(clusterName,role.getRoleName());
                fillDetailsAndAddAction(action,allActions,clusterName,clusterRev,service.getServiceName(),role.getRoleName());
                continue;
              }
              if (role.getRoleName().equals("-client")) {
                roleServerRunning=true;
              }
              if (!roleServerRunning) {
                Action action=plugin.startServer(cluster.getName(),role.getRoleName());
                fillDetailsAndAddAction(action,allActions,clusterName,clusterRev,service.getServiceName(),role.getRoleName());
              }
              if (roleServerRunning && agentRoleStateChanged) {
                StateMachineInvoker.getAMBARIEventHandler().handle(new RoleEvent(RoleEventType.START_SUCCESS,role));
              }
              componentStates.continueRunning(clusterIdAndRev,role.getAssociatedService().getServiceName(),role.getRoleName());
            }
            if (role.shouldStop()) {
              if (role.getRoleName().contains("-client")) {
                roleServerRunning=false;
              }
              if (roleServerRunning) {
                addAction(getStopRoleAction(clusterName,clusterRev,role.getAssociatedService().getServiceName(),role.getRoleName()),allActions);
              }
              if (!roleServerRunning && agentRoleStateChanged) {
                StateMachineInvoker.getAMBARIEventHandler().handle(new RoleEvent(RoleEventType.STOP_SUCCESS,role));
              }
              if (roleInstalled && clusterFsm.getClusterState().equals(ClusterState.CLUSTER_STATE_ATTIC)) {
                Action action=plugin.uninstall(cluster.getName(),role.getRoleName());
                fillDetailsAndAddAction(action,allActions,clusterName,clusterRev,role.getAssociatedService().getServiceName(),role.getRoleName());
              }
            }
          }
          checkAndCreateActions(cluster,clusterFsm,clusterIdAndRev,service,heartbeat,allActions,componentStates);
        }
      }
      createStopAndUninstallActions(componentStates,allActions,clusterIdAndRev,false);
    }
  }
  ControllerResponse r=new ControllerResponse();
  r.setResponseId(responseId);
  r.setActions(allActions);
  agentToHeartbeatResponseMap.put(heartbeat.getHostname(),r);
  return r;
}
