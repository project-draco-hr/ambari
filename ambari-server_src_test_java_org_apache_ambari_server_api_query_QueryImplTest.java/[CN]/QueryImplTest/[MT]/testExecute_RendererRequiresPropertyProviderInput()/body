{
  EasyMockSupport mockSupport=new EasyMockSupport();
  ResourceDefinition mockResourceDefinition=mockSupport.createMock(ResourceDefinition.class);
  SubResourceDefinition mockSubResourceDefinition=mockSupport.createMock(SubResourceDefinition.class);
  ClusterController mockClusterController=mockSupport.createMock(ClusterController.class);
  Renderer mockRenderer=mockSupport.createMock(Renderer.class);
  QueryResponse mockQueryResponse=mockSupport.createMock(QueryResponse.class);
  QueryResponse mockSubQueryResponse=mockSupport.createMock(QueryResponse.class);
  Resource mockResource=mockSupport.createMock(Resource.class);
  Schema mockSchema=mockSupport.createMock(Schema.class);
  expect(mockResourceDefinition.getType()).andReturn(Resource.Type.Host).atLeastOnce();
  expect(mockResourceDefinition.getSubResourceDefinitions()).andReturn(Collections.singleton(mockSubResourceDefinition)).atLeastOnce();
  expect(mockSubResourceDefinition.getType()).andReturn(Resource.Type.Configuration).atLeastOnce();
  expect(mockSubResourceDefinition.isCollection()).andReturn(false).atLeastOnce();
  expect(mockSchema.getKeyPropertyId(isA(Resource.Type.class))).andReturn("test-value").anyTimes();
  expect(mockSchema.getKeyTypes()).andReturn(Collections.<Resource.Type>emptySet()).anyTimes();
  mockRenderer.init(isA(SchemaFactory.class));
  expect(mockRenderer.requiresPropertyProviderInput()).andReturn(true).times(2);
  expect(mockRenderer.finalizeProperties(isA(TreeNode.class),eq(true))).andReturn(new TreeNodeImpl<Set<String>>(null,Collections.<String>emptySet(),"test-node"));
  expect(mockRenderer.finalizeResult(isA(Result.class))).andReturn(null);
  expect(mockClusterController.getSchema(Resource.Type.Host)).andReturn(mockSchema).anyTimes();
  expect(mockClusterController.getSchema(Resource.Type.Configuration)).andReturn(mockSchema).anyTimes();
  expect(mockClusterController.getResources(eq(Resource.Type.Host),isA(Request.class),(Predicate)eq(null))).andReturn(mockQueryResponse).atLeastOnce();
  expect(mockClusterController.getResources(eq(Resource.Type.Configuration),isA(Request.class),(Predicate)eq(null))).andReturn(mockSubQueryResponse).atLeastOnce();
  expect(mockClusterController.getIterable(eq(Resource.Type.Host),isA(QueryResponse.class),isA(Request.class),(Predicate)eq(null),(PageRequest)eq(null),(SortRequest)eq(null))).andReturn(Collections.singleton(mockResource)).atLeastOnce();
  expect(mockClusterController.getIterable(eq(Resource.Type.Configuration),isA(QueryResponse.class),isA(Request.class),(Predicate)eq(null),(PageRequest)eq(null),(SortRequest)eq(null))).andReturn(Collections.singleton(mockResource)).atLeastOnce();
  expect(mockClusterController.populateResources(eq(Resource.Type.Host),eq(Collections.singleton(mockResource)),isA(Request.class),(Predicate)eq(null))).andReturn(Collections.<Resource>emptySet()).times(1);
  expect(mockClusterController.populateResources(eq(Resource.Type.Configuration),eq(Collections.singleton(mockResource)),isA(Request.class),(Predicate)eq(null))).andReturn(Collections.<Resource>emptySet()).times(1);
  expect(mockClusterController.getAmendedPredicate(eq(Resource.Type.Host),(Predicate)eq(null))).andReturn((Predicate)null).atLeastOnce();
  expect(mockQueryResponse.getResources()).andReturn(Collections.singleton(mockResource)).atLeastOnce();
  expect(mockSubQueryResponse.getResources()).andReturn(Collections.singleton(mockResource)).atLeastOnce();
  expect(mockResource.getType()).andReturn(Resource.Type.Host).atLeastOnce();
  Map<Resource.Type,String> mapIds=new HashMap<Resource.Type,String>();
  mockSupport.replayAll();
  QueryImpl instance=new QueryImpl(mapIds,mockResourceDefinition,mockClusterController);
  instance.setRenderer(mockRenderer);
  instance.ensureSubResources();
  instance.addProperty("*",null);
  instance.execute();
  mockSupport.verifyAll();
}
