{
  ResourceDefinition resourceDefinition=new StackVersionResourceDefinition();
  Map<Resource.Type,String> mapIds=new HashMap<Resource.Type,String>();
  QueryImpl instance=new TestQuery(mapIds,resourceDefinition);
  PredicateBuilder pb=new PredicateBuilder();
  Predicate predicate=pb.property("Versions/stack_version").equals("1.2.1").or().property("Versions/stack_version").equals("1.2.2").toPredicate();
  instance.setUserPredicate(predicate);
  instance.setPageRequest(new PageRequestImpl(PageRequest.StartingPoint.Beginning,1,0,null,null));
  Result result=instance.execute();
  TreeNode<Resource> tree=result.getResultTree();
  Assert.assertEquals(1,tree.getChildren().size());
  TreeNode<Resource> stackVersionNode=tree.getChild("StackVersion:1");
  Assert.assertEquals("StackVersion:1",stackVersionNode.getName());
  Assert.assertEquals(Resource.Type.StackVersion,stackVersionNode.getObject().getType());
  Assert.assertEquals("1.2.1",stackVersionNode.getObject().getPropertyValue("Versions/stack_version"));
  instance.setPageRequest(new PageRequestImpl(PageRequest.StartingPoint.OffsetStart,1,1,null,null));
  result=instance.execute();
  tree=result.getResultTree();
  Assert.assertEquals(1,tree.getChildren().size());
  stackVersionNode=tree.getChild("StackVersion:1");
  Assert.assertEquals("StackVersion:1",stackVersionNode.getName());
  Assert.assertEquals(Resource.Type.StackVersion,stackVersionNode.getObject().getType());
  Assert.assertEquals("1.2.2",stackVersionNode.getObject().getPropertyValue("Versions/stack_version"));
}
