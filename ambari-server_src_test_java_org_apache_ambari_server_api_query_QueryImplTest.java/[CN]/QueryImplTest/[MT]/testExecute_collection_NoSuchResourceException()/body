{
  ResourceDefinition resourceDefinition=new ClusterResourceDefinition();
  ClusterController clusterController=createNiceMock(ClusterController.class);
  QueryResponse queryResponse=createNiceMock(QueryResponse.class);
  Schema schema=createNiceMock(Schema.class);
  Renderer renderer=createNiceMock(Renderer.class);
  Iterable<Resource> iterable=createNiceMock(Iterable.class);
  Iterator<Resource> iterator=createNiceMock(Iterator.class);
  expect(clusterController.getSchema(Resource.Type.Cluster)).andReturn(schema).anyTimes();
  expect(clusterController.getResources(eq(Resource.Type.Cluster),anyObject(org.apache.ambari.server.controller.spi.Request.class),anyObject(Predicate.class))).andReturn(queryResponse);
  expect(clusterController.getIterable(eq(Resource.Type.Cluster),anyObject(QueryResponse.class),anyObject(org.apache.ambari.server.controller.spi.Request.class),anyObject(Predicate.class),anyObject(PageRequest.class),anyObject(SortRequest.class))).andReturn(iterable).anyTimes();
  expect(iterable.iterator()).andReturn(iterator).anyTimes();
  expect(iterator.hasNext()).andReturn(false).anyTimes();
  expect(queryResponse.getResources()).andReturn(Collections.<Resource>emptySet()).anyTimes();
  expect(schema.getKeyPropertyId(Resource.Type.Cluster)).andReturn("Clusters/cluster_name").anyTimes();
  TreeNode<Set<String>> treeNode=new TreeNodeImpl<Set<String>>(null,Collections.<String>emptySet(),null);
  expect(renderer.finalizeProperties(anyObject(TreeNode.class),anyBoolean())).andReturn(treeNode).anyTimes();
  Capture<Result> resultCapture=new Capture<Result>();
  expect(renderer.finalizeResult(capture(resultCapture))).andReturn(null);
  replay(clusterController,queryResponse,schema,renderer,iterable,iterator);
  QueryImpl query=new TestQuery(new HashMap<Resource.Type,String>(),resourceDefinition,clusterController);
  query.setRenderer(renderer);
  query.execute();
  TreeNode<Resource> tree=resultCapture.getValue().getResultTree();
  Assert.assertEquals(0,tree.getChildren().size());
  verify(clusterController,queryResponse,schema,renderer,iterable,iterator);
}
