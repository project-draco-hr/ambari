{
  ResourceInstance resource=createNiceMock(ResourceInstance.class);
  ResourceDefinition resourceDefinition=createNiceMock(ResourceDefinition.class);
  ResourceInstance subResource=createNiceMock(ResourceInstance.class);
  Schema schema=createNiceMock(Schema.class);
  Map<Resource.Type,String> mapResourceIds=new HashMap<Resource.Type,String>();
  mapResourceIds.put(Resource.Type.Service,"serviceName");
  mapResourceIds.put(Resource.Type.Component,"componentName");
  expect(resource.getResourceDefinition()).andReturn(resourceDefinition).anyTimes();
  expect(resourceDefinition.getType()).andReturn(Resource.Type.Service).anyTimes();
  expect(m_controller.getSchema(Resource.Type.Service)).andReturn(schema).anyTimes();
  expect(schema.getKeyPropertyId(Resource.Type.Service)).andReturn("serviceName").anyTimes();
  expect(schema.getKeyPropertyId(Resource.Type.Component)).andReturn("componentName").anyTimes();
  expect(resource.getSubResources()).andReturn(Collections.singletonMap("components",subResource)).anyTimes();
  expect(resource.getIds()).andReturn(mapResourceIds).anyTimes();
  replay(m_controller,resource,resourceDefinition,subResource,schema);
  Query query=new TestQuery(resource,null);
  query.addProperty(null,"components",null);
  Set<String> properties=query.getProperties();
  assertEquals(2,properties.size());
  assertTrue(properties.contains("serviceName"));
  assertTrue(properties.contains("componentName"));
  verify(m_controller,resource,resourceDefinition,subResource,schema);
}
