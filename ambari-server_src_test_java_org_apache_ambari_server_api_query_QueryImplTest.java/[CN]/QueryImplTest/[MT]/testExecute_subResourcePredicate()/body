{
  ResourceDefinition resourceDefinition=new StackResourceDefinition();
  Map<Resource.Type,String> mapIds=new HashMap<Resource.Type,String>();
  mapIds.put(Resource.Type.Stack,"HDP");
  QueryImpl instance=new TestQuery(mapIds,resourceDefinition);
  PredicateBuilder pb=new PredicateBuilder();
  Predicate predicate=pb.property("versions/operatingSystems/OperatingSystems/os_type").equals("centos5").toPredicate();
  instance.setUserPredicate(predicate);
  Result result=instance.execute();
  TreeNode<Resource> tree=result.getResultTree();
  Assert.assertEquals(1,tree.getChildren().size());
  TreeNode<Resource> stackNode=tree.getChild("Stack:1");
  Assert.assertEquals("Stack:1",stackNode.getName());
  Assert.assertEquals(Resource.Type.Stack,stackNode.getObject().getType());
  Assert.assertEquals(1,stackNode.getChildren().size());
  TreeNode<Resource> versionsNode=stackNode.getChild("versions");
  Assert.assertEquals(3,versionsNode.getChildren().size());
  TreeNode<Resource> versionNode=versionsNode.getChild("StackVersion:1");
  Assert.assertEquals("StackVersion:1",versionNode.getName());
  Assert.assertEquals(Resource.Type.StackVersion,versionNode.getObject().getType());
  Assert.assertEquals(1,versionNode.getChildren().size());
  TreeNode<Resource> opSystemsNode=versionNode.getChild("operatingSystems");
  Assert.assertEquals(1,opSystemsNode.getChildren().size());
  TreeNode<Resource> opSystemNode=opSystemsNode.getChild("OperatingSystem:1");
  Assert.assertEquals("OperatingSystem:1",opSystemNode.getName());
  Resource osResource=opSystemNode.getObject();
  Assert.assertEquals(Resource.Type.OperatingSystem,opSystemNode.getObject().getType());
  Assert.assertEquals("centos5",osResource.getPropertyValue("OperatingSystems/os_type"));
}
