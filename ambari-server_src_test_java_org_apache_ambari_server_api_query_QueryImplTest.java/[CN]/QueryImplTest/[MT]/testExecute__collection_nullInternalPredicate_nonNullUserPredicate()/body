{
  Result result=createStrictMock(Result.class);
  TreeNode<Resource> tree=createStrictMock(TreeNode.class);
  TreeNode<Resource> clusterNode=createStrictMock(TreeNode.class);
  ResourceDefinition clusterResourceDef=createMock(ResourceDefinition.class);
  Schema clusterSchema=createMock(Schema.class);
  Resource clusterResource=createStrictMock(Resource.class);
  PropertyId clusterPropertyId=PropertyHelper.getPropertyId("clusterId","");
  Predicate userPredicate=createMock(Predicate.class);
  Map<String,Set<String>> mapProperties=new HashMap<String,Set<String>>();
  mapProperties.put("",Collections.singleton("clusterId"));
  List<Resource> listResources=Collections.singletonList(clusterResource);
  Map<Resource.Type,String> mapResourceIds=new HashMap<Resource.Type,String>();
  expect(clusterResourceDef.getId()).andReturn(null).atLeastOnce();
  expect(m_controller.getSchema(Resource.Type.Component)).andReturn(clusterSchema).atLeastOnce();
  expect(clusterSchema.getCategories()).andReturn(mapProperties);
  expect(clusterSchema.getKeyPropertyId(Resource.Type.Component)).andReturn(clusterPropertyId).atLeastOnce();
  expect(result.getResultTree()).andReturn(tree).atLeastOnce();
  tree.setProperty("isCollection","true");
  expect(clusterResourceDef.getType()).andReturn(Resource.Type.Component).atLeastOnce();
  expect(clusterResourceDef.getResourceIds()).andReturn(mapResourceIds);
  expect(m_controller.getResources(eq(Resource.Type.Component),eq(PropertyHelper.getReadRequest(Collections.singleton(clusterPropertyId))),eq(userPredicate))).andReturn(listResources);
  expect(tree.addChild(clusterResource,null)).andReturn(clusterNode);
  replay(m_controller,result,tree,clusterNode,clusterResourceDef,clusterSchema,clusterResource,userPredicate);
  QueryImpl query=new TestQuery(clusterResourceDef,result);
  query.setUserPredicate(userPredicate);
  query.execute();
  verify(m_controller,result,tree,clusterNode,clusterResourceDef,clusterSchema,clusterResource,userPredicate);
}
