{
  Result result=createStrictMock(Result.class);
  ResourceDefinition componentResourceDef=createMock(ResourceDefinition.class);
  Schema componentSchema=createMock(Schema.class);
  Resource componentResource=createStrictMock(Resource.class);
  PropertyId componentPropertyId=PropertyHelper.getPropertyId("componentId","");
  Map<String,Set<String>> mapProperties=new HashMap<String,Set<String>>();
  mapProperties.put("",Collections.singleton("componentId"));
  TreeNode<Resource> tree=new TreeNodeImpl<Resource>(null,null,null);
  List<Resource> listResources=Collections.singletonList(componentResource);
  Map<Resource.Type,String> mapResourceIds=new HashMap<Resource.Type,String>();
  mapResourceIds.put(Resource.Type.Cluster,"clusterName");
  mapResourceIds.put(Resource.Type.Service,"serviceName");
  mapResourceIds.put(Resource.Type.Component,"componentName");
  PredicateBuilder pb=new PredicateBuilder();
  Predicate internalPredicate=pb.property("clusterId","").equals("clusterName").and().property("serviceId","").equals("serviceName").and().property("componentId","").equals("componentName").toPredicate();
  pb=new PredicateBuilder();
  Predicate userPredicate=pb.property("foo","").equals("bar").toPredicate();
  Predicate predicate=new AndPredicate((BasePredicate)internalPredicate,(BasePredicate)userPredicate);
  expect(componentResource.getType()).andReturn(Resource.Type.Component).anyTimes();
  expect(componentResourceDef.getId()).andReturn(null).atLeastOnce();
  expect(m_controller.getSchema(Resource.Type.Component)).andReturn(componentSchema).atLeastOnce();
  expect(componentSchema.getCategories()).andReturn(mapProperties);
  expect(componentSchema.getKeyPropertyId(Resource.Type.Component)).andReturn(componentPropertyId).atLeastOnce();
  expect(result.getResultTree()).andReturn(tree).atLeastOnce();
  expect(componentResourceDef.getType()).andReturn(Resource.Type.Component).atLeastOnce();
  expect(componentResourceDef.getResourceIds()).andReturn(mapResourceIds);
  expect(componentSchema.getKeyPropertyId(Resource.Type.Cluster)).andReturn(new PropertyIdImpl("clusterId","",false));
  expect(componentSchema.getKeyPropertyId(Resource.Type.Service)).andReturn(new PropertyIdImpl("serviceId","",false));
  expect(m_controller.getResources(eq(Resource.Type.Component),eq(PropertyHelper.getReadRequest(Collections.singleton(componentPropertyId))),eq(predicate))).andReturn(listResources);
  replay(m_controller,result,componentResourceDef,componentSchema,componentResource);
  QueryImpl query=new TestQuery(componentResourceDef,result);
  query.setUserPredicate(userPredicate);
  query.execute();
  verify(m_controller,result,componentResourceDef,componentSchema,componentResource);
  assertEquals("true",tree.getProperty("isCollection"));
  assertEquals(1,tree.getChildren().size());
  TreeNode<Resource> componentNode=tree.getChild("Component:1");
  assertSame(componentResource,componentNode.getObject());
  assertEquals(0,componentNode.getChildren().size());
}
