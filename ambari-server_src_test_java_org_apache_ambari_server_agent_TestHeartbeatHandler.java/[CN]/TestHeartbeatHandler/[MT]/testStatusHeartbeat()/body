{
  Cluster cluster=getDummyCluster();
  Service hdfs=cluster.addService(HDFS);
  hdfs.persist();
  hdfs.addServiceComponent(DATANODE).persist();
  hdfs.getServiceComponent(DATANODE).addServiceComponentHost(DummyHostname1).persist();
  hdfs.addServiceComponent(NAMENODE).persist();
  hdfs.getServiceComponent(NAMENODE).addServiceComponentHost(DummyHostname1).persist();
  hdfs.addServiceComponent(SECONDARY_NAMENODE).persist();
  hdfs.getServiceComponent(SECONDARY_NAMENODE).addServiceComponentHost(DummyHostname1).persist();
  ActionQueue aq=new ActionQueue();
  ServiceComponentHost serviceComponentHost1=clusters.getCluster(DummyCluster).getService(HDFS).getServiceComponent(DATANODE).getServiceComponentHost(DummyHostname1);
  ServiceComponentHost serviceComponentHost2=clusters.getCluster(DummyCluster).getService(HDFS).getServiceComponent(NAMENODE).getServiceComponentHost(DummyHostname1);
  ServiceComponentHost serviceComponentHost3=clusters.getCluster(DummyCluster).getService(HDFS).getServiceComponent(SECONDARY_NAMENODE).getServiceComponentHost(DummyHostname1);
  serviceComponentHost1.setState(State.INSTALLED);
  serviceComponentHost1.setSecurityState(SecurityState.UNSECURED);
  serviceComponentHost2.setState(State.INSTALLED);
  serviceComponentHost2.setSecurityState(SecurityState.SECURING);
  serviceComponentHost3.setState(State.STARTING);
  HeartBeat hb=new HeartBeat();
  hb.setTimestamp(System.currentTimeMillis());
  hb.setResponseId(0);
  hb.setHostname(DummyHostname1);
  hb.setNodeStatus(new HostStatus(Status.HEALTHY,DummyHostStatus));
  hb.setReports(new ArrayList<CommandReport>());
  ArrayList<ComponentStatus> componentStatuses=new ArrayList<ComponentStatus>();
  ComponentStatus componentStatus1=new ComponentStatus();
  componentStatus1.setClusterName(DummyCluster);
  componentStatus1.setServiceName(HDFS);
  componentStatus1.setMessage(DummyHostStatus);
  componentStatus1.setStatus(State.STARTED.name());
  componentStatus1.setSecurityState(SecurityState.SECURED_KERBEROS.name());
  componentStatus1.setComponentName(DATANODE);
  componentStatuses.add(componentStatus1);
  ComponentStatus componentStatus2=new ComponentStatus();
  componentStatus2.setClusterName(DummyCluster);
  componentStatus2.setServiceName(HDFS);
  componentStatus2.setMessage(DummyHostStatus);
  componentStatus2.setStatus(State.STARTED.name());
  componentStatus2.setSecurityState(SecurityState.UNSECURED.name());
  componentStatus2.setComponentName(SECONDARY_NAMENODE);
  componentStatuses.add(componentStatus2);
  hb.setComponentStatus(componentStatuses);
  final HostRoleCommand command=hostRoleCommandFactory.create(DummyHostname1,Role.DATANODE,null,null);
  ActionManager am=getMockActionManager();
  expect(am.getTasks(anyObject(List.class))).andReturn(new ArrayList<HostRoleCommand>(){
{
      add(command);
      add(command);
    }
  }
);
  replay(am);
  HeartBeatHandler handler=getHeartBeatHandler(am,aq);
  handler.handleHeartBeat(hb);
  State componentState1=serviceComponentHost1.getState();
  State componentState2=serviceComponentHost2.getState();
  State componentState3=serviceComponentHost3.getState();
  assertEquals(State.STARTED,componentState1);
  assertEquals(SecurityState.SECURED_KERBEROS,serviceComponentHost1.getSecurityState());
  assertEquals(State.INSTALLED,componentState2);
  assertEquals(SecurityState.SECURING,serviceComponentHost2.getSecurityState());
  assertEquals(State.STARTED,componentState3);
  assertEquals(SecurityState.UNSECURED,serviceComponentHost3.getSecurityState());
}
