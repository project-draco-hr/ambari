{
  Clusters fsm=clusters;
  Cluster cluster=heartbeatTestHelper.getDummyCluster();
  Host hostObject=clusters.getHost(DummyHostname1);
  Service hdfs=cluster.addService(HDFS);
  hdfs.persist();
  hdfs.addServiceComponent(DATANODE).persist();
  hdfs.getServiceComponent(DATANODE).addServiceComponentHost(DummyHostname1).persist();
  hdfs.addServiceComponent(NAMENODE).persist();
  hdfs.getServiceComponent(NAMENODE).addServiceComponentHost(DummyHostname1).persist();
  hdfs.getServiceComponent(NAMENODE).getServiceComponentHost(DummyHostname1).setState(State.STARTED);
  hdfs.getServiceComponent(DATANODE).getServiceComponentHost(DummyHostname1).setState(State.STARTED);
  ActionQueue aq=new ActionQueue();
  final HostRoleCommand command=hostRoleCommandFactory.create(DummyHostname1,Role.DATANODE,null,null);
  ActionManager am=heartbeatTestHelper.getMockActionManager();
  expect(am.getTasks(anyObject(List.class))).andReturn(new ArrayList<HostRoleCommand>(){
{
      add(command);
      add(command);
    }
  }
).anyTimes();
  replay(am);
  HeartBeatHandler handler=new HeartBeatHandler(fsm,aq,am,injector);
  Register reg=new Register();
  HostInfo hi=new HostInfo();
  hi.setHostName(DummyHostname1);
  hi.setOS(DummyOs);
  hi.setOSRelease(DummyOSRelease);
  reg.setHostname(DummyHostname1);
  reg.setHardwareProfile(hi);
  reg.setAgentVersion(metaInfo.getServerVersion());
  handler.handleRegistration(reg);
  hostObject.setState(HostState.UNHEALTHY);
  aq.enqueue(DummyHostname1,new StatusCommand());
  HeartBeat hb1=new HeartBeat();
  hb1.setResponseId(0);
  hb1.setNodeStatus(new HostStatus(Status.HEALTHY,DummyHostStatus));
  hb1.setHostname(DummyHostname1);
  RecoveryReport rr=new RecoveryReport();
  rr.setSummary("RECOVERABLE");
  List<ComponentRecoveryReport> compRecReports=new ArrayList<ComponentRecoveryReport>();
  ComponentRecoveryReport compRecReport=new ComponentRecoveryReport();
  compRecReport.setLimitReached(Boolean.FALSE);
  compRecReport.setName("DATANODE");
  compRecReport.setNumAttempts(2);
  compRecReports.add(compRecReport);
  rr.setComponentReports(compRecReports);
  hb1.setRecoveryReport(rr);
  handler.handleHeartBeat(hb1);
  assertEquals("RECOVERABLE",hostObject.getRecoveryReport().getSummary());
  assertEquals(1,hostObject.getRecoveryReport().getComponentReports().size());
  assertEquals(2,hostObject.getRecoveryReport().getComponentReports().get(0).getNumAttempts());
  HeartBeat hb2=new HeartBeat();
  hb2.setResponseId(1);
  hb2.setNodeStatus(new HostStatus(Status.HEALTHY,DummyHostStatus));
  hb2.setHostname(DummyHostname1);
  rr=new RecoveryReport();
  rr.setSummary("UNRECOVERABLE");
  compRecReports=new ArrayList<ComponentRecoveryReport>();
  compRecReport=new ComponentRecoveryReport();
  compRecReport.setLimitReached(Boolean.TRUE);
  compRecReport.setName("DATANODE");
  compRecReport.setNumAttempts(5);
  compRecReports.add(compRecReport);
  rr.setComponentReports(compRecReports);
  hb2.setRecoveryReport(rr);
  handler.handleHeartBeat(hb2);
  assertEquals("UNRECOVERABLE",hostObject.getRecoveryReport().getSummary());
  assertEquals(1,hostObject.getRecoveryReport().getComponentReports().size());
  assertEquals(5,hostObject.getRecoveryReport().getComponentReports().get(0).getNumAttempts());
}
