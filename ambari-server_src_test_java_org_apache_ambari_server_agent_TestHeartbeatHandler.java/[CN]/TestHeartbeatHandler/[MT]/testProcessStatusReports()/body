{
  Clusters fsm=clusters;
  Cluster cluster=heartbeatTestHelper.getDummyCluster();
  Host hostObject=clusters.getHost(DummyHostname1);
  Service hdfs=cluster.addService(HDFS);
  hdfs.persist();
  hdfs.addServiceComponent(DATANODE).persist();
  hdfs.getServiceComponent(DATANODE).addServiceComponentHost(DummyHostname1).persist();
  hdfs.addServiceComponent(NAMENODE).persist();
  hdfs.getServiceComponent(NAMENODE).addServiceComponentHost(DummyHostname1).persist();
  hdfs.getServiceComponent(NAMENODE).getServiceComponentHost(DummyHostname1).setState(State.STARTED);
  hdfs.getServiceComponent(DATANODE).getServiceComponentHost(DummyHostname1).setState(State.STARTED);
  ActionQueue aq=new ActionQueue();
  final HostRoleCommand command=hostRoleCommandFactory.create(DummyHostname1,Role.DATANODE,null,null);
  ActionManager am=heartbeatTestHelper.getMockActionManager();
  expect(am.getTasks(anyObject(List.class))).andReturn(new ArrayList<HostRoleCommand>(){
{
      add(command);
      add(command);
    }
  }
).anyTimes();
  replay(am);
  HeartBeatHandler handler=new HeartBeatHandler(fsm,aq,am,injector);
  HeartbeatProcessor heartbeatProcessor=handler.getHeartbeatProcessor();
  Register reg=new Register();
  HostInfo hi=new HostInfo();
  hi.setHostName(DummyHostname1);
  hi.setOS(DummyOs);
  hi.setOSRelease(DummyOSRelease);
  reg.setHostname(DummyHostname1);
  reg.setHardwareProfile(hi);
  reg.setAgentVersion(metaInfo.getServerVersion());
  handler.handleRegistration(reg);
  hostObject.setState(HostState.UNHEALTHY);
  aq.enqueue(DummyHostname1,new StatusCommand());
  HeartBeat hb1=new HeartBeat();
  hb1.setResponseId(0);
  hb1.setNodeStatus(new HostStatus(Status.HEALTHY,DummyHostStatus));
  hb1.setHostname(DummyHostname1);
  List<ComponentStatus> componentStatus=new ArrayList<ComponentStatus>();
  ComponentStatus dataNodeStatus=new ComponentStatus();
  dataNodeStatus.setClusterName(cluster.getClusterName());
  dataNodeStatus.setServiceName(HDFS);
  dataNodeStatus.setComponentName(DATANODE);
  dataNodeStatus.setStatus("STARTED");
  dataNodeStatus.setSecurityState(SecurityState.UNSECURED.name());
  componentStatus.add(dataNodeStatus);
  ComponentStatus nameNodeStatus=new ComponentStatus();
  nameNodeStatus.setClusterName(cluster.getClusterName());
  nameNodeStatus.setServiceName(HDFS);
  nameNodeStatus.setComponentName(NAMENODE);
  nameNodeStatus.setStatus("STARTED");
  nameNodeStatus.setSecurityState(SecurityState.UNSECURED.name());
  componentStatus.add(nameNodeStatus);
  hb1.setComponentStatus(componentStatus);
  handler.handleHeartBeat(hb1);
  heartbeatProcessor.processHeartbeat(hb1);
  assertEquals(HostHealthStatus.HealthStatus.HEALTHY.name(),hostObject.getStatus());
  HeartBeat hb2=new HeartBeat();
  hb2.setResponseId(1);
  hb2.setNodeStatus(new HostStatus(Status.HEALTHY,DummyHostStatus));
  hb2.setHostname(DummyHostname1);
  componentStatus=new ArrayList<ComponentStatus>();
  dataNodeStatus=new ComponentStatus();
  dataNodeStatus.setClusterName(cluster.getClusterName());
  dataNodeStatus.setServiceName(HDFS);
  dataNodeStatus.setComponentName(DATANODE);
  dataNodeStatus.setStatus("INSTALLED");
  dataNodeStatus.setSecurityState(SecurityState.UNSECURED.name());
  componentStatus.add(dataNodeStatus);
  nameNodeStatus=new ComponentStatus();
  nameNodeStatus.setClusterName(cluster.getClusterName());
  nameNodeStatus.setServiceName(HDFS);
  nameNodeStatus.setComponentName(NAMENODE);
  nameNodeStatus.setStatus("STARTED");
  nameNodeStatus.setSecurityState(SecurityState.UNSECURED.name());
  componentStatus.add(nameNodeStatus);
  hb2.setComponentStatus(componentStatus);
  handler.handleHeartBeat(hb2);
  heartbeatProcessor.processHeartbeat(hb2);
  assertEquals(HostHealthStatus.HealthStatus.ALERT.name(),hostObject.getStatus());
  hdfs.getServiceComponent(DATANODE).getServiceComponentHost(DummyHostname1).setMaintenanceState(MaintenanceState.ON);
  HeartBeat hb2a=new HeartBeat();
  hb2a.setResponseId(2);
  hb2a.setNodeStatus(new HostStatus(Status.HEALTHY,DummyHostStatus));
  hb2a.setHostname(DummyHostname1);
  componentStatus=new ArrayList<ComponentStatus>();
  dataNodeStatus=new ComponentStatus();
  dataNodeStatus.setClusterName(cluster.getClusterName());
  dataNodeStatus.setServiceName(HDFS);
  dataNodeStatus.setComponentName(DATANODE);
  dataNodeStatus.setStatus("INSTALLED");
  dataNodeStatus.setSecurityState(SecurityState.UNSECURED.name());
  componentStatus.add(dataNodeStatus);
  nameNodeStatus=new ComponentStatus();
  nameNodeStatus.setClusterName(cluster.getClusterName());
  nameNodeStatus.setServiceName(HDFS);
  nameNodeStatus.setComponentName(NAMENODE);
  nameNodeStatus.setStatus("STARTED");
  nameNodeStatus.setSecurityState(SecurityState.UNSECURED.name());
  componentStatus.add(nameNodeStatus);
  hb2a.setComponentStatus(componentStatus);
  handler.handleHeartBeat(hb2a);
  heartbeatProcessor.processHeartbeat(hb2a);
  assertEquals(HostHealthStatus.HealthStatus.HEALTHY.name(),hostObject.getStatus());
  hdfs.getServiceComponent(DATANODE).getServiceComponentHost(DummyHostname1).setMaintenanceState(MaintenanceState.OFF);
  HeartBeat hb3=new HeartBeat();
  hb3.setResponseId(3);
  hb3.setNodeStatus(new HostStatus(Status.HEALTHY,DummyHostStatus));
  hb3.setHostname(DummyHostname1);
  componentStatus=new ArrayList<ComponentStatus>();
  dataNodeStatus=new ComponentStatus();
  dataNodeStatus.setClusterName(cluster.getClusterName());
  dataNodeStatus.setServiceName(HDFS);
  dataNodeStatus.setComponentName(DATANODE);
  dataNodeStatus.setStatus("INSTALLED");
  dataNodeStatus.setSecurityState(SecurityState.UNSECURED.name());
  componentStatus.add(dataNodeStatus);
  nameNodeStatus=new ComponentStatus();
  nameNodeStatus.setClusterName(cluster.getClusterName());
  nameNodeStatus.setServiceName(HDFS);
  nameNodeStatus.setComponentName(NAMENODE);
  nameNodeStatus.setStatus("INSTALLED");
  nameNodeStatus.setSecurityState(SecurityState.UNSECURED.name());
  componentStatus.add(nameNodeStatus);
  hb3.setComponentStatus(componentStatus);
  handler.handleHeartBeat(hb3);
  heartbeatProcessor.processHeartbeat(hb3);
  assertEquals(HostHealthStatus.HealthStatus.UNHEALTHY.name(),hostObject.getStatus());
  hb1.setResponseId(4);
  handler.handleHeartBeat(hb1);
  heartbeatProcessor.processHeartbeat(hb1);
  assertEquals(HostHealthStatus.HealthStatus.HEALTHY.name(),hostObject.getStatus());
  reset(am);
  expect(am.getTasks(anyObject(List.class))).andReturn(new ArrayList<HostRoleCommand>(){
{
      add(command);
    }
  }
).anyTimes();
  replay(am);
  hdfs.getServiceComponent(NAMENODE).getServiceComponentHost(DummyHostname1).setState(State.INSTALLED);
  HeartBeat hb4=new HeartBeat();
  hb4.setResponseId(5);
  hb4.setNodeStatus(new HostStatus(Status.HEALTHY,DummyHostStatus));
  hb4.setHostname(DummyHostname1);
  componentStatus=new ArrayList<ComponentStatus>();
  dataNodeStatus=new ComponentStatus();
  dataNodeStatus.setClusterName(cluster.getClusterName());
  dataNodeStatus.setServiceName(HDFS);
  dataNodeStatus.setComponentName(DATANODE);
  dataNodeStatus.setStatus("STARTED");
  dataNodeStatus.setSecurityState(SecurityState.UNSECURED.name());
  componentStatus.add(dataNodeStatus);
  hb4.setComponentStatus(componentStatus);
  handler.handleHeartBeat(hb4);
  heartbeatProcessor.processHeartbeat(hb4);
  assertEquals(HostHealthStatus.HealthStatus.UNHEALTHY.name(),hostObject.getStatus());
  hb1.setResponseId(6);
  handler.handleHeartBeat(hb1);
  heartbeatProcessor.processHeartbeat(hb1);
  assertEquals(HostHealthStatus.HealthStatus.HEALTHY.name(),hostObject.getStatus());
  HeartBeat hb5=new HeartBeat();
  hb5.setResponseId(7);
  hb5.setNodeStatus(new HostStatus(Status.HEALTHY,DummyHostStatus));
  hb5.setHostname(DummyHostname1);
  CommandReport cr1=new CommandReport();
  cr1.setActionId(StageUtils.getActionId(requestId,stageId));
  cr1.setServiceName(HDFS);
  cr1.setTaskId(1);
  cr1.setRole(DATANODE);
  cr1.setStatus("COMPLETED");
  cr1.setStdErr("");
  cr1.setStdOut("");
  cr1.setExitCode(215);
  cr1.setRoleCommand("STOP");
  cr1.setClusterName(DummyCluster);
  ArrayList<CommandReport> reports=new ArrayList<CommandReport>();
  reports.add(cr1);
  hb5.setReports(reports);
  handler.handleHeartBeat(hb5);
  heartbeatProcessor.processHeartbeat(hb5);
  assertEquals(HostHealthStatus.HealthStatus.ALERT.name(),hostObject.getStatus());
}
