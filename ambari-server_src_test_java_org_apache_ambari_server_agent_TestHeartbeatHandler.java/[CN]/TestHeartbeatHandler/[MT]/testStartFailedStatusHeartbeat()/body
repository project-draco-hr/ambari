{
  ActionManager am=new ActionManager(0,0,null,null,new ActionDBInMemoryImpl(),new HostsMap((String)null));
  clusters.addHost(DummyHostname1);
  clusters.getHost(DummyHostname1).setOsType(DummyOsType);
  clusters.getHost(DummyHostname1).persist();
  clusters.addCluster(DummyCluster);
  Cluster cluster=clusters.getCluster(DummyCluster);
  cluster.setDesiredStackVersion(new StackId(DummyStackId));
  @SuppressWarnings("serial") Set<String> hostNames=new HashSet<String>(){
{
      add(DummyHostname1);
    }
  }
;
  clusters.mapHostsToCluster(hostNames,DummyCluster);
  Service hdfs=cluster.addService(HDFS);
  hdfs.persist();
  hdfs.addServiceComponent(DATANODE).persist();
  hdfs.getServiceComponent(DATANODE).addServiceComponentHost(DummyHostname1).persist();
  hdfs.addServiceComponent(NAMENODE).persist();
  hdfs.getServiceComponent(NAMENODE).addServiceComponentHost(DummyHostname1).persist();
  hdfs.addServiceComponent(SECONDARY_NAMENODE).persist();
  hdfs.getServiceComponent(SECONDARY_NAMENODE).addServiceComponentHost(DummyHostname1).persist();
  ActionQueue aq=new ActionQueue();
  HeartBeatHandler handler=new HeartBeatHandler(clusters,aq,am,injector);
  Register reg=new Register();
  HostInfo hi=new HostInfo();
  hi.setHostName(DummyHostname1);
  hi.setOS(DummyOs);
  hi.setOSRelease(DummyOSRelease);
  reg.setHostname(DummyHostname1);
  reg.setResponseId(0);
  reg.setHardwareProfile(hi);
  handler.handleRegistration(reg);
  ServiceComponentHost serviceComponentHost1=clusters.getCluster(DummyCluster).getService(HDFS).getServiceComponent(DATANODE).getServiceComponentHost(DummyHostname1);
  ServiceComponentHost serviceComponentHost2=clusters.getCluster(DummyCluster).getService(HDFS).getServiceComponent(NAMENODE).getServiceComponentHost(DummyHostname1);
  ServiceComponentHost serviceComponentHost3=clusters.getCluster(DummyCluster).getService(HDFS).getServiceComponent(SECONDARY_NAMENODE).getServiceComponentHost(DummyHostname1);
  serviceComponentHost1.setState(State.INSTALLED);
  serviceComponentHost2.setState(State.START_FAILED);
  serviceComponentHost3.setState(State.STARTED);
  HeartBeat hb=new HeartBeat();
  hb.setTimestamp(System.currentTimeMillis());
  hb.setResponseId(0);
  hb.setHostname(DummyHostname1);
  hb.setNodeStatus(new HostStatus(Status.HEALTHY,DummyHostStatus));
  hb.setReports(new ArrayList<CommandReport>());
  ArrayList<ComponentStatus> componentStatuses=new ArrayList<ComponentStatus>();
  ComponentStatus componentStatus1=new ComponentStatus();
  componentStatus1.setClusterName(DummyCluster);
  componentStatus1.setServiceName(HDFS);
  componentStatus1.setMessage(DummyHostStatus);
  componentStatus1.setStatus(State.START_FAILED.name());
  componentStatus1.setComponentName(DATANODE);
  componentStatuses.add(componentStatus1);
  ComponentStatus componentStatus2=new ComponentStatus();
  componentStatus2.setClusterName(DummyCluster);
  componentStatus2.setServiceName(HDFS);
  componentStatus2.setMessage(DummyHostStatus);
  componentStatus2.setStatus(State.INSTALLED.name());
  componentStatus2.setComponentName(NAMENODE);
  componentStatuses.add(componentStatus2);
  ComponentStatus componentStatus3=new ComponentStatus();
  componentStatus3.setClusterName(DummyCluster);
  componentStatus3.setServiceName(HDFS);
  componentStatus3.setMessage(DummyHostStatus);
  componentStatus3.setStatus(State.INSTALLED.name());
  componentStatus3.setComponentName(SECONDARY_NAMENODE);
  componentStatuses.add(componentStatus3);
  hb.setComponentStatus(componentStatuses);
  handler.handleHeartBeat(hb);
  State componentState1=serviceComponentHost1.getState();
  State componentState2=serviceComponentHost2.getState();
  State componentState3=serviceComponentHost3.getState();
  assertEquals(State.START_FAILED,componentState1);
  assertEquals(State.START_FAILED,componentState2);
  assertEquals(State.INSTALLED,componentState3);
}
