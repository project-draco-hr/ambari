{
  Cluster cluster=getDummyCluster();
  Service hdfs=cluster.addService(HDFS);
  hdfs.persist();
  hdfs.addServiceComponent(DATANODE).persist();
  hdfs.getServiceComponent(DATANODE).addServiceComponentHost(DummyHostname1).persist();
  hdfs.addServiceComponent(NAMENODE).persist();
  hdfs.getServiceComponent(NAMENODE).addServiceComponentHost(DummyHostname1).persist();
  hdfs.addServiceComponent(SECONDARY_NAMENODE).persist();
  hdfs.getServiceComponent(SECONDARY_NAMENODE).addServiceComponentHost(DummyHostname1).persist();
  ActionQueue aq=new ActionQueue();
  ServiceComponentHost serviceComponentHost1=clusters.getCluster(DummyCluster).getService(HDFS).getServiceComponent(DATANODE).getServiceComponentHost(DummyHostname1);
  ServiceComponentHost serviceComponentHost2=clusters.getCluster(DummyCluster).getService(HDFS).getServiceComponent(NAMENODE).getServiceComponentHost(DummyHostname1);
  serviceComponentHost1.setState(State.INSTALLED);
  serviceComponentHost2.setState(State.INSTALLED);
  HeartBeat hb=new HeartBeat();
  hb.setResponseId(0);
  hb.setNodeStatus(new HostStatus(Status.HEALTHY,DummyHostStatus));
  hb.setHostname(DummyHostname1);
  List<CommandReport> reports=new ArrayList<CommandReport>();
  CommandReport cr=new CommandReport();
  cr.setActionId(StageUtils.getActionId(requestId,stageId));
  cr.setServiceName(HDFS);
  cr.setTaskId(1);
  cr.setRole(DATANODE);
  cr.setStatus("COMPLETED");
  cr.setStdErr("");
  cr.setStdOut("");
  cr.setExitCode(215);
  cr.setRoleCommand("START");
  cr.setClusterName(DummyCluster);
  cr.setConfigurationTags(new HashMap<String,Map<String,String>>(){
{
      put("global",new HashMap<String,String>(){
{
          put("tag","version1");
        }
      }
);
    }
  }
);
  reports.add(cr);
  hb.setReports(reports);
  HostEntity host1=hostDAO.findByName(DummyHostname1);
  Assert.assertNotNull(host1);
  final HostRoleCommand command=hostRoleCommandFactory.create(DummyHostname1,Role.DATANODE,null,null);
  ActionManager am=getMockActionManager();
  expect(am.getTasks(anyObject(List.class))).andReturn(new ArrayList<HostRoleCommand>(){
{
      add(command);
    }
  }
);
  replay(am);
  HeartBeatHandler handler=getHeartBeatHandler(am,aq);
  handler.handleHeartBeat(hb);
  Assert.assertNotNull(serviceComponentHost1.getActualConfigs());
  Assert.assertEquals(serviceComponentHost1.getActualConfigs().size(),1);
}
