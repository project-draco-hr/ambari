@patch.object(subprocess, 'Popen')
@patch.object(Hardware, 'facterLib')
@patch('os.path.exists')
def test_facterInfo(self, os_path_exists_mock, hardware_facterLib_mock, subprocess_popen_mock):
    config = AmbariConfig().getConfig()
    config.set('puppet', 'facter_home', AmbariConfig().getConfig().get('stack', 'installprefix'))
    hardware = Hardware(config)
    facter = MagicMock()
    facter.communicate.return_value = [('memoryfree => 1 GB\n memorysize => 25 MB\n memorytotal => 300 KB\n ' + 'physicalprocessorcount => 25\n is_virtual => true\n'), 'no errors']
    facter.returncode = 0
    os.environ['RUBYLIB'] = AmbariConfig().getConfig().get('stack', 'installprefix')
    subprocess_popen_mock.return_value = facter
    os_path_exists_mock.return_value = True
    hardware_facterLib_mock.return_value = 'bla bla bla'
    facterInfo = hardware.facterInfo()
    self.assertEquals(facterInfo['memoryfree'], 1048576L)
    self.assertEquals(facterInfo['memorysize'], 25600L)
    self.assertEquals(facterInfo['memorytotal'], 300L)
    self.assertEquals(facterInfo['physicalprocessorcount'], 25)
    self.assertTrue(facterInfo['is_virtual'])
    self.assertEquals(subprocess_popen_mock.call_args[1]['env']['RUBYLIB'], ((AmbariConfig().getConfig().get('stack', 'installprefix') + ':') + 'bla bla bla'))
    facter.communicate.return_value = [('memoryfree => 1 G\n memorysize => 25 M\n memorytotal => 300 K\n ' + 'someinfo => 12 Byte\n ssh_name_key => Aa06Fdd\n'), 'no errors']
    facterInfo = hardware.facterInfo()
    facter.returncode = 1
    self.assertEquals(facterInfo['memoryfree'], 1048576L)
    self.assertEquals(facterInfo['memorysize'], 25600L)
    self.assertEquals(facterInfo['memorytotal'], 300L)
    self.assertEquals(facterInfo['someinfo'], '12 Byte')
    self.assertFalse(facterInfo.has_key('ssh_name_key'))
    facter.communicate.return_value = ['memoryfree => 1024 M B\n memorytotal => 1024 Byte', 'no errors']
    facterInfo = hardware.facterInfo()
    self.assertEquals(facterInfo['memoryfree'], 1L)
    self.assertEquals(facterInfo['memorytotal'], 1L)
    os_path_exists_mock.return_value = False
    facterInfo = hardware.facterInfo()
    self.assertEquals(facterInfo, {})
