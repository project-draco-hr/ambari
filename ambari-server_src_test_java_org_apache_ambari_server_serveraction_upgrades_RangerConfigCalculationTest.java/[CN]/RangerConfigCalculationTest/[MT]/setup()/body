{
  m_injector=EasyMock.createMock(Injector.class);
  m_clusters=EasyMock.createMock(Clusters.class);
  Cluster cluster=EasyMock.createMock(Cluster.class);
  Config adminConfig=new ConfigImpl("admin-properties"){
    Map<String,String> mockProperties=new HashMap<String,String>(){
{
        put("DB_FLAVOR","MYSQL");
        put("db_host","host1");
        put("db_name","ranger");
        put("audit_db_name","ranger_audit");
      }
    }
;
    @Override public Map<String,String> getProperties(){
      return mockProperties;
    }
  }
;
  Config adminSiteConfig=new ConfigImpl("admin-properties"){
    Map<String,String> mockProperties=new HashMap<String,String>();
    @Override public Map<String,String> getProperties(){
      return mockProperties;
    }
    @Override public void setProperties(    Map<String,String> properties){
      mockProperties.putAll(properties);
    }
    @Override public void persist(    boolean newConfig){
    }
  }
;
  expect(cluster.getDesiredConfigByType("admin-properties")).andReturn(adminConfig).atLeastOnce();
  expect(cluster.getDesiredConfigByType("ranger-admin-site")).andReturn(adminSiteConfig).atLeastOnce();
  expect(m_clusters.getCluster((String)anyObject())).andReturn(cluster).anyTimes();
  expect(m_injector.getInstance(Clusters.class)).andReturn(m_clusters).atLeastOnce();
  replay(m_injector,m_clusters,cluster);
  m_clusterField=RangerConfigCalculation.class.getDeclaredField("m_clusters");
  m_clusterField.setAccessible(true);
}
