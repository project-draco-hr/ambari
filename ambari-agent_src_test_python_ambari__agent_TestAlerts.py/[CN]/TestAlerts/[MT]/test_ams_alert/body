@patch.object(AmsAlert, '_load_metric')
def test_ams_alert(self, ma_load_metric_mock):
    definition_json = self._get_ams_alert_definition()
    configuration = {'ams-site': {'timeline.metrics.service.webapp.address': 'c6401.ambari.apache.org:6188', }, }
    collector = AlertCollector()
    cluster_configuration = self.__get_cluster_configuration()
    self.__update_cluster_configuration(cluster_configuration, configuration)
    alert = AmsAlert(definition_json, definition_json['source'], self.config)
    alert.set_helpers(collector, cluster_configuration)
    alert.set_cluster('c1', 'c6401.ambari.apache.org')
    ma_load_metric_mock.return_value = ([{1: 100, 2: 100, 3: 200, 4: 200, }], None)
    alert.collect()
    alerts = collector.alerts()
    self.assertEquals(0, len(collector.alerts()))
    self.assertEquals('OK', alerts[0]['state'])
    self.assertEquals('(Unit Tests) OK: the mean used heap size is 150 MB.', alerts[0]['text'])
    ma_load_metric_mock.return_value = ([{1: 800, 2: 800, 3: 900, 4: 900, }], None)
    alert.collect()
    alerts = collector.alerts()
    self.assertEquals(0, len(collector.alerts()))
    self.assertEquals('WARNING', alerts[0]['state'])
    self.assertEquals('(Unit Tests) Warning: the mean used heap size is 850 MB.', alerts[0]['text'])
    ma_load_metric_mock.return_value = ([{1: 1000, 2: 1000, 3: 2000, 4: 2000, }], None)
    alert.collect()
    alerts = collector.alerts()
    self.assertEquals(0, len(collector.alerts()))
    self.assertEquals('CRITICAL', alerts[0]['state'])
    self.assertEquals('(Unit Tests) Critical: the mean used heap size is 1500 MB.', alerts[0]['text'])
