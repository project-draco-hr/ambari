@patch.object(RecoveryManager, 'is_action_info_stale')
@patch.object(RecoveryManager, 'get_actions_copy')
def test_recovery_alert(self, rm_get_actions_mock, is_stale_mock):
    definition_json = self._get_recovery_alert_definition()
    is_stale_mock.return_value = False
    rm_get_actions_mock.return_value = {'METRICS_COLLECTOR': {'count': 0, 'lastAttempt': 1447860184, 'warnedLastReset': False, 'lastReset': 1447860184, 'warnedThresholdReached': False, 'lifetimeCount': 1, 'warnedLastAttempt': False, }, }
    collector = AlertCollector()
    cluster_configuration = self.__get_cluster_configuration()
    self.__update_cluster_configuration(cluster_configuration, {})
    rm = RecoveryManager(tempfile.mktemp(), True)
    alert = RecoveryAlert(definition_json, definition_json['source'], self.config, rm)
    alert.set_helpers(collector, cluster_configuration)
    alert.set_cluster('c1', 'c6401.ambari.apache.org')
    self.assertEquals(1, alert.interval())
    alert.collect()
    alerts = collector.alerts()
    self.assertEquals(0, len(collector.alerts()))
    self.assertEquals('OK', alerts[0]['state'])
    rm_get_actions_mock.return_value = {'METRICS_COLLECTOR': {'count': 1, 'lastAttempt': 1447860184, 'warnedLastReset': False, 'lastReset': 1447860184, 'warnedThresholdReached': False, 'lifetimeCount': 1, 'warnedLastAttempt': False, }, }
    alert.collect()
    alerts = collector.alerts()
    self.assertEquals(0, len(collector.alerts()))
    self.assertEquals('WARNING', alerts[0]['state'])
    rm_get_actions_mock.return_value = {'METRICS_COLLECTOR': {'count': 5, 'lastAttempt': 1447860184, 'warnedLastReset': False, 'lastReset': 1447860184, 'warnedThresholdReached': False, 'lifetimeCount': 1, 'warnedLastAttempt': False, }, }
    alert.collect()
    alerts = collector.alerts()
    self.assertEquals(0, len(collector.alerts()))
    self.assertEquals('CRITICAL', alerts[0]['state'])
    is_stale_mock.return_value = True
    alert.collect()
    alerts = collector.alerts()
    self.assertEquals(0, len(collector.alerts()))
    self.assertEquals('OK', alerts[0]['state'])
    rm_get_actions_mock.return_value = {'METRICS_COLLECTOR': {'count': 5, 'lastAttempt': 1447860184, 'warnedLastReset': False, 'lastReset': 1447860184, 'warnedThresholdReached': True, 'lifetimeCount': 12, 'warnedLastAttempt': False, }, }
    is_stale_mock.return_value = True
    alert.collect()
    alerts = collector.alerts()
    self.assertEquals(0, len(collector.alerts()))
    self.assertEquals('CRITICAL', alerts[0]['state'])
