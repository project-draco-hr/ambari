@patch('time.time')
@patch.object(socket.socket, 'connect')
def test_port_alert(self, socket_connect_mock, time_mock):
    time_mock.side_effect = [0, 900, 336283200000, 0, 2000, 336283200000, socket.timeout, 336283200000]
    json = {'name': 'namenode_process', 'service': 'HDFS', 'component': 'NAMENODE', 'label': 'NameNode process', 'interval': 6, 'scope': 'host', 'enabled': True, 'uuid': 'c1f73191-4481-4435-8dae-fd380e4c0be1', 'source': {'type': 'PORT', 'uri': '{{hdfs-site/my-key}}', 'default_port': 50070, 'reporting': {'ok': {'text': '(Unit Tests) TCP OK - {0:.4f} response time on port {1}', }, 'warning': {'text': '(Unit Tests) TCP WARN - {0:.4f} response time on port {1}', 'value': 1.5, }, 'critical': {'text': '(Unit Tests) Could not load process info: {0}', 'value': 5.0, }, }, }, }
    collector = AlertCollector()
    pa = PortAlert(json, json['source'])
    pa.set_helpers(collector, {'hdfs-site/my-key': 'value1', })
    self.assertEquals(6, pa.interval())
    pa.collect()
    alerts = collector.alerts()
    self.assertEquals(0, len(collector.alerts()))
    self.assertEquals('OK', alerts[0]['state'])
    pa.collect()
    alerts = collector.alerts()
    self.assertEquals(0, len(collector.alerts()))
    self.assertEquals('WARNING', alerts[0]['state'])
    pa.collect()
    alerts = collector.alerts()
    self.assertEquals(0, len(collector.alerts()))
    self.assertEquals('CRITICAL', alerts[0]['state'])
