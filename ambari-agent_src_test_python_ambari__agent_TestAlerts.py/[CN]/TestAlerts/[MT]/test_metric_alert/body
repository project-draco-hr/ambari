@patch.object(MetricAlert, '_load_jmx')
def test_metric_alert(self, ma_load_jmx_mock):
    json = {'name': 'cpu_check', 'service': 'HDFS', 'component': 'NAMENODE', 'label': 'NameNode process', 'interval': 6, 'scope': 'host', 'source': {'type': 'METRIC', 'uri': 'http://myurl:8633', 'jmx': {'property_list': ['someJmxObject/value', 'someOtherJmxObject/value'], 'value': '{0} * 100 + 123', }, 'reporting': {'ok': {'text': 'ok_arr: {0} {1} {2}', }, 'warning': {'text': '', 'value': 13, }, 'critical': {'text': 'crit_arr: {0} {1} {2}', 'value': 72, }, }, }, }
    ma_load_jmx_mock.return_value = [1, 3]
    collector = AlertCollector()
    ma = MetricAlert(json, json['source'])
    ma.set_helpers(collector, '')
    ma.collect()
    self.assertEquals('CRITICAL', collector.alerts()[0]['state'])
    self.assertEquals('crit_arr: 1 3 223', collector.alerts()[0]['text'])
    del json['source']['jmx']['value']
    collector = AlertCollector()
    ma = MetricAlert(json, json['source'])
    ma.set_helpers(collector, '')
    ma.collect()
    self.assertEquals('OK', collector.alerts()[0]['state'])
    self.assertEquals('ok_arr: 1 3 None', collector.alerts()[0]['text'])
