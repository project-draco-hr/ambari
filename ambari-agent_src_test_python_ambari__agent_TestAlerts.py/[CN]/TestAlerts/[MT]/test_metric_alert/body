@patch.object(MetricAlert, '_load_jmx')
def test_metric_alert(self, ma_load_jmx_mock):
    definition_json = {'name': 'cpu_check', 'service': 'HDFS', 'component': 'NAMENODE', 'label': 'NameNode process', 'interval': 6, 'scope': 'host', 'enabled': True, 'uuid': 'c1f73191-4481-4435-8dae-fd380e4c0be1', 'source': {'type': 'METRIC', 'uri': {'http': '{{hdfs-site/dfs.datanode.http.address}}', }, 'jmx': {'property_list': ['someJmxObject/value', 'someOtherJmxObject/value'], 'value': '{0} * 100 + 123', }, 'reporting': {'ok': {'text': '(Unit Tests) ok_arr: {0} {1} {2}', }, 'warning': {'text': '', 'value': 13, }, 'critical': {'text': '(Unit Tests) crit_arr: {0} {1} {2}', 'value': 72, }, }, }, }
    ma_load_jmx_mock.return_value = [1, 3]
    configuration = {'hdfs-site': {'dfs.datanode.http.address': '1.2.3.4:80', }, }
    collector = AlertCollector()
    cluster_configuration = self.__get_cluster_configuration()
    self.__update_cluster_configuration(cluster_configuration, configuration)
    alert = MetricAlert(definition_json, definition_json['source'])
    alert.set_helpers(collector, cluster_configuration)
    alert.set_cluster('c1', 'c6401.ambari.apache.org')
    alert.collect()
    alerts = collector.alerts()
    self.assertEquals(0, len(collector.alerts()))
    self.assertEquals('CRITICAL', alerts[0]['state'])
    self.assertEquals('(Unit Tests) crit_arr: 1 3 223', alerts[0]['text'])
    del definition_json['source']['jmx']['value']
    collector = AlertCollector()
    alert = MetricAlert(definition_json, definition_json['source'])
    alert.set_helpers(collector, cluster_configuration)
    alert.set_cluster('c1', 'c6401.ambari.apache.org')
    alert.collect()
    alerts = collector.alerts()
    self.assertEquals(0, len(collector.alerts()))
    self.assertEquals('OK', alerts[0]['state'])
    self.assertEquals('(Unit Tests) ok_arr: 1 3 None', alerts[0]['text'])
