@patch.object(MetricAlert, '_load_jmx')
def test_alert_uri_structure(self, ma_load_jmx_mock):
    json = {'name': 'cpu_check', 'service': 'HDFS', 'component': 'NAMENODE', 'label': 'NameNode process', 'interval': 6, 'scope': 'host', 'enabled': True, 'uuid': 'c1f73191-4481-4435-8dae-fd380e4c0be1', 'source': {'type': 'METRIC', 'uri': {'http': '{{hdfs-site/dfs.datanode.http.address}}', 'https': '{{hdfs-site/dfs.datanode.https.address}}', 'https_property': '{{hdfs-site/dfs.http.policy}}', 'https_property_value': 'HTTPS_ONLY', }, 'jmx': {'property_list': ['someJmxObject/value', 'someOtherJmxObject/value'], 'value': '{0}', }, 'reporting': {'ok': {'text': 'ok_arr: {0} {1} {2}', }, 'warning': {'text': '', 'value': 10, }, 'critical': {'text': 'crit_arr: {0} {1} {2}', 'value': 20, }, }, }, }
    ma_load_jmx_mock.return_value = [1, 1]
    collector = AlertCollector()
    ma = MetricAlert(json, json['source'])
    ma.set_helpers(collector, '')
    ma.collect()
    self.assertEquals('UNKNOWN', collector.alerts()[0]['state'])
    collector = AlertCollector()
    ma = MetricAlert(json, json['source'])
    ma.set_helpers(collector, {'hdfs-site/dfs.http.policy': 'HTTP_ONLY', })
    ma.collect()
    self.assertEquals('UNKNOWN', collector.alerts()[0]['state'])
    collector = AlertCollector()
    ma = MetricAlert(json, json['source'])
    ma.set_helpers(collector, {'hdfs-site/dfs.datanode.http.address': '1.2.3.4:80', 'hdfs-site/dfs.http.policy': 'HTTP_ONLY', })
    ma.collect()
    self.assertEquals('OK', collector.alerts()[0]['state'])
    collector = AlertCollector()
    ma = MetricAlert(json, json['source'])
    ma.set_helpers(collector, {'hdfs-site/dfs.datanode.https.address': '1.2.3.4:443', 'hdfs-site/dfs.http.policy': 'HTTP_ONLY', })
    ma.collect()
    self.assertEquals('OK', collector.alerts()[0]['state'])
    collector = AlertCollector()
    ma = MetricAlert(json, json['source'])
    ma.set_helpers(collector, {'hdfs-site/dfs.datanode.http.address': '1.2.3.4:80', 'hdfs-site/dfs.datanode.https.address': '1.2.3.4:443', 'hdfs-site/dfs.http.policy': 'HTTP_ONLY', })
    ma.collect()
    self.assertEquals('OK', collector.alerts()[0]['state'])
