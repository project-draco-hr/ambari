@patch('os.path.exists')
@patch('os.makedirs')
@patch('os.path.isfile')
@patch('json.load')
@patch('resource_management.libraries.functions.security_commons.new_cached_exec')
@patch('__builtin__.open')
def test_cached_executor(self, open_file_mock, new_cached_exec_mock, json_load_mock, os_isfile_mock, os_makedirs_mock, os_path_exists_mock):
    temp_dir = gettempdir()
    kinit_path = 'kinit'
    user = 'user'
    hostname = 'hostnamne'
    keytab_file = '/etc/security/keytabs/nn.service.keytab'
    principal = 'nn/c6405.ambari.apache.org@EXAMPLE.COM'
    key = str(hash(('%s|%s' % (principal, keytab_file))))
    expiration_time = 30
    filename = (key + '_tmp.txt')
    file_path = ((temp_dir + os.sep) + 'kinit_executor_cache')
    os_path_exists_mock.return_value = True
    os_isfile_mock.return_value = True
    output = {}
    output[key] = {}
    output[key] = {'last_successful_execution': str(datetime.now()), }
    json_load_mock.return_value = output
    self.assertEquals(cached_kinit_executor(kinit_path, user, keytab_file, principal, hostname, temp_dir, expiration_time), True)
    os_path_exists_mock.assert_called_with(file_path)
    os_isfile_mock.assert_called_with(((file_path + os.sep) + filename))
    open_file_mock.assert_called_with(((file_path + os.sep) + filename), 'r')
    last_successful_executation = datetime.now()
    last_successful_executation = (last_successful_executation - timedelta(minutes=31))
    output_error = {}
    output_error[key] = {}
    output_error[key] = {'last_successful_execution': str(last_successful_executation), }
    json_load_mock.reset_mock()
    json_load_mock.return_value = output_error
    new_cached_exec_mock.return_value = output
    cached_kinit_executor(kinit_path, user, keytab_file, principal, hostname, temp_dir, expiration_time)
    self.assertTrue(new_cached_exec_mock.called)
    new_cached_exec_mock.assert_called_with(key, ((file_path + os.sep) + filename), kinit_path, user, principal, keytab_file, hostname)
    os_path_exists_mock.return_value = False
    cached_kinit_executor(kinit_path, user, keytab_file, principal, hostname, temp_dir, expiration_time)
    os_makedirs_mock.assert_called_with(file_path)
    os_path_exists_mock.return_value = True
    json_load_mock.reset_mock()
    json_load_mock.side_effect = Exception('Invalid file')
    try:
        cached_kinit_executor(kinit_path, user, keytab_file, principal, hostname, temp_dir, expiration_time)
    except:
        self.assertTrue(True)
    json_load_mock.reset_mock()
    json_load_mock.return_value = None
    new_cached_exec_mock.return_value = output
    cached_kinit_executor(kinit_path, user, keytab_file, principal, hostname, temp_dir, expiration_time)
    self.assertTrue(new_cached_exec_mock.called)
    new_cached_exec_mock.assert_called_with(key, ((file_path + os.sep) + filename), kinit_path, user, principal, keytab_file, hostname)
