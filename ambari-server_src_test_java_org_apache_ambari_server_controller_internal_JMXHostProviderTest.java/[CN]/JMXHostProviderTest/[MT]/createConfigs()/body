{
  String clusterName="c1";
  ClusterRequest r=new ClusterRequest(null,clusterName,"HDP-2.0.6",null);
  controller.createCluster(r);
  Cluster cluster=clusters.getCluster(clusterName);
  cluster.setDesiredStackVersion(new StackId("HDP-2.0.6"));
  String serviceName="HDFS";
  String serviceName2="YARN";
  String serviceName3="MAPREDUCE2";
  createService(clusterName,serviceName,null);
  createService(clusterName,serviceName2,null);
  createService(clusterName,serviceName3,null);
  String componentName1="NAMENODE";
  String componentName2="DATANODE";
  String componentName3="HDFS_CLIENT";
  String componentName4="RESOURCEMANAGER";
  String componentName5="JOURNALNODE";
  String componentName6="HISTORYSERVER";
  String componentName7="NODEMANAGER";
  createServiceComponent(clusterName,serviceName,componentName1,State.INIT);
  createServiceComponent(clusterName,serviceName,componentName2,State.INIT);
  createServiceComponent(clusterName,serviceName,componentName3,State.INIT);
  createServiceComponent(clusterName,serviceName2,componentName4,State.INIT);
  createServiceComponent(clusterName,serviceName,componentName5,State.INIT);
  createServiceComponent(clusterName,serviceName3,componentName6,State.INIT);
  createServiceComponent(clusterName,serviceName2,componentName7,State.INIT);
  String host1="h1";
  clusters.addHost(host1);
  Map<String,String> hostAttributes=new HashMap<String,String>();
  hostAttributes.put("os_family","redhat");
  hostAttributes.put("os_release_version","5.9");
  clusters.getHost("h1").setHostAttributes(hostAttributes);
  String host2="h2";
  clusters.addHost(host2);
  hostAttributes=new HashMap<String,String>();
  hostAttributes.put("os_family","redhat");
  hostAttributes.put("os_release_version","6.3");
  clusters.getHost("h2").setHostAttributes(hostAttributes);
  clusters.mapHostToCluster(host1,clusterName);
  clusters.mapHostToCluster(host2,clusterName);
  createServiceComponentHost(clusterName,null,componentName1,host1,null);
  createServiceComponentHost(clusterName,serviceName,componentName2,host1,null);
  createServiceComponentHost(clusterName,serviceName,componentName2,host2,null);
  createServiceComponentHost(clusterName,serviceName,componentName3,host1,null);
  createServiceComponentHost(clusterName,serviceName,componentName5,host1,null);
  createServiceComponentHost(clusterName,serviceName,componentName5,host2,null);
  createServiceComponentHost(clusterName,serviceName,componentName3,host2,null);
  createServiceComponentHost(clusterName,serviceName2,componentName4,host2,null);
  createServiceComponentHost(clusterName,serviceName3,componentName6,host2,null);
  createServiceComponentHost(clusterName,serviceName2,componentName7,host2,null);
  Map<String,String> configs=new HashMap<String,String>();
  configs.put(NAMENODE_PORT_V1,"localhost:${ambari.dfs.datanode.http.port}");
  configs.put(DATANODE_PORT,"localhost:70075");
  configs.put("ambari.dfs.datanode.http.port","70070");
  configs.put(JOURNALNODE_HTTPS_PORT,"localhost:8481");
  configs.put(DATANODE_HTTPS_PORT,"50475");
  configs.put(HDFS_HTTPS_POLICY,"HTTPS_ONLY");
  Map<String,String> yarnConfigs=new HashMap<String,String>();
  yarnConfigs.put(RESOURCEMANAGER_PORT,"8088");
  yarnConfigs.put(NODEMANAGER_PORT,"8042");
  yarnConfigs.put(RESOURCEMANAGER_HTTPS_PORT,"8090");
  yarnConfigs.put(NODEMANAGER_HTTPS_PORT,"8044");
  yarnConfigs.put(YARN_HTTPS_POLICY,"HTTPS_ONLY");
  Map<String,String> mapreduceConfigs=new HashMap<String,String>();
  mapreduceConfigs.put(MAPREDUCE_HTTPS_PORT,"19889");
  mapreduceConfigs.put(MAPREDUCE_HTTPS_POLICY,"HTTPS_ONLY");
  ConfigurationRequest cr1=new ConfigurationRequest(clusterName,"hdfs-site","versionN",configs,null);
  ClusterRequest crReq=new ClusterRequest(cluster.getClusterId(),clusterName,null,null);
  crReq.setDesiredConfig(Collections.singletonList(cr1));
  controller.updateClusters(Collections.singleton(crReq),null);
  cluster=clusters.getCluster(clusterName);
  Assert.assertEquals("versionN",cluster.getDesiredConfigByType("hdfs-site").getTag());
  ConfigurationRequest cr2=new ConfigurationRequest(clusterName,"yarn-site","versionN",yarnConfigs,null);
  crReq.setDesiredConfig(Collections.singletonList(cr2));
  controller.updateClusters(Collections.singleton(crReq),null);
  ConfigurationRequest cr3=new ConfigurationRequest(clusterName,"mapred-site","versionN",mapreduceConfigs,null);
  crReq.setDesiredConfig(Collections.singletonList(cr3));
  controller.updateClusters(Collections.singleton(crReq),null);
  Assert.assertEquals("versionN",cluster.getDesiredConfigByType("yarn-site").getTag());
  Assert.assertEquals("localhost:${ambari.dfs.datanode.http.port}",cluster.getDesiredConfigByType("hdfs-site").getProperties().get(NAMENODE_PORT_V1));
}
