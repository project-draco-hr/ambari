{
  String stackName=request.getTargetStackId().getStackName();
  RepositoryVersionEntity rve=repositoryVersionDaoProvider.get().findByStackNameAndVersion(stackName,request.getRepositoryVersion());
  Map<String,Map<String,ThreeWayValue>> changes=m_mergeHelper.getConflicts(request.getClusterName(),rve.getStackId());
  Set<String> failedTypes=new HashSet<String>();
  for (  Entry<String,Map<String,ThreeWayValue>> entry : changes.entrySet()) {
    for (    Entry<String,ThreeWayValue> configEntry : entry.getValue().entrySet()) {
      ThreeWayValue twv=configEntry.getValue();
      if (null == twv.oldStackValue) {
        failedTypes.add(entry.getKey());
        prerequisiteCheck.getFailedOn().add(entry.getKey() + "/" + configEntry.getKey());
        MergeDetail md=new MergeDetail();
        md.type=entry.getKey();
        md.property=configEntry.getKey();
        md.current=twv.savedValue;
        md.new_stack_value=twv.newStackValue;
        md.result_value=md.current;
        prerequisiteCheck.getFailedDetail().add(md);
      }
 else       if (!twv.oldStackValue.equals(twv.savedValue)) {
        if (null == twv.newStackValue || !twv.oldStackValue.equals(twv.newStackValue)) {
          failedTypes.add(entry.getKey());
          prerequisiteCheck.getFailedOn().add(entry.getKey() + "/" + configEntry.getKey());
          MergeDetail md=new MergeDetail();
          md.type=entry.getKey();
          md.property=configEntry.getKey();
          md.current=twv.savedValue;
          md.new_stack_value=twv.newStackValue;
          md.result_value=md.current;
          prerequisiteCheck.getFailedDetail().add(md);
        }
      }
    }
  }
  if (prerequisiteCheck.getFailedOn().size() > 0) {
    prerequisiteCheck.setStatus(PrereqCheckStatus.WARNING);
    String failReason=getFailReason(prerequisiteCheck,request);
    prerequisiteCheck.setFailReason(String.format(failReason,StringUtils.join(failedTypes,", ")));
  }
 else {
    prerequisiteCheck.setStatus(PrereqCheckStatus.PASS);
  }
}
