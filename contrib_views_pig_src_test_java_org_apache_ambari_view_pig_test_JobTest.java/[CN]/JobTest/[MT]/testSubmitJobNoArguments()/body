{
  HdfsApi hdfsApi=createNiceMock(HdfsApi.class);
  hdfsApi.copy(eq("/tmp/script.pig"),startsWith("/tmp/.pigjobs/"));
  ByteArrayOutputStream do_stream=new ByteArrayOutputStream();
  FSDataOutputStream stream=new FSDataOutputStream(do_stream);
  expect(hdfsApi.create(anyString(),eq(true))).andReturn(stream);
  replay(hdfsApi);
  UserLocalObjects.setHdfsApi(hdfsApi,context);
  TempletonApi api=createNiceMock(TempletonApi.class);
  UserLocalObjects.setTempletonApi(api,context);
  TempletonApi.JobData data=api.new JobData();
  data.id="job_1466418324742_0005";
  expect(api.runPigQuery((File)anyObject(),anyString(),(String)isNull())).andReturn(data);
  replay(api);
  Response response=doCreateJob("Test","/tmp/script.pig",null,jobService);
  Assert.assertEquals("",do_stream.toString());
  Assert.assertEquals(201,response.getStatus());
  JSONObject obj=(JSONObject)response.getEntity();
  Assert.assertTrue(obj.containsKey("job"));
  Assert.assertNotNull(((PigJob)obj.get("job")).getId());
  Assert.assertFalse(((PigJob)obj.get("job")).getId().isEmpty());
  Assert.assertTrue(((PigJob)obj.get("job")).getStatusDir().startsWith("/tmp/.pigjobs/test"));
  PigJob job=((PigJob)obj.get("job"));
  Assert.assertEquals(PigJob.PIG_JOB_STATE_SUBMITTED,job.getStatus());
  Assert.assertTrue(job.isInProgress());
}
