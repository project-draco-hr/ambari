{
  HdfsApi hdfsApi=createNiceMock(HdfsApi.class);
  expect(hdfsApi.copy(eq("/tmp/script.pig"),startsWith("/tmp/.pigjobs/"))).andReturn(true);
  ByteArrayOutputStream do_stream=new ByteArrayOutputStream();
  FSDataOutputStream stream=new FSDataOutputStream(do_stream);
  expect(hdfsApi.create(anyString(),eq(true))).andReturn(stream);
  replay(hdfsApi);
  HdfsApi.setInstance(context,hdfsApi);
  TempletonApi api=createNiceMock(TempletonApi.class);
  jobService.getResourceManager().setTempletonApi(api);
  TempletonApi.JobData data=api.new JobData();
  data.id="job_id_#";
  expect(api.runPigQuery((File)anyObject(),anyString(),eq("-useHCatalog"))).andReturn(data);
  replay(api);
  Response response=doCreateJob("Test","/tmp/script.pig","-useHCatalog",jobService);
  Assert.assertEquals("-useHCatalog",do_stream.toString());
  Assert.assertEquals(201,response.getStatus());
  PigJob job=((PigJob)((JSONObject)response.getEntity()).get("job"));
  Assert.assertEquals(PigJob.PIG_JOB_STATE_SUBMITTED,job.getStatus());
  Assert.assertTrue(job.isInProgress());
  reset(api);
  TempletonApi.JobInfo info=api.new JobInfo();
  expect(api.checkJob(eq("job_id_#"))).andReturn(info);
  replay(api);
  response=jobService.getJob(job.getId());
  Assert.assertEquals(200,response.getStatus());
  job=((PigJob)((JSONObject)response.getEntity()).get("job"));
  Assert.assertEquals(PigJob.PIG_JOB_STATE_SUBMITTED,job.getStatus());
  reset(api);
  info=api.new JobInfo();
  info.status=new HashMap<String,Object>();
  info.status.put("runState",(double)JobResourceManager.RUN_STATE_RUNNING);
  info.percentComplete="30% complete";
  expect(api.checkJob(eq("job_id_#"))).andReturn(info);
  replay(api);
  response=jobService.getJob(job.getId());
  Assert.assertEquals(200,response.getStatus());
  job=((PigJob)((JSONObject)response.getEntity()).get("job"));
  Assert.assertEquals(PigJob.PIG_JOB_STATE_RUNNING,job.getStatus());
  Assert.assertTrue(job.isInProgress());
  Assert.assertEquals(30,(Object)job.getPercentComplete());
  reset(api);
  info=api.new JobInfo();
  info.status=new HashMap<String,Object>();
  info.status.put("runState",(double)JobResourceManager.RUN_STATE_SUCCEEDED);
  expect(api.checkJob(eq("job_id_#"))).andReturn(info);
  replay(api);
  response=jobService.getJob(job.getId());
  Assert.assertEquals(200,response.getStatus());
  job=((PigJob)((JSONObject)response.getEntity()).get("job"));
  Assert.assertEquals(PigJob.PIG_JOB_STATE_COMPLETED,job.getStatus());
  Assert.assertFalse(job.isInProgress());
  Assert.assertNull(job.getPercentComplete());
  reset(api);
  info=api.new JobInfo();
  info.status=new HashMap<String,Object>();
  info.status.put("runState",(double)JobResourceManager.RUN_STATE_PREP);
  expect(api.checkJob(eq("job_id_#"))).andReturn(info);
  replay(api);
  response=jobService.getJob(job.getId());
  Assert.assertEquals(200,response.getStatus());
  job=((PigJob)((JSONObject)response.getEntity()).get("job"));
  Assert.assertEquals(PigJob.PIG_JOB_STATE_RUNNING,job.getStatus());
  reset(api);
  info=api.new JobInfo();
  info.status=new HashMap<String,Object>();
  info.status.put("runState",(double)JobResourceManager.RUN_STATE_FAILED);
  expect(api.checkJob(eq("job_id_#"))).andReturn(info);
  replay(api);
  response=jobService.getJob(job.getId());
  Assert.assertEquals(200,response.getStatus());
  job=((PigJob)((JSONObject)response.getEntity()).get("job"));
  Assert.assertEquals(PigJob.PIG_JOB_STATE_FAILED,job.getStatus());
  Assert.assertFalse(job.isInProgress());
  reset(api);
  info=api.new JobInfo();
  info.status=new HashMap<String,Object>();
  info.status.put("runState",(double)JobResourceManager.RUN_STATE_KILLED);
  expect(api.checkJob(eq("job_id_#"))).andReturn(info);
  replay(api);
  response=jobService.getJob(job.getId());
  Assert.assertEquals(200,response.getStatus());
  job=((PigJob)((JSONObject)response.getEntity()).get("job"));
  Assert.assertEquals(PigJob.PIG_JOB_STATE_KILLED,job.getStatus());
  Assert.assertFalse(job.isInProgress());
}
