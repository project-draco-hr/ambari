{
  try {
    String name="hdfs.zip";
    if (request.entries.length == 1) {
      name=new File(request.entries[0]).getName() + ".zip";
    }
    StreamingOutput result=new StreamingOutput(){
      public void write(      OutputStream output) throws IOException, ServiceFormattedException {
        ZipOutputStream zip=new ZipOutputStream(output);
        try {
          HdfsApi api=getApi(context);
          Queue<String> files=new LinkedList<String>();
          for (          String file : request.entries) {
            files.add(file);
          }
          while (!files.isEmpty()) {
            String path=files.poll();
            FileStatus status=api.getFileStatus(path);
            if (status.isDirectory()) {
              FileStatus[] subdir;
              try {
                subdir=api.listdir(path);
              }
 catch (              AccessControlException ex) {
                logger.error("Error zipping directory " + path.substring(1) + "/ (directory ignored)"+ ": "+ ex.getMessage());
                continue;
              }
              for (              FileStatus file : subdir) {
                files.add(org.apache.hadoop.fs.Path.getPathWithoutSchemeAndAuthority(file.getPath()).toString());
              }
              zipDirectory(zip,path);
            }
 else {
              zipFile(zip,path);
            }
          }
        }
 catch (        Exception ex) {
          logger.error("Error occurred: " + ex.getMessage());
          throw new ServiceFormattedException(ex.getMessage(),ex);
        }
 finally {
          zip.close();
        }
      }
    }
;
    return Response.ok(result).header("Content-Disposition","inline; filename=\"" + name + "\"").build();
  }
 catch (  WebApplicationException ex) {
    throw ex;
  }
catch (  Exception ex) {
    throw new ServiceFormattedException(ex.getMessage(),ex);
  }
}
