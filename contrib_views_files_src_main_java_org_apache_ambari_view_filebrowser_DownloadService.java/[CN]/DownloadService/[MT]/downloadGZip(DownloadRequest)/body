{
  StreamingOutput result=new StreamingOutput(){
    public void write(    OutputStream output) throws IOException, WebApplicationException {
      ZipOutputStream zip=new ZipOutputStream(output);
      try {
        HdfsApi api=getApi(context);
        Queue<String> files=new LinkedList<String>();
        for (        String file : request.entries) {
          files.add(file);
        }
        while (!files.isEmpty()) {
          String path=files.poll();
          FileStatus status=api.getFileStatus(path);
          if (status.isDirectory()) {
            FileStatus[] subdir=api.listdir(path);
            for (            FileStatus file : subdir) {
              files.add(org.apache.hadoop.fs.Path.getPathWithoutSchemeAndAuthority(file.getPath()).toString());
            }
            zipDirectory(zip,path);
          }
 else {
            zipFile(zip,path);
          }
        }
      }
 catch (      Exception ex) {
        logger.error("Error occured: " + ex.getMessage());
      }
 finally {
        zip.close();
      }
    }
  }
;
  return Response.ok(result).header("Content-Disposition","inline; filename=\"hdfs.zip\"").build();
}
