{
  LOG.debug("browsing path : {} with download : {}",path,download);
  try {
    HdfsApi api=getApi(context);
    FileStatus status=api.getFileStatus(path);
    FSDataInputStream fs=api.open(path);
    if (checkperm) {
      JSONObject jsonObject=new JSONObject();
      jsonObject.put("allowed",true);
      return Response.ok(jsonObject).header("Content-Type",MediaType.APPLICATION_JSON).build();
    }
    ResponseBuilder result=Response.ok(fs);
    if (download) {
      result.header("Content-Disposition","inline; filename=\"" + status.getPath().getName() + "\"").type(MediaType.APPLICATION_OCTET_STREAM);
    }
 else {
      FileNameMap fileNameMap=URLConnection.getFileNameMap();
      String mimeType=fileNameMap.getContentTypeFor(status.getPath().getName());
      result.header("Content-Disposition","filename=\"" + status.getPath().getName() + "\"").type(mimeType);
    }
    return result.build();
  }
 catch (  WebApplicationException ex) {
    LOG.error("Exception while browsing : {}",path,ex);
    throw ex;
  }
catch (  FileNotFoundException ex) {
    LOG.error("File not found while browsing : {}",path,ex);
    throw new NotFoundFormattedException(ex.getMessage(),ex);
  }
catch (  Exception ex) {
    LOG.error("Exception while browsing : {}",path,ex);
    throw new ServiceFormattedException(ex.getMessage(),ex);
  }
}
