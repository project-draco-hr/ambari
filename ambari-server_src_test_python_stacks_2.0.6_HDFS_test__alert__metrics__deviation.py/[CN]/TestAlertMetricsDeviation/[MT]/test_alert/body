@patch('httplib.HTTPConnection')
def test_alert(self, conn_mock):
    ca_connection = MagicMock()
    response = MagicMock()
    response.status = 200
    ca_connection.getresponse.return_value = response
    conn_mock.return_value = ca_connection
    response.read.return_value = '{"metrics":[{"metricname":"metric1","metrics":{"1459966360838":1,"1459966370838":3}}]}'
    [status, messages] = alert.execute(configurations=configs, parameters=parameters)
    self.assertEqual(status, RESULT_STATE_OK)
    self.assertTrue(((messages is not None) and (len(messages) == 1)))
    self.assertEquals('No datapoints found above the minimum threshold of 30 seconds', messages[0])
    response.read.return_value = '{"metrics":[{"metricname":"metric1","metrics":{"1459966360838":40000}}]}'
    [status, messages] = alert.execute(configurations=configs, parameters=parameters)
    self.assertEqual(status, RESULT_STATE_SKIPPED)
    self.assertTrue(((messages is not None) and (len(messages) == 1)))
    self.assertEquals('Unable to calculate the standard deviation for 1 datapoints', messages[0])
    response.read.return_value = '{"metrics":[{"metricname":"metric1","metrics":{"1459966360838":40000,"1459966370838":50000}}]}'
    [status, messages] = alert.execute(configurations=configs, parameters=parameters)
    self.assertEqual(status, RESULT_STATE_OK)
    self.assertTrue(((messages is not None) and (len(messages) == 1)))
    self.assertTrue(('OK. Percentage standard deviation value is' in messages[0]))
    response.read.return_value = '{"metrics":[{"metricname":"metric1","metrics":{"1459966360838":40000,"1459966370838":1000000}}]}'
    [status, messages] = alert.execute(configurations=configs, parameters=parameters)
    self.assertEqual(status, RESULT_STATE_WARNING)
    self.assertTrue(((messages is not None) and (len(messages) == 1)))
    self.assertTrue(('WARNING. Percentage standard deviation' in messages[0]))
    response.read.return_value = ''
    response.status = 501
    [status, messages] = alert.execute(configurations=configs, parameters=parameters)
    self.assertEqual(status, RESULT_STATE_UNKNOWN)
    self.assertTrue(((messages is not None) and (len(messages) == 1)))
    self.assertEquals('Unable to retrieve metrics from AMS.', messages[0])
