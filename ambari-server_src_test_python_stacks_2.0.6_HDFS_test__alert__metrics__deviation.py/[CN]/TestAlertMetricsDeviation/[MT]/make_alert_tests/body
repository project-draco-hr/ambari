def make_alert_tests(self, configs, conn_mock):
    connection = MagicMock()
    response = MagicMock()
    response.status = 200
    connection.getresponse.return_value = response
    conn_mock.return_value = connection
    response.read.return_value = '{"metrics":[{"metricname":"metric1","metrics":{"1459966360838":1,"1459966370838":3}}]}'
    [status, messages] = alert.execute(configurations=configs, parameters=parameters)
    self.assertEqual(status, RESULT_STATE_OK)
    self.assertTrue(((messages is not None) and (len(messages) == 1)))
    self.assertEquals('There were no data points above the minimum threshold of 30 seconds', messages[0])
    response.read.return_value = '{"metrics":[{"metricname":"metric1","metrics":{"1459966360838":40000}}]}'
    [status, messages] = alert.execute(configurations=configs, parameters=parameters)
    self.assertEqual(status, RESULT_STATE_SKIPPED)
    self.assertTrue(((messages is not None) and (len(messages) == 1)))
    self.assertEquals('There are not enough data points to calculate the standard deviation (1 sampled)', messages[0])
    response.read.return_value = '{"metrics":[{"metricname":"metric1","metrics":{"1459966360838":40000,"1459966370838":50000}}]}'
    [status, messages] = alert.execute(configurations=configs, parameters=parameters)
    self.assertEqual(status, RESULT_STATE_OK)
    self.assertTrue(((messages is not None) and (len(messages) == 1)))
    self.assertEquals('The variance for this alert is 7071ms which is within 100% of the 45000ms average (45000ms is the limit)', messages[0])
    response.read.return_value = '{"metrics":[{"metricname":"metric1","metrics":{"1459966360838":40000,"1459966370838":1000000}}]}'
    [status, messages] = alert.execute(configurations=configs, parameters=parameters)
    self.assertEqual(status, RESULT_STATE_WARNING)
    self.assertTrue(((messages is not None) and (len(messages) == 1)))
    self.assertEquals('The variance for this alert is 678823ms which is 131% of the 520000ms average (520000ms is the limit)', messages[0])
    response.read.return_value = ''
    response.status = 501
    [status, messages] = alert.execute(configurations=configs, parameters=parameters)
    self.assertEqual(status, RESULT_STATE_UNKNOWN)
    self.assertTrue(((messages is not None) and (len(messages) == 1)))
    self.assertEquals('Unable to retrieve metrics from the Ambari Metrics service.', messages[0])
    conn_mock.side_effect = Exception('Unable to connect to AMS')
    [status, messages] = alert.execute(configurations=configs, parameters=parameters)
    self.assertEqual(status, RESULT_STATE_UNKNOWN)
    self.assertTrue(((messages is not None) and (len(messages) == 1)))
    self.assertEquals('Unable to retrieve metrics from the Ambari Metrics service.', messages[0])
