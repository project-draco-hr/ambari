def test_watchdog_2(self):
    '\n    Tries to catch false positive watchdog invocations\n    '
    subproc_mock = self.Subprocess_mockup()
    executor = PythonExecutor('/tmp', AmbariConfig().getConfig())
    (_, tmpoutfile) = tempfile.mkstemp()
    (_, tmperrfile) = tempfile.mkstemp()
    (_, tmpstrucout) = tempfile.mkstemp()
    PYTHON_TIMEOUT_SECONDS = 5

    def launch_python_subprocess_method(command, tmpout, tmperr):
        subproc_mock.tmpout = tmpout
        subproc_mock.tmperr = tmperr
        return subproc_mock
    executor.launch_python_subprocess = launch_python_subprocess_method
    runShellKillPgrp_method = MagicMock()
    runShellKillPgrp_method.side_effect = (lambda python: python.terminate())
    executor.runShellKillPgrp = runShellKillPgrp_method
    subproc_mock.returncode = 0
    thread = Thread(target=executor.run_file, args=('fake_puppetFile', ['arg1', 'arg2'], tmpoutfile, tmperrfile, PYTHON_TIMEOUT_SECONDS, tmpstrucout, 'INFO'))
    thread.start()
    time.sleep(0.1)
    subproc_mock.should_finish_event.set()
    subproc_mock.finished_event.wait()
    self.assertEquals(subproc_mock.was_terminated, False, 'Subprocess should not be terminated before timeout')
    self.assertEquals(subproc_mock.returncode, 0, 'Subprocess should not be terminated before timeout')
