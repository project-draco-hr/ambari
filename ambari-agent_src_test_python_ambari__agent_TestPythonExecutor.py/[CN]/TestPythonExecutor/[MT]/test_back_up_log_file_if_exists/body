@patch.object(os.path, 'isfile')
@patch.object(os, 'rename')
@patch.object(OSCheck, 'os_distribution', new=MagicMock(return_value=os_distro_value))
def test_back_up_log_file_if_exists(self, rename_mock, isfile_mock):
    isfile_mock.return_value = False
    log_file = '/var/lib/ambari-agent/data/output-13.txt'
    executor = PythonExecutor('/tmp', AmbariConfig().getConfig())
    executor.back_up_log_file_if_exists(log_file)
    self.assertEquals(isfile_mock.called, True)
    self.assertEquals(rename_mock.called, False)
    isfile_mock.reset_mock()
    isfile_mock.side_effect = [True, True, True, False]
    log_file = '/var/lib/ambari-agent/data/output-13.txt'
    executor = PythonExecutor('/tmp', AmbariConfig().getConfig())
    executor.back_up_log_file_if_exists(log_file)
    self.assertEquals(isfile_mock.called, True)
    self.assertEquals(rename_mock.call_args_list[0][0][0], '/var/lib/ambari-agent/data/output-13.txt')
    self.assertEquals(rename_mock.call_args_list[0][0][1], '/var/lib/ambari-agent/data/output-13.txt.2')
    pass
