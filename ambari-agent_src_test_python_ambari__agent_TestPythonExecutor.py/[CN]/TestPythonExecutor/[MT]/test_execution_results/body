@patch.object(OSCheck, 'os_distribution', new=MagicMock(return_value=os_distro_value))
def test_execution_results(self):
    subproc_mock = self.Subprocess_mockup()
    executor = PythonExecutor('/tmp', AmbariConfig().getConfig())
    (_, tmpoutfile) = tempfile.mkstemp()
    (_, tmperrfile) = tempfile.mkstemp()
    tmp_file = tempfile.NamedTemporaryFile()
    tmpstructuredoutfile = tmp_file.name
    tmp_file.close()
    PYTHON_TIMEOUT_SECONDS = 5

    def launch_python_subprocess_method(command, tmpout, tmperr):
        subproc_mock.tmpout = tmpout
        subproc_mock.tmperr = tmperr
        return subproc_mock
    executor.launch_python_subprocess = launch_python_subprocess_method
    runShellKillPgrp_method = MagicMock()
    runShellKillPgrp_method.side_effect = (lambda python: python.terminate())
    executor.runShellKillPgrp = runShellKillPgrp_method
    subproc_mock.returncode = 0
    subproc_mock.should_finish_event.set()
    callback_method = MagicMock()
    result = executor.run_file('file', ['arg1', 'arg2'], tmpoutfile, tmperrfile, PYTHON_TIMEOUT_SECONDS, tmpstructuredoutfile, callback_method, '1-1')
    self.assertEquals(result, {'exitcode': 0, 'stderr': '', 'stdout': '', 'structuredOut': {}, })
    self.assertTrue(callback_method.called)
