{
  users.createUser("user1","user1");
  users.createUser("user","user",UserType.LOCAL,false,false);
  users.createUser("user_ldap","user_ldap",UserType.LDAP,true,true);
  User createdUser=users.getUser("user",UserType.LOCAL);
  User createdUser1=users.getAnyUser("user1");
  User createdLdapUser=users.getUser("user_ldap",UserType.LDAP);
  Assert.assertEquals("user1",createdUser1.getUserName());
  Assert.assertEquals(true,createdUser1.isActive());
  Assert.assertEquals(false,createdUser1.isLdapUser());
  Assert.assertEquals(false,createdUser1.isAdmin());
  Assert.assertEquals("user",createdUser.getUserName());
  Assert.assertEquals(false,createdUser.isActive());
  Assert.assertEquals(false,createdUser.isLdapUser());
  Assert.assertEquals(false,createdUser.isAdmin());
  Assert.assertEquals("user_ldap",createdLdapUser.getUserName());
  Assert.assertEquals(true,createdLdapUser.isActive());
  Assert.assertEquals(true,createdLdapUser.isLdapUser());
  Assert.assertEquals(true,createdLdapUser.isAdmin());
  assertEquals("user",users.getAnyUser("user").getUserName());
  assertEquals("user_ldap",users.getAnyUser("user_ldap").getUserName());
  Assert.assertNull(users.getAnyUser("non_existing"));
  try {
    users.createUser("user1","user1");
    Assert.fail("It shouldn't be possible to create duplicate user");
  }
 catch (  AmbariException e) {
  }
  try {
    users.createUser("USER1","user1");
    Assert.fail("It shouldn't be possible to create duplicate user");
  }
 catch (  AmbariException e) {
  }
  List<User> userList=users.getAllUsers();
  Assert.assertEquals(3,userList.size());
  assertEquals("user",users.getAnyUser("USER").getUserName());
  assertEquals("user_ldap",users.getAnyUser("USER_LDAP").getUserName());
  Assert.assertNull(users.getAnyUser("non_existing"));
  User userById=users.getUser(createdUser.getUserId());
  assertNotNull(userById);
  assertEquals(createdUser.getUserId(),userById.getUserId());
  User userByInvalidId=users.getUser(-1);
  assertNull(userByInvalidId);
  Assert.assertNotNull(users.getUserIfUnique("user"));
  users.createUser("user","user",UserType.LDAP,true,false);
  Assert.assertNull(users.getUserIfUnique("user"));
  Assert.assertEquals(4,users.getAllUsers().size());
  users.removeUser(users.getAnyUser("user1"));
  Assert.assertNull(users.getAnyUser("user1"));
  Assert.assertEquals(3,users.getAllUsers().size());
}
