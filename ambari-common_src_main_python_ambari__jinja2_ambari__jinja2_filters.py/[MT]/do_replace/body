@evalcontextfilter
def do_replace(eval_ctx, s, old, new, count=None):
    'Return a copy of the value with all occurrences of a substring\n    replaced with a new one. The first argument is the substring\n    that should be replaced, the second is the replacement string.\n    If the optional third argument ``count`` is given, only the first\n    ``count`` occurrences are replaced:\n\n    .. sourcecode:: jinja\n\n        {{ "Hello World"|replace("Hello", "Goodbye") }}\n            -> Goodbye World\n\n        {{ "aaaaargh"|replace("a", "d\'oh, ", 2) }}\n            -> d\'oh, d\'oh, aaargh\n    '
    if (count is None):
        count = (-1)
    if (not eval_ctx.autoescape):
        return unicode(s).replace(unicode(old), unicode(new), count)
    if (hasattr(old, '__html__') or (hasattr(new, '__html__') and (not hasattr(s, '__html__')))):
        s = escape(s)
    else:
        s = soft_unicode(s)
    return s.replace(soft_unicode(old), soft_unicode(new), count)
