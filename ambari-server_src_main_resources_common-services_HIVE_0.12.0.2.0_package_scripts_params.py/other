'\nLicensed to the Apache Software Foundation (ASF) under one\nor more contributor license agreements.  See the NOTICE file\ndistributed with this work for additional information\nregarding copyright ownership.  The ASF licenses this file\nto you under the Apache License, Version 2.0 (the\n"License"); you may not use this file except in compliance\nwith the License.  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n'
from resource_management.libraries.functions.version import format_hdp_stack_version, compare_versions
from resource_management import *
import status_params
import os
config = Script.get_config()
tmp_dir = Script.get_tmp_dir()
stack_version_unformatted = str(config['hostLevelParams']['stack_version'])
hdp_stack_version_major = format_hdp_stack_version(stack_version_unformatted)
stack_is_hdp21 = ((hdp_stack_version_major != '') and (compare_versions(hdp_stack_version_major, '2.1') >= 0) and (compare_versions(hdp_stack_version_major, '2.2') < 0))
hdp_stack_version = version.get_hdp_build_version(hdp_stack_version_major)
version = default('/commandParams/version', None)
webhcat_apps_dir = '/apps/webhcat'
if ((hdp_stack_version_major != '') and (compare_versions(hdp_stack_version_major, '2.2') >= 0)):
    hadoop_bin_dir = '/usr/hdp/current/hadoop-client/bin'
    hadoop_home = '/usr/hdp/current/hadoop-client'
    hive_bin = '/usr/hdp/current/hive-client/bin'
    hive_lib = '/usr/hdp/current/hive-client/lib'
    command_role = default('/role', '')
    server_role_dir_mapping = {'HIVE_SERVER': 'hive-server2', 'HIVE_METASTORE': 'hive-metastore', }
    if (command_role in server_role_dir_mapping):
        hive_server_root = server_role_dir_mapping[command_role]
        hive_bin = format('/usr/hdp/current/{hive_server_root}/bin')
        hive_lib = format('/usr/hdp/current/{hive_server_root}/lib')
    hcat_lib = '/usr/hdp/current/hive-webhcat/share/hcatalog'
    webhcat_bin_dir = '/usr/hdp/current/hive-webhcat/sbin'
    hive_specific_configs_supported = True
    hive_tar_source = config['configurations']['cluster-env']['hive_tar_source']
    pig_tar_source = config['configurations']['cluster-env']['pig_tar_source']
    hadoop_streaming_tar_source = config['configurations']['cluster-env']['hadoop-streaming_tar_source']
    sqoop_tar_source = config['configurations']['cluster-env']['sqoop_tar_source']
    mapreduce_tar_source = config['configurations']['cluster-env']['mapreduce_tar_source']
    tez_tar_source = config['configurations']['cluster-env']['tez_tar_source']
    hive_tar_destination = ((config['configurations']['cluster-env']['hive_tar_destination_folder'] + '/') + os.path.basename(hive_tar_source))
    pig_tar_destination = ((config['configurations']['cluster-env']['pig_tar_destination_folder'] + '/') + os.path.basename(pig_tar_source))
    hadoop_streaming_tar_destination_dir = config['configurations']['cluster-env']['hadoop-streaming_tar_destination_folder']
    sqoop_tar_destination_dir = ((config['configurations']['cluster-env']['sqoop_tar_destination_folder'] + '/') + os.path.basename(sqoop_tar_source))
    mapreduce_tar_destination = ((config['configurations']['cluster-env']['mapreduce_tar_destination_folder'] + '/') + os.path.basename(mapreduce_tar_source))
    tez_tar_destination = ((config['configurations']['cluster-env']['tez_tar_destination_folder'] + '/') + os.path.basename(tez_tar_source))
    tarballs_mode = 292
else:
    hadoop_bin_dir = '/usr/bin'
    hadoop_home = '/usr'
    hadoop_streeming_jars = '/usr/lib/hadoop-mapreduce/hadoop-streaming-*.jar'
    hive_bin = '/usr/lib/hive/bin'
    hive_lib = '/usr/lib/hive/lib/'
    pig_tar_file = '/usr/share/HDP-webhcat/pig.tar.gz'
    hive_tar_file = '/usr/share/HDP-webhcat/hive.tar.gz'
    sqoop_tar_file = '/usr/share/HDP-webhcat/sqoop*.tar.gz'
    if ((hdp_stack_version_major != '') and (compare_versions(hdp_stack_version_major, '2.1.0.0') < 0)):
        hcat_lib = '/usr/lib/hcatalog/share/hcatalog'
        webhcat_bin_dir = '/usr/lib/hcatalog/sbin'
    else:
        hcat_lib = '/usr/lib/hive-hcatalog/share/hcatalog'
        webhcat_bin_dir = '/usr/lib/hive-hcatalog/sbin'
    hive_specific_configs_supported = False
    hive_tar_source = hive_tar_file
    pig_tar_source = pig_tar_file
    hadoop_streaming_tar_source = hadoop_streeming_jars
    sqoop_tar_source = sqoop_tar_file
    hive_tar_destination = ((webhcat_apps_dir + '/') + os.path.basename(hive_tar_source))
    pig_tar_destination = ((webhcat_apps_dir + '/') + os.path.basename(pig_tar_source))
    hadoop_streaming_tar_destination_dir = webhcat_apps_dir
    sqoop_tar_destination_dir = webhcat_apps_dir
    tarballs_mode = 493
hadoop_conf_dir = '/etc/hadoop/conf'
hive_conf_dir_prefix = '/etc/hive'
hive_conf_dir = format('{hive_conf_dir_prefix}/conf')
hive_client_conf_dir = format('{hive_conf_dir_prefix}/conf')
hive_server_conf_dir = format('{hive_conf_dir_prefix}/conf.server')
if ((hdp_stack_version_major != '') and (compare_versions(hdp_stack_version_major, '2.1.0.0') < 0)):
    hcat_conf_dir = '/etc/hcatalog/conf'
    config_dir = '/etc/hcatalog/conf'
else:
    hcat_conf_dir = '/etc/hive-hcatalog/conf'
    config_dir = '/etc/hive-webhcat/conf'
execute_path = ((((os.environ['PATH'] + os.pathsep) + hive_bin) + os.pathsep) + hadoop_bin_dir)
hive_metastore_user_name = config['configurations']['hive-site']['javax.jdo.option.ConnectionUserName']
hive_jdbc_connection_url = config['configurations']['hive-site']['javax.jdo.option.ConnectionURL']
hive_metastore_user_passwd = config['configurations']['hive-site']['javax.jdo.option.ConnectionPassword']
hive_metastore_db_type = config['configurations']['hive-env']['hive_database_type']
hive_user = config['configurations']['hive-env']['hive_user']
hive_jdbc_driver = config['configurations']['hive-site']['javax.jdo.option.ConnectionDriverName']
if (hive_jdbc_driver == 'com.mysql.jdbc.Driver'):
    jdbc_jar_name = 'mysql-connector-java.jar'
    jdbc_symlink_name = 'mysql-jdbc-driver.jar'
elif (hive_jdbc_driver == 'org.postgresql.Driver'):
    jdbc_jar_name = 'postgresql-jdbc.jar'
    jdbc_symlink_name = 'postgres-jdbc-driver.jar'
elif (hive_jdbc_driver == 'oracle.jdbc.driver.OracleDriver'):
    jdbc_jar_name = 'ojdbc.jar'
    jdbc_symlink_name = 'oracle-jdbc-driver.jar'
check_db_connection_jar_name = 'DBConnectionVerification.jar'
check_db_connection_jar = format('/usr/lib/ambari-agent/{check_db_connection_jar_name}')
hive_jdbc_drivers_list = ['com.mysql.jdbc.Driver', 'org.postgresql.Driver', 'oracle.jdbc.driver.OracleDriver']
downloaded_custom_connector = format('{tmp_dir}/{jdbc_jar_name}')
prepackaged_ojdbc_symlink = format('{hive_lib}/ojdbc6.jar')
hive_metastore_host = config['clusterHostInfo']['hive_metastore_host'][0]
hive_metastore_port = get_port_from_url(config['configurations']['hive-site']['hive.metastore.uris'])
hive_var_lib = '/var/lib/hive'
ambari_server_hostname = config['clusterHostInfo']['ambari_server_host'][0]
hive_server_host = config['clusterHostInfo']['hive_server_host'][0]
hive_server_hosts = config['clusterHostInfo']['hive_server_host']
hive_server_port = default('/configurations/hive-site/hive.server2.thrift.port', '10000')
hive_url = format('jdbc:hive2://{hive_server_host}:{hive_server_port}')
hive_server_principal = config['configurations']['hive-site']['hive.server2.authentication.kerberos.principal']
hive_server2_authentication = config['configurations']['hive-site']['hive.server2.authentication']
smokeuser = config['configurations']['cluster-env']['smokeuser']
smoke_test_sql = format('{tmp_dir}/hiveserver2.sql')
smoke_test_path = format('{tmp_dir}/hiveserver2Smoke.sh')
smoke_user_keytab = config['configurations']['cluster-env']['smokeuser_keytab']
fs_root = config['configurations']['core-site']['fs.defaultFS']
security_enabled = config['configurations']['cluster-env']['security_enabled']
kinit_path_local = functions.get_kinit_path(['/usr/bin', '/usr/kerberos/bin', '/usr/sbin'])
hive_metastore_keytab_path = config['configurations']['hive-site']['hive.metastore.kerberos.keytab.file']
hive_dbroot = config['configurations']['hive-env']['hive_dbroot']
hive_log_dir = config['configurations']['hive-env']['hive_log_dir']
hive_pid_dir = status_params.hive_pid_dir
hive_pid = status_params.hive_pid
hive_conf_dirs_list = [hive_server_conf_dir, hive_client_conf_dir]
if (('role' in config) and (config['role'] in ['HIVE_SERVER', 'HIVE_METASTORE'])):
    hive_config_dir = hive_server_conf_dir
else:
    hive_config_dir = hive_client_conf_dir
hive_database_name = config['configurations']['hive-env']['hive_database_name']
hive_database = config['configurations']['hive-env']['hive_database']
start_hiveserver2_script = 'startHiveserver2.sh.j2'
start_metastore_script = 'startMetastore.sh'
hive_metastore_pid = status_params.hive_metastore_pid
java_share_dir = '/usr/share/java'
driver_curl_target = format('{java_share_dir}/{jdbc_jar_name}')
hdfs_user = config['configurations']['hadoop-env']['hdfs_user']
user_group = config['configurations']['cluster-env']['user_group']
artifact_dir = format('{tmp_dir}/AMBARI-artifacts/')
target = format('{hive_lib}/{jdbc_jar_name}')
jdk_location = config['hostLevelParams']['jdk_location']
driver_curl_source = format('{jdk_location}/{jdbc_symlink_name}')
start_hiveserver2_path = format('{tmp_dir}/start_hiveserver2_script')
start_metastore_path = format('{tmp_dir}/start_metastore_script')
hadoop_heapsize = config['configurations']['hadoop-env']['hadoop_heapsize']
hive_heapsize = config['configurations']['hive-site']['hive.heapsize']
java64_home = config['hostLevelParams']['java_home']
db_name = config['configurations']['hive-env']['hive_database_name']
mysql_group = 'mysql'
mysql_host = config['clusterHostInfo']['hive_mysql_host']
mysql_adduser_path = format('{tmp_dir}/addMysqlUser.sh')
mysql_deluser_path = format('{tmp_dir}/removeMysqlUser.sh')
if ((hdp_stack_version_major != '') and (compare_versions(hdp_stack_version_major, '2.1.0.0') < 0)):
    init_metastore_schema = False
else:
    init_metastore_schema = True
hcat_dbroot = hcat_lib
hcat_user = config['configurations']['hive-env']['hcat_user']
webhcat_user = config['configurations']['hive-env']['webhcat_user']
hcat_pid_dir = status_params.hcat_pid_dir
hcat_log_dir = config['configurations']['hive-env']['hcat_log_dir']
hcat_env_sh_template = config['configurations']['hcat-env']['content']
if (('hive-log4j' in config['configurations']) and ('content' in config['configurations']['hive-log4j'])):
    log4j_props = config['configurations']['hive-log4j']['content']
else:
    log4j_props = None
if (('hive-exec-log4j' in config['configurations']) and ('content' in config['configurations']['hive-exec-log4j'])):
    log4j_exec_props = config['configurations']['hive-exec-log4j']['content']
else:
    log4j_exec_props = None
daemon_name = status_params.daemon_name
hive_env_sh_template = config['configurations']['hive-env']['content']
hive_hdfs_user_dir = format('/user/{hive_user}')
hive_hdfs_user_mode = 448
hive_apps_whs_dir = config['configurations']['hive-site']['hive.metastore.warehouse.dir']
hostname = config['hostname']
hdfs_user_keytab = config['configurations']['hadoop-env']['hdfs_user_keytab']
hdfs_principal_name = config['configurations']['hadoop-env']['hdfs_principal_name']
tez_user = config['configurations']['tez-env']['tez_user']
tez_local_api_jars = '/usr/lib/tez/tez*.jar'
tez_local_lib_jars = '/usr/lib/tez/lib/*.jar'
tez_lib_uris = default('/configurations/tez-site/tez.lib.uris', None)
if (System.get_instance().os_family == 'ubuntu'):
    mysql_configname = '/etc/mysql/my.cnf'
else:
    mysql_configname = '/etc/my.cnf'
mysql_user = 'mysql'
hive_authorization_enabled = config['configurations']['hive-site']['hive.security.authorization.enabled']
mysql_jdbc_driver_jar = '/usr/share/java/mysql-connector-java.jar'
hive_use_existing_db = hive_database.startswith('Existing')
hive_exclude_packages = []
if hive_use_existing_db:
    hive_exclude_packages = ['mysql-connector-java', 'mysql', 'mysql-server']
else:
    if (('role' in config) and (config['role'] != 'MYSQL_SERVER')):
        hive_exclude_packages = ['mysql', 'mysql-server']
    if os.path.exists(mysql_jdbc_driver_jar):
        hive_exclude_packages.append('mysql-connector-java')
webhcat_env_sh_template = config['configurations']['webhcat-env']['content']
templeton_log_dir = config['configurations']['hive-env']['hcat_log_dir']
templeton_pid_dir = status_params.hcat_pid_dir
webhcat_pid_file = status_params.webhcat_pid_file
templeton_jar = config['configurations']['webhcat-site']['templeton.jar']
webhcat_server_host = config['clusterHostInfo']['webhcat_server_host']
hcat_hdfs_user_dir = format('/user/{hcat_user}')
hcat_hdfs_user_mode = 493
webhcat_hdfs_user_dir = format('/user/{webhcat_user}')
webhcat_hdfs_user_mode = 493
security_param = ('true' if security_enabled else 'false')
import functools
HdfsResource = functools.partial(HdfsResource, user=(hdfs_principal_name if security_enabled else hdfs_user), security_enabled=security_enabled, keytab=hdfs_user_keytab, kinit_path_local=kinit_path_local, hadoop_fs=fs_root, hadoop_bin_dir=hadoop_bin_dir, hadoop_conf_dir=hadoop_conf_dir)
