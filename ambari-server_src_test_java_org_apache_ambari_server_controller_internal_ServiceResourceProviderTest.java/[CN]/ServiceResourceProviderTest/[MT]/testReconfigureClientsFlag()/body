{
  Resource.Type type=Resource.Type.Service;
  AmbariManagementController managementController1=createMock(AmbariManagementController.class);
  AmbariManagementController managementController2=createMock(AmbariManagementController.class);
  RequestStatusResponse response1=createNiceMock(RequestStatusResponse.class);
  RequestStatusResponse response2=createNiceMock(RequestStatusResponse.class);
  Capture<Set<ServiceRequest>> requestsCapture=new Capture<Set<ServiceRequest>>();
  Map<String,String> mapRequestProps=new HashMap<String,String>();
  mapRequestProps.put("context","Called from a test");
  Set<ServiceResponse> nameResponse=new HashSet<ServiceResponse>();
  nameResponse.add(new ServiceResponse(100L,"Cluster100","Service102",null,"HDP-0.1","DEPLOYED"));
  expect(managementController1.getServices(EasyMock.<Set<ServiceRequest>>anyObject())).andReturn(nameResponse).once();
  expect(managementController2.getServices(EasyMock.<Set<ServiceRequest>>anyObject())).andReturn(nameResponse).once();
  expect(managementController1.updateServices(capture(requestsCapture),eq(mapRequestProps),eq(false),eq(true))).andReturn(response1).once();
  expect(managementController2.updateServices(capture(requestsCapture),eq(mapRequestProps),eq(false),eq(false))).andReturn(response2).once();
  replay(managementController1,response1);
  replay(managementController2,response2);
  ResourceProvider provider1=AbstractControllerResourceProvider.getResourceProvider(type,PropertyHelper.getPropertyIds(type),PropertyHelper.getKeyPropertyIds(type),managementController1);
  ResourceProvider provider2=AbstractControllerResourceProvider.getResourceProvider(type,PropertyHelper.getPropertyIds(type),PropertyHelper.getKeyPropertyIds(type),managementController2);
  Map<String,Object> properties=new LinkedHashMap<String,Object>();
  properties.put(ServiceResourceProvider.SERVICE_SERVICE_STATE_PROPERTY_ID,"STARTED");
  Request request=PropertyHelper.getUpdateRequest(properties,mapRequestProps);
  Predicate predicate1=new PredicateBuilder().property(ServiceResourceProvider.SERVICE_CLUSTER_NAME_PROPERTY_ID).equals("Cluster100").and().property(ServiceResourceProvider.SERVICE_SERVICE_NAME_PROPERTY_ID).equals("Service102").and().property("params/reconfigure_client").equals("true").toPredicate();
  Predicate predicate2=new PredicateBuilder().property(ServiceResourceProvider.SERVICE_CLUSTER_NAME_PROPERTY_ID).equals("Cluster100").and().property(ServiceResourceProvider.SERVICE_SERVICE_NAME_PROPERTY_ID).equals("Service102").and().property("params/reconfigure_client").equals("false").toPredicate();
  provider1.updateResources(request,predicate1);
  provider2.updateResources(request,predicate2);
  verify(managementController1,response1);
  verify(managementController2,response2);
}
