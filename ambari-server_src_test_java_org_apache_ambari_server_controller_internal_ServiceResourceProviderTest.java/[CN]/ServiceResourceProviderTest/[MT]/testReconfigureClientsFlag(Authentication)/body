{
  MaintenanceStateHelper maintenanceStateHelper=createNiceMock(MaintenanceStateHelper.class);
  AmbariManagementController managementController1=createMock(AmbariManagementController.class);
  AmbariManagementController managementController2=createMock(AmbariManagementController.class);
  Clusters clusters=createNiceMock(Clusters.class);
  Cluster cluster=createNiceMock(Cluster.class);
  Service service0=createNiceMock(Service.class);
  ServiceResponse serviceResponse0=createNiceMock(ServiceResponse.class);
  AmbariMetaInfo ambariMetaInfo=createNiceMock(AmbariMetaInfo.class);
  RequestStageContainer requestStages1=createNiceMock(RequestStageContainer.class);
  RequestStageContainer requestStages2=createNiceMock(RequestStageContainer.class);
  RequestStatusResponse response1=createNiceMock(RequestStatusResponse.class);
  RequestStatusResponse response2=createNiceMock(RequestStatusResponse.class);
  RoleCommandOrder rco=createNiceMock(RoleCommandOrder.class);
  Map<String,String> mapRequestProps=new HashMap<String,String>();
  mapRequestProps.put("context","Called from a test");
  expect(managementController1.getHostComponents(EasyMock.<Set<ServiceComponentHostRequest>>anyObject())).andReturn(Collections.<ServiceComponentHostResponse>emptySet()).anyTimes();
  expect(managementController2.getHostComponents(EasyMock.<Set<ServiceComponentHostRequest>>anyObject())).andReturn(Collections.<ServiceComponentHostResponse>emptySet()).anyTimes();
  expect(clusters.getCluster("Cluster100")).andReturn(cluster).anyTimes();
  expect(managementController1.getClusters()).andReturn(clusters).anyTimes();
  expect(managementController1.getAmbariMetaInfo()).andReturn(ambariMetaInfo).anyTimes();
  expect(managementController2.getClusters()).andReturn(clusters).anyTimes();
  expect(managementController2.getAmbariMetaInfo()).andReturn(ambariMetaInfo).anyTimes();
  expect(cluster.getClusterId()).andReturn(2L).anyTimes();
  expect(cluster.getService("Service102")).andReturn(service0).anyTimes();
  expect(service0.convertToResponse()).andReturn(serviceResponse0).anyTimes();
  expect(service0.getDesiredState()).andReturn(State.INSTALLED).anyTimes();
  expect(service0.getServiceComponents()).andReturn(Collections.<String,ServiceComponent>emptyMap()).anyTimes();
  expect(serviceResponse0.getClusterName()).andReturn("Cluster100").anyTimes();
  expect(serviceResponse0.getServiceName()).andReturn("Service102").anyTimes();
  Capture<Map<String,String>> requestPropertiesCapture=newCapture();
  Capture<Map<State,List<Service>>> changedServicesCapture=newCapture();
  Capture<Map<State,List<ServiceComponent>>> changedCompsCapture=newCapture();
  Capture<Map<String,Map<State,List<ServiceComponentHost>>>> changedScHostsCapture=newCapture();
  Capture<Map<String,String>> requestParametersCapture=newCapture();
  Capture<Collection<ServiceComponentHost>> ignoredScHostsCapture=newCapture();
  Capture<Cluster> clusterCapture=newCapture();
  expect(managementController1.addStages((RequestStageContainer)isNull(),capture(clusterCapture),capture(requestPropertiesCapture),capture(requestParametersCapture),capture(changedServicesCapture),capture(changedCompsCapture),capture(changedScHostsCapture),capture(ignoredScHostsCapture),anyBoolean(),anyBoolean())).andReturn(requestStages1);
  expect(managementController2.addStages((RequestStageContainer)isNull(),capture(clusterCapture),capture(requestPropertiesCapture),capture(requestParametersCapture),capture(changedServicesCapture),capture(changedCompsCapture),capture(changedScHostsCapture),capture(ignoredScHostsCapture),anyBoolean(),anyBoolean())).andReturn(requestStages2);
  requestStages1.persist();
  expect(requestStages1.getRequestStatusResponse()).andReturn(response1);
  requestStages2.persist();
  expect(requestStages2.getRequestStatusResponse()).andReturn(response2);
  expect(maintenanceStateHelper.isOperationAllowed(anyObject(Resource.Type.class),anyObject(Service.class))).andReturn(true).anyTimes();
  expect(service0.getCluster()).andReturn(cluster).anyTimes();
  expect(managementController1.getRoleCommandOrder(cluster)).andReturn(rco).anyTimes();
  expect(managementController2.getRoleCommandOrder(cluster)).andReturn(rco).anyTimes();
  expect(rco.getTransitiveServices(eq(service0),eq(RoleCommand.START))).andReturn(Collections.<Service>emptySet()).anyTimes();
  replay(managementController1,response1,managementController2,requestStages1,requestStages2,response2,clusters,cluster,service0,serviceResponse0,ambariMetaInfo,rco,maintenanceStateHelper);
  SecurityContextHolder.getContext().setAuthentication(authentication);
  ServiceResourceProvider provider1=getServiceProvider(managementController1,maintenanceStateHelper);
  ServiceResourceProvider provider2=getServiceProvider(managementController2,maintenanceStateHelper);
  Map<String,Object> properties=new LinkedHashMap<String,Object>();
  properties.put(ServiceResourceProvider.SERVICE_SERVICE_STATE_PROPERTY_ID,"STARTED");
  Request request=PropertyHelper.getUpdateRequest(properties,mapRequestProps);
  Predicate predicate1=new PredicateBuilder().property(ServiceResourceProvider.SERVICE_CLUSTER_NAME_PROPERTY_ID).equals("Cluster100").and().property(ServiceResourceProvider.SERVICE_SERVICE_NAME_PROPERTY_ID).equals("Service102").and().property("params/reconfigure_client").equals("true").toPredicate();
  Predicate predicate2=new PredicateBuilder().property(ServiceResourceProvider.SERVICE_CLUSTER_NAME_PROPERTY_ID).equals("Cluster100").and().property(ServiceResourceProvider.SERVICE_SERVICE_NAME_PROPERTY_ID).equals("Service102").and().property("params/reconfigure_client").equals("false").toPredicate();
  provider1.updateResources(request,predicate1);
  provider2.updateResources(request,predicate2);
  verify(managementController1,response1,managementController2,requestStages1,requestStages2,response2,clusters,cluster,service0,serviceResponse0,ambariMetaInfo,maintenanceStateHelper);
}
