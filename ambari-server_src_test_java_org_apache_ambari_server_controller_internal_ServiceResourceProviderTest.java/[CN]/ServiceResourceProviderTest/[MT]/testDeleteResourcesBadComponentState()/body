{
  AmbariManagementController managementController=createMock(AmbariManagementController.class);
  Clusters clusters=createNiceMock(Clusters.class);
  Cluster cluster=createNiceMock(Cluster.class);
  Service service=createNiceMock(Service.class);
  ServiceComponent sc=createNiceMock(ServiceComponent.class);
  Map<String,ServiceComponent> scMap=new HashMap<String,ServiceComponent>();
  scMap.put("Component100",sc);
  State componentState=State.STARTED;
  ServiceComponentHost sch=createNiceMock(ServiceComponentHost.class);
  Map<String,ServiceComponentHost> schMap=new HashMap<>();
  schMap.put("Host1",sch);
  State schState=State.STARTED;
  String serviceName="Service100";
  expect(managementController.getClusters()).andReturn(clusters).anyTimes();
  expect(clusters.getCluster("Cluster100")).andReturn(cluster).anyTimes();
  expect(cluster.getService(serviceName)).andReturn(service).anyTimes();
  expect(service.getDesiredState()).andReturn(State.INSTALLED).anyTimes();
  expect(service.getName()).andReturn(serviceName).anyTimes();
  expect(service.getServiceComponents()).andReturn(scMap);
  expect(sc.getDesiredState()).andReturn(componentState).anyTimes();
  expect(sc.getName()).andReturn("Component100").anyTimes();
  expect(sc.canBeRemoved()).andReturn(componentState.isRemovableState()).anyTimes();
  expect(sc.getServiceComponentHosts()).andReturn(schMap).anyTimes();
  expect(sch.getDesiredState()).andReturn(schState).anyTimes();
  expect(sch.canBeRemoved()).andReturn(schState.isRemovableState()).anyTimes();
  replay(managementController,clusters,cluster,service,sc,sch);
  SecurityContextHolder.getContext().setAuthentication(TestAuthenticationFactory.createAdministrator());
  ResourceProvider provider=getServiceProvider(managementController);
  AbstractResourceProviderTest.TestObserver observer=new AbstractResourceProviderTest.TestObserver();
  ((ObservableResourceProvider)provider).addObserver(observer);
  Predicate predicate=new PredicateBuilder().property(ServiceResourceProvider.SERVICE_CLUSTER_NAME_PROPERTY_ID).equals("Cluster100").and().property(ServiceResourceProvider.SERVICE_SERVICE_NAME_PROPERTY_ID).equals(serviceName).toPredicate();
  try {
    provider.deleteResources(predicate);
    Assert.fail("Expected exception deleting a service in a non-removable state.");
  }
 catch (  SystemException e) {
  }
}
