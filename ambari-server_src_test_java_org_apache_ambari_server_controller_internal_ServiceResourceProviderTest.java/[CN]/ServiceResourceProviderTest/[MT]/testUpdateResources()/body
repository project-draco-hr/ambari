{
  Resource.Type type=Resource.Type.Service;
  AmbariManagementController managementController=createMock(AmbariManagementController.class);
  RequestStatusResponse response=createNiceMock(RequestStatusResponse.class);
  Capture<Set<ServiceRequest>> requestsCapture=new Capture<Set<ServiceRequest>>();
  Map<String,String> mapRequestProps=new HashMap<String,String>();
  mapRequestProps.put("context","Called from a test");
  expect(managementController.updateServices(capture(requestsCapture),eq(mapRequestProps),eq(false))).andReturn(response).once();
  replay(managementController,response);
  ResourceProvider provider=AbstractControllerResourceProvider.getResourceProvider(type,PropertyHelper.getPropertyIds(type),PropertyHelper.getKeyPropertyIds(type),managementController);
  Map<String,Object> properties=new LinkedHashMap<String,Object>();
  properties.put(ServiceResourceProvider.SERVICE_SERVICE_STATE_PROPERTY_ID,"DEPLOYED");
  Request request=PropertyHelper.getUpdateRequest(properties,mapRequestProps);
  Predicate predicate=new PredicateBuilder().property(ServiceResourceProvider.SERVICE_CLUSTER_NAME_PROPERTY_ID).equals("Cluster100").and().property(ServiceResourceProvider.SERVICE_SERVICE_NAME_PROPERTY_ID).equals("Service102").toPredicate();
  provider.updateResources(request,predicate);
  verify(managementController,response);
  Set<ServiceRequest> setRequests=requestsCapture.getValue();
  assertEquals(1,setRequests.size());
  ServiceRequest sr=setRequests.iterator().next();
  assertEquals("Cluster100",sr.getClusterName());
  assertEquals("Service102",sr.getServiceName());
  assertEquals("DEPLOYED",sr.getDesiredState());
  assertNull(sr.getConfigVersions());
}
