{
  MaintenanceStateHelper maintenanceStateHelper=createNiceMock(MaintenanceStateHelper.class);
  AmbariManagementController managementController=createMock(AmbariManagementController.class);
  Clusters clusters=createNiceMock(Clusters.class);
  Cluster cluster=createNiceMock(Cluster.class);
  Service service0=createNiceMock(Service.class);
  ServiceFactory serviceFactory=createNiceMock(ServiceFactory.class);
  AmbariMetaInfo ambariMetaInfo=createNiceMock(AmbariMetaInfo.class);
  RequestStageContainer requestStages=createNiceMock(RequestStageContainer.class);
  RequestStatusResponse requestStatusResponse=createNiceMock(RequestStatusResponse.class);
  RoleCommandOrder rco=createNiceMock(RoleCommandOrder.class);
  Map<String,String> mapRequestProps=new HashMap<String,String>();
  mapRequestProps.put("context","Called from a test");
  expect(managementController.getClusters()).andReturn(clusters).anyTimes();
  expect(managementController.getAmbariMetaInfo()).andReturn(ambariMetaInfo).anyTimes();
  expect(clusters.getCluster("Cluster100")).andReturn(cluster).anyTimes();
  expect(cluster.getClusterId()).andReturn(2L).anyTimes();
  expect(cluster.getService("Service102")).andReturn(service0);
  expect(service0.getDesiredState()).andReturn(State.INSTALLED).anyTimes();
  expect(service0.getServiceComponents()).andReturn(Collections.<String,ServiceComponent>emptyMap()).anyTimes();
  Capture<Map<String,String>> requestPropertiesCapture=newCapture();
  Capture<Map<State,List<Service>>> changedServicesCapture=newCapture();
  Capture<Map<State,List<ServiceComponent>>> changedCompsCapture=newCapture();
  Capture<Map<String,Map<State,List<ServiceComponentHost>>>> changedScHostsCapture=newCapture();
  Capture<Map<String,String>> requestParametersCapture=newCapture();
  Capture<Collection<ServiceComponentHost>> ignoredScHostsCapture=newCapture();
  Capture<Cluster> clusterCapture=newCapture();
  expect(managementController.addStages((RequestStageContainer)isNull(),capture(clusterCapture),capture(requestPropertiesCapture),capture(requestParametersCapture),capture(changedServicesCapture),capture(changedCompsCapture),capture(changedScHostsCapture),capture(ignoredScHostsCapture),anyBoolean(),anyBoolean())).andReturn(requestStages);
  requestStages.persist();
  expect(requestStages.getRequestStatusResponse()).andReturn(requestStatusResponse);
  expect(maintenanceStateHelper.isOperationAllowed(anyObject(Resource.Type.class),anyObject(Service.class))).andReturn(true).anyTimes();
  expect(service0.getCluster()).andReturn(cluster).anyTimes();
  expect(managementController.getRoleCommandOrder(cluster)).andReturn(rco).anyTimes();
  expect(rco.getTransitiveServices(eq(service0),eq(RoleCommand.START))).andReturn(Collections.<Service>emptySet()).anyTimes();
  replay(managementController,clusters,cluster,rco,maintenanceStateHelper,service0,serviceFactory,ambariMetaInfo,requestStages,requestStatusResponse);
  SecurityContextHolder.getContext().setAuthentication(authentication);
  ServiceResourceProvider provider=getServiceProvider(managementController,maintenanceStateHelper);
  Map<String,Object> properties=new LinkedHashMap<String,Object>();
  properties.put(ServiceResourceProvider.SERVICE_SERVICE_STATE_PROPERTY_ID,"STARTED");
  Request request=PropertyHelper.getUpdateRequest(properties,mapRequestProps);
  Predicate predicate=new PredicateBuilder().property(ServiceResourceProvider.SERVICE_CLUSTER_NAME_PROPERTY_ID).equals("Cluster100").and().property(ServiceResourceProvider.SERVICE_SERVICE_NAME_PROPERTY_ID).equals("Service102").toPredicate();
  provider.updateResources(request,predicate);
  verify(managementController,clusters,cluster,maintenanceStateHelper,service0,serviceFactory,ambariMetaInfo,requestStages,requestStatusResponse);
}
