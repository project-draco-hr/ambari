{
  final Set<LdapUserDto> users=new HashSet<LdapUserDto>();
  final LdapTemplate ldapTemplate=loadLdapTemplate();
  String baseDn=ldapServerProperties.getBaseDN();
  ldapTemplate.search(baseDn,filter.encode(),new ContextMapper(){
    @Override public Object mapFromContext(    Object ctx){
      final LdapUserDto user=new LdapUserDto();
      final DirContextAdapter adapter=(DirContextAdapter)ctx;
      final String usernameAttribute=adapter.getStringAttribute(ldapServerProperties.getUsernameAttribute());
      final String uidAttribute=adapter.getStringAttribute(UID_ATTRIBUTE);
      if (usernameAttribute != null && uidAttribute != null) {
        user.setUserName(usernameAttribute.toLowerCase());
        user.setUid(uidAttribute.toLowerCase());
        user.setDn(adapter.getNameInNamespace().toLowerCase());
        users.add(user);
      }
 else {
        LOG.warn("Ignoring LDAP user " + adapter.getNameInNamespace() + " as it doesn't have required"+ " attributes uid and "+ ldapServerProperties.getUsernameAttribute());
      }
      return null;
    }
  }
);
  return users;
}
