{
  final LdapBatchDto batchInfo=new LdapBatchDto();
  final Set<LdapUserDto> externalUsers=getExternalLdapUserInfo();
  final Map<String,LdapUserDto> externalUsersMap=new HashMap<String,LdapUserDto>();
  for (  LdapUserDto user : externalUsers) {
    externalUsersMap.put(user.getUserName(),user);
  }
  for (  String user : users) {
    if (!externalUsersMap.containsKey(user)) {
      throw new AmbariException("Couldn't sync LDAP user " + user + ", it doesn't exist");
    }
  }
  final Set<LdapGroupDto> externalGroups=getExternalLdapGroupInfo();
  final Map<String,LdapGroupDto> externalGroupsMap=new HashMap<String,LdapGroupDto>();
  for (  LdapGroupDto group : externalGroups) {
    externalGroupsMap.put(group.getGroupName(),group);
  }
  for (  String group : groups) {
    if (!externalGroupsMap.containsKey(group)) {
      throw new AmbariException("Couldn't sync LDAP group " + group + ", it doesn't exist");
    }
  }
  final Map<String,Group> internalGroupsMap=getInternalGroups();
  final Map<String,User> internalUsersMap=getInternalUsers();
  for (  String groupName : groups) {
    if (internalGroupsMap.containsKey(groupName)) {
      final Group group=internalGroupsMap.get(groupName);
      if (!group.isLdapGroup()) {
        batchInfo.getGroupsToBecomeLdap().add(groupName);
      }
    }
 else {
      batchInfo.getGroupsToBeCreated().add(groupName);
    }
    refreshGroupMembers(batchInfo,externalGroupsMap.get(groupName),internalUsersMap,externalUsers);
    internalGroupsMap.remove(groupName);
  }
  for (  Entry<String,Group> internalGroup : internalGroupsMap.entrySet()) {
    if (internalGroup.getValue().isLdapGroup()) {
      batchInfo.getGroupsToBeRemoved().add(internalGroup.getValue().getGroupName());
    }
  }
  for (  String userName : users) {
    if (internalUsersMap.containsKey(userName)) {
      final User user=internalUsersMap.get(userName);
      if (user != null && !user.isLdapUser()) {
        batchInfo.getUsersToBecomeLdap().add(userName);
      }
    }
 else {
      batchInfo.getUsersToBeCreated().add(userName);
    }
  }
  return batchInfo;
}
