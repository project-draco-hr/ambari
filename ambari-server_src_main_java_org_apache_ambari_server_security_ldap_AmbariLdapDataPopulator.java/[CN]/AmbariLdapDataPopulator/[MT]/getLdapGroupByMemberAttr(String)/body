{
  Set<LdapGroupDto> filteredLdapGroups=new HashSet<LdapGroupDto>();
  memberAttributeValue=getUniqueIdByMemberPattern(memberAttributeValue,ldapServerProperties.getSyncGroupMemberReplacePattern());
  Filter syncMemberFilter=createCustomMemberFilter(memberAttributeValue,ldapServerProperties.getSyncGroupMemberFilter());
  if (memberAttributeValue != null && syncMemberFilter != null) {
    LOG.trace("Use custom filter '{}' for getting member group with default baseDN ('{}')",syncMemberFilter.encode(),ldapServerProperties.getBaseDN());
    filteredLdapGroups=getFilteredLdapGroups(ldapServerProperties.getBaseDN(),syncMemberFilter);
  }
 else   if (memberAttributeValue != null && isMemberAttributeBaseDn(memberAttributeValue)) {
    LOG.trace("Member can be used as baseDn: {}",memberAttributeValue);
    Filter filter=new EqualsFilter(OBJECT_CLASS_ATTRIBUTE,ldapServerProperties.getGroupObjectClass());
    filteredLdapGroups=getFilteredLdapGroups(memberAttributeValue,filter);
  }
 else {
    LOG.trace("Member cannot be used as baseDn: {}",memberAttributeValue);
    filteredLdapGroups=getFilteredLdapGroups(ldapServerProperties.getBaseDN(),new EqualsFilter(OBJECT_CLASS_ATTRIBUTE,ldapServerProperties.getGroupObjectClass()),getMemberFilter(memberAttributeValue));
  }
  return (filteredLdapGroups.isEmpty()) ? null : filteredLdapGroups.iterator().next();
}
