{
  if (executionCommand != null) {
    return executionCommand;
  }
  if (null == jsonExecutionCommand) {
    throw new RuntimeException("Invalid ExecutionCommandWrapper, both object and string" + " representations are null");
  }
  try {
    executionCommand=gson.fromJson(jsonExecutionCommand,ExecutionCommand.class);
    if (null == executionCommand.getConfigurations()) {
      executionCommand.setConfigurations(new TreeMap<String,Map<String,String>>());
    }
    Map<String,Map<String,String>> configurations=executionCommand.getConfigurations();
    Long clusterId=hostRoleCommandDAO.findByPK(executionCommand.getTaskId()).getStage().getClusterId();
    Cluster cluster=clusters.getClusterById(clusterId);
    boolean refreshConfigTagsBeforeExecution=executionCommand.getForceRefreshConfigTagsBeforeExecution();
    if (refreshConfigTagsBeforeExecution) {
      Map<String,Map<String,String>> configurationTags=configHelper.getEffectiveDesiredTags(cluster,executionCommand.getHostname());
      LOG.debug("Refreshing all configuration tags before execution");
      configurations.clear();
      executionCommand.setConfigurationTags(configurationTags);
    }
    Map<String,Map<String,String>> configurationTags=executionCommand.getConfigurationTags();
    if (null != configurationTags && !configurationTags.isEmpty()) {
      Map<String,Map<String,String>> configProperties=configHelper.getEffectiveConfigProperties(cluster,configurationTags);
      for (      Map.Entry<String,Map<String,String>> entry : configProperties.entrySet()) {
        String type=entry.getKey();
        Map<String,String> allLevelMergedConfig=entry.getValue();
        if (configurations.containsKey(type)) {
          Map<String,String> mergedConfig=configHelper.getMergedConfig(allLevelMergedConfig,configurations.get(type));
          configurations.get(type).clear();
          configurations.get(type).putAll(mergedConfig);
        }
 else {
          configurations.put(type,new HashMap<String,String>());
          configurations.get(type).putAll(allLevelMergedConfig);
        }
      }
      Map<String,Map<String,Map<String,String>>> configAttributes=configHelper.getEffectiveConfigAttributes(cluster,executionCommand.getConfigurationTags());
      for (      Map.Entry<String,Map<String,Map<String,String>>> attributesOccurrence : configAttributes.entrySet()) {
        String type=attributesOccurrence.getKey();
        Map<String,Map<String,String>> attributes=attributesOccurrence.getValue();
        if (executionCommand.getConfigurationAttributes() != null) {
          if (!executionCommand.getConfigurationAttributes().containsKey(type)) {
            executionCommand.getConfigurationAttributes().put(type,new TreeMap<String,Map<String,String>>());
          }
          configHelper.cloneAttributesMap(attributes,executionCommand.getConfigurationAttributes().get(type));
        }
      }
    }
  }
 catch (  ClusterNotFoundException cnfe) {
    LOG.warn("Unable to lookup the cluster byt ID; assuming that there is no cluster and therefore no configs for this execution command: {}",cnfe.getMessage());
    return executionCommand;
  }
catch (  AmbariException e) {
    throw new RuntimeException(e);
  }
  return executionCommand;
}
