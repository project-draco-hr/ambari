def validateDruidEnvConfigurations(self, properties, recommendedDefaults, configurations, services, hosts):
    validationItems = []
    envProperties = services['configurations']['druid-env']['properties']
    for nodeType in ['broker', 'historical']:
        properties = services['configurations'][format('druid-{nodeType}')]['properties']
        intermediateBufferSize = (int(properties['druid.processing.buffer.sizeBytes']) / (1024 * 1024))
        processingThreads = int(properties['druid.processing.numThreads'])
        directMemory = int(envProperties[format('druid.{nodeType}.jvm.direct.memory')])
        if (directMemory < ((processingThreads + 1) * intermediateBufferSize)):
            validationItems.extend({'config-name': format('druid.{nodeType}.jvm.direct.memory'), 'item': self.getErrorItem(format('Not enough direct memory available for {nodeType} Node.Please adjust druid.{nodeType}.jvm.direct.memory, druid.processing.buffer.sizeBytes, druid.processing.numThreads')), })
    return self.toConfigurationValidationProblems(validationItems, 'druid-env')
