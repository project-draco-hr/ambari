def recommendDruidConfigurations(self, configurations, clusterData, services, hosts):
    componentsListList = [service['components'] for service in services['services']]
    componentsList = [item['StackServiceComponents'] for sublist in componentsListList for item in sublist]
    servicesList = [service['StackServices']['service_name'] for service in services['services']]
    putCommonProperty = self.putProperty(configurations, 'druid-common', services)
    putCommonProperty('druid.zk.service.host', self.getZKHostPortString(services))
    self.recommendDruidMaxMemoryLimitConfigurations(configurations, clusterData, services, hosts)
    database_name = services['configurations']['druid-common']['properties']['database_name']
    metastore_hostname = services['configurations']['druid-common']['properties']['metastore_hostname']
    database_type = services['configurations']['druid-common']['properties']['druid.metadata.storage.type']
    metadata_storage_port = '1527'
    mysql_extension_name = 'io.druid.extensions:mysql-metadata-storage'
    mysql_module_name = 'mysql-metadata-storage'
    postgres_module_name = 'postgresql-metadata-storage'
    extensions_load_list = services['configurations']['druid-common']['properties']['druid.extensions.loadList']
    extensions_pull_list = services['configurations']['druid-common']['properties']['druid.extensions.pullList']
    putDruidCommonProperty = self.putProperty(configurations, 'druid-common', services)
    extensions_pull_list = self.removeFromList(extensions_pull_list, mysql_extension_name)
    extensions_load_list = self.removeFromList(extensions_load_list, mysql_module_name)
    extensions_load_list = self.removeFromList(extensions_load_list, postgres_module_name)
    if (database_type == 'mysql'):
        metadata_storage_port = '3306'
        extensions_pull_list = self.addToList(extensions_pull_list, mysql_extension_name)
        extensions_load_list = self.addToList(extensions_load_list, mysql_module_name)
    if (database_type == 'postgres'):
        extensions_load_list = self.addToList(extensions_load_list, postgres_module_name)
        metadata_storage_port = '5432'
    putDruidCommonProperty('druid.metadata.storage.connector.port', metadata_storage_port)
    putDruidCommonProperty('druid.metadata.storage.connector.connectURI', self.getMetadataConnectionString(database_type).format(metastore_hostname, database_name, metadata_storage_port))
    if (('HDFS' in servicesList) and ('hdfs-site' in services['configurations'])):
        extensions_load_list = self.addToList(extensions_load_list, 'druid-hdfs-storage')
        putCommonProperty('druid.storage.type', 'hdfs')
        putCommonProperty('druid.storage.storageDirectory', '/user/druid/data')
        putCommonProperty('druid.indexer.logs.type', 'hdfs')
        putCommonProperty('druid.indexer.logs.directory', '/user/druid/logs')
    if ('KAFKA' in servicesList):
        extensions_load_list = self.addToList(extensions_load_list, 'druid-kafka-indexing-service')
    putCommonProperty('druid.extensions.loadList', extensions_load_list)
    putCommonProperty('druid.extensions.pullList', extensions_pull_list)
    putEnvProperty = self.putProperty(configurations, 'druid-env', services)
    for component in ['DRUID_HISTORICAL', 'DRUID_BROKER']:
        component_hosts = self.getHostsWithComponent('DRUID', component, services, hosts)
        nodeType = self.DRUID_COMPONENT_NODE_TYPE_MAP[component]
        putComponentProperty = self.putProperty(configurations, format('druid-{nodeType}'), services)
        if ((component_hosts is not None) and (len(component_hosts) > 0)):
            totalAvailableCpu = self.getMinCpu(component_hosts)
            processingThreads = 1
            if (totalAvailableCpu > 1):
                processingThreads = (totalAvailableCpu - 1)
            putComponentProperty('druid.processing.numThreads', processingThreads)
            putComponentProperty('druid.server.http.numThreads', (max(10, (((totalAvailableCpu * 17) / 16) + 2)) + 30))
