{
  ActionQueue aq=new ActionQueue();
  Properties properties=new Properties();
  Configuration conf=new Configuration(properties);
  Clusters fsm=mock(Clusters.class);
  Cluster oneClusterMock=mock(Cluster.class);
  Service serviceObj=mock(Service.class);
  ServiceComponent scomp=mock(ServiceComponent.class);
  ServiceComponentHost sch1=mock(ServiceComponentHost.class);
  ServiceComponentHost sch2=mock(ServiceComponentHost.class);
  String hostname1="host1";
  String hostname2="host2";
  Host host1=mock(Host.class);
  Host host2=mock(Host.class);
  HashMap<String,ServiceComponentHost> hosts=new HashMap<String,ServiceComponentHost>();
  hosts.put(hostname1,sch1);
  hosts.put(hostname2,sch2);
  when(scomp.getServiceComponentHosts()).thenReturn(hosts);
  when(fsm.getHost(hostname1)).thenReturn(host1);
  when(fsm.getHost(hostname2)).thenReturn(host2);
  when(host1.getState()).thenReturn(HostState.HEARTBEAT_LOST);
  when(host2.getState()).thenReturn(HostState.HEALTHY);
  when(host1.getHostName()).thenReturn(hostname1);
  when(host2.getHostName()).thenReturn(hostname2);
  when(scomp.getServiceComponentHost(hostname1)).thenReturn(sch1);
  when(scomp.getServiceComponentHost(hostname2)).thenReturn(sch2);
  UnitOfWork unitOfWork=mock(UnitOfWork.class);
  when(fsm.getCluster(anyString())).thenReturn(oneClusterMock);
  when(oneClusterMock.getService(anyString())).thenReturn(serviceObj);
  when(serviceObj.getServiceComponent(anyString())).thenReturn(scomp);
  when(serviceObj.getCluster()).thenReturn(oneClusterMock);
  final List<Stage> stages=new ArrayList<Stage>();
  Stage stage=new Stage(1,"/tmp","cluster1",1L,"stageWith2Tasks",CLUSTER_HOST_INFO,"{\"command_param\":\"param_value\"}","{\"host_param\":\"param_value\"}");
  addInstallTaskToStage(stage,hostname1,"cluster1",Role.DATANODE,RoleCommand.INSTALL,Service.Type.HDFS,1);
  addInstallTaskToStage(stage,hostname2,"cluster1",Role.NAMENODE,RoleCommand.INSTALL,Service.Type.HDFS,2);
  stages.add(stage);
  ActionDBAccessor db=mock(ActionDBAccessor.class);
  RequestEntity request=mock(RequestEntity.class);
  when(request.isExclusive()).thenReturn(false);
  when(db.getRequestEntity(anyLong())).thenReturn(request);
  when(db.getCommandsInProgressCount()).thenReturn(stages.size());
  when(db.getStagesInProgress()).thenReturn(stages);
  doAnswer(new Answer(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      String host=(String)invocation.getArguments()[0];
      String role=(String)invocation.getArguments()[3];
      for (      HostRoleCommand command : stages.get(0).getOrderedHostRoleCommands()) {
        if (command.getHostName().equals(host) && command.getRole().name().equals(role)) {
          command.setStatus(HostRoleStatus.TIMEDOUT);
        }
      }
      return null;
    }
  }
).when(db).timeoutHostRole(anyString(),anyLong(),anyLong(),anyString());
  doAnswer(new Answer(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      Long requestId=(Long)invocation.getArguments()[0];
      for (      Stage stage : stages) {
        if (requestId.equals(stage.getRequestId())) {
          for (          HostRoleCommand command : stage.getOrderedHostRoleCommands()) {
            if (command.getStatus() == HostRoleStatus.QUEUED || command.getStatus() == HostRoleStatus.IN_PROGRESS || command.getStatus() == HostRoleStatus.PENDING) {
              command.setStatus(HostRoleStatus.ABORTED);
            }
          }
        }
      }
      return null;
    }
  }
).when(db).abortOperation(anyLong());
  ArgumentCaptor<ServiceComponentHostEvent> eventsCapture1=ArgumentCaptor.forClass(ServiceComponentHostEvent.class);
  ArgumentCaptor<ServiceComponentHostEvent> eventsCapture2=ArgumentCaptor.forClass(ServiceComponentHostEvent.class);
  ActionScheduler scheduler=new ActionScheduler(100,50000,db,aq,fsm,3,new HostsMap((String)null),unitOfWork,null,conf);
  scheduler.setTaskTimeoutAdjustment(false);
  int cycleCount=0;
  while (!(stages.get(0).getHostRoleStatus(hostname1,"DATANODE").equals(HostRoleStatus.TIMEDOUT) && stages.get(0).getHostRoleStatus(hostname2,"NAMENODE").equals(HostRoleStatus.ABORTED)) && cycleCount++ <= MAX_CYCLE_ITERATIONS) {
    scheduler.doWork();
  }
  Assert.assertEquals(HostRoleStatus.TIMEDOUT,stages.get(0).getHostRoleStatus(hostname1,"DATANODE"));
  Assert.assertEquals(HostRoleStatus.ABORTED,stages.get(0).getHostRoleStatus(hostname2,"NAMENODE"));
  verify(sch1,atLeastOnce()).handleEvent(eventsCapture1.capture());
  verify(sch2,atLeastOnce()).handleEvent(eventsCapture2.capture());
  List<ServiceComponentHostEvent> eventTypes=eventsCapture1.getAllValues();
  eventTypes.addAll(eventsCapture2.getAllValues());
  Assert.assertNotNull(eventTypes);
  ServiceComponentHostOpFailedEvent datanodeFailedEvent=null;
  ServiceComponentHostOpFailedEvent namenodeFailedEvent=null;
  for (  ServiceComponentHostEvent eventType : eventTypes) {
    if (eventType instanceof ServiceComponentHostOpFailedEvent) {
      ServiceComponentHostOpFailedEvent event=(ServiceComponentHostOpFailedEvent)eventType;
      if (event.getServiceComponentName().equals("DATANODE")) {
        datanodeFailedEvent=event;
      }
 else       if (event.getServiceComponentName().equals("NAMENODE")) {
        namenodeFailedEvent=event;
      }
    }
  }
  Assert.assertNotNull("Datanode should be in Install failed state.",datanodeFailedEvent);
  Assert.assertNotNull("Namenode should be in Install failed state.",namenodeFailedEvent);
}
