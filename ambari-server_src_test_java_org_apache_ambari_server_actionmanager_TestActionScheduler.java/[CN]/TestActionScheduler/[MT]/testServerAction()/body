{
  ActionQueue aq=new ActionQueue();
  Properties properties=new Properties();
  Configuration conf=new Configuration(properties);
  Clusters fsm=mock(Clusters.class);
  Cluster oneClusterMock=mock(Cluster.class);
  Service serviceObj=mock(Service.class);
  ServiceComponent scomp=mock(ServiceComponent.class);
  ServiceComponentHost sch=mock(ServiceComponentHost.class);
  UnitOfWork unitOfWork=mock(UnitOfWork.class);
  Host host=mock(Host.class);
  when(host.getHostName()).thenReturn(serverHostname);
  when(host.getState()).thenReturn(HostState.HEALTHY);
  when(fsm.getCluster(anyString())).thenReturn(oneClusterMock);
  when(fsm.getHost(anyString())).thenReturn(host);
  when(oneClusterMock.getService(anyString())).thenReturn(serviceObj);
  when(serviceObj.getServiceComponent(anyString())).thenReturn(scomp);
  when(scomp.getServiceComponentHost(anyString())).thenReturn(sch);
  when(serviceObj.getCluster()).thenReturn(oneClusterMock);
  HashMap<String,ServiceComponentHost> hosts=new HashMap<String,ServiceComponentHost>();
  hosts.put(serverHostname,sch);
  when(scomp.getServiceComponentHosts()).thenReturn(hosts);
  List<Stage> stages=new ArrayList<Stage>();
  Map<String,String> payload=new HashMap<String,String>();
  final Stage s=getStageWithServerAction(1,977,payload,"test",1200);
  stages.add(s);
  ActionDBAccessor db=mock(ActionDBAccessor.class);
  RequestEntity request=mock(RequestEntity.class);
  when(request.isExclusive()).thenReturn(false);
  when(db.getRequestEntity(anyLong())).thenReturn(request);
  when(db.getCommandsInProgressCount()).thenReturn(stages.size());
  when(db.getStagesInProgress()).thenReturn(stages);
  doAnswer(new Answer(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      String host=(String)invocation.getArguments()[0];
      String role=(String)invocation.getArguments()[3];
      CommandReport commandReport=(CommandReport)invocation.getArguments()[4];
      HostRoleCommand command=s.getHostRoleCommand(host,role);
      command.setStatus(HostRoleStatus.valueOf(commandReport.getStatus()));
      return null;
    }
  }
).when(db).updateHostRoleState(anyString(),anyLong(),anyLong(),anyString(),any(CommandReport.class));
  doAnswer(new Answer(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      return s.getHostRoleCommand(serverHostname,"AMBARI_SERVER_ACTION");
    }
  }
).when(db).getTask(anyLong());
  doAnswer(new Answer(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      String host=(String)invocation.getArguments()[0];
      String role=(String)invocation.getArguments()[1];
      HostRoleStatus status=(HostRoleStatus)invocation.getArguments()[2];
      HostRoleCommand task=s.getHostRoleCommand(host,role);
      if (task.getStatus() == status) {
        return Arrays.asList(task);
      }
 else {
        return null;
      }
    }
  }
).when(db).getTasksByHostRoleAndStatus(anyString(),anyString(),any(HostRoleStatus.class));
  ServerActionExecutor.init(injector);
  ActionScheduler scheduler=new ActionScheduler(100,50,db,aq,fsm,3,new HostsMap((String)null),unitOfWork,null,conf);
  int cycleCount=0;
  while (!stages.get(0).getHostRoleStatus(serverHostname,"AMBARI_SERVER_ACTION").equals(HostRoleStatus.COMPLETED) && cycleCount++ <= MAX_CYCLE_ITERATIONS) {
    scheduler.doWork();
    scheduler.getServerActionExecutor().doWork();
  }
  assertEquals(stages.get(0).getHostRoleStatus(serverHostname,"AMBARI_SERVER_ACTION"),HostRoleStatus.COMPLETED);
}
