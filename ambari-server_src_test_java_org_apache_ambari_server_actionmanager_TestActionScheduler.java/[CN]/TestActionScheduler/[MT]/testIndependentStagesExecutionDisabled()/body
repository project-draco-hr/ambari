{
  ActionQueue aq=new ActionQueue();
  Clusters fsm=mock(Clusters.class);
  Cluster oneClusterMock=mock(Cluster.class);
  Service serviceObj=mock(Service.class);
  ServiceComponent scomp=mock(ServiceComponent.class);
  ServiceComponentHost sch=mock(ServiceComponentHost.class);
  UnitOfWork unitOfWork=mock(UnitOfWork.class);
  when(fsm.getCluster(anyString())).thenReturn(oneClusterMock);
  when(oneClusterMock.getService(anyString())).thenReturn(serviceObj);
  when(serviceObj.getServiceComponent(anyString())).thenReturn(scomp);
  when(scomp.getServiceComponentHost(anyString())).thenReturn(sch);
  when(serviceObj.getCluster()).thenReturn(oneClusterMock);
  String hostname1="ahost.ambari.apache.org";
  String hostname2="bhost.ambari.apache.org";
  String hostname3="chost.ambari.apache.org";
  String hostname4="chost.ambari.apache.org";
  HashMap<String,ServiceComponentHost> hosts=new HashMap<String,ServiceComponentHost>();
  hosts.put(hostname1,sch);
  hosts.put(hostname2,sch);
  hosts.put(hostname3,sch);
  hosts.put(hostname4,sch);
  when(scomp.getServiceComponentHosts()).thenReturn(hosts);
  List<Stage> stages=new ArrayList<Stage>();
  Stage stage=getStageWithSingleTask(hostname1,"cluster1",Role.HIVE_CLIENT,RoleCommand.INSTALL,Service.Type.HIVE,1,1,1);
  Map<String,String> hiveSite=new TreeMap<String,String>();
  hiveSite.put("javax.jdo.option.ConnectionPassword","password");
  hiveSite.put("hive.server2.thrift.port","10000");
  Map<String,Map<String,String>> configurations=new TreeMap<String,Map<String,String>>();
  configurations.put("hive-site",hiveSite);
  stage.getExecutionCommands(hostname1).get(0).getExecutionCommand().setConfigurations(configurations);
  stages.add(stage);
  stages.add(getStageWithSingleTask(hostname1,"cluster1",Role.GANGLIA_MONITOR,RoleCommand.START,Service.Type.GANGLIA,2,2,2));
  stages.add(getStageWithSingleTask(hostname2,"cluster1",Role.HIVE_CLIENT,RoleCommand.INSTALL,Service.Type.HIVE,3,3,3));
  stages.add(getStageWithSingleTask(hostname3,"cluster1",Role.DATANODE,RoleCommand.START,Service.Type.HDFS,4,4,4));
  stages.add(getStageWithSingleTask(hostname4,"cluster1",Role.GANGLIA_MONITOR,RoleCommand.START,Service.Type.GANGLIA,5,5,4));
  ActionDBAccessor db=mock(ActionDBAccessor.class);
  RequestEntity request=mock(RequestEntity.class);
  when(request.isExclusive()).thenReturn(false);
  when(db.getRequestEntity(anyLong())).thenReturn(request);
  when(db.getCommandsInProgressCount()).thenReturn(stages.size());
  when(db.getStagesInProgress()).thenReturn(stages);
  Properties properties=new Properties();
  properties.put(Configuration.PARALLEL_STAGE_EXECUTION_KEY,"false");
  Configuration conf=new Configuration(properties);
  ActionScheduler scheduler=spy(new ActionScheduler(100,50,db,aq,fsm,3,new HostsMap((String)null),unitOfWork,null,conf));
  doReturn(false).when(scheduler).wasAgentRestartedDuringOperation(any(Host.class),any(Stage.class),anyString());
  scheduler.doWork();
  Assert.assertEquals(HostRoleStatus.QUEUED,stages.get(0).getHostRoleStatus(hostname1,"HIVE_CLIENT"));
  Assert.assertEquals(HostRoleStatus.PENDING,stages.get(1).getHostRoleStatus(hostname1,"GANGLIA_MONITOR"));
  Assert.assertEquals(HostRoleStatus.PENDING,stages.get(2).getHostRoleStatus(hostname2,"HIVE_CLIENT"));
  Assert.assertEquals(HostRoleStatus.PENDING,stages.get(3).getHostRoleStatus(hostname3,"DATANODE"));
  Assert.assertEquals(HostRoleStatus.PENDING,stages.get(4).getHostRoleStatus(hostname4,"GANGLIA_MONITOR"));
  Assert.assertFalse(stages.get(0).getExecutionCommands(hostname1).get(0).getExecutionCommand().getConfigurations().containsKey("javax.jdo.option.ConnectionPassword"));
}
