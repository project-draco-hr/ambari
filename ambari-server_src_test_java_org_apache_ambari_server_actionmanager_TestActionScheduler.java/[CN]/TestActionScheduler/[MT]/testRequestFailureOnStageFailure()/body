{
  ActionQueue aq=new ActionQueue();
  Clusters fsm=mock(Clusters.class);
  Cluster oneClusterMock=mock(Cluster.class);
  Service serviceObj=mock(Service.class);
  ServiceComponent scomp=mock(ServiceComponent.class);
  ServiceComponentHost sch=mock(ServiceComponentHost.class);
  UnitOfWork unitOfWork=mock(UnitOfWork.class);
  RequestFactory requestFactory=mock(RequestFactory.class);
  when(fsm.getCluster(anyString())).thenReturn(oneClusterMock);
  when(oneClusterMock.getService(anyString())).thenReturn(serviceObj);
  when(serviceObj.getServiceComponent(anyString())).thenReturn(scomp);
  when(scomp.getServiceComponentHost(anyString())).thenReturn(sch);
  when(serviceObj.getCluster()).thenReturn(oneClusterMock);
  String hostname="ahost.ambari.apache.org";
  final List<Stage> stages=new ArrayList<Stage>();
  stages.add(getStageWithSingleTask(hostname,"cluster1",Role.NAMENODE,RoleCommand.UPGRADE,Service.Type.HDFS,1,1,1));
  stages.add(getStageWithSingleTask(hostname,"cluster1",Role.DATANODE,RoleCommand.UPGRADE,Service.Type.HDFS,2,2,1));
  Host host=mock(Host.class);
  when(fsm.getHost(anyString())).thenReturn(host);
  when(host.getState()).thenReturn(HostState.HEALTHY);
  when(host.getHostName()).thenReturn(hostname);
  ActionDBAccessor db=mock(ActionDBAccessor.class);
  when(db.getStagesInProgress()).thenReturn(stages);
  doAnswer(new Answer(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      String host=(String)invocation.getArguments()[0];
      Long requestId=(Long)invocation.getArguments()[1];
      Long stageId=(Long)invocation.getArguments()[2];
      String role=(String)invocation.getArguments()[3];
      CommandReport commandReport=(CommandReport)invocation.getArguments()[4];
      for (      Stage stage : stages) {
        if (requestId.equals(stage.getRequestId()) && stageId.equals(stage.getStageId())) {
          HostRoleCommand command=stage.getHostRoleCommand(host,role);
          command.setStatus(HostRoleStatus.valueOf(commandReport.getStatus()));
        }
      }
      return null;
    }
  }
).when(db).updateHostRoleState(anyString(),anyLong(),anyLong(),anyString(),any(CommandReport.class));
  when(db.getTask(anyLong())).thenAnswer(new Answer<Object>(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      Long taskId=(Long)invocation.getArguments()[0];
      for (      Stage stage : stages) {
        for (        HostRoleCommand command : stage.getOrderedHostRoleCommands()) {
          if (taskId.equals(command.getTaskId())) {
            return command;
          }
        }
      }
      return null;
    }
  }
);
  doAnswer(new Answer(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      Long requestId=(Long)invocation.getArguments()[0];
      for (      Stage stage : stages) {
        if (requestId.equals(stage.getRequestId())) {
          for (          HostRoleCommand command : stage.getOrderedHostRoleCommands()) {
            if (command.getStatus() == HostRoleStatus.QUEUED || command.getStatus() == HostRoleStatus.IN_PROGRESS || command.getStatus() == HostRoleStatus.PENDING) {
              command.setStatus(HostRoleStatus.ABORTED);
            }
          }
        }
      }
      return null;
    }
  }
).when(db).abortOperation(anyLong());
  ActionScheduler scheduler=new ActionScheduler(100,50,db,aq,fsm,3,new HostsMap((String)null),new ServerActionManagerImpl(fsm),unitOfWork);
  ActionManager am=new ActionManager(2,2,aq,fsm,db,new HostsMap((String)null),new ServerActionManagerImpl(fsm),unitOfWork,null,requestFactory);
  scheduler.doWork();
  List<CommandReport> reports=new ArrayList<CommandReport>();
  reports.add(getCommandReport(HostRoleStatus.FAILED,Role.NAMENODE,Service.Type.HDFS,"1-1",1));
  am.processTaskResponse(hostname,reports);
  scheduler.doWork();
  Assert.assertEquals(HostRoleStatus.FAILED,stages.get(0).getHostRoleStatus(hostname,"NAMENODE"));
  Assert.assertEquals(HostRoleStatus.ABORTED,stages.get(1).getHostRoleStatus(hostname,"DATANODE"));
}
