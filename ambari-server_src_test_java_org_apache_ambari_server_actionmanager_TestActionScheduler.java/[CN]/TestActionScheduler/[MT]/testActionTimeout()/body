{
  ActionQueue aq=new ActionQueue();
  Properties properties=new Properties();
  Configuration conf=new Configuration(properties);
  Clusters fsm=mock(Clusters.class);
  Cluster oneClusterMock=mock(Cluster.class);
  Service serviceObj=mock(Service.class);
  ServiceComponent scomp=mock(ServiceComponent.class);
  ServiceComponentHost sch=mock(ServiceComponentHost.class);
  UnitOfWork unitOfWork=mock(UnitOfWork.class);
  when(fsm.getCluster(anyString())).thenReturn(oneClusterMock);
  when(oneClusterMock.getService(anyString())).thenReturn(serviceObj);
  when(serviceObj.getServiceComponent(anyString())).thenReturn(scomp);
  when(scomp.getServiceComponentHost(anyString())).thenReturn(sch);
  when(serviceObj.getCluster()).thenReturn(oneClusterMock);
  Host host=mock(Host.class);
  HashMap<String,ServiceComponentHost> hosts=new HashMap<String,ServiceComponentHost>();
  hosts.put(hostname,sch);
  when(scomp.getServiceComponentHosts()).thenReturn(hosts);
  when(fsm.getHost(anyString())).thenReturn(host);
  when(host.getState()).thenReturn(HostState.HEALTHY);
  when(host.getHostName()).thenReturn(hostname);
  List<Stage> stages=new ArrayList<Stage>();
  final Stage s=StageUtils.getATestStage(1,977,hostname,CLUSTER_HOST_INFO,"{\"host_param\":\"param_value\"}","{\"stage_param\":\"param_value\"}");
  s.addHostRoleExecutionCommand(hostname,Role.SECONDARY_NAMENODE,RoleCommand.INSTALL,new ServiceComponentHostInstallEvent("SECONDARY_NAMENODE",hostname,System.currentTimeMillis(),"HDP-1.2.0"),"cluster1","HDFS",false);
  s.setHostRoleStatus(hostname,"SECONDARY_NAMENODE",HostRoleStatus.IN_PROGRESS);
  stages.add(s);
  ActionDBAccessor db=mock(ActionDBAccessor.class);
  when(db.getCommandsInProgressCount()).thenReturn(stages.size());
  when(db.getStagesInProgress()).thenReturn(stages);
  Request request=mock(Request.class);
  when(request.isExclusive()).thenReturn(false);
  when(db.getRequest(anyLong())).thenReturn(request);
  doAnswer(new Answer(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      String host=(String)invocation.getArguments()[0];
      String role=(String)invocation.getArguments()[3];
      HostRoleCommand command=s.getHostRoleCommand(host,role);
      command.setStatus(HostRoleStatus.TIMEDOUT);
      return null;
    }
  }
).when(db).timeoutHostRole(anyString(),anyLong(),anyLong(),anyString());
  ActionScheduler scheduler=new ActionScheduler(100,0,db,aq,fsm,3,new HostsMap((String)null),unitOfWork,null,conf);
  scheduler.setTaskTimeoutAdjustment(false);
  int cycleCount=0;
  scheduler.doWork();
  assertEquals(HostRoleStatus.QUEUED,stages.get(0).getHostRoleStatus(hostname,"SECONDARY_NAMENODE"));
  stages.get(0).setHostRoleStatus(hostname,"SECONDARY_NAMENODE",HostRoleStatus.IN_PROGRESS);
  scheduler.doWork();
  assertEquals(1,stages.get(0).getAttemptCount(hostname,"NAMENODE"));
  assertEquals(2,stages.get(0).getAttemptCount(hostname,"SECONDARY_NAMENODE"));
  while (!stages.get(0).getHostRoleStatus(hostname,"SECONDARY_NAMENODE").equals(HostRoleStatus.TIMEDOUT) && cycleCount++ <= MAX_CYCLE_ITERATIONS) {
    scheduler.doWork();
  }
  assertEquals(HostRoleStatus.TIMEDOUT,stages.get(0).getHostRoleStatus(hostname,"SECONDARY_NAMENODE"));
  verify(db,times(1)).startRequest(eq(1L));
  verify(db,times(1)).abortOperation(1L);
}
