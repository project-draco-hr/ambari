{
  final long HOST_REGISTRATION_TIME=100L;
  final long STAGE_TASK_START_TIME=HOST_REGISTRATION_TIME - 1L;
  ActionQueue aq=new ActionQueue();
  Clusters fsm=EasyMock.createMock(Clusters.class);
  Cluster cluster=EasyMock.createMock(Cluster.class);
  Service service=EasyMock.createMock(Service.class);
  ServiceComponent serviceComponent=EasyMock.createMock(ServiceComponent.class);
  ServiceComponentHost serviceComponentHost=EasyMock.createMock(ServiceComponentHost.class);
  Host host=EasyMock.createMock(Host.class);
  ActionDBAccessor db=EasyMock.createMock(ActionDBAccessor.class);
  AmbariEventPublisher ambariEventPublisher=EasyMock.createMock(AmbariEventPublisher.class);
  EasyMock.expect(fsm.getCluster(EasyMock.anyString())).andReturn(cluster).anyTimes();
  EasyMock.expect(fsm.getHost(EasyMock.anyString())).andReturn(host);
  EasyMock.expect(cluster.getService(EasyMock.anyString())).andReturn(null);
  EasyMock.expect(host.getLastRegistrationTime()).andReturn(HOST_REGISTRATION_TIME);
  EasyMock.expect(host.getHostName()).andReturn(Stage.INTERNAL_HOSTNAME).anyTimes();
  EasyMock.expect(host.getState()).andReturn(HostState.HEALTHY);
  if (RoleCommand.ACTIONEXECUTE.equals(roleCommand)) {
    EasyMock.expect(cluster.getClusterName()).andReturn("clusterName").anyTimes();
    EasyMock.expect(cluster.getClusterId()).andReturn(1L);
    ambariEventPublisher.publish(EasyMock.anyObject(AmbariEvent.class));
    EasyMock.expectLastCall();
  }
 else   if (RoleCommand.EXECUTE.equals(roleCommand)) {
    EasyMock.expect(cluster.getClusterName()).andReturn("clusterName");
    EasyMock.expect(cluster.getService(EasyMock.anyString())).andReturn(service);
    EasyMock.expect(service.getServiceComponent(EasyMock.anyString())).andReturn(serviceComponent);
    EasyMock.expect(serviceComponent.getServiceComponentHost(EasyMock.anyString())).andReturn(serviceComponentHost);
    serviceComponentHost.handleEvent(EasyMock.anyObject(ServiceComponentHostEvent.class));
    EasyMock.expectLastCall();
  }
  Stage s=getStageWithServerAction(1,977,null,"test",2);
  s.setStartTime(null,Role.AMBARI_SERVER_ACTION.toString(),STAGE_TASK_START_TIME);
  s.setHostRoleStatus(null,Role.AMBARI_SERVER_ACTION.toString(),HostRoleStatus.IN_PROGRESS);
  s.getExecutionCommands(null).get(0).getExecutionCommand().setServiceName("Service name");
  s.getExecutionCommands(null).get(0).getExecutionCommand().setRoleCommand(roleCommand);
  aq.enqueue(Stage.INTERNAL_HOSTNAME,s.getExecutionCommands(null).get(0).getExecutionCommand());
  List<ExecutionCommand> commandsToSchedule=new ArrayList<ExecutionCommand>();
  db.timeoutHostRole(EasyMock.anyString(),EasyMock.anyLong(),EasyMock.anyLong(),EasyMock.anyString(),EasyMock.anyBoolean());
  EasyMock.expectLastCall();
  ActionScheduler scheduler=EasyMock.createMockBuilder(ActionScheduler.class).withConstructor(long.class,long.class,ActionDBAccessor.class,ActionQueue.class,Clusters.class,int.class,HostsMap.class,UnitOfWork.class,AmbariEventPublisher.class,Configuration.class).withArgs(100L,50L,db,aq,fsm,-1,null,null,ambariEventPublisher,null).createNiceMock();
  EasyMock.replay(scheduler,fsm,host,db,cluster,ambariEventPublisher,service,serviceComponent,serviceComponentHost);
  scheduler.processInProgressStage(s,commandsToSchedule);
  EasyMock.verify(scheduler,fsm,host,db,cluster,ambariEventPublisher,service,serviceComponent,serviceComponentHost);
  Assert.assertTrue("ActionQueue should be empty after request was timeout",aq.size(Stage.INTERNAL_HOSTNAME) == 0);
}
