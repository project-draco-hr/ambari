{
  ActionQueue aq=new ActionQueue();
  Clusters fsm=mock(Clusters.class);
  Cluster oneClusterMock=mock(Cluster.class);
  Service serviceObj=mock(Service.class);
  ServiceComponent scomp=mock(ServiceComponent.class);
  ServiceComponentHost sch=mock(ServiceComponentHost.class);
  UnitOfWork unitOfWork=mock(UnitOfWork.class);
  when(fsm.getCluster(anyString())).thenReturn(oneClusterMock);
  when(oneClusterMock.getService(anyString())).thenReturn(serviceObj);
  when(serviceObj.getServiceComponent(anyString())).thenReturn(scomp);
  when(scomp.getServiceComponentHost(anyString())).thenReturn(sch);
  when(serviceObj.getCluster()).thenReturn(oneClusterMock);
  ActionDBAccessor db=new ActionDBInMemoryImpl();
  List<Stage> stages=new ArrayList<Stage>();
  long now=System.currentTimeMillis();
  Stage stage=new Stage(1,"/tmp","cluster1","testRequestFailureBasedOnSuccessFactor");
  stage.setStageId(1);
  stage.addHostRoleExecutionCommand("host1",Role.DATANODE,RoleCommand.UPGRADE,new ServiceComponentHostUpgradeEvent(Role.DATANODE.toString(),"host1",now,"HDP-0.2"),"cluster1",Service.Type.HDFS.toString());
  stage.getExecutionCommandWrapper("host1",Role.DATANODE.toString()).getExecutionCommand();
  stage.addHostRoleExecutionCommand("host2",Role.DATANODE,RoleCommand.UPGRADE,new ServiceComponentHostUpgradeEvent(Role.DATANODE.toString(),"host2",now,"HDP-0.2"),"cluster1",Service.Type.HDFS.toString());
  stage.getExecutionCommandWrapper("host2",Role.DATANODE.toString()).getExecutionCommand();
  stage.addHostRoleExecutionCommand("host3",Role.DATANODE,RoleCommand.UPGRADE,new ServiceComponentHostUpgradeEvent(Role.DATANODE.toString(),"host3",now,"HDP-0.2"),"cluster1",Service.Type.HDFS.toString());
  stage.getExecutionCommandWrapper("host3",Role.DATANODE.toString()).getExecutionCommand();
  stages.add(stage);
  stage.getOrderedHostRoleCommands().get(0).setTaskId(1);
  stage.getOrderedHostRoleCommands().get(1).setTaskId(2);
  stage.getOrderedHostRoleCommands().get(2).setTaskId(3);
  stages.add(getStageWithSingleTask("host1","cluster1",Role.HDFS_CLIENT,RoleCommand.UPGRADE,Service.Type.HDFS,4,2,1));
  db.persistActions(stages);
  ActionScheduler scheduler=new ActionScheduler(100,50,db,aq,fsm,3,new HostsMap((String)null),new ServerActionManagerImpl(fsm),unitOfWork);
  ActionManager am=new ActionManager(2,2,aq,fsm,db,new HostsMap((String)null),new ServerActionManagerImpl(fsm),unitOfWork);
  scheduler.doWork();
  List<CommandReport> reports=new ArrayList<CommandReport>();
  reports.add(getCommandReport(HostRoleStatus.FAILED,Role.DATANODE,Service.Type.HDFS,"1-1",1));
  am.processTaskResponse("host1",reports);
  reports.clear();
  reports.add(getCommandReport(HostRoleStatus.FAILED,Role.DATANODE,Service.Type.HDFS,"1-1",2));
  am.processTaskResponse("host2",reports);
  reports.clear();
  reports.add(getCommandReport(HostRoleStatus.COMPLETED,Role.DATANODE,Service.Type.HDFS,"1-1",3));
  am.processTaskResponse("host3",reports);
  scheduler.doWork();
  Assert.assertEquals(HostRoleStatus.ABORTED,stages.get(1).getHostRoleStatus("host1","HDFS_CLIENT"));
}
