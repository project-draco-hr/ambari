{
  ActionQueue aq=new ActionQueue();
  Properties properties=new Properties();
  Configuration conf=new Configuration(properties);
  Clusters fsm=mock(Clusters.class);
  Cluster oneClusterMock=mock(Cluster.class);
  Service serviceObj=mock(Service.class);
  ServiceComponent scomp=mock(ServiceComponent.class);
  ServiceComponentHost sch=mock(ServiceComponentHost.class);
  UnitOfWork unitOfWork=mock(UnitOfWork.class);
  when(fsm.getCluster(anyString())).thenReturn(oneClusterMock);
  when(oneClusterMock.getService(anyString())).thenReturn(serviceObj);
  when(serviceObj.getServiceComponent(anyString())).thenReturn(scomp);
  when(scomp.getServiceComponentHost(anyString())).thenReturn(sch);
  when(serviceObj.getCluster()).thenReturn(oneClusterMock);
  Host host=mock(Host.class);
  HashMap<String,ServiceComponentHost> hosts=new HashMap<String,ServiceComponentHost>();
  hosts.put(hostname,sch);
  when(scomp.getServiceComponentHosts()).thenReturn(hosts);
  when(fsm.getHost(anyString())).thenReturn(host);
  when(host.getState()).thenReturn(HostState.HEARTBEAT_LOST);
  when(host.getHostName()).thenReturn(hostname);
  List<Stage> stages=new ArrayList<Stage>();
  final Stage s=StageUtils.getATestStage(1,977,hostname,CLUSTER_HOST_INFO,"{\"host_param\":\"param_value\"}","{\"stage_param\":\"param_value\"}");
  stages.add(s);
  ActionDBAccessor db=mock(ActionDBAccessor.class);
  RequestEntity request=mock(RequestEntity.class);
  when(request.isExclusive()).thenReturn(false);
  when(db.getRequestEntity(anyLong())).thenReturn(request);
  when(db.getCommandsInProgressCount()).thenReturn(stages.size());
  when(db.getStagesInProgress()).thenReturn(stages);
  doAnswer(new Answer<Void>(){
    @Override public Void answer(    InvocationOnMock invocation) throws Throwable {
      String host=(String)invocation.getArguments()[0];
      String role=(String)invocation.getArguments()[3];
      HostRoleCommand command=s.getHostRoleCommand(host,role);
      command.setStatus(HostRoleStatus.TIMEDOUT);
      return null;
    }
  }
).when(db).timeoutHostRole(anyString(),anyLong(),anyLong(),anyString(),anyBoolean());
  AmbariEventPublisher aep=EasyMock.createNiceMock(AmbariEventPublisher.class);
  ActionScheduler scheduler=EasyMock.createMockBuilder(ActionScheduler.class).withConstructor((long)100,(long)50,db,aq,fsm,3,new HostsMap((String)null),unitOfWork,aep,conf,entityManagerProviderMock).addMockedMethod("cancelHostRoleCommands").createMock();
  scheduler.cancelHostRoleCommands((Collection<HostRoleCommand>)EasyMock.anyObject(),EasyMock.anyObject(String.class));
  EasyMock.expectLastCall();
  EasyMock.replay(scheduler);
  scheduler.setTaskTimeoutAdjustment(false);
  int cycleCount=0;
  while (!stages.get(0).getHostRoleStatus(hostname,"NAMENODE").equals(HostRoleStatus.TIMEDOUT) && cycleCount++ <= MAX_CYCLE_ITERATIONS) {
    scheduler.doWork();
  }
  Assert.assertEquals(HostRoleStatus.TIMEDOUT,stages.get(0).getHostRoleStatus(hostname,"NAMENODE"));
  EasyMock.verify(scheduler,entityManagerProviderMock);
}
