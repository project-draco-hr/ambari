{
  Type type=new TypeToken<Map<String,Set<String>>>(){
  }
.getType();
  Map<String,Set<String>> clusterHostInfo1=StageUtils.getGson().fromJson(CLUSTER_HOST_INFO,type);
  Map<String,Set<String>> clusterHostInfo2=StageUtils.getGson().fromJson(CLUSTER_HOST_INFO_UPDATED,type);
  int stageId=1;
  int requestId1=1;
  int requestId2=2;
  ActionQueue aq=new ActionQueue();
  Properties properties=new Properties();
  Configuration conf=new Configuration(properties);
  Clusters fsm=mock(Clusters.class);
  Cluster oneClusterMock=mock(Cluster.class);
  Service serviceObj=mock(Service.class);
  ServiceComponent scomp=mock(ServiceComponent.class);
  ServiceComponentHost sch=mock(ServiceComponentHost.class);
  UnitOfWork unitOfWork=mock(UnitOfWork.class);
  when(fsm.getCluster(anyString())).thenReturn(oneClusterMock);
  when(oneClusterMock.getService(anyString())).thenReturn(serviceObj);
  when(serviceObj.getServiceComponent(anyString())).thenReturn(scomp);
  when(scomp.getServiceComponentHost(anyString())).thenReturn(sch);
  when(serviceObj.getCluster()).thenReturn(oneClusterMock);
  Host host=mock(Host.class);
  HashMap<String,ServiceComponentHost> hosts=new HashMap<String,ServiceComponentHost>();
  hosts.put(hostname,sch);
  when(scomp.getServiceComponentHosts()).thenReturn(hosts);
  when(fsm.getHost(anyString())).thenReturn(host);
  when(host.getState()).thenReturn(HostState.HEALTHY);
  when(host.getHostName()).thenReturn(hostname);
  ActionDBAccessor db=mock(ActionDBAccessorImpl.class);
  Stage s1=StageUtils.getATestStage(requestId1,stageId,hostname,CLUSTER_HOST_INFO);
  Stage s2=StageUtils.getATestStage(requestId2,stageId,hostname,CLUSTER_HOST_INFO_UPDATED);
  when(db.getStagesInProgress()).thenReturn(Collections.singletonList(s1));
  ActionScheduler scheduler=new ActionScheduler(100,100,db,aq,fsm,10000,new HostsMap((String)null),null,unitOfWork,conf);
  scheduler.setTaskTimeoutAdjustment(false);
  scheduler.start();
  List<AgentCommand> ac=waitForQueueSize(hostname,aq,1);
  assertTrue(ac.get(0) instanceof ExecutionCommand);
  assertEquals(String.valueOf(requestId1) + "-" + stageId,((ExecutionCommand)(ac.get(0))).getCommandId());
  assertEquals(clusterHostInfo1,((ExecutionCommand)(ac.get(0))).getClusterHostInfo());
  when(db.getStagesInProgress()).thenReturn(Collections.singletonList(s2));
  ac=waitForQueueSize(hostname,aq,1);
  assertTrue(ac.get(0) instanceof ExecutionCommand);
  assertEquals(String.valueOf(requestId2) + "-" + stageId,((ExecutionCommand)(ac.get(0))).getCommandId());
  assertEquals(clusterHostInfo2,((ExecutionCommand)(ac.get(0))).getClusterHostInfo());
}
