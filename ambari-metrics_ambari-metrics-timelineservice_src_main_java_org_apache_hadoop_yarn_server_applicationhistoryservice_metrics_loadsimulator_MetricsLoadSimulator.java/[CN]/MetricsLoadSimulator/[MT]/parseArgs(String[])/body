{
  Map<String,String> mapProps=new HashMap<String,String>();
  mapProps.put("hostName","host");
  mapProps.put("numberOfHosts","20");
  mapProps.put("trafficType","burst");
  mapProps.put("metricsHostName","localhost");
  mapProps.put("collectInterval","10000");
  mapProps.put("sendInterval","60000");
  if (args.length == 0) {
    printUsage();
    throw new RuntimeException("Unexpected argument, See usage message.");
  }
 else {
    for (int i=0; i < args.length; i+=2) {
      String arg=args[i];
      if (arg.equals("-h")) {
        mapProps.put("hostName",args[i + 1]);
      }
 else       if (arg.equals("-n")) {
        mapProps.put("numberOfHosts",args[i + 1]);
      }
 else       if (arg.equals("-t")) {
        mapProps.put("trafficType",args[i + 1]);
      }
 else       if (arg.equals("-m")) {
        mapProps.put("metricsHostName",args[i + 1]);
      }
 else       if (arg.equals("-c")) {
        mapProps.put("collectInterval",args[i + 1]);
      }
 else       if (arg.equals("-s")) {
        mapProps.put("sendInterval",args[i + 1]);
      }
 else       if (arg.equals("-M")) {
        mapProps.put("master",args[i + 1]);
      }
 else       if (arg.equals("-d")) {
      }
 else {
        printUsage();
        throw new RuntimeException("Unexpected argument, See usage message.");
      }
    }
  }
  LOG.info("Recognized options: baseHostName={} hosts#={} trafficMode={} " + "metricsHostName={} collectIntervalMillis={} sendIntervalMillis={} " + "simulateMaster={}",mapProps.get("hostName"),Integer.valueOf(mapProps.get("numberOfHosts")),mapProps.get("trafficType"),mapProps.get("metricsHostName"),Integer.valueOf(mapProps.get("collectInterval")),Integer.valueOf(mapProps.get("sendInterval")),Boolean.valueOf(mapProps.get("master")));
  return mapProps;
}
