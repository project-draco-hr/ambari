def status(self, env):
    import params
    env.set_params(params)
    processes = flume_status()
    expected_agents = find_expected_agent_names()
    json = {}
    json['processes'] = processes
    json['alerts'] = []
    if ((len(processes) == 0) and (len(expected_agents) == 0)):
        alert = {}
        alert['name'] = 'flume_agent'
        alert['label'] = 'Flume Agent process'
        alert['state'] = 'WARNING'
        alert['text'] = 'No agents defined'
        json['alerts'].append(alert)
    else:
        for proc in processes:
            alert = {}
            alert['name'] = 'flume_agent'
            alert['instance'] = proc['name']
            alert['label'] = 'Flume Agent process'
            if ((not proc.has_key('status')) or (proc['status'] == 'NOT_RUNNING')):
                alert['state'] = 'CRITICAL'
                alert['text'] = 'Flume agent {0} not running'.format(proc['name'])
            else:
                alert['state'] = 'OK'
                alert['text'] = 'Flume agent {0} is running'.format(proc['name'])
            json['alerts'].append(alert)
    self.put_structured_out(json)
    if (len(expected_agents) > 0):
        for proc in processes:
            if ((not proc.has_key('status')) or (proc['status'] == 'NOT_RUNNING')):
                raise ComponentIsNotRunning()
