{
  List<AlertCurrentEntity> alerts=getMockAlerts("SCH");
  AlertCurrentEntity hostAlert=alerts.get(0);
  AlertCurrentEntity serviceAlert=alerts.get(1);
  AlertCurrentEntity componentAlert=alerts.get(2);
  EasyMock.expect(componentAlert.getMaintenanceState()).andReturn(MaintenanceState.OFF).atLeastOnce();
  componentAlert.setMaintenanceState(MaintenanceState.ON);
  EasyMock.expectLastCall().once();
  EasyMock.expect(m_alertsDAO.merge(componentAlert)).andReturn(componentAlert).once();
  ServiceComponentHost serviceComponentHost=EasyMock.createNiceMock(ServiceComponentHost.class);
  EasyMock.expect(serviceComponentHost.getHostName()).andReturn(HOSTNAME).atLeastOnce();
  EasyMock.expect(serviceComponentHost.getServiceName()).andReturn(SERVICE).atLeastOnce();
  EasyMock.expect(serviceComponentHost.getServiceComponentName()).andReturn(COMPONENT).atLeastOnce();
  EasyMock.replay(hostAlert,serviceAlert,componentAlert,serviceComponentHost,m_alertsDAO);
  MaintenanceModeEvent serviceComponentHostEvent=new MaintenanceModeEvent(MaintenanceState.ON,serviceComponentHost);
  m_eventPublisher.publish(serviceComponentHostEvent);
  EasyMock.verify(hostAlert,serviceAlert,componentAlert,serviceComponentHost,m_alertsDAO);
}
