{
  Set<String> oses=new HashSet<>();
  for (  RepositoryInfo ri : stack.getRepositories()) {
    if (null != os_family.find(ri.getOsType())) {
      oses.add(os_family.find(ri.getOsType()));
    }
  }
  VersionDefinitionXml.Merger merger=new VersionDefinitionXml.Merger();
  for (  Entry<String,String> versionEntry : osMap.entrySet()) {
    String osFamily=os_family.find(versionEntry.getKey());
    if (null == osFamily) {
      String alias=os_family.getAliases().get(versionEntry.getKey());
      if (null != alias) {
        osFamily=os_family.find(alias);
      }
    }
    if (null == osFamily || !oses.contains(osFamily)) {
      LOG.info("Stack {} cannot resolve OS {} to the supported ones: {}. Family: {}",stackId,versionEntry.getKey(),StringUtils.join(oses,','),osFamily);
      continue;
    }
    String uriString=versionEntry.getValue();
    if ('.' == uriString.charAt(0)) {
      uriString=new File(stackRepoFolder,uriString).toURI().toString();
    }
    try {
      URI uri=new URI(uriString);
      VersionDefinitionXml xml=VersionDefinitionXml.load(uri.toURL());
      merger.add(version,xml);
    }
 catch (    Exception e) {
      LOG.warn("Could not load version definition for {} identified by {}. {}",stackId,uriString,e.getMessage(),e);
    }
  }
  return merger.merge();
}
