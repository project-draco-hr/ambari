{
  Type type=new TypeToken<Map<String,Map<String,Object>>>(){
  }
.getType();
  Gson gson=new Gson();
  Map<String,Map<String,Object>> latestUrlMap=null;
  try {
    if (sourceUri.startsWith("http")) {
      URLStreamProvider streamProvider=new URLStreamProvider(LOOKUP_CONNECTION_TIMEOUT,LOOKUP_READ_TIMEOUT,null,null,null);
      LOG.info("Loading latest URL info for stack {}-{} from {}",stack.getName(),stack.getVersion(),sourceUri);
      latestUrlMap=gson.fromJson(new InputStreamReader(streamProvider.readFrom(sourceUri)),type);
    }
 else {
      File jsonFile=null;
      if (sourceUri.charAt(0) == '.') {
        jsonFile=new File(stackRepoFolder,sourceUri);
      }
 else {
        jsonFile=new File(sourceUri);
      }
      if (jsonFile.exists()) {
        LOG.info("Loading latest URL info for stack{}-{} from {}",stack.getName(),stack.getVersion(),jsonFile);
        latestUrlMap=gson.fromJson(new FileReader(jsonFile),type);
      }
    }
  }
 catch (  Exception e) {
    LOG.info("Could not load the URI for stack {}-{} from {}, ({}).  Using default repository values",stack.getName(),stack.getVersion(),sourceUri,e.getMessage());
    throw e;
  }
  if (null != latestUrlMap) {
    for (    RepositoryInfo ri : stack.getRepositories()) {
      if (latestUrlMap.containsKey(ri.getRepoId())) {
        Map<String,Object> valueMap=latestUrlMap.get(ri.getRepoId());
        if (valueMap.containsKey("latest")) {
          @SuppressWarnings("unchecked") Map<String,String> osMap=(Map<String,String>)valueMap.get("latest");
          String baseUrl=resolveOsUrl(ri.getOsType(),osMap);
          if (null != baseUrl) {
            String repo_file_format;
            if (os_family.isUbuntuFamily(ri.getOsType())) {
              repo_file_format="list";
            }
 else {
              repo_file_format="repo";
            }
            String repoFileName=stack.getName().toLowerCase() + "." + repo_file_format;
            int idx=baseUrl.toLowerCase().indexOf(repoFileName);
            if (-1 != idx && baseUrl.toLowerCase().endsWith(repoFileName)) {
              baseUrl=baseUrl.substring(0,idx);
            }
            if ('/' == baseUrl.charAt(baseUrl.length() - 1)) {
              baseUrl=baseUrl.substring(0,baseUrl.length() - 1);
            }
            ri.setLatestBaseUrl(baseUrl);
            if (ri.getBaseUrl() != null && !ri.isBaseUrlFromSaved()) {
              ri.setBaseUrl(baseUrl);
            }
          }
        }
      }
    }
  }
  StackId stackId=new StackId(stack);
  if (!latestUrlMap.containsKey(stackId.toString())) {
    return null;
  }
  Map<String,Object> map=latestUrlMap.get(stackId.toString());
  if (null == map || !map.containsKey("manifests")) {
    return null;
  }
  @SuppressWarnings("unchecked") Map<String,Object> versionMap=(Map<String,Object>)map.get("manifests");
  VersionDefinitionXml.Merger merger=new VersionDefinitionXml.Merger();
  for (  Entry<String,Object> entry : versionMap.entrySet()) {
    String version=entry.getKey();
    @SuppressWarnings("unchecked") Map<String,String> osMap=(Map<String,String>)entry.getValue();
    for (    Entry<String,String> versionEntry : osMap.entrySet()) {
      String uriString=versionEntry.getValue();
      if ('.' == uriString.charAt(0)) {
        uriString=new File(stackRepoFolder,uriString).toURI().toString();
      }
      try {
        URI uri=new URI(uriString);
        VersionDefinitionXml xml=VersionDefinitionXml.load(uri.toURL());
        merger.add(version,xml);
      }
 catch (      Exception e) {
        LOG.warn("Could not load version definition for {} identified by {}. {}",stackId,uriString,e.getMessage(),e);
      }
    }
    VersionDefinitionXml xml=merger.merge();
    if (null != xml) {
      stack.addVersionDefinition(version,xml);
    }
  }
  return null;
}
