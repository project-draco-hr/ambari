def compute_actual_version(self):
    '\n    After packages are installed, determine what the new actual version is, in order to save it.\n    '
    if (self.actual_version is None):
        Logger.info('Attempting to determine actual version with build number.')
        Logger.info('Old versions: {0}'.format(self.old_versions))
        new_versions = self.hdp_versions()
        Logger.info('New versions: {0}'.format(new_versions))
        deltas = (set(new_versions) - set(self.old_versions))
        Logger.info('Deltas: {0}'.format(deltas))
        if (1 == len(deltas)):
            self.actual_version = next(iter(deltas)).strip()
            self.structured_output['actual_version'] = self.actual_version
            self.put_structured_out(self.structured_output)
            self.write_actual_version_to_file(self.actual_version)
        else:
            Logger.info('Cannot determine a new actual version installed by using the delta method. This is expected during the first install attempt since not all packages will yield a new version in "hdp-select versions".')
            self.actual_version = self.get_actual_version_from_file()
            if (self.actual_version is not None):
                self.actual_version = self.actual_version.strip()
                self.structured_output['actual_version'] = self.actual_version
                self.put_structured_out(self.structured_output)
