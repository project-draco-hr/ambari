def actionexecute(self, env):
    delayed_fail = False
    package_install_result = False
    config = Script.get_config()
    try:
        repository_version = config['roleParams']['repository_version']
        base_urls = json.loads(config['roleParams']['base_urls'])
        package_list = json.loads(config['roleParams']['package_list'])
    except KeyError:
        repository_version = config['commandParams']['repository_version']
        base_urls = json.loads(config['commandParams']['base_urls'])
        package_list = json.loads(config['commandParams']['package_list'])
    installed_repositories = []
    current_repositories = ['base']
    current_repo_files = set(['base'])
    try:
        append_to_file = False
        for url_info in base_urls:
            (repo_name, repo_file) = self.install_repository(url_info, repository_version, append_to_file)
            current_repositories.append(repo_name)
            current_repo_files.add(repo_file)
            append_to_file = True
        installed_repositories = list_ambari_managed_repos()
    except Exception as err:
        print 'Can not distribute repositories.'
        print traceback.format_exc()
        delayed_fail = True
    if (not delayed_fail):
        packages_were_checked = False
        try:
            packages_installed_before = []
            allInstalledPackages(packages_installed_before)
            packages_installed_before = [package[0] for package in packages_installed_before]
            packages_were_checked = True
            for package in package_list:
                Package(package['name'], use_repos=(list(current_repo_files) if OSCheck.is_ubuntu_family() else current_repositories))
            package_install_result = True
        except Exception as err:
            print 'Can not install packages.'
            print traceback.format_exc()
            delayed_fail = True
            if (packages_were_checked and packages_installed_before):
                packages_installed_after = []
                allInstalledPackages(packages_installed_after)
                packages_installed_after = [package[0] for package in packages_installed_after]
                packages_installed_before = set(packages_installed_before)
                new_packages_installed = [package for package in packages_installed_after if (package not in packages_installed_before)]
                for package in new_packages_installed:
                    Package(package, action='remove')
    structured_output = {'ambari_repositories': installed_repositories, 'installed_repository_version': repository_version, 'package_installation_result': ('SUCCESS' if package_install_result else 'FAIL'), }
    self.put_structured_out(structured_output)
    if delayed_fail:
        raise Fail('Failed to distribute repositories/install packages')
