def actionexecute(self, env):
    num_errors = 0
    config = Script.get_config()
    signal.signal(signal.SIGTERM, self.abort_handler)
    signal.signal(signal.SIGINT, self.abort_handler)
    try:
        self.repository_version = config['roleParams']['repository_version']
        base_urls = json.loads(config['roleParams']['base_urls'])
        package_list = json.loads(config['roleParams']['package_list'])
        stack_id = config['roleParams']['stack_id']
    except KeyError:
        self.repository_version = config['commandParams']['repository_version']
        base_urls = json.loads(config['commandParams']['base_urls'])
        package_list = json.loads(config['commandParams']['package_list'])
        stack_id = config['commandParams']['stack_id']
    self.repository_version = self.repository_version.strip()
    installed_repositories = []
    self.current_repositories = ['base']
    if OSCheck.is_redhat_family():
        self.current_repositories.append('rhui*')
    self.current_repo_files = set(['base'])
    Logger.info('Will install packages for repository version {0}'.format(self.repository_version))
    try:
        append_to_file = False
        for url_info in base_urls:
            (repo_name, repo_file) = self.install_repository(url_info, append_to_file)
            self.current_repositories.append(repo_name)
            self.current_repo_files.add(repo_file)
            append_to_file = True
        installed_repositories = list_ambari_managed_repos()
    except Exception as err:
        Logger.logger.exception('Cannot distribute repositories. Error: {0}'.format(str(err)))
        num_errors += 1
    self.structured_output = {'ambari_repositories': installed_repositories, 'installed_repository_version': self.repository_version, 'stack_id': stack_id, 'package_installation_result': 'FAIL', }
    self.put_structured_out(self.structured_output)
    if (num_errors > 0):
        raise Fail('Failed to distribute repositories/install packages')
    self.actual_version = None
    if self.repository_version:
        m = re.search('[\\d\\.]+-\\d+', self.repository_version)
        if m:
            self.actual_version = self.repository_version
            self.structured_output['actual_version'] = self.actual_version
            self.put_structured_out(self.structured_output)
    self.old_versions = []
    if (self.actual_version is None):
        Logger.info("Repository version {0} doesn't contain a build number. Will have to calculate the actual version.".format(self.repository_version))
        self.old_versions = self.hdp_versions()
    try:
        ret_code = self.install_packages(package_list)
        if (ret_code == 0):
            self.structured_output['package_installation_result'] = 'SUCCESS'
            self.put_structured_out(self.structured_output)
        else:
            num_errors += 1
    except Exception as err:
        Logger.logger.exception('Could not install packages. Error: {0}'.format(str(err)))
    if (num_errors > 0):
        raise Fail('Failed to distribute repositories/install packages')
