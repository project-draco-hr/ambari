def actionexecute(self, env):
    num_errors = 0
    config = Script.get_config()
    repo_rhel_suse = config['configurations']['cluster-env']['repo_suse_rhel_template']
    repo_ubuntu = config['configurations']['cluster-env']['repo_ubuntu_template']
    template = (repo_rhel_suse if (OSCheck.is_redhat_family() or OSCheck.is_suse_family()) else repo_ubuntu)
    signal.signal(signal.SIGTERM, self.abort_handler)
    signal.signal(signal.SIGINT, self.abort_handler)
    try:
        self.repository_version = config['roleParams']['repository_version']
        base_urls = json.loads(config['roleParams']['base_urls'])
        package_list = json.loads(config['roleParams']['package_list'])
        stack_id = config['roleParams']['stack_id']
    except KeyError:
        self.repository_version = config['commandParams']['repository_version']
        base_urls = json.loads(config['commandParams']['base_urls'])
        package_list = json.loads(config['commandParams']['package_list'])
        stack_id = config['commandParams']['stack_id']
    self.current_stack_version_formatted = None
    if ('stack_version' in config['hostLevelParams']):
        current_stack_version_unformatted = str(config['hostLevelParams']['stack_version'])
        self.current_stack_version_formatted = format_stack_version(current_stack_version_unformatted)
    self.stack_name = Script.get_stack_name()
    if (self.stack_name is None):
        raise Fail('Cannot determine the stack name')
    self.stack_root_folder = Script.get_stack_root()
    if (self.stack_root_folder is None):
        raise Fail("Cannot determine the stack's root directory")
    if (self.repository_version is None):
        raise Fail('Cannot determine the repository version to install')
    self.repository_version = self.repository_version.strip()
    installed_repositories = []
    self.current_repositories = []
    self.current_repo_files = set()
    if OSCheck.is_suse_family():
        self.current_repositories.append('base')
    elif OSCheck.is_ubuntu_family():
        self.current_repo_files.add('base')
    Logger.info('Will install packages for repository version {0}'.format(self.repository_version))
    if (0 == len(base_urls)):
        Logger.info('Repository list is empty. Ambari may not be managing the repositories for {0}.'.format(self.repository_version))
    try:
        append_to_file = False
        for url_info in base_urls:
            (repo_name, repo_file) = self.install_repository(url_info, append_to_file, template)
            self.current_repositories.append(repo_name)
            self.current_repo_files.add(repo_file)
            append_to_file = True
        installed_repositories = list_ambari_managed_repos(self.stack_name)
    except Exception as err:
        Logger.logger.exception('Cannot distribute repositories. Error: {0}'.format(str(err)))
        num_errors += 1
    self.structured_output = {'ambari_repositories': installed_repositories, 'installed_repository_version': self.repository_version, 'stack_id': stack_id, 'package_installation_result': 'FAIL', }
    self.put_structured_out(self.structured_output)
    if (num_errors > 0):
        raise Fail('Failed to distribute repositories/install packages')
    self.old_versions = get_stack_versions(self.stack_root_folder)
    try:
        is_package_install_successful = False
        ret_code = self.install_packages(package_list)
        if (ret_code == 0):
            self.structured_output['package_installation_result'] = 'SUCCESS'
            self.put_structured_out(self.structured_output)
            is_package_install_successful = True
        else:
            num_errors += 1
    except Exception as err:
        num_errors += 1
        Logger.logger.exception('Could not install packages. Error: {0}'.format(str(err)))
    if (num_errors > 0):
        raise Fail('Failed to distribute repositories/install packages')
    if (is_package_install_successful and ('actual_version' in self.structured_output)):
        self._create_config_links_if_necessary(stack_id, self.structured_output['actual_version'])
