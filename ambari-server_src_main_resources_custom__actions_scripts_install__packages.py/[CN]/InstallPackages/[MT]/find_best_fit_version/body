def find_best_fit_version(self, versions, repo_version):
    '\n    Given a list of installed versions and a repo version, search for a version that best fits the repo version\n    If the repo version is found in the list of installed versions, return the repo version itself.\n    If the repo version is not found in the list of installed versions\n    normalize the repo version and use the REPO_VERSION_HISTORY_FILE file to search the list.\n\n    :param versions: List of versions installed\n    :param repo_version: Repo version to search\n    :return: Matching version, None if no match was found.\n    '
    if ((versions is None) or (repo_version is None)):
        return None
    build_num_match = re.search('[\\d\\.]+-\\d+', repo_version)
    if (build_num_match and (repo_version in versions)):
        Logger.info('Best Fit Version: Resolved from repo version with valid build number: {0}'.format(repo_version))
        return repo_version
    normalized_repo_version = repo_version.split('-')[0]
    match_versions = filter((lambda x: x.startswith(normalized_repo_version)), versions)
    if match_versions:
        if (len(match_versions) == 1):
            Logger.info('Best Fit Version: Resolved from normalized repo version without conflicts: {0}'.format(match_versions[0]))
            return match_versions[0]
        history_version = read_actual_version_from_history_file(normalized_repo_version)
        if (history_version in match_versions):
            Logger.info('Best Fit Version: Resolved from normalized repo version using {0}: {1}'.format(REPO_VERSION_HISTORY_FILE, history_version))
            return history_version
    return None
