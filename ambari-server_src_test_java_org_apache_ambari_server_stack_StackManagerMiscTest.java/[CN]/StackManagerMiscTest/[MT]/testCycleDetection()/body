{
  MetainfoDAO metaInfoDao=createNiceMock(MetainfoDAO.class);
  StackDAO stackDao=createNiceMock(StackDAO.class);
  ActionMetadata actionMetadata=createNiceMock(ActionMetadata.class);
  OsFamily osFamily=createNiceMock(OsFamily.class);
  StackEntity stackEntity=createNiceMock(StackEntity.class);
  expect(stackDao.find(EasyMock.anyObject(String.class),EasyMock.anyObject(String.class))).andReturn(stackEntity).atLeastOnce();
  replay(actionMetadata,stackDao,metaInfoDao,osFamily);
  try {
    String stacksCycle1=ClassLoader.getSystemClassLoader().getResource("stacks_with_cycle").getPath();
    StackManager stackManager=new StackManager(new File(stacksCycle1),null,osFamily,false,metaInfoDao,actionMetadata,stackDao);
    fail("Expected exception due to cyclic stack");
  }
 catch (  AmbariException e) {
    assertEquals("Cycle detected while parsing stack definition",e.getMessage());
  }
  try {
    String stacksCycle2=ClassLoader.getSystemClassLoader().getResource("stacks_with_cycle2").getPath();
    StackManager stackManager=new StackManager(new File(stacksCycle2),null,osFamily,true,metaInfoDao,actionMetadata,stackDao);
    fail("Expected exception due to cyclic stack");
  }
 catch (  AmbariException e) {
    assertEquals("Cycle detected while parsing stack definition",e.getMessage());
  }
}
