{
  MetainfoDAO metaInfoDao=createNiceMock(MetainfoDAO.class);
  StackDAO stackDao=createNiceMock(StackDAO.class);
  ExtensionDAO extensionDao=createNiceMock(ExtensionDAO.class);
  ExtensionLinkDAO linkDao=createNiceMock(ExtensionLinkDAO.class);
  ActionMetadata actionMetadata=createNiceMock(ActionMetadata.class);
  OsFamily osFamily=createNiceMock(OsFamily.class);
  StackEntity stackEntity=createNiceMock(StackEntity.class);
  expect(stackDao.find(EasyMock.anyObject(String.class),EasyMock.anyObject(String.class))).andReturn(stackEntity).atLeastOnce();
  List<ExtensionLinkEntity> list=Collections.emptyList();
  expect(linkDao.findByStack(EasyMock.anyObject(String.class),EasyMock.anyObject(String.class))).andReturn(list).atLeastOnce();
  replay(metaInfoDao,stackDao,extensionDao,linkDao,actionMetadata,osFamily);
  try {
    String upgradeCycle=ClassLoader.getSystemClassLoader().getResource("stacks_with_upgrade_cycle").getPath();
    StackManager stackManager=new StackManager(new File(upgradeCycle),null,null,osFamily,false,metaInfoDao,actionMetadata,stackDao,extensionDao,linkDao);
    fail("Expected exception due to cyclic service upgrade xml");
  }
 catch (  AmbariException e) {
    assertEquals("Missing groups: [BAR, FOO]",e.getMessage());
  }
}
