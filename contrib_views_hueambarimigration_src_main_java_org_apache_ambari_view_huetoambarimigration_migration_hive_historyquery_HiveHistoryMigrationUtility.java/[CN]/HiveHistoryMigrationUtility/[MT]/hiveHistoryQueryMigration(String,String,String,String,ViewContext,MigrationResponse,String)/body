{
  InitiateJobMigration migrationservice=new InitiateJobMigration();
  long startTime=System.currentTimeMillis();
  final Logger logger=Logger.getLogger(HiveHistoryMigrationUtility.class);
  Connection connectionHuedb=null;
  Connection connectionAmbaridb=null;
  logger.info("--------------------------------------");
  logger.info("hive History query Migration started");
  logger.info("--------------------------------------");
  logger.info("start date: " + startDate);
  logger.info("enddate date: " + endDate);
  logger.info("instance is: " + username);
  logger.info("hue username is : " + instance);
  MigrationModel model=new MigrationModel();
  int maxCountOfAmbariDb=0, i=0, sequence;
  String time=null;
  Long epochTime=null;
  String dirNameforHiveHistroy;
  ArrayList<HiveModel> dbpojoHiveHistoryQuery=new ArrayList<HiveModel>();
  HiveHistoryQueryMigrationImplementation hiveHistoryQueryImpl=new HiveHistoryQueryMigrationImplementation();
  QuerySet huedatabase=null;
  if (view.getProperties().get("huedrivername").contains("mysql")) {
    huedatabase=new MysqlQuerySet();
  }
 else   if (view.getProperties().get("huedrivername").contains("postgresql")) {
    huedatabase=new PostgressQuerySet();
  }
 else   if (view.getProperties().get("huedrivername").contains("sqlite")) {
    huedatabase=new SqliteQuerySet();
  }
 else   if (view.getProperties().get("huedrivername").contains("oracle")) {
    huedatabase=new OracleQuerySet();
  }
  QuerySetAmbariDB ambaridatabase=null;
  if (view.getProperties().get("ambaridrivername").contains("mysql")) {
    ambaridatabase=new MysqlQuerySetAmbariDB();
  }
 else   if (view.getProperties().get("ambaridrivername").contains("postgresql")) {
    ambaridatabase=new PostgressQuerySetAmbariDB();
  }
 else   if (view.getProperties().get("ambaridrivername").contains("oracle")) {
    ambaridatabase=new OracleQuerySetAmbariDB();
  }
  try {
    connectionHuedb=DataSourceHueDatabase.getInstance(view.getProperties().get("huedrivername"),view.getProperties().get("huejdbcurl"),view.getProperties().get("huedbusername"),view.getProperties().get("huedbpassword")).getConnection();
    dbpojoHiveHistoryQuery=hiveHistoryQueryImpl.fetchFromHue(username,startDate,endDate,connectionHuedb,huedatabase);
    for (int j=0; j < dbpojoHiveHistoryQuery.size(); j++) {
      logger.info("the query fetched from hue" + dbpojoHiveHistoryQuery.get(j).getQuery());
    }
    if (dbpojoHiveHistoryQuery.size() == 0) {
      migrationresult.setIsNoQuerySelected("yes");
      migrationresult.setProgressPercentage(0);
      migrationresult.setNumberOfQueryTransfered(0);
      migrationresult.setTotalNoQuery(dbpojoHiveHistoryQuery.size());
      getResourceManager(view).update(migrationresult,jobid);
      logger.info("No queries has been selected acccording to your criteria");
    }
 else {
      connectionAmbaridb=DataSourceAmbariDatabase.getInstance(view.getProperties().get("ambaridrivername"),view.getProperties().get("ambarijdbcurl"),view.getProperties().get("ambaridbusername"),view.getProperties().get("ambaridbpassword")).getConnection();
      connectionAmbaridb.setAutoCommit(false);
      int id=0;
      id=hiveHistoryQueryImpl.fetchInstanceTablename(connectionAmbaridb,instance,ambaridatabase);
      sequence=hiveHistoryQueryImpl.fetchSequenceno(connectionAmbaridb,id,ambaridatabase);
      for (i=0; i < dbpojoHiveHistoryQuery.size(); i++) {
        float calc=((float)(i + 1)) / dbpojoHiveHistoryQuery.size() * 100;
        int progressPercentage=Math.round(calc);
        migrationresult.setIsNoQuerySelected("no");
        migrationresult.setProgressPercentage(progressPercentage);
        migrationresult.setNumberOfQueryTransfered(i + 1);
        migrationresult.setTotalNoQuery(dbpojoHiveHistoryQuery.size());
        getResourceManager(view).update(migrationresult,jobid);
        logger.info("_____________________");
        logger.info("Loop No." + (i + 1));
        logger.info("_____________________");
        logger.info("Hue query that has been fetched" + dbpojoHiveHistoryQuery.get(i).getQuery());
        logger.info("Table name has been fetched from intance name");
        hiveHistoryQueryImpl.writetoFileQueryhql(dbpojoHiveHistoryQuery.get(i).getQuery(),ConfigurationCheckImplementation.getHomeDir());
        logger.info(".hql file created in Temp directory");
        hiveHistoryQueryImpl.writetoFileLogs(ConfigurationCheckImplementation.getHomeDir());
        logger.info("Log file created in Temp directory");
        maxCountOfAmbariDb=i + sequence + 1;
        time=hiveHistoryQueryImpl.getTime();
        epochTime=hiveHistoryQueryImpl.getEpochTime();
        dirNameforHiveHistroy="/user/" + username + "/hive/jobs/hive-job-"+ maxCountOfAmbariDb+ "-"+ time+ "/";
        logger.info("Directory name where .hql will be saved: " + dirNameforHiveHistroy);
        String versionName=hiveHistoryQueryImpl.getAllHiveVersionInstance(connectionAmbaridb,ambaridatabase,instance);
        hiveHistoryQueryImpl.insertRowinAmbaridb(dirNameforHiveHistroy,maxCountOfAmbariDb,epochTime,connectionAmbaridb,id,instance,i,ambaridatabase,versionName,username);
        if (view.getProperties().get("KerberoseEnabled").equals("y")) {
          logger.info("kerberose enabled");
          hiveHistoryQueryImpl.createDirKerberorisedSecured(dirNameforHiveHistroy,view.getProperties().get("namenode_URI_Ambari"),username,view.getProperties().get("PrincipalUserName"));
          logger.info("Directory created in hdfs");
          hiveHistoryQueryImpl.putFileinHdfsKerborizedSecured(ConfigurationCheckImplementation.getHomeDir() + "query.hql",dirNameforHiveHistroy,view.getProperties().get("namenode_URI_Ambari"),username,view.getProperties().get("PrincipalUserName"));
          hiveHistoryQueryImpl.putFileinHdfsKerborizedSecured(ConfigurationCheckImplementation.getHomeDir() + "logs",dirNameforHiveHistroy,view.getProperties().get("namenode_URI_Ambari"),username,view.getProperties().get("PrincipalUserName"));
        }
 else {
          logger.info("kerberose not enabled");
          hiveHistoryQueryImpl.createDir(dirNameforHiveHistroy,view.getProperties().get("namenode_URI_Ambari"),username);
          logger.info("Directory created in hdfs");
          hiveHistoryQueryImpl.putFileinHdfs(ConfigurationCheckImplementation.getHomeDir() + "query.hql",dirNameforHiveHistroy,view.getProperties().get("namenode_URI_Ambari"),username);
          hiveHistoryQueryImpl.putFileinHdfs(ConfigurationCheckImplementation.getHomeDir() + "logs",dirNameforHiveHistroy,view.getProperties().get("namenode_URI_Ambari"),username);
        }
      }
      hiveHistoryQueryImpl.updateSequenceno(connectionAmbaridb,maxCountOfAmbariDb,id,ambaridatabase);
      connectionAmbaridb.commit();
    }
  }
 catch (  SQLException e) {
    logger.error("Sql exception in ambari database: ",e);
    try {
      connectionAmbaridb.rollback();
      model.setIfSuccess(false);
      logger.error("Sql statement are Rolledback");
    }
 catch (    SQLException e1) {
      logger.error("Sql rollback exception in ambari database",e1);
    }
  }
catch (  ClassNotFoundException e) {
    logger.error("Class not found :- ",e);
  }
catch (  ParseException e) {
    logger.error("Parse Exception : ",e);
  }
catch (  URISyntaxException e) {
    logger.error("URI Syntax Exception: ",e);
  }
catch (  PropertyVetoException e) {
    logger.error("PropertyVetoException: ",e);
  }
catch (  ItemNotFound itemNotFound) {
    itemNotFound.printStackTrace();
  }
 finally {
    if (connectionAmbaridb != null)     try {
      connectionAmbaridb.close();
    }
 catch (    SQLException e) {
      logger.error("Exception in closing the connection :",e);
    }
  }
  hiveHistoryQueryImpl.deleteFileQueryhql(ConfigurationCheckImplementation.getHomeDir());
  hiveHistoryQueryImpl.deleteFileQueryLogs(ConfigurationCheckImplementation.getHomeDir());
  logger.info("------------------------------");
  logger.info("hive History query Migration Ends");
  logger.info("------------------------------");
  long stopTime=System.currentTimeMillis();
  long elapsedTime=stopTime - startTime;
  migrationresult.setJobtype("hivehistoryquerymigration");
  migrationresult.setTotalTimeTaken(String.valueOf(elapsedTime));
  getResourceManager(view).update(migrationresult,jobid);
}
