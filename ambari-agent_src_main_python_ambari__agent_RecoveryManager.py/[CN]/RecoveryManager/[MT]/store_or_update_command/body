def store_or_update_command(self, command):
    '\n    Stores command details by reading them from the STATUS_COMMAND\n    Update desired state as well\n    '
    if (not self.enabled()):
        return
    logger.debug('Inspecting command to store/update details')
    if ((self.COMMAND_TYPE in command) and (command[self.COMMAND_TYPE] == ActionQueue.STATUS_COMMAND)):
        payloadLevel = self.PAYLOAD_LEVEL_DEFAULT
        if (self.PAYLOAD_LEVEL in command):
            payloadLevel = command[self.PAYLOAD_LEVEL]
        component = command[self.COMPONENT_NAME]
        self.update_desired_status(component, command[self.DESIRED_STATE])
        self.update_config_staleness(component, command[self.HAS_STALE_CONFIG])
        if (payloadLevel == self.PAYLOAD_LEVEL_EXECUTION_COMMAND):
            if (self.EXECUTION_COMMAND_DETAILS in command):
                self.remove_command(component)
                self.add_command(component, command[self.EXECUTION_COMMAND_DETAILS])
                logger.debug(('Stored command details for ' + component))
            else:
                logger.warn((('Expected field ' + self.EXECUTION_COMMAND_DETAILS) + ' unavailable.'))
            pass
    pass
