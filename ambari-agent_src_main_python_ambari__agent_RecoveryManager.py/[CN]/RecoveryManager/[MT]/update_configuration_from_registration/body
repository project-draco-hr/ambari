def update_configuration_from_registration(self, reg_resp):
    '\n    TODO: Server sends the recovery configuration - call update_config after parsing\n    "recoveryConfig": {\n      "type" : "DEFAULT|AUTO_START|AUTO_INSTALL_START|FULL",\n      "maxCount" : 10,\n      "windowInMinutes" : 60,\n      "retryGap" : 0,\n      "components" : "a,b",\n      "recoveryTimestamp" : 1458150424380\n      }\n    '
    recovery_enabled = False
    auto_start_only = False
    auto_install_start = False
    max_count = 6
    window_in_min = 60
    retry_gap = 5
    max_lifetime_count = 12
    enabled_components = ''
    recovery_timestamp = (-1)
    if (reg_resp and ('recoveryConfig' in reg_resp)):
        logger.info(('RecoverConfig = ' + pprint.pformat(reg_resp['recoveryConfig'])))
        config = reg_resp['recoveryConfig']
        if ('type' in config):
            if (config['type'] in ['AUTO_INSTALL_START', 'AUTO_START', 'FULL']):
                recovery_enabled = True
                if (config['type'] == 'AUTO_START'):
                    auto_start_only = True
                elif (config['type'] == 'AUTO_INSTALL_START'):
                    auto_install_start = True
        if ('maxCount' in config):
            max_count = self._read_int_(config['maxCount'], max_count)
        if ('windowInMinutes' in config):
            window_in_min = self._read_int_(config['windowInMinutes'], window_in_min)
        if ('retryGap' in config):
            retry_gap = self._read_int_(config['retryGap'], retry_gap)
        if ('maxLifetimeCount' in config):
            max_lifetime_count = self._read_int_(config['maxLifetimeCount'], max_lifetime_count)
        if ('components' in config):
            enabled_components = config['components']
        if ('recoveryTimestamp' in config):
            recovery_timestamp = config['recoveryTimestamp']
    self.update_config(max_count, window_in_min, retry_gap, max_lifetime_count, recovery_enabled, auto_start_only, auto_install_start, enabled_components, recovery_timestamp)
    pass
