def update_config(self, max_count, window_in_min, retry_gap, max_lifetime_count, recovery_enabled, auto_start_only):
    '\n    Update recovery configuration, recovery is disabled if configuration values\n    are not correct\n    '
    self.recovery_enabled = False
    if (max_count <= 0):
        logger.warn('Recovery disabled: max_count must be a non-negative number')
        return
    if (window_in_min <= 0):
        logger.warn('Recovery disabled: window_in_min must be a non-negative number')
        return
    if (retry_gap < 1):
        logger.warn('Recovery disabled: retry_gap must be a positive number and at least 1')
        return
    if (retry_gap >= window_in_min):
        logger.warn('Recovery disabled: retry_gap must be smaller than window_in_min')
        return
    if ((max_lifetime_count < 0) or (max_lifetime_count < max_count)):
        logger.warn('Recovery disabled: max_lifetime_count must more than 0 and >= max_count')
        return
    self.max_count = max_count
    self.window_in_min = window_in_min
    self.retry_gap = retry_gap
    self.window_in_sec = (window_in_min * 60)
    self.retry_gap_in_sec = (retry_gap * 60)
    self.auto_start_only = auto_start_only
    self.max_lifetime_count = max_lifetime_count
    self.allowed_desired_states = [self.STARTED, self.INSTALLED]
    self.allowed_current_states = [self.INIT, self.INSTALLED, self.STARTED]
    if self.auto_start_only:
        self.allowed_desired_states = [self.STARTED]
        self.allowed_current_states = [self.INSTALLED]
    self.recovery_enabled = recovery_enabled
    if self.recovery_enabled:
        logger.info('==> Auto recovery is enabled with maximum %s in %s minutes with gap of %s minutes between and lifetime max being %s.', self.max_count, self.window_in_min, self.retry_gap, self.max_lifetime_count)
    pass
