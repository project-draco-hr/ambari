def process_execution_commands(self, commands):
    if (not self.enabled()):
        return
    if (commands and (len(commands) > 0)):
        for command in commands:
            if ((self.COMMAND_TYPE in command) and (command[self.COMMAND_TYPE] == ActionQueue.EXECUTION_COMMAND)):
                if (self.ROLE in command):
                    if (command[self.ROLE_COMMAND] in (ActionQueue.ROLE_COMMAND_INSTALL, ActionQueue.ROLE_COMMAND_STOP)):
                        self.update_desired_status(command[self.ROLE], LiveStatus.DEAD_STATUS)
                        logger.info(((('Received EXECUTION_COMMAND (STOP/INSTALL), desired state of ' + command[self.ROLE]) + ' to ') + self.get_desired_status(command[self.ROLE])))
                    elif (command[self.ROLE_COMMAND] == ActionQueue.ROLE_COMMAND_START):
                        self.update_desired_status(command[self.ROLE], LiveStatus.LIVE_STATUS)
                        logger.info(((('Received EXECUTION_COMMAND (START), desired state of ' + command[self.ROLE]) + ' to ') + self.get_desired_status(command[self.ROLE])))
                    elif (command[self.HOST_LEVEL_PARAMS].has_key('custom_command') and (command[self.HOST_LEVEL_PARAMS]['custom_command'] == ActionQueue.CUSTOM_COMMAND_RESTART)):
                        self.update_desired_status(command[self.ROLE], LiveStatus.LIVE_STATUS)
                        logger.info(((('Received EXECUTION_COMMAND (RESTART), desired state of ' + command[self.ROLE]) + ' to ') + self.get_desired_status(command[self.ROLE])))
    pass
