def runCommand(self, command, tmpoutfile, tmperrfile, forced_command_name=None, override_output_files=True, retry=False):
    '\n    forced_command_name may be specified manually. In this case, value, defined at\n    command json, is ignored.\n    '
    try:
        script_type = command['commandParams']['script_type']
        script = command['commandParams']['script']
        timeout = int(command['commandParams']['command_timeout'])
        if (('hostLevelParams' in command) and ('jdk_location' in command['hostLevelParams'])):
            server_url_prefix = command['hostLevelParams']['jdk_location']
        else:
            server_url_prefix = command['commandParams']['jdk_location']
        task_id = 'status'
        try:
            task_id = command['taskId']
            command_name = command['roleCommand']
        except KeyError:
            pass
        if (forced_command_name is not None):
            command_name = forced_command_name
        if (command_name == self.CUSTOM_ACTION_COMMAND):
            base_dir = self.file_cache.get_custom_actions_base_dir(server_url_prefix)
            script_tuple = (os.path.join(base_dir, 'scripts', script), base_dir)
            hook_dir = None
        else:
            if (command_name == self.CUSTOM_COMMAND_COMMAND):
                command_name = command['hostLevelParams']['custom_command']
            self.file_cache.get_host_scripts_base_dir(server_url_prefix)
            hook_dir = self.file_cache.get_hook_base_dir(command, server_url_prefix)
            base_dir = self.file_cache.get_service_base_dir(command, server_url_prefix)
            script_path = self.resolve_script_path(base_dir, script)
            script_tuple = (script_path, base_dir)
        tmpstrucoutfile = os.path.join(self.tmp_dir, 'structured-out-{0}.json'.format(task_id))
        if (script_type.upper() != self.SCRIPT_TYPE_PYTHON):
            message = 'Unknown script type {0}'.format(script_type)
            raise AgentException(message)
        handle = None
        if command.has_key('__handle'):
            handle = command['__handle']
            handle.on_background_command_started = self.map_task_to_process
            del command['__handle']
        json_path = self.dump_command_to_json(command, retry)
        pre_hook_tuple = self.resolve_hook_script_path(hook_dir, self.PRE_HOOK_PREFIX, command_name, script_type)
        post_hook_tuple = self.resolve_hook_script_path(hook_dir, self.POST_HOOK_PREFIX, command_name, script_type)
        py_file_list = [pre_hook_tuple, script_tuple, post_hook_tuple]
        filtered_py_file_list = [i for i in py_file_list if i]
        logger_level = logging.getLevelName(logger.level)
        ret = None
        from ActionQueue import ActionQueue
        if (command.has_key('commandType') and (command['commandType'] == ActionQueue.BACKGROUND_EXECUTION_COMMAND) and (len(filtered_py_file_list) > 1)):
            raise AgentException('Background commands are supported without hooks only')
        python_executor = self.get_py_executor(forced_command_name)
        backup_log_files = (not (command_name in self.DONT_BACKUP_LOGS_FOR_COMMANDS))
        for (py_file, current_base_dir) in filtered_py_file_list:
            log_info_on_failure = (not (command_name in self.DONT_DEBUG_FAILURES_FOR_COMMANDS))
            script_params = [command_name, json_path, current_base_dir, tmpstrucoutfile, logger_level, self.exec_tmp_dir]
            ret = python_executor.run_file(py_file, script_params, tmpoutfile, tmperrfile, timeout, tmpstrucoutfile, self.map_task_to_process, task_id, override_output_files, backup_log_files=backup_log_files, handle=handle, log_info_on_failure=log_info_on_failure)
            override_output_files = False
            if (ret['exitcode'] != 0):
                break
        if (not ret):
            raise AgentException('No script has been executed')
        if (handle is None):
            cancel_reason = self.command_canceled_reason(task_id)
            if cancel_reason:
                ret['stdout'] += cancel_reason
                ret['stderr'] += cancel_reason
                with open(tmpoutfile, 'a') as f:
                    f.write(cancel_reason)
                with open(tmperrfile, 'a') as f:
                    f.write(cancel_reason)
    except Exception as e:
        (exc_type, exc_obj, exc_tb) = sys.exc_info()
        message = 'Caught an exception while executing custom service command: {0}: {1}; {2}'.format(exc_type, exc_obj, str(e))
        logger.exception(message)
        ret = {'stdout': message, 'stderr': message, 'structuredOut': '{}', 'exitcode': 1, }
    return ret
