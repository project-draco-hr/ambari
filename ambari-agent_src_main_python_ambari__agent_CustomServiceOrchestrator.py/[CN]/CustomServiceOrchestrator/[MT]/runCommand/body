def runCommand(self, command, tmpoutfile, tmperrfile):
    try:
        component_name = command['role']
        script_type = command['commandParams']['script_type']
        script = command['commandParams']['script']
        command_name = command['roleCommand']
        timeout = int(command['commandParams']['command_timeout'])
        task_id = command['taskId']
        if (command_name == self.CUSTOM_ACTION_COMMAND):
            base_dir = self.config.get('python', 'custom_actions_dir')
            script_path = os.path.join(base_dir, script)
            hook_dir = None
        else:
            stack_name = command['hostLevelParams']['stack_name']
            stack_version = command['hostLevelParams']['stack_version']
            hook_dir = self.file_cache.get_hook_base_dir(stack_name, stack_version)
            metadata_folder = command['commandParams']['service_metadata_folder']
            base_dir = self.file_cache.get_service_base_dir(stack_name, stack_version, metadata_folder, component_name)
            script_path = self.resolve_script_path(base_dir, script, script_type)
        tmpstrucoutfile = os.path.join(self.tmp_dir, 'structured-out-{0}.json'.format(task_id))
        if (script_type.upper() != self.SCRIPT_TYPE_PYTHON):
            message = 'Unknown script type {0}'.format(script_type)
            raise AgentException(message)
        json_path = self.dump_command_to_json(command)
        script_params = [command_name, json_path, base_dir]
        pre_hook = self.resolve_hook_script_path(hook_dir, self.PRE_HOOK_PREFIX, command_name, script_type)
        post_hook = self.resolve_hook_script_path(hook_dir, self.POST_HOOK_PREFIX, command_name, script_type)
        py_file_list = [pre_hook, script_path, post_hook]
        filtered_py_file_list = [i for i in py_file_list if i]
        ret = None
        for py_file in filtered_py_file_list:
            ret = self.python_executor.run_file(py_file, script_params, tmpoutfile, tmperrfile, timeout, tmpstrucoutfile)
            if (ret['exitcode'] != 0):
                break
        if (not ret):
            raise AgentException('No script has been executed')
    except Exception:
        (exc_type, exc_obj, exc_tb) = sys.exc_info()
        message = 'Catched an exception while executing custom service command: {0}: {1}'.format(exc_type, exc_obj)
        logger.error(message)
        ret = {'stdout': message, 'stderr': message, 'structuredOut': message, 'exitcode': 1, }
    return ret
