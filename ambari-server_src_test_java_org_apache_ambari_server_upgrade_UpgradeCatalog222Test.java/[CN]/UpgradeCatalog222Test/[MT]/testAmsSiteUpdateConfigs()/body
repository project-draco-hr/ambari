{
  Map<String,String> oldPropertiesAmsSite=new HashMap<String,String>(){
{
      put("timeline.metrics.host.aggregator.daily.checkpointCutOffMultiplier",String.valueOf(1));
      put("timeline.metrics.cluster.aggregator.daily.checkpointCutOffMultiplier",String.valueOf(1));
      put("timeline.metrics.service.operation.mode","distributed");
      put("timeline.metrics.host.aggregator.ttl",String.valueOf(86400));
      put("timeline.metrics.host.aggregator.minute.ttl",String.valueOf(604800));
      put("timeline.metrics.host.aggregator.hourly.ttl",String.valueOf(2592000));
      put("timeline.metrics.host.aggregator.daily.ttl",String.valueOf(31536000));
      put("timeline.metrics.cluster.aggregator.second.ttl",String.valueOf(21600));
      put("timeline.metrics.cluster.aggregator.minute.ttl",String.valueOf(7776000));
      put("timeline.metrics.cluster.aggregator.hourly.ttl",String.valueOf(31536000));
      put("timeline.metrics.cluster.aggregator.daily.ttl",String.valueOf(63072000));
    }
  }
;
  Map<String,String> newPropertiesAmsSite=new HashMap<String,String>(){
{
      put("timeline.metrics.host.aggregator.daily.checkpointCutOffMultiplier",String.valueOf(2));
      put("timeline.metrics.cluster.aggregator.daily.checkpointCutOffMultiplier",String.valueOf(2));
      put("timeline.metrics.service.watcher.disabled",String.valueOf(false));
      put("timeline.metrics.host.aggregator.ttl",String.valueOf(7 * 86400));
      put("timeline.metrics.host.aggregator.minute.ttl",String.valueOf(7 * 86400));
      put("timeline.metrics.host.aggregator.hourly.ttl",String.valueOf(30 * 86400));
      put("timeline.metrics.host.aggregator.daily.ttl",String.valueOf(365 * 86400));
      put("timeline.metrics.cluster.aggregator.second.ttl",String.valueOf(21600));
      put("timeline.metrics.cluster.aggregator.minute.ttl",String.valueOf(30 * 86400));
      put("timeline.metrics.cluster.aggregator.hourly.ttl",String.valueOf(365 * 86400));
      put("timeline.metrics.cluster.aggregator.daily.ttl",String.valueOf(730 * 86400));
      put("timeline.metrics.service.operation.mode","distributed");
    }
  }
;
  EasyMockSupport easyMockSupport=new EasyMockSupport();
  Clusters clusters=easyMockSupport.createNiceMock(Clusters.class);
  final Cluster cluster=easyMockSupport.createNiceMock(Cluster.class);
  Config mockAmsSite=easyMockSupport.createNiceMock(Config.class);
  expect(clusters.getClusters()).andReturn(new HashMap<String,Cluster>(){
{
      put("normal",cluster);
    }
  }
).once();
  expect(cluster.getDesiredConfigByType("ams-site")).andReturn(mockAmsSite).atLeastOnce();
  expect(mockAmsSite.getProperties()).andReturn(oldPropertiesAmsSite).anyTimes();
  Injector injector=easyMockSupport.createNiceMock(Injector.class);
  expect(injector.getInstance(Gson.class)).andReturn(null).anyTimes();
  expect(injector.getInstance(MaintenanceStateHelper.class)).andReturn(null).anyTimes();
  expect(injector.getInstance(KerberosHelper.class)).andReturn(createNiceMock(KerberosHelper.class)).anyTimes();
  replay(injector,clusters,mockAmsSite,cluster);
  AmbariManagementControllerImpl controller=createMockBuilder(AmbariManagementControllerImpl.class).addMockedMethod("createConfiguration").addMockedMethod("getClusters",new Class[]{}).addMockedMethod("createConfig").withConstructor(createNiceMock(ActionManager.class),clusters,injector).createNiceMock();
  Injector injector2=easyMockSupport.createNiceMock(Injector.class);
  Capture<Map> propertiesCapture=EasyMock.newCapture();
  expect(injector2.getInstance(AmbariManagementController.class)).andReturn(controller).anyTimes();
  expect(controller.getClusters()).andReturn(clusters).anyTimes();
  expect(controller.createConfig(anyObject(Cluster.class),anyString(),capture(propertiesCapture),anyString(),anyObject(Map.class))).andReturn(createNiceMock(Config.class)).once();
  replay(controller,injector2);
  new UpgradeCatalog222(injector2).updateAMSConfigs();
  easyMockSupport.verifyAll();
  Map<String,String> updatedProperties=propertiesCapture.getValue();
  assertTrue(Maps.difference(newPropertiesAmsSite,updatedProperties).areEqual());
}
