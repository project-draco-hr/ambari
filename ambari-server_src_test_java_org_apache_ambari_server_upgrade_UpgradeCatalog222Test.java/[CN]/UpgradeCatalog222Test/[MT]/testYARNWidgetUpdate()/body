{
  final Clusters clusters=createNiceMock(Clusters.class);
  final Cluster cluster=createNiceMock(Cluster.class);
  final AmbariManagementController controller=createNiceMock(AmbariManagementController.class);
  final Gson gson=new Gson();
  final WidgetDAO widgetDAO=createNiceMock(WidgetDAO.class);
  final AmbariMetaInfo metaInfo=createNiceMock(AmbariMetaInfo.class);
  WidgetEntity widgetEntity=createNiceMock(WidgetEntity.class);
  WidgetEntity widgetEntity2=createNiceMock(WidgetEntity.class);
  StackId stackId=new StackId("HDP","2.0.0");
  StackInfo stackInfo=createNiceMock(StackInfo.class);
  ServiceInfo serviceInfo=createNiceMock(ServiceInfo.class);
  String widgetStr="{\n" + "  \"layouts\": [\n" + "    {\n"+ "      \"layout_name\": \"default_yarn_dashboard\",\n"+ "      \"display_name\": \"Standard YARN Dashboard\",\n"+ "      \"section_name\": \"YARN_SUMMARY\",\n"+ "      \"widgetLayoutInfo\": [\n"+ "        {\n"+ "          \"widget_name\": \"Container Failures\",\n"+ "          \"metrics\": [],\n"+ "          \"values\": []\n"+ "        }\n"+ "      ]\n"+ "    },\n"+ "        {\n"+ "      \"layout_name\": \"default_yarn_heatmap\",\n"+ "      \"display_name\": \"Standard YARN HeatMaps\",\n"+ "      \"section_name\": \"YARN_HEATMAPS\",\n"+ "      \"widgetLayoutInfo\": [\n"+ "        {\n"+ "          \"widget_name\": \"Container Failures\",\n"+ "          \"metrics\": [],\n"+ "          \"values\": []\n"+ "        }\n"+ "      ]\n"+ "    }\n"+ "  ]\n"+ "}";
  File dataDirectory=temporaryFolder.newFolder();
  File file=new File(dataDirectory,"yarn_widget.json");
  FileUtils.writeStringToFile(file,widgetStr);
  final Injector mockInjector=Guice.createInjector(new AbstractModule(){
    @Override protected void configure(){
      bind(EntityManager.class).toInstance(createNiceMock(EntityManager.class));
      bind(AmbariManagementController.class).toInstance(controller);
      bind(Clusters.class).toInstance(clusters);
      bind(DBAccessor.class).toInstance(createNiceMock(DBAccessor.class));
      bind(OsFamily.class).toInstance(createNiceMock(OsFamily.class));
      bind(Gson.class).toInstance(gson);
      bind(WidgetDAO.class).toInstance(widgetDAO);
      bind(StackManagerFactory.class).toInstance(createNiceMock(StackManagerFactory.class));
      bind(AmbariMetaInfo.class).toInstance(metaInfo);
    }
  }
);
  expect(controller.getClusters()).andReturn(clusters).anyTimes();
  expect(clusters.getClusters()).andReturn(new HashMap<String,Cluster>(){
{
      put("normal",cluster);
    }
  }
).anyTimes();
  expect(cluster.getClusterId()).andReturn(1L).anyTimes();
  expect(stackInfo.getService("YARN")).andReturn(serviceInfo);
  expect(cluster.getDesiredStackVersion()).andReturn(stackId).anyTimes();
  expect(metaInfo.getStack("HDP","2.0.0")).andReturn(stackInfo).anyTimes();
  expect(serviceInfo.getWidgetsDescriptorFile()).andReturn(file).anyTimes();
  expect(widgetDAO.findByName(1L,"Container Failures","ambari","YARN_SUMMARY")).andReturn(Collections.singletonList(widgetEntity));
  expect(widgetDAO.merge(widgetEntity)).andReturn(null);
  expect(widgetEntity.getWidgetName()).andReturn("Container Failures").anyTimes();
  expect(widgetDAO.findByName(1L,"Container Failures","ambari","YARN_HEATMAPS")).andReturn(Collections.singletonList(widgetEntity2));
  expect(widgetDAO.merge(widgetEntity2)).andReturn(null);
  expect(widgetEntity2.getWidgetName()).andReturn("Container Failures").anyTimes();
  replay(clusters,cluster,controller,widgetDAO,metaInfo,widgetEntity,widgetEntity2,stackInfo,serviceInfo);
  mockInjector.getInstance(UpgradeCatalog222.class).updateYARNWidgetDefinition();
  verify(clusters,cluster,controller,widgetDAO,widgetEntity,widgetEntity2,stackInfo,serviceInfo);
}
