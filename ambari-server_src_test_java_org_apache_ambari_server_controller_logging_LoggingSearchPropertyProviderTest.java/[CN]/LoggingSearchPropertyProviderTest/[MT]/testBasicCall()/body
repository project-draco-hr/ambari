{
  final String expectedLogFilePath="/var/log/hdfs/hdfs_namenode.log";
  final String expectedSearchEnginePath="/api/v1/clusters/clusterone/logging/searchEngine";
  final String expectedAmbariURL="http://c6401.ambari.apache.org:8080";
  final String expectedTailFileQueryString="?components_name=hdfs_namenode&host=c6401.ambari.apache.org&pageSize=50";
  final String expectedStackName="HDP";
  final String expectedStackVersion="2.4";
  final String expectedComponentName="NAMENODE";
  final String expectedServiceName="HDFS";
  final String expectedLogSearchComponentName="hdfs_namenode";
  EasyMockSupport mockSupport=new EasyMockSupport();
  Resource resourceMock=mockSupport.createMock(Resource.class);
  expect(resourceMock.getPropertyValue(PropertyHelper.getPropertyId("HostRoles","component_name"))).andReturn(expectedComponentName).atLeastOnce();
  expect(resourceMock.getPropertyValue(PropertyHelper.getPropertyId("HostRoles","host_name"))).andReturn("c6401.ambari.apache.org").atLeastOnce();
  expect(resourceMock.getPropertyValue(PropertyHelper.getPropertyId("HostRoles","cluster_name"))).andReturn("clusterone").atLeastOnce();
  Capture<HostComponentLoggingInfo> captureLogInfo=new Capture<HostComponentLoggingInfo>();
  resourceMock.setProperty(eq("logging"),capture(captureLogInfo));
  LoggingRequestHelperFactory helperFactoryMock=mockSupport.createMock(LoggingRequestHelperFactory.class);
  LoggingRequestHelper helperMock=mockSupport.createMock(LoggingRequestHelper.class);
  LogLevelQueryResponse levelQueryResponse=new LogLevelQueryResponse();
  levelQueryResponse.setTotalCount("3");
  List<NameValuePair> testListOfLogLevels=new LinkedList<NameValuePair>();
  testListOfLogLevels.add(new NameValuePair("ERROR","150"));
  testListOfLogLevels.add(new NameValuePair("WARN","500"));
  testListOfLogLevels.add(new NameValuePair("INFO","2200"));
  levelQueryResponse.setNameValueList(testListOfLogLevels);
  expect(helperMock.sendGetLogFileNamesRequest(expectedLogSearchComponentName,"c6401.ambari.apache.org")).andReturn(Collections.singleton(expectedLogFilePath));
  expect(helperMock.sendLogLevelQueryRequest(expectedLogSearchComponentName,"c6401.ambari.apache.org")).andReturn(levelQueryResponse).atLeastOnce();
  expect(helperMock.createLogFileTailURI(expectedAmbariURL + expectedSearchEnginePath,expectedLogSearchComponentName,"c6401.ambari.apache.org")).andReturn("").atLeastOnce();
  Request requestMock=mockSupport.createMock(Request.class);
  Predicate predicateMock=mockSupport.createMock(Predicate.class);
  LoggingSearchPropertyProvider.ControllerFactory factoryMock=mockSupport.createMock(LoggingSearchPropertyProvider.ControllerFactory.class);
  AmbariManagementController controllerMock=mockSupport.createMock(AmbariManagementController.class);
  AmbariMetaInfo metaInfoMock=mockSupport.createMock(AmbariMetaInfo.class);
  Clusters clustersMock=mockSupport.createMock(Clusters.class);
  Cluster clusterMock=mockSupport.createMock(Cluster.class);
  StackId stackIdMock=mockSupport.createMock(StackId.class);
  ComponentInfo componentInfoMock=mockSupport.createMock(ComponentInfo.class);
  LogDefinition logDefinitionMock=mockSupport.createMock(LogDefinition.class);
  expect(factoryMock.getAmbariManagementController()).andReturn(controllerMock);
  expect(controllerMock.getAmbariServerURI(expectedSearchEnginePath)).andReturn(expectedAmbariURL + expectedSearchEnginePath).atLeastOnce();
  expect(controllerMock.getAmbariMetaInfo()).andReturn(metaInfoMock).atLeastOnce();
  expect(controllerMock.getClusters()).andReturn(clustersMock).atLeastOnce();
  expect(clustersMock.getCluster("clusterone")).andReturn(clusterMock).atLeastOnce();
  expect(stackIdMock.getStackName()).andReturn(expectedStackName).atLeastOnce();
  expect(stackIdMock.getStackVersion()).andReturn(expectedStackVersion).atLeastOnce();
  expect(clusterMock.getCurrentStackVersion()).andReturn(stackIdMock).atLeastOnce();
  expect(metaInfoMock.getComponentToService(expectedStackName,expectedStackVersion,expectedComponentName)).andReturn(expectedServiceName).atLeastOnce();
  expect(metaInfoMock.getComponent(expectedStackName,expectedStackVersion,expectedServiceName,expectedComponentName)).andReturn(componentInfoMock).atLeastOnce();
  expect(componentInfoMock.getLogs()).andReturn(Collections.singletonList(logDefinitionMock)).atLeastOnce();
  expect(logDefinitionMock.getLogId()).andReturn(expectedLogSearchComponentName).atLeastOnce();
  expect(helperFactoryMock.getHelper(controllerMock,"clusterone")).andReturn(helperMock).atLeastOnce();
  mockSupport.replayAll();
  PropertyProvider propertyProvider=new LoggingSearchPropertyProvider(helperFactoryMock,factoryMock);
  Set<Resource> returnedResources=propertyProvider.populateResources(Collections.singleton(resourceMock),requestMock,predicateMock);
  assertEquals("Returned resource set was of an incorrect size",1,returnedResources.size());
  HostComponentLoggingInfo returnedLogInfo=captureLogInfo.getValue();
  assertNotNull("Returned log info should not be null",returnedLogInfo);
  assertEquals("Returned component was not the correct name","hdfs_namenode",returnedLogInfo.getComponentName());
  assertEquals("Returned list of log file names for this component was incorrect",1,returnedLogInfo.getListOfLogFileDefinitions().size());
  LogFileDefinitionInfo definitionInfo=returnedLogInfo.getListOfLogFileDefinitions().get(0);
  assertEquals("Incorrect log file type was found",LogFileType.SERVICE,definitionInfo.getLogFileType());
  assertEquals("Incorrect log file path found",expectedLogFilePath,definitionInfo.getLogFileName());
  assertEquals("Incorrect URL path to searchEngine",expectedAmbariURL + expectedSearchEnginePath,definitionInfo.getSearchEngineURL());
  assertNotNull("LogLevel counts should not be null",returnedLogInfo.getListOfLogLevels());
  assertEquals("LogLevel counts were of an incorrect size",3,returnedLogInfo.getListOfLogLevels().size());
  List<NameValuePair> returnedLevelList=returnedLogInfo.getListOfLogLevels();
  assertEquals("NameValue name for log level was incorrect","ERROR",returnedLevelList.get(0).getName());
  assertEquals("NameValue name for log level was incorrect","150",returnedLevelList.get(0).getValue());
  assertEquals("NameValue name for log level was incorrect","WARN",returnedLevelList.get(1).getName());
  assertEquals("NameValue name for log level was incorrect","500",returnedLevelList.get(1).getValue());
  assertEquals("NameValue name for log level was incorrect","INFO",returnedLevelList.get(2).getName());
  assertEquals("NameValue name for log level was incorrect","2200",returnedLevelList.get(2).getValue());
  mockSupport.verifyAll();
}
