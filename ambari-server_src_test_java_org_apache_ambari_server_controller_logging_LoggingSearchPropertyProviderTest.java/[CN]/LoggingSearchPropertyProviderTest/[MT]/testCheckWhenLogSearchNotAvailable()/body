{
  final String expectedStackName="HDP";
  final String expectedStackVersion="2.4";
  final String expectedComponentName="NAMENODE";
  final String expectedServiceName="HDFS";
  final String expectedLogSearchComponentName="hdfs_namenode";
  EasyMockSupport mockSupport=new EasyMockSupport();
  Resource resourceMock=mockSupport.createMock(Resource.class);
  expect(resourceMock.getPropertyValue(PropertyHelper.getPropertyId("HostRoles","component_name"))).andReturn(expectedComponentName).atLeastOnce();
  expect(resourceMock.getPropertyValue(PropertyHelper.getPropertyId("HostRoles","host_name"))).andReturn("c6401.ambari.apache.org").atLeastOnce();
  expect(resourceMock.getPropertyValue(PropertyHelper.getPropertyId("HostRoles","cluster_name"))).andReturn("clusterone").atLeastOnce();
  LoggingRequestHelperFactory helperFactoryMock=mockSupport.createMock(LoggingRequestHelperFactory.class);
  Request requestMock=mockSupport.createMock(Request.class);
  Predicate predicateMock=mockSupport.createMock(Predicate.class);
  AmbariManagementController controllerMock=mockSupport.createMock(AmbariManagementController.class);
  AmbariMetaInfo metaInfoMock=mockSupport.createMock(AmbariMetaInfo.class);
  Clusters clustersMock=mockSupport.createMock(Clusters.class);
  Cluster clusterMock=mockSupport.createMock(Cluster.class);
  StackId stackIdMock=mockSupport.createMock(StackId.class);
  ComponentInfo componentInfoMock=mockSupport.createMock(ComponentInfo.class);
  LogDefinition logDefinitionMock=mockSupport.createMock(LogDefinition.class);
  LogSearchDataRetrievalService dataRetrievalServiceMock=mockSupport.createMock(LogSearchDataRetrievalService.class);
  expect(controllerMock.getAmbariMetaInfo()).andReturn(metaInfoMock).atLeastOnce();
  expect(controllerMock.getClusters()).andReturn(clustersMock).atLeastOnce();
  expect(clustersMock.getCluster("clusterone")).andReturn(clusterMock).atLeastOnce();
  expect(stackIdMock.getStackName()).andReturn(expectedStackName).atLeastOnce();
  expect(stackIdMock.getStackVersion()).andReturn(expectedStackVersion).atLeastOnce();
  expect(clusterMock.getCurrentStackVersion()).andReturn(stackIdMock).atLeastOnce();
  expect(metaInfoMock.getComponentToService(expectedStackName,expectedStackVersion,expectedComponentName)).andReturn(expectedServiceName).atLeastOnce();
  expect(metaInfoMock.getComponent(expectedStackName,expectedStackVersion,expectedServiceName,expectedComponentName)).andReturn(componentInfoMock).atLeastOnce();
  expect(dataRetrievalServiceMock.getLogFileNames(expectedLogSearchComponentName,"c6401.ambari.apache.org","clusterone")).andReturn(null).atLeastOnce();
  expect(componentInfoMock.getLogs()).andReturn(Collections.singletonList(logDefinitionMock)).atLeastOnce();
  expect(logDefinitionMock.getLogId()).andReturn(expectedLogSearchComponentName).atLeastOnce();
  mockSupport.replayAll();
  LoggingSearchPropertyProvider propertyProvider=new LoggingSearchPropertyProvider();
  propertyProvider.setAmbariManagementController(controllerMock);
  propertyProvider.setLogSearchDataRetrievalService(dataRetrievalServiceMock);
  Set<Resource> returnedResources=propertyProvider.populateResources(Collections.singleton(resourceMock),requestMock,predicateMock);
  assertEquals("Returned resource set was of an incorrect size",1,returnedResources.size());
  assertSame("Returned resource was not the expected instance.",resourceMock,returnedResources.iterator().next());
  mockSupport.verifyAll();
}
