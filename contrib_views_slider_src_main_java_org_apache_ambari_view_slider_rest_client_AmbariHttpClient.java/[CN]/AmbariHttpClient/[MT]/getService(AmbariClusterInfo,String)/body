{
  if (cluster != null && serviceId != null) {
    try {
      JsonElement jsonElement=doGetJson("/api/v1/clusters/" + cluster.getName() + "/services/"+ serviceId+ "?fields=ServiceInfo,components/host_components/HostRoles");
      if (jsonElement == null) {
        return null;
      }
      JsonObject jsonObject=jsonElement.getAsJsonObject();
      AmbariService svc=new AmbariService();
      JsonObject serviceInfoJsonObject=jsonObject.get("ServiceInfo").getAsJsonObject();
      svc.setId(serviceInfoJsonObject.get("service_name").getAsString());
      svc.setStarted("STARTED".equals(serviceInfoJsonObject.get("state").getAsString()));
      svc.setMaintenanceMode(!"OFF".equals(serviceInfoJsonObject.get("maintenance_state").getAsString()));
      Map<String,List<AmbariHostComponent>> componentsToHostComponentsMap=new HashMap<String,List<AmbariHostComponent>>();
      for (      JsonElement ce : jsonObject.get("components").getAsJsonArray()) {
        String componentName=ce.getAsJsonObject().get("ServiceComponentInfo").getAsJsonObject().get("component_name").getAsString();
        List<AmbariHostComponent> hcList=new ArrayList<AmbariHostComponent>();
        componentsToHostComponentsMap.put(componentName,hcList);
        JsonArray hcJsonArray=ce.getAsJsonObject().get("host_components").getAsJsonArray();
        for (        JsonElement hce : hcJsonArray) {
          AmbariHostComponent hc=new AmbariHostComponent();
          JsonObject hcJsonObject=hce.getAsJsonObject().get("HostRoles").getAsJsonObject();
          hc.setHostName(hcJsonObject.get("host_name").getAsString());
          hc.setStarted("STARTED".equals(hcJsonObject.get("state").getAsString()));
          hc.setName(hcJsonObject.get("component_name").getAsString());
          hcList.add(hc);
        }
      }
      svc.setComponentsToHostComponentsMap(componentsToHostComponentsMap);
      return svc;
    }
 catch (    HttpException e) {
      logger.warn("Unable to determine Ambari clusters",e);
      throw createRuntimeException(e);
    }
catch (    IOException e) {
      logger.warn("Unable to determine Ambari clusters",e);
      throw new RuntimeException(e.getMessage(),e);
    }
  }
  return null;
}
