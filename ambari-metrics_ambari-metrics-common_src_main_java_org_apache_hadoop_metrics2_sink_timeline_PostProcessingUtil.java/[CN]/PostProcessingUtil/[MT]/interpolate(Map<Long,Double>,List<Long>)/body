{
  LinearInterpolator linearInterpolator=new LinearInterpolator();
  if (valuesMap == null || valuesMap.isEmpty()) {
    return null;
  }
  if (requiredTimestamps == null || requiredTimestamps.isEmpty()) {
    return null;
  }
  Map<Long,Double> interpolatedValuesMap=new HashMap<>();
  if (valuesMap.size() == 1) {
    Double value=null;
    for (    Map.Entry<Long,Double> entry : valuesMap.entrySet()) {
      value=entry.getValue();
    }
    for (    Long requiredTs : requiredTimestamps) {
      interpolatedValuesMap.put(requiredTs,value);
    }
    return interpolatedValuesMap;
  }
  double[] timestamps=new double[valuesMap.size()];
  double[] metrics=new double[valuesMap.size()];
  int i=0;
  for (  Map.Entry<Long,Double> entry : valuesMap.entrySet()) {
    timestamps[i]=(double)entry.getKey();
    metrics[i++]=entry.getValue();
  }
  PolynomialSplineFunction function=linearInterpolator.interpolate(timestamps,metrics);
  PolynomialFunction[] splines=function.getPolynomials();
  PolynomialFunction first=splines[0];
  for (  Long requiredTs : requiredTimestamps) {
    Double interpolatedValue=null;
    if (timestampInRange(requiredTs,timestamps[0],timestamps[timestamps.length - 1])) {
      interpolatedValue=function.value((double)requiredTs);
    }
 else {
      if (first.getCoefficients() != null && first.getCoefficients().length > 0) {
        Double y1=first.getCoefficients()[0];
        Double m=(first.getCoefficients().length > 1) ? first.getCoefficients()[1] : 0.0;
        interpolatedValue=y1 + m * (requiredTs - timestamps[0]);
      }
    }
    if (interpolatedValue != null && interpolatedValue >= 0.0) {
      interpolatedValuesMap.put(requiredTs,interpolatedValue);
    }
  }
  return interpolatedValuesMap;
}
