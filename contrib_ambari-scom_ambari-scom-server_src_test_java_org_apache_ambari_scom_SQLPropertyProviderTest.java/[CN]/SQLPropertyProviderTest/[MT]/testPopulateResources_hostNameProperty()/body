{
  ConnectionFactory connectionFactory=createNiceMock(ConnectionFactory.class);
  Connection connection=createNiceMock(Connection.class);
  PreparedStatement statement=createNiceMock(PreparedStatement.class);
  ResultSet resultSet=createNiceMock(ResultSet.class);
  expect(connectionFactory.getConnection()).andReturn(connection).once();
  expect(connection.prepareStatement((String)anyObject())).andReturn(statement).once();
  expect(statement.executeQuery()).andReturn(resultSet).once();
  expect(resultSet.next()).andReturn(true);
  expect(resultSet.getLong("RecordTimeStamp")).andReturn(999990L);
  expect(resultSet.getNString("MetricValue")).andReturn("0");
  expect(resultSet.next()).andReturn(true);
  expect(resultSet.getLong("RecordTimeStamp")).andReturn(999991L);
  expect(resultSet.getNString("MetricValue")).andReturn("1");
  expect(resultSet.next()).andReturn(true);
  expect(resultSet.getLong("RecordTimeStamp")).andReturn(999992L);
  expect(resultSet.getNString("MetricValue")).andReturn("2");
  expect(resultSet.next()).andReturn(true);
  expect(resultSet.getLong("RecordTimeStamp")).andReturn(999993L);
  expect(resultSet.getNString("MetricValue")).andReturn("3");
  expect(resultSet.next()).andReturn(false);
  replay(connectionFactory,connection,statement,resultSet);
  TestHostInfoProvider hostProvider=new TestHostInfoProvider();
  SQLPropertyProvider provider=new SQLPropertyProvider(PropertyHelper.getGangliaPropertyIds(Resource.Type.HostComponent,PropertyHelper.MetricsVersion.HDP1),hostProvider,CLUSTER_NAME_PROPERTY_ID,HOST_NAME_PROPERTY_ID,COMPONENT_NAME_PROPERTY_ID,connectionFactory);
  Resource resource=new ResourceImpl(Resource.Type.HostComponent);
  resource.setProperty(CLUSTER_NAME_PROPERTY_ID,"c1");
  resource.setProperty(HOST_NAME_PROPERTY_ID,"domU-12-31-39-0E-34-E1.compute-1.internal");
  resource.setProperty(COMPONENT_NAME_PROPERTY_ID,"DATANODE");
  Map<String,TemporalInfo> temporalInfoMap=new HashMap<String,TemporalInfo>();
  temporalInfoMap.put(PROPERTY_ID_1,new TemporalInfoImpl(10L,-1L,-1L));
  Request request=PropertyHelper.getReadRequest(Collections.singleton(PROPERTY_ID_1),temporalInfoMap);
  provider.populateResources(Collections.singleton(resource),request,null);
  Assert.assertEquals("domU-12-31-39-0E-34-E1.compute-1.internal",hostProvider.getHostId());
  Assert.assertNull(hostProvider.getClusterName());
  Assert.assertNull(hostProvider.getComponentName());
  verify(connectionFactory,connection,statement,resultSet);
}
