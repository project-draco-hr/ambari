{
  Connection conn=null;
  Statement stmt=null;
  String encoding=metricsConf.get(HBASE_ENCODING_SCHEME,DEFAULT_ENCODING);
  String compression=metricsConf.get(HBASE_COMPRESSION_SCHEME,DEFAULT_TABLE_COMPRESSION);
  try {
    LOG.info("Initializing metrics schema...");
    conn=getConnectionRetryingOnException();
    stmt=conn.createStatement();
    String metadataSql=String.format(CREATE_METRICS_METADATA_TABLE_SQL,encoding,compression);
    stmt.executeUpdate(metadataSql);
    String hostedAppSql=String.format(CREATE_HOSTED_APPS_METADATA_TABLE_SQL,encoding,compression);
    stmt.executeUpdate(hostedAppSql);
    stmt.executeUpdate(String.format(CREATE_CONTAINER_METRICS_TABLE_SQL,encoding,tableTTL.get(CONTAINER_METRICS_TABLE_NAME),compression));
    String precisionSql=String.format(CREATE_METRICS_TABLE_SQL,encoding,tableTTL.get(METRICS_RECORD_TABLE_NAME),compression);
    String splitPoints=metricsConf.get(PRECISION_TABLE_SPLIT_POINTS);
    if (!StringUtils.isEmpty(splitPoints)) {
      precisionSql+=getSplitPointsStr(splitPoints);
    }
    stmt.executeUpdate(precisionSql);
    String hostMinuteAggregrateSql=String.format(CREATE_METRICS_AGGREGATE_TABLE_SQL,METRICS_AGGREGATE_MINUTE_TABLE_NAME,encoding,tableTTL.get(METRICS_AGGREGATE_MINUTE_TABLE_NAME),compression);
    splitPoints=metricsConf.get(AGGREGATE_TABLE_SPLIT_POINTS);
    if (!StringUtils.isEmpty(splitPoints)) {
      hostMinuteAggregrateSql+=getSplitPointsStr(splitPoints);
    }
    stmt.executeUpdate(hostMinuteAggregrateSql);
    stmt.executeUpdate(String.format(CREATE_METRICS_AGGREGATE_TABLE_SQL,METRICS_AGGREGATE_HOURLY_TABLE_NAME,encoding,tableTTL.get(METRICS_AGGREGATE_HOURLY_TABLE_NAME),compression));
    stmt.executeUpdate(String.format(CREATE_METRICS_AGGREGATE_TABLE_SQL,METRICS_AGGREGATE_DAILY_TABLE_NAME,encoding,tableTTL.get(METRICS_AGGREGATE_DAILY_TABLE_NAME),compression));
    String aggregateSql=String.format(CREATE_METRICS_CLUSTER_AGGREGATE_TABLE_SQL,METRICS_CLUSTER_AGGREGATE_TABLE_NAME,encoding,tableTTL.get(METRICS_CLUSTER_AGGREGATE_TABLE_NAME),compression);
    splitPoints=metricsConf.get(AGGREGATE_TABLE_SPLIT_POINTS);
    if (!StringUtils.isEmpty(splitPoints)) {
      aggregateSql+=getSplitPointsStr(splitPoints);
    }
    stmt.executeUpdate(aggregateSql);
    stmt.executeUpdate(String.format(CREATE_METRICS_CLUSTER_AGGREGATE_GROUPED_TABLE_SQL,METRICS_CLUSTER_AGGREGATE_MINUTE_TABLE_NAME,encoding,tableTTL.get(METRICS_CLUSTER_AGGREGATE_MINUTE_TABLE_NAME),compression));
    stmt.executeUpdate(String.format(CREATE_METRICS_CLUSTER_AGGREGATE_GROUPED_TABLE_SQL,METRICS_CLUSTER_AGGREGATE_HOURLY_TABLE_NAME,encoding,tableTTL.get(METRICS_CLUSTER_AGGREGATE_HOURLY_TABLE_NAME),compression));
    stmt.executeUpdate(String.format(CREATE_METRICS_CLUSTER_AGGREGATE_GROUPED_TABLE_SQL,METRICS_CLUSTER_AGGREGATE_DAILY_TABLE_NAME,encoding,tableTTL.get(METRICS_CLUSTER_AGGREGATE_DAILY_TABLE_NAME),compression));
    conn.commit();
    LOG.info("Metrics schema initialized.");
  }
 catch (  SQLException|InterruptedException sql) {
    LOG.error("Error creating Metrics Schema in HBase using Phoenix.",sql);
    throw new MetricsSystemInitializationException("Error creating Metrics Schema in HBase using Phoenix.",sql);
  }
 finally {
    if (stmt != null) {
      try {
        stmt.close();
      }
 catch (      SQLException e) {
      }
    }
    if (conn != null) {
      try {
        conn.close();
      }
 catch (      SQLException e) {
      }
    }
  }
}
