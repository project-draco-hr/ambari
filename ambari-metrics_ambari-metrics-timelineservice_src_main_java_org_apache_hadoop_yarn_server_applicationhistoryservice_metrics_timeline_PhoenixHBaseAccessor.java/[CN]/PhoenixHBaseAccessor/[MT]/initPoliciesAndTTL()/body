{
  boolean enableNormalizer=hbaseConf.getBoolean("hbase.normalizer.enabled",true);
  boolean enableFifoCompaction=metricsConf.getBoolean("timeline.metrics.hbase.fifo.compaction.enabled",true);
  HBaseAdmin hBaseAdmin=null;
  try {
    hBaseAdmin=dataSource.getHBaseAdmin();
  }
 catch (  IOException e) {
    LOG.warn("Unable to initialize HBaseAdmin for setting policies.",e);
  }
  if (hBaseAdmin != null) {
    for (    String tableName : PHOENIX_TABLES) {
      try {
        boolean modifyTable=false;
        HTableDescriptor tableDescriptor=hBaseAdmin.getTableDescriptor(tableName.getBytes());
        if (enableNormalizer && !tableDescriptor.isNormalizationEnabled()) {
          tableDescriptor.setNormalizationEnabled(true);
          LOG.info("Enabling normalizer for " + tableName);
          modifyTable=true;
        }
        if (METRICS_RECORD_TABLE_NAME.equals(tableName)) {
          if (!timelineMetricsPrecisionTableDurability.isEmpty()) {
            LOG.info("Setting WAL option " + timelineMetricsPrecisionTableDurability + " for table : "+ tableName);
            boolean validDurability=true;
            if ("SKIP_WAL".equals(timelineMetricsPrecisionTableDurability)) {
              tableDescriptor.setDurability(Durability.SKIP_WAL);
            }
 else             if ("SYNC_WAL".equals(timelineMetricsPrecisionTableDurability)) {
              tableDescriptor.setDurability(Durability.SYNC_WAL);
            }
 else             if ("ASYNC_WAL".equals(timelineMetricsPrecisionTableDurability)) {
              tableDescriptor.setDurability(Durability.ASYNC_WAL);
            }
 else             if ("FSYNC_WAL".equals(timelineMetricsPrecisionTableDurability)) {
              tableDescriptor.setDurability(Durability.FSYNC_WAL);
            }
 else {
              LOG.info("Unknown value for " + TIMELINE_METRICS_PRECISION_TABLE_DURABILITY + " : "+ timelineMetricsPrecisionTableDurability);
              validDurability=false;
            }
            if (validDurability) {
              modifyTable=true;
            }
          }
        }
 else {
          if (!timelineMetricsTablesDurability.isEmpty()) {
            LOG.info("Setting WAL option " + timelineMetricsTablesDurability + " for table : "+ tableName);
            boolean validDurability=true;
            if ("SKIP_WAL".equals(timelineMetricsTablesDurability)) {
              tableDescriptor.setDurability(Durability.SKIP_WAL);
            }
 else             if ("SYNC_WAL".equals(timelineMetricsTablesDurability)) {
              tableDescriptor.setDurability(Durability.SYNC_WAL);
            }
 else             if ("ASYNC_WAL".equals(timelineMetricsTablesDurability)) {
              tableDescriptor.setDurability(Durability.ASYNC_WAL);
            }
 else             if ("FSYNC_WAL".equals(timelineMetricsTablesDurability)) {
              tableDescriptor.setDurability(Durability.FSYNC_WAL);
            }
 else {
              LOG.info("Unknown value for " + TIMELINE_METRICS_AGGREGATE_TABLES_DURABILITY + " : "+ timelineMetricsTablesDurability);
              validDurability=false;
            }
            if (validDurability) {
              modifyTable=true;
            }
          }
        }
        Map<String,String> config=tableDescriptor.getConfiguration();
        if (enableFifoCompaction && !FIFO_COMPACTION_POLICY_CLASS.equals(config.get(HSTORE_COMPACTION_CLASS_KEY))) {
          tableDescriptor.setConfiguration(HSTORE_COMPACTION_CLASS_KEY,FIFO_COMPACTION_POLICY_CLASS);
          LOG.info("Setting config property " + HSTORE_COMPACTION_CLASS_KEY + " = "+ FIFO_COMPACTION_POLICY_CLASS+ " for "+ tableName);
          int blockingStoreFiles=hbaseConf.getInt(HBASE_BLOCKING_STORE_FILES,1000);
          if (blockingStoreFiles < 1000) {
            blockingStoreFiles=1000;
          }
          tableDescriptor.setConfiguration(BLOCKING_STORE_FILES_KEY,String.valueOf(blockingStoreFiles));
          LOG.info("Setting config property " + BLOCKING_STORE_FILES_KEY + " = "+ blockingStoreFiles+ " for "+ tableName);
          modifyTable=true;
        }
        if (!enableFifoCompaction && FIFO_COMPACTION_POLICY_CLASS.equals(config.get(HSTORE_COMPACTION_CLASS_KEY))) {
          tableDescriptor.setConfiguration(HSTORE_COMPACTION_CLASS_KEY,DEFAULT_COMPACTION_POLICY_CLASS);
          LOG.info("Setting config property " + HSTORE_COMPACTION_CLASS_KEY + " = "+ DEFAULT_COMPACTION_POLICY_CLASS+ " for "+ tableName);
          int blockingStoreFiles=hbaseConf.getInt(HBASE_BLOCKING_STORE_FILES,300);
          if (blockingStoreFiles > 300) {
            LOG.warn("HBase blocking store file set too high without FIFO " + "Compaction policy enabled, restoring low value = 300.");
            blockingStoreFiles=300;
          }
          tableDescriptor.setConfiguration(BLOCKING_STORE_FILES_KEY,String.valueOf(blockingStoreFiles));
          LOG.info("Setting config property " + BLOCKING_STORE_FILES_KEY + " = "+ blockingStoreFiles+ " for "+ tableName);
          modifyTable=true;
        }
        HColumnDescriptor[] columnFamilies=tableDescriptor.getColumnFamilies();
        if (columnFamilies != null) {
          for (          HColumnDescriptor family : columnFamilies) {
            String ttlValue=family.getValue("TTL");
            if (StringUtils.isEmpty(ttlValue) || !ttlValue.trim().equals(tableTTL.get(tableName))) {
              family.setValue("TTL",tableTTL.get(tableName));
              LOG.info("Setting TTL on table: " + tableName + " to : "+ tableTTL.get(tableName)+ " seconds.");
              modifyTable=true;
            }
          }
        }
        if (modifyTable) {
          hBaseAdmin.modifyTable(tableName.getBytes(),tableDescriptor);
        }
      }
 catch (      IOException e) {
        LOG.error("Failed setting policies for " + tableName,e);
      }
    }
    try {
      hBaseAdmin.close();
    }
 catch (    IOException e) {
      LOG.warn("Exception on HBaseAdmin close.",e);
    }
  }
}
