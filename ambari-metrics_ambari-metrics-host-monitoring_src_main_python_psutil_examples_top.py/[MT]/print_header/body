def print_header(procs_status, num_procs):
    'Print system-related info, above the process list.'

    def get_dashes(perc):
        dashes = ('|' * int(((float(perc) / 10) * 4)))
        empty_dashes = (' ' * (40 - len(dashes)))
        return (dashes, empty_dashes)
    percs = psutil.cpu_percent(interval=0, percpu=True)
    for (cpu_num, perc) in enumerate(percs):
        (dashes, empty_dashes) = get_dashes(perc)
        print_line((' CPU%-2s [%s%s] %5s%%' % (cpu_num, dashes, empty_dashes, perc)))
    mem = psutil.virtual_memory()
    (dashes, empty_dashes) = get_dashes(mem.percent)
    used = (mem.total - mem.available)
    line = (' Mem   [%s%s] %5s%% %6s/%s' % (dashes, empty_dashes, mem.percent, (str(int(((used / 1024) / 1024))) + 'M'), (str(int(((mem.total / 1024) / 1024))) + 'M')))
    print_line(line)
    swap = psutil.swap_memory()
    (dashes, empty_dashes) = get_dashes(swap.percent)
    line = (' Swap  [%s%s] %5s%% %6s/%s' % (dashes, empty_dashes, swap.percent, (str(int(((swap.used / 1024) / 1024))) + 'M'), (str(int(((swap.total / 1024) / 1024))) + 'M')))
    print_line(line)
    st = []
    for (x, y) in procs_status.items():
        if y:
            st.append(('%s=%s' % (x, y)))
    st.sort(key=(lambda x: (x[:3] in ('run', 'sle'))), reverse=1)
    print_line((' Processes: %s (%s)' % (num_procs, ' '.join(st))))
    uptime = (datetime.now() - datetime.fromtimestamp(psutil.boot_time()))
    (av1, av2, av3) = os.getloadavg()
    line = (' Load average: %.2f %.2f %.2f  Uptime: %s' % (av1, av2, av3, str(uptime).split('.')[0]))
    print_line(line)
