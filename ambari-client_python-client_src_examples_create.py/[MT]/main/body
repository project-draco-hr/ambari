def main():
    path = os.getcwd()
    print path
    sys.path.append(path)
    logging.basicConfig(filename='ambari_api.log', level=logging.DEBUG, filemode='w')
    logging.info('Program started')
    client = AmbariClient('localhost', 8080, 'admin', 'admin', version=1)
    print client.version
    print client.host_url
    print '\n'
    cluster = client.create_cluster('test33', 'HDP-1.3.0')
    print cluster
    cluster = client.get_cluster('test33')
    print cluster
    print cluster.to_json_dict()
    print '\n'
    services_list = ['HDFS', 'MAPREDUCE', 'NAGIOS', 'GANGLIA']
    s2 = cluster.create_services(services_list)
    print s2
    s2 = cluster.create_service('ZOOKEEPER')
    print s2
    s3 = cluster.add_config('global', 'version1', {})
    print s3
    s3 = cluster.add_config('core-site', 'version1', {})
    print s3
    s3 = cluster.add_config('hdfs-site', 'version1', {})
    print s3
    s3 = cluster.add_config('mapred-site', 'version1', {})
    print s3
    s2 = cluster.create_service_components('1.3.0', 'HDFS')
    print s2
    s2 = cluster.create_service_components('1.3.0', 'MAPREDUCE')
    print s2
    s2 = cluster.create_service_components('1.3.0', 'GANGLIA')
    print s2
    s2 = cluster.create_service_components('1.3.0', 'NAGIOS')
    print s2
    all_hosts = client.get_all_hosts()
    h_l = [x.host_name for x in all_hosts]
    print h_l
    s3 = cluster.create_hosts(h_l)
    print s3
    print '\n'
    host1 = cluster.get_host('r01wn01')
    print host1
    s4 = host1.assign_role('NAMENODE')
    print s4
    print '\n'
    s4 = cluster.start_all_services()
    print s4
    print '\n'
    all_clusters = client.get_all_clusters()
    print all_clusters.to_json_dict()
    print all_clusters
    print '\n'
    all_hosts = client.get_all_hosts()
    print all_hosts
    print all_hosts.to_json_dict()
    print '\n'
    serviceList = cluster.get_all_services()
    print serviceList
    print serviceList.to_json_dict()
    print '\n'
