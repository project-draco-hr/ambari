def create_ams_datasource():
    import params
    server = Server(protocol=params.ams_grafana_protocol.strip(), host=params.ams_grafana_host.strip(), port=params.ams_grafana_port)
    '\n  Create AMS datasource in Grafana, if exsists make sure the collector url is accurate\n  '
    ams_datasource_json = Template('metrics_grafana_datasource.json.j2', ams_datasource_name=METRICS_GRAFANA_DATASOURCE_NAME).get_content()
    Logger.info('Checking if AMS Grafana datasource already exists')
    response = perform_grafana_get_call(GRAFANA_DATASOURCE_URL, server)
    create_datasource = True
    if (response.status == 200):
        datasources = response.read()
        datasources_json = json.loads(datasources)
        for i in xrange(0, len(datasources_json)):
            datasource_name = datasources_json[i]['name']
            if (datasource_name == METRICS_GRAFANA_DATASOURCE_NAME):
                create_datasource = False
                Logger.info('Ambari Metrics Grafana datasource already present. Checking Metrics Collector URL')
                datasource_url = datasources_json[i]['url']
                if is_unchanged_datasource_url(datasource_url):
                    Logger.info('Metrics Collector URL validation succeeded.')
                    return
                else:
                    datasource_id = datasources_json[i]['id']
                    Logger.info(('Metrics Collector URL validation failed. Updating datasource, id = %s' % datasource_id))
                    (response, data) = perform_grafana_put_call(GRAFANA_DATASOURCE_URL, datasource_id, ams_datasource_json, server)
                    if (response.status == 200):
                        Logger.info('Ambari Metrics Grafana data source updated.')
                    elif (response.status == 500):
                        Logger.info('Ambari Metrics Grafana data source update failed. Not retrying.')
                        raise Fail(('Ambari Metrics Grafana data source update failed. PUT request status: %s %s \n%s' % (response.status, response.reason, data)))
                    else:
                        raise Fail(('Ambari Metrics Grafana data source creation failed. PUT request status: %s %s \n%s' % (response.status, response.reason, data)))
                pass
            pass
        pass
    else:
        Logger.info('Error checking for Ambari Metrics Grafana datasource. Will attempt to create.')
    if (not create_datasource):
        return
    else:
        Logger.info(('Generating datasource:\n%s' % ams_datasource_json))
        (response, data) = perform_grafana_post_call(GRAFANA_DATASOURCE_URL, ams_datasource_json, server)
        if (response.status == 200):
            Logger.info('Ambari Metrics Grafana data source created.')
        elif (response.status == 500):
            Logger.info('Ambari Metrics Grafana data source creation failed. Not retrying.')
            raise Fail(('Ambari Metrics Grafana data source creation failed. POST request status: %s %s \n%s' % (response.status, response.reason, data)))
        else:
            Logger.info('Ambari Metrics Grafana data source creation failed.')
            raise Fail(('Ambari Metrics Grafana data source creation failed. POST request status: %s %s \n%s' % (response.status, response.reason, data)))
    pass
