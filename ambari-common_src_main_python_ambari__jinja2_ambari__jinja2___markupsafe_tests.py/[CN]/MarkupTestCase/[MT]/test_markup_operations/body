def test_markup_operations(self):
    unsafe = '<script type="application/x-some-script">alert("foo");</script>'
    safe = Markup('<em>username</em>')
    assert ((unsafe + safe) == (unicode(escape(unsafe)) + unicode(safe)))
    assert ((Markup('<em>%s</em>') % '<bad user>') == '<em>&lt;bad user&gt;</em>')
    assert ((Markup('<em>%(username)s</em>') % {'username': '<bad user>', }) == '<em>&lt;bad user&gt;</em>')
    assert (type((Markup('foo') + 'bar')) is Markup)
    x = Markup('foo')
    assert (x.__html__() is x)


    class Foo(object):

        def __html__(self):
            return '<em>awesome</em>'

        def __unicode__(self):
            return 'awesome'
    assert (Markup(Foo()) == '<em>awesome</em>')
    assert ((Markup('<strong>%s</strong>') % Foo()) == '<strong><em>awesome</em></strong>')
    assert (escape('"<>&\'') == '&#34;&lt;&gt;&amp;&#39;')
    assert (Markup('<em>Foo &amp; Bar</em>').striptags() == 'Foo & Bar')
    assert (Markup('&lt;test&gt;').unescape() == '<test>')
