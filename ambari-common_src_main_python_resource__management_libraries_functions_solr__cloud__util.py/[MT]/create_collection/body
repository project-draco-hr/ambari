def create_collection(zookeeper_quorum, solr_znode, collection, config_set, java64_home, shards=1, replication_factor=1, max_shards=1, retry=5, interval=10, router_name=None, router_field=None, jaas_file=None, key_store_location=None, key_store_password=None, key_store_type=None, trust_store_location=None, trust_store_password=None, trust_store_type=None):
    '\n  Create Solr collection based on a configuration set in zookeeper.\n  If this method called again the with higher shard number (or max_shard number), then it will indicate\n  the cli tool to add new shards to the Solr collection. This can be useful after added a new Solr Cloud\n  instance to the cluster.\n\n  If you would like to add shards later to a collection, then use implicit routing, e.g.:\n  router_name = "implicit", router_field = "_router_field_"\n  '
    solr_cli_prefix = __create_solr_cloud_cli_prefix(zookeeper_quorum, solr_znode, java64_home)
    if (max_shards == 1):
        max_shards = (replication_factor * shards)
    create_collection_cmd = format('{solr_cli_prefix} --create-collection --collection {collection} --config-set {config_set} --shards {shards} --replication {replication_factor} --max-shards {max_shards} --retry {retry} --interval {interval} --no-sharding')
    appendableDict = {}
    appendableDict['--router-name'] = router_name
    appendableDict['--router-field'] = router_field
    appendableDict['--jaas-file'] = jaas_file
    appendableDict['--key-store-location'] = key_store_location
    appendableDict['--key-store-password'] = (None if (key_store_password is None) else '{key_store_password_param!p}')
    appendableDict['--key-store-type'] = key_store_type
    appendableDict['--trust-store-location'] = trust_store_location
    appendableDict['--trust-store-password'] = (None if (trust_store_password is None) else '{trust_store_password_param!p}')
    appendableDict['--trust-store-type'] = trust_store_type
    create_collection_cmd = __append_flags_if_exists(create_collection_cmd, appendableDict)
    create_collection_cmd = format(create_collection_cmd, key_store_password_param=key_store_password, trust_store_password_param=trust_store_password)
    Execute(create_collection_cmd)
