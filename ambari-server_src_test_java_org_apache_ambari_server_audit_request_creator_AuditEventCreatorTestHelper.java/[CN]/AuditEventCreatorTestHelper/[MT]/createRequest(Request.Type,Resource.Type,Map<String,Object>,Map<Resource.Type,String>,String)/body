{
  return new Request(){
    RequestBody body=new RequestBody();
    @Override public Result process(){
      return null;
    }
    @Override public ResourceInstance getResource(){
      return new ResourceInstance(){
        @Override public void setKeyValueMap(        Map<Resource.Type,String> keyValueMap){
        }
        @Override public Map<Resource.Type,String> getKeyValueMap(){
          return resource;
        }
        @Override public Query getQuery(){
          return null;
        }
        @Override public ResourceDefinition getResourceDefinition(){
          return new ResourceDefinition(){
            @Override public String getPluralName(){
              return null;
            }
            @Override public String getSingularName(){
              return null;
            }
            @Override public Resource.Type getType(){
              return resourceType;
            }
            @Override public Set<SubResourceDefinition> getSubResourceDefinitions(){
              return null;
            }
            @Override public List<PostProcessor> getPostProcessors(){
              return null;
            }
            @Override public Renderer getRenderer(            String name) throws IllegalArgumentException {
              return null;
            }
            @Override public Collection<String> getCreateDirectives(){
              return null;
            }
            @Override public boolean isCreatable(){
              return false;
            }
            @Override public Collection<String> getUpdateDirectives(){
              return null;
            }
            @Override public Collection<String> getDeleteDirectives(){
              return null;
            }
          }
;
        }
        @Override public Map<String,ResourceInstance> getSubResources(){
          return null;
        }
        @Override public boolean isCollectionResource(){
          return false;
        }
      }
;
    }
    @Override public String getURI(){
      return "http://example.com:8080/api/v1/test" + queryString;
    }
    @Override public Type getRequestType(){
      return requestType;
    }
    @Override public int getAPIVersion(){
      return 0;
    }
    @Override public Predicate getQueryPredicate(){
      return null;
    }
    @Override public Map<String,TemporalInfo> getFields(){
      return null;
    }
    @Override public RequestBody getBody(){
      if (properties != null) {
        NamedPropertySet nps=new NamedPropertySet("",properties);
        body.addPropertySet(nps);
      }
      return body;
    }
    @Override public Map<String,List<String>> getHttpHeaders(){
      return null;
    }
    @Override public PageRequest getPageRequest(){
      return null;
    }
    @Override public SortRequest getSortRequest(){
      return null;
    }
    @Override public Renderer getRenderer(){
      return null;
    }
    @Override public String getRemoteAddress(){
      return "1.2.3.4";
    }
  }
;
}
