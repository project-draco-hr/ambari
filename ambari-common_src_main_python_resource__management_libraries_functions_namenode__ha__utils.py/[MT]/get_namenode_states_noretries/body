def get_namenode_states_noretries(hdfs_site, security_enabled, run_user):
    "\n  return format [('nn1', 'hdfs://hostname1:port1'), ('nn2', 'hdfs://hostname2:port2')] , [....], [....]\n  "
    active_namenodes = []
    standby_namenodes = []
    unknown_namenodes = []
    name_service = get_nameservice(hdfs_site)
    nn_unique_ids_key = ('dfs.ha.namenodes.' + name_service)
    nn_unique_ids = hdfs_site[nn_unique_ids_key].split(',')
    for nn_unique_id in nn_unique_ids:
        is_https_enabled = (is_empty(hdfs_site['dfs.http.policy']) and (hdfs_site['dfs.http.policy'].upper() == 'HTTPS_ONLY'))
        rpc_key = NAMENODE_RPC_FRAGMENT.format(name_service, nn_unique_id)
        if (not is_https_enabled):
            key = NAMENODE_HTTP_FRAGMENT.format(name_service, nn_unique_id)
            protocol = 'http'
        else:
            key = NAMENODE_HTTPS_FRAGMENT.format(name_service, nn_unique_id)
            protocol = 'https'
        if (key in hdfs_site):
            value = str(hdfs_site[key])
            if ((INADDR_ANY in value) and (rpc_key in hdfs_site)):
                rpc_value = str(hdfs_site[rpc_key])
                if (INADDR_ANY not in rpc_value):
                    rpc_host = rpc_value.split(':')[0]
                    value = value.replace(INADDR_ANY, rpc_host)
            jmx_uri = JMX_URI_FRAGMENT.format(protocol, value)
            state = get_value_from_jmx(jmx_uri, 'tag.HAState', security_enabled, run_user, is_https_enabled)
            if (not state):
                check_service_cmd = 'hdfs haadmin -getServiceState {0}'.format(nn_unique_id)
                (code, out) = shell.call(check_service_cmd, logoutput=True, user=run_user)
                if ((code == 0) and out):
                    if (HDFS_NN_STATE_STANDBY in out):
                        state = HDFS_NN_STATE_STANDBY
                    elif (HDFS_NN_STATE_ACTIVE in out):
                        state = HDFS_NN_STATE_ACTIVE
            if (state == HDFS_NN_STATE_ACTIVE):
                active_namenodes.append((nn_unique_id, value))
            elif (state == HDFS_NN_STATE_STANDBY):
                standby_namenodes.append((nn_unique_id, value))
            else:
                unknown_namenodes.append((nn_unique_id, value))
    return (active_namenodes, standby_namenodes, unknown_namenodes)
