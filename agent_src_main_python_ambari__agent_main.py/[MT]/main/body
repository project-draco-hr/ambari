def main():
    global config
    default_cfg = {'agent': {'prefix': '/home/ambari', }, }
    config = ConfigParser.RawConfigParser(default_cfg)
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    signal.signal(signal.SIGUSR1, debug)
    if ((len(sys.argv) > 1) and (sys.argv[1] == 'stop')):
        try:
            f = open(pidfile, 'r')
            pid = f.read()
            pid = int(pid)
            f.close()
            os.kill(pid, signal.SIGTERM)
            time.sleep(5)
            if os.path.exists(pidfile):
                raise Exception('PID file still exists.')
            os._exit(0)
        except Exception as err:
            os.kill(pid, signal.SIGKILL)
            os._exit(1)
    if os.path.isfile(pidfile):
        print ('%s already exists, exiting' % pidfile)
        sys.exit(1)
    else:
        retCode = createDaemon()
        pid = str(os.getpid())
        file(pidfile, 'w').write(pid)
    logger.setLevel(logging.DEBUG)
    formatter = logging.Formatter('%(asctime)s %(filename)s:%(lineno)d - %(message)s')
    rotateLog = logging.handlers.RotatingFileHandler(logfile, 'a', 10000000, 10)
    rotateLog.setFormatter(formatter)
    logger.addHandler(rotateLog)
    credential = None
    if os.path.exists('/etc/ambari/ambari.ini'):
        config.read('/etc/ambari/ambari.ini')
        try:
            credential = {}
            credential['user'] = config.get('controller', 'user')
            credential['password'] = config.get('controller', 'password')
            controllerUrl = config.get('controller', 'url')
        except Exception as err:
            credential = None
            controllerUrl = 'http://localhost:4080'
    else:
        credential = None
        controllerUrl = 'http://localhost:4080'
    logger.info(('Connecting to controller at: ' + controllerUrl))
    print controllerUrl
    print credential
    controller = Controller(controllerUrl, credential)
    controller.start()
    controller.run()
    logger.info('finished')
