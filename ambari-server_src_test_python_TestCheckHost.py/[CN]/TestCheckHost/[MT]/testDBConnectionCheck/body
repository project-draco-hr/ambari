@patch.object(Script, 'get_config')
@patch.object(Script, 'get_tmp_dir')
@patch('check_host.download_file')
@patch('resource_management.libraries.script.Script.put_structured_out')
@patch('subprocess.Popen')
@patch('check_host.format')
@patch('os.path.isfile')
def testDBConnectionCheck(self, isfile_mock, format_mock, popenMock, structured_out_mock, download_file_mock, get_tmp_dir_mock, mock_config):
    mock_config.return_value = {'commandParams': {'check_execute_list': 'db_connection_check', 'java_home': 'test_java_home', 'ambari_server_host': 'test_host', 'jdk_location': 'test_jdk_location', 'db_name': 'mysql', 'db_connection_url': 'test_db_connection_url', 'user_name': 'test_user_name', 'user_passwd': 'test_user_passwd', 'jdk_name': 'test_jdk_name', }, 'hostLevelParams': {'agentCacheDir': '/nonexistent_tmp', }, }
    get_tmp_dir_mock.return_value = '/tmp'
    download_file_mock.side_effect = Exception('test exception')
    isfile_mock.return_value = True
    checkHost = CheckHost()
    checkHost.actionexecute(None)
    self.assertEquals(structured_out_mock.call_args[0][0], {'db_connection_check': {'message': 'Error downloading DBConnectionVerification.jar from Ambari Server resources. Check network access to Ambari Server.\ntest exception', 'exit_code': 1, }, })
    mock_config.return_value = {'commandParams': {'check_execute_list': 'db_connection_check', 'java_home': 'test_java_home', 'ambari_server_host': 'test_host', 'jdk_location': 'test_jdk_location', 'db_name': 'oracle', 'db_connection_url': 'test_db_connection_url', 'user_name': 'test_user_name', 'user_passwd': 'test_user_passwd', 'jdk_name': 'test_jdk_name', }, 'hostLevelParams': {'agentCacheDir': '/nonexistent_tmp', }, }
    format_mock.reset_mock()
    download_file_mock.reset_mock()
    p = MagicMock()
    download_file_mock.side_effect = [p, Exception('test exception')]
    checkHost.actionexecute(None)
    self.assertEquals(format_mock.call_args[0][0], 'Error: Ambari Server cannot download the database JDBC driver and is unable to test the database connection. You must run ambari-server setup --jdbc-db={db_name} --jdbc-driver=/path/to/your/{db_name}/driver.jar on the Ambari Server host to make the JDBC driver available for download and to enable testing the database connection.\n')
    self.assertEquals(structured_out_mock.call_args[0][0]['db_connection_check']['exit_code'], 1)
    mock_config.return_value = {'commandParams': {'check_execute_list': 'db_connection_check', 'java_home': 'test_java_home', 'ambari_server_host': 'test_host', 'jdk_location': 'test_jdk_location', 'db_name': 'postgres', 'db_connection_url': 'test_db_connection_url', 'user_name': 'test_user_name', 'user_passwd': 'test_user_passwd', 'jdk_name': 'test_jdk_name', }, 'hostLevelParams': {'agentCacheDir': '/nonexistent_tmp', }, }
    format_mock.reset_mock()
    download_file_mock.reset_mock()
    download_file_mock.side_effect = [p, p]
    s = MagicMock()
    s.communicate.return_value = ('test message', '')
    s.returncode = 1
    popenMock.return_value = s
    checkHost.actionexecute(None)
    self.assertEquals(structured_out_mock.call_args[0][0], {'db_connection_check': {'message': 'test message', 'exit_code': 1, }, })
    self.assertEquals(format_mock.call_args[0][0], '{java_exec} -cp {check_db_connection_path}{class_path_delimiter}{jdbc_path} -Djava.library.path={agent_cache_dir} org.apache.ambari.server.DBConnectionVerification {db_connection_url} {user_name} {user_passwd!p} {jdbc_driver}')
    download_file_mock.reset_mock()
    download_file_mock.side_effect = [p, p]
    s.returncode = 0
    checkHost.actionexecute(None)
    self.assertEquals(structured_out_mock.call_args[0][0], {'db_connection_check': {'message': 'DB connection check completed successfully!', 'exit_code': 0, }, })
    mock_config.return_value = {'commandParams': {'check_execute_list': 'db_connection_check', 'java_home': 'test_java_home', 'ambari_server_host': 'test_host', 'jdk_location': 'test_jdk_location', 'db_connection_url': 'test_db_connection_url', 'user_name': 'test_user_name', 'user_passwd': 'test_user_passwd', 'db_name': 'postgres', }, 'hostLevelParams': {'agentCacheDir': '/nonexistent_tmp', }, }
    isfile_mock.return_value = False
    checkHost.actionexecute(None)
    self.assertEquals(structured_out_mock.call_args[0][0], {'db_connection_check': {'message': 'Custom java is not available on host. Please install it. Java home should be the same as on server. \n', 'exit_code': 1, }, })
