@patch.object(Script, 'get_config')
@patch('check_host.Execute')
@patch('resource_management.libraries.script.Script.put_structured_out')
@patch('subprocess.Popen')
@patch('check_host.format')
@patch('os.path.isfile')
def testDBConnectionCheck(self, isfile_mock, format_mock, popenMock, structured_out_mock, execute_mock, mock_config):
    mock_config.return_value = {'commandParams': {'check_execute_list': 'db_connection_check', 'java_home': 'test_java_home', 'ambari_server_host': 'test_host', 'jdk_location': 'test_jdk_location', 'db_name': 'mysql', 'db_connection_url': 'test_db_connection_url', 'user_name': 'test_user_name', 'user_passwd': 'test_user_passwd', 'jdk_name': 'test_jdk_name', }, }
    execute_mock.side_effect = Exception('test exception')
    isfile_mock.return_value = True
    checkHost = CheckHost()
    checkHost.actionexecute(None)
    self.assertEquals(structured_out_mock.call_args[0][0], {'db_connection_check': {'message': 'Error downloading DBConnectionVerification.jar from Ambari Server resources. Check network access to Ambari Server.\ntest exception', 'exit_code': '1', }, })
    self.assertEquals(format_mock.call_args_list[2][0][0], "/bin/sh -c 'cd /usr/lib/ambari-agent/ && curl -kf --retry 5 {jdk_location}{check_db_connection_jar_name} -o {check_db_connection_jar_name}'")
    self.assertEquals(format_mock.call_args_list[3][0][0], '[ -f /usr/lib/ambari-agent/{check_db_connection_jar_name}]')
    mock_config.return_value = {'commandParams': {'check_execute_list': 'db_connection_check', 'java_home': 'test_java_home', 'ambari_server_host': 'test_host', 'jdk_location': 'test_jdk_location', 'db_name': 'oracle', 'db_connection_url': 'test_db_connection_url', 'user_name': 'test_user_name', 'user_passwd': 'test_user_passwd', 'jdk_name': 'test_jdk_name', }, }
    format_mock.reset_mock()
    execute_mock.reset_mock()
    p = MagicMock()
    execute_mock.side_effect = [p, Exception('test exception')]
    checkHost.actionexecute(None)
    self.assertEquals(structured_out_mock.call_args[0][0], {'db_connection_check': {'message': 'Error downloading JDBC connector from Ambari Server resources. Confirm you ran ambari-server setup to install JDBC connector. Use "ambari-server --help" for more information. Check network access to Ambari Server.\ntest exception', 'exit_code': '1', }, })
    self.assertEquals(format_mock.call_args_list[4][0][0], "/bin/sh -c 'cd /usr/lib/ambari-agent/ && curl -kf --retry 5 {jdbc_url} -o {jdbc_name}'")
    self.assertEquals(format_mock.call_args_list[5][0][0], '[ -f /usr/lib/ambari-agent/{jdbc_name}]')
    mock_config.return_value = {'commandParams': {'check_execute_list': 'db_connection_check', 'java_home': 'test_java_home', 'ambari_server_host': 'test_host', 'jdk_location': 'test_jdk_location', 'db_name': 'postgresql', 'db_connection_url': 'test_db_connection_url', 'user_name': 'test_user_name', 'user_passwd': 'test_user_passwd', 'jdk_name': 'test_jdk_name', }, }
    format_mock.reset_mock()
    execute_mock.reset_mock()
    execute_mock.side_effect = [p, p]
    s = MagicMock()
    s.communicate.return_value = ('test message', '')
    s.returncode = 1
    popenMock.return_value = s
    checkHost.actionexecute(None)
    self.assertEquals(structured_out_mock.call_args[0][0], {'db_connection_check': {'message': 'test message', 'exit_code': '1', }, })
    self.assertEquals(format_mock.call_args[0][0], '{java64_home}/bin/java -cp /usr/lib/ambari-agent/{check_db_connection_jar_name}:/usr/lib/ambari-agent/{jdbc_name} org.apache.ambari.server.DBConnectionVerification {db_connection_url} {user_name} {user_passwd!p} {jdbc_driver}')
    execute_mock.reset_mock()
    execute_mock.side_effect = [p, p]
    s.returncode = 0
    checkHost.actionexecute(None)
    self.assertEquals(structured_out_mock.call_args[0][0], {'db_connection_check': {'message': 'DB connection check completed successfully!', 'exit_code': '0', }, })
    mock_config.return_value = {'commandParams': {'check_execute_list': 'db_connection_check', 'java_home': 'test_java_home', 'ambari_server_host': 'test_host', 'jdk_location': 'test_jdk_location', 'db_connection_url': 'test_db_connection_url', 'user_name': 'test_user_name', 'user_passwd': 'test_user_passwd', 'db_name': 'postgresql', }, }
    isfile_mock.return_value = False
    checkHost.actionexecute(None)
    self.assertEquals(structured_out_mock.call_args[0][0], {'db_connection_check': {'message': 'Custom java is not available on host. Please install it. Java home should be the same as on server. \n', 'exit_code': '1', }, })
