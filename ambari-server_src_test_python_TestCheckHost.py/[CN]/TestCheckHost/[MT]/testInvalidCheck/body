@patch.object(Script, 'get_config')
@patch('resource_management.libraries.script.Script.put_structured_out')
def testInvalidCheck(self, structured_out_mock, mock_config):
    jsonFilePath = os.path.join('../resources/custom_actions', 'invalid_check.json')
    with open(jsonFilePath, 'r') as jsonFile:
        jsonPayload = json.load(jsonFile)
    mock_config.return_value = ConfigDictionary(jsonPayload)
    checkHost = CheckHost()
    checkHost.actionexecute(None)
    self.assertTrue(structured_out_mock.called)
    structured_out_mock.assert_called_with({})
