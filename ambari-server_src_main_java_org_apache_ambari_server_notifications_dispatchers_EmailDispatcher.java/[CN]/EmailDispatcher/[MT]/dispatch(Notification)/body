{
  LOG.info("Sending email: {}",notification);
  if (null == notification.DispatchProperties) {
    LOG.error("Unable to dispatch an email notification that does not contain SMTP properties");
    if (null != notification.Callback) {
      notification.Callback.onFailure(notification.CallbackIds);
    }
    return;
  }
  Properties properties=new Properties();
  for (  Entry<String,String> entry : notification.DispatchProperties.entrySet()) {
    properties.put(entry.getKey(),entry.getValue());
  }
  if (null == notification.Recipients) {
    LOG.error("Unable to dispatch an email notification that does not have recipients");
    if (null != notification.Callback) {
      notification.Callback.onFailure(notification.CallbackIds);
    }
    return;
  }
  final Session session;
  EmailAuthenticator authenticator=null;
  if (null != notification.Credentials) {
    authenticator=new EmailAuthenticator(notification.Credentials);
  }
  session=Session.getInstance(properties,authenticator);
  try {
    MimeMessage message=new MimeMessage(session);
    for (    Recipient recipient : notification.Recipients) {
      InternetAddress address=new InternetAddress(recipient.Identifier);
      message.addRecipient(RecipientType.TO,address);
    }
    message.setSubject(notification.Subject);
    message.setText(notification.Body,"UTF-8","html");
    Transport.send(message);
    if (LOG.isDebugEnabled()) {
      LOG.debug("Successfully dispatched email to {}",notification.Recipients);
    }
    if (null != notification.Callback) {
      notification.Callback.onSuccess(notification.CallbackIds);
    }
  }
 catch (  Exception exception) {
    LOG.error("Unable to dispatch notification via Email",exception);
    if (null != notification.Callback) {
      notification.Callback.onFailure(notification.CallbackIds);
    }
  }
 finally {
    try {
      session.getTransport().close();
    }
 catch (    MessagingException me) {
      LOG.warn("Dispatcher unable to close SMTP transport",me);
    }
  }
}
