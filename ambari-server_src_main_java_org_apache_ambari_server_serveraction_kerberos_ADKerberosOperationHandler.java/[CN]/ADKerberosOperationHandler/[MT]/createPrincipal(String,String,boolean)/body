{
  if (!isOpen()) {
    throw new KerberosOperationException("This operation handler has not been opened");
  }
  if (principal == null) {
    throw new KerberosOperationException("principal is null");
  }
  if (password == null) {
    throw new KerberosOperationException("principal password is null");
  }
  String realm=null;
  String principal_primary=null;
  String principal_instance=null;
  Matcher matcher=PATTERN_PRINCIPAL.matcher(principal);
  if (matcher.matches()) {
    principal=matcher.group(1);
    principal_primary=matcher.group(2);
    principal_instance=matcher.group(3);
    realm=matcher.group(4);
  }
  if ((realm == null) || realm.isEmpty()) {
    realm=getDefaultRealm();
  }
  Map<String,Object> context=new HashMap<String,Object>();
  context.put("principal",principal);
  context.put("principal_primary",principal_primary);
  context.put("principal_instance",principal_instance);
  context.put("realm",realm);
  context.put("realm_lowercase",(realm == null) ? null : realm.toLowerCase());
  context.put("password",password);
  context.put("is_service",service);
  context.put("container_dn",this.principalContainerDn);
  Map<String,Object> data=processCreateTemplate(context);
  Attributes attributes=new BasicAttributes();
  String cn=null;
  if (data != null) {
    for (    Map.Entry<String,Object> entry : data.entrySet()) {
      String key=entry.getKey();
      Object value=entry.getValue();
      if ("unicodePwd".equals(key)) {
        if (value instanceof String) {
          Attribute passwordAttr=new BasicAttribute("unicodePwd");
          try {
            passwordAttr.add(((String)value).getBytes("UTF-16LE"));
          }
 catch (          UnsupportedEncodingException ue) {
            throw new KerberosOperationException("Can not encode password with UTF-16LE",ue);
          }
          attributes.put(passwordAttr);
        }
      }
 else {
        Attribute attribute=new BasicAttribute(key);
        if (value instanceof Collection) {
          for (          Object object : (Collection)value) {
            attribute.add(object);
          }
        }
 else {
          attribute.add(value);
          if ("cn".equals(key) && (value != null)) {
            cn=value.toString();
          }
        }
        attributes.put(attribute);
      }
    }
  }
  if (cn == null) {
    cn=String.format("%s@%s",principal,realm);
  }
  try {
    Name name=new CompositeName().add(String.format("cn=%s,%s",cn,principalContainerDn));
    ldapContext.createSubcontext(name,attributes);
  }
 catch (  NamingException ne) {
    throw new KerberosOperationException("Can not create principal : " + principal,ne);
  }
  return 0;
}
