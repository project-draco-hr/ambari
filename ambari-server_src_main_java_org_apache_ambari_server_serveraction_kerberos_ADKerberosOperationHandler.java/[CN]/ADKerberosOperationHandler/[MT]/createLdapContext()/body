{
  KerberosCredential administratorCredentials=getAdministratorCredentials();
  Properties properties=new Properties();
  properties.put(Context.INITIAL_CONTEXT_FACTORY,LDAP_CONTEXT_FACTORY_CLASS);
  properties.put(Context.PROVIDER_URL,ldapUrl);
  properties.put(Context.SECURITY_PRINCIPAL,administratorCredentials.getPrincipal());
  properties.put(Context.SECURITY_CREDENTIALS,administratorCredentials.getPassword());
  properties.put(Context.SECURITY_AUTHENTICATION,"simple");
  properties.put(Context.REFERRAL,"follow");
  properties.put("java.naming.ldap.factory.socket",TrustingSSLSocketFactory.class.getName());
  try {
    return createInitialLdapContext(properties,null);
  }
 catch (  CommunicationException e) {
    String message=String.format("Failed to communicate with the Active Directory at %s: %s",ldapUrl,e.getMessage());
    LOG.warn(message,e);
    throw new KerberosKDCConnectionException(message,e);
  }
catch (  AuthenticationException e) {
    String message=String.format("Failed to authenticate with the Active Directory at %s: %s",ldapUrl,e.getMessage());
    LOG.warn(message,e);
    throw new KerberosAdminAuthenticationException(message,e);
  }
catch (  NamingException e) {
    String error=e.getMessage();
    if ((error != null) && !error.isEmpty()) {
      String message=String.format("Failed to communicate with the Active Directory at %s: %s",ldapUrl,e.getMessage());
      LOG.warn(message,e);
      if (error.startsWith("Cannot parse url:")) {
        throw new KerberosKDCConnectionException(message,e);
      }
 else {
        throw new KerberosOperationException(message,e);
      }
    }
 else {
      throw new KerberosOperationException("Unexpected error condition",e);
    }
  }
}
