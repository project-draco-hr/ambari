{
  if (isOpen()) {
    close();
  }
  if (administratorCredentials == null) {
    throw new KerberosAdminAuthenticationException("administrator credentials not provided");
  }
  if (realm == null) {
    throw new KerberosRealmException("realm not provided");
  }
  if (kerberosConfiguration == null) {
    throw new KerberosRealmException("kerberos-env configuration may not be null");
  }
  this.ldapUrl=kerberosConfiguration.get(KERBEROS_ENV_LDAP_URL);
  if (this.ldapUrl == null) {
    throw new KerberosKDCConnectionException("ldapUrl not provided");
  }
  this.principalContainerDn=kerberosConfiguration.get(KERBEROS_ENV_PRINCIPAL_CONTAINER_DN);
  if (this.principalContainerDn == null) {
    throw new KerberosLDAPContainerException("principalContainerDn not provided");
  }
  try {
    this.principalContainerLdapName=new LdapName(principalContainerDn);
  }
 catch (  InvalidNameException e) {
    throw new KerberosLDAPContainerException("principalContainerDn is not a valid LDAP name",e);
  }
  setAdministratorCredentials(administratorCredentials);
  setDefaultRealm(realm);
  setKeyEncryptionTypes(translateEncryptionTypes(kerberosConfiguration.get(KERBEROS_ENV_ENCRYPTION_TYPES),"\\s+"));
  this.ldapContext=createLdapContext();
  this.searchControls=createSearchControls();
  this.createTemplate=kerberosConfiguration.get(KERBEROS_ENV_CREATE_ATTRIBUTES_TEMPLATE);
  this.gson=new Gson();
  setOpen(true);
}
