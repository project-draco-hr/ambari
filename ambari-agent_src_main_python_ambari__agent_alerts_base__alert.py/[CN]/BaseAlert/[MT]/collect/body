def collect(self):
    ' method used for collection.  defers to _collect() '
    res = (BaseAlert.RESULT_UNKNOWN, [])
    res_base_text = 'Unknown {0}'
    try:
        res = self._collect()
        res_base_text = self.alert_source_meta['reporting'][res[0].lower()]['text']
    except Exception as e:
        traceback.print_exc()
        res = (BaseAlert.RESULT_UNKNOWN, [str(e)])
        res_base_text = 'Unknown {0}'
    if logger.isEnabledFor(logging.DEBUG):
        logger.debug('debug alert result: {0}'.format(str(res)))
    data = {}
    data['name'] = self._find_value('name')
    data['label'] = self._find_value('label')
    data['state'] = res[0]
    data['text'] = res_base_text.format(*res[1])
    data['cluster'] = self.cluster
    data['service'] = self._find_value('serviceName')
    data['component'] = self._find_value('componentName')
    data['timestamp'] = long((time.time() * 1000))
    data['uuid'] = self._find_value('uuid')
    data['enabled'] = self._find_value('enabled')
    if logger.isEnabledFor(logging.DEBUG):
        logger.debug('debug alert text: {0}'.format(data['text']))
    self.collector.put(self.cluster, data)
