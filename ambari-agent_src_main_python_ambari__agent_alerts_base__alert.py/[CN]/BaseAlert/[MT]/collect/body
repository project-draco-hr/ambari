def collect(self):
    ' method used for collection.  defers to _collect() '
    res = (BaseAlert.RESULT_UNKNOWN, [])
    res_base_text = None
    try:
        res = self._collect()
        result_state = res[0]
        reporting_state = result_state.lower()
        if (result_state == BaseAlert.RESULT_SKIPPED):
            logger.debug('[Alert][{0}] Skipping UUID {1}.'.format(self.get_name(), self.get_uuid()))
            return
        if (('reporting' in self.alert_source_meta) and (reporting_state in self.alert_source_meta['reporting']) and ('text' in self.alert_source_meta['reporting'][reporting_state])):
            res_base_text = self.alert_source_meta['reporting'][reporting_state]['text']
        if (res_base_text is None):
            res_base_text = self._get_reporting_text(result_state)
    except Exception as e:
        message = '[Alert][{0}] Unable to run the alert'.format(self.get_name())
        if logger.isEnabledFor(logging.DEBUG):
            logger.exception(message)
        else:
            logger.warning(message)
        res = (BaseAlert.RESULT_UNKNOWN, [str(e)])
        res_base_text = '{0}'
    if logger.isEnabledFor(logging.DEBUG):
        logger.debug('[Alert][{0}] result = {1}'.format(self.get_name(), str(res)))
    data = {}
    data['name'] = self._find_value('name')
    data['label'] = self._find_value('label')
    data['state'] = res[0]
    data['text'] = res_base_text.format(*res[1])
    data['cluster'] = self.cluster
    data['service'] = self._find_value('serviceName')
    data['component'] = self._find_value('componentName')
    data['timestamp'] = long((time.time() * 1000))
    data['uuid'] = self._find_value('uuid')
    data['enabled'] = self._find_value('enabled')
    if logger.isEnabledFor(logging.DEBUG):
        logger.debug('[Alert][{0}] text = {1}'.format(self.get_name(), data['text']))
    self.collector.put(self.cluster, data)
