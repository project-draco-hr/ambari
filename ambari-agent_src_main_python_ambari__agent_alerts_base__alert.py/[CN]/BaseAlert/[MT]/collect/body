def collect(self):
    ' method used for collection.  defers to _collect() '
    res = (BaseAlert.RESULT_UNKNOWN, [])
    res_base_text = None
    try:
        res = self._collect()
        result_state = res[0]
        reporting_state = result_state.lower()
        if (('reporting' in self.alert_source_meta) and (reporting_state in self.alert_source_meta['reporting']) and ('text' in self.alert_source_meta['reporting'][reporting_state])):
            res_base_text = self.alert_source_meta['reporting'][reporting_state]['text']
        if (res_base_text is None):
            res_base_text = self._get_reporting_text(result_state)
    except Exception as exception:
        message = '[Alert][{0}] Unable to execute alert. {1}'.format(self.get_name(), str(exception))
        if logger.isEnabledFor(logging.DEBUG):
            logger.exception(message)
        else:
            logger.warning(message)
        res = (BaseAlert.RESULT_UNKNOWN, [str(exception)])
        res_base_text = '{0}'
    if logger.isEnabledFor(logging.DEBUG):
        logger.debug('[Alert][{0}] result = {1}'.format(self.get_name(), str(res)))
    data = {}
    data['name'] = self._get_alert_meta_value_safely('name')
    data['label'] = self._get_alert_meta_value_safely('label')
    data['uuid'] = self._get_alert_meta_value_safely('uuid')
    data['cluster'] = self.cluster_name
    data['service'] = self._get_alert_meta_value_safely('serviceName')
    data['component'] = self._get_alert_meta_value_safely('componentName')
    data['timestamp'] = long((time.time() * 1000))
    data['enabled'] = self._get_alert_meta_value_safely('enabled')
    try:
        try:
            data['state'] = res[0]
            try:
                data['text'] = res_base_text.format(*res[1])
            except ValueError as value_error:
                logger.warn('[Alert][{0}] - {1}'.format(self.get_name(), str(value_error)))
                res_base_text = res_base_text.replace('d}', 's}')
                data_as_strings = map(str, res[1])
                data['text'] = res_base_text.format(*data_as_strings)
            if logger.isEnabledFor(logging.DEBUG):
                logger.debug('[Alert][{0}] text = {1}'.format(self.get_name(), data['text']))
        except Exception as exception:
            logger.exception("[Alert][{0}] - The alert's data is not properly formatted".format(self.get_name()))
            data['state'] = self.RESULT_UNKNOWN
            data['text'] = 'There is a problem with the alert definition: {0}'.format(str(exception))
    finally:
        self.collector.put(self.cluster_name, data)
