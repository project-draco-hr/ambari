def _get_uri_from_structure(self, alert_uri_lookup_keys):
    '\n    Gets the URI to use by examining the URI structure from the definition.\n    This will return a named tuple that has the uri and the SSL flag. The\n    URI structure looks something like:\n    \n    "uri":{ \n      "http": foo,\n      "https": bar,\n      ...\n    }\n    '
    if (alert_uri_lookup_keys is None):
        return None
    http_uri = None
    https_uri = None
    if (alert_uri_lookup_keys.ha_nameservice is not None):
        alert_uri = self._get_uri_from_ha_structure(alert_uri_lookup_keys)
        if (alert_uri is not None):
            return alert_uri
    if (alert_uri_lookup_keys.http is not None):
        http_uri = self._get_configuration_value(alert_uri_lookup_keys.http)
    if (alert_uri_lookup_keys.https is not None):
        https_uri = self._get_configuration_value(alert_uri_lookup_keys.https)
    if ((http_uri is None) and (https_uri is None)):
        if (alert_uri_lookup_keys.default_port is not None):
            alert_uri = AlertUri(uri=alert_uri_lookup_keys.default_port, is_ssl_enabled=False)
            return alert_uri
        else:
            raise Exception('Could not determine result. Either the http or https URI must be specified.')
    uri = http_uri
    is_ssl_enabled = False
    if (https_uri is not None):
        if (http_uri is None):
            is_ssl_enabled = True
            uri = https_uri
        elif self._check_uri_ssl_property(alert_uri_lookup_keys):
            is_ssl_enabled = True
            uri = https_uri
    alert_uri = AlertUri(uri=uri, is_ssl_enabled=is_ssl_enabled)
    return alert_uri
