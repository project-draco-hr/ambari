{
  AmbariManagementController ambariManagementController=injector.getInstance(AmbariManagementController.class);
  Clusters clusters=ambariManagementController.getClusters();
  if (clusters != null) {
    Map<String,Cluster> clusterMap=clusters.getClusters();
    if ((clusterMap != null) && !clusterMap.isEmpty()) {
      for (      final Cluster cluster : clusterMap.values()) {
        Config hbaseEnvProps=cluster.getDesiredConfigByType(HBASE_ENV);
        Config hbaseSiteProps=cluster.getDesiredConfigByType(HBASE_SITE);
        if (hbaseEnvProps != null) {
          String value=hbaseEnvProps.getProperties().get("override_hbase_uid");
          if (value != null) {
            Map<String,String> updates=new HashMap<String,String>();
            Set<String> removes=new HashSet<String>();
            updates.put("override_uid",value);
            removes.add("override_hbase_uid");
            updateConfigurationPropertiesForCluster(cluster,HBASE_ENV,new HashMap<String,String>(),removes,false,true);
            updateConfigurationPropertiesForCluster(cluster,CLUSTER_ENV,updates,true,false);
          }
        }
        if (hbaseSiteProps != null) {
          String value=hbaseSiteProps.getProperties().get("hbase.bucketcache.size");
          if (value != null) {
            if (value.endsWith("m")) {
              value=value.substring(0,value.length() - 1);
              Map<String,String> updates=new HashMap<String,String>();
              updates.put("hbase.bucketcache.size",value);
              updateConfigurationPropertiesForCluster(cluster,HBASE_SITE,updates,true,false);
            }
          }
        }
      }
    }
  }
}
