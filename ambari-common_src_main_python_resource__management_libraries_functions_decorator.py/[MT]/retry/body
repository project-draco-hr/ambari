def retry(times=3, sleep_time=1, max_sleep_time=8, backoff_factor=1, err_class=Exception):
    '\n  Retry decorator for improved robustness of functions.\n  :param times: Number of times to attempt to call the function.\n  :param sleep_time: Initial sleep time between attempts\n  :param backoff_factor: After every failed attempt, multiple the previous sleep time by this factor.\n  :param err_class: Exception class to handle\n  :return: Returns the output of the wrapped function.\n  '

    def decorator(function):

        def wrapper(*args, **kwargs):
            _times = times
            _sleep_time = sleep_time
            _backoff_factor = backoff_factor
            _err_class = err_class
            while (_times > 1):
                _times -= 1
                try:
                    return function(*args, **kwargs)
                except _err_class as err:
                    Logger.info(('Will retry %d time(s), caught exception: %s. Sleeping for %d sec(s)' % (_times, str(err), _sleep_time)))
                    time.sleep(_sleep_time)
                if ((_sleep_time * _backoff_factor) <= max_sleep_time):
                    _sleep_time *= _backoff_factor
            return function(*args, **kwargs)
        return wrapper
    return decorator
