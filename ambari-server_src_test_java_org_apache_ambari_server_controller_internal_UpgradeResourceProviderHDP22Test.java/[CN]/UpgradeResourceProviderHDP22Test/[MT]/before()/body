{
  configHelper=EasyMock.createNiceMock(ConfigHelper.class);
  expect(configHelper.getPlaceholderValueFromDesiredConfigurations(EasyMock.anyObject(Cluster.class),EasyMock.eq("{{foo/bar}}"))).andReturn("placeholder-rendered-properly").anyTimes();
  expect(configHelper.getDefaultProperties(EasyMock.anyObject(StackId.class),EasyMock.anyObject(Cluster.class))).andReturn(new HashMap<String,Set<org.apache.ambari.server.state.PropertyInfo>>()).anyTimes();
  expect(configHelper.getEffectiveConfigAttributes(EasyMock.anyObject(Cluster.class),EasyMock.anyObject(Map.class))).andReturn(new HashMap<String,Map<String,Map<String,String>>>()).anyTimes();
  expect(configHelper.getEffectiveDesiredTags(EasyMock.anyObject(Cluster.class),EasyMock.eq("h1"))).andReturn(new HashMap<String,Map<String,String>>(){
{
      put("hive-site",new HashMap<String,String>(){
{
          put("tag",configTagVersion1);
        }
      }
);
    }
  }
).times(3);
  expect(configHelper.getEffectiveDesiredTags(EasyMock.anyObject(Cluster.class),EasyMock.eq("h1"))).andReturn(new HashMap<String,Map<String,String>>(){
{
      put("hive-site",new HashMap<String,String>(){
{
          put("tag",configTagVersion2);
        }
      }
);
    }
  }
).times(2);
  expect(configHelper.getEffectiveConfigProperties(EasyMock.anyObject(Cluster.class),EasyMock.anyObject(Map.class))).andReturn(new HashMap<String,Map<String,String>>(){
{
      put("hive-site",configTagVersion1Properties);
    }
  }
).times(1);
  expect(configHelper.getEffectiveConfigProperties(EasyMock.anyObject(Cluster.class),EasyMock.anyObject(Map.class))).andReturn(new HashMap<String,Map<String,String>>(){
{
      put("hive-site",configTagVersion2Properties);
    }
  }
).times(2);
  expect(configHelper.getMergedConfig(EasyMock.anyObject(Map.class),EasyMock.anyObject(Map.class))).andReturn(new HashMap<String,String>()).anyTimes();
  EasyMock.replay(configHelper);
  injector=Guice.createInjector(Modules.override(new InMemoryDefaultTestModule()).with(new MockModule()));
  injector.getInstance(GuiceJpaInitializer.class);
  helper=injector.getInstance(OrmTestHelper.class);
  amc=injector.getInstance(AmbariManagementController.class);
  Field field=AmbariServer.class.getDeclaredField("clusterController");
  field.setAccessible(true);
  field.set(null,amc);
  stackDAO=injector.getInstance(StackDAO.class);
  upgradeDao=injector.getInstance(UpgradeDAO.class);
  repoVersionDao=injector.getInstance(RepositoryVersionDAO.class);
  AmbariEventPublisher publisher=createNiceMock(AmbariEventPublisher.class);
  replay(publisher);
  ViewRegistry.initInstance(new ViewRegistry(publisher));
  StackEntity stackEntity=stackDAO.find("HDP","2.2.0");
  RepositoryVersionEntity repoVersionEntity=new RepositoryVersionEntity();
  repoVersionEntity.setDisplayName("For Stack Version 2.2.0");
  repoVersionEntity.setOperatingSystems("");
  repoVersionEntity.setStack(stackEntity);
  repoVersionEntity.setVersion("2.2.0.0");
  repoVersionDao.create(repoVersionEntity);
  repoVersionEntity=new RepositoryVersionEntity();
  repoVersionEntity.setDisplayName("For Stack Version 2.2.4.2");
  repoVersionEntity.setOperatingSystems("");
  repoVersionEntity.setStack(stackEntity);
  repoVersionEntity.setVersion("2.2.4.2");
  repoVersionDao.create(repoVersionEntity);
  clusters=injector.getInstance(Clusters.class);
  StackId stackId=new StackId("HDP-2.2.0");
  clusters.addCluster("c1",stackId);
  Cluster cluster=clusters.getCluster("c1");
  helper.getOrCreateRepositoryVersion(stackId,stackId.getStackVersion());
  cluster.createClusterVersion(stackId,stackId.getStackVersion(),"admin",RepositoryVersionState.INSTALLING);
  cluster.transitionClusterVersion(stackId,stackId.getStackVersion(),RepositoryVersionState.CURRENT);
  clusters.addHost("h1");
  Host host=clusters.getHost("h1");
  Map<String,String> hostAttributes=new HashMap<String,String>();
  hostAttributes.put("os_family","redhat");
  hostAttributes.put("os_release_version","6.3");
  host.setHostAttributes(hostAttributes);
  host.setState(HostState.HEALTHY);
  host.persist();
  clusters.mapHostToCluster("h1","c1");
  Service service=cluster.addService("HIVE");
  service.setDesiredStackVersion(cluster.getDesiredStackVersion());
  service.persist();
  ServiceComponent component=service.addServiceComponent("HIVE_SERVER");
  ServiceComponentHost sch=component.addServiceComponentHost("h1");
  sch.setVersion("2.2.0.0");
  component=service.addServiceComponent("HIVE_CLIENT");
  sch=component.addServiceComponentHost("h1");
  sch.setVersion("2.2.0.0");
  topologyManager=injector.getInstance(TopologyManager.class);
  StageUtils.setTopologyManager(topologyManager);
  ActionManager.setTopologyManager(topologyManager);
}
