{
  Cluster cluster=clusters.getCluster("c1");
  StackId oldStack=cluster.getDesiredStackVersion();
  for (  Service s : cluster.getServices().values()) {
    assertEquals(oldStack,s.getDesiredStackVersion());
    for (    ServiceComponent sc : s.getServiceComponents().values()) {
      assertEquals(oldStack,sc.getDesiredStackVersion());
      for (      ServiceComponentHost sch : sc.getServiceComponentHosts().values()) {
        assertEquals(oldStack,sch.getDesiredStackVersion());
      }
    }
  }
  Config config=new ConfigImpl("hive-site");
  config.setProperties(configTagVersion1Properties);
  config.setTag(configTagVersion1);
  cluster.addConfig(config);
  cluster.addDesiredConfig("admin",Collections.singleton(config));
  Map<String,Object> requestProps=new HashMap<String,Object>();
  requestProps.put(UpgradeResourceProvider.UPGRADE_CLUSTER_NAME,"c1");
  requestProps.put(UpgradeResourceProvider.UPGRADE_VERSION,"2.2.4.2");
  ResourceProvider upgradeResourceProvider=createProvider(amc);
  Request request=PropertyHelper.getCreateRequest(Collections.singleton(requestProps),null);
  upgradeResourceProvider.createResources(request);
  List<UpgradeEntity> upgrades=upgradeDao.findUpgrades(cluster.getClusterId());
  assertEquals(1,upgrades.size());
  UpgradeEntity upgrade=upgrades.get(0);
  assertEquals(3,upgrade.getUpgradeGroups().size());
  UpgradeGroupEntity group=upgrade.getUpgradeGroups().get(2);
  assertEquals(2,group.getItems().size());
  group=upgrade.getUpgradeGroups().get(0);
  assertEquals(2,group.getItems().size());
  UpgradeItemEntity item=group.getItems().get(1);
  assertEquals("Value is set for the source stack upgrade pack","Goo",item.getText());
  assertTrue(cluster.getDesiredConfigs().containsKey("hive-site"));
  StackId newStack=cluster.getDesiredStackVersion();
  assertTrue(oldStack.equals(newStack));
  for (  Service s : cluster.getServices().values()) {
    assertEquals(newStack,s.getDesiredStackVersion());
    for (    ServiceComponent sc : s.getServiceComponents().values()) {
      assertEquals(newStack,sc.getDesiredStackVersion());
      for (      ServiceComponentHost sch : sc.getServiceComponentHosts().values()) {
        assertEquals(newStack,sch.getDesiredStackVersion());
      }
    }
  }
  assertEquals(configTagVersion1,cluster.getDesiredConfigByType("hive-site").getTag());
  final Config newConfig=new ConfigImpl("hive-site");
  newConfig.setProperties(new HashMap<String,String>(){
{
      put("hive.server2.thrift.port","10010");
    }
  }
);
  newConfig.setTag(configTagVersion2);
  Set<Config> desiredConfigs=new HashSet<Config>(){
{
      add(newConfig);
    }
  }
;
  cluster.addConfig(newConfig);
  cluster.addDesiredConfig("admin",desiredConfigs);
  assertEquals(configTagVersion2,cluster.getDesiredConfigByType("hive-site").getTag());
  Gson gson=new Gson();
  List<ExecutionCommandEntity> currentExecutionCommands=injector.getInstance(ExecutionCommandDAO.class).findAll();
  for (  ExecutionCommandEntity ece : currentExecutionCommands) {
    String executionCommandJson=new String(ece.getCommand());
    Map<String,Object> commandMap=gson.<Map<String,Object>>fromJson(executionCommandJson,Map.class);
    if ("SERVICE_CHECK".equals(commandMap.get("roleCommand")) || "RESTART".equals(commandMap.get("roleCommand"))) {
      assertTrue(commandMap.containsKey(KeyNames.REFRESH_CONFIG_TAGS_BEFORE_EXECUTION));
      Object object=commandMap.get(KeyNames.REFRESH_CONFIG_TAGS_BEFORE_EXECUTION);
      assertTrue(object instanceof List);
      @SuppressWarnings("unchecked") List<String> tags=(List<String>)commandMap.get(KeyNames.REFRESH_CONFIG_TAGS_BEFORE_EXECUTION);
      assertEquals(1,tags.size());
      assertEquals("*",tags.get(0));
      ExecutionCommandWrapper executionCommandWrapper=new ExecutionCommandWrapper(executionCommandJson);
      ExecutionCommand executionCommand=executionCommandWrapper.getExecutionCommand();
      Map<String,Map<String,String>> configurationTags=executionCommand.getConfigurationTags();
      assertEquals(configTagVersion2,configurationTags.get("hive-site").get("tag"));
    }
  }
}
