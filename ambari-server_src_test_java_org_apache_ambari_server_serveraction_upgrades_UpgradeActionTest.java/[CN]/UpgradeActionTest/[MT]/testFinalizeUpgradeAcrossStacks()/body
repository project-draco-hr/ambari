{
  makeCrossStackUpgradeCluster();
  Clusters clusters=m_injector.getInstance(Clusters.class);
  Cluster cluster=clusters.getCluster("c1");
  cluster.setCurrentStackVersion(HDP_21_STACK);
  cluster.setDesiredStackVersion(HDP_22_STACK);
  Map<String,String> commandParams=new HashMap<String,String>();
  commandParams.put(FinalizeUpgradeAction.UPGRADE_DIRECTION_KEY,"upgrade");
  commandParams.put(FinalizeUpgradeAction.VERSION_KEY,HDP_2_2_1_0);
  commandParams.put(FinalizeUpgradeAction.ORIGINAL_STACK_KEY,HDP_21_STACK.getStackId());
  commandParams.put(FinalizeUpgradeAction.TARGET_STACK_KEY,HDP_22_STACK.getStackId());
  ExecutionCommand executionCommand=new ExecutionCommand();
  executionCommand.setCommandParams(commandParams);
  executionCommand.setClusterName("c1");
  HostRoleCommand hostRoleCommand=hostRoleCommandFactory.create(null,null,null,null);
  hostRoleCommand.setExecutionCommandWrapper(new ExecutionCommandWrapper(executionCommand));
  FinalizeUpgradeAction action=m_injector.getInstance(FinalizeUpgradeAction.class);
  action.setExecutionCommand(executionCommand);
  action.setHostRoleCommand(hostRoleCommand);
  CommandReport report=action.execute(null);
  assertNotNull(report);
  assertEquals(HostRoleStatus.COMPLETED.name(),report.getStatus());
  StackId currentStackId=cluster.getCurrentStackVersion();
  StackId desiredStackId=cluster.getDesiredStackVersion();
  assertEquals(desiredStackId,currentStackId);
  assertEquals(HDP_22_STACK,currentStackId);
  assertEquals(HDP_22_STACK,desiredStackId);
}
