{
  StackId sourceStack=HDP_21_STACK;
  StackId targetStack=HDP_22_STACK;
  String sourceRepo=HDP_2_1_1_0;
  String targetRepo=HDP_2_2_0_1;
  makeCrossStackUpgradeCluster(sourceStack,sourceRepo,targetStack,targetRepo);
  Cluster cluster=clusters.getCluster(clusterName);
  Service service=installService(cluster,"HDFS");
  addServiceComponent(cluster,service,"NAMENODE");
  addServiceComponent(cluster,service,"DATANODE");
  createNewServiceComponentHost(cluster,"HDFS","NAMENODE","h1");
  createNewServiceComponentHost(cluster,"HDFS","DATANODE","h1");
  createConfigs(cluster);
  cluster.setCurrentStackVersion(sourceStack);
  cluster.setDesiredStackVersion(targetStack);
  cluster.getServiceComponentHosts("HDFS","NAMENODE").get(0).setVersion(targetRepo);
  cluster.getServiceComponentHosts("HDFS","DATANODE").get(0).setVersion(targetRepo);
  ClusterVersionEntity upgradingClusterVersion=clusterVersionDAO.findByClusterAndStackAndVersion(clusterName,HDP_22_STACK,targetRepo);
  upgradingClusterVersion.setState(RepositoryVersionState.INSTALLING);
  upgradingClusterVersion=clusterVersionDAO.merge(upgradingClusterVersion);
  upgradingClusterVersion=clusterVersionDAO.findByClusterAndStackAndVersion(clusterName,HDP_22_STACK,targetRepo);
  List<HostVersionEntity> hostVersions=hostVersionDAO.findByClusterStackAndVersion(clusterName,HDP_22_STACK,targetRepo);
  assertEquals(RepositoryVersionState.INSTALLING,upgradingClusterVersion.getState());
  assertTrue(hostVersions.size() > 0);
  for (  HostVersionEntity hostVersion : hostVersions) {
    assertEquals(RepositoryVersionState.INSTALLED,hostVersion.getState());
  }
  Map<String,String> commandParams=new HashMap<String,String>();
  commandParams.put(FinalizeUpgradeAction.UPGRADE_DIRECTION_KEY,"upgrade");
  commandParams.put(FinalizeUpgradeAction.VERSION_KEY,targetRepo);
  commandParams.put(FinalizeUpgradeAction.ORIGINAL_STACK_KEY,sourceStack.getStackId());
  commandParams.put(FinalizeUpgradeAction.TARGET_STACK_KEY,targetStack.getStackId());
  ExecutionCommand executionCommand=new ExecutionCommand();
  executionCommand.setCommandParams(commandParams);
  executionCommand.setClusterName(clusterName);
  HostRoleCommand hostRoleCommand=hostRoleCommandFactory.create(null,null,null,null);
  hostRoleCommand.setExecutionCommandWrapper(new ExecutionCommandWrapper(executionCommand));
  finalizeUpgradeAction.setExecutionCommand(executionCommand);
  finalizeUpgradeAction.setHostRoleCommand(hostRoleCommand);
  CommandReport report=finalizeUpgradeAction.execute(null);
  assertNotNull(report);
  assertEquals(HostRoleStatus.COMPLETED.name(),report.getStatus());
  StackId currentStackId=cluster.getCurrentStackVersion();
  StackId desiredStackId=cluster.getDesiredStackVersion();
  assertEquals(desiredStackId,currentStackId);
  assertEquals(targetStack,currentStackId);
  assertEquals(targetStack,desiredStackId);
}
