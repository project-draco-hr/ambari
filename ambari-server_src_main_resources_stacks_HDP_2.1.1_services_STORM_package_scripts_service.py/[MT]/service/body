def service(name, action='start'):
    import params
    import status_params
    pid_file = status_params.pid_files[name]
    no_op_test = format('ls {pid_file} >/dev/null 2>&1 && ps `cat {pid_file}` >/dev/null 2>&1')
    if (name == 'ui'):
        process_cmd = '^java.+backtype.storm.ui.core$'
    elif (name == 'rest_api'):
        process_cmd = format('java -jar {rest_lib_dir}/`ls {rest_lib_dir} | grep -wE storm-rest-[0-9.-]+\\.jar` server')
    else:
        process_cmd = format('^java.+backtype.storm.daemon.{name}$')
    crt_pid_cmd = format('pgrep -f "{process_cmd}" > {pid_file}')
    if (action == 'start'):
        if (name == 'rest_api'):
            cmd = format('env PATH=$PATH:{java64_home}/bin {process_cmd} {rest_api_conf_file} > {log_dir}/restapi.log')
        else:
            cmd = format('env PATH=$PATH:{java64_home}/bin /usr/bin/storm {name}')
        Execute(cmd, not_if=no_op_test, user=params.storm_user, wait_for_finish=False)
        Execute(crt_pid_cmd, user=params.storm_user, logoutput=True, tries=6, try_sleep=10)
    elif (action == 'stop'):
        cmd = format('kill `cat {pid_file}` >/dev/null 2>&1')
        Execute(cmd)
        Execute(format('! ({no_op_test})'), tries=5, try_sleep=3)
        Execute(format('rm -f {pid_file}'))
