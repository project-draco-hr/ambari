@only_for_platform(PLATFORM_WINDOWS)
@patch.object(OSCheck, 'os_distribution', new=MagicMock(return_value=os_distro_value))
@patch.object(setup_agent, 'findNearestAgentPackageVersion')
@patch.object(setup_agent, 'getAvailableAgentPackageVersions')
def test_returned_optimal_version_is_nearest_on_windows(self, findNearestAgentPackageVersion_method, getAvailableAgentPackageVersions_method):
    projectVersion = ''
    nearest_version = (projectVersion + '1.1.1')
    findNearestAgentPackageVersion_method.return_value = {'exitstatus': 0, 'log': [nearest_version, ''], }
    getAvailableAgentPackageVersions_method.return_value = {'exitstatus': 0, 'log': nearest_version, }
    result_version = setup_agent.getOptimalVersion(projectVersion)
    self.assertTrue(findNearestAgentPackageVersion_method.called)
    self.assertTrue((result_version['exitstatus'] == 1))
    pass
