@patch.object(setup_agent, 'tryStopAgent')
@patch.object(setup_agent, 'isAgentPackageAlreadyInstalled')
@patch.object(setup_agent, 'runAgent')
@patch.object(setup_agent, 'configureAgent')
@patch.object(setup_agent, 'installAgent')
@patch('ambari_commons.OSCheck.is_suse_family')
@patch('ambari_commons.OSCheck.is_debian_family')
@patch.object(setup_agent, 'getOptimalVersion')
@patch.object(setup_agent, 'checkServerReachability')
@patch('sys.exit')
@patch('os.path.dirname')
@patch('os.path.realpath')
def test_setup_agent_main(self, dirname_mock, realpath_mock, exit_mock, checkServerReachability_mock, getOptimalVersion_mock, is_debian_family_mock, is_suse_family_mock, installAgent_mock, configureAgent_mock, runAgent_mock, isAgentPackageAlreadyInstalled_mock, tryStopAgent_mock):
    installAgent_mock.return_value = {'log': 'log', 'exitstatus': 0, }
    runAgent_mock.return_value = 0
    getOptimalVersion_mock.return_value = {'log': '1.1.2, 1.1.3, ', 'exitstatus': 1, }
    setup_agent.main(('setupAgent.py', 'agents_host', 'password', 'server_hostname', '1.1.1', '8080'))
    self.assertTrue(tryStopAgent_mock.called)
    self.assertTrue(exit_mock.called)
    self.assertTrue(getOptimalVersion_mock.called)
    exit_mock.reset_mock()
    getOptimalVersion_mock.reset_mock()
    getOptimalVersion_mock.return_value = {'log': '1.1.1', 'exitstatus': 0, }
    isAgentPackageAlreadyInstalled_mock.return_value = False
    is_suse_family_mock.return_value = True
    is_debian_family_mock.return_value = False
    setup_agent.main(('setupAgent.py', 'agents_host', 'password', 'server_hostname', '1.1.1', '8080'))
    self.assertTrue(exit_mock.called)
    self.assertTrue(getOptimalVersion_mock.called)
    self.assertTrue(isAgentPackageAlreadyInstalled_mock.called)
    self.assertTrue(installAgent_mock.called)
    self.assertFalse(is_suse_family_mock.called)
    self.assertFalse(is_debian_family_mock.called)
    exit_mock.reset_mock()
    getOptimalVersion_mock.reset_mock()
    isAgentPackageAlreadyInstalled_mock.reset_mock()
    is_suse_family_mock.reset_mock()
    is_debian_family_mock.reset_mock()
    installAgent_mock.reset_mock()
    getOptimalVersion_mock.return_value = {'log': '', 'exitstatus': 0, }
    setup_agent.main(('setupAgent.py', 'agents_host', 'password', 'server_hostname', '1.1.1', '8080'))
    self.assertTrue(exit_mock.called)
    self.assertTrue(getOptimalVersion_mock.called)
    self.assertFalse(isAgentPackageAlreadyInstalled_mock.called)
    self.assertFalse(is_suse_family_mock.called)
    self.assertFalse(is_debian_family_mock.called)
    exit_mock.reset_mock()
    getOptimalVersion_mock.reset_mock()
    isAgentPackageAlreadyInstalled_mock.reset_mock()
    is_suse_family_mock.reset_mock()
    is_debian_family_mock.reset_mock()
    installAgent_mock.reset_mock()
    is_suse_family_mock.return_value = False
    is_debian_family_mock.return_value = False
    getOptimalVersion_mock.return_value = {'log': '1.1.1', 'exitstatus': 0, }
    setup_agent.main(('setupAgent.py', 'agents_host', 'password', 'server_hostname', '1.1.1', '8080'))
    self.assertTrue(exit_mock.called)
    self.assertTrue(getOptimalVersion_mock.called)
    self.assertTrue(isAgentPackageAlreadyInstalled_mock.called)
    self.assertTrue(installAgent_mock.called)
    self.assertFalse(is_suse_family_mock.called)
    self.assertFalse(is_debian_family_mock.called)
    exit_mock.reset_mock()
    getOptimalVersion_mock.reset_mock()
    isAgentPackageAlreadyInstalled_mock.reset_mock()
    exit_mock.reset_mock()
    getOptimalVersion_mock.reset_mock()
    isAgentPackageAlreadyInstalled_mock.reset_mock()
    is_suse_family_mock.reset_mock()
    is_debian_family_mock.reset_mock()
    installAgent_mock.reset_mock()
    setup_agent.main(('setupAgent.py', 'agents_host', 'password', 'server_hostname', '{ambariVersion}', '8080'))
    self.assertTrue(getOptimalVersion_mock.called)
    self.assertTrue(exit_mock.called)
    exit_mock.reset_mock()
    getOptimalVersion_mock.reset_mock()
    setup_agent.main(('setupAgent.py', 'agents_host', 'password', 'server_hostname', 'null', '8080'))
    self.assertTrue(exit_mock.called)
    self.assertTrue(getOptimalVersion_mock.called)
    exit_mock.reset_mock()
    is_suse_family_mock.return_value = False
    is_debian_family_mock.return_value = False
    setup_agent.main(('setupAgent.py', 'agents_host', 'password', 'server_hostname', 'null', 'null'))
    self.assertTrue(exit_mock.called)
    exit_mock.reset_mock()

    def side_effect(retcode):
        raise Exception(retcode, 'sys.exit')
    exit_mock.side_effect = side_effect
    installAgent_mock.return_value = {'log': 'log', 'exitstatus': 1, }
    try:
        setup_agent.main(('setupAgent.py', 'agents_host', 'password', 'server_hostname', '1.1.1', '8080'))
        self.fail('Should throw exception')
    except Exception:
        pass
    self.assertTrue(exit_mock.called)
    installAgent_mock.reset_mock()
    exit_mock.reset_mock()
    is_suse_family_mock.return_value = True
    is_debian_family_mock.return_value = False
    installAgent_mock.return_value = {'log': 'log', 'exitstatus': 1, }
    try:
        setup_agent.main(('setupAgent.py', 'agents_host', 'password', 'server_hostname', '1.1.1', '8080'))
        self.fail('Should throw exception')
    except Exception:
        pass
    self.assertTrue(exit_mock.called)
    exit_mock.reset_mock()
    is_suse_family_mock.return_value = False
    is_debian_family_mock.return_value = True
    installAgent_mock.return_value = {'log': 'log', 'exitstatus': 1, }
    try:
        setup_agent.main(('setupAgent.py', 'agents_host', 'password', 'server_hostname', '1.1.1', '8080'))
        self.fail('Should throw exception')
    except Exception:
        pass
    self.assertTrue(exit_mock.called)
