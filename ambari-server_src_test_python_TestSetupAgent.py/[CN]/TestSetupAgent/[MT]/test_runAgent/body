@patch.object(setup_agent, 'execOsCommand')
@patch('os.environ')
@patch('subprocess.call')
@patch('time.sleep')
def test_runAgent(self, sleep_mock, call_mock, environ_mock, execOsCommand_mock):
    expected_hostname = 'test.hst'
    passphrase = 'passphrase'
    call_mock.return_value = 0
    execOsCommand_mock.return_value = {'log': 'log', 'exitstatus': 0, }
    ret = setup_agent.runAgent(passphrase, expected_hostname, 'root')
    cmdStr = str(call_mock.call_args_list[0][0])
    self.assertTrue((expected_hostname in cmdStr))
    self.assertEqual(ret, 0)
    self.assertTrue(sleep_mock.called)
    self.assertEqual(execOsCommand_mock.call_count, 1)
    execOsCommand_mock.reset_mock()
    execOsCommand_mock.return_value = None
    ret = setup_agent.runAgent(passphrase, expected_hostname, 'root')
    cmdStr = str(call_mock.call_args_list[0][0])
    self.assertTrue((expected_hostname in cmdStr))
    self.assertEqual(ret, 0)
    self.assertEqual(execOsCommand_mock.call_count, 3)
    execOsCommand_mock.reset_mock()
    call_mock.return_value = 2
    execOsCommand_mock.return_value = {'log': 'log', 'exitstatus': 2, }
    ret = setup_agent.runAgent(passphrase, expected_hostname, 'root')
    cmdStr = str(call_mock.call_args_list[0][0])
    self.assertTrue((expected_hostname in cmdStr))
    self.assertEqual(ret, 2)
    execOsCommand_mock.reset_mock()
