{
  CommandReport commandReport=null;
  Map<String,String> principalPasswordMap=getPrincipalPasswordMap(requestSharedDataContext);
  Map<String,Integer> principalKeyNumberMap=getPrincipalKeyNumberMap(requestSharedDataContext);
  String password=principalPasswordMap.get(evaluatedPrincipal);
  if (password == null) {
    password=operationHandler.createSecurePassword();
    if (operationHandler.principalExists(evaluatedPrincipal)) {
      LOG.warn("Principal already exists, setting new password - {}",evaluatedPrincipal);
      Integer keyNumber=operationHandler.setPrincipalPassword(evaluatedPrincipal,password);
      if (keyNumber != null) {
        principalPasswordMap.put(evaluatedPrincipal,password);
        principalKeyNumberMap.put(evaluatedPrincipal,keyNumber);
        LOG.debug("Successfully set password for principal {}",evaluatedPrincipal);
      }
 else {
        String message=String.format("Failed to set password for principal %s, unknown reason",evaluatedPrincipal);
        LOG.error(message);
        commandReport=createCommandReport(1,HostRoleStatus.FAILED,"{}","",message);
      }
    }
 else {
      LOG.debug("Creating new principal - {}",evaluatedPrincipal);
      Integer keyNumber=operationHandler.createServicePrincipal(evaluatedPrincipal,password);
      if (keyNumber != null) {
        principalPasswordMap.put(evaluatedPrincipal,password);
        principalKeyNumberMap.put(evaluatedPrincipal,keyNumber);
        LOG.debug("Successfully created new principal {}",evaluatedPrincipal);
      }
 else {
        String message=String.format("Failed to create principal %s, unknown reason",evaluatedPrincipal);
        LOG.error(message);
        commandReport=createCommandReport(1,HostRoleStatus.FAILED,"{}","",message);
      }
    }
  }
  return commandReport;
}
