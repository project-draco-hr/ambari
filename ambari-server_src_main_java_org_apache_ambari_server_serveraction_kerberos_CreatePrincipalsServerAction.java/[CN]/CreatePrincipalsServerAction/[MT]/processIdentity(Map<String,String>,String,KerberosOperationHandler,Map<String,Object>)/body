{
  CommandReport commandReport=null;
  Map<String,String> principalPasswordMap=getPrincipalPasswordMap(requestSharedDataContext);
  Map<String,Integer> principalKeyNumberMap=getPrincipalKeyNumberMap(requestSharedDataContext);
  String password=principalPasswordMap.get(evaluatedPrincipal);
  if (password == null) {
    password=operationHandler.createSecurePassword();
    try {
      if (operationHandler.principalExists(evaluatedPrincipal)) {
        LOG.warn("Principal already exists, setting new password - {}",evaluatedPrincipal);
        Integer keyNumber=operationHandler.setPrincipalPassword(evaluatedPrincipal,password);
        if (keyNumber != null) {
          principalPasswordMap.put(evaluatedPrincipal,password);
          principalKeyNumberMap.put(evaluatedPrincipal,keyNumber);
          LOG.debug("Successfully set password for principal {}",evaluatedPrincipal);
        }
 else {
          String message=String.format("Failed to set password for principal %s - unknown reason",evaluatedPrincipal);
          LOG.error(message);
          commandReport=createCommandReport(1,HostRoleStatus.FAILED,"{}","",message);
        }
      }
 else {
        LOG.debug("Creating new principal - {}",evaluatedPrincipal);
        boolean servicePrincipal="service".equalsIgnoreCase(identityRecord.get(KerberosActionDataFile.PRINCIPAL_TYPE));
        Integer keyNumber=operationHandler.createPrincipal(evaluatedPrincipal,password,servicePrincipal);
        if (keyNumber != null) {
          principalPasswordMap.put(evaluatedPrincipal,password);
          principalKeyNumberMap.put(evaluatedPrincipal,keyNumber);
          LOG.debug("Successfully created new principal {}",evaluatedPrincipal);
        }
 else {
          String message=String.format("Failed to create principal %s - unknown reason",evaluatedPrincipal);
          LOG.error(message);
          commandReport=createCommandReport(1,HostRoleStatus.FAILED,"{}","",message);
        }
      }
    }
 catch (    KerberosOperationException e) {
      String message=String.format("Failed to create principal %s - %s",evaluatedPrincipal,e.getMessage());
      LOG.error(message,e);
      commandReport=createCommandReport(1,HostRoleStatus.FAILED,"{}","",message);
    }
  }
  return commandReport;
}
