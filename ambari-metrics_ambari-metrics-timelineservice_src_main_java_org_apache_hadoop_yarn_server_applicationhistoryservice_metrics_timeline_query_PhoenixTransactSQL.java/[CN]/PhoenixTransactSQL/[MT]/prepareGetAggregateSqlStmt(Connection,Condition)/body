{
  validateConditionIsNotEmpty(condition);
  validateRowCountLimit(condition);
  String metricsAggregateTable;
  String queryStmt;
  if (condition.getPrecision() == null) {
    long endTime=condition.getEndTime() == null ? System.currentTimeMillis() : condition.getEndTime();
    long startTime=condition.getStartTime() == null ? 0 : condition.getStartTime();
    condition.setPrecision(Precision.getPrecision(startTime,endTime));
  }
switch (condition.getPrecision()) {
case DAYS:
    metricsAggregateTable=METRICS_CLUSTER_AGGREGATE_DAILY_TABLE_NAME;
  queryStmt=GET_CLUSTER_AGGREGATE_TIME_SQL;
break;
case HOURS:
metricsAggregateTable=METRICS_CLUSTER_AGGREGATE_HOURLY_TABLE_NAME;
queryStmt=GET_CLUSTER_AGGREGATE_TIME_SQL;
break;
case MINUTES:
metricsAggregateTable=METRICS_CLUSTER_AGGREGATE_MINUTE_TABLE_NAME;
queryStmt=GET_CLUSTER_AGGREGATE_TIME_SQL;
break;
default :
metricsAggregateTable=METRICS_CLUSTER_AGGREGATE_TABLE_NAME;
queryStmt=GET_CLUSTER_AGGREGATE_SQL;
}
queryStmt=String.format(queryStmt,getNaiveTimeRangeHint(condition.getStartTime(),NATIVE_TIME_RANGE_DELTA),metricsAggregateTable);
StringBuilder sb=new StringBuilder(queryStmt);
sb.append(" WHERE ");
sb.append(condition.getConditionClause());
sb.append(" ORDER BY METRIC_NAME, SERVER_TIME");
if (condition.getLimit() != null) {
sb.append(" LIMIT ").append(condition.getLimit());
}
String query=sb.toString();
if (LOG.isDebugEnabled()) {
LOG.debug("SQL => " + query + ", condition => "+ condition);
}
PreparedStatement stmt=null;
try {
stmt=connection.prepareStatement(query);
int pos=1;
pos=addMetricNames(condition,pos,stmt);
if (condition instanceof TopNCondition) {
pos=addAppId(condition,pos,stmt);
pos=addInstanceId(condition,pos,stmt);
pos=addStartTime(condition,pos,stmt);
pos=addEndTime(condition,pos,stmt);
}
pos=addAppId(condition,pos,stmt);
pos=addInstanceId(condition,pos,stmt);
pos=addStartTime(condition,pos,stmt);
pos=addEndTime(condition,pos,stmt);
}
 catch (SQLException e) {
if (stmt != null) {
stmt.close();
}
throw e;
}
return stmt;
}
