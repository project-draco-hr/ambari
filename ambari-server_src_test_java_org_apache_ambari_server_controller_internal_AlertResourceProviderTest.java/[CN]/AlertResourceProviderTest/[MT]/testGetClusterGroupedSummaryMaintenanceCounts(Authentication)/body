{
  List<AlertCurrentEntity> currents=getMockEntitiesManyStates();
  for (  AlertCurrentEntity current : currents) {
    if (current.getAlertHistory().getAlertState() == AlertState.WARNING) {
      current.setMaintenanceState(MaintenanceState.ON);
    }
  }
  expect(m_dao.findAll(capture(EasyMock.<AlertCurrentRequest>newCapture()))).andReturn(currents).anyTimes();
  replay(m_dao);
  SecurityContextHolder.getContext().setAuthentication(authentication);
  Request request=PropertyHelper.getReadRequest(AlertResourceProvider.ALERT_ID,AlertResourceProvider.ALERT_DEFINITION_NAME,AlertResourceProvider.ALERT_LABEL,AlertResourceProvider.ALERT_STATE,AlertResourceProvider.ALERT_ORIGINAL_TIMESTAMP);
  Predicate predicate=new PredicateBuilder().property(AlertResourceProvider.ALERT_CLUSTER_NAME).equals("c1").toPredicate();
  AlertResourceProvider provider=createProvider();
  Set<Resource> results=provider.getResources(request,predicate);
  verify(m_dao);
  AlertSummaryGroupedRenderer renderer=new AlertSummaryGroupedRenderer();
  ResultImpl result=new ResultImpl(true);
  TreeNode<Resource> resources=result.getResultTree();
  AtomicInteger alertResourceId=new AtomicInteger(1);
  for (  Resource resource : results) {
    resources.addChild(resource,"Alert " + alertResourceId.getAndIncrement());
  }
  Result groupedSummary=renderer.finalizeResult(result);
  Assert.assertNotNull(groupedSummary);
  TreeNode<Resource> summaryResultTree=groupedSummary.getResultTree();
  TreeNode<Resource> summaryResources=summaryResultTree.getChild("alerts_summary_grouped");
  Resource summaryResource=summaryResources.getObject();
  List<Object> summaryList=(List<Object>)summaryResource.getPropertyValue("alerts_summary_grouped");
  assertEquals(4,summaryList.size());
}
