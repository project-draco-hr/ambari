{
  AtomicLong timestamp=new AtomicLong(System.currentTimeMillis() - 86400000);
  AtomicLong alertId=new AtomicLong(1);
  int ok=10;
  int warning=2;
  int critical=1;
  int unknown=3;
  int total=ok + warning + critical+ unknown;
  List<AlertCurrentEntity> currents=new ArrayList<AlertCurrentEntity>(total);
  for (int i=0; i < total; i++) {
    AlertState state=AlertState.OK;
    String service="HDFS";
    String component="NAMENODE";
    if (i >= ok && i < ok + warning) {
      state=AlertState.WARNING;
      service="YARN";
      component="RESOURCEMANAGER";
    }
 else     if (i >= ok + warning & i < ok + warning + critical) {
      state=AlertState.CRITICAL;
      service="HIVE";
      component="HIVE_SERVER";
    }
 else     if (i >= ok + warning + critical) {
      state=AlertState.UNKNOWN;
      service="FLUME";
      component="FLUME_HANDLER";
    }
    AlertCurrentEntity current=new AlertCurrentEntity();
    current.setAlertId(alertId.getAndIncrement());
    current.setOriginalTimestamp(timestamp.getAndAdd(10000));
    current.setLatestTimestamp(timestamp.getAndAdd(10000));
    AlertHistoryEntity history=new AlertHistoryEntity();
    history.setAlertId(alertId.getAndIncrement());
    history.setAlertInstance(null);
    history.setAlertLabel(ALERT_VALUE_LABEL);
    history.setAlertState(state);
    history.setAlertText(ALERT_VALUE_TEXT);
    history.setAlertTimestamp(current.getOriginalTimestamp());
    history.setClusterId(Long.valueOf(1L));
    history.setComponentName(component);
    history.setHostName(ALERT_VALUE_HOSTNAME);
    history.setServiceName(service);
    AlertDefinitionEntity definition=new AlertDefinitionEntity();
    history.setAlertDefinition(definition);
    current.setAlertHistory(history);
    currents.add(current);
  }
  return currents;
}
