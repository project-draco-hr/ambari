{
  binder.bind(EntityManager.class).toInstance(EasyMock.createMock(EntityManager.class));
  binder.bind(AlertsDAO.class).toInstance(m_dao);
  binder.bind(AmbariManagementController.class).toInstance(createMock(AmbariManagementController.class));
  binder.bind(DBAccessor.class).to(DBAccessorImpl.class);
  Clusters clusters=EasyMock.createNiceMock(Clusters.class);
  Configuration configuration=EasyMock.createNiceMock(Configuration.class);
  binder.bind(Clusters.class).toInstance(clusters);
  binder.bind(Configuration.class).toInstance(configuration);
  expect(configuration.getDatabaseUrl()).andReturn(JDBC_IN_MEMORY_URL).anyTimes();
  expect(configuration.getDatabaseDriver()).andReturn(JDBC_IN_MEMORY_DRIVER).anyTimes();
  expect(configuration.getDatabaseUser()).andReturn("test").anyTimes();
  expect(configuration.getDatabasePassword()).andReturn("test").anyTimes();
  expect(configuration.getAlertEventPublisherPoolSize()).andReturn(Integer.valueOf(Configuration.ALERTS_EXECUTION_SCHEDULER_THREADS.getDefaultValue())).anyTimes();
  expect(configuration.getMasterKeyLocation()).andReturn(new File("/test")).anyTimes();
  expect(configuration.getTemporaryKeyStoreRetentionMinutes()).andReturn(2l).anyTimes();
  expect(configuration.isActivelyPurgeTemporaryKeyStore()).andReturn(true).anyTimes();
  expect(configuration.getDatabaseSchema()).andReturn(Configuration.DEFAULT_DERBY_SCHEMA).anyTimes();
  replay(configuration);
}
