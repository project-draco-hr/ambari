@OsFamilyFuncImpl(os_family=OsFamilyImpl.DEFAULT)
def yarn(name=None, config_dir=None):
    '\n  :param name: Component name, apptimelineserver, nodemanager, resourcemanager, or None (defaults for client)\n  :param config_dir: Which config directory to write configs to, which could be different during rolling upgrade.\n  '
    import params
    if (name == 'resourcemanager'):
        setup_resourcemanager()
    elif (name == 'nodemanager'):
        setup_nodemanager()
    elif (name == 'apptimelineserver'):
        setup_ats()
    elif (name == 'historyserver'):
        setup_historyserver()
    if (config_dir is None):
        config_dir = params.hadoop_conf_dir
    if params.yarn_nodemanager_recovery_dir:
        Directory(InlineTemplate(params.yarn_nodemanager_recovery_dir).get_content(), owner=params.yarn_user, group=params.user_group, create_parents=True, mode=493, cd_access='a')
    Directory([params.yarn_pid_dir_prefix, params.yarn_pid_dir, params.yarn_log_dir], owner=params.yarn_user, group=params.user_group, create_parents=True, cd_access='a')
    Directory([params.mapred_pid_dir_prefix, params.mapred_pid_dir, params.mapred_log_dir_prefix, params.mapred_log_dir], owner=params.mapred_user, group=params.user_group, create_parents=True, cd_access='a')
    Directory([params.yarn_log_dir_prefix], owner=params.yarn_user, group=params.user_group, create_parents=True, ignore_failures=True, cd_access='a')
    XmlConfig('core-site.xml', conf_dir=config_dir, configurations=params.config['configurations']['core-site'], configuration_attributes=params.config['configuration_attributes']['core-site'], owner=params.hdfs_user, group=params.user_group, mode=420)
    XmlConfig('hdfs-site.xml', conf_dir=config_dir, configurations=params.config['configurations']['hdfs-site'], configuration_attributes=params.config['configuration_attributes']['hdfs-site'], owner=params.hdfs_user, group=params.user_group, mode=420)
    XmlConfig('mapred-site.xml', conf_dir=config_dir, configurations=params.config['configurations']['mapred-site'], configuration_attributes=params.config['configuration_attributes']['mapred-site'], owner=params.yarn_user, group=params.user_group, mode=420)
    XmlConfig('yarn-site.xml', conf_dir=config_dir, configurations=params.config['configurations']['yarn-site'], configuration_attributes=params.config['configuration_attributes']['yarn-site'], owner=params.yarn_user, group=params.user_group, mode=420)
    XmlConfig('capacity-scheduler.xml', conf_dir=config_dir, configurations=params.config['configurations']['capacity-scheduler'], configuration_attributes=params.config['configuration_attributes']['capacity-scheduler'], owner=params.yarn_user, group=params.user_group, mode=420)
    File(format('{limits_conf_dir}/yarn.conf'), mode=420, content=Template('yarn.conf.j2'))
    File(format('{limits_conf_dir}/mapreduce.conf'), mode=420, content=Template('mapreduce.conf.j2'))
    File(os.path.join(config_dir, 'yarn-env.sh'), owner=params.yarn_user, group=params.user_group, mode=493, content=InlineTemplate(params.yarn_env_sh_template))
    File(format('{yarn_container_bin}/container-executor'), group=params.yarn_executor_container_group, mode=params.container_executor_mode)
    File(os.path.join(config_dir, 'container-executor.cfg'), group=params.user_group, mode=420, content=Template('container-executor.cfg.j2'))
    Directory(params.cgroups_dir, group=params.user_group, create_parents=True, mode=493, cd_access='a')
    File(os.path.join(config_dir, 'mapred-env.sh'), owner=params.tc_owner, mode=493, content=InlineTemplate(params.mapred_env_sh_template))
    if params.security_enabled:
        File(os.path.join(params.hadoop_bin, 'task-controller'), owner='root', group=params.mapred_tt_group, mode=3112)
        File(os.path.join(config_dir, 'taskcontroller.cfg'), owner=params.tc_owner, mode=params.tc_mode, group=params.mapred_tt_group, content=Template('taskcontroller.cfg.j2'))
    else:
        File(os.path.join(config_dir, 'taskcontroller.cfg'), owner=params.tc_owner, content=Template('taskcontroller.cfg.j2'))
    XmlConfig('mapred-site.xml', conf_dir=config_dir, configurations=params.config['configurations']['mapred-site'], configuration_attributes=params.config['configuration_attributes']['mapred-site'], owner=params.mapred_user, group=params.user_group)
    XmlConfig('capacity-scheduler.xml', conf_dir=config_dir, configurations=params.config['configurations']['capacity-scheduler'], configuration_attributes=params.config['configuration_attributes']['capacity-scheduler'], owner=params.hdfs_user, group=params.user_group)
    if ('ssl-client' in params.config['configurations']):
        XmlConfig('ssl-client.xml', conf_dir=config_dir, configurations=params.config['configurations']['ssl-client'], configuration_attributes=params.config['configuration_attributes']['ssl-client'], owner=params.hdfs_user, group=params.user_group)
        Directory(params.hadoop_conf_secure_dir, create_parents=True, owner='root', group=params.user_group, cd_access='a')
        XmlConfig('ssl-client.xml', conf_dir=params.hadoop_conf_secure_dir, configurations=params.config['configurations']['ssl-client'], configuration_attributes=params.config['configuration_attributes']['ssl-client'], owner=params.hdfs_user, group=params.user_group)
    if ('ssl-server' in params.config['configurations']):
        XmlConfig('ssl-server.xml', conf_dir=config_dir, configurations=params.config['configurations']['ssl-server'], configuration_attributes=params.config['configuration_attributes']['ssl-server'], owner=params.hdfs_user, group=params.user_group)
    if os.path.exists(os.path.join(config_dir, 'fair-scheduler.xml')):
        File(os.path.join(config_dir, 'fair-scheduler.xml'), owner=params.mapred_user, group=params.user_group)
    if os.path.exists(os.path.join(config_dir, 'ssl-client.xml.example')):
        File(os.path.join(config_dir, 'ssl-client.xml.example'), owner=params.mapred_user, group=params.user_group)
    if os.path.exists(os.path.join(config_dir, 'ssl-server.xml.example')):
        File(os.path.join(config_dir, 'ssl-server.xml.example'), owner=params.mapred_user, group=params.user_group)
