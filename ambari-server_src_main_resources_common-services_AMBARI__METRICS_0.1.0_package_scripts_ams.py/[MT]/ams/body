@OsFamilyFuncImpl(os_family=OSConst.WINSRV_FAMILY)
def ams(name=None):
    import params
    if (name == 'collector'):
        if (not check_windows_service_exists(params.ams_collector_win_service_name)):
            Execute(format('cmd /C cd {ams_collector_home_dir} & ambari-metrics-collector.cmd setup'))
        Directory(params.ams_collector_conf_dir, owner=params.ams_user, recursive=True)
        Directory(params.ams_checkpoint_dir, owner=params.ams_user, recursive=True)
        XmlConfig('ams-site.xml', conf_dir=params.ams_collector_conf_dir, configurations=params.config['configurations']['ams-site'], configuration_attributes=params.config['configuration_attributes']['ams-site'], owner=params.ams_user)
        merged_ams_hbase_site = {}
        merged_ams_hbase_site.update(params.config['configurations']['ams-hbase-site'])
        if params.security_enabled:
            merged_ams_hbase_site.update(params.config['configurations']['ams-hbase-security-site'])
        XmlConfig('hbase-site.xml', conf_dir=params.ams_collector_conf_dir, configurations=merged_ams_hbase_site, configuration_attributes=params.config['configuration_attributes']['ams-hbase-site'], owner=params.ams_user)
        if (params.log4j_props != None):
            File(os.path.join(params.ams_collector_conf_dir, 'log4j.properties'), owner=params.ams_user, content=params.log4j_props)
        File(os.path.join(params.ams_collector_conf_dir, 'ams-env.cmd'), owner=params.ams_user, content=InlineTemplate(params.ams_env_sh_template))
        ServiceConfig(params.ams_collector_win_service_name, action='change_user', username=params.ams_user, password=Script.get_password(params.ams_user))
        if (not params.is_local_fs_rootdir):
            XmlConfig('hdfs-site.xml', conf_dir=params.ams_collector_conf_dir, configurations=params.config['configurations']['hdfs-site'], configuration_attributes=params.config['configuration_attributes']['hdfs-site'], owner=params.ams_user, group=params.user_group, mode=420)
            XmlConfig('hdfs-site.xml', conf_dir=params.hbase_conf_dir, configurations=params.config['configurations']['hdfs-site'], configuration_attributes=params.config['configuration_attributes']['hdfs-site'], owner=params.ams_user, group=params.user_group, mode=420)
            XmlConfig('core-site.xml', conf_dir=params.ams_collector_conf_dir, configurations=params.config['configurations']['core-site'], configuration_attributes=params.config['configuration_attributes']['core-site'], owner=params.ams_user, group=params.user_group, mode=420)
            XmlConfig('core-site.xml', conf_dir=params.hbase_conf_dir, configurations=params.config['configurations']['core-site'], configuration_attributes=params.config['configuration_attributes']['core-site'], owner=params.ams_user, group=params.user_group, mode=420)
        else:
            ServiceConfig(params.ams_embedded_hbase_win_service_name, action='change_user', username=params.ams_user, password=Script.get_password(params.ams_user))
            links_pairs = [('%COLLECTOR_HOME%\\hbase\\lib\\ambari-metrics-hadoop-sink-with-common.jar', '%SINK_HOME%\\hadoop-sink\\ambari-metrics-hadoop-sink-with-common-*.jar')]
            for link_pair in links_pairs:
                (link, target) = link_pair
                real_link = os.path.expandvars(link)
                target = compress_backslashes(glob.glob(os.path.expandvars(target))[0])
                if (not os.path.exists(real_link)):
                    Execute('cmd /c mklink "{0}" "{1}"'.format(real_link, target))
        pass
    elif (name == 'monitor'):
        if (not check_windows_service_exists(params.ams_monitor_win_service_name)):
            Execute(format('cmd /C cd {ams_monitor_home_dir} & ambari-metrics-monitor.cmd setup'))
        links_pairs = [('%HADOOP_HOME%\\share\\hadoop\\common\\lib\\ambari-metrics-hadoop-sink-with-common.jar', '%SINK_HOME%\\hadoop-sink\\ambari-metrics-hadoop-sink-with-common-*.jar'), ('%HBASE_HOME%\\lib\\ambari-metrics-hadoop-sink-with-common.jar', '%SINK_HOME%\\hadoop-sink\\ambari-metrics-hadoop-sink-with-common-*.jar')]
        for link_pair in links_pairs:
            (link, target) = link_pair
            real_link = os.path.expandvars(link)
            target = compress_backslashes(glob.glob(os.path.expandvars(target))[0])
            if (not os.path.exists(real_link)):
                Execute('cmd /c mklink "{0}" "{1}"'.format(real_link, target))
        Directory(params.ams_monitor_conf_dir, owner=params.ams_user, recursive=True)
        TemplateConfig(os.path.join(params.ams_monitor_conf_dir, 'metric_monitor.ini'), owner=params.ams_user, template_tag=None)
        TemplateConfig(os.path.join(params.ams_monitor_conf_dir, 'metric_groups.conf'), owner=params.ams_user, template_tag=None)
        ServiceConfig(params.ams_monitor_win_service_name, action='change_user', username=params.ams_user, password=Script.get_password(params.ams_user))
