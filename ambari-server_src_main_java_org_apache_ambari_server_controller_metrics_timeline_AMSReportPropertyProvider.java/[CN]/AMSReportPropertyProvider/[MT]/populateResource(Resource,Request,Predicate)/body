{
  Set<String> propertyIds=getPropertyIds();
  if (propertyIds.isEmpty()) {
    return true;
  }
  metricsPaddingMethod=DEFAULT_PADDING_METHOD;
  Set<String> requestPropertyIds=request.getPropertyIds();
  if (requestPropertyIds != null && !requestPropertyIds.isEmpty()) {
    for (    String propertyId : requestPropertyIds) {
      if (propertyId.startsWith(ZERO_PADDING_PARAM)) {
        String paddingStrategyStr=propertyId.substring(ZERO_PADDING_PARAM.length() + 1);
        metricsPaddingMethod=new MetricsPaddingMethod(MetricsPaddingMethod.PADDING_STRATEGY.valueOf(paddingStrategyStr));
      }
    }
  }
  String clusterName=(String)resource.getPropertyValue(clusterNamePropertyId);
  if (!hostProvider.isCollectorHostLive(clusterName,TIMELINE_METRICS)) {
    if (printSkipPopulateMsgHostCounter.getAndIncrement() == 0) {
      LOG.info("METRICS_COLLECTOR host is not live. Skip populating " + "resources with metrics, next message will be logged after 1000 " + "attempts.");
    }
 else {
      printSkipPopulateMsgHostCounter.compareAndSet(1000,0);
    }
    return true;
  }
  printSkipPopulateMsgHostCompCounter.set(0);
  if (!hostProvider.isCollectorComponentLive(clusterName,TIMELINE_METRICS)) {
    if (printSkipPopulateMsgHostCompCounter.getAndIncrement() == 0) {
      LOG.info("METRICS_COLLECTOR is not live. Skip populating resources" + " with metrics, next message will be logged after 1000 " + "attempts.");
    }
 else {
      printSkipPopulateMsgHostCompCounter.compareAndSet(1000,0);
    }
    return true;
  }
  printSkipPopulateMsgHostCompCounter.set(0);
  setProperties(resource,clusterName,request,getRequestPropertyIds(request,predicate));
  return true;
}
