def parse_properties_file(args):
    conf_file = find_properties_file()
    properties = Properties()
    try:
        properties.load(open(conf_file))
    except Exception as e:
        print ('Could not read ambari config file "%s": %s' % (conf_file, e))
        return (-1)
    args.persistence_type = properties[PERSISTENCE_TYPE_PROPERTY]
    if (not args.persistence_type):
        args.persistence_type = 'local'
    if (args.persistence_type == 'remote'):
        args.database = properties[JDBC_DATABASE_PROPERTY]
        args.database_host = properties[JDBC_HOSTNAME_PROPERTY]
        args.database_port = properties[JDBC_PORT_PROPERTY]
        args.database_name = properties[JDBC_SCHEMA_PROPERTY]
        global DATABASE_INDEX
        try:
            DATABASE_INDEX = DATABASE_NAMES.index(args.database)
        except ValueError:
            pass
    args.database_username = properties[JDBC_USER_NAME_PROPERTY]
    args.database_password_file = properties[JDBC_PASSWORD_FILE_PROPERTY]
    if args.database_password_file:
        args.database_password = open(properties[JDBC_PASSWORD_FILE_PROPERTY]).read()
    return 0
