def parse_properties_file(args):
    properties = get_ambari_properties()
    if (properties == (-1)):
        print_error_msg('Error getting ambari properties')
        return (-1)
    args.server_version_file_path = properties[SERVER_VERSION_FILE_PATH]
    args.persistence_type = properties[PERSISTENCE_TYPE_PROPERTY]
    args.jdbc_url = properties[JDBC_URL_PROPERTY]
    if (not args.persistence_type):
        args.persistence_type = 'local'
    if (args.persistence_type == 'remote'):
        args.database = properties[JDBC_DATABASE_PROPERTY]
        args.database_host = properties[JDBC_HOSTNAME_PROPERTY]
        args.database_port = properties[JDBC_PORT_PROPERTY]
        args.database_name = properties[JDBC_SCHEMA_PROPERTY]
        global DATABASE_INDEX
        try:
            DATABASE_INDEX = DATABASE_NAMES.index(args.database)
        except ValueError:
            pass
    else:
        args.database_name = properties[JDBC_DATABASE_PROPERTY]
    args.database_username = properties[JDBC_USER_NAME_PROPERTY]
    args.database_password_file = properties[JDBC_PASSWORD_PROPERTY]
    if args.database_password_file:
        if (not is_alias_string(args.database_password_file)):
            args.database_password = open(properties[JDBC_PASSWORD_PROPERTY]).read()
        else:
            args.database_password = args.database_password_file
    return 0
