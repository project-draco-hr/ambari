def proceedJDBCProperties(args):
    if (not os.path.isfile(args.jdbc_driver)):
        err = 'File {0} does not exist!'.format(args.jdbc_driver)
        raise FatalException(1, err)
    if (args.jdbc_db not in JDBC_DB_OPTION_VALUES):
        err = 'Unsupported database name {0}. Please see help for more information.'.format(args.jdbc_db)
        raise FatalException(1, err)
    properties = get_ambari_properties()
    if (properties == (-1)):
        err = 'Error getting ambari properties'
        raise FatalException((-1), err)
    conf_file = properties.fileName
    try:
        resources_dir = properties[RESOURCES_DIR_PROPERTY]
    except KeyError as e:
        err = ((('Property ' + str(e)) + ' is not defined at ') + conf_file)
        raise FatalException(1, err)
    symlink_name = (args.jdbc_db + '-jdbc-driver.jar')
    jdbc_symlink = os.path.join(resources_dir, symlink_name)
    (path, jdbc_name) = os.path.split(args.jdbc_driver)
    if os.path.lexists(jdbc_symlink):
        os.remove(jdbc_symlink)
    if (not os.path.isfile(os.path.join(resources_dir, jdbc_name))):
        try:
            shutil.copy(args.jdbc_driver, resources_dir)
        except Exception as e:
            err = 'Can not copy file {0} to {1} due to: {2} . Please check file permissions and free disk space.'.format(args.jdbc_driver, resources_dir, e)
            raise FatalException(1, err)
    os.symlink(os.path.join(resources_dir, jdbc_name), jdbc_symlink)
    print 'JDBC driver was successfully initialized .'
