def upgrade(args):
    print (('Updating properties in ' + AMBARI_PROPERTIES_FILE) + ' ...')
    retcode = update_ambari_properties()
    if (not (retcode == 0)):
        print_error_msg((AMBARI_PROPERTIES_FILE + " file can't be updated. Exiting"))
        sys.exit(retcode)
    parse_properties(args)
    if (args.persistence_type == 'remote'):
        pass
    else:
        print 'Checking PostgreSQL...'
        retcode = check_postgre_up()
        if (not (retcode == 0)):
            print_error_msg('PostgreSQL server not running. Exiting')
            sys.exit(retcode)
        file = args.upgrade_script_file
        print 'Upgrading database...'
        retcode = execute_db_script(args, file)
        if (not (retcode == 0)):
            print_error_msg('Database upgrade script has failed. Exiting.')
            sys.exit(retcode)
        print 'Checking database integrity...'
        check_file = ((file[:(-3)] + 'Check') + file[(-4):])
        retcode = check_db_consistency(args, check_file)
        if (not (retcode == 0)):
            print 'Found inconsistency. Trying to fix...'
            fix_file = ((file[:(-3)] + 'Fix') + file[(-4):])
            retcode = execute_db_script(args, fix_file)
            if (not (retcode == 0)):
                print_error_msg('Database cannot be fixed. Exiting.')
                sys.exit(retcode)
        else:
            print 'Database is consistent.'
    print "Ambari Server 'upgrade' finished successfully"
