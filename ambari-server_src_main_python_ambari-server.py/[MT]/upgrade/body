def upgrade(args):
    if (not is_root()):
        err = 'Ambari-server upgrade should be run with root-level privileges'
        raise FatalException(4, err)
    print (('Updating properties in ' + AMBARI_PROPERTIES_FILE) + ' ...')
    retcode = update_ambari_properties()
    if (not (retcode == 0)):
        err = (AMBARI_PROPERTIES_FILE + " file can't be updated. Exiting")
        raise FatalException(retcode, err)
    try:
        check_database_name_property()
    except FatalException:
        properties = get_ambari_properties()
        if (properties == (-1)):
            print_error_msg('Error getting ambari properties')
            return (-1)
        print_warning_msg(((((JDBC_DATABASE_PROPERTY + " property isn't set in ") + AMBARI_PROPERTIES_FILE) + '. Setting it to default value - ') + DEFAULT_DB_NAME))
        properties.process_pair(JDBC_DATABASE_PROPERTY, DEFAULT_DB_NAME)
        conf_file = find_properties_file()
        try:
            properties.store(open(conf_file, 'w'))
        except Exception as e:
            print_error_msg(('Could not write ambari config file "%s": %s' % (conf_file, e)))
            return (-1)
    parse_properties_file(args)
    server_version = None
    if args.server_version_file_path:
        with open(args.server_version_file_path, 'r') as f:
            server_version = f.read()
    if (not server_version):
        raise FatalException(('Cannot determine server version from version file %s' % args.server_version_file_path))
    retcode = run_schema_upgrade(server_version.strip())
    if (not (retcode == 0)):
        raise FatalException('Scehma upgrade failed.')
    user = read_ambari_user()
    if (user is None):
        warn = ('Can not determine custom ambari user.\n' + SETUP_OR_UPGRADE_MSG)
        print_warning_msg(warn)
    else:
        adjust_directory_permissions(user)
    upgrade_local_repo(args)
