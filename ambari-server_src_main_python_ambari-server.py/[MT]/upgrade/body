def upgrade(args):
    if (not is_root()):
        err = 'Ambari-server upgrade should be run with root-level privileges'
        raise FatalException(4, err)
    print (('Updating properties in ' + AMBARI_PROPERTIES_FILE) + ' ...')
    retcode = update_ambari_properties()
    if (not (retcode == 0)):
        err = (AMBARI_PROPERTIES_FILE + " file can't be updated. Exiting")
        raise FatalException(retcode, err)
    try:
        check_database_name_property()
    except FatalException:
        properties = get_ambari_properties()
        if (properties == (-1)):
            print_error_msg('Error getting ambari properties')
            return (-1)
        print_warning_msg(((((JDBC_DATABASE_PROPERTY + " property isn't set in ") + AMBARI_PROPERTIES_FILE) + '. Setting it to default value - ') + DEFAULT_DB_NAME))
        properties.process_pair(JDBC_DATABASE_PROPERTY, DEFAULT_DB_NAME)
        conf_file = find_properties_file()
        try:
            properties.store(open(conf_file, 'w'))
        except Exception as e:
            print_error_msg(('Could not write ambari config file "%s": %s' % (conf_file, e)))
            return (-1)
    parse_properties_file(args)
    if (args.persistence_type == 'remote'):
        client_desc = ((DATABASE_NAMES[DATABASE_INDEX] + ' ') + DATABASE_CLI_TOOLS_DESC[DATABASE_INDEX])
        client_usage_cmd = DATABASE_CLI_TOOLS_USAGE[DATABASE_INDEX].format(DATABASE_UPGRADE_SCRIPTS[DATABASE_INDEX], args.database_username, BLIND_PASSWORD, args.database_name)
        if (not (args.database == 'oracle')):
            raise FatalException((-20), 'Upgrade for remote database only supports Oracle.')
        if get_db_cli_tool(args):
            (retcode, out, err) = execute_remote_script(args, DATABASE_UPGRADE_SCRIPTS[DATABASE_INDEX])
            if (not (retcode == 0)):
                raise NonFatalException(err)
        else:
            err = (((((('Cannot find ' + client_desc) + ' client in the path to upgrade the Ambari ') + 'Server schema. To upgrade Ambari Server schema ') + 'you must run the following DDL against the database:') + os.linesep) + client_usage_cmd)
            raise NonFatalException(err)
        pass
    else:
        print 'Checking PostgreSQL...'
        retcode = check_postgre_up()
        if (not (retcode == 0)):
            err = 'PostgreSQL server not running. Exiting'
            raise FatalException(retcode, err)
        file = args.upgrade_script_file
        print 'Upgrading database...'
        retcode = execute_db_script(args, file)
        if (not (retcode == 0)):
            err = 'Database upgrade script has failed. Exiting.'
            raise FatalException(retcode, err)
        print 'Checking database integrity...'
        check_file = ((file[:(-3)] + 'Check') + file[(-4):])
        retcode = check_db_consistency(args, check_file)
        if (not (retcode == 0)):
            print 'Found inconsistency. Trying to fix...'
            fix_file = ((file[:(-3)] + 'Fix') + file[(-4):])
            retcode = execute_db_script(args, fix_file)
            if (not (retcode == 0)):
                err = 'Database cannot be fixed. Exiting.'
                raise FatalException(retcode, err)
        else:
            print 'Database is consistent.'
    user = read_ambari_user()
    if (user is None):
        warn = ('Can not determine custom ambari user.\n' + SETUP_OR_UPGRADE_MSG)
        print_warning_msg(warn)
    else:
        adjust_directory_permissions(user)
