def upgrade_stack(args, stack_id):
    if (not is_root()):
        err = 'Ambari-server upgradestack should be run with root-level privileges'
        raise FatalException(4, err)
    check_database_name_property()
    parse_properties_file(args)
    if (args.persistence_type == 'remote'):
        client_desc = ((DATABASE_NAMES[DATABASE_INDEX] + ' ') + DATABASE_CLI_TOOLS_DESC[DATABASE_INDEX])
        client_usage_cmd = DATABASE_CLI_TOOLS_USAGE[DATABASE_INDEX].format(DATABASE_STACK_UPGRADE_SCRIPTS[DATABASE_INDEX], args.database_username, BLIND_PASSWORD, args.database_name)
        if (not (args.database in ['oracle', 'mysql'])):
            raise FatalException((-20), 'Upgrade for remote database only supports Oracle.')
        if get_db_cli_tool(args):
            (retcode, out, err) = remote_stack_upgrade(args, DATABASE_STACK_UPGRADE_SCRIPTS[DATABASE_INDEX], stack_id)
            if (not (retcode == 0)):
                raise NonFatalException(err)
        else:
            command = prepare_stack_upgrade_command(args, stack_id)
            err = (((((('Cannot find ' + client_desc) + ' client in the path to upgrade the Ambari ') + 'Server stack. To upgrade stack of Ambari Server ') + 'you must run the following command:') + os.linesep) + command)
            args.warnings.append(err)
        pass
    else:
        configure_database_username_password(args)
        dbname = args.database_name
        file = args.upgrade_stack_script_file
        (stack_name, stack_version) = stack_id.split(STACK_NAME_VER_SEP)
        command = UPGRADE_STACK_CMD[:]
        command[(-1)] = command[(-1)].format(file, stack_name, stack_version, dbname)
        (retcode, outdata, errdata) = run_os_command(command)
        if (not (retcode == 0)):
            raise FatalException(retcode, errdata)
        if errdata:
            print_warning_msg(errdata)
        return retcode
