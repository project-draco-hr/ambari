def setup_ldap():
    properties = get_ambari_properties()
    (masterKey, isSecure, isPersisted) = setup_master_key(False)
    ldap_property_list_reqd = ['authentication.ldap.primaryUrl', 'authentication.ldap.secondaryUrl', 'authentication.ldap.useSSL', 'authentication.ldap.usernameAttribute', 'authentication.ldap.baseDn', 'authorization.userRoleName', 'authorization.adminRoleName', 'authentication.ldap.bindAnonymously']
    ldap_property_list_opt = ['authentication.ldap.managerDn', LDAP_MGR_PASSWORD_PROPERTY]
    LDAP_PRIMARY_URL_DEFAULT = get_value_from_properties(properties, ldap_property_list_reqd[0])
    LDAP_SECONDARY_URL_DEFAULT = get_value_from_properties(properties, ldap_property_list_reqd[1])
    LDAP_USE_SSL_DEFAULT = get_value_from_properties(properties, ldap_property_list_reqd[2], 'false')
    LDAP_USER_ATT_DEFAULT = get_value_from_properties(properties, ldap_property_list_reqd[3], 'uid')
    LDAP_BASE_DN_DEFAULT = get_value_from_properties(properties, ldap_property_list_reqd[4])
    LDAP_USER_ROLE_DEFAULT = get_value_from_properties(properties, ldap_property_list_reqd[5], 'user')
    LDAP_ADMIN_ROLE_DEFAULT = get_value_from_properties(properties, ldap_property_list_reqd[6], 'admin')
    LDAP_BIND_DEFAULT = get_value_from_properties(properties, ldap_property_list_reqd[7], 'false')
    LDAP_MGR_DN_DEFAULT = get_value_from_properties(properties, ldap_property_list_opt[0])
    ldap_properties_map_reqd = {ldap_property_list_reqd[0]: (LDAP_PRIMARY_URL_DEFAULT, 'Primary URL {0}: '.format(get_prompt_default(LDAP_PRIMARY_URL_DEFAULT))), ldap_property_list_reqd[1]: (LDAP_SECONDARY_URL_DEFAULT, 'Secondary URL {0}: '.format(get_prompt_default(LDAP_SECONDARY_URL_DEFAULT))), ldap_property_list_reqd[2]: (LDAP_USE_SSL_DEFAULT, 'Use SSL [true/false] {0}: '.format(get_prompt_default(LDAP_USE_SSL_DEFAULT))), ldap_property_list_reqd[3]: (LDAP_USER_ATT_DEFAULT, 'User name attribute {0}: '.format(get_prompt_default(LDAP_USER_ATT_DEFAULT))), ldap_property_list_reqd[4]: (LDAP_BASE_DN_DEFAULT, 'Base DN {0}: '.format(get_prompt_default(LDAP_BASE_DN_DEFAULT))), ldap_property_list_reqd[5]: (LDAP_USER_ROLE_DEFAULT, 'User role name {0}: '.format(get_prompt_default(LDAP_USER_ROLE_DEFAULT))), ldap_property_list_reqd[6]: (LDAP_ADMIN_ROLE_DEFAULT, 'Admin role name {0}: '.format(get_prompt_default(LDAP_ADMIN_ROLE_DEFAULT))), ldap_property_list_reqd[7]: (LDAP_BIND_DEFAULT, 'Bind anonymously [true/false] {0}: '.format(get_prompt_default(LDAP_BIND_DEFAULT))), }
    print 'Input LDAP properties. Hit [Enter] to skip property.'
    ldap_property_value_map = {}
    for key in ldap_property_list_reqd:
        input = get_validated_string_input(ldap_properties_map_reqd[key][1], ldap_properties_map_reqd[key][0], '.*', '', False, False)
        if ((input is not None) and (input != '')):
            ldap_property_value_map[key] = input
    bindAnonymously = ldap_property_value_map['authentication.ldap.bindAnonymously']
    if ((bindAnonymously and (bindAnonymously == 'true')) or (bindAnonymously == 'TRUE') or (bindAnonymously == 'True')):
        username = get_validated_string_input('Manager DN {0}:'.format(get_prompt_default(LDAP_MGR_DN_DEFAULT)), LDAP_MGR_DN_DEFAULT, '.*', '', False, False)
        ldap_property_value_map[LDAP_MGR_USERNAME_PROPERTY] = username
        password = configure_ldap_password()
        if isSecure:
            ldap_property_value_map[LDAP_MGR_PASSWORD_PROPERTY] = get_alias_string(LDAP_MGR_PASSWORD_ALIAS)
        else:
            ldap_property_value_map[LDAP_MGR_PASSWORD_PROPERTY] = password
    print ('=' * 20)
    print 'Review Settings'
    print ('=' * 20)
    for property in ldap_property_list_reqd:
        if (property in ldap_property_value_map):
            print ('%s: %s' % (property, ldap_property_value_map[property]))
    for property in ldap_property_list_opt:
        if (property != LDAP_MGR_PASSWORD_PROPERTY):
            print ('%s: %s' % (property, ldap_property_value_map[property]))
        else:
            print ('%s: %s' % (property, '****'))
    save_settings = get_YN_input('Save settings [y/n] (y)? ', True)
    if save_settings:
        if isSecure:
            retCode = save_passwd_for_alias(LDAP_MGR_PASSWORD_ALIAS, password, masterKey)
            if (retCode != 0):
                print 'Saving secure ldap password failed.'
                return retCode
        ldap_property_value_map[CLIENT_SECURITY_KEY] = 'ldap'
        update_properties(ldap_property_value_map)
        print 'Saving...done'
    print "Ambari Server 'LDAP setup' completed successfully. Exiting."
    return 0
