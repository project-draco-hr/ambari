def setup_ldap():
    properties = get_ambari_properties()
    (masterKey, isSecure, isPersisted) = setup_master_key(False)
    LDAP_PRIMARY_URL_DEFAULT = get_value_from_properties(properties, 'authentication.ldap.primaryUrl')
    LDAP_SECONDARY_URL_DEFAULT = get_value_from_properties(properties, 'authentication.ldap.secondaryUrl')
    LDAP_BASE_DN_DEFAULT = get_value_from_properties(properties, 'authentication.ldap.baseDn')
    LDAP_BIND_DEFAULT = get_value_from_properties(properties, 'authentication.ldap.bindAnonymously')
    LDAP_USER_ATT_DEFAULT = get_value_from_properties(properties, 'authentication.ldap.usernameAttribute')
    LDAP_GROUP_BASE_DEFAULT = get_value_from_properties(properties, 'authorization.ldap.groupBase')
    LDAP_GROUP_OBJ_DEFAULT = get_value_from_properties(properties, 'authorization.ldap.groupObjectClass')
    LDAP_GROUP_NAME_DEFAULT = get_value_from_properties(properties, 'authorization.ldap.groupNamingAttr')
    LDAP_GROUP_MEM_DEFAULT = get_value_from_properties(properties, 'authorization.ldap.groupMembershipAttr')
    LDAP_GROUP_MAP_DEFAULT = get_value_from_properties(properties, 'authorization.ldap.adminGroupMappingRules')
    LDAP_GROUP_SEARCH_DEFAULT = get_value_from_properties(properties, 'authorization.ldap.groupSearchFilter')
    LDAP_USER_ROLE_DEFAULT = get_value_from_properties(properties, 'authorization.userRoleName')
    LDAP_ADMIN_ROLE_DEFAULT = get_value_from_properties(properties, 'authorization.adminRoleName')
    LDAP_MGR_DN_DEFAULT = get_value_from_properties(properties, 'authentication.ldap.managerDn')
    ldap_properties_map = {'authentication.ldap.primaryUrl': (LDAP_PRIMARY_URL_DEFAULT, 'Primary URL: '), 'authentication.ldap.secondaryUrl': (LDAP_SECONDARY_URL_DEFAULT, 'Secondary URL: '), 'authentication.ldap.baseDn': (LDAP_BASE_DN_DEFAULT, 'Base DN: '), 'authentication.ldap.bindAnonymously': (LDAP_BIND_DEFAULT, 'Bind anonymously? [true/alse]?: '), 'authentication.ldap.usernameAttribute': (LDAP_USER_ATT_DEFAULT, 'User name attribute uid): '), 'authorization.ldap.groupBase': (LDAP_GROUP_BASE_DEFAULT, 'Group base ou=groups,dc=ambari): '), 'authorization.ldap.groupObjectClass': (LDAP_GROUP_OBJ_DEFAULT, 'Group object class group): '), 'authorization.ldap.groupNamingAttr': (LDAP_GROUP_NAME_DEFAULT, 'Group name attribute cn): '), 'authorization.ldap.groupMembershipAttr': (LDAP_GROUP_MEM_DEFAULT, 'Group membership ttribute (member): '), 'authorization.ldap.adminGroupMappingRules': (LDAP_GROUP_MAP_DEFAULT, 'Admin group apping rules: '), 'authorization.ldap.groupSearchFilter': (LDAP_GROUP_SEARCH_DEFAULT, 'Group search filter: '), 'authorization.userRoleName': (LDAP_USER_ROLE_DEFAULT, 'User role name (user): '), 'authorization.adminRoleName': (LDAP_ADMIN_ROLE_DEFAULT, 'Admin role name (admin): '), 'authentication.ldap.managerDn': (LDAP_MGR_DN_DEFAULT, 'Manager DN: '), }
    print 'Input LDAP properties. Hit [Enter] to skip property.'
    ldap_property_value_map = {}
    for key in ldap_properties_map.keys():
        input = get_validated_string_input(ldap_properties_map[key][1], ldap_properties_map[key][0], '.*', '', False)
        if ((input is not None) and (input != '')):
            ldap_property_value_map[key] = input
    ldap_property_value_map[LDAP_MGR_PASSWORD_PROPERTY] = configure_ldap_password(isSecure, masterKey)
    update_properties(ldap_property_value_map)
    return 0
