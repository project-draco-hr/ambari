def sync_ldap():
    if (not is_root()):
        err = 'Ambari-server sync-ldap should be run with root-level privileges'
        raise FatalException(4, err)
    (server_status, pid) = is_server_runing()
    if (not server_status):
        err = 'Ambari Server is not running.'
        raise FatalException(1, err)
    ldap_configured = get_ambari_properties().get_property(IS_LDAP_CONFIGURED)
    if (ldap_configured != 'true'):
        err = "LDAP is not configured. Run 'ambari-server setup-ldap' first."
        raise FatalException(1, err)
    admin_login = get_validated_string_input(prompt='Enter login: ', default=None, pattern=None, description=None, is_pass=False, allowEmpty=False)
    admin_password = get_validated_string_input(prompt='Enter password: ', default=None, pattern=None, description=None, is_pass=True, allowEmpty=False)
    url = '{0}://{1}:{2!s}{3}'.format(SERVER_API_PROTOCOL, SERVER_API_HOST, SERVER_API_PORT, SERVER_API_LDAP_URL)
    admin_auth = base64.encodestring(('%s:%s' % (admin_login, admin_password))).replace('\n', '')
    request = urllib2.Request(url)
    request.add_header('Authorization', ('Basic %s' % admin_auth))
    request.add_header('X-Requested-By', 'ambari')
    body = [{'LDAP': {'synced_groups': '*', 'synced_users': '*', }, }]
    request.add_data(json.dumps(body))
    request.get_method = (lambda : 'PUT')
    progress_message_thread = None
    request_in_progress = True

    def print_progress(message):
        sys.stdout.write(message)
        sys.stdout.flush()
        while request_in_progress:
            sys.stdout.write('.')
            sys.stdout.flush()
            time.sleep(1)
        sys.stdout.write('\n')
        sys.stdout.flush()
    try:
        try:
            progress_message_thread = Thread(target=print_progress, args=('Syncing Ambari Database for permissions for the LDAP Users and Groups..',))
            progress_message_thread.start()
            response = urllib2.urlopen(request)
        except Exception as e:
            err = ('Sync failed. Error details: %s' % e)
            raise FatalException(1, err)
    finally:
        request_in_progress = False
        if (progress_message_thread is not None):
            progress_message_thread.join()
    response_status_code = response.getcode()
    if (response_status_code != 200):
        err = ('Error during syncing. Http status code - ' + response_status_code)
        raise FatalException(1, err)
    response_body = json.loads(response.read())
    sync_info = response_body['resources'][0]['Sync']
    if (sync_info['status'] != 'successful'):
        raise FatalException(1, sync_info['summary'])
    else:
        print 'Synced:'
        for (principal_type, summary) in sync_info['summary'].iteritems():
            print '    {0}:'.format(principal_type)
            for (action, amount) in summary.iteritems():
                print '        - {0} = {1!s}'.format(action, amount)
        print 'Finished LDAP Sync.'
