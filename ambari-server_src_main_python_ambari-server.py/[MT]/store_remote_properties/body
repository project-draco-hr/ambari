def store_remote_properties(args):
    conf_file = search_file(AMBARI_PROPERTIES_FILE, get_conf_dir())
    properties = Properties()
    try:
        properties.load(open(conf_file))
    except Exception as e:
        print ('Could not read ambari config file "%s": %s' % (conf_file, e))
        return (-1)
    properties.process_pair(PERSISTENCE_TYPE_PROPERTY, 'remote')
    properties.process_pair(JDBC_DATABASE_PROPERTY, args.database)
    properties.process_pair(JDBC_HOSTNAME_PROPERTY, args.database_host)
    properties.process_pair(JDBC_PORT_PROPERTY, args.database_port)
    properties.process_pair(JDBC_SCHEMA_PROPERTY, args.database_name)
    properties.process_pair(JDBC_DRIVER_PROPERTY, DATABASE_DRIVER_NAMES[DATABASE_INDEX])
    properties.process_pair(JDBC_URL_PROPERTY, DATABASE_CONNECTION_STRINGS[DATABASE_INDEX].format(args.database_host, args.database_port, args.database_name))
    properties.process_pair(JDBC_USER_NAME_PROPERTY, args.database_username)
    properties.process_pair(JDBC_PASSWORD_FILE_PROPERTY, store_password_file(args.database_password, JDBC_PASSWORD_FILENAME))
    properties.process_pair(JDBC_RCA_DRIVER_PROPERTY, DATABASE_DRIVER_NAMES[DATABASE_INDEX])
    properties.process_pair(JDBC_RCA_URL_PROPERTY, DATABASE_CONNECTION_STRINGS[DATABASE_INDEX].format(args.database_host, args.database_port, args.database_name))
    properties.process_pair(JDBC_RCA_USER_NAME_PROPERTY, args.database_username)
    properties.process_pair(JDBC_RCA_PASSWORD_FILE_PROPERTY, store_password_file(args.database_password, JDBC_PASSWORD_FILENAME))
    try:
        properties.store(open(conf_file, 'w'))
    except Exception as e:
        print ('Could not write ambari config file "%s": %s' % (conf_file, e))
        return (-1)
    return 0
