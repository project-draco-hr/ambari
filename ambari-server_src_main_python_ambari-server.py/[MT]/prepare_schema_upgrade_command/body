def prepare_schema_upgrade_command(args):
    db_index = DATABASE_NAMES.index(args.database)
    tool = DATABASE_CLI_TOOLS_DESC[db_index]
    scriptPath = DATABASE_UPGRADE_SCRIPTS[db_index]
    if (args.database == 'postgres'):
        os.environ['PGPASSWORD'] = args.database_password
        command = '{0} {1}'.format(tool, POSTGRES_EXEC_ARGS.format(args.database_host, args.database_port, args.database_name, args.database_username, scriptPath)).strip()
        return command
    elif (args.database == 'oracle'):
        sid_or_sname = 'sid'
        if ((hasattr(args, 'sid_or_sname') and (args.sid_or_sname == 'sname')) or (hasattr(args, 'jdbc_url') and args.jdbc_url and re.match(ORACLE_SNAME_PATTERN, args.jdbc_url))):
            print_info_msg('using SERVICE_NAME instead of SID for Oracle')
            sid_or_sname = 'service_name'
        command = '{0} {1}'.format(tool, ORACLE_EXEC_ARGS.format(args.database_username, args.database_password, args.database_host, args.database_port, args.database_name, scriptPath, sid_or_sname)).strip()
        return command
    elif (args.database == 'mysql'):
        MYSQL_EXEC_ARGS = (MYSQL_EXEC_ARGS_WO_USER_VARS if (MYSQL_INIT_SCRIPT == scriptPath) else MYSQL_EXEC_ARGS_WITH_USER_VARS)
        command = '{0} {1}'.format(tool, MYSQL_EXEC_ARGS.format(args.database_host, args.database_port, args.database_username, args.database_password, args.database_name, scriptPath)).strip()
        return command
    pass
