def execute_remote_script(args, scriptPath):
    print_warning_msg('Deprecated method called.')
    tool = get_db_cli_tool(args)
    if (not tool):
        if VERBOSE:
            print_warning_msg('{0} not found'.format(DATABASE_CLI_TOOLS[DATABASE_INDEX]))
        return ((-1), "Client wasn't found", "Client wasn't found")
    if (args.dbms == 'postgres'):
        os.environ['PGPASSWORD'] = args.database_password
        (retcode, out, err) = run_in_shell('{0} {1}'.format(tool, POSTGRES_EXEC_ARGS.format(args.database_host, args.database_port, args.database_name, args.database_username, scriptPath)))
        return (retcode, out, err)
    elif (args.dbms == 'oracle'):
        sid_or_sname = 'sid'
        if ((hasattr(args, 'sid_or_sname') and (args.sid_or_sname == 'sname')) or (hasattr(args, 'jdbc_url') and args.jdbc_url and re.match(ORACLE_SNAME_PATTERN, args.jdbc_url))):
            print_info_msg('using SERVICE_NAME instead of SID for Oracle')
            sid_or_sname = 'service_name'
        (retcode, out, err) = run_in_shell('{0} {1}'.format(tool, ORACLE_EXEC_ARGS.format(args.database_username, args.database_password, args.database_host, args.database_port, args.database_name, scriptPath, sid_or_sname)))
        return (retcode, out, err)
    elif (args.dbms == 'mysql'):
        MYSQL_EXEC_ARGS = (MYSQL_EXEC_ARGS_WO_USER_VARS if (MYSQL_INIT_SCRIPT == scriptPath) else MYSQL_EXEC_ARGS_WITH_USER_VARS)
        (retcode, out, err) = run_in_shell('{0} {1}'.format(tool, MYSQL_EXEC_ARGS.format(args.database_host, args.database_port, args.database_username, args.database_password, args.database_name, scriptPath)))
        return (retcode, out, err)
    return ((-2), 'Wrong database', 'Wrong database')
