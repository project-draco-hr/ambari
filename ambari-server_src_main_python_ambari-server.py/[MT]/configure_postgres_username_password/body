def configure_postgres_username_password(args):
    conf_file = search_file(AMBARI_PROPERTIES_FILE, get_conf_dir())
    properties = Properties()
    try:
        properties.load(open(conf_file))
    except Exception as e:
        print ('Could not read "%s": %s' % (conf_file, e))
        return (-1)
    username = properties[JDBC_USER_NAME_PROPERTY]
    passFilePath = properties[JDBC_PASSWORD_FILE_PROPERTY]
    if (username and passFilePath):
        print_info_msg('Database username + password already configured - skipping')
        args.postgres_username = username
        args.postgres_password = open(passFilePath).read()
        return 1
    usernameDefault = 'ambari-server'
    usernamePrompt = (('Username [' + usernameDefault) + ']: ')
    usernamePattern = '^[a-zA-Z_][a-zA-Z0-9_\\-]*$'
    usernameDescr = 'Invalid characters in username. Start with _ or alpha followed by alphanumeric or _ or - characters'
    username = usernameDefault
    password = PG_DEFAULT_PASSWORD
    ok = get_YN_input('Enter advanced database configuration [y/n] (n)? ', False)
    if ok:
        username = get_validated_string_input(usernamePrompt, usernameDefault, usernamePattern, usernameDescr, False)
        print ('Database username set to: ' + username)
        password = configure_postgres_password()
    passFilePath = get_pass_file_path(conf_file)
    print_info_msg(('Database username set to: ' + username))
    print_info_msg(('Database password set to: ' + password))
    with open(passFilePath, 'w+') as passFile:
        passFile.write(password)
        pass
    os.chmod(passFilePath, (stat.S_IREAD | stat.S_IWRITE))
    write_property(JDBC_USER_NAME_PROPERTY, username)
    write_property(JDBC_PASSWORD_FILE_PROPERTY, passFilePath)
    args.postgres_username = username
    args.postgres_password = password
