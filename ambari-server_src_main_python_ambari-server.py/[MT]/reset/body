def reset(args):
    if (not is_root()):
        err = 'Ambari-server reset should be run with root-level privileges'
        raise FatalException(4, err)
    choice = get_YN_input('**** WARNING **** You are about to reset and clear the Ambari Server database. This will remove all cluster host and configuration information from the database. You will be required to re-configure the Ambari server and re-run the cluster wizard. \nAre you SURE you want to perform the reset [yes/no]? ', True)
    okToRun = choice
    if (not okToRun):
        err = "Ambari Server 'reset' cancelled"
        raise FatalException(1, err)
    okToRun = get_YN_input('Confirm server reset [yes/no]? ', True)
    if (not okToRun):
        err = "Ambari Server 'reset' cancelled"
        raise FatalException(1, err)
    print 'Resetting the Server database...'
    parse_properties_file(args)
    if (args.persistence_type == 'remote'):
        client_desc = ((DATABASE_NAMES[DATABASE_INDEX] + ' ') + DATABASE_CLI_TOOLS_DESC[DATABASE_INDEX])
        client_usage_cmd_drop = DATABASE_CLI_TOOLS_USAGE[DATABASE_INDEX].format(DATABASE_DROP_SCRIPTS[DATABASE_INDEX], args.database_username, BLIND_PASSWORD, args.database_name)
        client_usage_cmd_init = DATABASE_CLI_TOOLS_USAGE[DATABASE_INDEX].format(DATABASE_INIT_SCRIPTS[DATABASE_INDEX], args.database_username, BLIND_PASSWORD, args.database_name)
        if (get_db_cli_tool(args) != (-1)):
            (retcode, out, err) = execute_remote_script(args, DATABASE_DROP_SCRIPTS[DATABASE_INDEX])
            if (not (retcode == 0)):
                if (retcode == (-1)):
                    print_warning_msg(((((((((((((('Cannot find ' + client_desc) + ' client in the path to reset the Ambari Server ') + 'schema. To reset Ambari Server schema ') + 'you must run the following DDL against the database ') + 'to drop the schema:') + os.linesep) + client_usage_cmd_drop) + os.linesep) + 'Then you must run the following DDL ') + 'against the database to create the schema: ') + os.linesep) + client_usage_cmd_init) + os.linesep))
                raise NonFatalException(err)
            (retcode, out, err) = execute_remote_script(args, DATABASE_INIT_SCRIPTS[DATABASE_INDEX])
            if (not (retcode == 0)):
                if (retcode == (-1)):
                    print_warning_msg(((((((((((((('Cannot find ' + client_desc) + ' client in the path to ') + 'reset the Ambari Server schema. To reset Ambari Server schema ') + 'you must run the following DDL against the database to ') + 'drop the schema:') + os.linesep) + client_usage_cmd_drop) + os.linesep) + 'Then you must run the following DDL ') + 'against the database to create the schema: ') + os.linesep) + client_usage_cmd_init) + os.linesep))
                raise NonFatalException(err)
        else:
            err = (((((((((((('Cannot find ' + client_desc) + ' client in the path to reset the Ambari ') + 'Server schema. To reset Ambari Server schema ') + 'you must run the following DDL against the database to drop the schema:') + os.linesep) + client_usage_cmd_drop) + os.linesep) + 'Then you must run the following DDL against the database to create the ') + 'schema: ') + os.linesep) + client_usage_cmd_init) + os.linesep)
            raise NonFatalException(err)
    else:
        dbname = args.database_name
        filename = args.drop_script_file
        username = args.database_username
        password = args.database_password
        command = SETUP_DB_CMD[:]
        command[(-1)] = command[(-1)].format(filename, username, password)
        (retcode, outdata, errdata) = run_os_command(command)
        if (not (retcode == 0)):
            raise FatalException(1, errdata)
        print_info_msg('About to run database setup')
        setup_db(args)
