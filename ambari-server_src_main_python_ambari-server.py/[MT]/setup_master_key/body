def setup_master_key():
    if (not is_root()):
        err = 'Ambari-server setup should be run with root-level privileges'
        raise FatalException(4, err)
    properties = get_ambari_properties()
    if (properties == (-1)):
        raise FatalException(1, 'Failed to read properties file.')
    keyLocation = get_master_key_location(properties)
    masterKeyFile = search_file(SECURITY_MASTER_KEY_FILENAME, keyLocation)
    isPersisted = (True if masterKeyFile else False)
    isSecure = properties.get_property(SECURITY_IS_ENCRYPTION_ENABLED)
    isSecure = (True if (isSecure and (isSecure.lower() == 'true')) else False)
    db_password = properties.get_property(JDBC_PASSWORD_PROPERTY)
    if (db_password and (not is_alias_string(db_password)) and os.path.isfile(db_password)):
        with open(db_password, 'r') as file:
            db_password = file.read()
    ldap_password = properties.get_property(LDAP_MGR_PASSWORD_PROPERTY)
    resetKey = False
    masterKey = None
    if isSecure:
        resetKey = get_YN_input('Password encryption is enabled. Do you want to reset master key? [y/n] (n): ', False)
    if (isSecure and (not isPersisted) and (not resetKey)):
        masterKey = get_validated_string_input('Please provide master key for the credential store: ', '', '.*', '', True, False)
    pass
    if resetKey:
        if (not isPersisted):
            masterKey = get_validated_string_input('Please provide original master key for the credential store. Press [Enter] to skip: ', '', '.*', '', True, True)
            if (not masterKey):
                err = '{0} is already encrypted. Please call {1} to store unencrypted password and call "encrypt-passwords" again.'
                if (db_password and is_alias_string(db_password)):
                    print err.format('Database password', (('"' + SETUP_ACTION) + '"'))
                    return 1
                if (ldap_password and is_alias_string(ldap_password)):
                    print err.format('LDAP manager password', (('"' + LDAP_SETUP_ACTION) + '"'))
                    return 1
            pass
        pass
    pass
    if (db_password and is_alias_string(db_password)):
        db_password = read_passwd_for_alias(JDBC_RCA_PASSWORD_ALIAS, masterKey)
    if (ldap_password and is_alias_string(ldap_password)):
        ldap_password = read_passwd_for_alias(LDAP_MGR_PASSWORD_ALIAS, masterKey)
    if (resetKey or (not isSecure)):
        masterKey = read_master_key()
        persist = get_YN_input((('Do you want to persist master key. If you choose not to persist, you need to provide the master key while starting the ambari server as an env variable named ' + SECURITY_KEY_ENV_VAR_NAME) + ' or the start will prompt for the master key. Persist [y/n] (y)? '), True)
        if persist:
            save_master_key(masterKey, ((keyLocation + os.sep) + SECURITY_MASTER_KEY_FILENAME), persist)
        elif ((not persist) and masterKeyFile):
            try:
                os.remove(masterKeyFile)
                print_info_msg(('Deleting master key file at location: ' + str(masterKeyFile)))
            except Exception as e:
                print ('Could not remove master key file. %s' % e)
        pass
    pass
    if (resetKey and masterKey):
        store_file = get_credential_store_location(properties)
        if os.path.exists(store_file):
            os.remove(store_file)
    pass
    propertyMap = {SECURITY_IS_ENCRYPTION_ENABLED: 'true', }
    if (db_password and (not is_alias_string(db_password))):
        retCode = save_passwd_for_alias(JDBC_RCA_PASSWORD_ALIAS, db_password, masterKey)
        propertyMap[JDBC_PASSWORD_PROPERTY] = get_alias_string(JDBC_RCA_PASSWORD_ALIAS)
        if (retCode != 0):
            print 'Failed to save secure database password.'
        else:
            remove_password_file(JDBC_PASSWORD_FILENAME)
    pass
    if (ldap_password and (not is_alias_string(ldap_password))):
        retCode = save_passwd_for_alias(LDAP_MGR_PASSWORD_ALIAS, ldap_password, masterKey)
        propertyMap[LDAP_MGR_PASSWORD_PROPERTY] = get_alias_string(LDAP_MGR_PASSWORD_ALIAS)
        if (retCode != 0):
            print 'Failed to save secure LDAP password.'
    pass
    update_properties(propertyMap)
    ambari_user = read_ambari_user()
    if ambari_user:
        adjust_directory_permissions(ambari_user)
    return 0
