def download_jce_policy(properties, accpeted_bcl):
    try:
        jce_url = properties[JCE_URL_PROPERTY]
        resources_dir = properties[RESOURCES_DIR_PROPERTY]
    except KeyError as e:
        err = (('Property ' + str(e)) + ' is not defined in properties file')
        raise FatalException(1, err)
    dest_file = ((resources_dir + os.sep) + JCE_POLICY_FILENAME)
    if (not os.path.exists(dest_file)):
        print ((('Downloading JCE Policy archive from ' + jce_url) + ' to ') + dest_file)
        jce_download_fail_msg = ' Failed to download JCE Policy archive : {0}. Please check that JCE Policy archive is available at {1} . Also you may install JCE Policy archive manually using --jce-policy command line argument.'.format('{0}', jce_url)
        try:
            size_command = JDK_DOWNLOAD_SIZE_CMD.format(jce_url)
            (retcode, out, err) = run_os_command(size_command)
            if (out.find('Content-Length') == (-1)):
                err = jce_download_fail_msg.format("Request header doesn't contain Content-Length")
                raise FatalException(1, err)
            start_with = int(((out.find('Content-Length') + len('Content-Length')) + 2))
            end_with = out.find('\r\n', start_with)
            src_size = int(out[start_with:end_with])
            print_info_msg((('JCE zip distribution size is ' + str(src_size)) + ' bytes'))
            file_exists = os.path.isfile(dest_file)
            file_size = (-1)
            if file_exists:
                file_size = os.stat(dest_file).st_size
            if (file_exists and (file_size == src_size)):
                print_info_msg('File already exists')
            else:
                jce_download_cmd = JCE_DOWNLOAD_CMD.format(dest_file, jce_url)
                print_info_msg(('JCE download cmd: ' + jce_download_cmd))
                if accpeted_bcl:
                    (retcode, out, err) = run_os_command(jce_download_cmd)
                    if (retcode == 0):
                        print ('Successfully downloaded JCE Policy archive to ' + dest_file)
                    else:
                        raise FatalException(1, err)
                else:
                    ok = get_YN_input('To download the JCE Policy files you must accept the license terms found at http://www.oracle.com/technetwork/java/javase/terms/license/index.htmlNot accepting will result in errors when configuring Kerberos security. \nDo you accept the Oracle Binary Code License Agreement [y/n] (y)? ', True)
                    if ok:
                        (retcode, out, err) = run_os_command(jce_download_cmd)
                        if (retcode == 0):
                            print ('Successfully downloaded JCE Policy archive to ' + dest_file)
                    else:
                        raise FatalException(1, None)
        except FatalException:
            raise
        except Exception as e:
            err = ('Failed to download JCE Policy archive: ' + str(e))
            raise FatalException(1, err)
        downloaded_size = os.stat(dest_file).st_size
        if ((downloaded_size != src_size) or (downloaded_size < JCE_MIN_FILESIZE)):
            err = (('Size of downloaded JCE Policy archive is ' + str(downloaded_size)) + ' bytes, it is probably                     damaged or incomplete')
            raise FatalException(1, err)
    else:
        print ('JCE Policy archive already exists, using ' + dest_file)
