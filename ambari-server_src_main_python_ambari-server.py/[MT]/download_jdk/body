def download_jdk(args):
    global JDK_INDEX
    properties = get_ambari_properties()
    if (properties == (-1)):
        err = 'Error getting ambari properties'
        raise FatalException((-1), err)
    conf_file = properties.fileName
    ok = False
    jcePolicyWarn = 'JCE Policy files are required for configuring Kerberos security. If you plan to use Kerberos,please make sure JCE Unlimited Strength Jurisdiction Policy Files are valid on all hosts.'
    if args.java_home:
        if ((not os.path.exists(args.java_home)) or (not os.path.isfile(os.path.join(args.java_home, 'bin', 'java')))):
            err = (('Path to java home ' + args.java_home) + ' or java binary file does not exists')
            raise FatalException(1, err)
        print_warning_msg((('JAVA_HOME ' + args.java_home) + ' must be valid on ALL hosts'))
        print_warning_msg(jcePolicyWarn)
        write_property(JAVA_HOME_PROPERTY, args.java_home)
        remove_property(JDK_NAME_PROPERTY)
        remove_property(JCE_NAME_PROPERTY)
        return 0
    else:
        if get_JAVA_HOME():
            change_jdk = get_YN_input('Do you want to change Oracle JDK [y/n] (n)? ', False)
            if (not change_jdk):
                return 0
        try:
            resources_dir = properties[RESOURCES_DIR_PROPERTY]
        except KeyError as e:
            err = ((('Property ' + str(e)) + ' is not defined at ') + conf_file)
            raise FatalException(1, err)
        jdk_num = str((JDK_INDEX + 1))
        jdk_num = get_validated_string_input((('[1] - Oracle JDK 1.7\n[2] - Oracle JDK 1.6\n[3] - Custom JDK\n==============================================================================\nEnter choice (' + jdk_num) + '): '), jdk_num, '^[123]$', 'Invalid number.', False)
        if (jdk_num == CUSTOM_JDK_NUMBER):
            print_warning_msg('JDK must be installed on all hosts and JAVA_HOME must be valid on all hosts.')
            print_warning_msg(jcePolicyWarn)
            args.java_home = get_validated_string_input('Path to JAVA_HOME: ', None, None, None, False, False)
            if ((not os.path.exists(args.java_home)) or (not os.path.isfile(os.path.join(args.java_home, 'bin', 'java')))):
                err = 'Java home path or java binary file is unavailable. Please put correct path to java home.'
                raise FatalException(1, err)
            print 'Validating JDK on Ambari Server...done.'
            write_property(JAVA_HOME_PROPERTY, args.java_home)
            remove_property(JDK_NAME_PROPERTY)
            remove_property(JCE_NAME_PROPERTY)
            return 0
        JDK_INDEX = (int(jdk_num) - 1)
        JDK_FILENAME = JDK_NAMES[JDK_INDEX]
        JDK_URL_PROPERTY = JDK_URL_PROPERTIES[JDK_INDEX]
        try:
            jdk_url = properties[JDK_URL_PROPERTY]
        except KeyError as e:
            err = ((('Property ' + str(e)) + ' is not defined at ') + conf_file)
            raise FatalException(1, err)
        dest_file = ((resources_dir + os.sep) + JDK_FILENAME)
        if os.path.exists(dest_file):
            print ('JDK already exists, using ' + dest_file)
        else:
            ok = get_YN_input('To download the Oracle JDK you must accept the license terms found at http://www.oracle.com/technetwork/java/javase/terms/license/index.html and not accepting will cancel the Ambari Server setup.\nDo you accept the Oracle Binary Code License Agreement [y/n] (y)? ', True)
            if (not ok):
                print 'Exiting...'
                sys.exit(1)
            print ((('Downloading JDK from ' + jdk_url) + ' to ') + dest_file)
            jdk_download_fail_msg = ' Failed to download JDK: {0}. Please check that Oracle JDK is available at {1}. Also you may specify JDK file location in local filesystem using --jdk-location command line argument.'.format('{0}', jdk_url)
            try:
                size_command = JDK_DOWNLOAD_SIZE_CMD.format(jdk_url)
                (retcode, out, err) = run_os_command(size_command)
                if (out.find('Content-Length') == (-1)):
                    err = jdk_download_fail_msg.format("Request header doesn't contain Content-Length")
                    raise FatalException(1, err)
                start_with = int(((out.find('Content-Length') + len('Content-Length')) + 2))
                end_with = out.find('\r\n', start_with)
                src_size = int(out[start_with:end_with])
                print (('JDK distribution size is ' + str(src_size)) + ' bytes')
                file_exists = os.path.isfile(dest_file)
                file_size = (-1)
                if file_exists:
                    file_size = os.stat(dest_file).st_size
                if (file_exists and (file_size == src_size)):
                    print_info_msg('File already exists')
                else:
                    track_jdk(JDK_FILENAME, jdk_url, dest_file)
                    print ('Successfully downloaded JDK distribution to ' + dest_file)
            except FatalException:
                raise
            except Exception as e:
                err = jdk_download_fail_msg.format(str(e))
                raise FatalException(1, err)
            downloaded_size = os.stat(dest_file).st_size
            if ((downloaded_size != src_size) or (downloaded_size < JDK_MIN_FILESIZE)):
                err = (('Size of downloaded JDK distribution file is ' + str(downloaded_size)) + ' bytes, it is probably                       damaged or incomplete')
                raise FatalException(1, err)
        try:
            out = install_jdk(dest_file)
            jdk_version = re.search(JDK_VERSION_REs[JDK_INDEX], out).group(1)
            write_property(JDK_NAME_PROPERTY, JDK_FILENAME)
        except Exception as e:
            print ('Installation of JDK has failed: %s\n' % e.message)
            file_exists = os.path.isfile(dest_file)
            if file_exists:
                ok = get_YN_input((('JDK found at ' + dest_file) + '. Would you like to re-download the JDK [y/n] (y)? '), True)
                if (not ok):
                    err = (('Unable to install JDK. Please remove JDK file found at ' + dest_file) + ' and re-run Ambari Server setup')
                    raise FatalException(1, err)
                else:
                    track_jdk(JDK_FILENAME, jdk_url, dest_file)
                    print ('Successfully re-downloaded JDK distribution to ' + dest_file)
                    try:
                        out = install_jdk(dest_file)
                        jdk_version = re.search(JDK_VERSION_REs[JDK_INDEX], out).group(1)
                        write_property(JDK_NAME_PROPERTY, JDK_FILENAME)
                    except Exception as e:
                        print ('Installation of JDK was failed: %s\n' % e.message)
                        err = (('Unable to install JDK. Please remove JDK, file found at ' + dest_file) + ' and re-run Ambari Server setup')
                        raise FatalException(1, err)
            else:
                err = (('Unable to install JDK. File ' + dest_file) + ' does not exist, please re-run Ambari Server setup')
                raise FatalException(1, err)
        print 'Successfully installed JDK to {0}/{1}'.format(JDK_INSTALL_DIR, jdk_version)
        write_property(JAVA_HOME_PROPERTY, '{0}/{1}'.format(JDK_INSTALL_DIR, jdk_version))
    try:
        download_jce_policy(properties, ok)
    except FatalException as e:
        print 'JCE Policy files are required for secure HDP setup. Please ensure  all hosts have the JCE unlimited strength policy 6, files.'
        print_error_msg('Failed to download JCE policy files:')
        if (e.reason is not None):
            print_error_msg('\nREASON: {0}'.format(e.reason))
    return 0
