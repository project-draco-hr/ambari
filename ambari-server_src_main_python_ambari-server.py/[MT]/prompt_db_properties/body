def prompt_db_properties(args):
    global DATABASE_INDEX
    if PROMPT_DATABASE_OPTIONS:
        load_default_db_properties(args)
        ok = get_YN_input('Enter advanced database configuration [y/n] (n)? ', False)
        if ok:
            database_num = str((DATABASE_INDEX + 1))
            database_num = get_validated_string_input((('Select database:\n1 - PostgreSQL (Embedded)\n2 - Oracle\n(' + database_num) + '): '), database_num, '^[12]$', 'Invalid number.', False)
            DATABASE_INDEX = (int(database_num) - 1)
            args.database = DATABASE_NAMES[DATABASE_INDEX]
            if (args.database != 'postgres'):
                args.database_host = get_validated_string_input((('Hostname (' + args.database_host) + '): '), args.database_host, '^[a-zA-Z0-9.\\-]*$', 'Invalid hostname.', False)
                args.database_port = DATABASE_PORTS[DATABASE_INDEX]
                args.database_port = get_validated_string_input((('Port (' + args.database_port) + '): '), args.database_port, '^([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$', 'Invalid port.', False)
                if (args.database == 'oracle'):
                    idType = '1'
                    idType = get_validated_string_input((((((('Select Oracle identifier type:\n1 - ' + ORACLE_DB_ID_TYPES[0]) + '\n2 - ') + ORACLE_DB_ID_TYPES[1]) + '\n(') + idType) + '): '), idType, '^[12]$', 'Invalid number.', False)
                    if (idType == '2'):
                        args.sid_or_sname = 'sid'
                    IDTYPE_INDEX = (int(idType) - 1)
                    args.database_name = get_validated_service_name(args.database_name, IDTYPE_INDEX)
                else:
                    pass
                pass
            else:
                args.database_host = 'localhost'
                args.database_port = DATABASE_PORTS[DATABASE_INDEX]
                args.database_name = get_validated_db_name(args.database_name)
                pass
            args.database_username = get_validated_string_input((('Username (' + args.database_username) + '): '), args.database_username, USERNAME_PATTERN, 'Invalid characters in username. Start with _ or alpha followed by alphanumeric or _ or - characters', False)
            args.database_password = configure_database_password(True)
    print_info_msg('Using database options: {database},{host},{port},{schema},{user},{password}'.format(database=args.database, host=args.database_host, port=args.database_port, schema=args.database_name, user=args.database_username, password=args.database_password))
