'\nLicensed to the Apache Software Foundation (ASF) under one\nor more contributor license agreements.  See the NOTICE file\ndistributed with this work for additional information\nregarding copyright ownership.  The ASF licenses this file\nto you under the Apache License, Version 2.0 (the\n"License"); you may not use this file except in compliance\nwith the License.  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n'
import optparse
import shlex
import sys
import os
import signal
import subprocess
import re
import string
import glob
import platform
import shutil
import stat
import fileinput
import urllib2
import time
import getpass
import socket
import datetime
import tempfile
import random
import json
import base64
from ambari_commons import OSCheck, OSConst
from ambari_commons.exceptions import FatalException, NonFatalException
from ambari_commons.logging_utils import get_verbose, set_verbose, get_silent, set_silent, get_debug_mode, set_debug_mode, print_info_msg, print_warning_msg, print_error_msg, set_debug_mode_from_options
from ambari_commons.os_utils import is_root, run_os_command, search_file, copy_file, remove_file, set_file_permissions
from ambari_server.BackupRestore import main as BackupRestore_main
from ambari_server.dbConfiguration import DATABASE_NAMES, DATABASE_FULL_NAMES
from ambari_server.properties import Properties
from ambari_server.resourceFilesKeeper import ResourceFilesKeeper, KeeperException
from ambari_server.serverConfiguration import AMBARI_PROPERTIES_FILE, configDefaults, backup_file_in_temp, check_database_name_property, find_jdbc_driver, find_jdk, find_properties_file, get_ambari_classpath, get_ambari_properties, get_conf_dir, get_full_ambari_classpath, get_value_from_properties, is_alias_string, parse_properties_file, read_ambari_user, BLIND_PASSWORD, SETUP_OR_UPGRADE_MSG, JDBC_RCA_PASSWORD_ALIAS, JDBC_PASSWORD_PROPERTY, JDBC_PASSWORD_FILENAME, JDBC_RCA_PASSWORD_FILE_PROPERTY, GET_FQDN_SERVICE_URL, get_stack_location, IS_LDAP_CONFIGURED, LDAP_PRIMARY_URL_PROPERTY, LDAP_MGR_PASSWORD_PROPERTY, LDAP_MGR_PASSWORD_ALIAS, LDAP_MGR_PASSWORD_FILENAME, LDAP_MGR_USERNAME_PROPERTY, PID_NAME, read_passwd_for_alias, get_credential_store_location, get_master_key_location, get_is_secure, get_is_persisted, get_original_master_key, SECURITY_PROVIDER_PUT_CMD, get_java_exe_path, SECURITY_PROVIDER_KEY_CMD, SECURITY_IS_ENCRYPTION_ENABLED, SECURITY_KERBEROS_JASS_FILENAME, SECURITY_KEY_ENV_VAR_NAME, SECURITY_MASTER_KEY_FILENAME, SECURITY_MASTER_KEY_LOCATION, SSL_TRUSTSTORE_PASSWORD_ALIAS, SSL_TRUSTSTORE_PASSWORD_PROPERTY, SSL_TRUSTSTORE_PATH_PROPERTY, SSL_TRUSTSTORE_TYPE_PROPERTY, update_debug_mode
from ambari_server.serverSetup import reset, setup, is_server_runing
from ambari_server.serverUpgrade import upgrade, upgrade_stack
if (not OSCheck.is_windows_family()):
    from ambari_server.dbConfiguration_linux import PGConfig
from ambari_server.setupActions import SETUP_ACTION, START_ACTION, STOP_ACTION, RESET_ACTION, STATUS_ACTION, UPGRADE_ACTION, UPGRADE_STACK_ACTION, LDAP_SETUP_ACTION, LDAP_SYNC_ACTION, SETUP_SECURITY_ACTION, REFRESH_STACK_HASH_ACTION, BACKUP_ACTION, RESTORE_ACTION, ACTION_REQUIRE_RESTART
from ambari_server.setupSecurity import adjust_directory_permissions, read_password, store_password_file, remove_password_file, encrypt_password, get_truststore_password
from ambari_server.userInput import get_YN_input, get_validated_string_input, get_validated_filepath_input, get_prompt_default
from ambari_server.utils import check_exitcode, locate_file, looking_for_pid, save_main_pid_ex, wait_for_pid
SERVER_START_DEBUG = False
SUSPEND_START_MODE = False
LDAP_SYNC_ALL = False
LDAP_SYNC_EXISTING = False
LDAP_SYNC_USERS = None
LDAP_SYNC_GROUPS = None
ambari_provider_module_option = ''
ambari_provider_module = os.environ.get('AMBARI_PROVIDER_MODULE')
SSL_PASSWORD_FILE = 'pass.txt'
SSL_PASSIN_FILE = 'passin.txt'
VALIDATE_KEYSTORE_CMD = "openssl pkcs12 -info -in '{0}' -password file:'{1}' -passout file:'{2}'"
EXPRT_KSTR_CMD = "openssl pkcs12 -export -in '{0}' -inkey '{1}' -certfile '{0}' -out '{4}' -password file:'{2}' -passin file:'{3}'"
CHANGE_KEY_PWD_CND = 'openssl rsa -in {0} -des3 -out {0}.secured -passout pass:{1}'
GET_CRT_INFO_CMD = 'openssl x509 -dates -subject -in {0}'
KEYTOOL_IMPORT_CERT_CMD = (((('{0}' + os.sep) + 'bin') + os.sep) + "keytool -import -alias '{1}' -storetype '{2}' -file '{3}' -storepass '{4}' -noprompt")
KEYTOOL_DELETE_CERT_CMD = (((('{0}' + os.sep) + 'bin') + os.sep) + "keytool -delete -alias '{1}' -storepass '{2}' -noprompt")
KEYTOOL_KEYSTORE = " -keystore '{0}'"
STACK_NAME_VER_SEP = '-'
SERVER_API_HOST = '127.0.0.1'
SERVER_API_PROTOCOL = 'http'
SERVER_API_PORT = '8080'
SERVER_API_LDAP_URL = '/api/v1/ldap_sync_events'
AMBARI_SERVER_DIE_MSG = 'Ambari Server java process died with exitcode {0}. Check {1} for more information.'
COMMON_NAME_ATTR = 'CN'
NOT_BEFORE_ATTR = 'notBefore'
NOT_AFTER_ATTR = 'notAfter'
if (ambari_provider_module is not None):
    ambari_provider_module_option = (('-Dprovider.module.class=' + ambari_provider_module) + ' ')
SERVER_START_CMD = ((((((((('{0} -server -XX:NewRatio=3 -XX:+UseConcMarkSweepGC ' + '-XX:-UseGCOverheadLimit -XX:CMSInitiatingOccupancyFraction=60 ') + ambari_provider_module_option) + os.getenv('AMBARI_JVM_ARGS', '-Xms512m -Xmx2048m')) + ' -cp {1}') + os.pathsep) + '{2}') + ' org.apache.ambari.server.controller.AmbariServer >') + configDefaults.SERVER_OUT_FILE) + ' 2>&1 || echo $? > {3} &')
SERVER_START_CMD_DEBUG = (((((((('{0} -server -XX:NewRatio=2 -XX:+UseConcMarkSweepGC ' + ambari_provider_module_option) + os.getenv('AMBARI_JVM_ARGS', '-Xms512m -Xmx2048m')) + ' -Xdebug -Xrunjdwp:transport=dt_socket,address=5005,server=y,suspend={4} -cp {1}') + os.pathsep) + '{2}') + ' org.apache.ambari.server.controller.AmbariServer>') + configDefaults.SERVER_OUT_FILE) + ' 2>&1 || echo $? > {3} &')
SERVER_SEARCH_PATTERN = 'org.apache.ambari.server.controller.AmbariServer'
ULIMIT_CMD = 'ulimit -n'
SERVER_INIT_TIMEOUT = 5
SERVER_START_TIMEOUT = 10
SSL_KEY_DIR = 'security.server.keys_dir'
SSL_API_PORT = 'client.api.ssl.port'
SSL_API = 'api.ssl'
SSL_SERVER_CERT_NAME = 'client.api.ssl.cert_name'
SSL_SERVER_KEY_NAME = 'client.api.ssl.key_name'
SSL_CERT_FILE_NAME = 'https.crt'
SSL_KEY_FILE_NAME = 'https.key'
SSL_KEYSTORE_FILE_NAME = 'https.keystore.p12'
SSL_KEY_PASSWORD_FILE_NAME = 'https.pass.txt'
SSL_KEY_PASSWORD_LENGTH = 50
DEFAULT_SSL_API_PORT = 8443
SSL_DATE_FORMAT = '%b  %d %H:%M:%S %Y GMT'
GANGLIA_HTTPS = 'ganglia.https'
CLIENT_SECURITY_KEY = 'client.security'
EXITCODE_NAME = 'ambari-server.exitcode'
SRVR_TWO_WAY_SSL_PORT_PROPERTY = 'security.server.two_way_ssl.port'
SRVR_TWO_WAY_SSL_PORT = '8441'
SRVR_ONE_WAY_SSL_PORT_PROPERTY = 'security.server.one_way_ssl.port'
SRVR_ONE_WAY_SSL_PORT = '8440'
REGEX_IP_ADDRESS = '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$'
REGEX_HOSTNAME = '^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$'
REGEX_HOSTNAME_PORT = '^(.*:[0-9]{1,5}$)'
REGEX_TRUE_FALSE = '^(true|false)?$'
REGEX_ANYTHING = '.*'
ULIMIT_OPEN_FILES_KEY = 'ulimit.open.files'
ULIMIT_OPEN_FILES_DEFAULT = 10000
ASF_LICENSE_HEADER = '\n# Copyright 2011 The Apache Software Foundation\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# "License"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an "AS IS" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n'
if (__name__ == '__main__'):
    try:
        main()
    except (KeyboardInterrupt, EOFError):
        print '\nAborting ... Keyboard Interrupt.'
        sys.exit(1)
