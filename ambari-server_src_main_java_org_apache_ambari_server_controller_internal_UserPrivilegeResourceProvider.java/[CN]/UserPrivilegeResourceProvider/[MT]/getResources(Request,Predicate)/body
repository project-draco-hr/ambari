{
  final Set<Resource> resources=new HashSet<Resource>();
  final Set<String> requestedIds=getRequestPropertyIds(request,predicate);
  boolean isUserAdministrator=AuthorizationHelper.isAuthorized(ResourceType.AMBARI,null,RoleAuthorization.AMBARI_MANAGE_USERS);
  for (  Map<String,Object> propertyMap : getPropertyMaps(predicate)) {
    final String userName=(String)propertyMap.get(PRIVILEGE_USER_NAME_PROPERTY_ID);
    if (!isUserAdministrator && !AuthorizationHelper.getAuthenticatedName().equalsIgnoreCase(userName)) {
      throw new AuthorizationException();
    }
    if (userName != null) {
      UserEntity userEntity=usersCache.get().getIfPresent(userName);
      if (userEntity == null) {
        Map<String,UserEntity> userNames=new TreeMap<>();
        for (        UserEntity entity : userDAO.findAll()) {
          UserEntity existing=userNames.get(entity.getUserName());
          if (existing == null || entity.getUserType() == UserType.LOCAL || existing.getUserType() == UserType.JWT) {
            userNames.put(entity.getUserName(),entity);
          }
        }
        usersCache.get().putAll(userNames);
        userEntity=usersCache.get().getUnchecked(userName);
      }
      if (userEntity == null) {
        throw new SystemException("User " + userName + " was not found");
      }
      final Collection<PrivilegeEntity> privileges=users.getUserPrivileges(userEntity);
      for (      PrivilegeEntity privilegeEntity : privileges) {
        resources.add(toResource(privilegeEntity,userName,requestedIds));
      }
    }
  }
  return resources;
}
