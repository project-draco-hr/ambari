{
  final Set<Resource> resources=new HashSet<Resource>();
  final Set<String> requestedIds=getRequestPropertyIds(request,predicate);
  for (  Map<String,Object> propertyMap : getPropertyMaps(predicate)) {
    final String userName=(String)propertyMap.get(PRIVILEGE_USER_NAME_PROPERTY_ID);
    if (userName != null) {
      UserEntity userEntity=userDAO.findLocalUserByName(userName);
      if (userEntity == null) {
        userEntity=userDAO.findLdapUserByName(userName);
      }
      if (userEntity == null) {
        userEntity=userDAO.findUserByNameAndType(userName,UserType.JWT);
      }
      if (userEntity == null) {
        throw new SystemException("User " + userName + " was not found");
      }
      final Set<PrivilegeEntity> privileges=userEntity.getPrincipal().getPrivileges();
      for (      MemberEntity membership : userEntity.getMemberEntities()) {
        privileges.addAll(membership.getGroup().getPrincipal().getPrivileges());
      }
      for (      PrivilegeEntity privilegeEntity : privileges) {
        final ResourceImpl resource=new ResourceImpl(Resource.Type.UserPrivilege);
        setResourceProperty(resource,PRIVILEGE_USER_NAME_PROPERTY_ID,userName,requestedIds);
        setResourceProperty(resource,PRIVILEGE_PRIVILEGE_ID_PROPERTY_ID,privilegeEntity.getId(),requestedIds);
        setResourceProperty(resource,PRIVILEGE_PERMISSION_NAME_PROPERTY_ID,privilegeEntity.getPermission().getPermissionName(),requestedIds);
        setResourceProperty(resource,PRIVILEGE_PERMISSION_LABEL_PROPERTY_ID,privilegeEntity.getPermission().getPermissionLabel(),requestedIds);
        setResourceProperty(resource,PRIVILEGE_PRINCIPAL_TYPE_PROPERTY_ID,privilegeEntity.getPrincipal().getPrincipalType().getName(),requestedIds);
        final String principalTypeName=privilegeEntity.getPrincipal().getPrincipalType().getName();
        if (principalTypeName.equals(PrincipalTypeEntity.USER_PRINCIPAL_TYPE_NAME)) {
          final UserEntity user=userDAO.findUserByPrincipal(privilegeEntity.getPrincipal());
          setResourceProperty(resource,PRIVILEGE_PRINCIPAL_NAME_PROPERTY_ID,user.getUserName(),requestedIds);
        }
 else         if (principalTypeName.equals(PrincipalTypeEntity.GROUP_PRINCIPAL_TYPE_NAME)) {
          final GroupEntity groupEntity=groupDAO.findGroupByPrincipal(privilegeEntity.getPrincipal());
          setResourceProperty(resource,PRIVILEGE_PRINCIPAL_NAME_PROPERTY_ID,groupEntity.getGroupName(),requestedIds);
        }
        String privilegeType;
        String typeName=privilegeEntity.getResource().getResourceType().getName();
        if (ResourceType.CLUSTER.name().equalsIgnoreCase(typeName)) {
          final ClusterEntity clusterEntity=clusterDAO.findByResourceId(privilegeEntity.getResource().getId());
          privilegeType=ResourceType.CLUSTER.name();
          setResourceProperty(resource,PRIVILEGE_CLUSTER_NAME_PROPERTY_ID,clusterEntity.getClusterName(),requestedIds);
        }
 else         if (ResourceType.AMBARI.name().equalsIgnoreCase(typeName)) {
          privilegeType=ResourceType.AMBARI.name();
        }
 else {
          privilegeType=ResourceType.VIEW.name();
          final ViewInstanceEntity viewInstanceEntity=viewInstanceDAO.findByResourceId(privilegeEntity.getResource().getId());
          final ViewEntity viewEntity=viewInstanceEntity.getViewEntity();
          setResourceProperty(resource,PRIVILEGE_VIEW_NAME_PROPERTY_ID,viewEntity.getCommonName(),requestedIds);
          setResourceProperty(resource,PRIVILEGE_VIEW_VERSION_PROPERTY_ID,viewEntity.getVersion(),requestedIds);
          setResourceProperty(resource,PRIVILEGE_INSTANCE_NAME_PROPERTY_ID,viewInstanceEntity.getName(),requestedIds);
        }
        setResourceProperty(resource,PRIVILEGE_TYPE_PROPERTY_ID,privilegeType,requestedIds);
        resources.add(resource);
      }
    }
  }
  return resources;
}
