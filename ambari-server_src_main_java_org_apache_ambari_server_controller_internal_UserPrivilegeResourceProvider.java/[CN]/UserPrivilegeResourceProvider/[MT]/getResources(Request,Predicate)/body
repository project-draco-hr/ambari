{
  final Set<Resource> resources=new HashSet<Resource>();
  final Set<String> requestedIds=getRequestPropertyIds(request,predicate);
  boolean isUserAdministrator=AuthorizationHelper.isAuthorized(ResourceType.AMBARI,null,RoleAuthorization.AMBARI_MANAGE_USERS);
  for (  Map<String,Object> propertyMap : getPropertyMaps(predicate)) {
    final String userName=(String)propertyMap.get(PRIVILEGE_USER_NAME_PROPERTY_ID);
    if (!isUserAdministrator && !AuthorizationHelper.getAuthenticatedName().equalsIgnoreCase(userName)) {
      throw new AuthorizationException();
    }
    if (userName != null) {
      UserEntity userEntity=userDAO.findLocalUserByName(userName);
      if (userEntity == null) {
        userEntity=userDAO.findLdapUserByName(userName);
      }
      if (userEntity == null) {
        userEntity=userDAO.findUserByNameAndType(userName,UserType.JWT);
      }
      if (userEntity == null) {
        throw new SystemException("User " + userName + " was not found");
      }
      final Set<PrivilegeEntity> privileges=userEntity.getPrincipal().getPrivileges();
      for (      MemberEntity membership : userEntity.getMemberEntities()) {
        privileges.addAll(membership.getGroup().getPrincipal().getPrivileges());
      }
      Set<PrivilegeEntity> allViewPrivilegesWithClusterPermission=ClusterInheritedPermissionHelper.getViewPrivilegesWithClusterPermission(viewInstanceDAO,privilegeDAO,privileges);
      privileges.addAll(allViewPrivilegesWithClusterPermission);
      for (      PrivilegeEntity privilegeEntity : privileges) {
        resources.add(toResource(privilegeEntity,userName,requestedIds));
      }
    }
  }
  return resources;
}
