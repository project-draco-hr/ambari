{
  String stackVersion="HDP-2.0.6";
  StackId stackId=new StackId(stackVersion);
  String clusterName="c2";
  createCluster(stackId,clusterName);
  final String hostName="h3";
  Set<String> hostNames=new HashSet<String>();
  hostNames.add(hostName);
  addHostsToCluster(clusterName,hostAttributes,hostNames);
  final HostEntity hostEntity=hostDAO.findByName(hostName);
  Assert.assertNotNull(hostEntity.getHostId());
  Cluster cluster=clusters.getCluster(clusterName);
  Assert.assertNotNull(cluster);
  helper.getOrCreateRepositoryVersion(stackId,stackId.getStackVersion());
  cluster.createClusterVersion(stackId,stackId.getStackVersion(),"admin",RepositoryVersionState.INSTALLING);
  ServiceComponentHost sch1=createNewServiceComponentHost(cluster,"HDFS","NAMENODE",hostName);
  ServiceComponentHost sch2=createNewServiceComponentHost(cluster,"HDFS","DATANODE",hostName);
  ServiceComponentHost sch3=createNewServiceComponentHost(cluster,"MAPREDUCE2","HISTORYSERVER",hostName);
  sch1.setDesiredState(State.INSTALLED);
  sch1.setState(State.INSTALLING);
  sch1.setStackVersion(new StackId(stackVersion));
  sch2.setDesiredState(State.INSTALLED);
  sch2.setState(State.INSTALLING);
  sch2.setStackVersion(new StackId(stackVersion));
  sch3.setDesiredState(State.INSTALLED);
  sch3.setState(State.INSTALLING);
  sch3.setStackVersion(new StackId(stackVersion));
  Assert.assertFalse(sch1.convertToResponse(null).isStaleConfig());
  Assert.assertFalse(sch2.convertToResponse(null).isStaleConfig());
  makeConfig(cluster,"global","version1",new HashMap<String,String>(){
{
      put("a","b");
      put("dfs_namenode_name_dir","/foo1");
      put("mapred_log_dir_prefix","/foo2");
    }
  }
,new HashMap<String,Map<String,String>>());
  Map<String,Map<String,String>> actual=new HashMap<String,Map<String,String>>(){
{
      put("global",new HashMap<String,String>(){
{
          put("tag","version1");
        }
      }
);
    }
  }
;
  sch1.updateActualConfigs(actual);
  sch2.updateActualConfigs(actual);
  sch3.updateActualConfigs(actual);
  makeConfig(cluster,"foo","version1",new HashMap<String,String>(){
{
      put("a","c");
    }
  }
,new HashMap<String,Map<String,String>>());
  Assert.assertFalse(sch1.convertToResponse(null).isStaleConfig());
  Assert.assertFalse(sch2.convertToResponse(null).isStaleConfig());
  makeConfig(cluster,"hdfs-site","version1",new HashMap<String,String>(){
{
      put("a","b");
    }
  }
,new HashMap<String,Map<String,String>>());
  Assert.assertTrue(sch1.convertToResponse(null).isStaleConfig());
  Assert.assertTrue(sch2.convertToResponse(null).isStaleConfig());
  actual.put("hdfs-site",new HashMap<String,String>(){
{
      put("tag","version1");
    }
  }
);
  sch1.updateActualConfigs(actual);
  Assert.assertFalse(sch1.convertToResponse(null).isStaleConfig());
  Assert.assertTrue(sch2.convertToResponse(null).isStaleConfig());
  sch2.updateActualConfigs(actual);
  Assert.assertFalse(sch1.convertToResponse(null).isStaleConfig());
  Assert.assertFalse(sch2.convertToResponse(null).isStaleConfig());
  makeConfig(cluster,"hdfs-site","version2",new HashMap<String,String>(){
{
      put("dfs.journalnode.http-address","http://foo");
    }
  }
,new HashMap<String,Map<String,String>>());
  Assert.assertTrue(sch1.convertToResponse(null).isStaleConfig());
  Assert.assertTrue(sch2.convertToResponse(null).isStaleConfig());
  actual.get("hdfs-site").put("tag","version2");
  sch1.updateActualConfigs(actual);
  sch2.updateActualConfigs(actual);
  sch1.setRestartRequired(false);
  sch2.setRestartRequired(false);
  Assert.assertFalse(sch1.convertToResponse(null).isStaleConfig());
  Assert.assertFalse(sch2.convertToResponse(null).isStaleConfig());
  final Host host=clusters.getHostsForCluster(clusterName).get(hostName);
  Assert.assertNotNull(host);
  final Config c=configFactory.createNew(cluster,"hdfs-site",new HashMap<String,String>(){
{
      put("dfs.journalnode.http-address","http://goo");
    }
  }
,new HashMap<String,Map<String,String>>());
  c.setTag("version3");
  c.persist();
  cluster.addConfig(c);
  host.addDesiredConfig(cluster.getClusterId(),true,"user",c);
  ConfigGroup configGroup=configGroupFactory.createNew(cluster,"g1","t1","",new HashMap<String,Config>(){
{
      put("hdfs-site",c);
    }
  }
,new HashMap<Long,Host>(){
{
      put(hostEntity.getHostId(),host);
    }
  }
);
  configGroup.persist();
  cluster.addConfigGroup(configGroup);
  Assert.assertTrue(sch1.convertToResponse(null).isStaleConfig());
  Assert.assertTrue(sch2.convertToResponse(null).isStaleConfig());
  actual.get("hdfs-site").put(configGroup.getId().toString(),"version3");
  sch2.updateActualConfigs(actual);
  Assert.assertTrue(sch1.convertToResponse(null).isStaleConfig());
  Assert.assertFalse(sch2.convertToResponse(null).isStaleConfig());
  sch1.updateActualConfigs(actual);
  Assert.assertFalse(sch1.convertToResponse(null).isStaleConfig());
  Assert.assertFalse(sch2.convertToResponse(null).isStaleConfig());
  makeConfig(cluster,"global","version2",new HashMap<String,String>(){
{
      put("a","b");
      put("dfs_namenode_name_dir","/foo3");
      put("mapred_log_dir_prefix","/foo2");
    }
  }
,new HashMap<String,Map<String,String>>());
  Assert.assertTrue(sch1.convertToResponse(null).isStaleConfig());
  Assert.assertTrue(sch2.convertToResponse(null).isStaleConfig());
  Assert.assertFalse(sch3.convertToResponse(null).isStaleConfig());
  makeConfig(cluster,"core-site","version1",new HashMap<String,String>(){
{
      put("a","b");
      put("fs.trash.interval","360");
    }
  }
,new HashMap<String,Map<String,String>>());
  Assert.assertTrue(sch1.convertToResponse(null).isStaleConfig());
  Assert.assertTrue(sch2.convertToResponse(null).isStaleConfig());
  Assert.assertTrue(sch3.convertToResponse(null).isStaleConfig());
  actual.put("core-site",new HashMap<String,String>(){
{
      put("tag","version1");
    }
  }
);
  sch1.updateActualConfigs(actual);
  final Config c1=configFactory.createNew(cluster,"core-site",new HashMap<String,String>(){
{
      put("fs.trash.interval","400");
    }
  }
,new HashMap<String,Map<String,String>>());
  c1.setTag("version2");
  c1.persist();
  cluster.addConfig(c1);
  configGroup=configGroupFactory.createNew(cluster,"g2","t2","",new HashMap<String,Config>(){
{
      put("core-site",c1);
    }
  }
,new HashMap<Long,Host>(){
{
      put(hostEntity.getHostId(),host);
    }
  }
);
  configGroup.persist();
  cluster.addConfigGroup(configGroup);
  Assert.assertTrue(sch1.convertToResponse(null).isStaleConfig());
  Assert.assertTrue(sch2.convertToResponse(null).isStaleConfig());
  Assert.assertTrue(sch3.convertToResponse(null).isStaleConfig());
  Long id=configGroup.getId();
  HashMap<String,String> tags=new HashMap<String,String>(2);
  tags.put("tag","version1");
  tags.put(id.toString(),"version2");
  actual.put("core-site",tags);
  sch3.updateActualConfigs(actual);
  Assert.assertFalse(sch3.convertToResponse(null).isStaleConfig());
  cluster.deleteConfigGroup(id);
  Assert.assertNull(cluster.getConfigGroups().get(id));
  sch3.updateActualConfigs(actual);
  Assert.assertTrue(sch3.convertToResponse(null).isStaleConfig());
  tags.remove(id.toString());
  sch3.updateActualConfigs(actual);
  Assert.assertFalse(sch3.convertToResponse(null).isStaleConfig());
  injector.getInstance(PersistService.class).stop();
  classSetUp();
}
