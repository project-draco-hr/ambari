{
  String stackVersion="HDP-2.0.6";
  String clusterName="c2";
  String hostName="h3";
  StackId stackId=new StackId(stackVersion);
  clusters.addCluster(clusterName,stackId);
  clusters.addHost(hostName);
  setOsFamily(clusters.getHost(hostName),"redhat","5.9");
  clusters.getHost(hostName).persist();
  Cluster c2=clusters.getCluster(clusterName);
  helper.getOrCreateRepositoryVersion(stackId,stackId.getStackVersion());
  c2.createClusterVersion(stackId,stackId.getStackVersion(),"admin",RepositoryVersionState.UPGRADING);
  clusters.mapHostToCluster(hostName,clusterName);
  HostEntity hostEntity=hostDAO.findByName(hostName);
  Assert.assertNotNull(hostEntity);
  Cluster cluster=clusters.getCluster(clusterName);
  ServiceComponentHost sch1=createNewServiceComponentHost(cluster,"HDFS","NAMENODE",hostName);
  ServiceComponentHost sch2=createNewServiceComponentHost(cluster,"HDFS","DATANODE",hostName);
  ServiceComponentHost sch3=createNewServiceComponentHost(cluster,"MAPREDUCE2","HISTORYSERVER",hostName);
  HostComponentDesiredStateEntityPK pk=new HostComponentDesiredStateEntityPK();
  pk.setClusterId(Long.valueOf(cluster.getClusterId()));
  pk.setComponentName(sch1.getServiceComponentName());
  pk.setServiceName(sch1.getServiceName());
  pk.setHostId(hostEntity.getHostId());
  HostComponentDesiredStateDAO dao=injector.getInstance(HostComponentDesiredStateDAO.class);
  HostComponentDesiredStateEntity entity=dao.findByPK(pk);
  Assert.assertEquals(MaintenanceState.OFF,entity.getMaintenanceState());
  Assert.assertEquals(MaintenanceState.OFF,sch1.getMaintenanceState());
  sch1.setMaintenanceState(MaintenanceState.ON);
  Assert.assertEquals(MaintenanceState.ON,sch1.getMaintenanceState());
  entity=dao.findByPK(pk);
  Assert.assertEquals(MaintenanceState.ON,entity.getMaintenanceState());
}
