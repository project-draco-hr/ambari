{
  String stackVersion="HDP-2.0.6";
  StackId stackId=new StackId(stackVersion);
  String clusterName="c2";
  createCluster(stackId,clusterName);
  final String hostName="h3";
  Set<String> hostNames=new HashSet<String>();
  hostNames.add(hostName);
  addHostsToCluster(clusterName,hostAttributes,hostNames);
  Cluster cluster=clusters.getCluster(clusterName);
  helper.getOrCreateRepositoryVersion(stackId,stackId.getStackVersion());
  cluster.createClusterVersion(stackId,stackId.getStackVersion(),"admin",RepositoryVersionState.INSTALLING);
  HostEntity hostEntity=hostDAO.findByName(hostName);
  ServiceComponentHost sch1=createNewServiceComponentHost(cluster,"HDFS","NAMENODE",hostName);
  HostComponentDesiredStateDAO daoHostComponentDesiredState=injector.getInstance(HostComponentDesiredStateDAO.class);
  HostComponentDesiredStateEntity entityHostComponentDesiredState;
  HostComponentDesiredStateEntityPK pkHostComponentDesiredState=new HostComponentDesiredStateEntityPK();
  pkHostComponentDesiredState.setClusterId(cluster.getClusterId());
  pkHostComponentDesiredState.setComponentName(sch1.getServiceComponentName());
  pkHostComponentDesiredState.setServiceName(sch1.getServiceName());
  pkHostComponentDesiredState.setHostId(hostEntity.getHostId());
  HostComponentStateDAO daoHostComponentState=injector.getInstance(HostComponentStateDAO.class);
  HostComponentStateEntity entityHostComponentState;
  for (  SecurityState state : SecurityState.values()) {
    sch1.setSecurityState(state);
    entityHostComponentState=daoHostComponentState.findByIndex(cluster.getClusterId(),sch1.getServiceName(),sch1.getServiceComponentName(),hostEntity.getHostId());
    Assert.assertNotNull(entityHostComponentState);
    Assert.assertEquals(state,entityHostComponentState.getSecurityState());
    try {
      sch1.setDesiredSecurityState(state);
      Assert.assertTrue(state.isEndpoint());
      entityHostComponentDesiredState=daoHostComponentDesiredState.findByPK(pkHostComponentDesiredState);
      Assert.assertNotNull(entityHostComponentDesiredState);
      Assert.assertEquals(state,entityHostComponentDesiredState.getSecurityState());
    }
 catch (    AmbariException e) {
      Assert.assertFalse(state.isEndpoint());
    }
  }
}
