{
  String stackVersion="HDP-2.0.6";
  String clusterName="c2";
  String hostName="h3";
  clusters.addCluster(clusterName);
  clusters.addHost(hostName);
  setOsFamily(clusters.getHost(hostName),"redhat","5.9");
  clusters.getHost(hostName).persist();
  Cluster c2=clusters.getCluster(clusterName);
  StackId stackId=new StackId(stackVersion);
  c2.setDesiredStackVersion(stackId);
  helper.getOrCreateRepositoryVersion(stackId.getStackName(),stackId.getStackVersion());
  c2.createClusterVersion(stackId.getStackName(),stackId.getStackVersion(),"admin",RepositoryVersionState.UPGRADING);
  clusters.mapHostToCluster(hostName,clusterName);
  Cluster cluster=clusters.getCluster(clusterName);
  ServiceComponentHost sch1=createNewServiceComponentHost(cluster,"HDFS","NAMENODE",hostName);
  HostComponentDesiredStateDAO daoHostComponentDesiredState=injector.getInstance(HostComponentDesiredStateDAO.class);
  HostComponentDesiredStateEntity entityHostComponentDesiredState;
  HostComponentDesiredStateEntityPK pkHostComponentDesiredState=new HostComponentDesiredStateEntityPK();
  pkHostComponentDesiredState.setClusterId(cluster.getClusterId());
  pkHostComponentDesiredState.setComponentName(sch1.getServiceComponentName());
  pkHostComponentDesiredState.setServiceName(sch1.getServiceName());
  pkHostComponentDesiredState.setHostName(hostName);
  HostComponentStateDAO daoHostComponentState=injector.getInstance(HostComponentStateDAO.class);
  HostComponentStateEntity entityHostComponentState;
  HostComponentStateEntityPK pkHostComponentState=new HostComponentStateEntityPK();
  pkHostComponentState.setClusterId(cluster.getClusterId());
  pkHostComponentState.setComponentName(sch1.getServiceComponentName());
  pkHostComponentState.setServiceName(sch1.getServiceName());
  pkHostComponentState.setHostName(hostName);
  for (  SecurityState state : SecurityState.values()) {
    sch1.setSecurityState(state);
    entityHostComponentState=daoHostComponentState.findByPK(pkHostComponentState);
    Assert.assertNotNull(entityHostComponentState);
    Assert.assertEquals(state,entityHostComponentState.getSecurityState());
    try {
      sch1.setDesiredSecurityState(state);
      Assert.assertTrue(state.isEndpoint());
      entityHostComponentDesiredState=daoHostComponentDesiredState.findByPK(pkHostComponentDesiredState);
      Assert.assertNotNull(entityHostComponentDesiredState);
      Assert.assertEquals(state,entityHostComponentDesiredState.getSecurityState());
    }
 catch (    AmbariException e) {
      Assert.assertFalse(state.isEndpoint());
    }
  }
}
