{
  String stackVersion="HDP-2.0.6";
  StackId stackId=new StackId(stackVersion);
  String clusterName="c2";
  createCluster(stackId,clusterName);
  final String hostName="h3";
  Set<String> hostNames=new HashSet<String>();
  hostNames.add(hostName);
  addHostsToCluster(clusterName,hostAttributes,hostNames);
  Cluster cluster=clusters.getCluster(clusterName);
  helper.getOrCreateRepositoryVersion(stackId,stackId.getStackVersion());
  cluster.createClusterVersion(stackId,stackId.getStackVersion(),"admin",RepositoryVersionState.INSTALLING);
  ServiceComponentHost sch1=createNewServiceComponentHost(cluster,"HDFS","NAMENODE",hostName);
  ServiceComponentHost sch2=createNewServiceComponentHost(cluster,"HDFS","DATANODE",hostName);
  ServiceComponentHost sch3=createNewServiceComponentHost(cluster,"MAPREDUCE2","HISTORYSERVER",hostName);
  sch1.setDesiredState(State.INSTALLED);
  sch1.setState(State.INSTALLING);
  sch1.setStackVersion(new StackId(stackVersion));
  sch2.setDesiredState(State.INSTALLED);
  sch2.setState(State.INSTALLING);
  sch2.setStackVersion(new StackId(stackVersion));
  sch3.setDesiredState(State.INSTALLED);
  sch3.setState(State.INSTALLING);
  sch3.setStackVersion(new StackId(stackVersion));
  Assert.assertFalse(sch1.convertToResponse().isStaleConfig());
  Assert.assertFalse(sch2.convertToResponse().isStaleConfig());
  makeConfig(cluster,"global","version1",new HashMap<String,String>(){
{
      put("a","b");
      put("dfs_namenode_name_dir","/foo1");
      put("mapred_log_dir_prefix","/foo2");
    }
  }
,new HashMap<String,Map<String,String>>());
  makeConfig(cluster,"hdfs-site","version1",new HashMap<String,String>(){
{
      put("hdfs1","hdfs1value1");
    }
  }
,new HashMap<String,Map<String,String>>());
  Map<String,Map<String,String>> actual=new HashMap<String,Map<String,String>>(){
{
      put("global",new HashMap<String,String>(){
{
          put("tag","version1");
        }
      }
);
      put("hdfs-site",new HashMap<String,String>(){
{
          put("tag","version1");
        }
      }
);
    }
  }
;
  sch1.updateActualConfigs(actual);
  sch2.updateActualConfigs(actual);
  sch3.updateActualConfigs(actual);
  makeConfig(cluster,"mapred-site","version1",new HashMap<String,String>(){
{
      put("a","c");
    }
  }
,new HashMap<String,Map<String,String>>(){
{
      put("final",new HashMap<String,String>(){
{
          put("a","true");
        }
      }
);
    }
  }
);
  Assert.assertFalse(sch1.convertToResponse().isStaleConfig());
  Assert.assertFalse(sch2.convertToResponse().isStaleConfig());
  Assert.assertTrue(sch3.convertToResponse().isStaleConfig());
  actual=new HashMap<String,Map<String,String>>(){
{
      put("global",new HashMap<String,String>(){
{
          put("tag","version1");
        }
      }
);
      put("mapred-site",new HashMap<String,String>(){
{
          put("tag","version1");
        }
      }
);
    }
  }
;
  sch3.setRestartRequired(false);
  sch3.updateActualConfigs(actual);
  Assert.assertFalse(sch3.convertToResponse().isStaleConfig());
  Map<String,Map<String,String>> c1PropAttributes=new HashMap<String,Map<String,String>>();
  c1PropAttributes.put("final",new HashMap<String,String>());
  c1PropAttributes.get("final").put("hdfs1","true");
  makeConfig(cluster,"hdfs-site","version2",new HashMap<String,String>(){
{
      put("hdfs1","hdfs1value1");
    }
  }
,c1PropAttributes);
  sch1.setRestartRequired(false);
  sch2.setRestartRequired(false);
  sch3.setRestartRequired(false);
  Assert.assertTrue(sch1.convertToResponse().isStaleConfig());
  Assert.assertTrue(sch2.convertToResponse().isStaleConfig());
  Assert.assertFalse(sch3.convertToResponse().isStaleConfig());
  Map<String,Map<String,String>> c2PropAttributes=new HashMap<String,Map<String,String>>();
  c2PropAttributes.put("final",new HashMap<String,String>());
  c2PropAttributes.get("final").put("hdfs1","false");
  makeConfig(cluster,"hdfs-site","version3",new HashMap<String,String>(){
{
      put("hdfs1","hdfs1value1");
    }
  }
,c2PropAttributes);
  sch1.setRestartRequired(false);
  sch2.setRestartRequired(false);
  sch3.setRestartRequired(false);
  Assert.assertTrue(sch1.convertToResponse().isStaleConfig());
  Assert.assertTrue(sch2.convertToResponse().isStaleConfig());
  Assert.assertFalse(sch3.convertToResponse().isStaleConfig());
  makeConfig(cluster,"hdfs-site","version4",new HashMap<String,String>(){
{
      put("hdfs1","hdfs1value1");
    }
  }
,new HashMap<String,Map<String,String>>());
  sch1.setRestartRequired(false);
  sch2.setRestartRequired(false);
  sch3.setRestartRequired(false);
  Assert.assertTrue(sch1.convertToResponse().isStaleConfig());
  Assert.assertTrue(sch2.convertToResponse().isStaleConfig());
  Assert.assertFalse(sch3.convertToResponse().isStaleConfig());
}
