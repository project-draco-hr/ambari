{
  Map<String,String> configs=new HashMap<String,String>();
  Cluster c=clusters.getCluster("C1");
  if (c.getDesiredConfig("time","" + timestamp) == null) {
    Config config=configFactory.createNew(c,"time",new HashMap<String,String>());
    config.setVersionTag("" + timestamp);
    c.addDesiredConfig(config);
    config.persist();
  }
  configs.put("time","" + timestamp);
switch (eventType) {
case HOST_SVCCOMP_INSTALL:
    return new ServiceComponentHostInstallEvent(impl.getServiceComponentName(),impl.getHostName(),timestamp,impl.getDesiredStackVersion().getStackId());
case HOST_SVCCOMP_START:
  return new ServiceComponentHostStartEvent(impl.getServiceComponentName(),impl.getHostName(),timestamp,configs);
case HOST_SVCCOMP_STOP:
return new ServiceComponentHostStopEvent(impl.getServiceComponentName(),impl.getHostName(),timestamp);
case HOST_SVCCOMP_UNINSTALL:
return new ServiceComponentHostUninstallEvent(impl.getServiceComponentName(),impl.getHostName(),timestamp);
case HOST_SVCCOMP_OP_FAILED:
return new ServiceComponentHostOpFailedEvent(impl.getServiceComponentName(),impl.getHostName(),timestamp);
case HOST_SVCCOMP_OP_SUCCEEDED:
return new ServiceComponentHostOpSucceededEvent(impl.getServiceComponentName(),impl.getHostName(),timestamp);
case HOST_SVCCOMP_OP_IN_PROGRESS:
return new ServiceComponentHostOpInProgressEvent(impl.getServiceComponentName(),impl.getHostName(),timestamp);
case HOST_SVCCOMP_OP_RESTART:
return new ServiceComponentHostOpRestartedEvent(impl.getServiceComponentName(),impl.getHostName(),timestamp);
case HOST_SVCCOMP_WIPEOUT:
return new ServiceComponentHostWipeoutEvent(impl.getServiceComponentName(),impl.getHostName(),timestamp);
}
return null;
}
