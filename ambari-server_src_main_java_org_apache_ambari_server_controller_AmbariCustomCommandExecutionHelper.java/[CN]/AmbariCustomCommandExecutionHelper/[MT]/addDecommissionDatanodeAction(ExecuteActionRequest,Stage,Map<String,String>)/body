{
  String hdfsExcludeFileType="hdfs-exclude-file";
  String clusterName=decommissionRequest.getClusterName();
  Cluster cluster=clusters.getCluster(clusterName);
  String serviceName=decommissionRequest.getServiceName();
  String namenodeHost=clusters.getCluster(clusterName).getService(serviceName).getServiceComponent(Role.NAMENODE.toString()).getServiceComponentHosts().keySet().iterator().next();
  String excludeFileTag=null;
  if (decommissionRequest.getParameters() != null && (decommissionRequest.getParameters().get("excludeFileTag") != null)) {
    excludeFileTag=decommissionRequest.getParameters().get("excludeFileTag");
  }
  if (excludeFileTag == null) {
    throw new AmbariException("No exclude file specified" + " when decommissioning datanodes. Provide parameter excludeFileTag with the tag for config type " + hdfsExcludeFileType);
  }
  Config config=clusters.getCluster(clusterName).getConfig(hdfsExcludeFileType,excludeFileTag);
  if (config == null) {
    throw new AmbariException("Decommissioning datanodes requires the cluster to be associated with config type " + hdfsExcludeFileType + " with a list of datanodes to be decommissioned (\"datanodes\" : list).");
  }
  LOG.info("Decommissioning data nodes: " + config.getProperties().get("datanodes") + " "+ hdfsExcludeFileType+ " tag: "+ excludeFileTag);
  Map<String,Map<String,String>> configurations=new TreeMap<String,Map<String,String>>();
  Map<String,Map<String,String>> configTags=amcImpl.findConfigurationTagsWithOverrides(cluster,namenodeHost);
  Map<String,String> excludeTags=new HashMap<String,String>();
  excludeTags.put(ConfigHelper.CLUSTER_DEFAULT_TAG,config.getVersionTag());
  configTags.put(hdfsExcludeFileType,excludeTags);
  stage.addHostRoleExecutionCommand(namenodeHost,Role.DECOMMISSION_DATANODE,RoleCommand.EXECUTE,new ServiceComponentHostOpInProgressEvent(Role.DECOMMISSION_DATANODE.toString(),namenodeHost,System.currentTimeMillis()),clusterName,serviceName);
  ExecutionCommand execCmd=stage.getExecutionCommandWrapper(namenodeHost,Role.DECOMMISSION_DATANODE.toString()).getExecutionCommand();
  execCmd.setConfigurations(configurations);
  execCmd.setConfigurationTags(configTags);
  execCmd.setHostLevelParams(hostLevelParams);
}
