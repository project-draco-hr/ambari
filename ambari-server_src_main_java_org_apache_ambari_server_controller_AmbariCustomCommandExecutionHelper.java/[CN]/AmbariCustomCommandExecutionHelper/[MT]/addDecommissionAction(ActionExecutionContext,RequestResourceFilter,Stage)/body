{
  String clusterName=actionExecutionContext.getClusterName();
  final Cluster cluster=clusters.getCluster(clusterName);
  final String serviceName=resourceFilter.getServiceName();
  String masterCompType=resourceFilter.getComponentName();
  List<String> hosts=resourceFilter.getHostNames();
  if (hosts != null && !hosts.isEmpty()) {
    throw new AmbariException("Decommission command cannot be issued with " + "target host(s) specified.");
  }
  Set<String> excludedHosts=getHostList(actionExecutionContext.getParameters(),DECOM_EXCLUDED_HOSTS);
  Set<String> includedHosts=getHostList(actionExecutionContext.getParameters(),DECOM_INCLUDED_HOSTS);
  Set<String> cloneSet=new HashSet<String>(excludedHosts);
  cloneSet.retainAll(includedHosts);
  if (cloneSet.size() > 0) {
    throw new AmbariException("Same host cannot be specified for inclusion " + "as well as exclusion. Hosts: " + cloneSet.toString());
  }
  Service service=cluster.getService(serviceName);
  if (service == null) {
    throw new AmbariException("Specified service " + serviceName + " is not a valid/deployed service.");
  }
  Map<String,ServiceComponent> svcComponents=service.getServiceComponents();
  if (!svcComponents.containsKey(masterCompType)) {
    throw new AmbariException("Specified component " + masterCompType + " does not belong to service "+ serviceName+ ".");
  }
  ServiceComponent masterComponent=svcComponents.get(masterCompType);
  if (!masterComponent.isMasterComponent()) {
    throw new AmbariException("Specified component " + masterCompType + " is not a MASTER for service "+ serviceName+ ".");
  }
  if (!masterToSlaveMappingForDecom.containsKey(masterCompType)) {
    throw new AmbariException("Decommissioning is not supported for " + masterCompType);
  }
  String slaveCompStr=actionExecutionContext.getParameters().get(DECOM_SLAVE_COMPONENT);
  final String slaveCompType;
  if (slaveCompStr == null || slaveCompStr.equals("")) {
    slaveCompType=masterToSlaveMappingForDecom.get(masterCompType);
  }
 else {
    slaveCompType=slaveCompStr;
    if (!masterToSlaveMappingForDecom.get(masterCompType).equals(slaveCompType)) {
      throw new AmbariException("Component " + slaveCompType + " is not supported for decommissioning.");
    }
  }
  String isDrainOnlyRequest=actionExecutionContext.getParameters().get(HBASE_MARK_DRAINING_ONLY);
  if (isDrainOnlyRequest != null && !slaveCompType.equals(Role.HBASE_REGIONSERVER.name())) {
    throw new AmbariException(HBASE_MARK_DRAINING_ONLY + " is not a valid parameter for " + masterCompType);
  }
  MaintenanceStateHelper.HostPredicate hostPredicate=new MaintenanceStateHelper.HostPredicate(){
    @Override public boolean shouldHostBeRemoved(    final String hostname) throws AmbariException {
      String upd_excl_file_only_str=actionExecutionContext.getParameters().get(UPDATE_EXCLUDE_FILE_ONLY);
      String decom_incl_hosts_str=actionExecutionContext.getParameters().get(DECOM_INCLUDED_HOSTS);
      if ((upd_excl_file_only_str != null && !upd_excl_file_only_str.trim().equals(""))) {
        upd_excl_file_only_str=upd_excl_file_only_str.trim();
      }
      boolean upd_excl_file_only=false;
      if (upd_excl_file_only_str != null && !upd_excl_file_only_str.equals("") && (upd_excl_file_only_str.equals("\"true\"") || upd_excl_file_only_str.equals("'true'") || upd_excl_file_only_str.equals("true"))) {
        upd_excl_file_only=true;
      }
      if (upd_excl_file_only && decom_incl_hosts_str != null && !decom_incl_hosts_str.trim().equals("")) {
        return upd_excl_file_only;
      }
 else {
        return !maintenanceStateHelper.isOperationAllowed(cluster,actionExecutionContext.getOperationLevel(),resourceFilter,serviceName,slaveCompType,hostname);
      }
    }
  }
;
  Set<String> filteredExcludedHosts=new HashSet<String>(excludedHosts);
  Set<String> ignoredHosts=maintenanceStateHelper.filterHostsInMaintenanceState(filteredExcludedHosts,hostPredicate);
  if (!ignoredHosts.isEmpty()) {
    String message=String.format("Some hosts (%s) from host exclude list " + "have been ignored " + "because components on them are in Maintenance state.",ignoredHosts);
    LOG.debug(message);
  }
  Set<String> filteredIncludedHosts=new HashSet<String>(includedHosts);
  ignoredHosts=maintenanceStateHelper.filterHostsInMaintenanceState(filteredIncludedHosts,hostPredicate);
  if (!ignoredHosts.isEmpty()) {
    String message=String.format("Some hosts (%s) from host include list " + "have been ignored " + "because components on them are in Maintenance state.",ignoredHosts);
    LOG.debug(message);
  }
  for (  ServiceComponentHost sch : svcComponents.get(slaveCompType).getServiceComponentHosts().values()) {
    if (filteredExcludedHosts.contains(sch.getHostName()) && !"true".equals(isDrainOnlyRequest) && sch.getState() != State.STARTED) {
      throw new AmbariException("Component " + slaveCompType + " on host "+ sch.getHostName()+ " cannot be "+ "decommissioned as its not in STARTED state. Aborting the whole request.");
    }
  }
  String alignMtnStateStr=actionExecutionContext.getParameters().get(ALIGN_MAINTENANCE_STATE);
  boolean alignMtnState="true".equals(alignMtnStateStr);
  List<String> listOfExcludedHosts=new ArrayList<String>();
  for (  ServiceComponentHost sch : svcComponents.get(slaveCompType).getServiceComponentHosts().values()) {
    if (filteredExcludedHosts.contains(sch.getHostName())) {
      sch.setComponentAdminState(HostComponentAdminState.DECOMMISSIONED);
      listOfExcludedHosts.add(sch.getHostName());
      if (alignMtnState) {
        sch.setMaintenanceState(MaintenanceState.ON);
      }
      LOG.info("Decommissioning " + slaveCompType + " and marking Maintenance=ON on "+ sch.getHostName());
    }
    if (filteredIncludedHosts.contains(sch.getHostName())) {
      sch.setComponentAdminState(HostComponentAdminState.INSERVICE);
      if (alignMtnState) {
        sch.setMaintenanceState(MaintenanceState.OFF);
      }
      LOG.info("Recommissioning " + slaveCompType + " and marking Maintenance=OFF on "+ sch.getHostName());
    }
  }
  Map<String,ServiceComponentHost> masterSchs=masterComponent.getServiceComponentHosts();
  String primaryCandidate=null;
  for (  String hostName : masterSchs.keySet()) {
    if (primaryCandidate == null) {
      primaryCandidate=hostName;
    }
 else {
      ServiceComponentHost sch=masterSchs.get(hostName);
      if (sch.getState() == State.STARTED) {
        primaryCandidate=hostName;
      }
    }
  }
  StringBuilder commandDetail=getReadableDecommissionCommandDetail(actionExecutionContext,filteredIncludedHosts,listOfExcludedHosts);
  for (  String hostName : masterSchs.keySet()) {
    RequestResourceFilter commandFilter=new RequestResourceFilter(serviceName,masterComponent.getName(),Collections.singletonList(hostName));
    List<RequestResourceFilter> resourceFilters=new ArrayList<RequestResourceFilter>();
    resourceFilters.add(commandFilter);
    ActionExecutionContext commandContext=new ActionExecutionContext(clusterName,actionExecutionContext.getActionName(),resourceFilters);
    String clusterHostInfoJson=StageUtils.getGson().toJson(StageUtils.getClusterHostInfo(cluster));
    stage.setClusterHostInfo(clusterHostInfoJson);
    Map<String,String> commandParams=new HashMap<String,String>();
    if (serviceName.equals(Service.Type.HBASE.name())) {
      commandParams.put(DECOM_EXCLUDED_HOSTS,StringUtils.join(listOfExcludedHosts,','));
      if ((isDrainOnlyRequest != null) && isDrainOnlyRequest.equals("true")) {
        commandParams.put(HBASE_MARK_DRAINING_ONLY,isDrainOnlyRequest);
      }
 else {
        commandParams.put(HBASE_MARK_DRAINING_ONLY,"false");
      }
    }
    if (!serviceName.equals(Service.Type.HBASE.name()) || hostName.equals(primaryCandidate)) {
      commandParams.put(UPDATE_EXCLUDE_FILE_ONLY,"false");
      addCustomCommandAction(commandContext,commandFilter,stage,commandParams,commandDetail.toString());
    }
  }
}
