{
  if (actionRequest.getHosts().isEmpty()) {
    throw new AmbariException("Invalid request : No hosts specified.");
  }
  String serviceName=actionRequest.getServiceName();
  String componentName=actionRequest.getComponentName();
  String commandName=actionRequest.getCommandName();
  String clusterName=stage.getClusterName();
  Cluster cluster=clusters.getCluster(clusterName);
  StackId stackId=cluster.getDesiredStackVersion();
  AmbariMetaInfo ambariMetaInfo=amc.getAmbariMetaInfo();
  ServiceInfo serviceInfo=ambariMetaInfo.getServiceInfo(stackId.getStackName(),stackId.getStackVersion(),serviceName);
  StackInfo stackInfo=ambariMetaInfo.getStackInfo(stackId.getStackName(),stackId.getStackVersion());
  long nowTimestamp=System.currentTimeMillis();
  for (  String hostName : actionRequest.getHosts()) {
    Host host=clusters.getHost(hostName);
    stage.addHostRoleExecutionCommand(hostName,Role.valueOf(componentName),RoleCommand.CUSTOM_COMMAND,new ServiceComponentHostOpInProgressEvent(componentName,hostName,nowTimestamp),cluster.getClusterName(),serviceName);
    Map<String,Map<String,String>> configurations=new TreeMap<String,Map<String,String>>();
    Map<String,Map<String,String>> configTags=amc.findConfigurationTagsWithOverrides(cluster,hostName);
    HostRoleCommand cmd=stage.getHostRoleCommand(hostName,componentName);
    if (cmd != null) {
      cmd.setCommandDetail(commandDetail);
      cmd.setCustomCommandName(actionRequest.getCommandName());
    }
    ExecutionCommand execCmd=stage.getExecutionCommandWrapper(hostName,componentName).getExecutionCommand();
    execCmd.setConfigurations(configurations);
    execCmd.setConfigurationTags(configTags);
    execCmd.setClusterHostInfo(StageUtils.getClusterHostInfo(clusters.getHostsForCluster(clusterName),cluster));
    hostLevelParams.put(CUSTOM_COMMAND,commandName);
    hostLevelParams.put(REPO_INFO,getRepoInfo(cluster,host));
    execCmd.setHostLevelParams(hostLevelParams);
    Map<String,String> commandParams=new TreeMap<String,String>();
    commandParams.put(SCHEMA_VERSION,serviceInfo.getSchemaVersion());
    if (additionalCommandParams != null) {
      for (      String key : additionalCommandParams.keySet()) {
        commandParams.put(key,additionalCommandParams.get(key));
      }
    }
    String commandTimeout=configs.getDefaultAgentTaskTimeout();
    ComponentInfo componentInfo=ambariMetaInfo.getComponent(stackId.getStackName(),stackId.getStackVersion(),serviceName,componentName);
    if (serviceInfo.getSchemaVersion().equals(AmbariMetaInfo.SCHEMA_VERSION_2)) {
      CommandScriptDefinition script=componentInfo.getCommandScript();
      if (script != null) {
        commandParams.put(SCRIPT,script.getScript());
        commandParams.put(SCRIPT_TYPE,script.getScriptType().toString());
        if (script.getTimeout() > 0) {
          commandTimeout=String.valueOf(script.getTimeout());
        }
      }
 else {
        String message=String.format("Component %s has not command script " + "defined. It is not possible to send command for " + "this service",componentName);
        throw new AmbariException(message);
      }
    }
    commandParams.put(COMMAND_TIMEOUT,commandTimeout);
    commandParams.put(SERVICE_PACKAGE_FOLDER,serviceInfo.getServicePackageFolder());
    commandParams.put(HOOKS_FOLDER,stackInfo.getStackHooksFolder());
    execCmd.setCommandParams(commandParams);
    Map<String,String> roleParams=execCmd.getRoleParams();
    if (roleParams == null) {
      roleParams=new TreeMap<String,String>();
    }
    roleParams.put(COMPONENT_CATEGORY,componentInfo.getCategory());
    execCmd.setRoleParams(roleParams);
  }
}
