{
  ClusterVersionEntity cve=cluster.getCurrentClusterVersion();
  if (null == cve) {
    List<ClusterVersionEntity> list=clusterVersionDAO.findByClusterAndState(cluster.getClusterName(),RepositoryVersionState.INIT);
    if (!list.isEmpty()) {
      if (list.size() > 1) {
        throw new AmbariException(String.format("The cluster can only be initialized by one version: %s found",list.size()));
      }
 else {
        cve=list.get(0);
      }
    }
  }
  if (null == cve || null == cve.getRepositoryVersion()) {
    LOG.info("Cluster {} has no specific Repository Versions.  Using stack-defined values",cluster.getClusterName());
    return;
  }
  RepositoryVersionEntity rve=cve.getRepositoryVersion();
  for (  JsonElement e : jsonArray) {
    JsonObject obj=e.getAsJsonObject();
    String repoId=obj.has("repoId") ? obj.get("repoId").getAsString() : null;
    String repoName=obj.has("repoName") ? obj.get("repoName").getAsString() : null;
    String baseUrl=obj.has("baseUrl") ? obj.get("baseUrl").getAsString() : null;
    String osType=obj.has("osType") ? obj.get("osType").getAsString() : null;
    if (null == repoId || null == baseUrl || null == osType || null == repoName) {
      continue;
    }
    for (    OperatingSystemEntity ose : rve.getOperatingSystems()) {
      if (ose.getOsType().equals(osType)) {
        for (        RepositoryEntity re : ose.getRepositories()) {
          if (re.getName().equals(repoName) && re.getRepositoryId().equals(repoId) && !re.getBaseUrl().equals(baseUrl)) {
            obj.addProperty("baseUrl",re.getBaseUrl());
          }
        }
      }
    }
  }
}
