{
  if (actionRequest.getHosts().isEmpty()) {
    throw new AmbariException("Invalid request : No hosts specified.");
  }
  String serviceName=actionRequest.getServiceName();
  String componentName=actionRequest.getComponentName();
  String commandName=actionRequest.getCommandName();
  String clusterName=stage.getClusterName();
  Cluster cluster=clusters.getCluster(clusterName);
  StackId stackId=cluster.getDesiredStackVersion();
  AmbariMetaInfo ambariMetaInfo=amc.getAmbariMetaInfo();
  ServiceInfo serviceInfo=ambariMetaInfo.getServiceInfo(stackId.getStackName(),stackId.getStackVersion(),serviceName);
  long nowTimestamp=System.currentTimeMillis();
  for (  String hostName : actionRequest.getHosts()) {
    stage.addHostRoleExecutionCommand(hostName,Role.valueOf(componentName),RoleCommand.CUSTOM_COMMAND,new ServiceComponentHostOpInProgressEvent(componentName,hostName,nowTimestamp),cluster.getClusterName(),serviceName);
    Map<String,Map<String,String>> configurations=new TreeMap<String,Map<String,String>>();
    Map<String,Map<String,String>> configTags=amc.findConfigurationTagsWithOverrides(cluster,hostName);
    ExecutionCommand execCmd=stage.getExecutionCommandWrapper(hostName,componentName).getExecutionCommand();
    execCmd.setConfigurations(configurations);
    execCmd.setConfigurationTags(configTags);
    execCmd.setClusterHostInfo(StageUtils.getClusterHostInfo(clusters.getHostsForCluster(clusterName),cluster));
    if (hostLevelParams == null) {
      hostLevelParams=new TreeMap<String,String>();
    }
    hostLevelParams.put(JDK_LOCATION,amc.getJdkResourceUrl());
    hostLevelParams.put(JAVA_HOME,amc.getJavaHome());
    hostLevelParams.put(JDK_NAME,amc.getJDKName());
    hostLevelParams.put(JCE_NAME,amc.getJCEName());
    hostLevelParams.put(STACK_NAME,stackId.getStackName());
    hostLevelParams.put(STACK_VERSION,stackId.getStackVersion());
    hostLevelParams.put(CUSTOM_COMMAND,commandName);
    execCmd.setHostLevelParams(hostLevelParams);
    Map<String,String> commandParams=new TreeMap<String,String>();
    commandParams.put(SCHEMA_VERSION,serviceInfo.getSchemaVersion());
    String commandTimeout=COMMAND_TIMEOUT_DEFAULT;
    if (serviceInfo.getSchemaVersion().equals(AmbariMetaInfo.SCHEMA_VERSION_2)) {
      ComponentInfo componentInfo=ambariMetaInfo.getComponent(stackId.getStackName(),stackId.getStackVersion(),serviceName,componentName);
      CommandScriptDefinition script=componentInfo.getCommandScript();
      if (script != null) {
        commandParams.put(SCRIPT,script.getScript());
        commandParams.put(SCRIPT_TYPE,script.getScriptType().toString());
        commandTimeout=String.valueOf(script.getTimeout());
      }
 else {
        String message=String.format("Component %s has not command script " + "defined. It is not possible to run service check" + " for this service",componentName);
        throw new AmbariException(message);
      }
    }
    commandParams.put(COMMAND_TIMEOUT,commandTimeout);
    commandParams.put(SERVICE_METADATA_FOLDER,serviceInfo.getServiceMetadataFolder());
    execCmd.setCommandParams(commandParams);
  }
}
