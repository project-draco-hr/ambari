{
  final String serviceName=resourceFilter.getServiceName();
  final String componentName=resourceFilter.getComponentName();
  final String commandName=actionExecutionContext.getActionName();
  boolean retryAllowed=actionExecutionContext.isRetryAllowed();
  boolean autoSkipFailure=actionExecutionContext.isFailureAutoSkipped();
  String clusterName=stage.getClusterName();
  final Cluster cluster=clusters.getCluster(clusterName);
  Set<String> candidateHosts=new HashSet<String>(resourceFilter.getHostNames());
  Set<String> ignoredHosts=maintenanceStateHelper.filterHostsInMaintenanceState(candidateHosts,new MaintenanceStateHelper.HostPredicate(){
    @Override public boolean shouldHostBeRemoved(    final String hostname) throws AmbariException {
      return !maintenanceStateHelper.isOperationAllowed(cluster,actionExecutionContext.getOperationLevel(),resourceFilter,serviceName,componentName,hostname);
    }
  }
);
  Set<String> unhealthyHosts=getUnhealthyHosts(candidateHosts,actionExecutionContext,resourceFilter);
  if (!ignoredHosts.isEmpty()) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("While building the {} custom command for {}/{}, the following hosts were excluded: unhealthy[{}], maintenance[{}]",commandName,serviceName,componentName,StringUtils.join(unhealthyHosts,','),StringUtils.join(ignoredHosts,','));
    }
  }
 else   if (!unhealthyHosts.isEmpty()) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("While building the {} custom command for {}/{}, the following hosts were excluded: unhealthy[{}], maintenance[{}]",commandName,serviceName,componentName,StringUtils.join(unhealthyHosts,','),StringUtils.join(ignoredHosts,','));
    }
  }
 else   if (candidateHosts.isEmpty()) {
    String message=MessageFormat.format("While building the {0} custom command for {1}/{2}, there were no healthy eligible hosts",commandName,serviceName,componentName);
    throw new AmbariException(message);
  }
  StackId stackId=cluster.getDesiredStackVersion();
  AmbariMetaInfo ambariMetaInfo=managementController.getAmbariMetaInfo();
  ServiceInfo serviceInfo=ambariMetaInfo.getService(stackId.getStackName(),stackId.getStackVersion(),serviceName);
  StackInfo stackInfo=ambariMetaInfo.getStack(stackId.getStackName(),stackId.getStackVersion());
  CustomCommandDefinition customCommandDefinition=null;
  ComponentInfo ci=serviceInfo.getComponentByName(componentName);
  if (ci != null) {
    customCommandDefinition=ci.getCustomCommandByName(commandName);
  }
  long nowTimestamp=System.currentTimeMillis();
  for (  String hostName : candidateHosts) {
    Host host=clusters.getHost(hostName);
    stage.addHostRoleExecutionCommand(hostName,Role.valueOf(componentName),RoleCommand.CUSTOM_COMMAND,new ServiceComponentHostOpInProgressEvent(componentName,hostName,nowTimestamp),cluster.getClusterName(),serviceName,retryAllowed,autoSkipFailure);
    Map<String,Map<String,String>> configurations=new TreeMap<String,Map<String,String>>();
    Map<String,Map<String,Map<String,String>>> configurationAttributes=new TreeMap<String,Map<String,Map<String,String>>>();
    Map<String,Map<String,String>> configTags=managementController.findConfigurationTagsWithOverrides(cluster,hostName);
    HostRoleCommand cmd=stage.getHostRoleCommand(hostName,componentName);
    if (cmd != null) {
      cmd.setCommandDetail(commandDetail);
      cmd.setCustomCommandName(commandName);
    }
    ExecutionCommand execCmd=stage.getExecutionCommandWrapper(hostName,componentName).getExecutionCommand();
    if (customCommandDefinition != null && customCommandDefinition.isBackground()) {
      execCmd.setCommandType(AgentCommandType.BACKGROUND_EXECUTION_COMMAND);
    }
    execCmd.setConfigurations(configurations);
    execCmd.setConfigurationAttributes(configurationAttributes);
    execCmd.setConfigurationTags(configTags);
    if (actionExecutionContext.getParameters() != null && actionExecutionContext.getParameters().containsKey(KeyNames.REFRESH_ADITIONAL_COMPONENT_TAGS)) {
      execCmd.setForceRefreshConfigTags(parseAndValidateComponentsMapping(actionExecutionContext.getParameters().get(KeyNames.REFRESH_ADITIONAL_COMPONENT_TAGS)));
    }
    if (actionExecutionContext.getParameters() != null && actionExecutionContext.getParameters().containsKey(KeyNames.REFRESH_CONFIG_TAGS_BEFORE_EXECUTION)) {
      execCmd.setForceRefreshConfigTagsBeforeExecution(parseAndValidateComponentsMapping(actionExecutionContext.getParameters().get(KeyNames.REFRESH_CONFIG_TAGS_BEFORE_EXECUTION)));
    }
    Map<String,String> hostLevelParams=new TreeMap<String,String>();
    hostLevelParams.put(CUSTOM_COMMAND,commandName);
    hostLevelParams.put(REPO_INFO,getRepoInfo(cluster,host));
    hostLevelParams.put(STACK_NAME,stackId.getStackName());
    hostLevelParams.put(STACK_VERSION,stackId.getStackVersion());
    Set<String> userSet=configHelper.getPropertyValuesWithPropertyType(stackId,PropertyType.USER,cluster);
    String userList=gson.toJson(userSet);
    hostLevelParams.put(USER_LIST,userList);
    Set<String> groupSet=configHelper.getPropertyValuesWithPropertyType(stackId,PropertyType.GROUP,cluster);
    String groupList=gson.toJson(groupSet);
    hostLevelParams.put(GROUP_LIST,groupList);
    Set<String> notManagedHdfsPathSet=configHelper.getPropertyValuesWithPropertyType(stackId,PropertyType.NOT_MANAGED_HDFS_PATH,cluster);
    String notManagedHdfsPathList=gson.toJson(notManagedHdfsPathSet);
    hostLevelParams.put(NOT_MANAGED_HDFS_PATH_LIST,notManagedHdfsPathList);
    execCmd.setHostLevelParams(hostLevelParams);
    Map<String,String> commandParams=new TreeMap<String,String>();
    if (additionalCommandParams != null) {
      for (      String key : additionalCommandParams.keySet()) {
        commandParams.put(key,additionalCommandParams.get(key));
      }
    }
    boolean isInstallCommand=commandName.equals(RoleCommand.INSTALL.toString());
    String commandTimeout=configs.getDefaultAgentTaskTimeout(isInstallCommand);
    ComponentInfo componentInfo=ambariMetaInfo.getComponent(stackId.getStackName(),stackId.getStackVersion(),serviceName,componentName);
    if (serviceInfo.getSchemaVersion().equals(AmbariMetaInfo.SCHEMA_VERSION_2)) {
      CommandScriptDefinition script=componentInfo.getCommandScript();
      if (script != null) {
        commandParams.put(SCRIPT,script.getScript());
        commandParams.put(SCRIPT_TYPE,script.getScriptType().toString());
        if (script.getTimeout() > 0) {
          commandTimeout=String.valueOf(script.getTimeout());
        }
      }
 else {
        String message=String.format("Component %s has not command script " + "defined. It is not possible to send command for " + "this service",componentName);
        throw new AmbariException(message);
      }
    }
    commandParams.put(COMMAND_TIMEOUT,commandTimeout);
    commandParams.put(SERVICE_PACKAGE_FOLDER,serviceInfo.getServicePackageFolder());
    commandParams.put(HOOKS_FOLDER,stackInfo.getStackHooksFolder());
    ClusterVersionEntity currentClusterVersion=cluster.getCurrentClusterVersion();
    if (currentClusterVersion != null) {
      commandParams.put(KeyNames.VERSION,currentClusterVersion.getRepositoryVersion().getVersion());
    }
    execCmd.setCommandParams(commandParams);
    Map<String,String> roleParams=execCmd.getRoleParams();
    if (roleParams == null) {
      roleParams=new TreeMap<String,String>();
    }
    roleParams.put(COMPONENT_CATEGORY,componentInfo.getCategory());
    execCmd.setRoleParams(roleParams);
  }
}
