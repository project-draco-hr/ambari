{
  String clusterName=stage.getClusterName();
  Cluster cluster=clusters.getCluster(clusterName);
  StackId stackId=cluster.getDesiredStackVersion();
  AmbariMetaInfo ambariMetaInfo=managementController.getAmbariMetaInfo();
  ServiceInfo serviceInfo=ambariMetaInfo.getService(stackId.getStackName(),stackId.getStackVersion(),serviceName);
  StackInfo stackInfo=ambariMetaInfo.getStack(stackId.getStackName(),stackId.getStackVersion());
  stage.addHostRoleExecutionCommand(hostname,Role.valueOf(smokeTestRole),RoleCommand.SERVICE_CHECK,new ServiceComponentHostOpInProgressEvent(componentName,hostname,nowTimestamp),cluster.getClusterName(),serviceName,retryAllowed,autoSkipFailure);
  HostRoleCommand hrc=stage.getHostRoleCommand(hostname,smokeTestRole);
  if (hrc != null) {
    hrc.setCommandDetail(String.format("%s %s",RoleCommand.SERVICE_CHECK.toString(),serviceName));
  }
  Map<String,Map<String,String>> configurations=new TreeMap<String,Map<String,String>>();
  Map<String,Map<String,Map<String,String>>> configurationAttributes=new TreeMap<String,Map<String,Map<String,String>>>();
  Map<String,Map<String,String>> configTags=new TreeMap<String,Map<String,String>>();
  ExecutionCommand execCmd=stage.getExecutionCommandWrapper(hostname,smokeTestRole).getExecutionCommand();
  if (actionParameters != null && actionParameters.containsKey(KeyNames.REFRESH_CONFIG_TAGS_BEFORE_EXECUTION)) {
    execCmd.setForceRefreshConfigTagsBeforeExecution(true);
  }
  if (!execCmd.getForceRefreshConfigTagsBeforeExecution()) {
    configTags=managementController.findConfigurationTagsWithOverrides(cluster,hostname);
  }
  execCmd.setConfigurations(configurations);
  execCmd.setConfigurationAttributes(configurationAttributes);
  execCmd.setConfigurationTags(configTags);
  execCmd.setClusterHostInfo(StageUtils.getClusterHostInfo(cluster));
  for (  ServiceComponentHost sch : cluster.getServiceComponentHosts(hostname)) {
    execCmd.getLocalComponents().add(sch.getServiceComponentName());
  }
  Map<String,String> commandParams=new TreeMap<String,String>();
  Map<String,ServiceInfo> serviceInfos=ambariMetaInfo.getServices(stackId.getStackName(),stackId.getStackVersion());
  for (  ServiceInfo serviceInfoInstance : serviceInfos.values()) {
    if (serviceInfoInstance.getServiceType() != null) {
      LOG.debug("Adding {} to command parameters for {}",serviceInfoInstance.getServiceType(),serviceInfoInstance.getName());
      commandParams.put("dfs_type",serviceInfoInstance.getServiceType());
      break;
    }
  }
  String commandTimeout=configs.getDefaultAgentTaskTimeout(false);
  if (serviceInfo.getSchemaVersion().equals(AmbariMetaInfo.SCHEMA_VERSION_2)) {
    CommandScriptDefinition script=serviceInfo.getCommandScript();
    if (script != null) {
      commandParams.put(SCRIPT,script.getScript());
      commandParams.put(SCRIPT_TYPE,script.getScriptType().toString());
      if (script.getTimeout() > 0) {
        commandTimeout=String.valueOf(script.getTimeout());
      }
    }
 else {
      String message=String.format("Service %s has no command script " + "defined. It is not possible to run service check" + " for this service",serviceName);
      throw new AmbariException(message);
    }
  }
  commandParams.put(COMMAND_TIMEOUT,commandTimeout);
  commandParams.put(SERVICE_PACKAGE_FOLDER,serviceInfo.getServicePackageFolder());
  commandParams.put(HOOKS_FOLDER,stackInfo.getStackHooksFolder());
  execCmd.setCommandParams(commandParams);
  if (actionParameters != null) {
    execCmd.setRoleParams(actionParameters);
  }
}
