def reqSignCrt(self):
    sign_crt_req_url = ((self.server_url + '/certs/') + hostname.hostname())
    agent_crt_req_f = open(self.getAgentCrtReqName())
    agent_crt_req_content = agent_crt_req_f.read()
    passphrase_env_var = self.config.get('security', 'passphrase_env_var_name')
    passphrase = os.environ[passphrase_env_var]
    register_data = {'csr': agent_crt_req_content, 'passphrase': passphrase, }
    data = json.dumps(register_data)
    proxy_handler = urllib2.ProxyHandler({})
    opener = urllib2.build_opener(proxy_handler)
    urllib2.install_opener(opener)
    req = urllib2.Request(sign_crt_req_url, data, {'Content-Type': 'application/json', })
    f = urllib2.urlopen(req)
    response = f.read()
    f.close()
    try:
        data = json.loads(response)
        logger.debug(('Sign response from Server: \n' + pprint.pformat(data)))
    except Exception:
        logger.warn(('Malformed response! data: ' + str(data)))
        data = {'result': 'ERROR', }
    result = data['result']
    if (result == 'OK'):
        agentCrtContent = data['signedCa']
        agentCrtF = open(self.getAgentCrtName(), 'w')
        agentCrtF.write(agentCrtContent)
    else:
        logger.error('Certificate signing failed.\nIn order to receive a new agent certificate, remove existing certificate file from keys directory. As a workaround you can turn off two-way SSL authentication in server configuration(ambari.properties) \nExiting..')
        raise ssl.SSLError
