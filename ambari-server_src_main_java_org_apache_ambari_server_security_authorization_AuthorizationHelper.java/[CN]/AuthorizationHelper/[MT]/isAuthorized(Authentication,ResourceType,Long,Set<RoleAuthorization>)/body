{
  if ((requiredAuthorizations == null) || requiredAuthorizations.isEmpty()) {
    return true;
  }
 else   if (authentication == null) {
    return false;
  }
 else {
    for (    GrantedAuthority grantedAuthority : authentication.getAuthorities()) {
      AmbariGrantedAuthority ambariGrantedAuthority=(AmbariGrantedAuthority)grantedAuthority;
      PrivilegeEntity privilegeEntity=ambariGrantedAuthority.getPrivilegeEntity();
      ResourceEntity privilegeResource=privilegeEntity.getResource();
      ResourceType privilegeResourceType=ResourceType.translate(privilegeResource.getResourceType().getName());
      boolean resourceOK;
      if (ResourceType.AMBARI == privilegeResourceType) {
        resourceOK=true;
      }
 else       if ((resourceType == null) || (resourceType == privilegeResourceType)) {
        resourceOK=(resourceId == null) || resourceId.equals(privilegeResource.getId());
      }
 else {
        resourceOK=false;
      }
      if (resourceOK) {
        PermissionEntity permission=privilegeEntity.getPermission();
        Collection<RoleAuthorizationEntity> userAuthorizations=(permission == null) ? null : permission.getAuthorizations();
        if (userAuthorizations != null) {
          for (          RoleAuthorizationEntity userAuthorization : userAuthorizations) {
            try {
              if (requiredAuthorizations.contains(RoleAuthorization.translate(userAuthorization.getAuthorizationId()))) {
                return true;
              }
            }
 catch (            IllegalArgumentException e) {
              LOG.warn("Invalid authorization name, '{}'... ignoring.",userAuthorization.getAuthorizationId());
            }
          }
        }
      }
    }
    if (resourceId == null) {
      return false;
    }
    ViewInstanceDAO viewInstanceDAO=viewInstanceDAOProvider.get();
    ViewInstanceEntity instanceEntity=viewInstanceDAO.findByResourceId(resourceId);
    if (instanceEntity == null || instanceEntity.getClusterHandle() == null) {
      return false;
    }
    PrivilegeDAO privilegeDAO=privilegeDAOProvider.get();
    final Set<String> privilegeNames=FluentIterable.from(privilegeDAO.findByResourceId(resourceId)).filter(ClusterInheritedPermissionHelper.privilegeWithClusterInheritedPermissionTypePredicate).transform(ClusterInheritedPermissionHelper.permissionNameFromClusterInheritedPrivilege).toSet();
    return FluentIterable.from(authentication.getAuthorities()).filter(new Predicate<GrantedAuthority>(){
      @Override public boolean apply(      GrantedAuthority grantedAuthority){
        AmbariGrantedAuthority authority=(AmbariGrantedAuthority)grantedAuthority;
        PrivilegeEntity privilege=authority.getPrivilegeEntity();
        String resourceTypeName=privilege.getResource().getResourceType().getName();
        return ResourceType.translate(resourceTypeName) == ResourceType.CLUSTER;
      }
    }
).transform(new Function<GrantedAuthority,PermissionEntity>(){
      @Override public PermissionEntity apply(      GrantedAuthority grantedAuthority){
        AmbariGrantedAuthority authority=(AmbariGrantedAuthority)grantedAuthority;
        PrivilegeEntity privilege=authority.getPrivilegeEntity();
        return privilege.getPermission();
      }
    }
).anyMatch(new Predicate<PermissionEntity>(){
      @Override public boolean apply(      PermissionEntity input){
        return privilegeNames.contains(input.getPermissionName());
      }
    }
);
  }
}
