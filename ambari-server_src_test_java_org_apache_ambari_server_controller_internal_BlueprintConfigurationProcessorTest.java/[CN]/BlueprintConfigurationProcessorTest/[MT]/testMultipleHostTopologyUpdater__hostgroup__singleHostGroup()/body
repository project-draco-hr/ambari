{
  final String typeName="hbase-site";
  final String propertyName="hbase.zookeeper.quorum";
  final String originalValue="%HOSTGROUP::group1%";
  final String component1="ZOOKEEPER_SERVER";
  Map<String,Map<String,String>> properties=new HashMap<String,Map<String,String>>();
  Map<String,String> typeProps=new HashMap<String,String>();
  typeProps.put(propertyName,originalValue);
  properties.put(typeName,typeProps);
  Configuration clusterConfig=new Configuration(properties,Collections.<String,Map<String,Map<String,String>>>emptyMap());
  Collection<String> hgComponents=new HashSet<String>();
  hgComponents.add(component1);
  Set<String> hosts1=new HashSet<String>();
  hosts1.add("testhost1a");
  hosts1.add("testhost1b");
  hosts1.add("testhost1c");
  TestHostGroup group1=new TestHostGroup("group1",hgComponents,hosts1);
  Collection<TestHostGroup> hostGroups=new HashSet<TestHostGroup>();
  hostGroups.add(group1);
  ClusterTopology topology=createClusterTopology(bp,clusterConfig,hostGroups);
  BlueprintConfigurationProcessor.MultipleHostTopologyUpdater mhtu=new BlueprintConfigurationProcessor.MultipleHostTopologyUpdater(component1);
  String newValue=mhtu.updateForClusterCreate(propertyName,originalValue,properties,topology);
  List<String> hostArray=Arrays.asList(newValue.split(","));
  Assert.assertTrue(hostArray.containsAll(hosts1) && hosts1.containsAll(hostArray));
}
