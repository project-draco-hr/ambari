{
  final String rangerAdminConfigType="admin-properties";
  Map<String,Map<String,String>> properties=new HashMap<String,Map<String,String>>();
  Map<String,String> rangerAdminProperties=new HashMap<String,String>();
  properties.put(rangerAdminConfigType,rangerAdminProperties);
  rangerAdminProperties.put("policymgr_external_url","http://%HOSTGROUP::group1%:100");
  Map<String,Map<String,String>> parentProperties=new HashMap<String,Map<String,String>>();
  Configuration parentClusterConfig=new Configuration(parentProperties,Collections.<String,Map<String,Map<String,String>>>emptyMap());
  Configuration clusterConfig=new Configuration(properties,Collections.<String,Map<String,Map<String,String>>>emptyMap(),parentClusterConfig);
  Collection<String> rangerComponents=new HashSet<String>();
  rangerComponents.add("RANGER_ADMIN");
  rangerComponents.add("RANGER_USERSYNC");
  TestHostGroup group1=new TestHostGroup("group1",rangerComponents,Collections.singleton("host1"));
  Collection<TestHostGroup> hostGroups=Collections.singletonList(group1);
  ClusterTopology topology=createClusterTopology(bp,clusterConfig,hostGroups);
  BlueprintConfigurationProcessor configProcessor=new BlueprintConfigurationProcessor(topology);
  configProcessor.doUpdateForClusterCreate();
  assertEquals("http://host1:100",clusterConfig.getPropertyValue(rangerAdminConfigType,"policymgr_external_url"));
}
