{
  final String expectedHostGroupName="host_group_1";
  final String expectedPropertyValue="hive.metastore.local=false,hive.metastore.uris=thrift://headnode0.ivantestcluster2-ssh.d1.internal.cloudapp.net:9083,hive.user.install.directory=/user";
  EasyMockSupport mockSupport=new EasyMockSupport();
  HostGroup mockHostGroupOne=mockSupport.createMock(HostGroup.class);
  expect(mockHostGroupOne.getComponents()).andReturn(Collections.singleton("HIVE_METASTORE")).atLeastOnce();
  expect(mockHostGroupOne.getHostInfo()).andReturn(Collections.singleton("test-host-one")).atLeastOnce();
  mockSupport.replayAll();
  Map<String,Map<String,String>> configProperties=new HashMap<String,Map<String,String>>();
  Map<String,String> webHCatSiteProperties=new HashMap<String,String>();
  configProperties.put("webhcat-site",webHCatSiteProperties);
  webHCatSiteProperties.put("templeton.hive.properties",expectedPropertyValue);
  BlueprintConfigurationProcessor configProcessor=new BlueprintConfigurationProcessor(configProperties);
  Map<String,HostGroup> mapOfHostGroups=new HashMap<String,HostGroup>();
  mapOfHostGroups.put(expectedHostGroupName,mockHostGroupOne);
  configProcessor.doUpdateForClusterCreate(mapOfHostGroups,null);
  assertEquals("Unexpected config update for templeton.hive.properties",expectedPropertyValue,webHCatSiteProperties.get("templeton.hive.properties"));
  mockSupport.verifyAll();
}
