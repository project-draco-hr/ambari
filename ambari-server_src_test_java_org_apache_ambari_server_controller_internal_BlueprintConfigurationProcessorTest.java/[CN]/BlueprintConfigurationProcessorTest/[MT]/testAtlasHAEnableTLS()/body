{
  final String expectedHostGroupName="host_group_1";
  final String host1="c6401.ambari.apache.org";
  final String host2="c6402.ambari.apache.org";
  final String host3="c6403.ambari.apache.org";
  Map<String,Map<String,String>> properties=new HashMap<String,Map<String,String>>();
  Map<String,String> atlasProperties=new HashMap<String,String>();
  properties.put("application-properties",atlasProperties);
  atlasProperties.put("atlas.server.ids","");
  atlasProperties.put("atlas.server.address.id1","");
  atlasProperties.put("atlas.server.http.port","21000");
  atlasProperties.put("atlas.server.https.port","21443");
  atlasProperties.put("atlas.enableTLS","true");
  Configuration clusterConfig=new Configuration(properties,Collections.<String,Map<String,Map<String,String>>>emptyMap());
  Collection<String> hgComponents=new HashSet<String>();
  hgComponents.add("ATLAS_SERVER");
  List<String> hosts=new ArrayList<String>();
  hosts.add(host1);
  hosts.add(host2);
  hosts.add(host3);
  TestHostGroup group1=new TestHostGroup(expectedHostGroupName,hgComponents,hosts);
  Collection<TestHostGroup> hostGroups=new HashSet<TestHostGroup>();
  hostGroups.add(group1);
  ClusterTopology topology=createClusterTopology(bp,clusterConfig,hostGroups);
  BlueprintConfigurationProcessor updater=new BlueprintConfigurationProcessor(topology);
  updater.doUpdateForClusterCreate();
  assertEquals("id1,id2,id3",atlasProperties.get("atlas.server.ids"));
  List<String> hostArray=Arrays.asList(atlasProperties.get("atlas.server.address.id1").split("\natlas.server.address.id.="));
  List<String> expected=Arrays.asList("c6401.ambari.apache.org:21443","c6402.ambari.apache.org:21443","c6403.ambari.apache.org:21443");
  Assert.assertTrue(hostArray.containsAll(expected) && expected.containsAll(hostArray));
}
