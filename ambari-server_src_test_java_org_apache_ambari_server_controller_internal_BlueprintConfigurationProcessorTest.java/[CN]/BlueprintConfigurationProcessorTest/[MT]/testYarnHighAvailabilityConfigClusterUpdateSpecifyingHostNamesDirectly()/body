{
  final String expectedHostName="c6401.apache.ambari.org";
  final String expectedPortNum="808080";
  final String expectedHostGroupName="host_group_1";
  final String expectedHostGroupNameTwo="host_group_2";
  EasyMockSupport mockSupport=new EasyMockSupport();
  HostGroup mockHostGroupOne=mockSupport.createMock(HostGroup.class);
  HostGroup mockHostGroupTwo=mockSupport.createMock(HostGroup.class);
  Stack mockStack=mockSupport.createMock(Stack.class);
  Set<String> setOfComponents=new HashSet<String>();
  setOfComponents.add("RESOURCEMANAGER");
  setOfComponents.add("APP_TIMELINE_SERVER");
  setOfComponents.add("HISTORYSERVER");
  expect(mockHostGroupOne.getComponents()).andReturn(setOfComponents).atLeastOnce();
  expect(mockHostGroupOne.getHostInfo()).andReturn(Collections.singleton(expectedHostName)).atLeastOnce();
  expect(mockHostGroupTwo.getComponents()).andReturn(Collections.singleton("RESOURCEMANAGER")).atLeastOnce();
  expect(mockStack.getCardinality("RESOURCEMANAGER")).andReturn(new Cardinality("1-2")).atLeastOnce();
  mockSupport.replayAll();
  Map<String,Map<String,String>> configProperties=new HashMap<String,Map<String,String>>();
  Map<String,String> yarnSiteProperties=new HashMap<String,String>();
  configProperties.put("yarn-site",yarnSiteProperties);
  yarnSiteProperties.put("yarn.log.server.url","http://" + expectedHostName + ":19888/jobhistory/logs");
  yarnSiteProperties.put("yarn.resourcemanager.hostname",expectedHostName);
  yarnSiteProperties.put("yarn.resourcemanager.resource-tracker.address",expectedHostName + ":" + expectedPortNum);
  yarnSiteProperties.put("yarn.resourcemanager.webapp.address",expectedHostName + ":" + expectedPortNum);
  yarnSiteProperties.put("yarn.resourcemanager.scheduler.address",expectedHostName + ":" + expectedPortNum);
  yarnSiteProperties.put("yarn.resourcemanager.address",expectedHostName + ":" + expectedPortNum);
  yarnSiteProperties.put("yarn.resourcemanager.admin.address",expectedHostName + ":" + expectedPortNum);
  yarnSiteProperties.put("yarn.timeline-service.address",expectedHostName + ":" + expectedPortNum);
  yarnSiteProperties.put("yarn.timeline-service.webapp.address",expectedHostName + ":" + expectedPortNum);
  yarnSiteProperties.put("yarn.timeline-service.webapp.https.address",expectedHostName + ":" + expectedPortNum);
  yarnSiteProperties.put("yarn.resourcemanager.ha.enabled","true");
  BlueprintConfigurationProcessor configProcessor=new BlueprintConfigurationProcessor(configProperties);
  Map<String,HostGroup> mapOfHostGroups=new HashMap<String,HostGroup>();
  mapOfHostGroups.put(expectedHostGroupName,mockHostGroupOne);
  mapOfHostGroups.put(expectedHostGroupNameTwo,mockHostGroupTwo);
  configProcessor.doUpdateForClusterCreate(mapOfHostGroups,mockStack);
  assertEquals("Yarn Log Server URL was incorrectly updated","http://" + expectedHostName + ":19888/jobhistory/logs",yarnSiteProperties.get("yarn.log.server.url"));
  assertEquals("Yarn ResourceManager hostname was incorrectly exported",expectedHostName,yarnSiteProperties.get("yarn.resourcemanager.hostname"));
  assertEquals("Yarn ResourceManager tracker address was incorrectly updated",createHostAddress(expectedHostName,expectedPortNum),yarnSiteProperties.get("yarn.resourcemanager.resource-tracker.address"));
  assertEquals("Yarn ResourceManager webapp address was incorrectly updated",createHostAddress(expectedHostName,expectedPortNum),yarnSiteProperties.get("yarn.resourcemanager.webapp.address"));
  assertEquals("Yarn ResourceManager scheduler address was incorrectly updated",createHostAddress(expectedHostName,expectedPortNum),yarnSiteProperties.get("yarn.resourcemanager.scheduler.address"));
  assertEquals("Yarn ResourceManager address was incorrectly updated",createHostAddress(expectedHostName,expectedPortNum),yarnSiteProperties.get("yarn.resourcemanager.address"));
  assertEquals("Yarn ResourceManager admin address was incorrectly updated",createHostAddress(expectedHostName,expectedPortNum),yarnSiteProperties.get("yarn.resourcemanager.admin.address"));
  assertEquals("Yarn ResourceManager timeline-service address was incorrectly updated",createHostAddress(expectedHostName,expectedPortNum),yarnSiteProperties.get("yarn.timeline-service.address"));
  assertEquals("Yarn ResourceManager timeline webapp address was incorrectly updated",createHostAddress(expectedHostName,expectedPortNum),yarnSiteProperties.get("yarn.timeline-service.webapp.address"));
  assertEquals("Yarn ResourceManager timeline webapp HTTPS address was incorrectly updated",createHostAddress(expectedHostName,expectedPortNum),yarnSiteProperties.get("yarn.timeline-service.webapp.https.address"));
  mockSupport.verifyAll();
}
