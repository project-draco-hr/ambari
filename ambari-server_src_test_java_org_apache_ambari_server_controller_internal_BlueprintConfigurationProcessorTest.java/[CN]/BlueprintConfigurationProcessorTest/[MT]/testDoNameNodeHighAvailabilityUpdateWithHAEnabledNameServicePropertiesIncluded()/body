{
  final String expectedNameService="mynameservice";
  final String expectedHostName="c6401.apache.ambari.org";
  EasyMockSupport mockSupport=new EasyMockSupport();
  HostGroup mockHostGroupOne=mockSupport.createMock(HostGroup.class);
  expect(mockHostGroupOne.getHostInfo()).andReturn(Arrays.asList(expectedHostName,"serverTwo")).atLeastOnce();
  mockSupport.replayAll();
  Map<String,Map<String,String>> configProperties=new HashMap<String,Map<String,String>>();
  Map<String,String> coreSiteProperties=new HashMap<String,String>();
  Map<String,String> hbaseSiteProperties=new HashMap<String,String>();
  configProperties.put("core-site",coreSiteProperties);
  configProperties.put("hbase-site",hbaseSiteProperties);
  coreSiteProperties.put("fs.defaultFS","hdfs://" + expectedNameService);
  hbaseSiteProperties.put("hbase.rootdir","hdfs://" + expectedNameService + "/apps/hbase/data");
  BlueprintConfigurationProcessor configProcessor=new BlueprintConfigurationProcessor(configProperties);
  configProcessor.doUpdateForBlueprintExport(Arrays.asList(mockHostGroupOne));
  assertEquals("Property containing an HA nameservice (fs.defaultFS), was not correctly exported by the processor","hdfs://" + expectedNameService,coreSiteProperties.get("fs.defaultFS"));
  assertEquals("Property containing an HA nameservice (hbase.rootdir), was not correctly exported by the processor","hdfs://" + expectedNameService + "/apps/hbase/data",hbaseSiteProperties.get("hbase.rootdir"));
  mockSupport.verifyAll();
}
