{
  expect(bp.getStack()).andReturn(stack).anyTimes();
  expect(bp.getName()).andReturn("test-bp").anyTimes();
  expect(stack.getName()).andReturn("testStack").anyTimes();
  expect(stack.getVersion()).andReturn("1").anyTimes();
  expect(stack.isMasterComponent((String)anyObject())).andReturn(false).anyTimes();
  expect(serviceInfo.getRequiredProperties()).andReturn(Collections.<String,org.apache.ambari.server.state.PropertyInfo>emptyMap()).anyTimes();
  expect(serviceInfo.getRequiredServices()).andReturn(Collections.<String>emptyList()).anyTimes();
  Collection<String> hdfsComponents=new HashSet<String>();
  hdfsComponents.add("NAMENODE");
  hdfsComponents.add("SECONDARY_NAMENODE");
  hdfsComponents.add("DATANODE");
  hdfsComponents.add("HDFS_CLIENT");
  serviceComponents.put("HDFS",hdfsComponents);
  Collection<String> yarnComponents=new HashSet<String>();
  yarnComponents.add("RESOURCEMANAGER");
  yarnComponents.add("NODEMANAGER");
  yarnComponents.add("YARN_CLIENT");
  yarnComponents.add("APP_TIMELINE_SERVER");
  serviceComponents.put("YARN",yarnComponents);
  Collection<String> mrComponents=new HashSet<String>();
  mrComponents.add("MAPREDUCE2_CLIENT");
  mrComponents.add("HISTORY_SERVER");
  serviceComponents.put("MAPREDUCE2",mrComponents);
  Collection<String> zkComponents=new HashSet<String>();
  zkComponents.add("ZOOKEEPER_SERVER");
  zkComponents.add("ZOOKEEPER_CLIENT");
  serviceComponents.put("ZOOKEEPER",zkComponents);
  Collection<String> hiveComponents=new HashSet<String>();
  hiveComponents.add("MYSQL_SERVER");
  hiveComponents.add("HIVE_METASTORE");
  serviceComponents.put("HIVE",hiveComponents);
  Collection<String> falconComponents=new HashSet<String>();
  falconComponents.add("FALCON_SERVER");
  falconComponents.add("FALCON_CLIENT");
  serviceComponents.put("FALCON",falconComponents);
  Collection<String> gangliaComponents=new HashSet<String>();
  gangliaComponents.add("GANGLIA_SERVER");
  gangliaComponents.add("GANGLIA_CLIENT");
  serviceComponents.put("GANGLIA",gangliaComponents);
  Collection<String> kafkaComponents=new HashSet<String>();
  kafkaComponents.add("KAFKA_BROKER");
  serviceComponents.put("KAFKA",kafkaComponents);
  Collection<String> knoxComponents=new HashSet<String>();
  knoxComponents.add("KNOX_GATEWAY");
  serviceComponents.put("KNOX",knoxComponents);
  Collection<String> oozieComponents=new HashSet<String>();
  oozieComponents.add("OOZIE_SERVER");
  oozieComponents.add("OOZIE_CLIENT");
  serviceComponents.put("OOZIE",oozieComponents);
  for (  Map.Entry<String,Collection<String>> entry : serviceComponents.entrySet()) {
    String service=entry.getKey();
    for (    String component : entry.getValue()) {
      expect(stack.getServiceForComponent(component)).andReturn(service).anyTimes();
    }
  }
}
