{
  final String typeName="hbase-site";
  final String propertyName="hbase.zookeeper.quorum";
  final String originalValue="localhost";
  final String component1="ZOOKEEPER_SERVER";
  final String component2="ZOOKEEPER_CLIENT";
  Map<String,Map<String,String>> properties=new HashMap<String,Map<String,String>>();
  Map<String,String> typeProps=new HashMap<String,String>();
  typeProps.put(propertyName,originalValue);
  properties.put(typeName,typeProps);
  Configuration clusterConfig=new Configuration(properties,Collections.<String,Map<String,Map<String,String>>>emptyMap());
  Collection<String> hgComponents=new HashSet<String>();
  hgComponents.add(component1);
  Set<String> hosts1=new HashSet<String>();
  hosts1.add("testhost1a");
  TestHostGroup group1=new TestHostGroup("group1",hgComponents,hosts1);
  Collection<String> hgComponents2=new HashSet<String>();
  hgComponents2.add(component2);
  Set<String> hosts2=new HashSet<String>();
  hosts2.add("testhost2");
  TestHostGroup group2=new TestHostGroup("group2",hgComponents2,hosts2);
  Collection<TestHostGroup> hostGroups=new HashSet<TestHostGroup>();
  hostGroups.add(group1);
  hostGroups.add(group2);
  ClusterTopology topology=createClusterTopology(bp,clusterConfig,hostGroups);
  BlueprintConfigurationProcessor.MultipleHostTopologyUpdater mhtu=new BlueprintConfigurationProcessor.MultipleHostTopologyUpdater(component1);
  String newValue=mhtu.updateForClusterCreate(propertyName,originalValue,properties,topology);
  assertEquals("testhost1a",newValue);
}
