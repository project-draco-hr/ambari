{
  Map<String,Map<String,String>> properties=new HashMap<String,Map<String,String>>();
  Map<String,String> hiveSiteProps=new HashMap<String,String>();
  hiveSiteProps.put("javax.jdo.option.ConnectionURL","jdbc:mysql://%HOSTGROUP::group1%/hive?createDatabaseIfNotExist=true");
  Map<String,String> hiveEnvProps=new HashMap<String,String>();
  hiveEnvProps.put("hive_database","New MySQL Database");
  properties.put("hive-site",hiveSiteProps);
  properties.put("hive-env",hiveEnvProps);
  Configuration clusterConfig=new Configuration(properties,Collections.<String,Map<String,Map<String,String>>>emptyMap());
  Collection<String> hgComponents=new HashSet<String>();
  hgComponents.add("NAMENODE");
  hgComponents.add("SECONDARY_NAMENODE");
  hgComponents.add("RESOURCEMANAGER");
  hgComponents.add("MYSQL_SERVER");
  TestHostGroup group1=new TestHostGroup("group1",hgComponents,Collections.singleton("testhost"));
  Collection<String> hgComponents2=new HashSet<String>();
  hgComponents2.add("DATANODE");
  hgComponents2.add("HDFS_CLIENT");
  TestHostGroup group2=new TestHostGroup("group2",hgComponents2,Collections.singleton("testhost2"));
  Collection<TestHostGroup> hostGroups=new HashSet<TestHostGroup>();
  hostGroups.add(group1);
  hostGroups.add(group2);
  ClusterTopology topology=createClusterTopology("c1",bp,clusterConfig,hostGroups);
  BlueprintConfigurationProcessor updater=new BlueprintConfigurationProcessor(topology);
  updater.doUpdateForClusterCreate();
  String updatedVal=topology.getConfiguration().getFullProperties().get("hive-site").get("javax.jdo.option.ConnectionURL");
  assertEquals("jdbc:mysql://testhost/hive?createDatabaseIfNotExist=true",updatedVal);
}
