{
  final String expectedHostName="c6401.apache.ambari.org";
  final String expectedPortNum="808080";
  final String expectedHostGroupName="host_group_1";
  EasyMockSupport mockSupport=new EasyMockSupport();
  HostGroup mockHostGroupOne=mockSupport.createMock(HostGroup.class);
  expect(mockHostGroupOne.getHostInfo()).andReturn(Arrays.asList(expectedHostName,"serverTwo")).atLeastOnce();
  expect(mockHostGroupOne.getName()).andReturn(expectedHostGroupName).atLeastOnce();
  mockSupport.replayAll();
  Map<String,Map<String,String>> configProperties=new HashMap<String,Map<String,String>>();
  Map<String,String> falconStartupProperties=new HashMap<String,String>();
  configProperties.put("falcon-startup.properties",falconStartupProperties);
  falconStartupProperties.put("*.broker.url",expectedHostName + ":" + expectedPortNum);
  falconStartupProperties.put("*.falcon.service.authentication.kerberos.principal","falcon/" + expectedHostName + "@EXAMPLE.COM");
  falconStartupProperties.put("*.falcon.http.authentication.kerberos.principal","HTTP/" + expectedHostName + "@EXAMPLE.COM");
  BlueprintConfigurationProcessor configProcessor=new BlueprintConfigurationProcessor(configProperties);
  configProcessor.doUpdateForBlueprintExport(Arrays.asList(mockHostGroupOne));
  assertEquals("Falcon Broker URL property not properly exported",createExportedAddress(expectedPortNum,expectedHostGroupName),falconStartupProperties.get("*.broker.url"));
  assertEquals("Falcon Kerberos Principal property not properly exported","falcon/" + "%HOSTGROUP::" + expectedHostGroupName + "%"+ "@EXAMPLE.COM",falconStartupProperties.get("*.falcon.service.authentication.kerberos.principal"));
  assertEquals("Falcon Kerberos HTTP Principal property not properly exported","HTTP/" + "%HOSTGROUP::" + expectedHostGroupName + "%"+ "@EXAMPLE.COM",falconStartupProperties.get("*.falcon.http.authentication.kerberos.principal"));
  mockSupport.verifyAll();
}
