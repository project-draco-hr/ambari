{
  final String expectedNameService="mynameservice";
  final String expectedHostName="serverThree";
  final String expectedHostNameTwo="serverFour";
  final String expectedPortNum="808080";
  final String expectedNodeOne="nn1";
  final String expectedNodeTwo="nn2";
  final String expectedHostGroupName="host_group_1";
  Map<String,Map<String,String>> properties=new HashMap<String,Map<String,String>>();
  Map<String,String> hdfsSiteProperties=new HashMap<String,String>();
  Map<String,String> hadoopEnvProperties=new HashMap<String,String>();
  properties.put("hdfs-site",hdfsSiteProperties);
  properties.put("hadoop-env",hadoopEnvProperties);
  hdfsSiteProperties.put("dfs.nameservices",expectedNameService);
  hdfsSiteProperties.put("dfs.ha.namenodes.mynameservice",expectedNodeOne + ", " + expectedNodeTwo);
  hdfsSiteProperties.put("dfs.namenode.https-address." + expectedNameService + "."+ expectedNodeOne,createExportedAddress(expectedPortNum,expectedHostGroupName));
  hdfsSiteProperties.put("dfs.namenode.https-address." + expectedNameService + "."+ expectedNodeTwo,createExportedAddress(expectedPortNum,expectedHostGroupName));
  hdfsSiteProperties.put("dfs.namenode.http-address." + expectedNameService + "."+ expectedNodeOne,createExportedAddress(expectedPortNum,expectedHostGroupName));
  hdfsSiteProperties.put("dfs.namenode.http-address." + expectedNameService + "."+ expectedNodeTwo,createExportedAddress(expectedPortNum,expectedHostGroupName));
  hdfsSiteProperties.put("dfs.namenode.rpc-address." + expectedNameService + "."+ expectedNodeOne,createExportedAddress(expectedPortNum,expectedHostGroupName));
  hdfsSiteProperties.put("dfs.namenode.rpc-address." + expectedNameService + "."+ expectedNodeTwo,createExportedAddress(expectedPortNum,expectedHostGroupName));
  hadoopEnvProperties.put("dfs_ha_initial_namenode_active",expectedHostName);
  hadoopEnvProperties.put("dfs_ha_initial_namenode_standby",expectedHostNameTwo);
  Configuration clusterConfig=new Configuration(properties,Collections.<String,Map<String,Map<String,String>>>emptyMap());
  Collection<String> hgComponents=new HashSet<String>();
  hgComponents.add("NAMENODE");
  Collection<String> hosts=new ArrayList<String>();
  hosts.add(expectedHostName);
  hosts.add(expectedHostNameTwo);
  TestHostGroup group=new TestHostGroup(expectedHostGroupName,hgComponents,hosts);
  Collection<TestHostGroup> hostGroups=new ArrayList<TestHostGroup>();
  hostGroups.add(group);
  ClusterTopology topology=createClusterTopology("c1",bp,clusterConfig,hostGroups);
  BlueprintConfigurationProcessor updater=new BlueprintConfigurationProcessor(topology);
  updater.doUpdateForClusterCreate();
  String expectedPropertyValue=hdfsSiteProperties.get("dfs.namenode.https-address." + expectedNameService + "."+ expectedNodeOne);
  if (!expectedPropertyValue.equals(expectedHostName + ":" + expectedPortNum) && !expectedPropertyValue.equals(expectedHostNameTwo + ":" + expectedPortNum)) {
    fail("HTTPS address HA property not properly exported");
  }
  assertEquals("HTTPS address HA property not properly exported",expectedPropertyValue,hdfsSiteProperties.get("dfs.namenode.https-address." + expectedNameService + "."+ expectedNodeTwo));
  assertEquals("HTTPS address HA property not properly exported",expectedPropertyValue,hdfsSiteProperties.get("dfs.namenode.http-address." + expectedNameService + "."+ expectedNodeOne));
  assertEquals("HTTPS address HA property not properly exported",expectedPropertyValue,hdfsSiteProperties.get("dfs.namenode.http-address." + expectedNameService + "."+ expectedNodeTwo));
  assertEquals("HTTPS address HA property not properly exported",expectedPropertyValue,hdfsSiteProperties.get("dfs.namenode.rpc-address." + expectedNameService + "."+ expectedNodeOne));
  assertEquals("HTTPS address HA property not properly exported",expectedPropertyValue,hdfsSiteProperties.get("dfs.namenode.rpc-address." + expectedNameService + "."+ expectedNodeTwo));
  assertEquals("Active Namenode hostname was not set correctly",expectedHostName,hadoopEnvProperties.get("dfs_ha_initial_namenode_active"));
  assertEquals("Standby Namenode hostname was not set correctly",expectedHostNameTwo,hadoopEnvProperties.get("dfs_ha_initial_namenode_standby"));
}
