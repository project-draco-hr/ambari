{
  Map<String,Map<String,String>> properties=new HashMap<String,Map<String,String>>();
  Map<String,String> hiveSiteProps=new HashMap<String,String>();
  hiveSiteProps.put("javax.jdo.option.ConnectionURL","jdbc:mysql://localhost/hive?createDatabaseIfNotExist=true");
  Map<String,String> hiveEnvProps=new HashMap<String,String>();
  hiveEnvProps.put("hive_database","New MySQL Database");
  properties.put("hive-site",hiveSiteProps);
  properties.put("hive-env",hiveEnvProps);
  Collection<String> hgComponents=new HashSet<String>();
  hgComponents.add("NAMENODE");
  hgComponents.add("SECONDARY_NAMENODE");
  hgComponents.add("RESOURCEMANAGER");
  hgComponents.add("MYSQL_SERVER");
  HostGroup group1=new TestHostGroup("group1",Collections.singleton("testhost"),hgComponents);
  Collection<String> hgComponents2=new HashSet<String>();
  hgComponents2.add("DATANODE");
  hgComponents2.add("HDFS_CLIENT");
  HostGroup group2=new TestHostGroup("group2",Collections.singleton("testhost2"),hgComponents2);
  Map<String,HostGroup> hostGroups=new HashMap<String,HostGroup>();
  hostGroups.put(group1.getName(),group1);
  hostGroups.put(group2.getName(),group2);
  BlueprintConfigurationProcessor updater=new BlueprintConfigurationProcessor(properties);
  Map<String,Map<String,String>> updatedProperties=updater.doUpdateForClusterCreate(hostGroups);
  String updatedVal=updatedProperties.get("hive-site").get("javax.jdo.option.ConnectionURL");
  assertEquals("jdbc:mysql://testhost/hive?createDatabaseIfNotExist=true",updatedVal);
}
