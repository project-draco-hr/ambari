{
  Map<String,Map<String,String>> properties=new HashMap<String,Map<String,String>>();
  Map<String,String> typeProps=new HashMap<String,String>();
  typeProps.put("fs.defaultFS","testhost:8020");
  properties.put("core-site",typeProps);
  Configuration clusterConfig=new Configuration(properties,Collections.<String,Map<String,Map<String,String>>>emptyMap());
  Collection<String> hgComponents=new HashSet<String>();
  hgComponents.add("NAMENODE");
  hgComponents.add("SECONDARY_NAMENODE");
  TestHostGroup group1=new TestHostGroup("group1",hgComponents,Collections.singleton("testhost"));
  Collection<String> hgComponents2=new HashSet<String>();
  hgComponents2.add("DATANODE");
  hgComponents2.add("HDFS_CLIENT");
  TestHostGroup group2=new TestHostGroup("group2",hgComponents2,Collections.singleton("testhost2"));
  Collection<TestHostGroup> hostGroups=new HashSet<TestHostGroup>();
  hostGroups.add(group1);
  hostGroups.add(group2);
  ClusterTopology topology=createClusterTopology("c1",bp,clusterConfig,hostGroups);
  BlueprintConfigurationProcessor configProcessor=new BlueprintConfigurationProcessor(topology);
  configProcessor.doUpdateForBlueprintExport();
  String updatedVal=properties.get("core-site").get("fs.defaultFS");
  assertEquals("%HOSTGROUP::group1%:8020",updatedVal);
}
