{
  replay(stack,serviceInfo,ambariConext);
  Map<String,HostGroupInfo> hostGroupInfo=new HashMap<String,HostGroupInfo>();
  Collection<String> allServices=new HashSet<String>();
  Map<String,HostGroup> allHostGroups=new HashMap<String,HostGroup>();
  for (  TestHostGroup hostGroup : hostGroups) {
    HostGroupInfo groupInfo=new HostGroupInfo(hostGroup.name);
    groupInfo.addHosts(hostGroup.hosts);
    groupInfo.setConfiguration(hostGroup.configuration);
    List<Component> componentList=new ArrayList<Component>();
    for (    String componentName : hostGroup.components) {
      componentList.add(new Component(componentName));
    }
    allHostGroups.put(hostGroup.name,new HostGroupImpl(hostGroup.name,"test-bp",stack,componentList,EMPTY_CONFIG,"1"));
    hostGroupInfo.put(hostGroup.name,groupInfo);
    for (    String component : hostGroup.components) {
      for (      Map.Entry<String,Collection<String>> serviceComponentsEntry : serviceComponents.entrySet()) {
        if (serviceComponentsEntry.getValue().contains(component)) {
          allServices.add(serviceComponentsEntry.getKey());
        }
      }
    }
  }
  expect(bp.getServices()).andReturn(allServices).anyTimes();
  for (  HostGroup group : allHostGroups.values()) {
    expect(bp.getHostGroup(group.getName())).andReturn(group).anyTimes();
  }
  expect(bp.getHostGroups()).andReturn(allHostGroups).anyTimes();
  replay(bp);
  ClusterTopology topology=new ClusterTopologyImpl(ambariConext,1L,blueprint,configuration,hostGroupInfo);
  topology.setConfigRecommendationStrategy(ConfigRecommendationStrategy.NEVER_APPLY);
  return topology;
}
