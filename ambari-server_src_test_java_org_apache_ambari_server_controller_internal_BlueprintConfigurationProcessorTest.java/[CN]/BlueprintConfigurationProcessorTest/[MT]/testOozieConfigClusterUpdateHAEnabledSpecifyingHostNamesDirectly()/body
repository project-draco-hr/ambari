{
  final String expectedHostName="c6401.apache.ambari.org";
  final String expectedHostNameTwo="c6402.ambari.apache.org";
  final String expectedExternalHost="c6408.ambari.apache.org";
  final String expectedHostGroupName="host_group_1";
  final String expectedHostGroupNameTwo="host_group_2";
  EasyMockSupport mockSupport=new EasyMockSupport();
  HostGroup mockHostGroupOne=mockSupport.createMock(HostGroup.class);
  HostGroup mockHostGroupTwo=mockSupport.createMock(HostGroup.class);
  Stack mockStack=mockSupport.createMock(Stack.class);
  expect(mockHostGroupOne.getComponents()).andReturn(Collections.singleton("OOZIE_SERVER")).atLeastOnce();
  expect(mockHostGroupTwo.getComponents()).andReturn(Collections.singleton("OOZIE_SERVER")).atLeastOnce();
  expect(mockStack.getCardinality("OOZIE_SERVER")).andReturn(new Cardinality("1+")).atLeastOnce();
  mockSupport.replayAll();
  Map<String,Map<String,String>> configProperties=new HashMap<String,Map<String,String>>();
  Map<String,String> oozieSiteProperties=new HashMap<String,String>();
  Map<String,String> oozieEnvProperties=new HashMap<String,String>();
  Map<String,String> coreSiteProperties=new HashMap<String,String>();
  configProperties.put("oozie-site",oozieSiteProperties);
  configProperties.put("oozie-env",oozieEnvProperties);
  configProperties.put("hive-env",oozieEnvProperties);
  configProperties.put("core-site",coreSiteProperties);
  oozieSiteProperties.put("oozie.base.url",expectedHostName);
  oozieSiteProperties.put("oozie.authentication.kerberos.principal",expectedHostName);
  oozieSiteProperties.put("oozie.service.HadoopAccessorService.kerberos.principal",expectedHostName);
  oozieSiteProperties.put("oozie.service.JPAService.jdbc.url","jdbc:mysql://" + expectedExternalHost + "/ooziedb");
  oozieSiteProperties.put("oozie.services.ext","org.apache.oozie.service.ZKLocksService,org.apache.oozie.service.ZKXLogStreamingService,org.apache.oozie.service.ZKJobsConcurrencyService,org.apache.oozie.service.ZKUUIDService");
  oozieEnvProperties.put("oozie_hostname",expectedHostName);
  oozieEnvProperties.put("oozie_existing_mysql_host",expectedExternalHost);
  coreSiteProperties.put("hadoop.proxyuser.oozie.hosts",expectedHostName + "," + expectedHostNameTwo);
  BlueprintConfigurationProcessor configProcessor=new BlueprintConfigurationProcessor(configProperties);
  Map<String,HostGroup> hostGroups=new HashMap<String,HostGroup>();
  hostGroups.put(expectedHostGroupName,mockHostGroupOne);
  hostGroups.put(expectedHostGroupNameTwo,mockHostGroupTwo);
  configProcessor.doUpdateForClusterCreate(hostGroups,mockStack);
  assertEquals("oozie property not updated correctly",expectedHostName,oozieSiteProperties.get("oozie.base.url"));
  assertEquals("oozie property not updated correctly",expectedHostName,oozieSiteProperties.get("oozie.authentication.kerberos.principal"));
  assertEquals("oozie property not updated correctly",expectedHostName,oozieSiteProperties.get("oozie.service.HadoopAccessorService.kerberos.principal"));
  assertEquals("oozie property not updated correctly",expectedHostName,oozieEnvProperties.get("oozie_hostname"));
  assertEquals("oozie property not updated correctly",expectedHostName + "," + expectedHostNameTwo,coreSiteProperties.get("hadoop.proxyuser.oozie.hosts"));
  mockSupport.verifyAll();
}
