{
  Map<String,Map<String,String>> properties=new HashMap<String,Map<String,String>>();
  Map<String,String> typeProps=new HashMap<String,String>();
  typeProps.put("templeton.zookeeper.hosts","%HOSTGROUP::group1%:9090,%HOSTGROUP::group2%:9091");
  properties.put("webhcat-site",typeProps);
  Configuration clusterConfig=new Configuration(properties,Collections.<String,Map<String,Map<String,String>>>emptyMap());
  Collection<String> hgComponents=new HashSet<String>();
  hgComponents.add("NAMENODE");
  hgComponents.add("SECONDARY_NAMENODE");
  hgComponents.add("ZOOKEEPER_SERVER");
  TestHostGroup group1=new TestHostGroup("group1",hgComponents,Collections.singleton("testhost"));
  Collection<String> hgComponents2=new HashSet<String>();
  hgComponents2.add("DATANODE");
  hgComponents2.add("HDFS_CLIENT");
  hgComponents2.add("ZOOKEEPER_SERVER");
  Set<String> hosts2=new HashSet<String>();
  hosts2.add("testhost2");
  hosts2.add("testhost2a");
  hosts2.add("testhost2b");
  TestHostGroup group2=new TestHostGroup("group2",hgComponents2,hosts2);
  Collection<String> hgComponents3=new HashSet<String>();
  hgComponents2.add("HDFS_CLIENT");
  hgComponents2.add("ZOOKEEPER_CLIENT");
  Set<String> hosts3=new HashSet<String>();
  hosts3.add("testhost3");
  hosts3.add("testhost3a");
  TestHostGroup group3=new TestHostGroup("group3",hgComponents3,hosts3);
  Collection<TestHostGroup> hostGroups=new HashSet<TestHostGroup>();
  hostGroups.add(group1);
  hostGroups.add(group2);
  hostGroups.add(group3);
  ClusterTopology topology=createClusterTopology(bp,clusterConfig,hostGroups);
  BlueprintConfigurationProcessor updater=new BlueprintConfigurationProcessor(topology);
  updater.doUpdateForClusterCreate();
  String updatedVal=topology.getConfiguration().getFullProperties().get("webhcat-site").get("templeton.zookeeper.hosts");
  String[] hosts=updatedVal.split(",");
  Collection<String> expectedHosts=new HashSet<String>();
  expectedHosts.add("testhost:9090");
  expectedHosts.add("testhost2:9091");
  expectedHosts.add("testhost2a:9091");
  expectedHosts.add("testhost2b:9091");
  assertEquals(4,hosts.length);
  for (  String host : hosts) {
    assertTrue(expectedHosts.contains(host));
    expectedHosts.remove(host);
  }
}
