{
  final String expectedHostGroupName="host_group_1";
  EasyMockSupport mockSupport=new EasyMockSupport();
  HostGroup mockHostGroupOne=mockSupport.createMock(HostGroup.class);
  Stack mockStack=mockSupport.createMock(Stack.class);
  expect(mockHostGroupOne.getComponents()).andReturn(Collections.<String>emptySet()).atLeastOnce();
  expect(mockStack.getCardinality("GANGLIA_SERVER")).andReturn(new Cardinality("1")).atLeastOnce();
  mockSupport.replayAll();
  Map<String,Map<String,String>> configProperties=new HashMap<String,Map<String,String>>();
  Map<String,String> stormSiteProperties=new HashMap<String,String>();
  Map<String,String> kafkaBrokerProperties=new HashMap<String,String>();
  configProperties.put("storm-site",stormSiteProperties);
  configProperties.put("kafka-broker",kafkaBrokerProperties);
  stormSiteProperties.put("worker.childopts","localhost");
  stormSiteProperties.put("supervisor.childopts","localhost");
  stormSiteProperties.put("nimbus.childopts","localhost");
  kafkaBrokerProperties.put("kafka.ganglia.metrics.host","localhost");
  BlueprintConfigurationProcessor configProcessor=new BlueprintConfigurationProcessor(configProperties);
  Map<String,HostGroup> mapOfHostGroups=new HashMap<String,HostGroup>();
  mapOfHostGroups.put(expectedHostGroupName,mockHostGroupOne);
  configProcessor.doUpdateForClusterCreate(mapOfHostGroups,mockStack);
  assertEquals("worker startup settings not properly handled by cluster create","localhost",stormSiteProperties.get("worker.childopts"));
  assertEquals("supervisor startup settings not properly handled by cluster create","localhost",stormSiteProperties.get("supervisor.childopts"));
  assertEquals("nimbus startup settings not properly handled by cluster create","localhost",stormSiteProperties.get("nimbus.childopts"));
  assertEquals("Kafka ganglia host property not properly handled by cluster create","localhost",kafkaBrokerProperties.get("kafka.ganglia.metrics.host"));
  mockSupport.verifyAll();
}
