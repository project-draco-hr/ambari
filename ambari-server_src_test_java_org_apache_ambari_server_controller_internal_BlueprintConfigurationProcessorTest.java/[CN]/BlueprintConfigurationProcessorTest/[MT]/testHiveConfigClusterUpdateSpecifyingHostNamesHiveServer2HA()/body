{
  final String expectedHostGroupName="host_group_1";
  final String expectedPropertyValue="c6401.ambari.apache.org";
  final String expectedMetaStoreURIs="thrift://c6401.ambari.apache.org:9083,thrift://c6402.ambari.apache.org:9083";
  EasyMockSupport mockSupport=new EasyMockSupport();
  Stack mockStack=mockSupport.createMock(Stack.class);
  HostGroup mockHostGroupOne=mockSupport.createMock(HostGroup.class);
  HostGroup mockHostGroupTwo=mockSupport.createMock(HostGroup.class);
  expect(mockHostGroupOne.getComponents()).andReturn(Collections.singleton("HIVE_SERVER")).atLeastOnce();
  expect(mockHostGroupTwo.getComponents()).andReturn(Collections.singleton("HIVE_SERVER")).atLeastOnce();
  expect(mockStack.getCardinality("HIVE_SERVER")).andReturn(new Cardinality("1+")).atLeastOnce();
  mockSupport.replayAll();
  Map<String,Map<String,String>> configProperties=new HashMap<String,Map<String,String>>();
  Map<String,String> hiveEnvProperties=new HashMap<String,String>();
  Map<String,String> hiveSiteProperties=new HashMap<String,String>();
  configProperties.put("hive-env",hiveEnvProperties);
  configProperties.put("hive-site",hiveSiteProperties);
  hiveEnvProperties.put("hive_hostname",expectedPropertyValue);
  hiveSiteProperties.put("hive.server2.support.dynamic.service.discovery","true");
  hiveSiteProperties.put("hive.metastore.uris",expectedMetaStoreURIs);
  BlueprintConfigurationProcessor configProcessor=new BlueprintConfigurationProcessor(configProperties);
  Map<String,HostGroup> mapOfHostGroups=new HashMap<String,HostGroup>();
  mapOfHostGroups.put(expectedHostGroupName,mockHostGroupOne);
  mapOfHostGroups.put("host_group_2",mockHostGroupTwo);
  configProcessor.doUpdateForClusterCreate(mapOfHostGroups,mockStack);
  assertEquals("Unexpected config update for hive_hostname",expectedPropertyValue,hiveEnvProperties.get("hive_hostname"));
  assertEquals("Unexpected config update for hive.metastore.uris",expectedMetaStoreURIs,hiveSiteProperties.get("hive.metastore.uris"));
  mockSupport.verifyAll();
}
