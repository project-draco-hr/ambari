{
  final String expectedNameService="mynameservice";
  final String expectedHostName="c6401.apache.ambari.org";
  final String expectedPortNum="808080";
  final String expectedNodeOne="nn1";
  final String expectedNodeTwo="nn2";
  final String expectedHostGroupName="host_group_1";
  Map<String,Map<String,String>> configProperties=new HashMap<String,Map<String,String>>();
  Map<String,String> hdfsSiteProperties=new HashMap<String,String>();
  Map<String,String> coreSiteProperties=new HashMap<String,String>();
  Map<String,String> hbaseSiteProperties=new HashMap<String,String>();
  configProperties.put("hdfs-site",hdfsSiteProperties);
  configProperties.put("core-site",coreSiteProperties);
  configProperties.put("hbase-site",hbaseSiteProperties);
  hdfsSiteProperties.put("dfs.nameservices",expectedNameService);
  hdfsSiteProperties.put("dfs.ha.namenodes.mynameservice",expectedNodeOne + ", " + expectedNodeTwo);
  hdfsSiteProperties.put("dfs.namenode.https-address." + expectedNameService + "."+ expectedNodeOne,expectedHostName + ":" + expectedPortNum);
  hdfsSiteProperties.put("dfs.namenode.https-address." + expectedNameService + "."+ expectedNodeTwo,expectedHostName + ":" + expectedPortNum);
  hdfsSiteProperties.put("dfs.namenode.http-address." + expectedNameService + "."+ expectedNodeOne,expectedHostName + ":" + expectedPortNum);
  hdfsSiteProperties.put("dfs.namenode.http-address." + expectedNameService + "."+ expectedNodeTwo,expectedHostName + ":" + expectedPortNum);
  hdfsSiteProperties.put("dfs.namenode.rpc-address." + expectedNameService + "."+ expectedNodeOne,expectedHostName + ":" + expectedPortNum);
  hdfsSiteProperties.put("dfs.namenode.rpc-address." + expectedNameService + "."+ expectedNodeTwo,expectedHostName + ":" + expectedPortNum);
  Configuration clusterConfig=new Configuration(configProperties,Collections.<String,Map<String,Map<String,String>>>emptyMap());
  Collection<String> groupComponents=new HashSet<String>();
  groupComponents.add("NAMENODE");
  Collection<String> hosts=new ArrayList<String>();
  hosts.add(expectedHostName);
  hosts.add("serverTwo");
  TestHostGroup group=new TestHostGroup(expectedHostGroupName,groupComponents,hosts);
  Collection<TestHostGroup> hostGroups=new HashSet<TestHostGroup>();
  hostGroups.add(group);
  ClusterTopology topology=createClusterTopology("c1",bp,clusterConfig,hostGroups);
  BlueprintConfigurationProcessor configProcessor=new BlueprintConfigurationProcessor(topology);
  configProcessor.doUpdateForBlueprintExport();
  assertEquals("HTTPS address HA property not properly exported",createExportedAddress(expectedPortNum,expectedHostGroupName),hdfsSiteProperties.get("dfs.namenode.https-address." + expectedNameService + "."+ expectedNodeOne));
  assertEquals("HTTPS address HA property not properly exported",createExportedAddress(expectedPortNum,expectedHostGroupName),hdfsSiteProperties.get("dfs.namenode.https-address." + expectedNameService + "."+ expectedNodeTwo));
  assertEquals("HTTPS address HA property not properly exported",createExportedAddress(expectedPortNum,expectedHostGroupName),hdfsSiteProperties.get("dfs.namenode.http-address." + expectedNameService + "."+ expectedNodeOne));
  assertEquals("HTTPS address HA property not properly exported",createExportedAddress(expectedPortNum,expectedHostGroupName),hdfsSiteProperties.get("dfs.namenode.http-address." + expectedNameService + "."+ expectedNodeTwo));
  assertEquals("HTTPS address HA property not properly exported",createExportedAddress(expectedPortNum,expectedHostGroupName),hdfsSiteProperties.get("dfs.namenode.rpc-address." + expectedNameService + "."+ expectedNodeOne));
  assertEquals("HTTPS address HA property not properly exported",createExportedAddress(expectedPortNum,expectedHostGroupName),hdfsSiteProperties.get("dfs.namenode.rpc-address." + expectedNameService + "."+ expectedNodeTwo));
}
