{
  final String kmsSiteConfigType="kms-site";
  Map<String,Map<String,String>> properties=new HashMap<String,Map<String,String>>();
  Map<String,String> kmsSiteProperties=new HashMap<String,String>();
  properties.put(kmsSiteConfigType,kmsSiteProperties);
  kmsSiteProperties.put("hadoop.kms.authentication.signer.secret.provider.zookeeper.connection.string",createHostAddress("%HOSTGROUP::group1%","2181") + "," + createHostAddress("%HOSTGROUP::group2%","2181"));
  kmsSiteProperties.put("hadoop.kms.key.provider.uri","dbks://http@localhost:9292/kms");
  Map<String,Map<String,String>> parentProperties=new HashMap<String,Map<String,String>>();
  Configuration parentClusterConfig=new Configuration(parentProperties,Collections.<String,Map<String,Map<String,String>>>emptyMap());
  Configuration clusterConfig=new Configuration(properties,Collections.<String,Map<String,Map<String,String>>>emptyMap(),parentClusterConfig);
  Collection<String> kmsServerComponents=new HashSet<String>();
  kmsServerComponents.add("RANGER_KMS_SERVER");
  TestHostGroup group1=new TestHostGroup("group1",kmsServerComponents,Collections.singleton("host1"));
  TestHostGroup group2=new TestHostGroup("group2",kmsServerComponents,Collections.singleton("host2"));
  Collection<TestHostGroup> hostGroups=new HashSet<TestHostGroup>();
  hostGroups.add(group1);
  hostGroups.add(group2);
  ClusterTopology topology=createClusterTopology(bp,clusterConfig,hostGroups);
  BlueprintConfigurationProcessor configProcessor=new BlueprintConfigurationProcessor(topology);
  configProcessor.doUpdateForClusterCreate();
  assertEquals("host1:2181,host2:2181",clusterConfig.getPropertyValue(kmsSiteConfigType,"hadoop.kms.authentication.signer.secret.provider.zookeeper.connection.string"));
  assertEquals("dbks://http@localhost:9292/kms",clusterConfig.getPropertyValue(kmsSiteConfigType,"hadoop.kms.key.provider.uri"));
}
