{
  Map<String,Map<String,String>> properties=new HashMap<String,Map<String,String>>();
  Map<String,String> oozieEnvProperties=new HashMap<String,String>();
  Map<String,String> falconEnvProperties=new HashMap<String,String>();
  properties.put("oozie-env",oozieEnvProperties);
  properties.put("falcon-env",falconEnvProperties);
  oozieEnvProperties.put("oozie_user","test-oozie-user");
  falconEnvProperties.put("falcon_user","test-falcon-user");
  Configuration clusterConfig=new Configuration(properties,Collections.<String,Map<String,Map<String,String>>>emptyMap());
  Collection<String> hgComponents1=new HashSet<String>();
  hgComponents1.add("OOZIE_SERVER");
  hgComponents1.add("FALCON_SERVER");
  TestHostGroup group1=new TestHostGroup("group1",hgComponents1,Collections.singleton("host1"));
  Collection<TestHostGroup> hostGroups=Collections.singletonList(group1);
  ClusterTopology topology=createClusterTopology(bp,clusterConfig,hostGroups);
  BlueprintConfigurationProcessor configProcessor=new BlueprintConfigurationProcessor(topology);
  configProcessor.doUpdateForClusterCreate();
  Map<String,String> coreSiteProperties=properties.get("core-site");
  assertEquals(4,coreSiteProperties.size());
  assertEquals("*",coreSiteProperties.get("hadoop.proxyuser.test-oozie-user.hosts"));
  assertEquals("users",coreSiteProperties.get("hadoop.proxyuser.test-oozie-user.groups"));
  assertEquals("*",coreSiteProperties.get("hadoop.proxyuser.test-falcon-user.hosts"));
  assertEquals("users",coreSiteProperties.get("hadoop.proxyuser.test-falcon-user.groups"));
}
