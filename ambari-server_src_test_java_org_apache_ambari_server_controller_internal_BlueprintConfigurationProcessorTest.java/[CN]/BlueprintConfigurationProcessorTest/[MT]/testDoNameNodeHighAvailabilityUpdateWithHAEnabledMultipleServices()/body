{
  final String expectedNameServiceOne="mynameserviceOne";
  final String expectedNameServiceTwo="mynameserviceTwo";
  final String expectedHostNameOne="c6401.apache.ambari.org";
  final String expectedHostNameTwo="c6402.apache.ambari.org";
  final String expectedPortNum="808080";
  final String expectedNodeOne="nn1";
  final String expectedNodeTwo="nn2";
  final String expectedHostGroupName="host_group_1";
  EasyMockSupport mockSupport=new EasyMockSupport();
  HostGroup mockHostGroupOne=mockSupport.createMock(HostGroup.class);
  expect(mockHostGroupOne.getHostInfo()).andReturn(Arrays.asList(expectedHostNameOne,expectedHostNameTwo,"serverTwo")).atLeastOnce();
  expect(mockHostGroupOne.getName()).andReturn(expectedHostGroupName).atLeastOnce();
  mockSupport.replayAll();
  Map<String,Map<String,String>> configProperties=new HashMap<String,Map<String,String>>();
  Map<String,String> hdfsSiteProperties=new HashMap<String,String>();
  configProperties.put("hdfs-site",hdfsSiteProperties);
  hdfsSiteProperties.put("dfs.nameservices",expectedNameServiceOne + "," + expectedNameServiceTwo);
  hdfsSiteProperties.put("dfs.ha.namenodes." + expectedNameServiceOne,expectedNodeOne + ", " + expectedNodeTwo);
  hdfsSiteProperties.put("dfs.ha.namenodes." + expectedNameServiceTwo,expectedNodeOne + ", " + expectedNodeTwo);
  hdfsSiteProperties.put("dfs.namenode.https-address." + expectedNameServiceOne + "."+ expectedNodeOne,expectedHostNameOne + ":" + expectedPortNum);
  hdfsSiteProperties.put("dfs.namenode.https-address." + expectedNameServiceOne + "."+ expectedNodeTwo,expectedHostNameOne + ":" + expectedPortNum);
  hdfsSiteProperties.put("dfs.namenode.http-address." + expectedNameServiceOne + "."+ expectedNodeOne,expectedHostNameOne + ":" + expectedPortNum);
  hdfsSiteProperties.put("dfs.namenode.http-address." + expectedNameServiceOne + "."+ expectedNodeTwo,expectedHostNameOne + ":" + expectedPortNum);
  hdfsSiteProperties.put("dfs.namenode.rpc-address." + expectedNameServiceOne + "."+ expectedNodeOne,expectedHostNameOne + ":" + expectedPortNum);
  hdfsSiteProperties.put("dfs.namenode.rpc-address." + expectedNameServiceOne + "."+ expectedNodeTwo,expectedHostNameOne + ":" + expectedPortNum);
  hdfsSiteProperties.put("dfs.namenode.https-address." + expectedNameServiceTwo + "."+ expectedNodeOne,expectedHostNameTwo + ":" + expectedPortNum);
  hdfsSiteProperties.put("dfs.namenode.https-address." + expectedNameServiceTwo + "."+ expectedNodeTwo,expectedHostNameTwo + ":" + expectedPortNum);
  hdfsSiteProperties.put("dfs.namenode.http-address." + expectedNameServiceTwo + "."+ expectedNodeOne,expectedHostNameTwo + ":" + expectedPortNum);
  hdfsSiteProperties.put("dfs.namenode.http-address." + expectedNameServiceTwo + "."+ expectedNodeTwo,expectedHostNameTwo + ":" + expectedPortNum);
  hdfsSiteProperties.put("dfs.namenode.rpc-address." + expectedNameServiceTwo + "."+ expectedNodeOne,expectedHostNameTwo + ":" + expectedPortNum);
  hdfsSiteProperties.put("dfs.namenode.rpc-address." + expectedNameServiceTwo + "."+ expectedNodeTwo,expectedHostNameTwo + ":" + expectedPortNum);
  BlueprintConfigurationProcessor configProcessor=new BlueprintConfigurationProcessor(configProperties);
  configProcessor.doUpdateForBlueprintExport(Arrays.asList(mockHostGroupOne));
  assertEquals("HTTPS address HA property not properly exported",createExportedAddress(expectedPortNum,expectedHostGroupName),hdfsSiteProperties.get("dfs.namenode.https-address." + expectedNameServiceOne + "."+ expectedNodeOne));
  assertEquals("HTTPS address HA property not properly exported",createExportedAddress(expectedPortNum,expectedHostGroupName),hdfsSiteProperties.get("dfs.namenode.https-address." + expectedNameServiceOne + "."+ expectedNodeTwo));
  assertEquals("HTTPS address HA property not properly exported",createExportedAddress(expectedPortNum,expectedHostGroupName),hdfsSiteProperties.get("dfs.namenode.http-address." + expectedNameServiceOne + "."+ expectedNodeOne));
  assertEquals("HTTPS address HA property not properly exported",createExportedAddress(expectedPortNum,expectedHostGroupName),hdfsSiteProperties.get("dfs.namenode.http-address." + expectedNameServiceOne + "."+ expectedNodeTwo));
  assertEquals("HTTPS address HA property not properly exported",createExportedAddress(expectedPortNum,expectedHostGroupName),hdfsSiteProperties.get("dfs.namenode.rpc-address." + expectedNameServiceOne + "."+ expectedNodeOne));
  assertEquals("HTTPS address HA property not properly exported",createExportedAddress(expectedPortNum,expectedHostGroupName),hdfsSiteProperties.get("dfs.namenode.rpc-address." + expectedNameServiceOne + "."+ expectedNodeTwo));
  assertEquals("HTTPS address HA property not properly exported",createExportedAddress(expectedPortNum,expectedHostGroupName),hdfsSiteProperties.get("dfs.namenode.https-address." + expectedNameServiceTwo + "."+ expectedNodeOne));
  assertEquals("HTTPS address HA property not properly exported",createExportedAddress(expectedPortNum,expectedHostGroupName),hdfsSiteProperties.get("dfs.namenode.https-address." + expectedNameServiceTwo + "."+ expectedNodeTwo));
  assertEquals("HTTPS address HA property not properly exported",createExportedAddress(expectedPortNum,expectedHostGroupName),hdfsSiteProperties.get("dfs.namenode.http-address." + expectedNameServiceTwo + "."+ expectedNodeOne));
  assertEquals("HTTPS address HA property not properly exported",createExportedAddress(expectedPortNum,expectedHostGroupName),hdfsSiteProperties.get("dfs.namenode.http-address." + expectedNameServiceTwo + "."+ expectedNodeTwo));
  assertEquals("HTTPS address HA property not properly exported",createExportedAddress(expectedPortNum,expectedHostGroupName),hdfsSiteProperties.get("dfs.namenode.rpc-address." + expectedNameServiceTwo + "."+ expectedNodeOne));
  assertEquals("HTTPS address HA property not properly exported",createExportedAddress(expectedPortNum,expectedHostGroupName),hdfsSiteProperties.get("dfs.namenode.rpc-address." + expectedNameServiceTwo + "."+ expectedNodeTwo));
  mockSupport.verifyAll();
}
