{
  Resource.Type type=Resource.Type.Component;
  AmbariManagementController managementController=createMock(AmbariManagementController.class);
  Set<ServiceComponentResponse> allResponse=new HashSet<ServiceComponentResponse>();
  allResponse.add(new ServiceComponentResponse(100L,"Cluster100","Service100","Component100",null,null,""));
  allResponse.add(new ServiceComponentResponse(100L,"Cluster100","Service100","Component101",null,null,""));
  allResponse.add(new ServiceComponentResponse(100L,"Cluster100","Service100","Component102",null,null,""));
  expect(managementController.getComponents(AbstractResourceProviderTest.Matcher.getComponentRequestSet("Cluster100",null,null,null,null))).andReturn(allResponse).once();
  replay(managementController);
  ResourceProvider provider=AbstractControllerResourceProvider.getResourceProvider(type,PropertyHelper.getPropertyIds(type),PropertyHelper.getKeyPropertyIds(type),managementController);
  Set<String> propertyIds=new HashSet<String>();
  propertyIds.add(ComponentResourceProvider.COMPONENT_CLUSTER_NAME_PROPERTY_ID);
  propertyIds.add(ComponentResourceProvider.COMPONENT_COMPONENT_NAME_PROPERTY_ID);
  Predicate predicate=new PredicateBuilder().property(ComponentResourceProvider.COMPONENT_CLUSTER_NAME_PROPERTY_ID).equals("Cluster100").toPredicate();
  Request request=PropertyHelper.getReadRequest(propertyIds);
  Set<Resource> resources=provider.getResources(request,predicate);
  Assert.assertEquals(3,resources.size());
  Set<String> names=new HashSet<String>();
  for (  Resource resource : resources) {
    String clusterName=(String)resource.getPropertyValue(ComponentResourceProvider.COMPONENT_CLUSTER_NAME_PROPERTY_ID);
    Assert.assertEquals("Cluster100",clusterName);
    names.add((String)resource.getPropertyValue(ComponentResourceProvider.COMPONENT_COMPONENT_NAME_PROPERTY_ID));
  }
  for (  ServiceComponentResponse response : allResponse) {
    Assert.assertTrue(names.contains(response.getComponentName()));
  }
  verify(managementController);
}
