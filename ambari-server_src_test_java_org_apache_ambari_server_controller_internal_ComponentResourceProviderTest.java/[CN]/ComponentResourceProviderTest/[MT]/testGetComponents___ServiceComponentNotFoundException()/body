{
  Injector injector=createStrictMock(Injector.class);
  Capture<AmbariManagementController> controllerCapture=new Capture<AmbariManagementController>();
  Clusters clusters=createNiceMock(Clusters.class);
  MaintenanceStateHelper maintHelper=createNiceMock(MaintenanceStateHelper.class);
  Cluster cluster=createNiceMock(Cluster.class);
  Service service=createNiceMock(Service.class);
  ServiceComponentRequest request1=new ServiceComponentRequest("cluster1","service1","component1",null);
  Set<ServiceComponentRequest> setRequests=new HashSet<ServiceComponentRequest>();
  setRequests.add(request1);
  injector.injectMembers(capture(controllerCapture));
  expect(injector.getInstance(Gson.class)).andReturn(null);
  expect(injector.getInstance(MaintenanceStateHelper.class)).andReturn(maintHelper);
  expect(injector.getInstance(KerberosHelper.class)).andReturn(createNiceMock(KerberosHelper.class));
  expect(clusters.getCluster("cluster1")).andReturn(cluster);
  expect(cluster.getService("service1")).andReturn(service);
  expect(service.getServiceComponent("component1")).andThrow(new ServiceComponentNotFoundException("cluster1","service1","component1"));
  replay(maintHelper,injector,clusters,cluster,service);
  AmbariManagementController controller=new AmbariManagementControllerImpl(null,clusters,injector);
  try {
    getComponentResourceProvider(controller).getComponents(setRequests);
    fail("expected ServiceComponentNotFoundException");
  }
 catch (  ServiceComponentNotFoundException e) {
  }
  assertSame(controller,controllerCapture.getValue());
  verify(injector,clusters,cluster,service);
}
