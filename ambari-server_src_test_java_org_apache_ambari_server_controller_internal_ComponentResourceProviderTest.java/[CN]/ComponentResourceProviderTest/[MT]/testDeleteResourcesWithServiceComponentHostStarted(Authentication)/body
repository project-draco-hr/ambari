{
  Resource.Type type=Resource.Type.Component;
  AmbariManagementController managementController=createMock(AmbariManagementController.class);
  MaintenanceStateHelper maintenanceStateHelper=createNiceMock(MaintenanceStateHelper.class);
  Clusters clusters=createNiceMock(Clusters.class);
  Cluster cluster=createNiceMock(Cluster.class);
  Service service=createNiceMock(Service.class);
  AmbariMetaInfo ambariMetaInfo=createNiceMock(AmbariMetaInfo.class);
  ServiceComponent serviceComponent=createNiceMock(ServiceComponent.class);
  ServiceComponentHost serviceComponentHost=createNiceMock(ServiceComponentHost.class);
  StackId stackId=createNiceMock(StackId.class);
  Map<String,ServiceComponentHost> serviceComponentHosts=new HashMap<String,ServiceComponentHost>();
  serviceComponentHosts.put("",serviceComponentHost);
  expect(managementController.getClusters()).andReturn(clusters);
  expect(managementController.getAmbariMetaInfo()).andReturn(ambariMetaInfo);
  expect(clusters.getCluster("Cluster100")).andReturn(cluster);
  expect(cluster.getService("Service100")).andReturn(service);
  expect(cluster.getClusterId()).andReturn(2L).anyTimes();
  expect(service.getServiceComponent("Component100")).andReturn(serviceComponent);
  expect(serviceComponent.getDesiredState()).andReturn(State.INSTALLED);
  expect(serviceComponent.getServiceComponentHosts()).andReturn(serviceComponentHosts);
  expect(serviceComponentHost.getDesiredState()).andReturn(State.STARTED);
  replay(managementController,clusters,cluster,service,stackId,ambariMetaInfo,serviceComponent,serviceComponentHost,maintenanceStateHelper);
  SecurityContextHolder.getContext().setAuthentication(authentication);
  ResourceProvider provider=new ComponentResourceProvider(PropertyHelper.getPropertyIds(type),PropertyHelper.getKeyPropertyIds(type),managementController,maintenanceStateHelper);
  AbstractResourceProviderTest.TestObserver observer=new AbstractResourceProviderTest.TestObserver();
  ((ObservableResourceProvider)provider).addObserver(observer);
  Predicate predicate=new PredicateBuilder().property(ComponentResourceProvider.COMPONENT_CLUSTER_NAME_PROPERTY_ID).equals("Cluster100").and().property(ComponentResourceProvider.COMPONENT_SERVICE_NAME_PROPERTY_ID).equals("Service100").and().property(ComponentResourceProvider.COMPONENT_COMPONENT_NAME_PROPERTY_ID).equals("Component100").toPredicate();
  try {
    provider.deleteResources(predicate);
    Assert.fail("Expected exception.");
  }
 catch (  Exception e) {
    if (e instanceof AuthorizationException) {
      throw e;
    }
  }
  verify(managementController);
}
