{
  Resource.Type type=Resource.Type.Component;
  AmbariManagementController managementController=createMock(AmbariManagementController.class);
  MaintenanceStateHelper maintenanceStateHelper=createNiceMock(MaintenanceStateHelper.class);
  Clusters clusters=createNiceMock(Clusters.class);
  AmbariMetaInfo ambariMetaInfo=createNiceMock(AmbariMetaInfo.class);
  expect(managementController.getClusters()).andReturn(clusters).anyTimes();
  expect(managementController.getAmbariMetaInfo()).andReturn(ambariMetaInfo).anyTimes();
  replay(managementController,clusters,ambariMetaInfo,maintenanceStateHelper);
  SecurityContextHolder.getContext().setAuthentication(authentication);
  ResourceProvider provider=new ComponentResourceProvider(PropertyHelper.getPropertyIds(type),PropertyHelper.getKeyPropertyIds(type),managementController,maintenanceStateHelper);
  AbstractResourceProviderTest.TestObserver observer=new AbstractResourceProviderTest.TestObserver();
  ((ObservableResourceProvider)provider).addObserver(observer);
  Predicate predicate1=new PredicateBuilder().property(ComponentResourceProvider.COMPONENT_SERVICE_NAME_PROPERTY_ID).equals("Service100").and().property(ComponentResourceProvider.COMPONENT_COMPONENT_NAME_PROPERTY_ID).equals("Component100").toPredicate();
  try {
    provider.deleteResources(new RequestImpl(null,null,null,null),predicate1);
    Assert.fail("Expected IllegalArgumentException exception.");
  }
 catch (  IllegalArgumentException e) {
  }
  Predicate predicate2=new PredicateBuilder().property(ComponentResourceProvider.COMPONENT_CLUSTER_NAME_PROPERTY_ID).equals("Cluster100").and().property(ComponentResourceProvider.COMPONENT_SERVICE_NAME_PROPERTY_ID).equals("Service100").and().toPredicate();
  try {
    provider.deleteResources(new RequestImpl(null,null,null,null),predicate2);
    Assert.fail("Expected IllegalArgumentException exception.");
  }
 catch (  IllegalArgumentException e) {
  }
  verify(managementController);
}
