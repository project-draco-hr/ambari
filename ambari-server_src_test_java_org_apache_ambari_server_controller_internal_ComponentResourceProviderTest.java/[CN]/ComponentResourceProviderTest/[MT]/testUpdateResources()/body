{
  Resource.Type type=Resource.Type.Component;
  AmbariManagementController managementController=createMock(AmbariManagementController.class);
  RequestStatusResponse response=createNiceMock(RequestStatusResponse.class);
  Set<ServiceComponentResponse> nameResponse=new HashSet<ServiceComponentResponse>();
  nameResponse.add(new ServiceComponentResponse(102L,"Cluster102","Service","Component",null,"1","STARTED"));
  expect(managementController.getComponents(EasyMock.<Set<ServiceComponentRequest>>anyObject())).andReturn(nameResponse).once();
  expect(managementController.updateComponents(AbstractResourceProviderTest.Matcher.getComponentRequestSet("Cluster102","Service","Component",null,"STARTED"))).andReturn(response).once();
  replay(managementController,response);
  ResourceProvider provider=AbstractControllerResourceProvider.getResourceProvider(type,PropertyHelper.getPropertyIds(type),PropertyHelper.getKeyPropertyIds(type),managementController);
  Map<String,Object> properties=new LinkedHashMap<String,Object>();
  properties.put(ComponentResourceProvider.COMPONENT_STATE_PROPERTY_ID,"STARTED");
  Request request=PropertyHelper.getUpdateRequest(properties);
  Predicate predicate=new PredicateBuilder().property(ClusterResourceProvider.CLUSTER_NAME_PROPERTY_ID).equals("Cluster102").toPredicate();
  provider.updateResources(request,predicate);
  verify(managementController,response);
}
