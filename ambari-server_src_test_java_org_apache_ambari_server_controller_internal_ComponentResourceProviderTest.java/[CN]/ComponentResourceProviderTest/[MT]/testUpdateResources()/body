{
  Resource.Type type=Resource.Type.Component;
  AmbariManagementController managementController=createMock(AmbariManagementController.class);
  Clusters clusters=createNiceMock(Clusters.class);
  Cluster cluster=createNiceMock(Cluster.class);
  AmbariMetaInfo ambariMetaInfo=createNiceMock(AmbariMetaInfo.class);
  Service service=createNiceMock(Service.class);
  ServiceComponent serviceComponent1=createNiceMock(ServiceComponent.class);
  ServiceComponent serviceComponent2=createNiceMock(ServiceComponent.class);
  ServiceComponent serviceComponent3=createNiceMock(ServiceComponent.class);
  ServiceComponentHost serviceComponentHost=createNiceMock(ServiceComponentHost.class);
  RequestStatusResponse requestStatusResponse=createNiceMock(RequestStatusResponse.class);
  StackId stackId=createNiceMock(StackId.class);
  Map<String,ServiceComponent> serviceComponentMap=new HashMap<String,ServiceComponent>();
  serviceComponentMap.put("Component101",serviceComponent1);
  serviceComponentMap.put("Component102",serviceComponent2);
  serviceComponentMap.put("Component103",serviceComponent3);
  expect(managementController.getClusters()).andReturn(clusters).anyTimes();
  expect(managementController.getAmbariMetaInfo()).andReturn(ambariMetaInfo).anyTimes();
  expect(managementController.getEffectiveMaintenanceState(capture(new Capture<ServiceComponentHost>()))).andReturn(MaintenanceState.OFF).anyTimes();
  expect(clusters.getCluster("Cluster100")).andReturn(cluster).anyTimes();
  expect(cluster.getDesiredStackVersion()).andReturn(stackId);
  expect(cluster.getService("Service100")).andReturn(service).anyTimes();
  expect(service.getServiceComponent("Component101")).andReturn(serviceComponent1).anyTimes();
  expect(service.getServiceComponent("Component102")).andReturn(serviceComponent1).anyTimes();
  expect(service.getServiceComponent("Component103")).andReturn(serviceComponent2).anyTimes();
  expect(cluster.getServices()).andReturn(Collections.singletonMap("Service100",service)).anyTimes();
  expect(service.getServiceComponents()).andReturn(serviceComponentMap).anyTimes();
  expect(serviceComponent1.convertToResponse()).andReturn(new ServiceComponentResponse(100L,"Cluster100","Service100","Component101",null,""));
  expect(serviceComponent2.convertToResponse()).andReturn(new ServiceComponentResponse(100L,"Cluster100","Service100","Component102",null,""));
  expect(serviceComponent3.convertToResponse()).andReturn(new ServiceComponentResponse(100L,"Cluster100","Service100","Component103",null,""));
  expect(serviceComponent1.getDesiredState()).andReturn(State.INSTALLED).anyTimes();
  expect(serviceComponent2.getDesiredState()).andReturn(State.INSTALLED).anyTimes();
  expect(serviceComponent3.getDesiredState()).andReturn(State.INSTALLED).anyTimes();
  expect(serviceComponentHost.getState()).andReturn(State.INSTALLED).anyTimes();
  Map<String,ServiceComponentHost> serviceComponentHosts=Collections.singletonMap("Host100",serviceComponentHost);
  expect(serviceComponent1.getServiceComponentHosts()).andReturn(serviceComponentHosts).anyTimes();
  expect(serviceComponent2.getServiceComponentHosts()).andReturn(serviceComponentHosts).anyTimes();
  expect(serviceComponent3.getServiceComponentHosts()).andReturn(serviceComponentHosts).anyTimes();
  Capture<Map<String,String>> requestPropertiesCapture=new Capture<Map<String,String>>();
  Capture<Map<State,List<Service>>> changedServicesCapture=new Capture<Map<State,List<Service>>>();
  Capture<Map<State,List<ServiceComponent>>> changedCompsCapture=new Capture<Map<State,List<ServiceComponent>>>();
  Capture<Map<String,Map<State,List<ServiceComponentHost>>>> changedScHostsCapture=new Capture<Map<String,Map<State,List<ServiceComponentHost>>>>();
  Capture<Map<String,String>> requestParametersCapture=new Capture<Map<String,String>>();
  Capture<Collection<ServiceComponentHost>> ignoredScHostsCapture=new Capture<Collection<ServiceComponentHost>>();
  Capture<Cluster> clusterCapture=new Capture<Cluster>();
  expect(managementController.createStages(capture(clusterCapture),capture(requestPropertiesCapture),capture(requestParametersCapture),capture(changedServicesCapture),capture(changedCompsCapture),capture(changedScHostsCapture),capture(ignoredScHostsCapture),anyBoolean(),anyBoolean())).andReturn(requestStatusResponse);
  Map<String,String> mapRequestProps=new HashMap<String,String>();
  mapRequestProps.put("context","Called from a test");
  replay(managementController,clusters,cluster,ambariMetaInfo,service,serviceComponent1,serviceComponent2,serviceComponent3,serviceComponentHost,requestStatusResponse,stackId);
  ResourceProvider provider=new ComponentResourceProvider(PropertyHelper.getPropertyIds(type),PropertyHelper.getKeyPropertyIds(type),managementController);
  Map<String,Object> properties=new LinkedHashMap<String,Object>();
  properties.put(ComponentResourceProvider.COMPONENT_STATE_PROPERTY_ID,"STARTED");
  properties.put(ComponentResourceProvider.COMPONENT_CLUSTER_NAME_PROPERTY_ID,"Cluster100");
  Request request=PropertyHelper.getUpdateRequest(properties,mapRequestProps);
  Predicate predicate=new PredicateBuilder().property(ComponentResourceProvider.COMPONENT_CLUSTER_NAME_PROPERTY_ID).equals("Cluster100").toPredicate();
  provider.updateResources(request,predicate);
  verify(managementController,clusters,cluster,ambariMetaInfo,service,serviceComponent1,serviceComponent2,serviceComponent3,serviceComponentHost,requestStatusResponse,stackId);
}
