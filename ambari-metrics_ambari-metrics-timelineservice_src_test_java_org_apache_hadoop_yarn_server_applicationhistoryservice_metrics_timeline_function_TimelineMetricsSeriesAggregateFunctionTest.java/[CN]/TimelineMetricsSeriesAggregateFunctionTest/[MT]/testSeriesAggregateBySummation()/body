{
  TimelineMetrics testMetrics=getTestObject();
  TreeMap<Long,Double> metricValues=testMetrics.getMetrics().get(0).getMetricValues();
  TimelineMetricsSeriesAggregateFunction function=TimelineMetricsSeriesAggregateFunctionFactory.newInstance(SeriesAggregateFunction.SUM);
  TimelineMetric aggregatedMetric=function.apply(testMetrics);
  String aggregatedMetricName=aggregatedMetric.getMetricName();
  String aggregatedHostName=aggregatedMetric.getHostName();
  String aggregatedAppId=aggregatedMetric.getAppId();
  String aggregatedInstanceId=aggregatedMetric.getInstanceId();
  for (  TimelineMetric testMetric : testMetrics.getMetrics()) {
    assertTrue(aggregatedMetricName.contains(testMetric.getMetricName()));
    assertTrue(aggregatedHostName.contains(testMetric.getHostName()));
    if (!testMetric.getMetricName().equals("byte_in.3")) {
      assertTrue(aggregatedAppId.contains(testMetric.getAppId()));
      assertTrue(aggregatedInstanceId.contains(testMetric.getInstanceId()));
    }
  }
  TreeMap<Long,Double> summationMetricValues=aggregatedMetric.getMetricValues();
  assertEquals(3,summationMetricValues.size());
  for (  Map.Entry<Long,Double> tsAndValue : summationMetricValues.entrySet()) {
    assertEquals(metricValues.get(tsAndValue.getKey()) * 3,tsAndValue.getValue(),DELTA);
  }
}
