{
  TimelineMetrics testMetrics=getTestObject();
  TreeMap<Long,Double> metricValues=new TreeMap<>();
  metricValues.put(1L,1.0);
  metricValues.put(2L,2.0);
  metricValues.put(3L,3.0);
  testMetrics.getMetrics().get(0).setMetricValues(metricValues);
  TreeMap<Long,Double> metricValues2=new TreeMap<>();
  metricValues2.put(1L,2.0);
  metricValues2.put(2L,4.0);
  metricValues2.put(3L,6.0);
  testMetrics.getMetrics().get(1).setMetricValues(metricValues2);
  TreeMap<Long,Double> metricValues3=new TreeMap<>();
  metricValues3.put(1L,3.0);
  metricValues3.put(2L,6.0);
  metricValues3.put(3L,9.0);
  testMetrics.getMetrics().get(2).setMetricValues(metricValues3);
  TimelineMetricsSeriesAggregateFunction function=TimelineMetricsSeriesAggregateFunctionFactory.newInstance(SeriesAggregateFunction.MIN);
  TimelineMetric aggregatedMetric=function.apply(testMetrics);
  TreeMap<Long,Double> minMetricValues=aggregatedMetric.getMetricValues();
  assertEquals(3,minMetricValues.size());
  for (  Map.Entry<Long,Double> tsAndValue : minMetricValues.entrySet()) {
    assertEquals(metricValues.get(tsAndValue.getKey()),tsAndValue.getValue(),DELTA);
  }
}
