{
  Iterator<Map<String,Object>> iterator=request.getProperties().iterator();
  String hostName;
  final String desiredRepoVersion;
  String stackName;
  String stackVersion;
  if (request.getProperties().size() > 1) {
    throw new UnsupportedOperationException("Multiple requests cannot be executed at the same time.");
  }
  Map<String,Object> propertyMap=iterator.next();
  Set<String> requiredProperties=Sets.newHashSet(HOST_STACK_VERSION_HOST_NAME_PROPERTY_ID,HOST_STACK_VERSION_REPO_VERSION_PROPERTY_ID,HOST_STACK_VERSION_STACK_PROPERTY_ID,HOST_STACK_VERSION_VERSION_PROPERTY_ID);
  for (  String requiredProperty : requiredProperties) {
    Validate.isTrue(propertyMap.containsKey(requiredProperty),String.format("The required property %s is not defined",requiredProperty));
  }
  String clName=(String)propertyMap.get(HOST_STACK_VERSION_CLUSTER_NAME_PROPERTY_ID);
  hostName=(String)propertyMap.get(HOST_STACK_VERSION_HOST_NAME_PROPERTY_ID);
  desiredRepoVersion=(String)propertyMap.get(HOST_STACK_VERSION_REPO_VERSION_PROPERTY_ID);
  Host host;
  try {
    host=getManagementController().getClusters().getHost(hostName);
  }
 catch (  AmbariException e) {
    throw new NoSuchParentResourceException(String.format("Can not find host %s",hostName),e);
  }
  AmbariManagementController managementController=getManagementController();
  AmbariMetaInfo ami=managementController.getAmbariMetaInfo();
  stackName=(String)propertyMap.get(HOST_STACK_VERSION_STACK_PROPERTY_ID);
  stackVersion=(String)propertyMap.get(HOST_STACK_VERSION_VERSION_PROPERTY_ID);
  final StackId stackId=new StackId(stackName,stackVersion);
  if (!ami.isSupportedStack(stackName,stackVersion)) {
    throw new NoSuchParentResourceException(String.format("Stack %s is not supported",stackId));
  }
  Set<Cluster> clusterSet;
  if (clName == null) {
    try {
      clusterSet=getManagementController().getClusters().getClustersForHost(hostName);
    }
 catch (    AmbariException e) {
      throw new NoSuchParentResourceException(String.format(("Host %s does not belong to any cluster"),hostName),e);
    }
  }
 else {
    Cluster cluster;
    try {
      cluster=getManagementController().getClusters().getCluster(clName);
    }
 catch (    AmbariException e) {
      throw new NoSuchParentResourceException(String.format(("Cluster %s does not exist"),clName),e);
    }
    clusterSet=Collections.singleton(cluster);
  }
  Cluster cluster;
  if (clusterSet.isEmpty()) {
    throw new UnsupportedOperationException(String.format("Host %s belongs " + "to 0 clusters with stack id %s. Performing %s action failed.",hostName,stackId,INSTALL_PACKAGES_FULL_NAME));
  }
 else   if (clusterSet.size() > 1) {
    throw new UnsupportedOperationException(String.format("Host %s belongs " + "to %d clusters with stack id %s. Performing %s action on multiple " + "clusters is not supported",hostName,clusterSet.size(),stackId,INSTALL_PACKAGES_FULL_NAME));
  }
 else {
    cluster=clusterSet.iterator().next();
  }
  RepositoryVersionEntity repoVersionEnt=repositoryVersionDAO.findByStackAndVersion(stackId,desiredRepoVersion);
  if (repoVersionEnt == null) {
    throw new IllegalArgumentException(String.format("Repo version %s is not available for stack %s",desiredRepoVersion,stackId));
  }
  HostVersionEntity hostVersEntity=hostVersionDAO.findByClusterStackVersionAndHost(clName,stackId,desiredRepoVersion,hostName);
  if (hostVersEntity == null) {
    throw new IllegalArgumentException(String.format("Repo version %s for stack %s is not available for host %s",desiredRepoVersion,stackId,hostName));
  }
  if (hostVersEntity.getState() != RepositoryVersionState.INSTALLED && hostVersEntity.getState() != RepositoryVersionState.INSTALL_FAILED && hostVersEntity.getState() != RepositoryVersionState.OUT_OF_SYNC) {
    throw new UnsupportedOperationException(String.format("Repo version %s for stack %s " + "for host %s is in %s state. Can not transition to INSTALLING state",desiredRepoVersion,stackId,hostName,hostVersEntity.getState().toString()));
  }
  List<OperatingSystemEntity> operatingSystems=repoVersionEnt.getOperatingSystems();
  Map<String,List<RepositoryEntity>> perOsRepos=new HashMap<>();
  for (  OperatingSystemEntity operatingSystem : operatingSystems) {
    perOsRepos.put(operatingSystem.getOsType(),operatingSystem.getRepositories());
  }
  String osFamily=host.getOsFamily();
  final List<RepositoryEntity> repoInfo=perOsRepos.get(osFamily);
  if (repoInfo == null) {
    throw new SystemException(String.format("Repositories for os type %s are " + "not defined. Repo version=%s, stackId=%s",osFamily,desiredRepoVersion,stackId));
  }
  List<ServiceOsSpecific.Package> packages=new ArrayList<>();
  Set<String> servicesOnHost=new HashSet<>();
  List<ServiceComponentHost> components=cluster.getServiceComponentHosts(host.getHostName());
  for (  ServiceComponentHost component : components) {
    servicesOnHost.add(component.getServiceName());
  }
  List<String> blacklistedPackagePrefixes=configuration.getRollingUpgradeSkipPackagesPrefixes();
  for (  String serviceName : servicesOnHost) {
    ServiceInfo info;
    try {
      info=ami.getService(stackName,stackVersion,serviceName);
    }
 catch (    AmbariException e) {
      throw new SystemException("Can not enumerate services",e);
    }
    List<ServiceOsSpecific.Package> packagesForService=managementController.getPackagesForServiceHost(info,new HashMap<String,String>(),osFamily);
    for (    ServiceOsSpecific.Package aPackage : packagesForService) {
      if (!aPackage.getSkipUpgrade()) {
        boolean blacklisted=false;
        for (        String prefix : blacklistedPackagePrefixes) {
          if (aPackage.getName().startsWith(prefix)) {
            blacklisted=true;
            break;
          }
        }
        if (!blacklisted) {
          packages.add(aPackage);
        }
      }
    }
  }
  final String packageList=gson.toJson(packages);
  final String repoList=gson.toJson(repoInfo);
  Map<String,String> params=new HashMap<String,String>(){
{
      put("stack_id",stackId.getStackId());
      put("repository_version",desiredRepoVersion);
      put("base_urls",repoList);
      put(KeyNames.PACKAGE_LIST,packageList);
    }
  }
;
  VersionDefinitionXml xml=null;
  try {
    xml=repoVersionEnt.getRepositoryXml();
  }
 catch (  Exception e) {
    throw new SystemException(String.format("Could not load xml from repo version %s",repoVersionEnt.getVersion()));
  }
  if (null != xml && StringUtils.isNotBlank(xml.getPackageVersion(osFamily))) {
    params.put(KeyNames.PACKAGE_VERSION,xml.getPackageVersion(osFamily));
  }
  RequestResourceFilter filter=new RequestResourceFilter(null,null,Collections.singletonList(hostName));
  ActionExecutionContext actionContext=new ActionExecutionContext(cluster.getClusterName(),INSTALL_PACKAGES_ACTION,Collections.singletonList(filter),params);
  actionContext.setTimeout(Short.valueOf(configuration.getDefaultAgentTaskTimeout(true)));
  String caption=String.format(INSTALL_PACKAGES_FULL_NAME + " on host %s",hostName);
  RequestStageContainer req=createRequest(caption);
  Map<String,String> hostLevelParams=new HashMap<>();
  hostLevelParams.put(JDK_LOCATION,getManagementController().getJdkResourceUrl());
  String clusterHostInfoJson;
  try {
    clusterHostInfoJson=StageUtils.getGson().toJson(StageUtils.getClusterHostInfo(cluster));
  }
 catch (  AmbariException e) {
    throw new SystemException("Could not build cluster topology",e);
  }
  Stage stage=stageFactory.createNew(req.getId(),"/tmp/ambari",cluster.getClusterName(),cluster.getClusterId(),caption,clusterHostInfoJson,"{}",StageUtils.getGson().toJson(hostLevelParams));
  long stageId=req.getLastStageId() + 1;
  if (0L == stageId) {
    stageId=1L;
  }
  stage.setStageId(stageId);
  req.addStages(Collections.singletonList(stage));
  try {
    actionExecutionHelper.get().addExecutionCommandsToStage(actionContext,stage,null);
  }
 catch (  AmbariException e) {
    throw new SystemException("Can not modify stage",e);
  }
  try {
    hostVersEntity.setState(RepositoryVersionState.INSTALLING);
    hostVersionDAO.merge(hostVersEntity);
    cluster.recalculateClusterVersionState(repoVersionEnt);
    req.persist();
  }
 catch (  AmbariException e) {
    throw new SystemException("Can not persist request",e);
  }
  return getRequestStatus(req.getRequestStatusResponse());
}
