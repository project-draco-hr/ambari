{
  Iterator<Map<String,Object>> iterator=request.getProperties().iterator();
  String hostName;
  final String desiredRepoVersion;
  String stackName;
  String stackVersion;
  if (request.getProperties().size() != 1) {
    throw new UnsupportedOperationException("Multiple requests cannot be executed at the same time.");
  }
  Map<String,Object> propertyMap=iterator.next();
  Set<String> requiredProperties=new HashSet<String>(){
{
      add(HOST_STACK_VERSION_HOST_NAME_PROPERTY_ID);
      add(HOST_STACK_VERSION_REPO_VERSION_PROPERTY_ID);
      add(HOST_STACK_VERSION_STACK_PROPERTY_ID);
      add(HOST_STACK_VERSION_VERSION_PROPERTY_ID);
    }
  }
;
  for (  String requiredProperty : requiredProperties) {
    if (!propertyMap.containsKey(requiredProperty)) {
      throw new IllegalArgumentException(String.format("The required property %s is not defined",requiredProperty));
    }
  }
  String clName=(String)propertyMap.get(HOST_STACK_VERSION_CLUSTER_NAME_PROPERTY_ID);
  hostName=(String)propertyMap.get(HOST_STACK_VERSION_HOST_NAME_PROPERTY_ID);
  desiredRepoVersion=(String)propertyMap.get(HOST_STACK_VERSION_REPO_VERSION_PROPERTY_ID);
  Host host;
  try {
    host=getManagementController().getClusters().getHost(hostName);
  }
 catch (  AmbariException e) {
    throw new NoSuchParentResourceException(String.format("Can not find host %s",hostName),e);
  }
  AmbariManagementController managementController=getManagementController();
  AmbariMetaInfo ami=managementController.getAmbariMetaInfo();
  stackName=(String)propertyMap.get(HOST_STACK_VERSION_STACK_PROPERTY_ID);
  stackVersion=(String)propertyMap.get(HOST_STACK_VERSION_VERSION_PROPERTY_ID);
  String stackId=new StackId(stackName,stackVersion).getStackId();
  if (!ami.isSupportedStack(stackName,stackVersion)) {
    throw new NoSuchParentResourceException(String.format("Stack %s is not supported",stackId));
  }
  Set<Cluster> clusterSet;
  if (clName == null) {
    try {
      clusterSet=getManagementController().getClusters().getClustersForHost(hostName);
    }
 catch (    AmbariException e) {
      throw new NoSuchParentResourceException(String.format(("Host %s does belong to any cluster"),hostName),e);
    }
  }
 else {
    Cluster cluster;
    try {
      cluster=getManagementController().getClusters().getCluster(clName);
    }
 catch (    AmbariException e) {
      throw new NoSuchParentResourceException(String.format(("Cluster %s does not exist"),clName),e);
    }
    clusterSet=Collections.singleton(cluster);
  }
  Set<Cluster> selectedClusters=new HashSet<Cluster>();
  for (  Cluster cluster : clusterSet) {
    if (cluster.getCurrentStackVersion().getStackId().equals(stackId)) {
      selectedClusters.add(cluster);
    }
  }
  Cluster cluster;
  if (selectedClusters.size() != 1) {
    throw new UnsupportedOperationException(String.format("Host %s belongs to %d clusters " + "with stack id %s. Performing %s action on multiple clusters " + "is not supported",hostName,selectedClusters.size(),stackId,INSTALL_PACKAGES_FULL_NAME));
  }
 else {
    cluster=selectedClusters.iterator().next();
  }
  RepositoryVersionEntity repoVersionEnt=repositoryVersionDAO.findByStackAndVersion(stackId,desiredRepoVersion);
  if (repoVersionEnt == null) {
    throw new IllegalArgumentException(String.format("Repo version %s is not available for stack %s",desiredRepoVersion,stackId));
  }
  List<OperatingSystemEntity> operatingSystems=repoVersionEnt.getOperatingSystems();
  Map<String,List<RepositoryEntity>> perOsRepos=new HashMap<String,List<RepositoryEntity>>();
  for (  OperatingSystemEntity operatingSystem : operatingSystems) {
    perOsRepos.put(operatingSystem.getOsType(),operatingSystem.getRepositories());
  }
  final List<RepositoryEntity> repoInfo=perOsRepos.get(host.getOsFamily());
  if (repoInfo == null) {
    throw new SystemException(String.format("Repositories for os type %s are " + "not defined. Repo version=%s, stackId=%s",host.getOsFamily(),desiredRepoVersion,stackId));
  }
  List<ServiceOsSpecific.Package> packages=new ArrayList<ServiceOsSpecific.Package>();
  Set<String> servicesOnHost=new HashSet<String>();
  List<ServiceComponentHost> components=cluster.getServiceComponentHosts(host.getHostName());
  for (  ServiceComponentHost component : components) {
    servicesOnHost.add(component.getServiceName());
  }
  for (  String serviceName : servicesOnHost) {
    ServiceInfo info;
    try {
      info=ami.getService(stackName,stackVersion,serviceName);
    }
 catch (    AmbariException e) {
      throw new SystemException("Can not enumerate services",e);
    }
    List<ServiceOsSpecific.Package> packagesForService=managementController.getPackagesForServiceHost(info,new HashMap<String,String>(),host.getOsFamily());
    packages.addAll(packagesForService);
  }
  final String packageList=gson.toJson(packages);
  final String repoList=gson.toJson(repoInfo);
  Map<String,String> params=new HashMap<String,String>(){
{
      put("repository_version",desiredRepoVersion);
      put("base_urls",repoList);
      put("package_list",packageList);
    }
  }
;
  RequestResourceFilter filter=new RequestResourceFilter(null,null,Collections.singletonList(hostName));
  ActionExecutionContext actionContext=new ActionExecutionContext(cluster.getClusterName(),INSTALL_PACKAGES_ACTION,Collections.singletonList(filter),params);
  actionContext.setTimeout((short)600);
  String caption=String.format(INSTALL_PACKAGES_FULL_NAME + " on host %s",hostName);
  RequestStageContainer req=createRequest(caption);
  Map<String,String> hostLevelParams=new HashMap<String,String>();
  hostLevelParams.put(JDK_LOCATION,getManagementController().getJdkResourceUrl());
  Stage stage=stageFactory.createNew(req.getId(),"/tmp/ambari",cluster.getClusterName(),cluster.getClusterId(),caption,"{}","{}",StageUtils.getGson().toJson(hostLevelParams));
  long stageId=req.getLastStageId() + 1;
  if (0L == stageId) {
    stageId=1L;
  }
  stage.setStageId(stageId);
  req.addStages(Collections.singletonList(stage));
  try {
    actionExecutionHelper.get().addExecutionCommandsToStage(actionContext,stage);
  }
 catch (  AmbariException e) {
    throw new SystemException("Can not modify stage",e);
  }
  try {
    req.persist();
  }
 catch (  AmbariException e) {
    throw new SystemException("Can not persist request",e);
  }
  return getRequestStatus(req.getRequestStatusResponse());
}
