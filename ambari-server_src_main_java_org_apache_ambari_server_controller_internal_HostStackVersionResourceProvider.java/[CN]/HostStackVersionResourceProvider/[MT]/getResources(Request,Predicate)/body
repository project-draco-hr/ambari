{
  final Set<Resource> resources=new HashSet<>();
  final Set<String> requestedIds=getRequestPropertyIds(request,predicate);
  final Set<Map<String,Object>> propertyMaps=getPropertyMaps(predicate);
  for (  Map<String,Object> propertyMap : propertyMaps) {
    final String hostName=propertyMap.get(HOST_STACK_VERSION_HOST_NAME_PROPERTY_ID).toString();
    String clusterName=null;
    if (propertyMap.containsKey(HOST_STACK_VERSION_CLUSTER_NAME_PROPERTY_ID)) {
      clusterName=propertyMap.get(HOST_STACK_VERSION_CLUSTER_NAME_PROPERTY_ID).toString();
    }
    final Long id;
    List<HostVersionEntity> requestedEntities;
    if (propertyMap.get(HOST_STACK_VERSION_ID_PROPERTY_ID) == null) {
      if (clusterName == null) {
        requestedEntities=hostVersionDAO.findByHost(hostName);
      }
 else {
        requestedEntities=hostVersionDAO.findByClusterAndHost(clusterName,hostName);
      }
    }
 else {
      try {
        id=Long.parseLong(propertyMap.get(HOST_STACK_VERSION_ID_PROPERTY_ID).toString());
      }
 catch (      Exception ex) {
        throw new SystemException("Stack version should have numerical id");
      }
      final HostVersionEntity entity=hostVersionDAO.findByPK(id);
      if (entity == null) {
        throw new NoSuchResourceException("There is no stack version with id " + id);
      }
 else {
        requestedEntities=Collections.singletonList(entity);
      }
    }
    if (requestedEntities != null) {
      addRequestedEntities(resources,requestedEntities,requestedIds,clusterName);
    }
  }
  return resources;
}
