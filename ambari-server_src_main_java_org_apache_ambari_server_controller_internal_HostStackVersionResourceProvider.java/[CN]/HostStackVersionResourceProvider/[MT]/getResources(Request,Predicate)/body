{
  final Set<Resource> resources=new HashSet<Resource>();
  final Set<String> requestedIds=getRequestPropertyIds(request,predicate);
  final Set<Map<String,Object>> propertyMaps=getPropertyMaps(predicate);
  List<HostVersionEntity> requestedEntities=new ArrayList<HostVersionEntity>();
  for (  Map<String,Object> propertyMap : propertyMaps) {
    final String hostName=propertyMap.get(HOST_STACK_VERSION_HOST_NAME_PROPERTY_ID).toString();
    final Long id;
    if (propertyMap.get(HOST_STACK_VERSION_ID_PROPERTY_ID) == null && propertyMaps.size() == 1) {
      requestedEntities=hostVersionDAO.findByHost(hostName);
    }
 else {
      try {
        id=Long.parseLong(propertyMap.get(HOST_STACK_VERSION_ID_PROPERTY_ID).toString());
      }
 catch (      Exception ex) {
        throw new SystemException("Stack version should have numerical id");
      }
      final HostVersionEntity entity=hostVersionDAO.findByPK(id);
      if (entity == null) {
        throw new NoSuchResourceException("There is no stack version with id " + id);
      }
 else {
        requestedEntities.add(entity);
      }
    }
  }
  for (  HostVersionEntity entity : requestedEntities) {
    final Resource resource=new ResourceImpl(Resource.Type.HostStackVersion);
    final RepositoryVersionEntity repositoryVersionEntity=repositoryVersionDAO.findByStackAndVersion(entity.getStack(),entity.getVersion());
    setResourceProperty(resource,HOST_STACK_VERSION_HOST_NAME_PROPERTY_ID,entity.getHostName(),requestedIds);
    setResourceProperty(resource,HOST_STACK_VERSION_ID_PROPERTY_ID,entity.getId(),requestedIds);
    setResourceProperty(resource,HOST_STACK_VERSION_STACK_PROPERTY_ID,entity.getStack(),requestedIds);
    setResourceProperty(resource,HOST_STACK_VERSION_VERSION_PROPERTY_ID,entity.getVersion(),requestedIds);
    if (repositoryVersionEntity != null) {
      setResourceProperty(resource,HOST_STACK_VERSION_REPOSITORIES_PROPERTY_ID,repositoryVersionEntity.getRepositories(),requestedIds);
    }
    setResourceProperty(resource,HOST_STACK_VERSION_STATE_PROPERTY_ID,entity.getState().name(),requestedIds);
    if (predicate == null || predicate.evaluate(resource)) {
      resources.add(resource);
    }
  }
  return resources;
}
