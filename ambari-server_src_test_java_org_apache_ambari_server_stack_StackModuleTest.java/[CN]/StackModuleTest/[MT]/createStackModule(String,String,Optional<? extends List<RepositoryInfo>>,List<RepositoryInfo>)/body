{
  StackDirectory sd=mock(StackDirectory.class);
  List<ServiceDirectory> serviceDirectories=Lists.newArrayList();
  for (  List<RepositoryInfo> serviceRepoList : serviceRepoLists) {
    StackServiceDirectory svd=mock(StackServiceDirectory.class);
    RepositoryXml serviceRepoXml=mock(RepositoryXml.class);
    when(svd.getRepoFile()).thenReturn(serviceRepoXml);
    when(serviceRepoXml.getRepositories()).thenReturn(serviceRepoList);
    ServiceMetainfoXml serviceMetainfoXml=mock(ServiceMetainfoXml.class);
    when(serviceMetainfoXml.isValid()).thenReturn(true);
    ServiceInfo serviceInfo=mock(ServiceInfo.class);
    when(serviceInfo.isValid()).thenReturn(true);
    when(serviceInfo.getName()).thenReturn(UUID.randomUUID().toString());
    when(serviceMetainfoXml.getServices()).thenReturn(Lists.<ServiceInfo>newArrayList(serviceInfo));
    when(svd.getMetaInfoFile()).thenReturn(serviceMetainfoXml);
    serviceDirectories.add(svd);
  }
  if (stackRepos.isPresent()) {
    RepositoryXml stackRepoXml=mock(RepositoryXml.class);
    when(sd.getRepoFile()).thenReturn(stackRepoXml);
    when(stackRepoXml.getRepositories()).thenReturn(stackRepos.get());
  }
  when(sd.getServiceDirectories()).thenReturn(serviceDirectories);
  when(sd.getStackDirName()).thenReturn(stackName);
  when(sd.getDirectory()).thenReturn(new File(stackVersion));
  StackContext ctx=mock(StackContext.class);
  StackModule sm=new StackModule(sd,ctx);
  sm.resolve(null,ImmutableMap.of(String.format("%s:%s",stackName,stackVersion),sm),ImmutableMap.<String,ServiceModule>of(),ImmutableMap.<String,ExtensionModule>of());
  return sm;
}
