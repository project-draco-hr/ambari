def flume(action=None):
    import params
    flume_agents = {}
    if (params.flume_conf_content is not None):
        flume_agents = build_flume_topology(params.flume_conf_content)
    if (action == 'config'):
        Directory(params.flume_conf_dir)
        Directory(params.flume_log_dir, owner=params.flume_user)
        for agent in flume_agents.keys():
            flume_agent_conf_dir = ((params.flume_conf_dir + os.sep) + agent)
            flume_agent_conf_file = ((flume_agent_conf_dir + os.sep) + 'flume.conf')
            flume_agent_meta_file = ((flume_agent_conf_dir + os.sep) + 'ambari-meta.json')
            flume_agent_log4j_file = ((flume_agent_conf_dir + os.sep) + 'log4j.properties')
            Directory(flume_agent_conf_dir)
            PropertiesFile(flume_agent_conf_file, properties=flume_agents[agent], mode=420)
            File(flume_agent_log4j_file, content=Template('log4j.properties.j2', agent_name=agent), mode=420)
            File(flume_agent_meta_file, content=json.dumps(ambari_meta(agent, flume_agents[agent])), mode=420)
    elif (action == 'start'):
        flume_base = format('env JAVA_HOME={java_home} /usr/bin/flume-ng agent --name {{0}} --conf {{1}} --conf-file {{2}} {{3}}')
        for agent in flume_agents.keys():
            flume_agent_conf_dir = ((params.flume_conf_dir + os.sep) + agent)
            flume_agent_conf_file = ((flume_agent_conf_dir + os.sep) + 'flume.conf')
            flume_agent_pid_file = (((params.flume_run_dir + os.sep) + agent) + '.pid')
            if (not is_live(flume_agent_pid_file)):
                extra_args = ''
                if (params.ganglia_server_host is not None):
                    extra_args = '-Dflume.monitoring.type=ganglia -Dflume.monitoring.hosts={0}:{1}'
                    extra_args = extra_args.format(params.ganglia_server_host, '8655')
                flume_cmd = flume_base.format(agent, flume_agent_conf_dir, flume_agent_conf_file, extra_args)
                Execute(flume_cmd, wait_for_finish=False)
                pid_cmd = format('pgrep -o -f {flume_agent_conf_file} > {flume_agent_pid_file}')
                Execute(pid_cmd, logoutput=True, tries=5, try_sleep=10)
        pass
    elif (action == 'stop'):
        pid_files = glob.glob(((params.flume_run_dir + os.sep) + '*.pid'))
        if (0 == len(pid_files)):
            return
        for pid_file in pid_files:
            pid = format('`cat {pid_file}` > /dev/null 2>&1')
            Execute(format('kill {pid}'), ignore_failures=True)
        for pid_file in pid_files:
            File(pid_file, action='delete')
