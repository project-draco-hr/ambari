{
  AmbariManagementController managementController=createMock(AmbariManagementController.class);
  RequestStatusResponse response=createNiceMock(RequestStatusResponse.class);
  Clusters clusters=createNiceMock(Clusters.class);
  Cluster cluster=createNiceMock(Cluster.class);
  ConfigGroupFactory configGroupFactory=createNiceMock(ConfigGroupFactory.class);
  ConfigGroup configGroup=createNiceMock(ConfigGroup.class);
  Map<Long,ConfigGroup> configGroupMap=new HashMap<Long,ConfigGroup>();
  configGroupMap.put(1L,configGroup);
  expect(managementController.getClusters()).andReturn(clusters).anyTimes();
  expect(clusters.getCluster("Cluster100")).andReturn(cluster).anyTimes();
  expect(managementController.getConfigGroupFactory()).andReturn(configGroupFactory).anyTimes();
  expect(managementController.getAuthName()).andReturn("admin").anyTimes();
  expect(cluster.getConfigGroups()).andReturn(configGroupMap);
  expect(configGroupFactory.createNew((Cluster)anyObject(),(String)anyObject(),(String)anyObject(),(String)anyObject(),(HashMap)anyObject(),(HashMap)anyObject())).andReturn(configGroup).anyTimes();
  expect(configGroup.getClusterName()).andReturn("Cluster100").anyTimes();
  expect(configGroup.getName()).andReturn("test-1").anyTimes();
  expect(configGroup.getTag()).andReturn("tag-1").anyTimes();
  replay(managementController,clusters,cluster,configGroupFactory,configGroup,response);
  ResourceProvider provider=getConfigGroupResourceProvider(managementController);
  Map<String,Object> properties=new LinkedHashMap<String,Object>();
  Set<Map<String,Object>> propertySet=new LinkedHashSet<Map<String,Object>>();
  properties.put(ConfigGroupResourceProvider.CONFIGGROUP_CLUSTER_NAME_PROPERTY_ID,"Cluster100");
  properties.put(ConfigGroupResourceProvider.CONFIGGROUP_NAME_PROPERTY_ID,"test-1");
  properties.put(ConfigGroupResourceProvider.CONFIGGROUP_TAG_PROPERTY_ID,"tag-1");
  propertySet.add(properties);
  Request request=PropertyHelper.getCreateRequest(propertySet,null);
  SecurityContextHolder.getContext().setAuthentication(authentication);
  Exception exception=null;
  try {
    provider.createResources(request);
  }
 catch (  AuthorizationException e) {
    throw e;
  }
catch (  Exception e) {
    exception=e;
  }
  verify(managementController,clusters,cluster,configGroupFactory,configGroup,response);
  assertNotNull(exception);
  assertTrue(exception instanceof ResourceAlreadyExistsException);
}
