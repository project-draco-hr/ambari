{
  AmbariManagementController managementController=createMock(AmbariManagementController.class);
  RequestStatusResponse response=createNiceMock(RequestStatusResponse.class);
  Clusters clusters=createNiceMock(Clusters.class);
  Cluster cluster=createNiceMock(Cluster.class);
  Host h1=createNiceMock(Host.class);
  Host h2=createNiceMock(Host.class);
  ConfigGroupFactory configGroupFactory=createNiceMock(ConfigGroupFactory.class);
  ConfigGroup configGroup=createNiceMock(ConfigGroup.class);
  expect(managementController.getClusters()).andReturn(clusters);
  expect(clusters.getCluster("Cluster100")).andReturn(cluster).anyTimes();
  expect(clusters.getHost("h1")).andReturn(h1);
  expect(clusters.getHost("h2")).andReturn(h2);
  expect(managementController.getConfigGroupFactory()).andReturn(configGroupFactory);
  expect(managementController.getAuthName()).andReturn("admin").anyTimes();
  Capture<Cluster> clusterCapture=new Capture<Cluster>();
  Capture<String> captureName=new Capture<String>();
  Capture<String> captureDesc=new Capture<String>();
  Capture<String> captureTag=new Capture<String>();
  Capture<Map<String,Config>> captureConfigs=new Capture<Map<String,Config>>();
  Capture<Map<String,Host>> captureHosts=new Capture<Map<String,Host>>();
  expect(configGroupFactory.createNew(capture(clusterCapture),capture(captureName),capture(captureTag),capture(captureDesc),capture(captureConfigs),capture(captureHosts))).andReturn(configGroup);
  replay(managementController,clusters,cluster,configGroupFactory,configGroup,response);
  ResourceProvider provider=getConfigGroupResourceProvider(managementController);
  Set<Map<String,Object>> propertySet=new LinkedHashSet<Map<String,Object>>();
  Map<String,Object> properties=new LinkedHashMap<String,Object>();
  Set<Map<String,Object>> hostSet=new HashSet<Map<String,Object>>();
  Map<String,Object> host1=new HashMap<String,Object>();
  host1.put(ConfigGroupResourceProvider.CONFIGGROUP_HOSTNAME_PROPERTY_ID,"h1");
  hostSet.add(host1);
  Map<String,Object> host2=new HashMap<String,Object>();
  host2.put(ConfigGroupResourceProvider.CONFIGGROUP_HOSTNAME_PROPERTY_ID,"h2");
  hostSet.add(host2);
  Set<Map<String,Object>> configSet=new HashSet<Map<String,Object>>();
  Map<String,String> configMap=new HashMap<String,String>();
  Map<String,Object> configs=new HashMap<String,Object>();
  configs.put("type","core-site");
  configs.put("tag","version100");
  configMap.put("key1","value1");
  configs.put("properties",configMap);
  configSet.add(configs);
  properties.put(ConfigGroupResourceProvider.CONFIGGROUP_CLUSTER_NAME_PROPERTY_ID,"Cluster100");
  properties.put(ConfigGroupResourceProvider.CONFIGGROUP_NAME_PROPERTY_ID,"test-1");
  properties.put(ConfigGroupResourceProvider.CONFIGGROUP_TAG_PROPERTY_ID,"tag-1");
  properties.put(ConfigGroupResourceProvider.CONFIGGROUP_HOSTS_PROPERTY_ID,hostSet);
  properties.put(ConfigGroupResourceProvider.CONFIGGROUP_CONFIGS_PROPERTY_ID,configSet);
  propertySet.add(properties);
  Request request=PropertyHelper.getCreateRequest(propertySet,null);
  provider.createResources(request);
  verify(managementController,clusters,cluster,configGroupFactory,configGroup,response);
  assertEquals("version100",captureConfigs.getValue().get("core-site").getVersionTag());
  assertTrue(captureHosts.getValue().containsKey("h1"));
  assertTrue(captureHosts.getValue().containsKey("h2"));
}
