{
  AlertTargetEventCreator creator=new AlertTargetEventCreator();
  Map<String,Object> properties=new HashMap<>();
  properties.put(AlertTargetResourceProvider.ALERT_TARGET_DESCRIPTION,"Target description");
  properties.put(AlertTargetResourceProvider.ALERT_TARGET_NAME,"Target name");
  properties.put(AlertTargetResourceProvider.ALERT_TARGET_NOTIFICATION_TYPE,"NotifType");
  properties.put(AlertTargetResourceProvider.ALERT_TARGET_PROPERTIES + "/" + EmailDispatcher.JAVAMAIL_FROM_PROPERTY,"email");
  properties.put(AlertTargetResourceProvider.ALERT_TARGET_STATES,Arrays.asList("S","T","A","T","E","S"));
  properties.put(AlertTargetResourceProvider.ALERT_TARGET_GROUPS,Arrays.asList("G","R","P","S"));
  properties.put(AlertTargetResourceProvider.ALERT_TARGET_PROPERTIES + "/" + AlertNoticeDispatchService.AMBARI_DISPATCH_RECIPIENTS,Arrays.asList("a@a.com","b@b.com","c@c.com"));
  Request request=AuditEventCreatorTestHelper.createRequest(Request.Type.POST,Resource.Type.AlertTarget,properties,null);
  Result result=AuditEventCreatorTestHelper.createResult(new ResultStatus(ResultStatus.STATUS.OK));
  AuditEvent event=AuditEventCreatorTestHelper.getEvent(creator,request,result);
  String actual=event.getAuditMessage();
  String expected="User(" + userName + "), RemoteIp(1.2.3.4), Operation(Notification addition), RequestType(POST), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Notification name(Target name), Description(Target description), Notification type(NotifType), Group IDs(G, R, P, S), Email from(email), Email to(a@a.com, b@b.com, c@c.com), Alert states(S, T, A, T, E, S)";
  Assert.assertTrue("Class mismatch",event instanceof AddAlertTargetRequestAuditEvent);
  Assert.assertEquals(expected,actual);
  Assert.assertTrue(actual.contains(userName));
}
