def read_actual_version_from_history_file(repository_version):
    '\n  :param repository_version: normalized repo version (without build number) as received from the server\n  Search the repository version history file for a line that contains repository_version,actual_version\n  Notice that the parts are delimited by a comma.\n  :return: Return the actual_version if found, otherwise, return None.\n  '
    actual_version = None
    if os.path.isfile(REPO_VERSION_HISTORY_FILE):
        with open(REPO_VERSION_HISTORY_FILE, 'r') as f:
            for line in reversed(f.readlines()):
                line_parts = line.split(',')
                if (line_parts and (len(line_parts) == 2) and (line_parts[0] == repository_version)):
                    item = line_parts[1].strip()
                    if (item != ''):
                        actual_version = item
                        break
    return actual_version
