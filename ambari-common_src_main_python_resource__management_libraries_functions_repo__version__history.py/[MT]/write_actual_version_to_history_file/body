def write_actual_version_to_history_file(repository_version, actual_version):
    "\n  Save the tuple of repository_version,actual_version to the repo version history file if the repository_version\n  doesn't already exist\n  :param repository_version: normalized repo version (without build number) as received from the server\n  :param actual_version: Repo version with the build number, as determined using hdp-select\n  :returns Return True if appended the values to the file, otherwise, return False.\n  "
    wrote_value = False
    if ((repository_version is None) or (actual_version is None)):
        return
    if ((repository_version == '') or (actual_version == '')):
        return
    value = ((repository_version + ',') + actual_version)
    key_exists = False
    try:
        if (read_actual_version_from_history_file(repository_version) is None):
            with open(REPO_VERSION_HISTORY_FILE, 'a') as f:
                f.write((((repository_version + ',') + actual_version) + '\n'))
                wrote_value = True
        if wrote_value:
            Logger.info('Appended value "{0}" to file {1} to track this as a new version.'.format(value, REPO_VERSION_HISTORY_FILE))
    except Exception as err:
        Logger.error('Failed to write to file {0} the value: {1}. Error: {2}'.format(REPO_VERSION_HISTORY_FILE, value, str(err)))
    return wrote_value
