{
  super(reader,parseOptions);
  CSVParserBuilder csvParserBuilder=new CSVParserBuilder();
  CSVReaderBuilder builder=new CSVReaderBuilder(reader);
  Character delimiter=(Character)parseOptions.getOption(ParseOptions.OPTIONS_CSV_DELIMITER);
  if (delimiter != null) {
    LOG.info("setting delimiter as {}",delimiter);
    csvParserBuilder=csvParserBuilder.withSeparator(delimiter);
  }
  Character quote=(Character)parseOptions.getOption(ParseOptions.OPTIONS_CSV_QUOTE);
  if (null != quote) {
    LOG.info("setting Quote char : {}",quote);
    csvParserBuilder=csvParserBuilder.withQuoteChar(quote);
  }
  Character escapeChar=(Character)parseOptions.getOption(ParseOptions.OPTIONS_CSV_ESCAPE_CHAR);
  if (null != escapeChar) {
    LOG.info("setting escapeChar : {}",escapeChar);
    csvParserBuilder=csvParserBuilder.withEscapeChar(escapeChar);
  }
  builder.withCSVParser(csvParserBuilder.build());
  this.csvReader=builder.build();
  iterator=new OpenCSVIterator(this.csvReader.iterator());
  String optHeader=(String)parseOptions.getOption(ParseOptions.OPTIONS_HEADER);
  if (optHeader != null) {
    if (optHeader.equals(ParseOptions.HEADER.FIRST_RECORD.toString())) {
      this.headerRow=iterator().hasNext() ? iterator.next() : new Row(new Object[]{});
    }
  }
}
