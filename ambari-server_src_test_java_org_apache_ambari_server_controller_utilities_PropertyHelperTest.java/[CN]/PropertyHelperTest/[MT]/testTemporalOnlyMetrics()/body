{
  TreeSet<String> set=new TreeSet<String>();
  for (  Resource.Type type : Resource.Type.values()) {
    Map<String,Map<String,PropertyInfo>> gids=PropertyHelper.getMetricPropertyIds(type);
    Map<String,Map<String,PropertyInfo>> jids=PropertyHelper.getJMXPropertyIds(type);
    if (gids != null && jids != null) {
      gids=normalizeMetricNames(gids);
      jids=normalizeMetricNames(jids);
      for (      Map.Entry<String,Map<String,PropertyInfo>> gComponentEntry : gids.entrySet()) {
        String gComponent=gComponentEntry.getKey();
        Set<Map.Entry<String,PropertyInfo>> gComponentEntries=gComponentEntry.getValue().entrySet();
        for (        Map.Entry<String,PropertyInfo> gMetricEntry : gComponentEntries) {
          Map<String,PropertyInfo> jMetrics=jids.get(gComponent);
          if (jMetrics != null) {
            String gMetric=gMetricEntry.getKey();
            PropertyInfo gProperty=gMetricEntry.getValue();
            if (!gProperty.isPointInTime()) {
              PropertyInfo jProperty=jMetrics.get(gMetric);
              if (jProperty == null || !jProperty.isPointInTime()) {
                String s=type + " : " + gComponent+ " : "+ gMetric+ " : "+ gProperty.getPropertyId();
                set.add(s);
              }
            }
          }
        }
      }
    }
  }
  if (set.size() > 0) {
    System.out.println("The following metrics are marked as temporal only for Ganglia ");
    System.out.println("but are not defined for JMX.");
    System.out.println("The preference is to get point in time metrics from JMX if possible.");
    System.out.println("If the metric can be obtained from JMX then add it to the JMX properties");
    System.out.println("definition, otherwise set set \"pointInTime\" : true for the metric in ");
    System.out.println("the Ganglia properties definition.\n");
    for (    String s : set) {
      System.out.println(s);
    }
    Assert.fail("Found temporal only metrics.");
  }
}
