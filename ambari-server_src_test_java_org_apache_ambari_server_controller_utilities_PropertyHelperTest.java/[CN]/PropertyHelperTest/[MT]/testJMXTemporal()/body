{
  for (  PropertyHelper.MetricsVersion version : PropertyHelper.MetricsVersion.values()) {
    TreeSet<String> set=new TreeSet<String>();
    for (    Resource.Type type : Resource.Type.values()) {
      Map<String,Map<String,PropertyInfo>> jids=PropertyHelper.getJMXPropertyIds(type,version);
      if (jids != null) {
        for (        Map.Entry<String,Map<String,PropertyInfo>> jComponentEntry : jids.entrySet()) {
          String jComponent=jComponentEntry.getKey();
          Set<Map.Entry<String,PropertyInfo>> jComponentEntries=jComponentEntry.getValue().entrySet();
          for (          Map.Entry<String,PropertyInfo> jMetricEntry : jComponentEntries) {
            String jMetric=jMetricEntry.getKey();
            PropertyInfo jProperty=jMetricEntry.getValue();
            if (jProperty.isTemporal()) {
              String s=type + " : " + jComponent+ " : "+ jMetric+ " : "+ jProperty.getPropertyId();
              set.add(s);
            }
          }
        }
      }
    }
    if (set.size() > 0) {
      System.out.println("The following metrics are marked as temporal JMX.");
      System.out.println("JMX can provide point in time metrics only.\n");
      System.out.println("Metric version :" + version + "\n");
      for (      String s : set) {
        System.out.println(s);
      }
      Assert.fail("Found temporal JMX metrics.");
    }
  }
}
