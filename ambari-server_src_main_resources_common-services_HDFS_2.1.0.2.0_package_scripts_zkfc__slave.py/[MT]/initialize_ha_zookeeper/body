def initialize_ha_zookeeper(params):
    try:
        iterations = 10
        formatZK_cmd = 'hdfs zkfc -formatZK -nonInteractive'
        Logger.info(('Initialize HA state in ZooKeeper: %s' % formatZK_cmd))
        for i in range(iterations):
            Logger.info(('Try %d out of %d' % ((i + 1), iterations)))
            (code, out) = shell.call(formatZK_cmd, logoutput=False, user=params.hdfs_user)
            if (code == 0):
                Logger.info('HA state initialized in ZooKeeper successfully')
                return True
            elif (code == 2):
                Logger.info('HA state already initialized in ZooKeeper')
                return True
            else:
                Logger.warning(('HA state initialization in ZooKeeper failed with %d error code. Will retry' % code))
    except Exception as ex:
        Logger.error(('HA state initialization in ZooKeeper threw an exception. Reason %s' % str(ex)))
    return False

    def pre_upgrade_restart(self, env, upgrade_type=None):
        Logger.info('Executing Stack Upgrade pre-restart')
        import params
        env.set_params(params)
        if (params.version and check_stack_feature(StackFeature.ZKFC_VERSION_ADVERTISED, params.version) and check_stack_feature(StackFeature.ROLLING_UPGRADE, params.version)):
            conf_select.select(params.stack_name, 'hadoop', params.version)
            stack_select.select('hadoop-hdfs-zkfc', params.version)
