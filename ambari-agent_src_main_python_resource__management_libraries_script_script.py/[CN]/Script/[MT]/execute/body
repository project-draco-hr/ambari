def execute(self):
    '\n    Sets up logging;\n    Parses command parameters and executes method relevant to command type\n    '
    logger = logging.getLogger('resource_management')
    logger.setLevel(logging.DEBUG)
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    chout = logging.StreamHandler(sys.stdout)
    chout.setLevel(logging.DEBUG)
    chout.setFormatter(formatter)
    cherr = logging.StreamHandler(sys.stderr)
    cherr.setLevel(logging.ERROR)
    cherr.setFormatter(formatter)
    logger.addHandler(cherr)
    logger.addHandler(chout)
    if (len(sys.argv) < 5):
        logger.error('Script expects at least 4 arguments')
        sys.exit(1)
    command_name = str.lower(sys.argv[1])
    command_data_file = sys.argv[2]
    basedir = sys.argv[3]
    self.stroutfile = sys.argv[4]
    try:
        with open(command_data_file, 'r') as f:
            pass
            Script.config = ConfigDictionary(json.load(f))
    except IOError:
        logger.exception('Can not read json file with command parameters: ')
        sys.exit(1)
    try:
        method = self.choose_method_to_execute(command_name)
        with Environment(basedir) as env:
            method(env)
    except (ClientComponentHasNoStatus or ComponentIsNotRunning):
        sys.exit(1)
    except Fail:
        logger.exception('Got exception while executing command {0}:'.format(command_name))
        sys.exit(1)
