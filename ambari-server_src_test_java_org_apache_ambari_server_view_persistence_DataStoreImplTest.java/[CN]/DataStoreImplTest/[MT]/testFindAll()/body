{
  DynamicClassLoader classLoader=new DynamicClassLoader(DataStoreImplTest.class.getClassLoader());
  EntityManagerFactory entityManagerFactory=createMock(EntityManagerFactory.class);
  EntityManager entityManager=createMock(EntityManager.class);
  JPADynamicHelper jpaDynamicHelper=createNiceMock(JPADynamicHelper.class);
  SchemaManager schemaManager=createNiceMock(SchemaManager.class);
  DynamicEntity dynamicEntity=createMock(DynamicEntity.class);
  Query query=createMock(Query.class);
  Capture<DynamicType> typeCapture=new Capture<DynamicType>();
  Capture<DynamicType> typeCapture2=new Capture<DynamicType>();
  jpaDynamicHelper.addTypes(eq(true),eq(true),capture(typeCapture),capture(typeCapture2));
  expect(entityManagerFactory.createEntityManager()).andReturn(entityManager);
  expect(entityManager.createQuery("SELECT e FROM DS_DataStoreImplTest$TestEntity_1 e WHERE e.DS_id=99")).andReturn(query);
  entityManager.close();
  expect(query.getResultList()).andReturn(Collections.singletonList(dynamicEntity));
  expect(dynamicEntity.get("DS_id")).andReturn(99);
  expect(dynamicEntity.get("DS_name")).andReturn("foo");
  TestSubEntity subEntity=new TestSubEntity("bar");
  expect(dynamicEntity.get("DS_subEntity")).andReturn(subEntity);
  replay(entityManagerFactory,entityManager,jpaDynamicHelper,dynamicEntity,query,schemaManager);
  DataStoreImpl dataStore=getDataStore(entityManagerFactory,jpaDynamicHelper,classLoader,schemaManager);
  Collection<TestEntity> entities=dataStore.findAll(TestEntity.class,"id=99");
  Assert.assertEquals(1,entities.size());
  TestEntity entity=entities.iterator().next();
  Assert.assertEquals(99,entity.getId());
  Assert.assertEquals("foo",entity.getName());
  verify(entityManagerFactory,entityManager,jpaDynamicHelper,dynamicEntity,query,schemaManager);
}
