{
  DynamicClassLoader classLoader=new DynamicClassLoader(DataStoreImplTest.class.getClassLoader());
  EntityManagerFactory entityManagerFactory=createMock(EntityManagerFactory.class);
  EntityManager entityManager=createMock(EntityManager.class);
  JPADynamicHelper jpaDynamicHelper=createNiceMock(JPADynamicHelper.class);
  SchemaManager schemaManager=createNiceMock(SchemaManager.class);
  EntityTransaction transaction=createMock(EntityTransaction.class);
  Capture<DynamicType> typeCapture=new Capture<DynamicType>();
  Capture<DynamicType> typeCapture2=new Capture<DynamicType>();
  jpaDynamicHelper.addTypes(eq(true),eq(true),capture(typeCapture),capture(typeCapture2));
  expect(entityManagerFactory.createEntityManager()).andReturn(entityManager);
  expect(entityManager.getTransaction()).andReturn(transaction).anyTimes();
  Capture<Class> entityClassCapture2=new Capture<Class>();
  expect(entityManager.find(capture(entityClassCapture2),eq(99))).andReturn(null);
  entityManager.close();
  transaction.begin();
  expect(transaction.isActive()).andReturn(true);
  transaction.rollback();
  replay(entityManagerFactory,entityManager,jpaDynamicHelper,transaction,schemaManager);
  DataStoreImpl dataStore=getDataStore(entityManagerFactory,jpaDynamicHelper,classLoader,schemaManager);
  StringBuffer sb=new StringBuffer();
  for (int i=0; i < 5000; ++i) {
    sb.append("A");
  }
  String longString=sb.toString();
  try {
    dataStore.store(new TestEntity(99,longString,new TestSubEntity("bar")));
    Assert.fail("Expected PersistenceException.");
  }
 catch (  PersistenceException e) {
  }
  verify(entityManagerFactory,entityManager,jpaDynamicHelper,transaction,schemaManager);
}
