def security_status(self, env):
    import status_params
    env.set_params(status_params)
    if status_params.security_enabled:
        props_value_check = {'*.falcon.authentication.type': 'kerberos', '*.falcon.http.authentication.type': 'kerberos', }
        props_empty_check = ['*.falcon.service.authentication.kerberos.principal', '*.falcon.service.authentication.kerberos.keytab', '*.falcon.http.authentication.kerberos.principal', '*.falcon.http.authentication.kerberos.keytab']
        props_read_check = ['*.falcon.service.authentication.kerberos.keytab', '*.falcon.http.authentication.kerberos.keytab']
        falcon_startup_props = build_expectations('startup', props_value_check, props_empty_check, props_read_check)
        falcon_expectations = {}
        falcon_expectations.update(falcon_startup_props)
        security_params = get_params_from_filesystem('/etc/falcon/conf', {'startup.properties': FILE_TYPE_PROPERTIES, })
        result_issues = validate_security_config_properties(security_params, falcon_expectations)
        if (not result_issues):
            try:
                if ((('startup' not in security_params) or ('*.falcon.service.authentication.kerberos.keytab' not in security_params['startup']) or ('*.falcon.service.authentication.kerberos.principal' not in security_params['startup'])) or ('*.falcon.http.authentication.kerberos.keytab' not in security_params['startup']) or ('*.falcon.http.authentication.kerberos.principal' not in security_params['startup'])):
                    self.put_structured_out({'securityState': 'UNSECURED', })
                    self.put_structured_out({'securityIssuesFound': 'Keytab file or principal are not set property.', })
                    return
                cached_kinit_executor(status_params.kinit_path_local, status_params.falcon_user, security_params['startup']['*.falcon.service.authentication.kerberos.keytab'], security_params['startup']['*.falcon.service.authentication.kerberos.principal'], status_params.hostname, status_params.tmp_dir)
                cached_kinit_executor(status_params.kinit_path_local, status_params.falcon_user, security_params['startup']['*.falcon.http.authentication.kerberos.keytab'], security_params['startup']['*.falcon.http.authentication.kerberos.principal'], status_params.hostname, status_params.tmp_dir)
                self.put_structured_out({'securityState': 'SECURED_KERBEROS', })
            except Exception as e:
                self.put_structured_out({'securityState': 'ERROR', })
                self.put_structured_out({'securityStateErrorInfo': str(e), })
        else:
            issues = []
            for cf in result_issues:
                issues.append(('Configuration file %s did not pass the validation. Reason: %s' % (cf, result_issues[cf])))
            self.put_structured_out({'securityIssuesFound': '. '.join(issues), })
            self.put_structured_out({'securityState': 'UNSECURED', })
    else:
        self.put_structured_out({'securityState': 'UNSECURED', })
