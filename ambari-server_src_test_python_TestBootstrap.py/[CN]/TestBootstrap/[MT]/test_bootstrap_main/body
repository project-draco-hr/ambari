@patch.object(subprocess, 'Popen')
@patch('sys.stderr')
@patch('sys.exit')
@patch.object(PBootstrap, 'run')
@patch('os.path.dirname')
@patch('os.path.realpath')
def test_bootstrap_main(self, dirname_mock, realpath_mock, run_mock, exit_mock, stderr_mock, subprocess_Popen_mock):
    bootstrap.main(['bootstrap.py', 'hostname,hostname2', '/tmp/bootstrap', 'root', 'sshkey_file', 'setupAgent.py', 'ambariServer', 'centos6', '1.1.1', '8440', 'root', 'passwordfile'])
    self.assertTrue(run_mock.called)
    run_mock.reset_mock()
    bootstrap.main(['bootstrap.py', 'hostname,hostname2', '/tmp/bootstrap', 'root', 'sshkey_file', 'setupAgent.py', 'ambariServer', 'centos6', '1.1.1', '8440', 'root', None])
    self.assertTrue(run_mock.called)
    run_mock.reset_mock()

    def side_effect(retcode):
        raise Exception(retcode, 'sys.exit')
    exit_mock.side_effect = side_effect
    try:
        bootstrap.main(['bootstrap.py', 'hostname,hostname2', '/tmp/bootstrap'])
        self.fail('sys.exit(2)')
    except Exception:
        pass
    self.assertTrue(exit_mock.called)
