@patch('os.path.exists')
@patch.object(OSCheck, 'is_suse_family')
@patch.object(OSCheck, 'is_ubuntu_family')
@patch.object(OSCheck, 'is_redhat_family')
@patch.object(BootstrapDefault, 'getMoveRepoFileCommand')
@patch.object(BootstrapDefault, 'getRepoDir')
@patch.object(BootstrapDefault, 'getRepoFile')
@patch.object(BootstrapDefault, 'getRemoteName')
@patch.object(SCP, '__init__')
@patch.object(SCP, 'run')
@patch.object(SSH, '__init__')
@patch.object(SSH, 'run')
@patch.object(HostLog, 'write')
def test_copyNeededFiles(self, write_mock, ssh_run_mock, ssh_init_mock, scp_run_mock, scp_init_mock, getRemoteName_mock, getRepoFile_mock, getRepoDir, getMoveRepoFileCommand, is_redhat_family, is_ubuntu_family, is_suse_family, os_path_exists_mock):

    def os_path_exists_side_effect(*args, **kwargs):
        if (args[0] == getRepoFile_mock()):
            return True
        else:
            return False
    os_path_exists_mock.side_effect = os_path_exists_side_effect
    os_path_exists_mock.return_value = None
    shared_state = SharedState('root', '123', 'sshkey_file', 'scriptDir', 'bootdir', 'setupAgentFile', 'ambariServer', 'centos6', None, '8440', 'root')
    is_redhat_family.return_value = True
    is_ubuntu_family.return_value = False
    is_suse_family.return_value = False
    bootstrap_obj = Bootstrap('hostname', shared_state)
    getMoveRepoFileCommand.return_value = 'MoveRepoFileCommand'
    getRepoDir.return_value = 'RepoDir'
    getRemoteName_mock.return_value = 'RemoteName'
    getRepoFile_mock.return_value = 'RepoFile'
    expected1 = {'exitstatus': 42, 'log': 'log42', 'errormsg': 'errorMsg', }
    expected2 = {'exitstatus': 17, 'log': 'log17', 'errormsg': 'errorMsg', }
    expected3 = {'exitstatus': 1, 'log': 'log1', 'errormsg': 'errorMsg', }
    expected4 = {'exitstatus': 17, 'log': 'log17', 'errormsg': 'errorMsg', }
    scp_init_mock.return_value = None
    ssh_init_mock.return_value = None
    scp_run_mock.side_effect = [expected1, expected3]
    ssh_run_mock.side_effect = [expected2, expected4]
    res = bootstrap_obj.copyNeededFiles()
    self.assertEquals(res, expected1['exitstatus'])
    input_file = str(scp_init_mock.call_args[0][4])
    remote_file = str(scp_init_mock.call_args[0][5])
    self.assertEqual(input_file, 'setupAgentFile')
    self.assertEqual(remote_file, 'RemoteName')
    command = str(ssh_init_mock.call_args[0][4])
    self.assertEqual(command, '/var/lib/ambari-agent/tmp/ambari-sudo.sh chmod 644 RepoFile')
    expected1 = {'exitstatus': 0, 'log': 'log0', 'errormsg': 'errorMsg', }
    expected2 = {'exitstatus': 17, 'log': 'log17', 'errormsg': 'errorMsg', }
    expected3 = {'exitstatus': 1, 'log': 'log1', 'errormsg': 'errorMsg', }
    expected4 = {'exitstatus': 17, 'log': 'log17', 'errormsg': 'errorMsg', }
    scp_run_mock.side_effect = [expected1, expected3]
    ssh_run_mock.side_effect = [expected2, expected4]
    res = bootstrap_obj.copyNeededFiles()
    self.assertEquals(res, expected2['exitstatus'])
    expected1 = {'exitstatus': 33, 'log': 'log33', 'errormsg': 'errorMsg', }
    expected2 = {'exitstatus': 17, 'log': 'log17', 'errormsg': 'errorMsg', }
    expected3 = {'exitstatus': 42, 'log': 'log42', 'errormsg': 'errorMsg', }
    expected4 = {'exitstatus': 17, 'log': 'log17', 'errormsg': 'errorMsg', }
    scp_run_mock.side_effect = [expected1, expected3]
    ssh_run_mock.side_effect = [expected2, expected4]
    res = bootstrap_obj.copyNeededFiles()
    self.assertEquals(res, expected3['exitstatus'])
    os_path_exists_mock.side_effect = None
    os_path_exists_mock.return_value = False
    scp_run_mock.reset_mock()
    ssh_run_mock.reset_mock()
    expectedResult = {'exitstatus': 33, 'log': 'log33', 'errormsg': 'errorMsg', }
    scp_run_mock.side_effect = [expectedResult]
    res = bootstrap_obj.copyNeededFiles()
    self.assertFalse(ssh_run_mock.called)
    self.assertEquals(res, expectedResult['exitstatus'])
