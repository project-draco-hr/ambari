@patch.object(Bootstrap, 'getMoveRepoFileCommand')
@patch.object(Bootstrap, 'getRepoDir')
@patch.object(Bootstrap, 'getRepoFile')
@patch.object(Bootstrap, 'getRemoteName')
@patch.object(SCP, '__init__')
@patch.object(SCP, 'run')
@patch.object(SSH, '__init__')
@patch.object(SSH, 'run')
@patch.object(HostLog, 'write')
def test_copyNeededFiles(self, write_mock, ssh_run_mock, ssh_init_mock, scp_run_mock, scp_init_mock, getRemoteName_mock, getRepoFile_mock, getRepoDir, getMoveRepoFileCommand):
    shared_state = SharedState('root', 'sshkey_file', 'scriptDir', 'bootdir', 'setupAgentFile', 'ambariServer', 'centos6', None, '8440')
    bootstrap_obj = Bootstrap('hostname', shared_state)
    getMoveRepoFileCommand.return_value = 'MoveRepoFileCommand'
    getRepoDir.return_value = 'RepoDir'
    getRemoteName_mock.return_value = 'RemoteName'
    getRepoFile_mock.return_value = 'RepoFile'
    expected1 = 42
    expected2 = 17
    expected3 = 1
    scp_init_mock.return_value = None
    ssh_init_mock.return_value = None
    scp_run_mock.side_effect = [expected1, expected3]
    ssh_run_mock.side_effect = [expected2]
    res = bootstrap_obj.copyNeededFiles()
    self.assertEquals(res, expected1)
    input_file = str(scp_init_mock.call_args[0][3])
    remote_file = str(scp_init_mock.call_args[0][4])
    self.assertEqual(input_file, 'setupAgentFile')
    self.assertEqual(remote_file, 'RemoteName')
    command = str(ssh_init_mock.call_args[0][3])
    self.assertEqual(command, 'MoveRepoFileCommand')
    expected1 = 0
    expected2 = 17
    expected3 = 1
    scp_run_mock.side_effect = [expected1, expected3]
    ssh_run_mock.side_effect = [expected2]
    res = bootstrap_obj.copyNeededFiles()
    self.assertEquals(res, expected2)
    expected1 = 33
    expected2 = 17
    expected3 = 42
    scp_run_mock.side_effect = [expected1, expected3]
    ssh_run_mock.side_effect = [expected2]
    res = bootstrap_obj.copyNeededFiles()
    self.assertEquals(res, expected3)
