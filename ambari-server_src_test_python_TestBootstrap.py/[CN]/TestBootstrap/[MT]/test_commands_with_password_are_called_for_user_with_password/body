def test_commands_with_password_are_called_for_user_with_password(self):

    def communicate(self, input=None, timeout=None):
        self.returncode = 0
        return ('', '')
    Popen.communicate = communicate
    SCP.writeLogToFile = (lambda self, logFilePath: None)
    SSH.writeLogToFile = (lambda self, logFilePath: None)
    SSH.writeDoneToFile = (lambda self, doneFilePath, returncode: None)
    BootStrap.createDoneFiles = (lambda self: None)
    getRunSetupWithPasswordCommand = MagicMock()
    getRunSetupWithPasswordCommand.return_value = ''
    BootStrap.getRunSetupWithPasswordCommand = getRunSetupWithPasswordCommand
    getMoveRepoFileWithPasswordCommand = MagicMock()
    getMoveRepoFileWithPasswordCommand.return_value = ''
    BootStrap.getMoveRepoFileWithPasswordCommand = getMoveRepoFileWithPasswordCommand
    os.environ[AMBARI_PASSPHRASE_VAR_NAME] = ''
    bootstrap = BootStrap(['hostname'], 'user', 'sshKeyFile', 'scriptDir', 'bootdir', 'setupAgentFile', 'ambariServer', 'centos6', 'passwordFile')
    ret = bootstrap.run()
    self.assertTrue(getRunSetupWithPasswordCommand.called)
    self.assertTrue(getMoveRepoFileWithPasswordCommand.called)
