@patch.object(SCP, 'writeLogToFile')
@patch.object(SSH, 'writeLogToFile')
@patch.object(Popen, 'communicate')
@patch.object(BootStrap, 'createDoneFiles')
@patch.object(BootStrap, 'getRunSetupWithPasswordCommand')
@patch.object(BootStrap, 'getMoveRepoFileWithPasswordCommand')
def test_commands_with_password_are_called_for_user_with_password(self, getMoveRepoFileWithPasswordCommand_method, getRunSetupWithPasswordCommand_method, createDoneFiles_method, communicate_method, SSH_writeLogToFile_method, SCP_writeLogToFile_method):
    SCP_writeLogToFile_method.return_value = None
    SSH_writeLogToFile_method.return_value = None
    communicate_method.return_value = ('', '')
    createDoneFiles_method.return_value = None
    getRunSetupWithPasswordCommand_method.return_value = ''
    getMoveRepoFileWithPasswordCommand_method.return_value = ''
    os.environ[AMBARI_PASSPHRASE_VAR_NAME] = ''
    hosts = ['hostname']
    bootstrap = BootStrap(['hostname'], 'user', 'sshKeyFile', 'scriptDir', 'bootdir', 'setupAgentFile', 'ambariServer', 'centos6', None, '8440', 'passwordFile')
    bootstrap.successive_hostlist = hosts
    bootstrap.copyOsCheckScript()
    bootstrap.successive_hostlist = hosts
    bootstrap.copyNeededFiles()
    bootstrap.successive_hostlist = hosts
    bootstrap.runSetupAgent()
    self.assertTrue(getRunSetupWithPasswordCommand_method.called)
    self.assertTrue(getMoveRepoFileWithPasswordCommand_method.called)
