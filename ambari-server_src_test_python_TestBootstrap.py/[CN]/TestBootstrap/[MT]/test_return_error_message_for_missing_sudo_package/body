@patch.object(bootstrap, 'get_difference')
@patch.object(SCP, 'writeLogToFile')
@patch.object(SSH, 'writeLogToFile')
@patch.object(Popen, 'communicate')
def test_return_error_message_for_missing_sudo_package(self, communicate_method, SSH_writeLogToFile_method, SCP_writeLogToFile_method, get_difference_mock):
    SCP_writeLogToFile_method.return_value = None
    SSH_writeLogToFile_method.return_value = None
    get_difference_mock.return_value = None
    communicate_method.return_value = ('', '')
    bootstrap_obj = BootStrap(['hostname'], 'root', 'sshKeyFile', 'scriptDir', 'bootdir', 'setupAgentFile', 'ambariServer', 'centos6', None, '8440')
    bootstrap_obj.statuses = {'hostname': {'exitstatus': 0, 'log': '', }, }
    ret = bootstrap_obj.checkSudoPackage()
    self.assertTrue(('Error: Sudo command is not available. Please install the sudo command.' in bootstrap_obj.statuses['hostname']['log']))
    bootstrap_obj.statuses = None
    ret = bootstrap_obj.checkSudoPackage()
    self.assertTrue((ret == None))
    obj = MagicMock()
    objtype = MagicMock()
    func = bootstrap_obj.__get__(obj, objtype)
    self.assertTrue((not (func is None)))
