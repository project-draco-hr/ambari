@patch.object(BootstrapDefault, 'getPasswordFile')
@patch.object(SCP, '__init__')
@patch.object(SCP, 'run')
@patch.object(SSH, '__init__')
@patch.object(SSH, 'run')
@patch.object(HostLog, 'write')
def test_copyPasswordFile(self, write_mock, ssh_run_mock, ssh_init_mock, scp_run_mock, scp_init_mock, getPasswordFile_mock):
    shared_state = SharedState('root', '123', 'sshkey_file', 'scriptDir', 'bootdir', 'setupAgentFile', 'ambariServer', 'centos6', None, '8440', 'root', password_file='PasswordFile')
    bootstrap_obj = Bootstrap('hostname', shared_state)
    getPasswordFile_mock.return_value = 'PasswordFile'
    expected1 = {'exitstatus': 42, 'log': 'log42', 'errormsg': 'errorMsg', }
    expected2 = {'exitstatus': 17, 'log': 'log17', 'errormsg': 'errorMsg', }
    scp_init_mock.return_value = None
    scp_run_mock.return_value = expected1
    ssh_init_mock.return_value = None
    ssh_run_mock.return_value = expected2
    res = bootstrap_obj.copyPasswordFile()
    self.assertEquals(res, expected1['exitstatus'])
    input_file = str(scp_init_mock.call_args[0][4])
    remote_file = str(scp_init_mock.call_args[0][4])
    self.assertEqual(input_file, 'PasswordFile')
    self.assertEqual(remote_file, 'PasswordFile')
    command = str(ssh_init_mock.call_args[0][4])
    self.assertEqual(command, 'chmod 600 PasswordFile')
    expected1 = {'exitstatus': 0, 'log': 'log0', 'errormsg': 'errorMsg', }
    expected2 = {'exitstatus': 17, 'log': 'log17', 'errormsg': 'errorMsg', }
    scp_run_mock.return_value = expected1
    ssh_run_mock.return_value = expected2
