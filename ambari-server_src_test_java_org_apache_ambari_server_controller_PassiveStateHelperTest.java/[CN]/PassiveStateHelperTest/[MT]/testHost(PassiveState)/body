{
  AmbariManagementController amc=createMock(AmbariManagementController.class);
  Capture<ExecuteActionRequest> earCapture=new Capture<ExecuteActionRequest>();
  Capture<Map<String,String>> rpCapture=new Capture<Map<String,String>>();
  expect(amc.createAction(capture(earCapture),capture(rpCapture))).andReturn(null);
  Cluster cluster=createMock(Cluster.class);
  Service service=createMock(Service.class);
  ServiceComponent sc1=createMock(ServiceComponent.class);
  ServiceComponent sc2=createMock(ServiceComponent.class);
  expect(sc1.isClientComponent()).andReturn(Boolean.FALSE).anyTimes();
  expect(sc2.isClientComponent()).andReturn(Boolean.TRUE).anyTimes();
  ServiceComponentHost sch1=createMock(ServiceComponentHost.class);
  Map<String,ServiceComponentHost> schMap=new HashMap<String,ServiceComponentHost>();
  schMap.put("h1",sch1);
  expect(sch1.getHostName()).andReturn("h1");
  expect(sch1.getServiceName()).andReturn("HDFS").anyTimes();
  expect(sch1.getServiceComponentName()).andReturn("NAMENODE").anyTimes();
  List<ServiceComponentHost> schList=new ArrayList<ServiceComponentHost>(schMap.values());
  expect(cluster.getClusterName()).andReturn("c1").anyTimes();
  expect(cluster.getService("HDFS")).andReturn(service).anyTimes();
  expect(cluster.getClusterId()).andReturn(Long.valueOf(1L));
  expect(cluster.getServiceComponentHosts("h1")).andReturn(schList);
  expect(service.getServiceComponent("NAMENODE")).andReturn(sc1);
  Host host=createMock(Host.class);
  expect(host.getHostName()).andReturn("h1").anyTimes();
  expect(host.getPassiveState(1L)).andReturn(state);
  replay(amc,cluster,service,sch1,host);
  PassiveStateHelper.createRequest(amc,cluster.getClusterName(),host.getHostName());
  ExecuteActionRequest ear=earCapture.getValue();
  Map<String,String> map=rpCapture.getValue();
  Assert.assertEquals("nagios_update_ignore",ear.getActionName());
  Assert.assertEquals("ACTIONEXECUTE",ear.getCommandName());
  Assert.assertEquals("NAGIOS",ear.getServiceName());
  Assert.assertEquals("NAGIOS_SERVER",ear.getComponentName());
  Assert.assertEquals("c1",ear.getClusterName());
  Assert.assertTrue(map.containsKey("context"));
}
