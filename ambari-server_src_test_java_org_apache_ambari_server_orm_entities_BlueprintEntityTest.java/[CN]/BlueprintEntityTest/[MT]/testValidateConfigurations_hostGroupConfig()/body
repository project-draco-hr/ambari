{
  AmbariMetaInfo metaInfo=createMock(AmbariMetaInfo.class);
  Map<String,PropertyInfo> requiredProps=new HashMap<String,PropertyInfo>();
  PropertyInfo prop=new PropertyInfo();
  prop.setFilename("core-site.xml");
  prop.setName("super.secret.password");
  prop.setRequireInput(true);
  Set<PropertyInfo.PropertyType> propertyTypes=new HashSet<PropertyInfo.PropertyType>();
  propertyTypes.add(PropertyInfo.PropertyType.PASSWORD);
  prop.setPropertyTypes(propertyTypes);
  prop.setValue(null);
  requiredProps.put("super.secret.password",prop);
  BlueprintEntity entity=new BlueprintEntity();
  entity.setStackName("stackName");
  entity.setStackVersion("version");
  entity.setConfigurations(Collections.<BlueprintConfigEntity>emptyList());
  Collection<HostGroupEntity> hostGroupEntities=new HashSet<HostGroupEntity>();
  HostGroupEntity hostGroupEntity=new HostGroupEntity();
  hostGroupEntity.setName("group1");
  Collection<HostGroupComponentEntity> hostGroupComponents=new HashSet<HostGroupComponentEntity>();
  HostGroupComponentEntity componentEntity=new HostGroupComponentEntity();
  componentEntity.setName("component1");
  componentEntity.setBlueprintName("blueprint");
  componentEntity.setHostGroupEntity(hostGroupEntity);
  componentEntity.setHostGroupName("group1");
  hostGroupComponents.add(componentEntity);
  hostGroupEntity.setComponents(hostGroupComponents);
  Collection<HostGroupConfigEntity> configurations=new HashSet<HostGroupConfigEntity>();
  HostGroupConfigEntity configEntity=new HostGroupConfigEntity();
  configEntity.setHostGroupEntity(hostGroupEntity);
  configEntity.setBlueprintName("blueprint");
  configEntity.setType("core-site");
  Map<String,String> configData=new HashMap<String,String>();
  configData.put("foo","val1");
  configData.put("bar","val2");
  configData.put("super.secret.password","password");
  configEntity.setConfigData(new Gson().toJson(configData));
  configurations.add(configEntity);
  hostGroupEntity.setConfigurations(configurations);
  hostGroupEntities.add(hostGroupEntity);
  entity.setHostGroups(hostGroupEntities);
  expect(metaInfo.getComponentToService("stackName","version","component1")).andReturn("service1");
  expect(metaInfo.getRequiredProperties("stackName","version","service1")).andReturn(requiredProps);
  replay(metaInfo);
  Map<String,Map<String,Collection<String>>> missingProps=entity.validateConfigurations(metaInfo,true);
  assertTrue(missingProps.isEmpty());
  verify(metaInfo);
}
