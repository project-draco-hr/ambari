{
  if (stackLocation == null || stackLocation.equals("")) {
    String msg="Query parameter url must be specified";
    throw new WebApplicationException((new ExceptionResponse(msg,Response.Status.BAD_REQUEST)).get());
  }
  URL stackLocationURL;
  try {
    stackLocationURL=new URL(stackLocation);
  }
 catch (  MalformedURLException e) {
    String msg="MalformedURLException for stack location URL";
    throw new WebApplicationException((new ExceptionResponse(msg,Response.Status.BAD_REQUEST)).get());
  }
  ObjectMapper m=new ObjectMapper();
  InputStream is=stackLocationURL.openStream();
  Stack stack=m.readValue(is,Stack.class);
  if (stacks.containsKey(stack.getName())) {
    if (stacks.get(stack.getName()).containsKey(stack.getStackRevision())) {
      String msg="Specified stack [Name:" + stack.getName() + ", Revision: ["+ stack.getStackRevision()+ "] is already imported";
      throw new WebApplicationException((new ExceptionResponse(msg,Response.Status.BAD_REQUEST)).get());
    }
 else {
      stacks.get(stack.getName()).put(stack.getStackRevision(),stack);
      Blueprint blueprint=importDefaultBlueprint(stack);
      this.default_blueprints.put(stack.getName() + ":" + stack.getStackRevision(),blueprint);
    }
  }
 else {
    ConcurrentHashMap<Integer,Stack> x=new ConcurrentHashMap<Integer,Stack>();
    x.put(stack.getStackRevision(),stack);
    this.stacks.put(stack.getName(),x);
    Blueprint blueprint=importDefaultBlueprint(stack);
    this.default_blueprints.put(stack.getName() + ":" + stack.getStackRevision(),blueprint);
  }
  return stack;
}
