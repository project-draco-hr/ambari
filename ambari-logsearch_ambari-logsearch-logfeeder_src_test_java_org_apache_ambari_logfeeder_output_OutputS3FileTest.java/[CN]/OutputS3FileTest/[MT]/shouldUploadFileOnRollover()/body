{
  Input input=mock(Input.class);
  InputMarker inputMarker=new InputMarker(input,null,0);
  expect(input.getFilePath()).andReturn("/var/log/hdfs-namenode.log");
  expect(input.getStringValue(OutputS3File.INPUT_ATTRIBUTE_TYPE)).andReturn("hdfs-namenode");
  final LogSpooler spooler=mock(LogSpooler.class);
  spooler.add("log event block1");
  final S3Uploader s3Uploader=mock(S3Uploader.class);
  s3Uploader.addFileForUpload("/var/ambari-logsearch/logfeeder/hdfs-namenode.log.gz");
  replay(input,spooler,s3Uploader);
  OutputS3File outputS3File=new OutputS3File(){
    @Override protected LogSpooler createSpooler(    String filePath){
      return spooler;
    }
    @Override protected S3Uploader createUploader(    String logType){
      return s3Uploader;
    }
  }
;
  outputS3File.write("log event block1",inputMarker);
  outputS3File.handleRollover(new File("/var/ambari-logsearch/logfeeder/hdfs-namenode.log.gz"));
  verify(s3Uploader);
}
