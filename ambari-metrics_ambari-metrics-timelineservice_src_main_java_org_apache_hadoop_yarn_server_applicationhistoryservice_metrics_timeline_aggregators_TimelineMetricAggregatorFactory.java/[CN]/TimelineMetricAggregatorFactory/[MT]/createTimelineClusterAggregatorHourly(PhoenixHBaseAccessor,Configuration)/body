{
  String checkpointDir=metricsConf.get(TIMELINE_METRICS_AGGREGATOR_CHECKPOINT_DIR,DEFAULT_CHECKPOINT_LOCATION);
  String checkpointLocation=FilenameUtils.concat(checkpointDir,CLUSTER_AGGREGATOR_HOURLY_CHECKPOINT_FILE);
  long sleepIntervalMillis=SECONDS.toMillis(metricsConf.getLong(CLUSTER_AGGREGATOR_HOUR_SLEEP_INTERVAL,3600l));
  int checkpointCutOffMultiplier=metricsConf.getInt(CLUSTER_AGGREGATOR_HOUR_CHECKPOINT_CUTOFF_MULTIPLIER,2);
  String inputTableName=METRICS_CLUSTER_AGGREGATE_TABLE_NAME;
  String outputTableName=METRICS_CLUSTER_AGGREGATE_HOURLY_TABLE_NAME;
  String aggregatorDisabledParam=CLUSTER_AGGREGATOR_HOUR_DISABLED;
  if (useGroupByAggregator(metricsConf)) {
    return new org.apache.hadoop.yarn.server.applicationhistoryservice.metrics.timeline.aggregators.v2.TimelineMetricClusterAggregator("TimelineClusterAggregatorHourly",hBaseAccessor,metricsConf,checkpointLocation,sleepIntervalMillis,checkpointCutOffMultiplier,aggregatorDisabledParam,inputTableName,outputTableName,120000l);
  }
  return new TimelineMetricClusterAggregator("TimelineClusterAggregatorHourly",hBaseAccessor,metricsConf,checkpointLocation,sleepIntervalMillis,checkpointCutOffMultiplier,aggregatorDisabledParam,inputTableName,outputTableName,120000l);
}
