def invoke(self, http_method, path, payload=None, headers=None):
    '\n        Submit an HTTP request.\n        @param http_method: GET, POST, PUT, DELETE\n        @param path: The path of the resource.\n        @param payload: The payload to attach to the body of the request.\n        @param headers: The headers to set for this request.\n\n        @return: The result of REST request\n        '
    LOG.debug(('invoke : http_method = ' + str(http_method)))
    url = self._normalize(path)
    if (http_method in ('GET', 'DELETE')):
        if (payload is not None):
            self.logger.warn(("GET http_method does not pass any payload. Path '%s'" % (path,)))
            payload = None
    buf = cStringIO.StringIO()
    self.c.setopt(pycurl.WRITEFUNCTION, buf.write)
    self.c.setopt(pycurl.SSL_VERIFYPEER, 0)
    LOG.debug(('invoke : url = ' + str(url)))
    if (http_method == 'GET'):
        self.c.setopt(pycurl.HTTPGET, 1)
    elif (http_method == 'HEAD'):
        self.c.setopt(pycurl.HTTPGET, 1)
        self.c.setopt(pycurl.NOBODY, 1)
    elif (http_method == 'POST'):
        self.c.setopt(pycurl.POST, 1)
    elif (http_method == 'PUT'):
        self.c.setopt(pycurl.UPLOAD, 1)
    else:
        self.c.setopt(pycurl.CUSTOMREQUEST, http_method)
    data = None
    if (http_method in ('POST', 'PUT')):
        LOG.debug(('data...........' + str(payload)))
        data = json.dumps(payload)
        data = self._to_bytestring(data)
        LOG.debug('after _to_bytestring')
        LOG.debug(data)
        content = StringIO.StringIO(data)
        LOG.debug(content)
        content_length = len(data)
        LOG.debug(('content_length.........' + str(content_length)))
        if (http_method == 'POST'):
            self.c.setopt(pycurl.POSTFIELDSIZE, content_length)
        else:
            self.c.setopt(pycurl.INFILESIZE, content_length)
        self.c.setopt(pycurl.READFUNCTION, content.read)
    self.c.setopt(self.c.URL, url)
    headers = self._get_headers(headers)
    headers_l = [('%s: %s' % pair) for pair in sorted(headers.iteritems())]
    LOG.debug(headers_l)
    self.c.setopt(pycurl.HTTPHEADER, headers_l)
    LOG.debug(('invoke : pycurl.EFFECTIVE_URL = ' + self.c.getinfo(pycurl.EFFECTIVE_URL)))
    try:
        self.c.perform()
    except Exception as ex:
        LOG.debug(sys.stderr, str(ex))
        raise ex
    contents_type = self.c.getinfo(pycurl.CONTENT_TYPE)
    LOG.debug(('invoke : pycurl.CONTENT_TYPE = ' + contents_type))
    code = self.c.getinfo(pycurl.RESPONSE_CODE)
    LOG.debug(('invoke : pycurl.RESPONSE_CODE = ' + str(code)))
    response = buf.getvalue()
    buf.close()
    LOG.debug('invoke : COMPLETED ')
    return (response, code, contents_type)
