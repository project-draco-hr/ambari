{
  if (request.getProperties().size() > 1) {
    throw new UnsupportedOperationException("Multiple actions/commands cannot be executed at the same time.");
  }
  final ExecuteActionRequest actionRequest=getActionRequest(request);
  final Map<String,String> requestInfoProperties=request.getRequestInfoProperties();
  return getRequestStatus(createResources(new Command<RequestStatusResponse>(){
    @Override public RequestStatusResponse invoke() throws AmbariException, AuthorizationException {
      String clusterName=actionRequest.getClusterName();
      if (clusterName == null) {
        String actionName=actionRequest.getActionName();
        if (StringUtils.isEmpty(actionName)) {
          actionName="_unknown_action_";
        }
        ActionDefinition actionDefinition=getManagementController().getAmbariMetaInfo().getActionDefinition(actionName);
        Set<RoleAuthorization> permissions=(actionDefinition == null) ? null : actionDefinition.getPermissions();
        if (permissions == null) {
          if (!AuthorizationHelper.isAuthorized(ResourceType.AMBARI,null,RoleAuthorization.SERVICE_RUN_CUSTOM_COMMAND)) {
            throw new AuthorizationException(String.format("The authenticated user is not authorized to execute the '%s'command.",actionName));
          }
        }
 else {
          if (!AuthorizationHelper.isAuthorized(ResourceType.CLUSTER,null,permissions)) {
            throw new AuthorizationException(String.format("The authenticated user is not authorized to execute the '%s'command.",actionName));
          }
        }
      }
 else       if (actionRequest.isCommand()) {
        if (!AuthorizationHelper.isAuthorized(ResourceType.CLUSTER,getClusterResourceId(clusterName),RoleAuthorization.SERVICE_RUN_CUSTOM_COMMAND)) {
          throw new AuthorizationException("The authenticated user is not authorized to execute custom service commands.");
        }
      }
 else {
        String actionName=actionRequest.getActionName();
        if (actionName.contains("SERVICE_CHECK")) {
          if (!AuthorizationHelper.isAuthorized(ResourceType.CLUSTER,getClusterResourceId(clusterName),RoleAuthorization.SERVICE_RUN_SERVICE_CHECK)) {
            throw new AuthorizationException("The authenticated user is not authorized to execute service checks.");
          }
        }
 else         if (actionName.equals("DECOMMISSION")) {
          if (!AuthorizationHelper.isAuthorized(ResourceType.CLUSTER,getClusterResourceId(clusterName),RoleAuthorization.SERVICE_DECOMMISSION_RECOMMISSION)) {
            throw new AuthorizationException("The authenticated user is not authorized to decommission services.");
          }
        }
      }
      return getManagementController().createAction(actionRequest,requestInfoProperties);
    }
  }
));
}
