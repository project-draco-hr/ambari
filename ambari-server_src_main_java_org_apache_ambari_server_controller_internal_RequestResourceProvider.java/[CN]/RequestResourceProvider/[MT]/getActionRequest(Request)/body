{
  Map<String,String> requestInfoProperties=request.getRequestInfoProperties();
  Map<String,Object> propertyMap=request.getProperties().iterator().next();
  Boolean isCommand=requestInfoProperties.containsKey(COMMAND_ID);
  String commandName=null;
  String actionName=null;
  if (isCommand) {
    if (requestInfoProperties.containsKey(ACTION_ID)) {
      throw new UnsupportedOperationException("Both command and action cannot be specified.");
    }
    commandName=requestInfoProperties.get(COMMAND_ID);
  }
 else {
    if (!requestInfoProperties.containsKey(ACTION_ID)) {
      throw new UnsupportedOperationException("Either command or action must be specified.");
    }
    actionName=requestInfoProperties.get(ACTION_ID);
  }
  List<RequestResourceFilter> resourceFilters=null;
  Object resourceFilterObj=propertyMap.get(REQUEST_RESOURCE_FILTER_ID);
  if (resourceFilterObj != null) {
    Type filterListType=new TypeToken<List<RequestResourceFilter>>(){
    }
.getType();
    resourceFilters=gson.fromJson((String)resourceFilterObj,filterListType);
  }
  Map<String,String> params=new HashMap<String,String>();
  String keyPrefix="/" + INPUTS_ID + "/";
  for (  String key : requestInfoProperties.keySet()) {
    if (key.startsWith(keyPrefix)) {
      params.put(key.substring(keyPrefix.length()),requestInfoProperties.get(key));
    }
  }
  return new ExecuteActionRequest((String)propertyMap.get(REQUEST_CLUSTER_NAME_PROPERTY_ID),commandName,actionName,resourceFilters,params);
}
