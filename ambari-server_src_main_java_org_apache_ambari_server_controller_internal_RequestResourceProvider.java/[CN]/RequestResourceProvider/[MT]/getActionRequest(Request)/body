{
  Map<String,String> requestInfoProperties=request.getRequestInfoProperties();
  Map<String,Object> propertyMap=request.getProperties().iterator().next();
  Boolean isCommand=requestInfoProperties.containsKey(COMMAND_ID);
  String commandName=null;
  String actionName=null;
  if (isCommand) {
    if (requestInfoProperties.containsKey(ACTION_ID)) {
      throw new UnsupportedOperationException("Both command and action cannot be specified.");
    }
    commandName=requestInfoProperties.get(COMMAND_ID);
  }
 else {
    if (!requestInfoProperties.containsKey(ACTION_ID)) {
      throw new UnsupportedOperationException("Either command or action must be specified.");
    }
    actionName=requestInfoProperties.get(ACTION_ID);
  }
  List<RequestResourceFilter> resourceFilterList=null;
  Set<Map<String,Object>> resourceFilters=null;
  Object resourceFilterObj=propertyMap.get(REQUEST_RESOURCE_FILTER_ID);
  if (resourceFilterObj != null && resourceFilterObj instanceof HashSet) {
    resourceFilters=(HashSet<Map<String,Object>>)resourceFilterObj;
    resourceFilterList=new ArrayList<RequestResourceFilter>();
    for (    Map<String,Object> resourceMap : resourceFilters) {
      Object serviceName=resourceMap.get(SERVICE_ID);
      Object componentName=resourceMap.get(COMPONENT_ID);
      Object hosts=resourceMap.get(HOSTS_ID);
      List<String> hostList=null;
      if (hosts != null) {
        hostList=new ArrayList<String>();
        for (        String hostName : ((String)hosts).split(",")) {
          hostList.add(hostName.trim());
        }
      }
      resourceFilterList.add(new RequestResourceFilter(serviceName != null ? (String)serviceName : null,componentName != null ? (String)componentName : null,hostList));
    }
  }
  RequestOperationLevel operationLevel=null;
  Object operationLevelObj=requestInfoProperties.get(OPERATION_LEVEL_ID);
  if (operationLevelObj != null) {
    Resource.Type level;
    try {
      String internalOpLevelNameStr=RequestOperationLevel.getInternalLevelName((String)operationLevelObj);
      level=Resource.Type.valueOf(internalOpLevelNameStr);
    }
 catch (    IllegalArgumentException e) {
      String message=String.format("Wrong operation level value: %s",operationLevelObj);
      throw new UnsupportedOperationException(message,e);
    }
    if (!requestInfoProperties.containsKey(OPERATION_CLUSTER_ID)) {
      String message=String.format("Mandatory key %s for operation level is not specified",OPERATION_CLUSTER_ID);
      throw new UnsupportedOperationException(message);
    }
    String clusterName=requestInfoProperties.get(OPERATION_CLUSTER_ID);
    String serviceName=requestInfoProperties.get(OPERATION_SERVICE_ID);
    String hostComponentName=requestInfoProperties.get(OPERATION_HOSTCOMPONENT_ID);
    String hostName=requestInfoProperties.get(OPERATION_HOST_ID);
    operationLevel=new RequestOperationLevel(level,clusterName,serviceName,hostComponentName,hostName);
  }
  Map<String,String> params=new HashMap<String,String>();
  String keyPrefix=INPUTS_ID + "/";
  for (  String key : requestInfoProperties.keySet()) {
    if (key.startsWith(keyPrefix)) {
      params.put(key.substring(keyPrefix.length()),requestInfoProperties.get(key));
    }
  }
  return new ExecuteActionRequest((String)propertyMap.get(REQUEST_CLUSTER_NAME_PROPERTY_ID),commandName,actionName,resourceFilterList,operationLevel,params);
}
