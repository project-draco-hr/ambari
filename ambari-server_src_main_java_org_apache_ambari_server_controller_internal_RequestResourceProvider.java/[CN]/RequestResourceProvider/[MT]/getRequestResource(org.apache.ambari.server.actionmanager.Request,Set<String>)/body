{
  Resource resource=new ResourceImpl(Resource.Type.Request);
  if (null != request.getClusterName())   setResourceProperty(resource,REQUEST_CLUSTER_NAME_PROPERTY_ID,request.getClusterName(),requestedPropertyIds);
  setResourceProperty(resource,REQUEST_ID_PROPERTY_ID,request.getRequestId(),requestedPropertyIds);
  setResourceProperty(resource,REQUEST_CONTEXT_ID,request.getRequestContext(),requestedPropertyIds);
  setResourceProperty(resource,REQUEST_TYPE_ID,request.getRequestType(),requestedPropertyIds);
  setResourceProperty(resource,REQUEST_INPUTS_ID,request.getInputs(),requestedPropertyIds);
  setResourceProperty(resource,REQUEST_RESOURCE_FILTER_ID,request.getResourceFilters(),requestedPropertyIds);
  RequestOperationLevel operationLevel=request.getOperationLevel();
  String opLevelStr=null;
  if (operationLevel != null) {
    opLevelStr=RequestOperationLevel.getExternalLevelName(operationLevel.getLevel().toString());
  }
  setResourceProperty(resource,REQUEST_OPERATION_LEVEL_ID,opLevelStr,requestedPropertyIds);
  setResourceProperty(resource,REQUEST_CREATE_TIME_ID,request.getCreateTime(),requestedPropertyIds);
  setResourceProperty(resource,REQUEST_START_TIME_ID,request.getStartTime(),requestedPropertyIds);
  setResourceProperty(resource,REQUEST_END_TIME_ID,request.getEndTime(),requestedPropertyIds);
  if (request.getRequestScheduleId() != null) {
    setResourceProperty(resource,REQUEST_SOURCE_SCHEDULE_ID,request.getRequestScheduleId(),requestedPropertyIds);
  }
 else {
    setResourceProperty(resource,REQUEST_SOURCE_SCHEDULE,null,requestedPropertyIds);
  }
  List<HostRoleCommand> commands=request.getCommands();
  int taskCount=commands.size();
  int completedTaskCount=0;
  int queuedTaskCount=0;
  int pendingTaskCount=0;
  int failedTaskCount=0;
  int abortedTaskCount=0;
  int timedOutTaskCount=0;
  for (  HostRoleCommand hostRoleCommand : commands) {
    HostRoleStatus status=hostRoleCommand.getStatus();
    if (status.isCompletedState()) {
      completedTaskCount++;
switch (status) {
case ABORTED:
        abortedTaskCount++;
      break;
case FAILED:
    failedTaskCount++;
  break;
case TIMEDOUT:
timedOutTaskCount++;
break;
}
}
 else if (status.equals(HostRoleStatus.QUEUED)) {
queuedTaskCount++;
}
 else if (status.equals(HostRoleStatus.PENDING)) {
pendingTaskCount++;
}
}
int inProgressTaskCount=taskCount - completedTaskCount - queuedTaskCount- pendingTaskCount;
HostRoleStatus requestStatus=failedTaskCount > 0 ? HostRoleStatus.FAILED : abortedTaskCount > 0 ? HostRoleStatus.ABORTED : timedOutTaskCount > 0 ? HostRoleStatus.TIMEDOUT : inProgressTaskCount > 0 ? HostRoleStatus.IN_PROGRESS : completedTaskCount == taskCount ? HostRoleStatus.COMPLETED : HostRoleStatus.PENDING;
double progressPercent=((queuedTaskCount * 0.09 + inProgressTaskCount * 0.35 + completedTaskCount) / (double)taskCount) * 100.0;
setResourceProperty(resource,REQUEST_STATUS_PROPERTY_ID,requestStatus.toString(),requestedPropertyIds);
setResourceProperty(resource,REQUEST_TASK_CNT_ID,taskCount,requestedPropertyIds);
setResourceProperty(resource,REQUEST_FAILED_TASK_CNT_ID,failedTaskCount,requestedPropertyIds);
setResourceProperty(resource,REQUEST_ABORTED_TASK_CNT_ID,abortedTaskCount,requestedPropertyIds);
setResourceProperty(resource,REQUEST_TIMED_OUT_TASK_CNT_ID,timedOutTaskCount,requestedPropertyIds);
setResourceProperty(resource,REQUEST_QUEUED_TASK_CNT_ID,queuedTaskCount,requestedPropertyIds);
setResourceProperty(resource,REQUEST_COMPLETED_TASK_CNT_ID,completedTaskCount,requestedPropertyIds);
setResourceProperty(resource,REQUEST_PROGRESS_PERCENT_ID,progressPercent,requestedPropertyIds);
return resource;
}
