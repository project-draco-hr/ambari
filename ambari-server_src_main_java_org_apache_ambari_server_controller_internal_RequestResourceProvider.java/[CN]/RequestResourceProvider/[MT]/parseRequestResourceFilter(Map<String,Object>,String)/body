{
  List<RequestResourceFilter> resourceFilterList=new ArrayList<>();
  String serviceName=(String)resourceMap.get(SERVICE_ID);
  String componentName=(String)resourceMap.get(COMPONENT_ID);
  String hostsPredicate=(String)resourceMap.get(HOSTS_PREDICATE);
  Object hostListStr=resourceMap.get(HOSTS_ID);
  List<String> hostList=Collections.<String>emptyList();
  if (hostListStr != null) {
    hostList=new ArrayList<String>();
    for (    String hostName : ((String)hostListStr).split(",")) {
      hostList.add(hostName.trim());
    }
    resourceFilterList.add(new RequestResourceFilter(serviceName,componentName,hostList));
  }
 else   if (hostsPredicate != null) {
    Predicate filterPredicate;
    try {
      filterPredicate=predicateCompiler.compile(hostsPredicate);
    }
 catch (    InvalidQueryException e) {
      String msg="Invalid predicate expression provided: " + hostsPredicate;
      LOG.warn(msg,e);
      throw new SystemException(msg,e);
    }
    ResourceProvider resourceProvider=getResourceProvider(Resource.Type.HostComponent);
    Set<String> propertyIds=new HashSet<String>();
    propertyIds.add(HOST_COMPONENT_CLUSTER_NAME_PROPERTY_ID);
    propertyIds.add(HOST_COMPONENT_SERVICE_NAME_PROPERTY_ID);
    propertyIds.add(HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID);
    Request request=PropertyHelper.getReadRequest(propertyIds);
    Predicate finalPredicate=new PredicateBuilder(filterPredicate).property(HOST_COMPONENT_CLUSTER_NAME_PROPERTY_ID).equals(clusterName).and().property(HOST_COMPONENT_SERVICE_NAME_PROPERTY_ID).equals(serviceName).and().property(HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID).equals(componentName).toPredicate();
    try {
      Set<Resource> resources=resourceProvider.getResources(request,finalPredicate);
      if (resources != null && !resources.isEmpty()) {
        Map<ServiceComponentTuple,List<String>> dupleListMap=new HashMap<>();
        for (        Resource resource : resources) {
          String hostnameStr=(String)resource.getPropertyValue(HOST_COMPONENT_HOST_NAME_PROPERTY_ID);
          if (hostnameStr != null) {
            String computedServiceName=(String)resource.getPropertyValue(HOST_COMPONENT_SERVICE_NAME_PROPERTY_ID);
            String computedComponentName=(String)resource.getPropertyValue(HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID);
            ServiceComponentTuple duple=new ServiceComponentTuple(computedServiceName,computedComponentName);
            if (!dupleListMap.containsKey(duple)) {
              hostList=new ArrayList<>();
              hostList.add(hostnameStr);
              dupleListMap.put(duple,hostList);
            }
 else {
              dupleListMap.get(duple).add(hostnameStr);
            }
          }
        }
        if (!dupleListMap.isEmpty()) {
          for (          Map.Entry<ServiceComponentTuple,List<String>> entry : dupleListMap.entrySet()) {
            resourceFilterList.add(new RequestResourceFilter(entry.getKey().getServiceName(),entry.getKey().getComponentName(),entry.getValue()));
          }
        }
      }
    }
 catch (    Exception e) {
      LOG.warn("Exception finding requested resources with serviceName = " + serviceName + ", componentName = "+ componentName+ ", hostPredicate"+ " = "+ hostsPredicate,e);
    }
  }
 else {
    resourceFilterList.add(new RequestResourceFilter(serviceName,componentName,hostList));
  }
  return resourceFilterList;
}
