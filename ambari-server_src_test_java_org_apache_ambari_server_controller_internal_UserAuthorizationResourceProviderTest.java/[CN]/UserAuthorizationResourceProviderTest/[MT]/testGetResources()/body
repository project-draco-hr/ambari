{
  Resource clusterResource=createMock(Resource.class);
  expect(clusterResource.getPropertyValue(UserPrivilegeResourceProvider.PRIVILEGE_PERMISSION_NAME_PROPERTY_ID)).andReturn("CLUSTER.DO_SOMETHING").anyTimes();
  expect(clusterResource.getPropertyValue(UserPrivilegeResourceProvider.PRIVILEGE_TYPE_PROPERTY_ID)).andReturn("CLUSTER").anyTimes();
  expect(clusterResource.getPropertyValue(UserPrivilegeResourceProvider.PRIVILEGE_CLUSTER_NAME_PROPERTY_ID)).andReturn("Cluster Name").anyTimes();
  Resource viewResource=createMock(Resource.class);
  expect(viewResource.getPropertyValue(UserPrivilegeResourceProvider.PRIVILEGE_PERMISSION_NAME_PROPERTY_ID)).andReturn("VIEW.DO_SOMETHING").anyTimes();
  expect(viewResource.getPropertyValue(UserPrivilegeResourceProvider.PRIVILEGE_TYPE_PROPERTY_ID)).andReturn("VIEW").anyTimes();
  expect(viewResource.getPropertyValue(UserPrivilegeResourceProvider.PRIVILEGE_VIEW_NAME_PROPERTY_ID)).andReturn("View Name").anyTimes();
  expect(viewResource.getPropertyValue(UserPrivilegeResourceProvider.PRIVILEGE_VIEW_VERSION_PROPERTY_ID)).andReturn("View Version").anyTimes();
  expect(viewResource.getPropertyValue(UserPrivilegeResourceProvider.PRIVILEGE_INSTANCE_NAME_PROPERTY_ID)).andReturn("View Instance Name").anyTimes();
  Resource adminResource=createMock(Resource.class);
  expect(adminResource.getPropertyValue(UserPrivilegeResourceProvider.PRIVILEGE_PERMISSION_NAME_PROPERTY_ID)).andReturn("ADMIN.DO_SOMETHING").anyTimes();
  expect(adminResource.getPropertyValue(UserPrivilegeResourceProvider.PRIVILEGE_TYPE_PROPERTY_ID)).andReturn("ADMIN").anyTimes();
  expect(adminResource.getPropertyValue(UserPrivilegeResourceProvider.PRIVILEGE_CLUSTER_NAME_PROPERTY_ID)).andReturn(null).anyTimes();
  Resource emptyResource=createMock(Resource.class);
  expect(emptyResource.getPropertyValue(UserPrivilegeResourceProvider.PRIVILEGE_PERMISSION_NAME_PROPERTY_ID)).andReturn("EMPTY.DO_SOMETHING").anyTimes();
  expect(emptyResource.getPropertyValue(UserPrivilegeResourceProvider.PRIVILEGE_TYPE_PROPERTY_ID)).andReturn("ADMIN").anyTimes();
  expect(emptyResource.getPropertyValue(UserPrivilegeResourceProvider.PRIVILEGE_CLUSTER_NAME_PROPERTY_ID)).andReturn(null).anyTimes();
  Resource nullResource=createMock(Resource.class);
  expect(nullResource.getPropertyValue(UserPrivilegeResourceProvider.PRIVILEGE_PERMISSION_NAME_PROPERTY_ID)).andReturn("NULL.DO_SOMETHING").anyTimes();
  expect(nullResource.getPropertyValue(UserPrivilegeResourceProvider.PRIVILEGE_TYPE_PROPERTY_ID)).andReturn("ADMIN").anyTimes();
  expect(nullResource.getPropertyValue(UserPrivilegeResourceProvider.PRIVILEGE_CLUSTER_NAME_PROPERTY_ID)).andReturn(null).anyTimes();
  Set<Resource> userPrivilegeResources=new HashSet<Resource>();
  userPrivilegeResources.add(clusterResource);
  userPrivilegeResources.add(viewResource);
  userPrivilegeResources.add(adminResource);
  userPrivilegeResources.add(emptyResource);
  userPrivilegeResources.add(nullResource);
  ResourceProvider userPrivilegeProvider=createMock(ResourceProvider.class);
  expect(userPrivilegeProvider.getResources(anyObject(Request.class),anyObject(Predicate.class))).andReturn(userPrivilegeResources);
  ClusterController clusterController=createMock(ClusterController.class);
  expect(clusterController.ensureResourceProvider(Resource.Type.UserPrivilege)).andReturn(userPrivilegeProvider).anyTimes();
  ResourceTypeEntity clusterResourceTypeEntity=createMock(ResourceTypeEntity.class);
  expect(clusterResourceTypeEntity.getId()).andReturn(1).anyTimes();
  ResourceTypeEntity viewResourceTypeEntity=createMock(ResourceTypeEntity.class);
  expect(viewResourceTypeEntity.getId()).andReturn(2).anyTimes();
  ResourceTypeEntity adminResourceTypeEntity=createMock(ResourceTypeEntity.class);
  expect(adminResourceTypeEntity.getId()).andReturn(3).anyTimes();
  ResourceTypeDAO resourceTypeDAO=injector.getInstance(ResourceTypeDAO.class);
  expect(resourceTypeDAO.findByName("CLUSTER")).andReturn(clusterResourceTypeEntity).anyTimes();
  expect(resourceTypeDAO.findByName("VIEW")).andReturn(viewResourceTypeEntity).anyTimes();
  expect(resourceTypeDAO.findByName("ADMIN")).andReturn(adminResourceTypeEntity).anyTimes();
  RoleAuthorizationEntity clusterRoleAuthorizationEntity=createMock(RoleAuthorizationEntity.class);
  expect(clusterRoleAuthorizationEntity.getAuthorizationId()).andReturn("CLUSTER.DO_SOMETHING").anyTimes();
  expect(clusterRoleAuthorizationEntity.getAuthorizationName()).andReturn("CLUSTER DO_SOMETHING").anyTimes();
  RoleAuthorizationEntity viewRoleAuthorizationEntity=createMock(RoleAuthorizationEntity.class);
  expect(viewRoleAuthorizationEntity.getAuthorizationId()).andReturn("VIEW.DO_SOMETHING").anyTimes();
  expect(viewRoleAuthorizationEntity.getAuthorizationName()).andReturn("VIEW DO_SOMETHING").anyTimes();
  RoleAuthorizationEntity adminRoleAuthorizationEntity=createMock(RoleAuthorizationEntity.class);
  expect(adminRoleAuthorizationEntity.getAuthorizationId()).andReturn("ADMIN.DO_SOMETHING").anyTimes();
  expect(adminRoleAuthorizationEntity.getAuthorizationName()).andReturn("ADMIN DO_SOMETHING").anyTimes();
  Collection<RoleAuthorizationEntity> clusterPermissionAuthorizations=Collections.singleton(clusterRoleAuthorizationEntity);
  Collection<RoleAuthorizationEntity> viewPermissionAuthorizations=Collections.singleton(viewRoleAuthorizationEntity);
  Collection<RoleAuthorizationEntity> adminPermissionAuthorizations=Collections.singleton(adminRoleAuthorizationEntity);
  PermissionEntity clusterPermissionEntity=createMock(PermissionEntity.class);
  expect(clusterPermissionEntity.getAuthorizations()).andReturn(clusterPermissionAuthorizations).anyTimes();
  PermissionEntity viewPermissionEntity=createMock(PermissionEntity.class);
  expect(viewPermissionEntity.getAuthorizations()).andReturn(viewPermissionAuthorizations).anyTimes();
  PermissionEntity adminPermissionEntity=createMock(PermissionEntity.class);
  expect(adminPermissionEntity.getAuthorizations()).andReturn(adminPermissionAuthorizations).anyTimes();
  PermissionEntity emptyPermissionEntity=createMock(PermissionEntity.class);
  expect(emptyPermissionEntity.getAuthorizations()).andReturn(Collections.<RoleAuthorizationEntity>emptyList()).anyTimes();
  PermissionEntity nullPermissionEntity=createMock(PermissionEntity.class);
  expect(nullPermissionEntity.getAuthorizations()).andReturn(null).anyTimes();
  PermissionDAO permissionDAO=injector.getInstance(PermissionDAO.class);
  expect(permissionDAO.findPermissionByNameAndType("CLUSTER.DO_SOMETHING",clusterResourceTypeEntity)).andReturn(clusterPermissionEntity).anyTimes();
  expect(permissionDAO.findPermissionByNameAndType("VIEW.DO_SOMETHING",viewResourceTypeEntity)).andReturn(viewPermissionEntity).anyTimes();
  expect(permissionDAO.findPermissionByNameAndType("ADMIN.DO_SOMETHING",adminResourceTypeEntity)).andReturn(adminPermissionEntity).anyTimes();
  expect(permissionDAO.findPermissionByNameAndType("EMPTY.DO_SOMETHING",adminResourceTypeEntity)).andReturn(emptyPermissionEntity).anyTimes();
  expect(permissionDAO.findPermissionByNameAndType("NULL.DO_SOMETHING",adminResourceTypeEntity)).andReturn(nullPermissionEntity).anyTimes();
  replayAll();
  AmbariManagementController managementController=injector.getInstance(AmbariManagementController.class);
  UserAuthorizationResourceProvider provider=new UserAuthorizationResourceProvider(managementController);
  setClusterController(provider,clusterController);
  Predicate predicate=new PredicateBuilder().property(UserAuthorizationResourceProvider.USERNAME_PROPERTY_ID).equals("jdoe").toPredicate();
  Set<Resource> resources=provider.getResources(PropertyHelper.getReadRequest(),predicate);
  Assert.assertEquals(3,resources.size());
  LinkedList<String> expectedIds=new LinkedList<String>();
  expectedIds.add("CLUSTER.DO_SOMETHING");
  expectedIds.add("VIEW.DO_SOMETHING");
  expectedIds.add("ADMIN.DO_SOMETHING");
  for (  Resource resource : resources) {
    String authorizationId=(String)resource.getPropertyValue(UserAuthorizationResourceProvider.AUTHORIZATION_ID_PROPERTY_ID);
switch (authorizationId) {
case "CLUSTER.DO_SOMETHING":
      Assert.assertEquals("CLUSTER DO_SOMETHING",resource.getPropertyValue(UserAuthorizationResourceProvider.AUTHORIZATION_NAME_PROPERTY_ID));
    Assert.assertEquals("CLUSTER",resource.getPropertyValue(UserAuthorizationResourceProvider.AUTHORIZATION_RESOURCE_TYPE_PROPERTY_ID));
  Assert.assertEquals("Cluster Name",resource.getPropertyValue(UserAuthorizationResourceProvider.AUTHORIZATION_CLUSTER_NAME_PROPERTY_ID));
Assert.assertNull(resource.getPropertyValue(UserAuthorizationResourceProvider.AUTHORIZATION_VIEW_NAME_PROPERTY_ID));
Assert.assertNull(resource.getPropertyValue(UserAuthorizationResourceProvider.AUTHORIZATION_VIEW_VERSION_PROPERTY_ID));
Assert.assertNull(resource.getPropertyValue(UserAuthorizationResourceProvider.AUTHORIZATION_VIEW_INSTANCE_NAME_PROPERTY_ID));
break;
case "VIEW.DO_SOMETHING":
Assert.assertEquals("VIEW DO_SOMETHING",resource.getPropertyValue(UserAuthorizationResourceProvider.AUTHORIZATION_NAME_PROPERTY_ID));
Assert.assertEquals("VIEW",resource.getPropertyValue(UserAuthorizationResourceProvider.AUTHORIZATION_RESOURCE_TYPE_PROPERTY_ID));
Assert.assertEquals("View Name",resource.getPropertyValue(UserAuthorizationResourceProvider.AUTHORIZATION_VIEW_NAME_PROPERTY_ID));
Assert.assertEquals("View Version",resource.getPropertyValue(UserAuthorizationResourceProvider.AUTHORIZATION_VIEW_VERSION_PROPERTY_ID));
Assert.assertEquals("View Instance Name",resource.getPropertyValue(UserAuthorizationResourceProvider.AUTHORIZATION_VIEW_INSTANCE_NAME_PROPERTY_ID));
Assert.assertNull(resource.getPropertyValue(UserAuthorizationResourceProvider.AUTHORIZATION_CLUSTER_NAME_PROPERTY_ID));
break;
case "ADMIN.DO_SOMETHING":
Assert.assertEquals("ADMIN DO_SOMETHING",resource.getPropertyValue(UserAuthorizationResourceProvider.AUTHORIZATION_NAME_PROPERTY_ID));
Assert.assertEquals("ADMIN",resource.getPropertyValue(UserAuthorizationResourceProvider.AUTHORIZATION_RESOURCE_TYPE_PROPERTY_ID));
Assert.assertNull(resource.getPropertyValue(UserAuthorizationResourceProvider.AUTHORIZATION_CLUSTER_NAME_PROPERTY_ID));
Assert.assertNull(resource.getPropertyValue(UserAuthorizationResourceProvider.AUTHORIZATION_VIEW_NAME_PROPERTY_ID));
Assert.assertNull(resource.getPropertyValue(UserAuthorizationResourceProvider.AUTHORIZATION_VIEW_VERSION_PROPERTY_ID));
Assert.assertNull(resource.getPropertyValue(UserAuthorizationResourceProvider.AUTHORIZATION_VIEW_INSTANCE_NAME_PROPERTY_ID));
break;
}
expectedIds.remove();
}
Assert.assertEquals(0,expectedIds.size());
verifyAll();
}
