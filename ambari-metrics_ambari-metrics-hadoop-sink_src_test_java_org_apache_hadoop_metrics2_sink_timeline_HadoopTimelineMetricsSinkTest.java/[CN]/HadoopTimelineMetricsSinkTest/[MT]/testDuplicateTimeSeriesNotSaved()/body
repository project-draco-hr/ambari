{
  HadoopTimelineMetricsSink sink=createMockBuilder(HadoopTimelineMetricsSink.class).withConstructor().addMockedMethod("appendPrefix").addMockedMethod("findLiveCollectorHostsFromKnownCollector").addMockedMethod("emitMetrics").createNiceMock();
  SubsetConfiguration conf=createNiceMock(SubsetConfiguration.class);
  expect(conf.getString("slave.host.name")).andReturn("localhost").anyTimes();
  expect(conf.getParent()).andReturn(null).anyTimes();
  expect(conf.getPrefix()).andReturn("service").anyTimes();
  expect(conf.getString(eq(COLLECTOR_PROPERTY),eq(""))).andReturn("localhost:6188").anyTimes();
  expect(conf.getString(eq("serviceName-prefix"),eq(""))).andReturn("").anyTimes();
  expect(conf.getString(eq(COLLECTOR_PROTOCOL),eq("http"))).andReturn("http").anyTimes();
  expect(conf.getString(eq(COLLECTOR_PORT),eq("6188"))).andReturn("6188").anyTimes();
  expect(conf.getInt(eq(MAX_METRIC_ROW_CACHE_SIZE),anyInt())).andReturn(10).anyTimes();
  expect(conf.getInt(eq(METRICS_SEND_INTERVAL),anyInt())).andReturn(10).anyTimes();
  expect(sink.findLiveCollectorHostsFromKnownCollector("localhost","6188")).andReturn(Collections.singletonList("localhost")).anyTimes();
  conf.setListDelimiter(eq(','));
  expectLastCall().anyTimes();
  expect(conf.getKeys()).andReturn(new Iterator(){
    @Override public boolean hasNext(){
      return false;
    }
    @Override public Object next(){
      return null;
    }
    @Override public void remove(){
    }
  }
).once();
  AbstractMetric metric=createNiceMock(AbstractMetric.class);
  expect(metric.name()).andReturn("metricName").anyTimes();
  expect(metric.value()).andReturn(1.0).once();
  expect(metric.value()).andReturn(2.0).once();
  expect(metric.value()).andReturn(3.0).once();
  expect(metric.value()).andReturn(4.0).once();
  expect(metric.value()).andReturn(5.0).once();
  expect(metric.value()).andReturn(6.0).once();
  MetricsRecord record=createNiceMock(MetricsRecord.class);
  expect(record.name()).andReturn("testName").anyTimes();
  expect(record.context()).andReturn("testContext").anyTimes();
  sink.appendPrefix(eq(record),(StringBuilder)anyObject());
  expectLastCall().anyTimes().andStubAnswer(new IAnswer<Object>(){
    @Override public Object answer() throws Throwable {
      return null;
    }
  }
);
  final Long now=System.currentTimeMillis();
  expect(record.timestamp()).andReturn(now).times(2);
  expect(record.timestamp()).andReturn(now + 100l).times(2);
  expect(record.timestamp()).andReturn(now + 200l).once();
  expect(record.timestamp()).andReturn(now + 300l).once();
  expect(record.metrics()).andReturn(Arrays.asList(metric)).anyTimes();
  final List<TimelineMetrics> capturedMetrics=new ArrayList<TimelineMetrics>();
  sink.emitMetrics((TimelineMetrics)anyObject());
  expectLastCall().andStubAnswer(new IAnswer<Object>(){
    @Override public Object answer() throws Throwable {
      capturedMetrics.add((TimelineMetrics)EasyMock.getCurrentArguments()[0]);
      return null;
    }
  }
);
  replay(conf,sink,record,metric);
  sink.init(conf);
  sink.putMetrics(record);
  sink.putMetrics(record);
  sink.putMetrics(record);
  sink.putMetrics(record);
  sink.putMetrics(record);
  sink.putMetrics(record);
  verify(conf,sink,record,metric);
  Assert.assertEquals(2,capturedMetrics.size());
  Iterator<TimelineMetrics> metricsIterator=capturedMetrics.iterator();
  TimelineMetric timelineMetric1=metricsIterator.next().getMetrics().get(0);
  Assert.assertEquals(2,timelineMetric1.getMetricValues().size());
  Iterator<Long> timestamps=timelineMetric1.getMetricValues().keySet().iterator();
  Assert.assertEquals(now,timestamps.next());
  Assert.assertEquals(new Long(now + 100l),timestamps.next());
  Iterator<Double> values=timelineMetric1.getMetricValues().values().iterator();
  Assert.assertEquals(new Double(1.0),values.next());
  Assert.assertEquals(new Double(3.0),values.next());
  TimelineMetric timelineMetric2=metricsIterator.next().getMetrics().get(0);
  Assert.assertEquals(2,timelineMetric2.getMetricValues().size());
  timestamps=timelineMetric2.getMetricValues().keySet().iterator();
  Assert.assertEquals(new Long(now + 200l),timestamps.next());
  Assert.assertEquals(new Long(now + 300l),timestamps.next());
  values=timelineMetric2.getMetricValues().values().iterator();
  Assert.assertEquals(new Double(5.0),values.next());
  Assert.assertEquals(new Double(6.0),values.next());
}
