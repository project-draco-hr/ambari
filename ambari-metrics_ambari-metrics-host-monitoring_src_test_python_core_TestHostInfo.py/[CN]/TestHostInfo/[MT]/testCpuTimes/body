@patch('psutil.cpu_count')
@patch('psutil.cpu_times_percent')
def testCpuTimes(self, cp_mock, count_mock):
    count_mock.return_value = 1
    cp = cp_mock.return_value
    cp.user = 0.1
    cp.system = 0.1
    cp.idle = 0.7
    cp.nice = 0.1
    cp.iowait = 0
    cp.irq = 0
    cp.softirq = 0
    hostinfo = HostInfo()
    if (platform.system() != 'Windows'):
        with patch('os.getloadavg') as avg_mock:
            avg_mock.return_value = [13, 13, 13]
            cpu = hostinfo.get_cpu_times()
            self.assertEqual(cpu['load_one'], 13)
            self.assertEqual(cpu['load_five'], 13)
            self.assertEqual(cpu['load_fifteen'], 13)
    else:
        cpu = hostinfo.get_cpu_times()
    self.assertAlmostEqual(cpu['cpu_user'], 10)
    self.assertAlmostEqual(cpu['cpu_system'], 10)
    self.assertAlmostEqual(cpu['cpu_idle'], 70)
    self.assertAlmostEqual(cpu['cpu_nice'], 10)
    self.assertAlmostEqual(cpu['cpu_wio'], 0)
    self.assertAlmostEqual(cpu['cpu_intr'], 0)
    self.assertAlmostEqual(cpu['cpu_sintr'], 0)
