{
  LOG.info("Converting pseudo principle types to role principals");
  PermissionDAO permissionDAO=injector.getInstance(PermissionDAO.class);
  PrivilegeDAO privilegeDAO=injector.getInstance(PrivilegeDAO.class);
  PrincipalDAO principalDAO=injector.getInstance(PrincipalDAO.class);
  PrincipalTypeDAO principalTypeDAO=injector.getInstance(PrincipalTypeDAO.class);
  Map<String,String> principalTypeToRole=new HashMap<String,String>();
  principalTypeToRole.put("ALL.CLUSTER.ADMINISTRATOR","CLUSTER.ADMINISTRATOR");
  principalTypeToRole.put("ALL.CLUSTER.OPERATOR","CLUSTER.OPERATOR");
  principalTypeToRole.put("ALL.CLUSTER.USER","CLUSTER.USER");
  principalTypeToRole.put("ALL.SERVICE.ADMINISTRATOR","SERVICE.ADMINISTRATOR");
  principalTypeToRole.put("ALL.SERVICE.OPERATOR","SERVICE.OPERATOR");
  principalTypeToRole.put("ALL.SERVICE.OPERATIOR","SERVICE.OPERATOR");
  for (  Map.Entry<String,String> entry : principalTypeToRole.entrySet()) {
    String principalTypeName=entry.getKey();
    String roleName=entry.getValue();
    PermissionEntity role=permissionDAO.findByName(roleName);
    PrincipalEntity rolePrincipalEntity=(role == null) ? null : role.getPrincipal();
    PrincipalTypeEntity principalTypeEntity=principalTypeDAO.findByName(principalTypeName);
    if (principalTypeEntity != null) {
      List<PrincipalEntity> principalEntities=principalDAO.findByPrincipalType(principalTypeName);
      for (      PrincipalEntity principalEntity : principalEntities) {
        Set<PrivilegeEntity> privilegeEntities=principalEntity.getPrivileges();
        for (        PrivilegeEntity privilegeEntity : privilegeEntities) {
          if (rolePrincipalEntity == null) {
            LOG.info("Removing privilege (id={}) since no role principle was found for {}:\n{}",privilegeEntity.getId(),roleName,formatPrivilegeEntityDetails(privilegeEntity));
            privilegeDAO.remove(privilegeEntity);
          }
 else {
            LOG.info("Updating privilege (id={}) to use role principle for {}:\n{}",privilegeEntity.getId(),roleName,formatPrivilegeEntityDetails(privilegeEntity));
            privilegeEntity.setPrincipal(rolePrincipalEntity);
            privilegeDAO.merge(privilegeEntity);
          }
        }
        principalDAO.remove(principalEntity);
      }
      principalTypeDAO.remove(principalTypeEntity);
    }
  }
  LOG.info("Converting pseudo principle types to role principals - complete.");
}
