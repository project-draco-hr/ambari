{
  Set<String> hosts=new HashSet<String>();
  final String SECONDARY_NAMENODE="SECONDARY_NAMENODE";
  final String clusterName=request.getClusterName();
  final Cluster cluster=clustersProvider.get().getCluster(clusterName);
  try {
    ServiceComponent serviceComponent=cluster.getService(HDFS_SERVICE_NAME).getServiceComponent(SECONDARY_NAMENODE);
    if (serviceComponent != null) {
      hosts=serviceComponent.getServiceComponentHosts().keySet();
    }
  }
 catch (  ServiceComponentNotFoundException err) {
    ;
  }
  if (hosts.isEmpty()) {
    List<HostComponentStateEntity> allHostComponents=hostComponentStateDao.findAll();
    for (    HostComponentStateEntity hc : allHostComponents) {
      if (hc.getServiceName().equalsIgnoreCase(HDFS_SERVICE_NAME) && hc.getComponentName().equalsIgnoreCase(SECONDARY_NAMENODE)) {
        hosts.add(hc.getHostName());
      }
    }
  }
  if (!hosts.isEmpty()) {
    String foundHost=hosts.toArray(new String[hosts.size()])[0];
    prerequisiteCheck.getFailedOn().add(HDFS_SERVICE_NAME);
    prerequisiteCheck.setStatus(PrereqCheckStatus.FAIL);
    String failReason=getFailReason(prerequisiteCheck,request);
    prerequisiteCheck.setFailReason(String.format(failReason,foundHost));
  }
}
