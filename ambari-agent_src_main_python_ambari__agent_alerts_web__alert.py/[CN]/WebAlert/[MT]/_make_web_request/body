def _make_web_request(self, url):
    '\n    Makes an http(s) request to a web resource and returns the http code. If\n    there was an error making the request, return 0 for the status code.\n    '
    error_msg = None
    try:
        response_code = 0
        kerberos_keytab = None
        kerberos_principal = None
        if (self.uri_property_keys.kerberos_principal is not None):
            kerberos_principal = self._get_configuration_value(self.uri_property_keys.kerberos_principal)
            if (kerberos_principal is not None):
                kerberos_principal = kerberos_principal.replace('_HOST', self.host_name)
        if (self.uri_property_keys.kerberos_keytab is not None):
            kerberos_keytab = self._get_configuration_value(self.uri_property_keys.kerberos_keytab)
        security_enabled = self._get_configuration_value('{{cluster-env/security_enabled}}')
        if ((kerberos_principal is not None) and (kerberos_keytab is not None) and (security_enabled is not None) and (security_enabled.lower() == 'true')):
            tmp_dir = Constants.AGENT_TMP_DIR
            if (tmp_dir is None):
                tmp_dir = gettempdir()
            kerberos_executable_search_paths = self._get_configuration_value('{{kerberos-env/executable_search_paths}}')
            smokeuser = self._get_configuration_value('{{cluster-env/smokeuser}}')
            (response_code, error_msg, time_millis) = curl_krb_request(tmp_dir, kerberos_keytab, kerberos_principal, url, 'web_alert', kerberos_executable_search_paths, True, self.get_name(), smokeuser, connection_timeout=self.curl_connection_timeout, kinit_timer_ms=self.kinit_timeout)
        else:
            (response_code, time_millis, error_msg) = self._make_web_request_urllib(url)
        return WebResponse(status_code=response_code, time_millis=time_millis, error_msg=error_msg)
    except Exception as exception:
        if logger.isEnabledFor(logging.DEBUG):
            logger.exception('[Alert][{0}] Unable to make a web request.'.format(self.get_name()))
        return WebResponse(status_code=0, time_millis=0, error_msg=str(exception))
