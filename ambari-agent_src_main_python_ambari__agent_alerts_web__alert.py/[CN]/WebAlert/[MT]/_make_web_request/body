def _make_web_request(self, url):
    '\n    Makes an http(s) request to a web resource and returns the http code. If\n    there was an error making the request, return 0 for the status code.\n    '
    WebResponse = namedtuple('WebResponse', 'status_code time_millis error_msg')
    time_millis = 0
    try:
        kerberos_keytab = None
        kerberos_principal = None
        if (self.uri_property_keys.kerberos_principal is not None):
            kerberos_principal = self._get_configuration_value(self.uri_property_keys.kerberos_principal)
            if (kerberos_principal is not None):
                kerberos_principal = kerberos_principal.replace('_HOST', self.host_name)
        if (self.uri_property_keys.kerberos_keytab is not None):
            kerberos_keytab = self._get_configuration_value(self.uri_property_keys.kerberos_keytab)
        if ((kerberos_principal is not None) and (kerberos_keytab is not None)):
            os.system('kinit -kt {0} {1} > /dev/null'.format(kerberos_keytab, kerberos_principal))
        url = url.replace('0.0.0.0', self.host_name)
        start_time = time.time()
        curl = subprocess.Popen(['curl', '--negotiate', '-u', ':', '-sL', '-w', '%{http_code}', url, '--connect-timeout', CURL_CONNECTION_TIMEOUT, '-o', '/dev/null'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        (out, err) = curl.communicate()
        if (err != ''):
            raise Exception(err)
        response_code = int(out)
        time_millis = (time.time() - start_time)
    except Exception as exc:
        if logger.isEnabledFor(logging.DEBUG):
            logger.exception('[Alert][{0}] Unable to make a web request.'.format(self.get_name()))
        return WebResponse(status_code=0, time_millis=0, error_msg=str(exc))
    return WebResponse(status_code=response_code, time_millis=time_millis, error_msg=None)
