{
  mockDependencies();
  setUpDefaultExpectations();
  String[] statements={"select * from test"};
  AsyncJob job=new AsyncJob("10","admin",statements,"tst.log",viewContext);
  for (  String s : statements) {
    expect(((HiveStatement)statement).executeAsync(s)).andReturn(true);
  }
  ActorRef operationControl=actorSystem.actorOf(Props.create(OperationController.class,actorSystem,connectionSupplier,supplier,hdfsSupplier),"operationController-test");
  Inbox inbox=Inbox.create(actorSystem);
  ExecuteJob executeJob=new ExecuteJob(connect,job);
  inbox.send(operationControl,executeJob);
  replay(connection,resultSet,resultSetMetaData,statement,viewContext,connect,connectable,hdfsSupplier,hdfsApi,supplier,connectionSupplier);
  try {
    Object submitted=inbox.receive(Duration.create(1,TimeUnit.MINUTES));
    assertTrue(submitted instanceof JobSubmitted);
    inbox.send(operationControl,new FetchResult("10","admin"));
    Either<ActorRef,AsyncExecutionFailed> receive=(Either<ActorRef,AsyncExecutionFailed>)inbox.receive(Duration.create(1,TimeUnit.MINUTES));
    inbox.send(receive.getLeft(),new Next());
    HiveResult result=(HiveResult)inbox.receive(Duration.create(1,TimeUnit.MINUTES));
    List<HiveResult.Row> rows=result.getRows();
    System.out.println(rows);
    verify(connection,resultSet,resultSetMetaData,statement,viewContext,connect,connectable,hdfsSupplier,hdfsApi,supplier);
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
}
