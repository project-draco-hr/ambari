{
  try {
    unitOfWork.begin();
    Set<String> runningRequestIds=new HashSet<String>();
    Set<String> affectedHosts=new HashSet<String>();
    List<Stage> stages=db.getStagesInProgress();
    if (LOG.isDebugEnabled()) {
      LOG.debug("Scheduler wakes up");
    }
    if (stages == null || stages.isEmpty()) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("No stage in progress..nothing to do");
      }
      return;
    }
    for (    Stage s : stages) {
      long requestId=s.getRequestId();
      String requestIdStr=String.valueOf(requestId);
      if (runningRequestIds.contains(requestIdStr)) {
        continue;
      }
 else {
        runningRequestIds.add(requestIdStr);
        if (!requestsInProgress.contains(requestIdStr)) {
          requestsInProgress.add(requestIdStr);
          db.startRequest(requestId);
        }
      }
      List<String> stageHosts=s.getHosts();
      boolean conflict=false;
      for (      String host : stageHosts) {
        if (affectedHosts.contains(host)) {
          conflict=true;
          break;
        }
      }
      if (conflict) {
        continue;
      }
 else {
        affectedHosts.addAll(stageHosts);
      }
      List<ExecutionCommand> commandsToSchedule=new ArrayList<ExecutionCommand>();
      Map<String,RoleStats> roleStats=processInProgressStage(s,commandsToSchedule);
      boolean failed=false;
      for (      String role : roleStats.keySet()) {
        RoleStats stats=roleStats.get(role);
        if (LOG.isDebugEnabled()) {
          LOG.debug("Stats for role:" + role + ", stats="+ stats);
        }
        if (stats.isRoleFailed()) {
          failed=true;
          break;
        }
      }
      if (!failed) {
        failed=hasPreviousStageFailed(s);
      }
      if (failed) {
        LOG.warn("Operation completely failed, aborting request id:" + s.getRequestId());
        abortOperationsForStage(s);
        return;
      }
      for (      ExecutionCommand cmd : commandsToSchedule) {
        if (Role.valueOf(cmd.getRole()).equals(Role.AMBARI_SERVER_ACTION)) {
          executeServerAction(s,cmd);
        }
 else {
          try {
            scheduleHostRole(s,cmd);
          }
 catch (          InvalidStateTransitionException e) {
            LOG.warn("Could not schedule host role " + cmd.toString(),e);
            db.abortHostRole(cmd.getHostname(),s.getRequestId(),s.getStageId(),cmd.getRole());
          }
        }
      }
      if (!configuration.getParallelStageExecution()) {
        return;
      }
    }
    requestsInProgress.retainAll(runningRequestIds);
  }
  finally {
    unitOfWork.end();
  }
}
