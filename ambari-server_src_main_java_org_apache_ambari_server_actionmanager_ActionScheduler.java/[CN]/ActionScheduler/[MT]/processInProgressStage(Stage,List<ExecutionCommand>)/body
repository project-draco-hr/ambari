{
  Map<String,RoleStats> roleStats=initRoleStats(s);
  long now=System.currentTimeMillis();
  long taskTimeout=actionTimeout;
  if (taskTimeoutAdjustment) {
    taskTimeout=actionTimeout + s.getStageTimeout();
  }
  for (  String host : s.getHosts()) {
    List<ExecutionCommandWrapper> commandWrappers=s.getExecutionCommands(host);
    Cluster cluster=fsmObject.getCluster(s.getClusterName());
    Host hostObj=fsmObject.getHost(host);
    for (    ExecutionCommandWrapper wrapper : commandWrappers) {
      ExecutionCommand c=wrapper.getExecutionCommand();
      String roleStr=c.getRole();
      HostRoleStatus status=s.getHostRoleStatus(host,roleStr);
      Service svc=cluster.getService(c.getServiceName());
      ServiceComponent svcComp=null;
      Map<String,ServiceComponentHost> scHosts=null;
      try {
        svcComp=svc.getServiceComponent(roleStr);
        scHosts=svcComp.getServiceComponentHosts();
      }
 catch (      ServiceComponentNotFoundException scnex) {
        String msg=String.format("%s is not not a service component, assuming its an action",roleStr);
        LOG.debug(msg);
      }
      if (scHosts != null && !scHosts.containsKey(host)) {
        String message=String.format("Service component host not found when trying to " + "schedule an execution command. " + "The most probable reason "+ "for that is that host component "+ "has been deleted recently. "+ "The command has been aborted and dequeued. "+ "Execution command details: "+ "cluster=%s; host=%s; service=%s; component=%s; "+ "cmdId: %s; taskId: %s; roleCommand: %s",c.getClusterName(),host,svcComp.getServiceName(),svcComp.getName(),c.getCommandId(),c.getTaskId(),c.getRoleCommand());
        LOG.warn(message);
        db.abortHostRole(host,s.getRequestId(),s.getStageId(),c.getRole(),message);
        status=HostRoleStatus.ABORTED;
      }
 else       if (timeOutActionNeeded(status,s,hostObj,roleStr,now,taskTimeout)) {
        LOG.info("Host:" + host + ", role:"+ roleStr+ ", actionId:"+ s.getActionId()+ " timed out");
        if (s.getAttemptCount(host,roleStr) >= maxAttempts) {
          LOG.warn("Host:" + host + ", role:"+ roleStr+ ", actionId:"+ s.getActionId()+ " expired");
          db.timeoutHostRole(host,s.getRequestId(),s.getStageId(),c.getRole());
          status=s.getHostRoleStatus(host,roleStr);
          transitionToFailedState(cluster.getClusterName(),c.getServiceName(),roleStr,host,now,false);
          LOG.warn("Operation timed out. Role: " + roleStr + ", host: "+ host);
          actionQueue.dequeue(host,c.getCommandId());
        }
 else {
          commandsToSchedule.add(c);
        }
      }
 else       if (status.equals(HostRoleStatus.PENDING)) {
        commandsToSchedule.add(c);
      }
      this.updateRoleStats(status,roleStats.get(roleStr));
    }
  }
  return roleStats;
}
