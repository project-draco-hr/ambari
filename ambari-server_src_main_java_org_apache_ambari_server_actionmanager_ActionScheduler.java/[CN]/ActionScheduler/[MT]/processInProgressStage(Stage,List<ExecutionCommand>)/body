{
  LOG.debug("==> Collecting commands to schedule...");
  Map<String,RoleStats> roleStats=initRoleStats(s);
  long now=System.currentTimeMillis();
  Cluster cluster=null;
  if (null != s.getClusterName()) {
    cluster=clusters.getCluster(s.getClusterName());
  }
  for (  String host : s.getHosts()) {
    List<ExecutionCommandWrapper> commandWrappers=s.getExecutionCommands(host);
    Host hostObj=null;
    try {
      hostObj=clusters.getHost(host);
    }
 catch (    AmbariException e) {
      LOG.debug("Host {} not found, stage is likely a server side action",host);
    }
    int i_my=0;
    LOG.trace("===>host=" + host);
    for (    ExecutionCommandWrapper wrapper : commandWrappers) {
      ExecutionCommand c=wrapper.getExecutionCommand();
      String roleStr=c.getRole();
      HostRoleStatus status=s.getHostRoleStatus(host,roleStr);
      i_my++;
      if (LOG.isTraceEnabled()) {
        LOG.trace("Host task " + i_my + ") id = "+ c.getTaskId()+ " status = "+ status.toString()+ " (role="+ roleStr+ "), roleCommand = "+ c.getRoleCommand());
      }
      boolean hostDeleted=false;
      if (null != cluster) {
        Service svc=null;
        if (c.getServiceName() != null && !c.getServiceName().isEmpty()) {
          svc=cluster.getService(c.getServiceName());
        }
        ServiceComponent svcComp=null;
        Map<String,ServiceComponentHost> scHosts=null;
        try {
          if (svc != null) {
            svcComp=svc.getServiceComponent(roleStr);
            scHosts=svcComp.getServiceComponentHosts();
          }
        }
 catch (        ServiceComponentNotFoundException scnex) {
          String msg=String.format("%s is not not a service component, assuming its an action",roleStr);
          LOG.debug(msg);
        }
        hostDeleted=(scHosts != null && !scHosts.containsKey(host));
        if (hostDeleted) {
          String message=String.format("Host component information has not been found.  Details:" + "cluster=%s; host=%s; service=%s; component=%s; ",c.getClusterName(),host,svcComp == null ? "null" : svcComp.getServiceName(),svcComp == null ? "null" : svcComp.getName());
          LOG.warn(message);
        }
      }
      long commandTimeout=actionTimeout;
      if (taskTimeoutAdjustment) {
        Map<String,String> commandParams=c.getCommandParams();
        String timeoutKey=ExecutionCommand.KeyNames.COMMAND_TIMEOUT;
        if (commandParams != null && commandParams.containsKey(timeoutKey)) {
          String timeoutStr=commandParams.get(timeoutKey);
          commandTimeout+=Long.parseLong(timeoutStr) * 1000;
        }
 else {
          LOG.error("Execution command has no timeout parameter" + c.toString());
        }
      }
      if (hostDeleted) {
        String message=String.format("Host not found when trying to schedule an execution command. " + "The most probable reason for that is that host or host component " + "has been deleted recently. The command has been aborted and dequeued."+ "Execution command details: "+ "cmdId: %s; taskId: %s; roleCommand: %s",c.getCommandId(),c.getTaskId(),c.getRoleCommand());
        LOG.warn("Host {} has been detected as non-available. {}",host,message);
        db.abortHostRole(host,s.getRequestId(),s.getStageId(),c.getRole(),message);
        if (c.getRoleCommand().equals(RoleCommand.ACTIONEXECUTE)) {
          processActionDeath(cluster.getClusterName(),c.getHostname(),roleStr);
        }
        status=HostRoleStatus.ABORTED;
      }
 else       if (timeOutActionNeeded(status,s,hostObj,roleStr,now,commandTimeout)) {
        LOG.info("Host:" + host + ", role:"+ roleStr+ ", actionId:"+ s.getActionId()+ " timed out");
        if (s.getAttemptCount(host,roleStr) >= maxAttempts) {
          LOG.warn("Host:" + host + ", role:"+ roleStr+ ", actionId:"+ s.getActionId()+ " expired");
          db.timeoutHostRole(host,s.getRequestId(),s.getStageId(),c.getRole());
          status=s.getHostRoleStatus(host,roleStr);
          if (null != cluster) {
            transitionToFailedState(cluster.getClusterName(),c.getServiceName(),roleStr,host,now,false);
            if (c.getRoleCommand().equals(RoleCommand.ACTIONEXECUTE)) {
              processActionDeath(cluster.getClusterName(),c.getHostname(),roleStr);
            }
          }
          LOG.info("Removing command from queue, host={}, commandId={} ",host,c.getCommandId());
          actionQueue.dequeue(host,c.getCommandId());
        }
 else {
          commandsToSchedule.add(c);
          LOG.trace("===> commandsToSchedule(reschedule)=" + commandsToSchedule.size());
        }
      }
 else       if (status.equals(HostRoleStatus.PENDING)) {
        commandsToSchedule.add(c);
        LOG.trace("===>commandsToSchedule(first_time)=" + commandsToSchedule.size());
      }
      updateRoleStats(status,roleStats.get(roleStr));
    }
  }
  LOG.debug("Collected {} commands to schedule in this wakeup.",commandsToSchedule.size());
  return roleStats;
}
