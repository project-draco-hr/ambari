{
  Map<String,RoleStats> roleStats=initRoleStats(s);
  long now=System.currentTimeMillis();
  long taskTimeout=actionTimeout;
  if (taskTimeoutAdjustment) {
    taskTimeout=actionTimeout + s.getTaskTimeout();
  }
  for (  String host : s.getHosts()) {
    List<ExecutionCommandWrapper> commandWrappers=s.getExecutionCommands(host);
    Cluster cluster=fsmObject.getCluster(s.getClusterName());
    Host hostObj=fsmObject.getHost(host);
    for (    ExecutionCommandWrapper wrapper : commandWrappers) {
      ExecutionCommand c=wrapper.getExecutionCommand();
      String roleStr=c.getRole().toString();
      HostRoleStatus status=s.getHostRoleStatus(host,roleStr);
      if (timeOutActionNeeded(status,s,hostObj,roleStr,now,taskTimeout)) {
        LOG.info("Host:" + host + ", role:"+ roleStr+ ", actionId:"+ s.getActionId()+ " timed out");
        if (s.getAttemptCount(host,roleStr) >= maxAttempts) {
          LOG.warn("Host:" + host + ", role:"+ roleStr+ ", actionId:"+ s.getActionId()+ " expired");
          db.timeoutHostRole(host,s.getRequestId(),s.getStageId(),c.getRole());
          status=s.getHostRoleStatus(host,roleStr);
          ServiceComponentHostOpFailedEvent timeoutEvent=new ServiceComponentHostOpFailedEvent(roleStr,host,now);
          try {
            Service svc=cluster.getService(c.getServiceName());
            ServiceComponent svcComp=svc.getServiceComponent(roleStr);
            ServiceComponentHost svcCompHost=svcComp.getServiceComponentHost(host);
            svcCompHost.handleEvent(timeoutEvent);
          }
 catch (          ServiceComponentNotFoundException scnex) {
            LOG.debug("Not a service component, assuming its an action. Details: " + scnex.getMessage());
          }
catch (          InvalidStateTransitionException e) {
            LOG.info("Transition failed for host: " + host + ", role: "+ roleStr,e);
          }
catch (          AmbariException ex) {
            LOG.warn("Invalid live state",ex);
          }
          actionQueue.dequeue(host,c.getCommandId());
        }
 else {
          commandsToSchedule.add(c);
        }
      }
 else       if (status.equals(HostRoleStatus.PENDING)) {
        commandsToSchedule.add(c);
      }
      this.updateRoleStats(status,roleStats.get(roleStr));
    }
  }
  return roleStats;
}
