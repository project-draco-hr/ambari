{
  long now=System.currentTimeMillis();
  String roleStr=cmd.getRole().toString();
  String hostname=cmd.getHostname();
  if (s.getStartTime(hostname,roleStr) < 0) {
    if (RoleCommand.ACTIONEXECUTE != cmd.getRoleCommand()) {
      try {
        Cluster c=fsmObject.getCluster(s.getClusterName());
        Service svc=c.getService(cmd.getServiceName());
        ServiceComponent svcComp=svc.getServiceComponent(roleStr);
        ServiceComponentHost svcCompHost=svcComp.getServiceComponentHost(hostname);
        svcCompHost.handleEvent(s.getFsmEvent(hostname,roleStr).getEvent());
      }
 catch (      ServiceComponentNotFoundException scnex) {
        LOG.info("Not a service component, assuming its an action",scnex);
      }
catch (      InvalidStateTransitionException e) {
        LOG.info("Transition failed for host: " + hostname + ", role: "+ roleStr,e);
        throw e;
      }
catch (      AmbariException e) {
        LOG.warn("Exception in fsm: " + hostname + ", role: "+ roleStr,e);
        throw e;
      }
    }
    s.setStartTime(hostname,roleStr,now);
    s.setHostRoleStatus(hostname,roleStr,HostRoleStatus.QUEUED);
  }
  s.setLastAttemptTime(hostname,roleStr,now);
  s.incrementAttemptCount(hostname,roleStr);
  LOG.debug("Scheduling command: " + cmd.toString() + " for host: "+ hostname);
  cmd.setHostname(hostsMap.getHostMap(hostname));
  String stagePk=s.getStageId() + "-" + s.getRequestId();
  Map<String,Set<String>> clusterHostInfo=clusterHostInfoCache.getIfPresent(stagePk);
  if (clusterHostInfo == null) {
    Type type=new TypeToken<Map<String,Set<String>>>(){
    }
.getType();
    clusterHostInfo=StageUtils.getGson().fromJson(s.getClusterHostInfo(),type);
    clusterHostInfoCache.put(stagePk,clusterHostInfo);
  }
  cmd.setClusterHostInfo(clusterHostInfo);
  actionQueue.enqueue(hostname,cmd);
  db.hostRoleScheduled(s,hostname,roleStr);
}
