def __inject_config_variables(mutable_configs):
    '\n  :param mutable_configs: Mutable Configuration Dictionary\n  :return: Returns the mutable configuration dictionary where each of the dynamic properties have been injected\n  with the value of the versioned tarball or jar in HDFS.\n  '
    if ((mutable_configs is not None) and ('configurations' in mutable_configs) and (mutable_configs['configurations'] is not None) and ('webhcat-site' in mutable_configs['configurations'])):
        webhcat_config = mutable_configs['configurations']['webhcat-site']
        properties_and_prefix_tuple_list = [('pig', 'templeton.pig.archive'), ('hive', 'templeton.hive.archive'), ('sqoop', 'templeton.sqoop.archive'), ('hadoop-streaming', 'templeton.streaming.jar')]
        for (prefix, prop_name) in properties_and_prefix_tuple_list:
            prop_value = webhcat_config[prop_name]
            if prop_value:
                (found_at_least_one_replacement, new_value) = interpret_dynamic_version_property(prop_value, prefix, ',')
                if found_at_least_one_replacement:
                    webhcat_config[prop_name] = new_value
                    if (prop_name == 'templeton.sqoop.archive'):
                        templeton_sqoop_path = mutable_configs['templeton.sqoop.path']
                        if (templeton_sqoop_path and (templeton_sqoop_path.strip() != '')):
                            p = re.compile('.*(hdfs([^,])*sqoop.*\\.tar\\.gz).*')
                            m = p.match(new_value)
                            if (m and (len(m.groups()) >= 1)):
                                templeton_sqoop_path = templeton_sqoop_path.replace('sqoop.tar.gz', m.group(1))
                                webhcat_config['templeton.sqoop.path'] = templeton_sqoop_path
    return mutable_configs
