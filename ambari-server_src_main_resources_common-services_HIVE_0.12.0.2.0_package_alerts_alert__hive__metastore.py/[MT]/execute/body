@OsFamilyFuncImpl(os_family=OsFamilyImpl.DEFAULT)
def execute(configurations={}, parameters={}, host_name=None):
    '\n  Returns a tuple containing the result code and a pre-formatted result label\n\n  Keyword arguments:\n  configurations (dictionary): a mapping of configuration key to value\n  parameters (dictionary): a mapping of script parameter key to value\n  host_name (string): the name of this host where the alert is running\n  '
    if (configurations is None):
        return ('UNKNOWN', ['There were no configurations supplied to the script.'])
    if (not (HIVE_METASTORE_URIS_KEY in configurations)):
        return ('UNKNOWN', ['Hive metastore uris were not supplied to the script.'])
    metastore_uris = configurations[HIVE_METASTORE_URIS_KEY].split(',')
    security_enabled = False
    if (SECURITY_ENABLED_KEY in configurations):
        security_enabled = (str(configurations[SECURITY_ENABLED_KEY]).upper() == 'TRUE')
    smokeuser_keytab = SMOKEUSER_KEYTAB_DEFAULT
    smokeuser_principal = SMOKEUSER_PRINCIPAL_DEFAULT
    smokeuser = SMOKEUSER_DEFAULT
    if (SMOKEUSER_PRINCIPAL_SCRIPT_PARAM_KEY in parameters):
        smokeuser_principal = parameters[SMOKEUSER_PRINCIPAL_SCRIPT_PARAM_KEY]
    if (SMOKEUSER_SCRIPT_PARAM_KEY in parameters):
        smokeuser = parameters[SMOKEUSER_SCRIPT_PARAM_KEY]
    if (SMOKEUSER_KEYTAB_SCRIPT_PARAM_KEY in parameters):
        smokeuser_keytab = parameters[SMOKEUSER_KEYTAB_SCRIPT_PARAM_KEY]
    if (SMOKEUSER_PRINCIPAL_KEY in configurations):
        smokeuser_principal = configurations[SMOKEUSER_PRINCIPAL_KEY]
    if (SMOKEUSER_KEY in configurations):
        smokeuser = configurations[SMOKEUSER_KEY]
    result_code = None
    try:
        if security_enabled:
            if (SMOKEUSER_KEYTAB_KEY in configurations):
                smokeuser_keytab = configurations[SMOKEUSER_KEYTAB_KEY]
            if (KERBEROS_EXECUTABLE_SEARCH_PATHS_KEY in configurations):
                kerberos_executable_search_paths = configurations[KERBEROS_EXECUTABLE_SEARCH_PATHS_KEY]
            else:
                kerberos_executable_search_paths = None
            kinit_path_local = get_kinit_path(kerberos_executable_search_paths)
            kinitcmd = format('{kinit_path_local} -kt {smokeuser_keytab} {smokeuser_principal}; ')
            Execute(kinitcmd, user=smokeuser, path=['/bin/', '/usr/bin/', '/usr/lib/hive/bin/', '/usr/sbin/'], timeout=10)
        if (host_name is None):
            host_name = socket.getfqdn()
        for uri in metastore_uris:
            if (host_name in uri):
                metastore_uri = uri
        conf_dir = HIVE_CONF_DIR_LEGACY
        bin_dir = HIVE_BIN_DIR_LEGACY
        if os.path.exists(HIVE_CONF_DIR):
            conf_dir = HIVE_CONF_DIR
            bin_dir = HIVE_BIN_DIR
        cmd = format("export HIVE_CONF_DIR='{conf_dir}' ; hive --hiveconf hive.metastore.uris={metastore_uri}                 --hiveconf hive.metastore.client.connect.retry.delay=1                 --hiveconf hive.metastore.failure.retries=1                 --hiveconf hive.metastore.connect.retries=1                 --hiveconf hive.metastore.client.socket.timeout=14                 --hiveconf hive.execution.engine=mr -e 'show databases;'")
        start_time = time.time()
        try:
            Execute(cmd, user=smokeuser, path=['/bin/', '/usr/bin/', '/usr/sbin/', bin_dir], timeout=30)
            total_time = (time.time() - start_time)
            result_code = 'OK'
            label = OK_MESSAGE.format(total_time)
        except Exception as exception:
            result_code = 'CRITICAL'
            label = CRITICAL_MESSAGE.format(host_name, str(exception))
    except Exception as e:
        label = str(e)
        result_code = 'UNKNOWN'
    return (result_code, [label])
