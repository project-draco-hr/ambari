def execute(parameters=None, host_name=None):
    '\n  Returns a tuple containing the result code and a pre-formatted result label\n\n  Keyword arguments:\n  parameters (dictionary): a mapping of parameter key to value\n  host_name (string): the name of this host where the alert is running\n  '
    if (parameters is None):
        return ('UNKNOWN', ['There were no parameters supplied to the script.'])
    if (not (HIVE_METASTORE_URIS_KEY in parameters)):
        return ('UNKNOWN', ['Hive metastore uris were not supplied to the script.'])
    metastore_uris = parameters[HIVE_METASTORE_URIS_KEY].split(',')
    security_enabled = False
    if (SECURITY_ENABLED_KEY in parameters):
        security_enabled = (str(parameters[SECURITY_ENABLED_KEY]).upper() == 'TRUE')
    smokeuser = SMOKEUSER_DEFAULT
    if (SMOKEUSER_KEY in parameters):
        smokeuser = parameters[SMOKEUSER_KEY]
    result_code = None
    try:
        if security_enabled:
            smokeuser_keytab = SMOKEUSER_KEYTAB_DEFAULT
            if (SMOKEUSER_KEYTAB_KEY in parameters):
                smokeuser_keytab = parameters[SMOKEUSER_KEYTAB_KEY]
            kinit_path_local = get_kinit_path()
            kinitcmd = format('{kinit_path_local} -kt {smokeuser_keytab} {smokeuser}; ')
            Execute(kinitcmd, user=smokeuser, path=['/bin/', '/usr/bin/', '/usr/lib/hive/bin/', '/usr/sbin/'], timeout=10)
        if (host_name is None):
            host_name = socket.getfqdn()
        for uri in metastore_uris:
            if (host_name in uri):
                metastore_uri = uri
        cmd = format("hive --hiveconf hive.metastore.uris={metastore_uri} -e 'show databases;'")
        start_time = time.time()
        try:
            Execute(cmd, user=smokeuser, path=['/bin/', '/usr/bin/', '/usr/lib/hive/bin/', '/usr/sbin/'], timeout=30)
            total_time = (time.time() - start_time)
            result_code = 'OK'
            label = OK_MESSAGE.format(total_time)
        except Exception as exception:
            result_code = 'CRITICAL'
            label = CRITICAL_MESSAGE.format(host_name, exception.message)
    except Exception as e:
        label = str(e)
        result_code = 'UNKNOWN'
    return (result_code, [label])
