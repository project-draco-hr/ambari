{
  final HostsHeartbeatCheck hostHeartbeatCheck=new HostsHeartbeatCheck();
  hostHeartbeatCheck.clustersProvider=new Provider<Clusters>(){
    @Override public Clusters get(){
      return clusters;
    }
  }
;
  final Cluster cluster=Mockito.mock(Cluster.class);
  Mockito.when(cluster.getClusterId()).thenReturn(1L);
  Mockito.when(clusters.getCluster("cluster")).thenReturn(cluster);
  final Map<String,Host> hosts=new HashMap<String,Host>();
  final Host host1=Mockito.mock(Host.class);
  final Host host2=Mockito.mock(Host.class);
  final Host host3=Mockito.mock(Host.class);
  final HostHealthStatus status1=Mockito.mock(HostHealthStatus.class);
  final HostHealthStatus status2=Mockito.mock(HostHealthStatus.class);
  final HostHealthStatus status3=Mockito.mock(HostHealthStatus.class);
  Mockito.when(host1.getMaintenanceState(1L)).thenReturn(MaintenanceState.OFF);
  Mockito.when(host2.getMaintenanceState(1L)).thenReturn(MaintenanceState.OFF);
  Mockito.when(host3.getMaintenanceState(1L)).thenReturn(MaintenanceState.OFF);
  Mockito.when(host1.getHealthStatus()).thenReturn(status1);
  Mockito.when(host2.getHealthStatus()).thenReturn(status2);
  Mockito.when(host3.getHealthStatus()).thenReturn(status3);
  Mockito.when(status1.getHealthStatus()).thenReturn(HealthStatus.HEALTHY);
  Mockito.when(status2.getHealthStatus()).thenReturn(HealthStatus.HEALTHY);
  Mockito.when(status3.getHealthStatus()).thenReturn(HealthStatus.UNKNOWN);
  hosts.put("host1",host1);
  hosts.put("host2",host2);
  hosts.put("host3",host3);
  Mockito.when(clusters.getHostsForCluster("cluster")).thenReturn(hosts);
  PrerequisiteCheck check=new PrerequisiteCheck(null,null,null,null);
  hostHeartbeatCheck.perform(check,new PrereqCheckRequest("cluster"));
  Assert.assertEquals(PrereqCheckStatus.FAIL,check.getStatus());
  Mockito.when(status3.getHealthStatus()).thenReturn(HealthStatus.HEALTHY);
  check=new PrerequisiteCheck(null,null,null,null);
  hostHeartbeatCheck.perform(check,new PrereqCheckRequest("cluster"));
  Assert.assertEquals(PrereqCheckStatus.PASS,check.getStatus());
}
