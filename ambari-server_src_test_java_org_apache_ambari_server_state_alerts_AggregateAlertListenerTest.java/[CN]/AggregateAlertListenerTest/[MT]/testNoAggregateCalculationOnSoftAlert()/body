{
  AlertDefinition aggregateDefinition=getAggregateAlertDefinition();
  AlertCurrentEntity currentEntityMock=EasyMock.createNiceMock(AlertCurrentEntity.class);
  AlertHistoryEntity historyEntityMock=EasyMock.createNiceMock(AlertHistoryEntity.class);
  EasyMock.expect(currentEntityMock.getAlertHistory()).andReturn(historyEntityMock).atLeastOnce();
  EasyMock.expect(currentEntityMock.getFirmness()).andReturn(AlertFirmness.SOFT).atLeastOnce();
  EasyMock.expect(m_aggregateMapping.getAggregateDefinition(EasyMock.anyLong(),EasyMock.eq("mock-alert"))).andReturn(aggregateDefinition).atLeastOnce();
  AlertSummaryDTO summaryDTO=new AlertSummaryDTO(5,0,0,0,0);
  EasyMock.expect(m_alertsDao.findAggregateCounts(EasyMock.anyLong(),EasyMock.eq("mock-aggregate-alert"))).andReturn(summaryDTO).atLeastOnce();
  EasyMock.replay(m_alertsDao,m_aggregateMapping,currentEntityMock);
  Assert.assertEquals(0,m_listener.getAlertEventReceivedCount(AlertReceivedEvent.class));
  Alert alert=new Alert("mock-alert",null,null,null,null,null);
  AlertAggregateListener aggregateListener=m_injector.getInstance(AlertAggregateListener.class);
  AlertStateChangeEvent event=new AlertStateChangeEvent(0,alert,currentEntityMock,null);
  aggregateListener.onAlertStateChangeEvent(event);
  Assert.assertEquals(0,m_listener.getAlertEventReceivedCount(AlertReceivedEvent.class));
}
