{
  Resource.Type type=Resource.Type.Host;
  Injector injector=createInjector();
  AmbariManagementController managementController=injector.getInstance(AmbariManagementController.class);
  Clusters clusters=injector.getInstance(Clusters.class);
  Cluster cluster=createMock(Cluster.class);
  HostHealthStatus healthStatus=createNiceMock(HostHealthStatus.class);
  AmbariMetaInfo ambariMetaInfo=createNiceMock(AmbariMetaInfo.class);
  HostResponse hostResponse1=createNiceMock(HostResponse.class);
  ResourceProviderFactory resourceProviderFactory=createNiceMock(ResourceProviderFactory.class);
  ResourceProvider hostResourceProvider=getHostProvider(injector);
  AbstractControllerResourceProvider.init(resourceProviderFactory);
  Set<Cluster> clusterSet=new HashSet<Cluster>();
  clusterSet.add(cluster);
  Host host100=createMockHost("Host100","Cluster100",null,"HEALTHY","RECOVERABLE",null);
  expect(managementController.getClusters()).andReturn(clusters).anyTimes();
  expect(managementController.getAmbariMetaInfo()).andReturn(ambariMetaInfo).anyTimes();
  expect(managementController.getHostComponents(EasyMock.<Set<ServiceComponentHostRequest>>anyObject())).andReturn(Collections.<ServiceComponentHostResponse>emptySet()).anyTimes();
  managementController.registerRackChange("Cluster100");
  expectLastCall().anyTimes();
  expect(clusters.getCluster("Cluster100")).andReturn(cluster).anyTimes();
  expect(clusters.getClustersForHost("Host100")).andReturn(clusterSet).anyTimes();
  expect(clusters.getHost("Host100")).andReturn(host100).anyTimes();
  expect(clusters.getHostsForCluster("Cluster100")).andReturn(Collections.singletonMap("Host100",host100)).anyTimes();
  clusters.mapHostToCluster("Host100","Cluster100");
  expectLastCall().anyTimes();
  cluster.recalculateAllClusterVersionStates();
  expectLastCall().anyTimes();
  expect(cluster.getClusterId()).andReturn(2L).anyTimes();
  expect(cluster.getResourceId()).andReturn(4L).anyTimes();
  expect(hostResponse1.getClusterName()).andReturn("Cluster100").anyTimes();
  expect(hostResponse1.getHostname()).andReturn("Host100").anyTimes();
  expect(hostResponse1.getHealthStatus()).andReturn(healthStatus).anyTimes();
  expect(healthStatus.getHealthStatus()).andReturn(HostHealthStatus.HealthStatus.HEALTHY).anyTimes();
  expect(healthStatus.getHealthReport()).andReturn("HEALTHY").anyTimes();
  expect(resourceProviderFactory.getHostResourceProvider(EasyMock.<Set<String>>anyObject(),EasyMock.<Map<Resource.Type,String>>anyObject(),eq(managementController))).andReturn(hostResourceProvider).anyTimes();
  replayAll();
  SecurityContextHolder.getContext().setAuthentication(authentication);
  ResourceProvider provider=AbstractControllerResourceProvider.getResourceProvider(type,PropertyHelper.getPropertyIds(type),PropertyHelper.getKeyPropertyIds(type),managementController);
  Map<String,Object> properties=new LinkedHashMap<String,Object>();
  properties.put(HostResourceProvider.HOST_RACK_INFO_PROPERTY_ID,"rack info");
  Request request=PropertyHelper.getUpdateRequest(properties,null);
  Predicate predicate=new PredicateBuilder().property(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID).equals("Cluster100").and().property(HostResourceProvider.HOST_NAME_PROPERTY_ID).equals("Host100").toPredicate();
  provider.updateResources(request,predicate);
  verifyAll();
}
