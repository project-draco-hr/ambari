{
  Resource.Type type=Resource.Type.Host;
  AmbariManagementController managementController=createMock(AmbariManagementController.class);
  Clusters clusters=createNiceMock(Clusters.class);
  Cluster cluster=createNiceMock(Cluster.class);
  HostHealthStatus healthStatus=createNiceMock(HostHealthStatus.class);
  AmbariMetaInfo ambariMetaInfo=createNiceMock(AmbariMetaInfo.class);
  HostResponse hostResponse1=createNiceMock(HostResponse.class);
  ResourceProviderFactory resourceProviderFactory=createNiceMock(ResourceProviderFactory.class);
  ResourceProvider hostResourceProvider=createNiceMock(HostResourceProvider.class);
  AbstractControllerResourceProvider.init(resourceProviderFactory);
  Set<Cluster> clusterSet=new HashSet<Cluster>();
  clusterSet.add(cluster);
  expect(managementController.getClusters()).andReturn(clusters).anyTimes();
  expect(managementController.getAmbariMetaInfo()).andReturn(ambariMetaInfo).anyTimes();
  expect(clusters.getCluster("Cluster100")).andReturn(cluster).anyTimes();
  expect(clusters.getClustersForHost("Host100")).andReturn(clusterSet).anyTimes();
  expect(hostResponse1.getClusterName()).andReturn("Cluster100").anyTimes();
  expect(hostResponse1.getHostname()).andReturn("Host100").anyTimes();
  expect(hostResponse1.getHealthStatus()).andReturn(healthStatus).anyTimes();
  expect(hostResponse1.getStatus()).andReturn(HealthStatus.UNKNOWN.name()).anyTimes();
  expect(healthStatus.getHealthStatus()).andReturn(HostHealthStatus.HealthStatus.UNKNOWN).anyTimes();
  expect(healthStatus.getHealthReport()).andReturn("UNKNOWN").anyTimes();
  expect(resourceProviderFactory.getHostResourceProvider(anyObject(Set.class),anyObject(Map.class),eq(managementController))).andReturn(hostResourceProvider).anyTimes();
  Set<Resource> hostsResources=new HashSet<Resource>();
  Resource hostResource1=new ResourceImpl(Resource.Type.Host);
  hostResource1.setProperty(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID,"Cluster100");
  hostResource1.setProperty(HostResourceProvider.HOST_HOST_STATUS_PROPERTY_ID,HealthStatus.UNKNOWN.name());
  hostsResources.add(hostResource1);
  Set<String> propertyIds=new HashSet<String>();
  propertyIds.add(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID);
  propertyIds.add(HostResourceProvider.HOST_NAME_PROPERTY_ID);
  propertyIds.add(HostResourceProvider.HOST_HOST_STATUS_PROPERTY_ID);
  Predicate predicate=new PredicateBuilder().property(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID).equals("Cluster100").toPredicate();
  Request request=PropertyHelper.getReadRequest(propertyIds);
  expect(hostResourceProvider.getResources(eq(request),eq(predicate))).andReturn(hostsResources).anyTimes();
  replay(managementController,clusters,cluster,hostResponse1,healthStatus,ambariMetaInfo,resourceProviderFactory,hostResourceProvider);
  ResourceProvider provider=AbstractControllerResourceProvider.getResourceProvider(type,PropertyHelper.getPropertyIds(type),PropertyHelper.getKeyPropertyIds(type),managementController);
  Set<Resource> resources=provider.getResources(request,predicate);
  Assert.assertEquals(1,resources.size());
  for (  Resource resource : resources) {
    String clusterName=(String)resource.getPropertyValue(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID);
    Assert.assertEquals("Cluster100",clusterName);
    String status=(String)resource.getPropertyValue(HostResourceProvider.HOST_HOST_STATUS_PROPERTY_ID);
    Assert.assertEquals("UNKNOWN",status);
  }
  verify(managementController,clusters,cluster,hostResponse1,healthStatus,ambariMetaInfo,resourceProviderFactory,hostResourceProvider);
}
