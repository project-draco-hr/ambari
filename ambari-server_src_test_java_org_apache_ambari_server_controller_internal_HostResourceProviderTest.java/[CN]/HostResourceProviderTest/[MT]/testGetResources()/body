{
  Resource.Type type=Resource.Type.Host;
  AmbariManagementController managementController=createMock(AmbariManagementController.class);
  Clusters clusters=createNiceMock(Clusters.class);
  Cluster cluster=createNiceMock(Cluster.class);
  Host host1=createNiceMock(Host.class);
  Host host2=createNiceMock(Host.class);
  Host host3=createNiceMock(Host.class);
  HostHealthStatus healthStatus=createNiceMock(HostHealthStatus.class);
  AmbariMetaInfo ambariMetaInfo=createNiceMock(AmbariMetaInfo.class);
  ResourceProviderFactory resourceProviderFactory=createNiceMock(ResourceProviderFactory.class);
  ResourceProvider hostResourceProvider=createNiceMock(HostResourceProvider.class);
  AbstractControllerResourceProvider.init(resourceProviderFactory);
  List<Host> hosts=new LinkedList<Host>();
  hosts.add(host1);
  hosts.add(host2);
  hosts.add(host3);
  Set<Cluster> clusterSet=new HashSet<Cluster>();
  clusterSet.add(cluster);
  expect(managementController.getClusters()).andReturn(clusters).anyTimes();
  expect(managementController.getAmbariMetaInfo()).andReturn(ambariMetaInfo).anyTimes();
  expect(managementController.getHostComponents((Set<ServiceComponentHostRequest>)anyObject())).andReturn(Collections.<ServiceComponentHostResponse>emptySet()).anyTimes();
  expect(resourceProviderFactory.getHostResourceProvider(anyObject(Set.class),anyObject(Map.class),eq(managementController))).andReturn(hostResourceProvider).anyTimes();
  expect(clusters.getHosts()).andReturn(hosts).anyTimes();
  expect(clusters.getCluster("Cluster100")).andReturn(cluster).anyTimes();
  expect(clusters.getClustersForHost("Host100")).andReturn(clusterSet).anyTimes();
  expect(clusters.getClustersForHost("Host101")).andReturn(clusterSet).anyTimes();
  expect(clusters.getClustersForHost("Host102")).andReturn(clusterSet).anyTimes();
  expect(host1.getHostName()).andReturn("Host100").anyTimes();
  expect(host2.getHostName()).andReturn("Host101").anyTimes();
  expect(host3.getHostName()).andReturn("Host102").anyTimes();
  expect(healthStatus.getHealthStatus()).andReturn(HostHealthStatus.HealthStatus.HEALTHY).anyTimes();
  expect(healthStatus.getHealthReport()).andReturn("HEALTHY").anyTimes();
  Set<String> propertyIds=new HashSet<String>();
  propertyIds.add(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID);
  propertyIds.add(HostResourceProvider.HOST_NAME_PROPERTY_ID);
  Predicate predicate=new PredicateBuilder().property(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID).equals("Cluster100").toPredicate();
  Request request=PropertyHelper.getReadRequest(propertyIds);
  Set<Resource> hostsResources=new HashSet<Resource>();
  Resource hostResource1=new ResourceImpl(Resource.Type.Host);
  hostResource1.setProperty(PropertyHelper.getPropertyId("Hosts","cluster_name"),"Cluster100");
  hostResource1.setProperty(PropertyHelper.getPropertyId("Hosts","host_name"),"Host100");
  Resource hostResource2=new ResourceImpl(Resource.Type.Host);
  hostResource2.setProperty(PropertyHelper.getPropertyId("Hosts","cluster_name"),"Cluster100");
  hostResource2.setProperty(PropertyHelper.getPropertyId("Hosts","host_name"),"Host101");
  Resource hostResource3=new ResourceImpl(Resource.Type.Host);
  hostResource3.setProperty(PropertyHelper.getPropertyId("Hosts","cluster_name"),"Cluster100");
  hostResource3.setProperty(PropertyHelper.getPropertyId("Hosts","host_name"),"Host102");
  hostsResources.add(hostResource1);
  hostsResources.add(hostResource2);
  hostsResources.add(hostResource3);
  expect(hostResourceProvider.getResources(eq(request),eq(predicate))).andReturn(hostsResources).anyTimes();
  replay(managementController,clusters,cluster,host1,host2,host3,healthStatus,ambariMetaInfo,resourceProviderFactory,hostResourceProvider);
  ResourceProvider provider=AbstractControllerResourceProvider.getResourceProvider(type,PropertyHelper.getPropertyIds(type),PropertyHelper.getKeyPropertyIds(type),managementController);
  Set<Resource> resources=provider.getResources(request,predicate);
  Assert.assertEquals(3,resources.size());
  for (  Resource resource : resources) {
    String clusterName=(String)resource.getPropertyValue(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID);
    Assert.assertEquals("Cluster100",clusterName);
  }
  verify(managementController,clusters,cluster,host1,host2,host3,healthStatus,ambariMetaInfo);
}
