{
  Injector injector=createInjector();
  AmbariManagementController managementController=injector.getInstance(AmbariManagementController.class);
  Clusters clusters=injector.getInstance(Clusters.class);
  Cluster cluster=createMock(Cluster.class);
  Host host1=createNiceMock(Host.class);
  HostHealthStatus healthStatus=createNiceMock(HostHealthStatus.class);
  List<Host> hosts=new LinkedList<Host>();
  hosts.add(host1);
  Set<Cluster> clusterSet=new HashSet<Cluster>();
  expect(managementController.getClusters()).andReturn(clusters).anyTimes();
  expect(clusters.getHosts()).andReturn(hosts).anyTimes();
  expect(clusters.getHost("Host100")).andReturn(host1).anyTimes();
  expect(clusters.getCluster("Cluster100")).andReturn(cluster).anyTimes();
  expect(clusters.getClustersForHost("Host100")).andReturn(clusterSet).anyTimes();
  clusters.deleteHost("Host100");
  expectLastCall().anyTimes();
  expect(host1.getHostName()).andReturn("Host100").anyTimes();
  expect(healthStatus.getHealthStatus()).andReturn(HostHealthStatus.HealthStatus.HEALTHY).anyTimes();
  expect(healthStatus.getHealthReport()).andReturn("HEALTHY").anyTimes();
  replayAll();
  SecurityContextHolder.getContext().setAuthentication(authentication);
  TopologyManager topologyManager=EasyMock.createNiceMock(TopologyManager.class);
  expect(topologyManager.getRequests(Collections.EMPTY_LIST)).andReturn(Collections.EMPTY_LIST).anyTimes();
  replay(topologyManager);
  ResourceProvider provider=getHostProvider(injector);
  HostResourceProvider.setTopologyManager(topologyManager);
  AbstractResourceProviderTest.TestObserver observer=new AbstractResourceProviderTest.TestObserver();
  ((ObservableResourceProvider)provider).addObserver(observer);
  Predicate predicate=new PredicateBuilder().property(HostResourceProvider.HOST_NAME_PROPERTY_ID).equals("Host100").toPredicate();
  provider.deleteResources(new RequestImpl(null,null,null,null),predicate);
  ResourceProviderEvent lastEvent=observer.getLastEvent();
  Assert.assertNotNull(lastEvent);
  Assert.assertEquals(Resource.Type.Host,lastEvent.getResourceType());
  Assert.assertEquals(ResourceProviderEvent.Type.Delete,lastEvent.getType());
  Assert.assertEquals(predicate,lastEvent.getPredicate());
  Assert.assertNull(lastEvent.getRequest());
  verifyAll();
}
