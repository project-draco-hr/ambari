{
  AmbariManagementController managementController=createMock(AmbariManagementController.class);
  Clusters clusters=createNiceMock(Clusters.class);
  Cluster cluster=createNiceMock(Cluster.class);
  Host host1=createNiceMock(Host.class);
  HostHealthStatus healthStatus=createNiceMock(HostHealthStatus.class);
  AmbariMetaInfo ambariMetaInfo=createNiceMock(AmbariMetaInfo.class);
  HostResponse hostResponse1=createNiceMock(HostResponse.class);
  List<Host> hosts=new LinkedList<Host>();
  hosts.add(host1);
  Set<Cluster> clusterSet=new HashSet<Cluster>();
  clusterSet.add(cluster);
  expect(managementController.getClusters()).andReturn(clusters).anyTimes();
  expect(managementController.getAmbariMetaInfo()).andReturn(ambariMetaInfo).anyTimes();
  expect(managementController.getHostComponents((Set<ServiceComponentHostRequest>)anyObject())).andReturn(Collections.<ServiceComponentHostResponse>emptySet()).anyTimes();
  expect(clusters.getHosts()).andReturn(hosts).anyTimes();
  expect(clusters.getHost("Host100")).andReturn(host1).anyTimes();
  expect(clusters.getCluster("Cluster100")).andReturn(cluster).anyTimes();
  expect(clusters.getClustersForHost("Host100")).andReturn(clusterSet).anyTimes();
  expect(host1.getHostName()).andReturn("Host100").anyTimes();
  expect(host1.convertToResponse()).andReturn(hostResponse1);
  expect(hostResponse1.getClusterName()).andReturn("Cluster100").anyTimes();
  expect(hostResponse1.getHostname()).andReturn("Host100").anyTimes();
  expect(hostResponse1.getHealthStatus()).andReturn(healthStatus).anyTimes();
  expect(healthStatus.getHealthStatus()).andReturn(HostHealthStatus.HealthStatus.HEALTHY).anyTimes();
  expect(healthStatus.getHealthReport()).andReturn("HEALTHY").anyTimes();
  replay(managementController,clusters,cluster,host1,hostResponse1,healthStatus,ambariMetaInfo);
  Map<String,Object> properties=new LinkedHashMap<String,Object>();
  properties.put(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID,"Cluster100");
  properties.put(HostResourceProvider.HOST_NAME_PROPERTY_ID,"Host100");
  properties.put(PropertyHelper.getPropertyId("Hosts.desired_config","type"),"global");
  properties.put(PropertyHelper.getPropertyId("Hosts.desired_config","tag"),"version1");
  properties.put(PropertyHelper.getPropertyId("Hosts.desired_config.properties","a"),"b");
  properties.put(PropertyHelper.getPropertyId("Hosts.desired_config.properties","x"),"y");
  Request request=PropertyHelper.getUpdateRequest(properties,null);
  Predicate predicate=new PredicateBuilder().property(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID).equals("Cluster100").and().property(HostResourceProvider.HOST_NAME_PROPERTY_ID).equals("Host100").toPredicate();
  ResourceProvider provider=AbstractControllerResourceProvider.getResourceProvider(Resource.Type.Host,PropertyHelper.getPropertyIds(Resource.Type.Host),PropertyHelper.getKeyPropertyIds(Resource.Type.Host),managementController);
  provider.updateResources(request,predicate);
  verify(managementController,clusters,cluster,host1,hostResponse1,healthStatus,ambariMetaInfo);
}
