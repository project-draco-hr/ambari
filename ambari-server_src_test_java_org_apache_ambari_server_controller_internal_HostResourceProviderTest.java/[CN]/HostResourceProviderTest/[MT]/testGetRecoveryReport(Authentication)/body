{
  Resource.Type type=Resource.Type.Host;
  Injector injector=createInjector();
  AmbariManagementController managementController=injector.getInstance(AmbariManagementController.class);
  Clusters clusters=injector.getInstance(Clusters.class);
  Cluster cluster=createMock(Cluster.class);
  AmbariMetaInfo ambariMetaInfo=createNiceMock(AmbariMetaInfo.class);
  ComponentInfo componentInfo=createNiceMock(ComponentInfo.class);
  ResourceProviderFactory resourceProviderFactory=createNiceMock(ResourceProviderFactory.class);
  ResourceProvider hostResourceProvider=getHostProvider(injector);
  RecoveryReport rr=new RecoveryReport();
  rr.setSummary("RECOVERABLE");
  List<ComponentRecoveryReport> compRecReports=new ArrayList<ComponentRecoveryReport>();
  ComponentRecoveryReport compRecReport=new ComponentRecoveryReport();
  compRecReport.setLimitReached(Boolean.FALSE);
  compRecReport.setName("DATANODE");
  compRecReport.setNumAttempts(2);
  compRecReports.add(compRecReport);
  rr.setComponentReports(compRecReports);
  Host host100=createMockHost("Host100","Cluster100",null,"HEALTHY","RECOVERABLE",rr);
  AbstractControllerResourceProvider.init(resourceProviderFactory);
  Set<Cluster> clusterSet=new HashSet<Cluster>();
  clusterSet.add(cluster);
  ServiceComponentHostResponse shr1=new ServiceComponentHostResponse("Cluster100","Service100","Component100","Component 100","Host100","Host100","STARTED","",null,null,null);
  Set<ServiceComponentHostResponse> responses=new HashSet<ServiceComponentHostResponse>();
  responses.add(shr1);
  expect(host100.getMaintenanceState(2)).andReturn(MaintenanceState.OFF).anyTimes();
  expect(managementController.getClusters()).andReturn(clusters).anyTimes();
  expect(managementController.getAmbariMetaInfo()).andReturn(ambariMetaInfo).anyTimes();
  expect(managementController.getHostComponents(EasyMock.<Set<ServiceComponentHostRequest>>anyObject())).andReturn(responses).anyTimes();
  expect(clusters.getCluster("Cluster100")).andReturn(cluster).anyTimes();
  expect(clusters.getClustersForHost("Host100")).andReturn(clusterSet).anyTimes();
  expect(clusters.getHosts()).andReturn(Arrays.asList(host100)).anyTimes();
  expect(cluster.getClusterId()).andReturn(2L).anyTimes();
  expect(cluster.getDesiredConfigs()).andReturn(new HashMap<String,DesiredConfig>()).anyTimes();
  expect(ambariMetaInfo.getComponent((String)anyObject(),(String)anyObject(),(String)anyObject(),(String)anyObject())).andReturn(componentInfo).anyTimes();
  expect(componentInfo.getCategory()).andReturn("SLAVE").anyTimes();
  expect(resourceProviderFactory.getHostResourceProvider(EasyMock.<Set<String>>anyObject(),EasyMock.<Map<Resource.Type,String>>anyObject(),eq(managementController))).andReturn(hostResourceProvider).anyTimes();
  Set<String> propertyIds=new HashSet<String>();
  propertyIds.add(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID);
  propertyIds.add(HostResourceProvider.HOST_NAME_PROPERTY_ID);
  propertyIds.add(HostResourceProvider.HOST_RECOVERY_REPORT_PROPERTY_ID);
  propertyIds.add(HostResourceProvider.HOST_RECOVERY_SUMMARY_PROPERTY_ID);
  Predicate predicate=buildPredicate("Cluster100",null);
  Request request=PropertyHelper.getReadRequest(propertyIds);
  replayAll();
  SecurityContextHolder.getContext().setAuthentication(authentication);
  ResourceProvider provider=AbstractControllerResourceProvider.getResourceProvider(type,PropertyHelper.getPropertyIds(type),PropertyHelper.getKeyPropertyIds(type),managementController);
  Set<Resource> resources=provider.getResources(request,predicate);
  Assert.assertEquals(1,resources.size());
  for (  Resource resource : resources) {
    String clusterName=(String)resource.getPropertyValue(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID);
    Assert.assertEquals("Cluster100",clusterName);
    String recovery=(String)resource.getPropertyValue(HostResourceProvider.HOST_RECOVERY_SUMMARY_PROPERTY_ID);
    Assert.assertEquals("RECOVERABLE",recovery);
    RecoveryReport recRep=(RecoveryReport)resource.getPropertyValue(HostResourceProvider.HOST_RECOVERY_REPORT_PROPERTY_ID);
    Assert.assertEquals("RECOVERABLE",recRep.getSummary());
    Assert.assertEquals(1,recRep.getComponentReports().size());
    Assert.assertEquals(2,recRep.getComponentReports().get(0).getNumAttempts());
  }
  verifyAll();
}
