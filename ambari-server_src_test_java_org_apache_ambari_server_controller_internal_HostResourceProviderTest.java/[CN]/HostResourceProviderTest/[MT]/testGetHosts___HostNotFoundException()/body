{
  Injector injector=createStrictMock(Injector.class);
  Capture<AmbariManagementController> controllerCapture=new Capture<AmbariManagementController>();
  Clusters clusters=createNiceMock(Clusters.class);
  MaintenanceStateHelper maintHelper=createNiceMock(MaintenanceStateHelper.class);
  Cluster cluster=createNiceMock(Cluster.class);
  HostRequest request1=new HostRequest("host1","cluster1",Collections.<String,String>emptyMap());
  Set<HostRequest> setRequests=Collections.singleton(request1);
  injector.injectMembers(capture(controllerCapture));
  expect(injector.getInstance(Gson.class)).andReturn(null);
  expect(injector.getInstance(MaintenanceStateHelper.class)).andReturn(maintHelper);
  expect(injector.getInstance(KerberosHelper.class)).andReturn(createNiceMock(KerberosHelper.class));
  expect(clusters.getCluster("cluster1")).andReturn(cluster);
  expect(clusters.getHost("host1")).andThrow(new HostNotFoundException("host1"));
  final InetAddress mock=createMock(InetAddress.class);
  mockStatic(InetAddress.class);
  expect(InetAddress.getLocalHost()).andReturn(mock);
  replayAll();
  replay(maintHelper,injector,clusters,cluster);
  AmbariManagementController controller=new AmbariManagementControllerImpl(null,clusters,injector);
  try {
    getHosts(controller,setRequests);
    fail("expected HostNotFoundException");
  }
 catch (  HostNotFoundException e) {
  }
  assertSame(controller,controllerCapture.getValue());
  verify(injector,clusters,cluster);
}
