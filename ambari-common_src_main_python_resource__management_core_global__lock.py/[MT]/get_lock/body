def get_lock(lock_type):
    '\n  Gets the global lock associated with the specified type. This does not actually acquire\n  the lock, it simply returns the RLock instance. It is up to the caller to invoke RLock.acquire()\n  and RLock.release() correctly.\n  :param lock_type:\n  :return: a global threading.RLock() instance\n  :rtype: threading.RLock()\n  '
    if (lock_type not in __GLOBAL_LOCKS):
        raise Fail('There is no global lock associated with {0}'.format(str(lock_type)))
    return __GLOBAL_LOCKS[lock_type]
