{
  stateMachine=stateMachineFactory.make(this);
  rwLock=new ReentrantReadWriteLock();
  readLock=rwLock.readLock();
  writeLock=rwLock.writeLock();
  this.hostEntity=hostEntity;
  this.persisted=persisted;
  hostDAO=injector.getInstance(HostDAO.class);
  hostStateDAO=injector.getInstance(HostStateDAO.class);
  gson=injector.getInstance(Gson.class);
  clusterDAO=injector.getInstance(ClusterDAO.class);
  clusters=injector.getInstance(Clusters.class);
  hostConfigMappingDAO=injector.getInstance(HostConfigMappingDAO.class);
  hostStateEntity=hostEntity.getHostStateEntity();
  if (hostStateEntity == null) {
    hostStateEntity=new HostStateEntity();
    hostStateEntity.setHostEntity(hostEntity);
    hostEntity.setHostStateEntity(hostStateEntity);
    setHealthStatus(new HostHealthStatus(HealthStatus.UNKNOWN,""));
    if (persisted) {
      persist();
    }
  }
 else {
    stateMachine.setCurrentState(hostStateEntity.getCurrentState());
  }
}
