{
  if (jwtProperties != null && isAuthenticationRequired()) {
    HttpServletRequest httpServletRequest=(HttpServletRequest)servletRequest;
    HttpServletResponse httpServletResponse=(HttpServletResponse)servletResponse;
    String serializedJWT=getJWTFromCookie(httpServletRequest);
    if (serializedJWT != null) {
      SignedJWT jwtToken=null;
      try {
        jwtToken=SignedJWT.parse(serializedJWT);
        boolean valid=validateToken(jwtToken);
        if (valid) {
          String userName=jwtToken.getJWTClaimsSet().getSubject();
          User user=users.getUser(userName,UserType.JWT);
          if (user == null) {
            users.createUser(userName,null,UserType.JWT,true,false);
            user=users.getUser(userName,UserType.JWT);
          }
          Collection<AmbariGrantedAuthority> userAuthorities=users.getUserAuthorities(user.getUserName(),user.getUserType());
          JwtAuthentication token=new JwtAuthentication(jwtToken,user,userAuthorities);
          token.setAuthenticated(true);
          SecurityContextHolder.getContext().setAuthentication(token);
        }
 else {
          LOG.warn("JWT authentication failed");
          if (ignoreFailure) {
            filterChain.doFilter(servletRequest,servletResponse);
          }
 else {
            entryPoint.commence(httpServletRequest,httpServletResponse,new BadCredentialsException("Invalid JWT " + "token"));
          }
        }
      }
 catch (      ParseException e) {
        LOG.warn("Unable to parse the JWT token",e);
      }
    }
  }
  filterChain.doFilter(servletRequest,servletResponse);
}
