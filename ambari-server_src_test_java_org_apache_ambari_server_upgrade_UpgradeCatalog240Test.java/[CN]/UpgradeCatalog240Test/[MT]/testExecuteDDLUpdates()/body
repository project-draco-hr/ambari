{
  Capture<DBAccessor.DBColumnInfo> capturedColumnInfo=newCapture();
  Capture<DBAccessor.DBColumnInfo> capturedScColumnInfo=newCapture();
  Capture<DBAccessor.DBColumnInfo> capturedScDesiredVersionColumnInfo=newCapture();
  final DBAccessor dbAccessor=createStrictMock(DBAccessor.class);
  Configuration configuration=createNiceMock(Configuration.class);
  Connection connection=createNiceMock(Connection.class);
  Statement statement=createNiceMock(Statement.class);
  ResultSet resultSet=createNiceMock(ResultSet.class);
  Capture<List<DBAccessor.DBColumnInfo>> capturedSettingColumns=EasyMock.newCapture();
  dbAccessor.addColumn(eq("adminpermission"),capture(capturedColumnInfo));
  dbAccessor.addColumn(eq(UpgradeCatalog240.SERVICE_COMPONENT_DESIRED_STATE_TABLE),capture(capturedScColumnInfo));
  dbAccessor.addColumn(eq(UpgradeCatalog240.SERVICE_COMPONENT_DESIRED_STATE_TABLE),capture(capturedScDesiredVersionColumnInfo));
  dbAccessor.createTable(eq("setting"),capture(capturedSettingColumns),eq("id"));
  expect(configuration.getDatabaseUrl()).andReturn(Configuration.JDBC_IN_MEMORY_URL).anyTimes();
  expect(dbAccessor.getConnection()).andReturn(connection);
  expect(connection.createStatement()).andReturn(statement);
  expect(statement.executeQuery(anyObject(String.class))).andReturn(resultSet);
  Capture<DBAccessor.DBColumnInfo> repoVersionRepoTypeColumnCapture=newCapture();
  Capture<DBAccessor.DBColumnInfo> repoVersionUrlColumnCapture=newCapture();
  Capture<DBAccessor.DBColumnInfo> repoVersionXmlColumnCapture=newCapture();
  Capture<DBAccessor.DBColumnInfo> repoVersionXsdColumnCapture=newCapture();
  Capture<DBAccessor.DBColumnInfo> repoVersionParentIdColumnCapture=newCapture();
  dbAccessor.addColumn(eq("repo_version"),capture(repoVersionRepoTypeColumnCapture));
  dbAccessor.addColumn(eq("repo_version"),capture(repoVersionUrlColumnCapture));
  dbAccessor.addColumn(eq("repo_version"),capture(repoVersionXmlColumnCapture));
  dbAccessor.addColumn(eq("repo_version"),capture(repoVersionXsdColumnCapture));
  dbAccessor.addColumn(eq("repo_version"),capture(repoVersionParentIdColumnCapture));
  expect(dbAccessor.tableHasPrimaryKey("servicecomponentdesiredstate","id")).andReturn(true);
  Capture<List<DBAccessor.DBColumnInfo>> capturedHistoryColumns=EasyMock.newCapture();
  dbAccessor.createTable(eq("servicecomponent_history"),capture(capturedHistoryColumns),eq((String[])null));
  dbAccessor.addPKConstraint("servicecomponent_history","PK_sc_history","id");
  dbAccessor.addFKConstraint("servicecomponent_history","FK_sc_history_component_id","component_id","servicecomponentdesiredstate","id",false);
  dbAccessor.addFKConstraint("servicecomponent_history","FK_sc_history_upgrade_id","upgrade_id","upgrade","upgrade_id",false);
  dbAccessor.addFKConstraint("servicecomponent_history","FK_sc_history_from_stack_id","from_stack_id","stack","stack_id",false);
  dbAccessor.addFKConstraint("servicecomponent_history","FK_sc_history_to_stack_id","to_stack_id","stack","stack_id",false);
  expect(dbAccessor.getConnection()).andReturn(connection);
  expect(connection.createStatement()).andReturn(statement);
  expect(statement.executeQuery(anyObject(String.class))).andReturn(resultSet);
  Capture<DBAccessor.DBColumnInfo> capturedClusterUpgradeColumnInfo=newCapture();
  dbAccessor.addColumn(eq(UpgradeCatalog240.CLUSTER_TABLE),capture(capturedClusterUpgradeColumnInfo));
  dbAccessor.addFKConstraint(UpgradeCatalog240.CLUSTER_TABLE,"FK_clusters_upgrade_id",UpgradeCatalog240.CLUSTER_UPGRADE_ID_COLUMN,UpgradeCatalog240.UPGRADE_TABLE,"upgrade_id",false);
  Capture<DBAccessor.DBColumnInfo> capturedHelpURLColumnInfo=newCapture();
  dbAccessor.addColumn(eq(UpgradeCatalog240.ALERT_DEFINITION_TABLE),capture(capturedHelpURLColumnInfo));
  replay(dbAccessor,configuration,connection,statement,resultSet);
  Module module=new Module(){
    @Override public void configure(    Binder binder){
      binder.bind(DBAccessor.class).toInstance(dbAccessor);
      binder.bind(OsFamily.class).toInstance(createNiceMock(OsFamily.class));
      binder.bind(EntityManager.class).toInstance(entityManager);
    }
  }
;
  Injector injector=Guice.createInjector(module);
  UpgradeCatalog240 upgradeCatalog240=injector.getInstance(UpgradeCatalog240.class);
  upgradeCatalog240.executeDDLUpdates();
  DBAccessor.DBColumnInfo columnInfo=capturedColumnInfo.getValue();
  Assert.assertNotNull(columnInfo);
  Assert.assertEquals(UpgradeCatalog240.SORT_ORDER_COL,columnInfo.getName());
  Assert.assertEquals(null,columnInfo.getLength());
  Assert.assertEquals(Short.class,columnInfo.getType());
  Assert.assertEquals(1,columnInfo.getDefaultValue());
  Assert.assertEquals(false,columnInfo.isNullable());
  DBAccessor.DBColumnInfo columnScInfo=capturedScColumnInfo.getValue();
  Assert.assertNotNull(columnScInfo);
  Assert.assertEquals(UpgradeCatalog240.RECOVERY_ENABLED_COL,columnScInfo.getName());
  Assert.assertEquals(null,columnScInfo.getLength());
  Assert.assertEquals(Short.class,columnScInfo.getType());
  Assert.assertEquals(0,columnScInfo.getDefaultValue());
  Assert.assertEquals(false,columnScInfo.isNullable());
  DBAccessor.DBColumnInfo columnScDesiredVersionInfo=capturedScDesiredVersionColumnInfo.getValue();
  Assert.assertNotNull(columnScDesiredVersionInfo);
  Assert.assertEquals(UpgradeCatalog240.DESIRED_VERSION_COLUMN_NAME,columnScDesiredVersionInfo.getName());
  Assert.assertEquals(Integer.valueOf(255),columnScDesiredVersionInfo.getLength());
  Assert.assertEquals(String.class,columnScDesiredVersionInfo.getType());
  Assert.assertEquals("UNKNOWN",columnScDesiredVersionInfo.getDefaultValue());
  Assert.assertEquals(false,columnScDesiredVersionInfo.isNullable());
  DBAccessor.DBColumnInfo clusterUpgradeColumnInfo=capturedClusterUpgradeColumnInfo.getValue();
  Assert.assertNotNull(clusterUpgradeColumnInfo);
  Assert.assertEquals(UpgradeCatalog240.CLUSTER_UPGRADE_ID_COLUMN,clusterUpgradeColumnInfo.getName());
  Assert.assertEquals(null,clusterUpgradeColumnInfo.getLength());
  Assert.assertEquals(Long.class,clusterUpgradeColumnInfo.getType());
  Assert.assertEquals(null,clusterUpgradeColumnInfo.getDefaultValue());
  Assert.assertEquals(true,clusterUpgradeColumnInfo.isNullable());
  Map<String,Class> expectedCaptures=new HashMap<>();
  expectedCaptures.put("id",Long.class);
  expectedCaptures.put("name",String.class);
  expectedCaptures.put("setting_type",String.class);
  expectedCaptures.put("content",String.class);
  expectedCaptures.put("updated_by",String.class);
  expectedCaptures.put("update_timestamp",Long.class);
  Map<String,Class> actualCaptures=new HashMap<>();
  for (  DBAccessor.DBColumnInfo settingColumnInfo : capturedSettingColumns.getValue()) {
    actualCaptures.put(settingColumnInfo.getName(),settingColumnInfo.getType());
  }
  assertEquals(expectedCaptures,actualCaptures);
  expectedCaptures=new HashMap<>();
  expectedCaptures.put("id",Long.class);
  expectedCaptures.put("component_id",Long.class);
  expectedCaptures.put("upgrade_id",Long.class);
  expectedCaptures.put("from_stack_id",Long.class);
  expectedCaptures.put("to_stack_id",Long.class);
  actualCaptures=new HashMap<>();
  for (  DBAccessor.DBColumnInfo historyColumnInfo : capturedHistoryColumns.getValue()) {
    actualCaptures.put(historyColumnInfo.getName(),historyColumnInfo.getType());
  }
  DBAccessor.DBColumnInfo columnHelpURLInfo=capturedHelpURLColumnInfo.getValue();
  Assert.assertNotNull(columnHelpURLInfo);
  Assert.assertEquals(UpgradeCatalog240.HELP_URL_COLUMN,columnHelpURLInfo.getName());
  Assert.assertEquals(Integer.valueOf(512),columnHelpURLInfo.getLength());
  Assert.assertEquals(String.class,columnHelpURLInfo.getType());
  Assert.assertEquals(null,columnHelpURLInfo.getDefaultValue());
  Assert.assertEquals(true,columnHelpURLInfo.isNullable());
  assertEquals(expectedCaptures,actualCaptures);
  verify(dbAccessor);
}
