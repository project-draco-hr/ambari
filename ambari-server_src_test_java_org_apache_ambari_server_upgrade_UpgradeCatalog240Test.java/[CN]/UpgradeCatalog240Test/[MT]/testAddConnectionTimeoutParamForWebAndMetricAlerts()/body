{
  EasyMockSupport easyMockSupport=new EasyMockSupport();
  long clusterId=1;
  final AmbariManagementController mockAmbariManagementController=easyMockSupport.createNiceMock(AmbariManagementController.class);
  final AlertDefinitionDAO mockAlertDefinitionDAO=easyMockSupport.createNiceMock(AlertDefinitionDAO.class);
  final Clusters mockClusters=easyMockSupport.createStrictMock(Clusters.class);
  final Cluster mockClusterExpected=easyMockSupport.createNiceMock(Cluster.class);
  final AlertDefinitionEntity webAlert=easyMockSupport.createNiceMock(AlertDefinitionEntity.class);
  final AlertDefinitionEntity webAlertWithConnectionTimeout=easyMockSupport.createNiceMock(AlertDefinitionEntity.class);
  final AlertDefinitionEntity metricAlert=easyMockSupport.createNiceMock(AlertDefinitionEntity.class);
  final AlertDefinitionEntity portAlert=easyMockSupport.createNiceMock(AlertDefinitionEntity.class);
  List<AlertDefinitionEntity> alertDefinitionList=new ArrayList<>();
  alertDefinitionList.add(webAlert);
  alertDefinitionList.add(webAlertWithConnectionTimeout);
  alertDefinitionList.add(metricAlert);
  alertDefinitionList.add(portAlert);
  final Injector mockInjector=Guice.createInjector(new AbstractModule(){
    @Override protected void configure(){
      bind(AmbariManagementController.class).toInstance(mockAmbariManagementController);
      bind(Clusters.class).toInstance(mockClusters);
      bind(EntityManager.class).toInstance(entityManager);
      bind(AlertDefinitionDAO.class).toInstance(mockAlertDefinitionDAO);
      bind(DBAccessor.class).toInstance(createNiceMock(DBAccessor.class));
      bind(OsFamily.class).toInstance(createNiceMock(OsFamily.class));
    }
  }
);
  expect(mockAmbariManagementController.getClusters()).andReturn(mockClusters).once();
  expect(mockClusters.getClusters()).andReturn(new HashMap<String,Cluster>(){
{
      put("normal",mockClusterExpected);
    }
  }
).atLeastOnce();
  expect(mockClusterExpected.getClusterId()).andReturn(clusterId).anyTimes();
  expect(webAlert.getSourceType()).andReturn(SourceType.WEB).once();
  expect(webAlert.getSource()).andReturn("{\"uri\": {\n" + "            \"http\": \"{{hostname}}:{{application-properties/atlas.server.http.port}}\",\n" + "            \"https\": \"{{hostname}}:{{application-properties/atlas.server.https.port}}\" } }").once();
  expect(metricAlert.getSourceType()).andReturn(SourceType.METRIC).once();
  expect(metricAlert.getSource()).andReturn("{\"uri\": {\n" + "            \"http\": \"{{hostname}}:{{application-properties/atlas.server.http.port}}\",\n" + "            \"https\": \"{{hostname}}:{{application-properties/atlas.server.https.port}}\" } }").once();
  expect(webAlertWithConnectionTimeout.getSourceType()).andReturn(SourceType.WEB).once();
  expect(webAlertWithConnectionTimeout.getSource()).andReturn("{\"uri\":{\"" + "http\":\"{{hostname}}:{{application-properties/atlas.server.http.port}}\"," + "\"https\":\"{{hostname}}:{{application-properties/atlas.server.https.port}}\","+ "\"connection_timeout\":5.0}}").once();
  expect(portAlert.getSourceType()).andReturn(SourceType.PORT).anyTimes();
  expect(portAlert.getSource()).andReturn("{\"uri\": {\n" + "            \"http\": \"{{hostname}}:{{application-properties/atlas.server.http.port}}\",\n" + "            \"https\": \"{{hostname}}:{{application-properties/atlas.server.https.port}}\" } }").anyTimes();
  expect(mockAlertDefinitionDAO.findAll(clusterId)).andReturn(alertDefinitionList);
  expect(mockAlertDefinitionDAO.merge(anyObject(AlertDefinitionEntity.class))).andReturn(anyObject(AlertDefinitionEntity.class)).times(2);
  webAlert.setSource("{\"uri\":{\"http\":\"{{hostname}}:{{application-properties/atlas.server.http.port}}\",\"https\":\"{{hostname}}:{{application-properties/atlas.server.https.port}}\",\"connection_timeout\":5.0}}");
  expectLastCall().once();
  metricAlert.setSource("{\"uri\":{\"http\":\"{{hostname}}:{{application-properties/atlas.server.http.port}}\",\"https\":\"{{hostname}}:{{application-properties/atlas.server.https.port}}\",\"connection_timeout\":5.0}}");
  expectLastCall().once();
  easyMockSupport.replayAll();
  mockInjector.getInstance(UpgradeCatalog240.class).addConnectionTimeoutParamForWebAndMetricAlerts();
  easyMockSupport.verifyAll();
}
