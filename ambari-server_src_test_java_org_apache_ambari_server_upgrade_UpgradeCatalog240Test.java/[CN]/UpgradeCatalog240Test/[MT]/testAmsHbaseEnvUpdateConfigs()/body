{
  Map<String,String> oldPropertiesAmsHbaseEnv=new HashMap<String,String>(){
{
      put("content","some_content");
    }
  }
;
  Map<String,String> newPropertiesAmsHbaseEnv=new HashMap<String,String>(){
{
      put("content","some_content" + "\n # Explicitly Setting HBASE_HOME for AMS HBase so that there is no conflict\n" + "export HBASE_HOME={{ams_hbase_home_dir}}\n");
    }
  }
;
  EasyMockSupport easyMockSupport=new EasyMockSupport();
  Clusters clusters=easyMockSupport.createNiceMock(Clusters.class);
  final Cluster cluster=easyMockSupport.createNiceMock(Cluster.class);
  Config mockAmsHbaseEnv=easyMockSupport.createNiceMock(Config.class);
  expect(clusters.getClusters()).andReturn(new HashMap<String,Cluster>(){
{
      put("normal",cluster);
    }
  }
).once();
  expect(cluster.getDesiredConfigByType("ams-hbase-env")).andReturn(mockAmsHbaseEnv).atLeastOnce();
  expect(mockAmsHbaseEnv.getProperties()).andReturn(oldPropertiesAmsHbaseEnv).anyTimes();
  Injector injector=easyMockSupport.createNiceMock(Injector.class);
  expect(injector.getInstance(Gson.class)).andReturn(null).anyTimes();
  expect(injector.getInstance(MaintenanceStateHelper.class)).andReturn(null).anyTimes();
  expect(injector.getInstance(KerberosHelper.class)).andReturn(createNiceMock(KerberosHelper.class)).anyTimes();
  replay(injector,clusters,mockAmsHbaseEnv,cluster);
  AmbariManagementControllerImpl controller=createMockBuilder(AmbariManagementControllerImpl.class).addMockedMethod("createConfiguration").addMockedMethod("getClusters",new Class[]{}).addMockedMethod("createConfig").withConstructor(createNiceMock(ActionManager.class),clusters,injector).createNiceMock();
  Injector injector2=easyMockSupport.createNiceMock(Injector.class);
  Capture<Map> propertiesCapture=EasyMock.newCapture();
  expect(injector2.getInstance(AmbariManagementController.class)).andReturn(controller).anyTimes();
  expect(controller.getClusters()).andReturn(clusters).anyTimes();
  expect(controller.createConfig(anyObject(Cluster.class),anyString(),capture(propertiesCapture),anyString(),anyObject(Map.class))).andReturn(createNiceMock(Config.class)).once();
  replay(controller,injector2);
  new UpgradeCatalog240(injector2).updateAMSConfigs();
  easyMockSupport.verifyAll();
  Map<String,String> updatedProperties=propertiesCapture.getValue();
  assertTrue(Maps.difference(newPropertiesAmsHbaseEnv,updatedProperties).areEqual());
}
