{
  final RequestScheduleDAO requestScheduleDAO=createMock(RequestScheduleDAO.class);
  final Users users=createMock(Users.class);
  RequestScheduleEntity requestScheduleEntity=new RequestScheduleEntity();
  requestScheduleEntity.setCreateUser("createdUser");
  requestScheduleEntity.setClusterId(1L);
  expect(requestScheduleDAO.findAll()).andReturn(Collections.singletonList(requestScheduleEntity)).once();
  expect(users.getUserIfUnique("createdUser")).andReturn(null).once();
  final Injector injector=Guice.createInjector(new AbstractModule(){
    @Override protected void configure(){
      bind(RequestScheduleDAO.class).toInstance(requestScheduleDAO);
      bind(Users.class).toInstance(users);
      bind(PasswordEncoder.class).toInstance(createMock(PasswordEncoder.class));
      bind(DBAccessor.class).toInstance(createMock(DBAccessor.class));
      bind(OsFamily.class).toInstance(createNiceMock(OsFamily.class));
      bind(EntityManager.class).toInstance(entityManager);
    }
  }
);
  UpgradeCatalog240 upgradeCatalog240=new UpgradeCatalog240(injector);
  replay(requestScheduleDAO,users);
  upgradeCatalog240.updateRequestScheduleEntityUserIds();
  verify(requestScheduleDAO,users);
  assertEquals(null,requestScheduleEntity.getAuthenticatedUserId());
}
