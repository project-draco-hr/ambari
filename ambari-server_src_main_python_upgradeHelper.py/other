'\nLicensed to the Apache Software Foundation (ASF) under one\nor more contributor license agreements.  See the NOTICE file\ndistributed with this work for additional information\nregarding copyright ownership.  The ASF licenses this file\nto you under the Apache License, Version 2.0 (the\n"License"); you may not use this file except in compliance\nwith the License.  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n'
'\nUpgrade catalog file format description:\n\n\nFormat version 1.0\n\nGlobal section description:\n  STACKNAME - name of stack, for example HDP\n  OLDVERSION - version of stack from which upgrade should be done, used by fromStack script argument\n  NEWVERSION - version of stack to which upgrade should be done, used by toStack script argument\n\nSub-section options:\n  config-types - contains global per-config settings\n    merged-copy - would merge latest server properties with properties defined in "properties" section,\n                  without this option server properties would be rewritten by properties defined in "properties" section\n    required-services - properties from json catalog would be processed only if desired services are present on the cluster\n                        property level definition will always override catalog level definition.\n\nSub-section properties - Contains property definition\nSub-section property-mapping(optional) - contains mapping of property names in case, if some property changed their name in NEWVERSION\n\nExample:\n\n{\n  "version": "1.0",\n  "stacks": [\n    {\n      "name": "STACKNAME",\n      "old-version": "OLDVERSION",\n      "target-version": "NEWVERSION",\n      "options": {\n        "config-types": {\n          "CONFIGTYPE1": {\n            "merged-copy": "yes",\n            "required-services": ["HDFS"]\n          }\n        }\n      },\n      "properties": {\n        "CONFIGTYPE1": {\n          "some_property": "some property value",\n          "some_second_property: {\n             "remove": "yes"\n          },\n          "template_property": {\n           "value": "{TEMPLATE_TAG}",\n           "template": "yes",\n           "required-services": ["HDFS", "YARN"]\n          }\n        }\n      },\n      "property-mapping": {\n        "old-property-name": "new-property-name", (short form, equal to "old-property-name": { "map-to": "new-property-name" })\n        "old-property1-name": {    (usually key is an name of the property which need to be mapped, but in case of same\n                                     property should be set to unique name and "map-from" option used instead)\n          "map-from": "old property name", (optional, define property name which should be mapped)\n          "map-to": "new_property1_name", (optional, new property name. If not set, would be used old property name)\n          "from-catalog": "test",        (optional, require "to-catalog. Source of old-property1-name)\n          "to-catalog": "test",          (optional, require "from-catalog. Target of new_property1_name)\n          "default": "default value",    (optional, if set and old property not exists, new one would be created with default value)\n          "template": "yes",             (optional, template parsing for default option)\n          "required-services": ["YARN"]  (optional, process entry if services in the list existed on the cluster\n      }\n     }\n    }\n  ]\n}\n\nMore examples available in ambari-server/src/main/resources/upgrade/catalog/\n'
import getpass
import optparse
from pprint import pprint
import re
import sys
import os.path
import logging
import time
import base64
from urllib2 import HTTPPasswordMgrWithDefaultRealm, HTTPBasicAuthHandler, Request, build_opener, URLError, HTTPError
try:
    import ambari_simplejson as json
except ImportError:
    import json
if (__name__ == '__main__'):
    try:
        main()
    except (KeyboardInterrupt, EOFError):
        print '\nAborting ... Keyboard Interrupt.'
        sys.exit(1)
    except FatalException as e:
        if (e.reason is not None):
            error = 'Exiting with exit code {0}. Reason: {1}'.format(e.code, e.reason)
            if (Options.logger is not None):
                Options.logger.error(error)
            sys.exit(e.code)
