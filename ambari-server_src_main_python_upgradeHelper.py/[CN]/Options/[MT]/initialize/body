@classmethod
def initialize(cls):
    cls.ROOT_URL = ('%s://%s:%s/api/v1' % (cls.API_PROTOCOL, cls.HOST, cls.API_PORT))
    cls.CLUSTER_URL = (cls.ROOT_URL + ('/clusters/%s' % cls.CLUSTER_NAME))
    cls.COMPONENTS_URL = (cls.CLUSTER_URL + '/components?fields=ServiceComponentInfo/total_count')
    cls.COMPONENTS_FORMAT = (cls.CLUSTER_URL + '/components/{0}')
    cls.TEZ_VIEW_URL = (cls.ROOT_URL + '/views/TEZ')
    cls.STACKS_URL = (cls.ROOT_URL + '/stacks')
    cls.STACKS_VERSIONS_URL = (cls.STACKS_URL + '/{0}/versions')
    cls.STACK_ADVISOR_URL = (cls.STACKS_VERSIONS_URL + '/{1}/recommendations')
    cls.AMBARI_SERVER_URL = (cls.ROOT_URL + '/services/AMBARI/components/AMBARI_SERVER')
    cls.AMBARI_AGENTS_URL = (cls.ROOT_URL + '/services/AMBARI/components/AMBARI_AGENT')
    if ((cls.CLUSTER_NAME is not None) and (cls.HOST is not None)):
        cls.SERVICES = set(map((lambda x: x.upper()), get_cluster_services()))
    cls.ambari_server = AmbariServer()
    if (not cls.isPropertyAttributesSupported()):
        cls.logger.warning('Property attributes not supported by current Ambari version')
