def curl(url, tokens=None, headers=None, request_type='GET', data=None, parse=False, simulate=None, validate=False, validate_expect_body=False):
    simulate_only = ((Options.CURL_PRINT_ONLY is not None) or ((simulate is not None) and (simulate is True)))
    print_url = ((Options.CURL_PRINT_ONLY is not None) and (simulate is not None))
    curl_path = '/usr/bin/curl'
    curl_list = [curl_path]
    curl_list.append('-X')
    curl_list.append(request_type)
    if (tokens is not None):
        curl_list.append('-u')
        curl_list.append(('%s:%s' % (tokens['user'], tokens['pass'])))
    elif (Options.API_TOKENS is not None):
        curl_list.append('-u')
        curl_list.append(('%s:%s' % (Options.API_TOKENS['user'], Options.API_TOKENS['pass'])))
    if (request_type in Options.POST_REQUESTS):
        curl_list.append(url)
    if ((headers is None) and (Options.HEADERS is not None)):
        headers = Options.HEADERS
    if (headers is not None):
        for header in headers:
            curl_list.append('-H')
            curl_list.append(('%s: %s' % (header, headers[header])))
    if ((data is not None) and (request_type in Options.POST_REQUESTS)):
        curl_list.append('--data')
        curl_list.append(json.dumps(data))
    if (request_type in Options.GET_REQUESTS):
        curl_list.append(url)
    if print_url:
        Options.logger.info(' '.join(curl_list))
    if (not simulate_only):
        osStat = subprocess.Popen(curl_list, stderr=subprocess.PIPE, stdout=subprocess.PIPE)
        (out, err) = osStat.communicate()
        if (0 != osStat.returncode):
            error = ((('curl call failed. out: ' + out) + ' err: ') + err)
            Options.logger.error(error)
            raise FatalException(osStat.returncode, error)
    else:
        if (not print_url):
            Options.logger.info(' '.join(curl_list))
        out = '{}'
    if (validate and (not simulate_only)):
        (retcode, errdata) = validate_response(out, validate_expect_body)
        if (not (retcode == 0)):
            raise FatalException(retcode, errdata)
    if parse:
        return json.loads(out)
    else:
        return out
