def curl(url, tokens=None, headers=None, request_type='GET', data=None, parse=False, simulate=None, validate=False, soft_validation=False):
    _headers = {}
    handler_chain = []
    post_req = ['POST', 'PUT']
    get_req = ['GET', 'DELETE']
    simulate_only = ((Options.CURL_PRINT_ONLY is not None) or ((simulate is not None) and (simulate is True)))
    print_url = ((Options.CURL_PRINT_ONLY is not None) and (simulate is not None))
    if (request_type not in (post_req + get_req)):
        raise IOError(('Wrong request type "%s" passed' % request_type))
    if ((data is not None) and isinstance(data, dict)):
        data = json.dumps(data)
    if (tokens is not None):
        _headers.update(generate_auth_header(tokens['user'], tokens['pass']))
    elif (Options.API_TOKENS is not None):
        _headers.update(generate_auth_header(Options.API_TOKENS['user'], Options.API_TOKENS['pass']))
    if ((request_type in post_req) and (data is not None)):
        _headers['Content-Length'] = len(data)
    if (headers is not None):
        _headers.update(headers)
    if (Options.HEADERS is not None):
        _headers.update(Options.HEADERS)
    director = build_opener(*handler_chain)
    if (request_type in post_req):
        _data = bytes(data)
        req = Request(url, headers=_headers, data=_data)
    else:
        req = Request(url, headers=_headers)
    req.get_method = (lambda : request_type)
    if print_url:
        Options.logger.info(url)
    code = 200
    if (not simulate_only):
        try:
            resp = director.open(req)
            out = resp.read()
            if isinstance(out, bytes):
                out = out.decode('utf-8')
            code = resp.code
        except URLError as e:
            Options.logger.error(str(e))
            if isinstance(e, HTTPError):
                raise e
            else:
                raise FatalException((-1), str(e))
    else:
        if (not print_url):
            Options.logger.info(url)
        out = '{}'
    if (validate and (not simulate_only) and ((code > 299) or (code < 200))):
        if soft_validation:
            Options.logger.warning('Response validation failed, please check previous action result manually.')
        else:
            raise FatalException(code, 'Response validation failed, please check previous action result manually.')
    if parse:
        return json.loads(out)
    else:
        return out
