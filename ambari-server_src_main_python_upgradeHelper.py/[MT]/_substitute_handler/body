def _substitute_handler(upgrade_catalog, tokens, value):
    '\n  Substitute handler\n  :param upgrade_catalog: UpgradeCatalog\n  :param tokens: list\n  :param value: str\n  :rtype str\n  '
    for token in tokens:
        if (token == '{JOBHISTORY_HOST}'):
            value = value.replace(token, get_jh_host(upgrade_catalog))
        elif (token == '{RESOURCEMANAGER_HOST}'):
            value = value.replace(token, get_jt_host(upgrade_catalog))
        elif (token == '{ZOOKEEPER_QUORUM}'):
            value = value.replace(token, get_zookeeper_quorum())
        elif (token == '{HBASE_COPROCESS_MASTER_CLASSES}'):
            value = value.replace(token, get_hbase_coprocessmaster_classes())
        elif (token == '{HBASE_COPROCESSOR_REGION_CLASSES}'):
            value = value.replace(token, get_hbase_coprocessor_region_classes())
        elif (token == '{HIVE_SECURITY_AUTHORIZATION}'):
            value = value.replace(token, get_hive_security_authorization_setting())
        elif (token == '{TEZ_HISTORY_URL_BASE}'):
            value = value.replace(token, get_tez_history_url_base())
        elif (token == '{RANGER_JDBC_DRIVER}'):
            value = value.replace(token, get_ranger_service_details()['RANGER_JDBC_DRIVER'])
        elif (token == '{RANGER_JDBC_URL}'):
            value = value.replace(token, get_ranger_service_details()['RANGER_JDBC_URL'])
        elif (token == '{RANGER_AUDIT_JDBC_URL}'):
            value = value.replace(token, get_ranger_service_details()['RANGER_AUDIT_JDBC_URL'])
        elif (token == '{RANGER_HOST}'):
            value = value.replace(token, get_ranger_host())
        elif (token == '{RANGER_JDBC_DIALECT}'):
            value = value.replace(token, get_ranger_service_details()['RANGER_JDBC_DIALECT'])
        elif (token == '{KAFKA_LISTENERS}'):
            value = value.replace(token, get_kafka_listeners())
        elif (token == '{RANGER_PLUGIN_HBASE_POLICY_CACHE_DIR}'):
            value = value.replace(token, '/etc/ranger/{0}{1}/policycache'.format(Options.CLUSTER_NAME, '_hbase'))
        elif (token == '{RANGER_PLUGIN_HDFS_POLICY_CACHE_DIR}'):
            value = value.replace(token, '/etc/ranger/{0}{1}/policycache'.format(Options.CLUSTER_NAME, '_hadoop'))
        elif (token == '{RANGER_PLUGIN_HIVE_POLICY_CACHE_DIR}'):
            value = value.replace(token, '/etc/ranger/{0}{1}/policycache'.format(Options.CLUSTER_NAME, '_hive'))
        elif (token == '{RANGER_PLUGIN_KNOX_POLICY_CACHE_DIR}'):
            value = value.replace(token, '/etc/ranger/{0}{1}/policycache'.format(Options.CLUSTER_NAME, '_knox'))
        elif (token == '{RANGER_PLUGIN_STORM_POLICY_CACHE_DIR}'):
            value = value.replace(token, '/etc/ranger/{0}{1}/policycache'.format(Options.CLUSTER_NAME, '_storm'))
        elif (token == '{RANGER_HBASE_KEYSTORE_CREDENTIAL_FILE}'):
            value = value.replace(token, 'jceks://file/etc/ranger/{0}{1}/cred.jceks'.format(Options.CLUSTER_NAME, '_hbase'))
        elif (token == '{RANGER_HDFS_KEYSTORE_CREDENTIAL_FILE}'):
            value = value.replace(token, 'jceks://file/etc/ranger/{0}{1}/cred.jceks'.format(Options.CLUSTER_NAME, '_hadoop'))
        elif (token == '{RANGER_HIVE_KEYSTORE_CREDENTIAL_FILE}'):
            value = value.replace(token, 'jceks://file/etc/ranger/{0}{1}/cred.jceks'.format(Options.CLUSTER_NAME, '_hive'))
        elif (token == '{RANGER_KNOX_KEYSTORE_CREDENTIAL_FILE}'):
            value = value.replace(token, 'jceks://file/etc/ranger/{0}{1}/cred.jceks'.format(Options.CLUSTER_NAME, '_knox'))
        elif (token == '{RANGER_STORM_KEYSTORE_CREDENTIAL_FILE}'):
            value = value.replace(token, 'jceks://file/etc/ranger/{0}{1}/cred.jceks'.format(Options.CLUSTER_NAME, '_storm'))
        elif (token == '{XAAUDIT_HDFS_DESTINATION_DIRECTORY}'):
            value = value.replace(token, get_ranger_xaaudit_hdfs_destination_directory())
        elif (token == '{HBASE_RANGER_REPO_NAME}'):
            value = value.replace(token, (Options.CLUSTER_NAME + '_hbase'))
        elif (token == '{HDFS_RANGER_REPO_NAME}'):
            value = value.replace(token, (Options.CLUSTER_NAME + '_hadoop'))
        elif (token == '{HIVE_RANGER_REPO_NAME}'):
            value = value.replace(token, (Options.CLUSTER_NAME + '_hive'))
        elif (token == '{KNOX_RANGER_REPO_NAME}'):
            value = value.replace(token, (Options.CLUSTER_NAME + '_knox'))
        elif (token == '{STORM_RANGER_REPO_NAME}'):
            value = value.replace(token, (Options.CLUSTER_NAME + '_storm'))
        elif (token == '{POLICYMGR_MGR_URL}'):
            value = value.replace(token, get_ranger_policymgr_external_url())
        elif (token == '{HDFS_JDBC_DRIVER}'):
            value = value.replace(token, get_jdbc_driver())
        elif (token == '{HBASE_JDBC_DRIVER}'):
            value = value.replace(token, get_jdbc_driver())
        elif (token == '{HIVE_JDBC_DRIVER}'):
            value = value.replace(token, get_jdbc_driver())
        elif (token == '{KNOX_JDBC_DRIVER}'):
            value = value.replace(token, get_jdbc_driver())
        elif (token == '{STORM_JDBC_DRIVER}'):
            value = value.replace(token, get_jdbc_driver())
        elif (token == '{HDFS_AUDIT_JDBC_URL}'):
            value = value.replace(token, get_audit_jdbc_url())
        elif (token == '{HBASE_AUDIT_JDBC_URL}'):
            value = value.replace(token, get_audit_jdbc_url())
        elif (token == '{HIVE_AUDIT_JDBC_URL}'):
            value = value.replace(token, get_audit_jdbc_url())
        elif (token == '{KNOX_AUDIT_JDBC_URL}'):
            value = value.replace(token, get_audit_jdbc_url())
        elif (token == '{STORM_AUDIT_JDBC_URL}'):
            value = value.replace(token, get_audit_jdbc_url())
        elif (token == '{AUDIT_DB_PASSWD}'):
            value = value.replace(token, get_audit_db_passwd())
        elif (token == '{AUDIT_TO_DB_HDFS}'):
            value = value.replace(token, get_audit_to_db_enabled('ranger-hdfs-plugin-properties'))
        elif (token == '{AUDIT_TO_DB_HBASE}'):
            value = value.replace(token, get_audit_to_db_enabled('ranger-hbase-plugin-properties'))
        elif (token == '{AUDIT_TO_DB_HIVE}'):
            value = value.replace(token, get_audit_to_db_enabled('ranger-hive-plugin-properties'))
        elif (token == '{AUDIT_TO_DB_KNOX}'):
            value = value.replace(token, get_audit_to_db_enabled('ranger-knox-plugin-properties'))
        elif (token == '{AUDIT_TO_DB_STORM}'):
            value = value.replace(token, get_audit_to_db_enabled('ranger-storm-plugin-properties'))
        elif (token == '{AUDIT_TO_HDFS_HDFS}'):
            value = value.replace(token, get_audit_to_hdfs_enabled('ranger-hdfs-plugin-properties'))
        elif (token == '{AUDIT_TO_HDFS_HIVE}'):
            value = value.replace(token, get_audit_to_hdfs_enabled('ranger-hive-plugin-properties'))
        elif (token == '{AUDIT_TO_HDFS_HBASE}'):
            value = value.replace(token, get_audit_to_hdfs_enabled('ranger-hbase-plugin-properties'))
        elif (token == '{AUDIT_TO_HDFS_KNOX}'):
            value = value.replace(token, get_audit_to_hdfs_enabled('ranger-knox-plugin-properties'))
        elif (token == '{AUDIT_TO_HDFS_STORM}'):
            value = value.replace(token, get_audit_to_hdfs_enabled('ranger-storm-plugin-properties'))
        elif (token == '{AUDIT_HDFS_FILESPOOL_DIR_HDFS}'):
            value = value.replace(token, get_hdfs_batch_filespool_dir('ranger-hdfs-plugin-properties', 'hdfs'))
        elif (token == '{AUDIT_HDFS_FILESPOOL_DIR_HIVE}'):
            value = value.replace(token, get_hdfs_batch_filespool_dir('ranger-hive-plugin-properties', 'hive'))
        elif (token == '{AUDIT_HDFS_FILESPOOL_DIR_HBASE}'):
            value = value.replace(token, get_hdfs_batch_filespool_dir('ranger-hbase-plugin-properties', 'hbase'))
        elif (token == '{AUDIT_HDFS_FILESPOOL_DIR_KNOX}'):
            value = value.replace(token, get_hdfs_batch_filespool_dir('ranger-knox-plugin-properties', 'knox'))
        elif (token == '{AUDIT_HDFS_FILESPOOL_DIR_STORM}'):
            value = value.replace(token, get_hdfs_batch_filespool_dir('ranger-storm-plugin-properties', 'storm'))
    return value
