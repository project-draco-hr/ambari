def configuration_item_diff(collection_name, catalog, actual_properties_list):
    '\n  Merge catalog item with actual config item on the server\n  Diff item response:\n   {\n     "property" : name,\n     "catalog_item": value,\n     "catalog_value": value,\n     "actual_value": value\n   }\n  :param collection_name:\n  :param catalog:\n  :return:\n  '
    verified_catalog = []
    catalog_properties = catalog.get_properties(collection_name)
    actual_properties = None
    if (collection_name in actual_properties_list):
        actual_properties = actual_properties_list[collection_name]
    if (actual_properties is None):
        verified_catalog = map((lambda x: {'property': x, 'catalog_item': catalog_properties[x], 'catalog_value': catalog_properties[x][CatConst.PROPERTY_VALUE_TAG], 'actual_value': None, }), catalog_properties.keys())
    else:
        verified_catalog = map((lambda x: {'property': x, 'catalog_item': (catalog_properties[x] if (x in catalog_properties) else None), 'catalog_value': (catalog_properties[x][CatConst.PROPERTY_VALUE_TAG] if (x in catalog_properties) else None), 'actual_value': actual_properties[x], }), actual_properties.keys())
        verified_catalog_catalog = map((lambda x: {'property': x, 'catalog_item': catalog_properties[x], 'catalog_value': (catalog_properties[x][CatConst.PROPERTY_VALUE_TAG] if (CatConst.PROPERTY_VALUE_TAG in catalog_properties[x]) else None), 'actual_value': (actual_properties[x] if (x in actual_properties) else None), }), catalog_properties.keys())
        verified_catalog += filter((lambda x: (x['property'] not in actual_properties)), verified_catalog_catalog)
    return verified_catalog
