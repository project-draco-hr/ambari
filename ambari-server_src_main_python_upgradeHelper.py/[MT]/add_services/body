def add_services():
    SERVICE_URL_FORMAT = (Options.CLUSTER_URL + '/services/{0}')
    COMPONENT_URL_FORMAT = (SERVICE_URL_FORMAT + '/components/{1}')
    HOST_COMPONENT_URL_FORMAT = (Options.CLUSTER_URL + '/hosts/{0}/host_components/{1}')
    service_comp = {'YARN': ['NODEMANAGER', 'RESOURCEMANAGER', 'YARN_CLIENT'], 'MAPREDUCE2': ['HISTORYSERVER', 'MAPREDUCE2_CLIENT'], }
    new_old_host_map = {'NODEMANAGER': 'TASKTRACKER', 'HISTORYSERVER': 'HISTORYSERVER', 'RESOURCEMANAGER': 'JOBTRACKER', 'YARN_CLIENT': 'MAPREDUCE_CLIENT', 'MAPREDUCE2_CLIENT': 'MAPREDUCE_CLIENT', }
    stack_name = get_cluster_stackname()
    stack_has_ats = has_component_in_stack_def(stack_name, 'YARN', 'APP_TIMELINE_SERVER')
    if stack_has_ats:
        service_comp['YARN'].append('APP_TIMELINE_SERVER')
        new_old_host_map['APP_TIMELINE_SERVER'] = 'JOBTRACKER'
    hostmapping = read_mapping()
    for service in service_comp.keys():
        curl(SERVICE_URL_FORMAT.format(service), validate=True, validate_expect_body=False, request_type='POST')
        for component in service_comp[service]:
            curl(COMPONENT_URL_FORMAT.format(service, component), validate=True, validate_expect_body=False, request_type='POST')
            for host in hostmapping[new_old_host_map[component]]:
                curl(HOST_COMPONENT_URL_FORMAT.format(host, component), validate=True, validate_expect_body=False, request_type='POST')
