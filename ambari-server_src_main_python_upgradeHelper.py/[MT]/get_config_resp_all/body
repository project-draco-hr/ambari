def get_config_resp_all():
    desired_configs = {}
    config_all_properties_url = (Options.CLUSTER_URL + '/configurations?fields=properties')
    desired_configs_resp = curl((Options.CLUSTER_URL + '?fields=Clusters/desired_configs'), validate=True, parse=True)
    if ('Clusters' in desired_configs_resp):
        if ('desired_configs' in desired_configs_resp['Clusters']):
            desired_configs_resp = desired_configs_resp['Clusters']['desired_configs']
        else:
            return None
    else:
        return None
    if Options.isPropertyAttributesSupported():
        config_all_properties_url += ',properties_attributes'
        all_options = curl(config_all_properties_url, validate=True, parse=True)
    else:
        all_options = build_all_options(desired_configs_resp)
    if (CatConst.ITEMS_TAG in all_options):
        all_options = all_options[CatConst.ITEMS_TAG]
    else:
        return None
    all_options = filter((lambda x: ((x[CatConst.TYPE_TAG] in desired_configs_resp) and (x['tag'] == desired_configs_resp[x[CatConst.TYPE_TAG]]['tag']))), all_options)
    for item in all_options:
        dc_item = {}
        if (CatConst.STACK_PROPERTIES in item):
            dc_item[CatConst.STACK_PROPERTIES] = item[CatConst.STACK_PROPERTIES]
        else:
            dc_item[CatConst.STACK_PROPERTIES] = {}
        if (CatConst.STACK_PROPERTIES_ATTRIBUTES in item):
            dc_item[CatConst.STACK_PROPERTIES_ATTRIBUTES] = item[CatConst.STACK_PROPERTIES_ATTRIBUTES]
        if ('tag' in item):
            dc_item['tag'] = item['tag']
        if (dc_item != {}):
            desired_configs[item[CatConst.TYPE_TAG]] = dc_item
    return desired_configs
