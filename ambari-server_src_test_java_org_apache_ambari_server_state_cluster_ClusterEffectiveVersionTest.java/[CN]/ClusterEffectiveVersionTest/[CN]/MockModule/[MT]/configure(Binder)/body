{
  binder.bind(Clusters.class).toInstance(EasyMock.createNiceMock(Clusters.class));
  binder.bind(OsFamily.class).toInstance(EasyMock.createNiceMock(OsFamily.class));
  binder.bind(DBAccessor.class).toInstance(EasyMock.createNiceMock(DBAccessor.class));
  binder.bind(EntityManager.class).toInstance(EasyMock.createNiceMock(EntityManager.class));
  binder.bind(ActionManager.class).toInstance(EasyMock.createNiceMock(ActionManager.class));
  binder.bind(HostRoleCommandDAO.class).toInstance(EasyMock.createNiceMock(HostRoleCommandDAO.class));
  binder.bind(AmbariManagementController.class).toInstance(EasyMock.createNiceMock(AmbariManagementController.class));
  binder.bind(ClusterController.class).toInstance(EasyMock.createNiceMock(ClusterController.class));
  binder.bind(StackManagerFactory.class).toInstance(EasyMock.createNiceMock(StackManagerFactory.class));
  binder.bind(SessionManager.class).toInstance(EasyMock.createNiceMock(SessionManager.class));
  binder.bind(RequestExecutionFactory.class).toInstance(EasyMock.createNiceMock(RequestExecutionFactory.class));
  binder.bind(ExecutionScheduler.class).toInstance(EasyMock.createNiceMock(ExecutionScheduler.class));
  binder.bind(RequestFactory.class).toInstance(EasyMock.createNiceMock(RequestFactory.class));
  binder.bind(StageFactory.class).toInstance(EasyMock.createNiceMock(StageFactory.class));
  binder.bind(RoleGraphFactory.class).toInstance(EasyMock.createNiceMock(RoleGraphFactoryImpl.class));
  binder.bind(AbstractRootServiceResponseFactory.class).toInstance(EasyMock.createNiceMock(AbstractRootServiceResponseFactory.class));
  binder.bind(ConfigFactory.class).toInstance(EasyMock.createNiceMock(ConfigFactory.class));
  binder.bind(ConfigGroupFactory.class).toInstance(EasyMock.createNiceMock(ConfigGroupFactory.class));
  binder.bind(ServiceFactory.class).toInstance(EasyMock.createNiceMock(ServiceFactory.class));
  binder.bind(ServiceComponentFactory.class).toInstance(EasyMock.createNiceMock(ServiceComponentFactory.class));
  binder.bind(ServiceComponentHostFactory.class).toInstance(EasyMock.createNiceMock(ServiceComponentHostFactory.class));
  binder.bind(PasswordEncoder.class).toInstance(EasyMock.createNiceMock(PasswordEncoder.class));
  binder.bind(KerberosHelper.class).toInstance(EasyMock.createNiceMock(KerberosHelper.class));
  binder.bind(Users.class).toInstance(EasyMock.createNiceMock(Users.class));
  binder.bind(AmbariEventPublisher.class).toInstance(createNiceMock(AmbariEventPublisher.class));
  binder.install(new FactoryModuleBuilder().implement(Cluster.class,ClusterImpl.class).build(ClusterFactory.class));
  try {
    AmbariMetaInfo ambariMetaInfo=EasyMock.createNiceMock(AmbariMetaInfo.class);
    EasyMock.expect(ambariMetaInfo.getServices(EasyMock.anyString(),EasyMock.anyString())).andReturn(new HashMap<String,ServiceInfo>()).anyTimes();
    EasyMock.replay(ambariMetaInfo);
    binder.bind(AmbariMetaInfo.class).toInstance(ambariMetaInfo);
  }
 catch (  Exception exception) {
    Assert.fail(exception.toString());
  }
  binder.bind(ClusterDAO.class).toInstance(createNiceMock(ClusterDAO.class));
}
