{
  resetAll();
  expectClusterEntityMocks();
  Cluster clusterSpy=Mockito.spy(m_cluster);
  UpgradeEntity upgradeEntity=createNiceMock(UpgradeEntity.class);
  EasyMock.expect(upgradeEntity.getUpgradeType()).andReturn(UpgradeType.NON_ROLLING).atLeastOnce();
  EasyMock.expect(upgradeEntity.getToVersion()).andReturn("2.3.0.0-1234").atLeastOnce();
  EasyMock.expect(upgradeEntity.getFromVersion()).andReturn("2.4.0.0-1234").anyTimes();
  EasyMock.expect(upgradeEntity.getDirection()).andReturn(Direction.DOWNGRADE).atLeastOnce();
  RepositoryVersionEntity repositoryVersionEntity=createNiceMock(RepositoryVersionEntity.class);
  EasyMock.expect(repositoryVersionEntity.getVersion()).andReturn("2.3.0.0-1234").atLeastOnce();
  ClusterVersionEntity clusterVersionUpgradingTo=createNiceMock(ClusterVersionEntity.class);
  EasyMock.expect(clusterVersionUpgradingTo.getRepositoryVersion()).andReturn(repositoryVersionEntity).atLeastOnce();
  List<ClusterVersionEntity> clusterVersionEntities=Lists.newArrayList(clusterVersionUpgradingTo);
  EasyMock.expect(m_clusterEntity.getClusterVersionEntities()).andReturn(clusterVersionEntities).atLeastOnce();
  replayAll();
  Mockito.doReturn(upgradeEntity).when(clusterSpy).getUpgradeInProgress();
  ClusterVersionEntity currentClusterVersion=new ClusterVersionEntity();
  Mockito.doReturn(currentClusterVersion).when(clusterSpy).getCurrentClusterVersion();
  ClusterVersionEntity effectiveVersion=clusterSpy.getEffectiveClusterVersion();
  Assert.assertEquals(clusterVersionUpgradingTo,effectiveVersion);
  verifyAll();
}
