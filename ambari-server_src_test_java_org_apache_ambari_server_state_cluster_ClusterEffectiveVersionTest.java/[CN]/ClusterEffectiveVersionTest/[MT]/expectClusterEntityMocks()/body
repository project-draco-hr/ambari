{
  ClusterDAO clusterDAO=m_injector.getInstance(ClusterDAO.class);
  StackEntity stackEntity=createNiceMock(StackEntity.class);
  EasyMock.expect(clusterDAO.findById(1L)).andReturn(m_clusterEntity).anyTimes();
  EasyMock.expect(stackEntity.getStackId()).andReturn(1L).anyTimes();
  EasyMock.expect(stackEntity.getStackName()).andReturn("HDP").anyTimes();
  EasyMock.expect(stackEntity.getStackVersion()).andReturn("2.3").anyTimes();
  EasyMock.expect(m_clusterEntity.getClusterId()).andReturn(1L).anyTimes();
  EasyMock.expect(m_clusterEntity.getClusterName()).andReturn("c1").anyTimes();
  EasyMock.expect(m_clusterEntity.getDesiredStack()).andReturn(stackEntity).anyTimes();
  EasyMock.expect(m_clusterEntity.getClusterServiceEntities()).andReturn(new ArrayList<ClusterServiceEntity>()).anyTimes();
  EasyMock.expect(m_clusterEntity.getClusterConfigEntities()).andReturn(new ArrayList<ClusterConfigEntity>()).anyTimes();
  EasyMock.expect(m_clusterEntity.getConfigGroupEntities()).andReturn(new ArrayList<ConfigGroupEntity>()).anyTimes();
  EasyMock.expect(m_clusterEntity.getRequestScheduleEntities()).andReturn(new ArrayList<RequestScheduleEntity>()).anyTimes();
}
