@patch.object(OSCheck, 'is_suse_family')
@patch.object(OSCheck, 'is_ubuntu_family')
@patch.object(OSCheck, 'is_redhat_family')
@patch.object(Script, 'get_config')
@patch('resource_management.libraries.providers.repository.File')
@patch('resource_management.libraries.script.Script.put_structured_out')
@patch.object(System, 'os_family', new='redhat')
def testUpdateRepo(self, structured_out_mock, file_mock, mock_config, is_redhat_mock, is_ubuntu_mock, is_suse_mock):
    is_suse_mock.return_value = False
    is_ubuntu_mock.return_value = False
    is_redhat_mock.return_value = True
    updateRepo = UpdateRepo()
    mock_config.return_value = {'configurations': {'cluster-env': {'repo_suse_rhel_template': 'REPO_SUSE_RHEL_TEST_TEMPLATE', 'repo_ubuntu_template': 'REPO_UBUNTU_TEMPLATE', }, }, 'hostLevelParams': {'repo_info': '{"repositories":[{"base_url":"TEST_BASE_URL","repo_name":"TEST_REPO_NAME","repo_id":"TEST_REPO_ID"}]}', }, }
    with Environment('/') as env:
        updateRepo.actionexecute(None)
    self.assertTrue(file_mock.called)
    self.assertEquals(file_mock.call_args[0][0], '/etc/yum.repos.d/TEST_REPO_NAME.repo')
    self.assertEquals(structured_out_mock.call_args[0][0], {'repo_update': {'message': 'Repository files successfully updated!', 'exit_code': 0, }, })
    file_mock.reset_mock()
    failed = False
    mock_config.return_value = {'configurations': {'cluster-env': {'repo_suse_rhel_template': 'REPO_SUSE_RHEL_TEST_TEMPLATE', 'repo_ubuntu_template': 'REPO_UBUNTU_TEMPLATE', }, }, 'hostLevelParams': {'repo_info': '{}', }, }
    try:
        with Environment('/') as env:
            updateRepo.actionexecute(None)
    except Exception as exception:
        failed = True
    self.assertFalse(file_mock.called)
    self.assertTrue(failed)
