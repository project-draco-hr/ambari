{
  parseCommandLine();
  ClientConfig config=new DefaultClientConfig();
  Client client=Client.create(config);
  WebResource service=client.resource(getBaseURI());
  String name=line.getOptionValue("name");
  boolean tree=line.hasOption("tree");
  if (name != null) {
    ClientResponse response=service.path("blueprints/" + name).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON).get(ClientResponse.class);
    if (response.getStatus() != 404 && response.getStatus() != 200) {
      System.err.println("Stack list command failed. Reason [Code: <" + response.getStatus() + ">, Message: <"+ response.getHeaders().getFirst("ErrorMessage")+ ">]");
      System.exit(-1);
    }
    if (response.getStatus() == 404) {
      System.exit(0);
    }
    Stack stack=response.getEntity(Stack.class);
    printStackInformation(service,stack,tree);
  }
 else {
    ClientResponse response=service.path("blueprints").accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON).get(ClientResponse.class);
    if (response.getStatus() != 200 && response.getStatus() != 204) {
      System.err.println("Stack list command failed. Reason [Code: <" + response.getStatus() + ">, Message: <"+ response.getHeaders().getFirst("ErrorMessage")+ ">]");
      System.exit(-1);
    }
    if (response.getStatus() == 204) {
      System.exit(0);
    }
    List<StackInformation> bpInfos=response.getEntity(new GenericType<List<StackInformation>>(){
    }
);
    for (    StackInformation bpInfo : bpInfos) {
      printStackInformation(service,bpInfo,tree);
    }
  }
}
