@patch('setup_ranger.setup_usersync')
@patch('os.path.exists')
def test_upgrade_23(self, os_path_exists_mock, setup_usersync_mock):
    config_file = (self.get_src_folder() + '/test/python/stacks/2.2/configs/ranger-usersync-upgrade.json')
    with open(config_file, 'r') as f:
        json_content = json.load(f)
    json_content['commandParams']['version'] = '2.3.0.0-1234'
    os_path_exists_mock.return_value = True
    mocks_dict = {}
    self.executeScript((self.COMMON_SERVICES_PACKAGE_DIR + '/scripts/ranger_usersync.py'), classname='RangerUsersync', command='restart', config_dict=json_content, stack_version=self.STACK_VERSION, target=RMFTestCase.TARGET_COMMON_SERVICES, call_mocks=[(0, None, ''), (0, None)], mocks_dict=mocks_dict)
    self.assertTrue(setup_usersync_mock.called)
    self.assertResourceCalled('Execute', ('/usr/bin/ranger-usersync-stop',), environment={'JAVA_HOME': u'/usr/jdk64/jdk1.7.0_67', }, sudo=True)
    self.assertResourceCalledIgnoreEarlier('Execute', ('ambari-python-wrap', '/usr/bin/hdp-select', 'set', 'ranger-usersync', '2.3.0.0-1234'), sudo=True)
    self.assertEquals(2, mocks_dict['call'].call_count)
    self.assertEquals(1, mocks_dict['checked_call'].call_count)
    self.assertEquals(('ambari-python-wrap', '/usr/bin/conf-select', 'set-conf-dir', '--package', 'ranger-usersync', '--stack-version', '2.3.0.0-1234', '--conf-version', '0'), mocks_dict['checked_call'].call_args_list[0][0][0])
    self.assertEquals(('ambari-python-wrap', '/usr/bin/conf-select', 'create-conf-dir', '--package', 'ranger-usersync', '--stack-version', '2.3.0.0-1234', '--conf-version', '0'), mocks_dict['call'].call_args_list[0][0][0])
