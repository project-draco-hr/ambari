def on_background_command_complete_callback(self, process_condensed_result, handle):
    logger.debug(('Start callback: %s' % process_condensed_result))
    logger.debug(('The handle is: %s' % handle))
    status = (self.COMPLETED_STATUS if (handle.exitCode == 0) else self.FAILED_STATUS)
    aborted_postfix = self.customServiceOrchestrator.command_canceled_reason(handle.command['taskId'])
    if aborted_postfix:
        status = self.FAILED_STATUS
        logger.debug(('Set status to: %s , reason = %s' % (status, aborted_postfix)))
    else:
        aborted_postfix = ''
    roleResult = self.commandStatuses.generate_report_template(handle.command)
    roleResult.update({'stdout': (process_condensed_result['stdout'] + aborted_postfix), 'stderr': (process_condensed_result['stderr'] + aborted_postfix), 'exitCode': process_condensed_result['exitcode'], 'structuredOut': (str(json.dumps(process_condensed_result['structuredOut'])) if ('structuredOut' in process_condensed_result) else ''), 'status': status, })
    self.commandStatuses.put_command_status(handle.command, roleResult)
