def execute_status_command(self, command):
    '\n    Executes commands of type STATUS_COMMAND\n    '
    try:
        cluster = command['clusterName']
        service = command['serviceName']
        component = command['componentName']
        configurations = command['configurations']
        if configurations.has_key('global'):
            globalConfig = configurations['global']
        else:
            globalConfig = {}
        livestatus = LiveStatus(cluster, service, component, globalConfig, self.config, self.configTags)
        component_extra = None
        component_status_result = self.customServiceOrchestrator.requestComponentStatus(command)
        component_security_status_result = self.customServiceOrchestrator.requestComponentSecurityState(command)
        if (component_status_result['exitcode'] == 0):
            component_status = LiveStatus.LIVE_STATUS
        else:
            component_status = LiveStatus.DEAD_STATUS
        if component_status_result.has_key('structuredOut'):
            component_extra = component_status_result['structuredOut']
        result = livestatus.build(forsed_component_status=component_status)
        result['securityState'] = component_security_status_result
        if ((component_extra is not None) and (len(component_extra) != 0)):
            if component_extra.has_key('alerts'):
                result['alerts'] = component_extra['alerts']
                del component_extra['alerts']
            result['extra'] = component_extra
        logger.debug(((((('Got live status for component ' + component) + ' of service ') + str(service)) + ' of cluster ') + str(cluster)))
        logger.debug(pprint.pformat(result))
        if (result is not None):
            self.commandStatuses.put_command_status(command, result)
    except Exception as err:
        traceback.print_exc()
        logger.warn(err)
    pass
