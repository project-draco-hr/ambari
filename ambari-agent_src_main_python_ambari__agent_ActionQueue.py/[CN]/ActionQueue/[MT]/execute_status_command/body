def execute_status_command(self, command):
    '\n    Executes commands of type STATUS_COMMAND\n    '
    try:
        cluster = command['clusterName']
        service = command['serviceName']
        component = command['componentName']
        configurations = command['configurations']
        if configurations.has_key('global'):
            globalConfig = configurations['global']
        else:
            globalConfig = {}
        command_format = self.determine_command_format_version(command)
        livestatus = LiveStatus(cluster, service, component, globalConfig, self.config)
        component_status = None
        if (command_format == self.COMMAND_FORMAT_V2):
            component_status = self.customServiceOrchestrator.requestComponentStatus(command)
        result = livestatus.build(forsed_component_status=component_status)
        logger.debug(((((('Got live status for component ' + component) + ' of service ') + str(service)) + ' of cluster ') + str(cluster)))
        logger.debug(pprint.pformat(result))
        if (result is not None):
            self.commandStatuses.put_command_status(command, result)
    except Exception as err:
        traceback.print_exc()
        logger.warn(err)
    pass
