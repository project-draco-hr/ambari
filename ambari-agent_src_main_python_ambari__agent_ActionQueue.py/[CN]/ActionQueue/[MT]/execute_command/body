def execute_command(self, command):
    '\n    Executes commands of type EXECUTION_COMMAND\n    '
    clusterName = command['clusterName']
    commandId = command['commandId']
    isCommandBackground = (command['commandType'] == self.BACKGROUND_EXECUTION_COMMAND)
    isAutoExecuteCommand = (command['commandType'] == self.AUTO_EXECUTION_COMMAND)
    message = 'Executing command with id = {commandId}, taskId = {taskId} for role = {role} of cluster {cluster}.'.format(commandId=str(commandId), taskId=str(command['taskId']), role=command['role'], cluster=clusterName)
    logger.info(message)
    taskId = command['taskId']
    in_progress_status = self.commandStatuses.generate_report_template(command)
    if (not isAutoExecuteCommand):
        in_progress_status.update({'tmpout': ((((self.tmpdir + os.sep) + 'output-') + str(taskId)) + '.txt'), 'tmperr': ((((self.tmpdir + os.sep) + 'errors-') + str(taskId)) + '.txt'), 'structuredOut': ((((self.tmpdir + os.sep) + 'structured-out-') + str(taskId)) + '.json'), 'status': self.IN_PROGRESS_STATUS, })
    else:
        in_progress_status.update({'tmpout': ((((self.tmpdir + os.sep) + 'auto_output-') + str(taskId)) + '.txt'), 'tmperr': ((((self.tmpdir + os.sep) + 'auto_errors-') + str(taskId)) + '.txt'), 'structuredOut': ((((self.tmpdir + os.sep) + 'auto_structured-out-') + str(taskId)) + '.json'), 'status': self.IN_PROGRESS_STATUS, })
    self.commandStatuses.put_command_status(command, in_progress_status)
    numAttempts = 0
    retryDuration = 0
    retryAble = False
    delay = 1
    log_command_output = True
    if (('commandParams' in command) and ('log_output' in command['commandParams']) and ('false' == command['commandParams']['log_output'])):
        log_command_output = False
    if ('commandParams' in command):
        if ('max_duration_for_retries' in command['commandParams']):
            retryDuration = int(command['commandParams']['max_duration_for_retries'])
        if ('command_retry_enabled' in command['commandParams']):
            retryAble = (command['commandParams']['command_retry_enabled'] == 'true')
    if isAutoExecuteCommand:
        retryAble = False
    logger.info('Command execution metadata - taskId = {taskId}, retry enabled = {retryAble}, max retry duration (sec) = {retryDuration}, log_output = {log_command_output}'.format(taskId=taskId, retryAble=retryAble, retryDuration=retryDuration, log_command_output=log_command_output))
    while (retryDuration >= 0):
        numAttempts += 1
        start = 0
        if retryAble:
            start = int(time.time())
        commandresult = self.customServiceOrchestrator.runCommand(command, in_progress_status['tmpout'], in_progress_status['tmperr'], override_output_files=(numAttempts == 1), retry=(numAttempts > 1))
        end = 1
        if retryAble:
            end = int(time.time())
        retryDuration -= (end - start)
        if isCommandBackground:
            logger.info('Command is background command, quit retrying. Exit code: {exitCode}, retryAble: {retryAble}, retryDuration (sec): {retryDuration}, last delay (sec): {delay}'.format(cid=taskId, exitCode=commandresult['exitcode'], retryAble=retryAble, retryDuration=retryDuration, delay=delay))
            return
        elif (commandresult['exitcode'] == 0):
            status = self.COMPLETED_STATUS
        else:
            status = self.FAILED_STATUS
            if ((commandresult['exitcode'] == (- signal.SIGTERM)) or (commandresult['exitcode'] == (- signal.SIGKILL))):
                logger.info('Command {cid} was canceled!'.format(cid=taskId))
                break
        if ((status != self.COMPLETED_STATUS) and retryAble and (retryDuration > 0)):
            delay = self.get_retry_delay(delay)
            if (delay > retryDuration):
                delay = retryDuration
            retryDuration -= delay
            commandresult['stderr'] += '\n\nCommand failed. Retrying command execution ...\n\n'
            logger.info('Retrying command id {cid} after a wait of {delay}'.format(cid=taskId, delay=delay))
            time.sleep(delay)
            continue
        else:
            logger.info('Quit retrying for command id {cid}. Status: {status}, retryAble: {retryAble}, retryDuration (sec): {retryDuration}, last delay (sec): {delay}'.format(cid=taskId, status=status, retryAble=retryAble, retryDuration=retryDuration, delay=delay))
            break
    commandresult['stdout'] += ('\n\nCommand completed successfully!\n' if (status == self.COMPLETED_STATUS) else (('\n\nCommand failed after ' + str(numAttempts)) + ' tries\n'))
    logger.info(('Command {cid} completed successfully!'.format(cid=taskId) if (status == self.COMPLETED_STATUS) else 'Command {cid} failed after {attempts} tries'.format(cid=taskId, attempts=numAttempts)))
    roleResult = self.commandStatuses.generate_report_template(command)
    roleResult.update({'stdout': commandresult['stdout'], 'stderr': commandresult['stderr'], 'exitCode': commandresult['exitcode'], 'status': status, })
    if (self.config.has_option('logging', 'log_command_executes') and (int(self.config.get('logging', 'log_command_executes')) == 1) and log_command_output):
        if (roleResult['stdout'] != ''):
            logger.info(((((('Begin command output log for command with id = ' + str(command['taskId'])) + ', role = ') + command['role']) + ', roleCommand = ') + command['roleCommand']))
            self.log_command_output(roleResult['stdout'], str(command['taskId']))
            logger.info(((((('End command output log for command with id = ' + str(command['taskId'])) + ', role = ') + command['role']) + ', roleCommand = ') + command['roleCommand']))
        if (roleResult['stderr'] != ''):
            logger.info(((((('Begin command stderr log for command with id = ' + str(command['taskId'])) + ', role = ') + command['role']) + ', roleCommand = ') + command['roleCommand']))
            self.log_command_output(roleResult['stderr'], str(command['taskId']))
            logger.info(((((('End command stderr log for command with id = ' + str(command['taskId'])) + ', role = ') + command['role']) + ', roleCommand = ') + command['roleCommand']))
    if (roleResult['stdout'] == ''):
        roleResult['stdout'] = 'None'
    if (roleResult['stderr'] == ''):
        roleResult['stderr'] = 'None'
    if command['hostLevelParams'].has_key('custom_command'):
        roleResult['customCommand'] = command['hostLevelParams']['custom_command']
    if ('structuredOut' in commandresult):
        roleResult['structuredOut'] = str(json.dumps(commandresult['structuredOut']))
    else:
        roleResult['structuredOut'] = ''
    if (status == self.COMPLETED_STATUS):
        if (self.controller.recovery_manager.enabled() and command.has_key('roleCommand') and self.controller.recovery_manager.configured_for_recovery(command['role'])):
            if (command['roleCommand'] == self.ROLE_COMMAND_START):
                self.controller.recovery_manager.update_current_status(command['role'], LiveStatus.LIVE_STATUS)
                self.controller.recovery_manager.update_config_staleness(command['role'], False)
                logger.info(((((('After EXECUTION_COMMAND (START), with taskId=' + str(command['taskId'])) + ', current state of ') + command['role']) + ' to ') + self.controller.recovery_manager.get_current_status(command['role'])))
            elif ((command['roleCommand'] == self.ROLE_COMMAND_STOP) or (command['roleCommand'] == self.ROLE_COMMAND_INSTALL)):
                self.controller.recovery_manager.update_current_status(command['role'], LiveStatus.DEAD_STATUS)
                logger.info(((((('After EXECUTION_COMMAND (STOP/INSTALL), with taskId=' + str(command['taskId'])) + ', current state of ') + command['role']) + ' to ') + self.controller.recovery_manager.get_current_status(command['role'])))
            elif (command['roleCommand'] == self.ROLE_COMMAND_CUSTOM_COMMAND):
                if (command['hostLevelParams'].has_key('custom_command') and (command['hostLevelParams']['custom_command'] == self.CUSTOM_COMMAND_RESTART)):
                    self.controller.recovery_manager.update_current_status(command['role'], LiveStatus.LIVE_STATUS)
                    self.controller.recovery_manager.update_config_staleness(command['role'], False)
                    logger.info(((('After EXECUTION_COMMAND (RESTART), current state of ' + command['role']) + ' to ') + self.controller.recovery_manager.get_current_status(command['role'])))
        pass
        configHandler = ActualConfigHandler(self.config, self.configTags)
        if command.has_key('configurationTags'):
            configHandler.write_actual(command['configurationTags'])
            roleResult['configurationTags'] = command['configurationTags']
        component = {'serviceName': command['serviceName'], 'componentName': command['role'], }
        if (('roleCommand' in command) and ((command['roleCommand'] == self.ROLE_COMMAND_START) or ((command['roleCommand'] == self.ROLE_COMMAND_INSTALL) and (component in LiveStatus.CLIENT_COMPONENTS)) or ((command['roleCommand'] == self.ROLE_COMMAND_CUSTOM_COMMAND) and ('custom_command' in command['hostLevelParams']) and (command['hostLevelParams']['custom_command'] in (self.CUSTOM_COMMAND_RESTART, self.CUSTOM_COMMAND_START))))):
            configHandler.write_actual_component(command['role'], command['configurationTags'])
            if (('clientsToUpdateConfigs' in command['hostLevelParams']) and command['hostLevelParams']['clientsToUpdateConfigs']):
                configHandler.write_client_components(command['serviceName'], command['configurationTags'], command['hostLevelParams']['clientsToUpdateConfigs'])
            roleResult['configurationTags'] = configHandler.read_actual_component(command['role'])
    elif (status == self.FAILED_STATUS):
        if (self.controller.recovery_manager.enabled() and command.has_key('roleCommand') and self.controller.recovery_manager.configured_for_recovery(command['role'])):
            if (command['roleCommand'] == self.ROLE_COMMAND_INSTALL):
                self.controller.recovery_manager.update_current_status(command['role'], self.controller.recovery_manager.INSTALL_FAILED)
                logger.info(((((('After EXECUTION_COMMAND (INSTALL), with taskId=' + str(command['taskId'])) + ', current state of ') + command['role']) + ' to ') + self.controller.recovery_manager.get_current_status(command['role'])))
    self.commandStatuses.put_command_status(command, roleResult)
