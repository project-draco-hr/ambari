def execute_command(self, command):
    '\n    Executes commands of type EXECUTION_COMMAND\n    '
    clusterName = command['clusterName']
    commandId = command['commandId']
    isCommandBackground = (command['commandType'] == self.BACKGROUND_EXECUTION_COMMAND)
    isAutoExecuteCommand = (command['commandType'] == self.AUTO_EXECUTION_COMMAND)
    message = 'Executing command with id = {commandId} for role = {role} of cluster {cluster}.'.format(commandId=str(commandId), role=command['role'], cluster=clusterName)
    logger.info(message)
    taskId = command['taskId']
    in_progress_status = self.commandStatuses.generate_report_template(command)
    if (not isAutoExecuteCommand):
        in_progress_status.update({'tmpout': ((((self.tmpdir + os.sep) + 'output-') + str(taskId)) + '.txt'), 'tmperr': ((((self.tmpdir + os.sep) + 'errors-') + str(taskId)) + '.txt'), 'structuredOut': ((((self.tmpdir + os.sep) + 'structured-out-') + str(taskId)) + '.json'), 'status': self.IN_PROGRESS_STATUS, })
    else:
        in_progress_status.update({'tmpout': ((((self.tmpdir + os.sep) + 'auto_output-') + str(taskId)) + '.txt'), 'tmperr': ((((self.tmpdir + os.sep) + 'auto_errors-') + str(taskId)) + '.txt'), 'structuredOut': ((((self.tmpdir + os.sep) + 'auto_structured-out-') + str(taskId)) + '.json'), 'status': self.IN_PROGRESS_STATUS, })
    self.commandStatuses.put_command_status(command, in_progress_status)
    commandresult = self.customServiceOrchestrator.runCommand(command, in_progress_status['tmpout'], in_progress_status['tmperr'])
    if isCommandBackground:
        return
    else:
        status = (self.COMPLETED_STATUS if (commandresult['exitcode'] == 0) else self.FAILED_STATUS)
    roleResult = self.commandStatuses.generate_report_template(command)
    roleResult.update({'stdout': commandresult['stdout'], 'stderr': commandresult['stderr'], 'exitCode': commandresult['exitcode'], 'status': status, })
    if (roleResult['stdout'] == ''):
        roleResult['stdout'] = 'None'
    if (roleResult['stderr'] == ''):
        roleResult['stderr'] = 'None'
    if command['hostLevelParams'].has_key('custom_command'):
        roleResult['customCommand'] = command['hostLevelParams']['custom_command']
    if ('structuredOut' in commandresult):
        roleResult['structuredOut'] = str(json.dumps(commandresult['structuredOut']))
    else:
        roleResult['structuredOut'] = ''
    if (status == self.COMPLETED_STATUS):
        configHandler = ActualConfigHandler(self.config, self.configTags)
        if (command.has_key('forceRefreshConfigTags') and (len(command['forceRefreshConfigTags']) > 0)):
            forceRefreshConfigTags = command['forceRefreshConfigTags']
            logger.info('Got refresh additional component tags command')
            for configTag in forceRefreshConfigTags:
                configHandler.update_component_tag(command['role'], configTag, command['configurationTags'][configTag])
            roleResult['customCommand'] = self.CUSTOM_COMMAND_RESTART
            command['configurationTags'] = configHandler.read_actual_component(command['role'])
        if command.has_key('configurationTags'):
            configHandler.write_actual(command['configurationTags'])
            roleResult['configurationTags'] = command['configurationTags']
        component = {'serviceName': command['serviceName'], 'componentName': command['role'], }
        if (command.has_key('roleCommand') and ((command['roleCommand'] == self.ROLE_COMMAND_START) or ((command['roleCommand'] == self.ROLE_COMMAND_INSTALL) and (component in LiveStatus.CLIENT_COMPONENTS)) or ((command['roleCommand'] == self.ROLE_COMMAND_CUSTOM_COMMAND) and command['hostLevelParams'].has_key('custom_command') and (command['hostLevelParams']['custom_command'] == self.CUSTOM_COMMAND_RESTART)))):
            configHandler.write_actual_component(command['role'], command['configurationTags'])
            if (command['hostLevelParams'].has_key('clientsToUpdateConfigs') and command['hostLevelParams']['clientsToUpdateConfigs']):
                configHandler.write_client_components(command['serviceName'], command['configurationTags'], command['hostLevelParams']['clientsToUpdateConfigs'])
            roleResult['configurationTags'] = configHandler.read_actual_component(command['role'])
    self.commandStatuses.put_command_status(command, roleResult)
