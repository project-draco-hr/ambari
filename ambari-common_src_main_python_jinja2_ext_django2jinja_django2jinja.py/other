'\n    Django to Jinja\n    ~~~~~~~~~~~~~~~\n\n    Helper module that can convert django templates into Jinja2 templates.\n\n    This file is not intended to be used as stand alone application but to\n    be used as library.  To convert templates you basically create your own\n    writer, add extra conversion logic for your custom template tags,\n    configure your django environment and run the `convert_templates`\n    function.\n\n    Here a simple example::\n\n        # configure django (or use settings.configure)\n        import os\n        os.environ[\'DJANGO_SETTINGS_MODULE\'] = \'yourapplication.settings\'\n        from yourapplication.foo.templatetags.bar import MyNode\n\n        from django2jinja import Writer, convert_templates\n\n        def write_my_node(writer, node):\n            writer.start_variable()\n            writer.write(\'myfunc(\')\n            for idx, arg in enumerate(node.args):\n                if idx:\n                    writer.write(\', \')\n                writer.node(arg)\n            writer.write(\')\')\n            writer.end_variable()\n\n        writer = Writer()\n        writer.node_handlers[MyNode] = write_my_node\n        convert_templates(\'/path/to/output/folder\', writer=writer)\n    \n    Here is an example hos to automatically translate your django\n    variables to jinja2::\n        \n        import re\n        # List of tuple (Match pattern, Replace pattern, Exclusion pattern)\n        \n        var_re  = ((re.compile(r"(u|user)\\.is_authenticated"), r"\x01.is_authenticated()", None),\n                  (re.compile(r"\\.non_field_errors"), r".non_field_errors()", None),\n                  (re.compile(r"\\.label_tag"), r".label_tag()", None),\n                  (re.compile(r"\\.as_dl"), r".as_dl()", None),\n                  (re.compile(r"\\.as_table"), r".as_table()", None),\n                  (re.compile(r"\\.as_widget"), r".as_widget()", None),\n                  (re.compile(r"\\.as_hidden"), r".as_hidden()", None),\n                  \n                  (re.compile(r"\\.get_([0-9_\\w]+)_url"), r".get_\x01_url()", None),\n                  (re.compile(r"\\.url"), r".url()", re.compile(r"(form|calendar).url")),\n                  (re.compile(r"\\.get_([0-9_\\w]+)_display"), r".get_\x01_display()", None),\n                  (re.compile(r"loop\\.counter"), r"loop.index", None),\n                  (re.compile(r"loop\\.revcounter"), r"loop.revindex", None),\n                  (re.compile(r"request\\.GET\\.([0-9_\\w]+)"), r"request.GET.get(\'\x01\', \'\')", None),\n                  (re.compile(r"request\\.get_host"), r"request.get_host()", None),\n                  \n                  (re.compile(r"\\.all(?!_)"), r".all()", None),\n                  (re.compile(r"\\.all\\.0"), r".all()[0]", None),\n                  (re.compile(r"\\.([0-9])($|\\s+)"), r"[\x01]\x02", None),\n                  (re.compile(r"\\.items"), r".items()", None),\n        )\n        writer = Writer(var_re=var_re)\n        \n    For details about the writing process have a look at the module code.\n\n    :copyright: (c) 2009 by the Jinja Team.\n    :license: BSD.\n'
import re
import os
import sys
from jinja2.defaults import *
from django.conf import settings
from django.template import defaulttags as core_tags, loader, TextNode, FilterExpression, libraries, Variable, loader_tags, TOKEN_TEXT, TOKEN_VAR
from django.template.debug import DebugVariableNode as VariableNode
from django.templatetags import i18n as i18n_tags
from StringIO import StringIO
_node_handlers = {}
_resolved_filters = {}
_newline_re = re.compile('(?:\\r\\n|\\r|\\n)')
_old_cycle_init = core_tags.CycleNode.__init__
core_tags.CycleNode.__init__ = _fixed_cycle_init
del node
