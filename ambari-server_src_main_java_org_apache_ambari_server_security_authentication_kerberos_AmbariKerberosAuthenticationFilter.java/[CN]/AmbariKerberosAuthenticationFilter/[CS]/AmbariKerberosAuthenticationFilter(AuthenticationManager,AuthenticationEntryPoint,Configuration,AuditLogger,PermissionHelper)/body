{
  AmbariKerberosAuthenticationProperties kerberosAuthenticationProperties=(configuration == null) ? null : configuration.getKerberosAuthenticationProperties();
  kerberosAuthenticationEnabled=(kerberosAuthenticationProperties != null) && kerberosAuthenticationProperties.isKerberosAuthenticationEnabled();
  this.auditLogger=auditLogger;
  setAuthenticationManager(authenticationManager);
  setFailureHandler(new AuthenticationFailureHandler(){
    @Override public void onAuthenticationFailure(    HttpServletRequest httpServletRequest,    HttpServletResponse httpServletResponse,    AuthenticationException e) throws IOException, ServletException {
      if (auditLogger.isEnabled()) {
        AuditEvent loginFailedAuditEvent=LoginAuditEvent.builder().withRemoteIp(RequestUtils.getRemoteAddress(httpServletRequest)).withTimestamp(System.currentTimeMillis()).withReasonOfFailure(e.getLocalizedMessage()).build();
        auditLogger.log(loginFailedAuditEvent);
      }
      entryPoint.commence(httpServletRequest,httpServletResponse,e);
    }
  }
);
  setSuccessHandler(new AuthenticationSuccessHandler(){
    @Override public void onAuthenticationSuccess(    HttpServletRequest httpServletRequest,    HttpServletResponse httpServletResponse,    Authentication authentication) throws IOException, ServletException {
      if (auditLogger.isEnabled()) {
        AuditEvent loginSucceededAuditEvent=LoginAuditEvent.builder().withRemoteIp(RequestUtils.getRemoteAddress(httpServletRequest)).withUserName(authentication.getName()).withTimestamp(System.currentTimeMillis()).withRoles(permissionHelper.getPermissionLabels(authentication)).build();
        auditLogger.log(loginSucceededAuditEvent);
      }
    }
  }
);
}
