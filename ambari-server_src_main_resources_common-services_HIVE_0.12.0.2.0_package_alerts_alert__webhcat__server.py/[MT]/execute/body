def execute(configurations={}, parameters={}, host_name=None):
    '\n  Returns a tuple containing the result code and a pre-formatted result label\n\n  Keyword arguments:\n  configurations (dictionary): a mapping of configuration key to value\n  parameters (dictionary): a mapping of script parameter key to value\n  host_name (string): the name of this host where the alert is running\n  '
    result_code = RESULT_CODE_UNKNOWN
    if (configurations is None):
        return (result_code, ['There were no configurations supplied to the script.'])
    webhcat_port = WEBHCAT_PORT_DEFAULT
    if (TEMPLETON_PORT_KEY in configurations):
        webhcat_port = int(configurations[TEMPLETON_PORT_KEY])
    security_enabled = False
    if (SECURITY_ENABLED_KEY in configurations):
        security_enabled = (configurations[SECURITY_ENABLED_KEY].lower() == 'true')
    connection_timeout = CONNECTION_TIMEOUT_DEFAULT
    curl_connection_timeout = CURL_CONNECTION_TIMEOUT_DEFAULT
    if (CONNECTION_TIMEOUT_KEY in parameters):
        connection_timeout = float(parameters[CONNECTION_TIMEOUT_KEY])
        curl_connection_timeout = str(int(connection_timeout))
    if (host_name is None):
        host_name = socket.getfqdn()
    smokeuser = SMOKEUSER_DEFAULT
    if (SMOKEUSER_KEY in configurations):
        smokeuser = configurations[SMOKEUSER_KEY]
    query_url = 'http://{0}:{1}/templeton/v1/status?user.name={2}'.format(host_name, webhcat_port, smokeuser)
    total_time = 0
    json_response = {}
    if security_enabled:
        try:
            smokeuser_keytab = SMOKEUSER_KEYTAB_DEFAULT
            smokeuser_principal = SMOKEUSER_PRINCIPAL_DEFAULT
            if (SMOKEUSER_PRINCIPAL_SCRIPT_PARAM_KEY in parameters):
                smokeuser_principal = parameters[SMOKEUSER_PRINCIPAL_SCRIPT_PARAM_KEY]
            if (SMOKEUSER_KEYTAB_SCRIPT_PARAM_KEY in parameters):
                smokeuser_keytab = parameters[SMOKEUSER_KEYTAB_SCRIPT_PARAM_KEY]
            if (SMOKEUSER_PRINCIPAL_KEY in configurations):
                smokeuser_principal = configurations[SMOKEUSER_PRINCIPAL_KEY]
            if (SMOKEUSER_KEYTAB_KEY in configurations):
                smokeuser_keytab = configurations[SMOKEUSER_KEYTAB_KEY]
            kerberos_executable_search_paths = None
            if (KERBEROS_EXECUTABLE_SEARCH_PATHS_KEY in configurations):
                kerberos_executable_search_paths = configurations[KERBEROS_EXECUTABLE_SEARCH_PATHS_KEY]
            kinit_timer_ms = parameters.get(KERBEROS_KINIT_TIMER_PARAMETER, DEFAULT_KERBEROS_KINIT_TIMER_MS)
            env = Environment.get_instance()
            (stdout, stderr, time_millis) = curl_krb_request(env.tmp_dir, smokeuser_keytab, smokeuser_principal, query_url, 'webhcat_alert_cc_', kerberos_executable_search_paths, True, 'WebHCat Server Status', smokeuser, connection_timeout=curl_connection_timeout, kinit_timer_ms=kinit_timer_ms)
            response_code = int(stdout)
            if (response_code == 0):
                label = CRITICAL_CONNECTION_MESSAGE.format(query_url, traceback.format_exc())
                return (RESULT_CODE_CRITICAL, [label])
            if (response_code != 200):
                label = CRITICAL_HTTP_MESSAGE.format(response_code, query_url, traceback.format_exc())
                return (RESULT_CODE_CRITICAL, [label])
            (stdout, stderr, total_time) = curl_krb_request(env.tmp_dir, smokeuser_keytab, smokeuser_principal, query_url, 'webhcat_alert_cc_', kerberos_executable_search_paths, False, 'WebHCat Server Status', smokeuser, connection_timeout=curl_connection_timeout, kinit_timer_ms=kinit_timer_ms)
            json_response = json.loads(stdout)
        except:
            return (RESULT_CODE_CRITICAL, [traceback.format_exc()])
    else:
        url_response = None
        try:
            try:
                start_time = time.time()
                url_response = urllib2.urlopen(query_url, timeout=connection_timeout)
                total_time = (time.time() - start_time)
                json_response = json.loads(url_response.read())
            except urllib2.HTTPError as httpError:
                label = CRITICAL_HTTP_MESSAGE.format(httpError.code, query_url, traceback.format_exc())
                return (RESULT_CODE_CRITICAL, [label])
            except:
                label = CRITICAL_CONNECTION_MESSAGE.format(query_url, traceback.format_exc())
                return (RESULT_CODE_CRITICAL, [label])
        finally:
            if (url_response is not None):
                try:
                    url_response.close()
                except:
                    pass
    if ('status' not in json_response):
        return (RESULT_CODE_CRITICAL, [(CRITICAL_WEBHCAT_UNKNOWN_JSON_MESSAGE + str(json_response))])
    try:
        webhcat_status = json_response['status']
    except:
        return (RESULT_CODE_CRITICAL, [((CRITICAL_WEBHCAT_UNKNOWN_JSON_MESSAGE + '\n') + traceback.format_exc())])
    if (webhcat_status.lower() == WEBHCAT_OK_RESPONSE):
        result_code = RESULT_CODE_OK
        label = OK_MESSAGE.format(total_time, query_url)
    else:
        result_code = RESULT_CODE_CRITICAL
        label = CRITICAL_WEBHCAT_STATUS_MESSAGE.format(webhcat_status)
    return (result_code, [label])
