{
  for (  Map.Entry<Class,String> entry : entityClassMap.entrySet()) {
    String entityName=entry.getValue();
    Class<?> javaType=dcl.createDynamicClass(entityName);
    String tableName=getTableName(entityMap.get(entityName));
    JPADynamicTypeBuilder typeBuilder=new JPADynamicTypeBuilder(javaType,null,tableName);
    typeBuilderMap.put(entityName,typeBuilder);
  }
  for (  Map.Entry<Class,String> entry : entityClassMap.entrySet()) {
    Class clazz=entry.getKey();
    String entityName=entry.getValue();
    JPADynamicTypeBuilder typeBuilder=typeBuilderMap.get(entityName);
    Map<String,PropertyDescriptor> descriptorMap=getDescriptorMap(clazz);
    for (    Map.Entry<String,PropertyDescriptor> descriptorEntry : descriptorMap.entrySet()) {
      String fieldName=descriptorEntry.getKey();
      String attributeName=getAttributeName(fieldName);
      PropertyDescriptor descriptor=descriptorEntry.getValue();
      if (fieldName.equals(entityMap.get(entityName).getIdProperty())) {
        typeBuilder.setPrimaryKeyFields(attributeName);
      }
      Class<?> propertyType=descriptor.getPropertyType();
      if (isDirectMappingType(propertyType)) {
        DirectToFieldMapping mapping=typeBuilder.addDirectMapping(attributeName,propertyType,attributeName);
        if (String.class.isAssignableFrom(propertyType)) {
          DatabaseField field=mapping.getField();
          field.setSqlType(Types.CLOB);
          field.setType(Clob.class);
        }
      }
    }
  }
  for (  Map.Entry<Class,String> entry : entityClassMap.entrySet()) {
    Class clazz=entry.getKey();
    String entityName=entry.getValue();
    JPADynamicTypeBuilder typeBuilder=typeBuilderMap.get(entityName);
    Map<String,PropertyDescriptor> descriptorMap=getDescriptorMap(clazz);
    for (    Map.Entry<String,PropertyDescriptor> descriptorEntry : descriptorMap.entrySet()) {
      String fieldName=descriptorEntry.getKey();
      String attributeName=getAttributeName(fieldName);
      PropertyDescriptor descriptor=descriptorEntry.getValue();
      if (fieldName.equals(entityMap.get(entityName).getIdProperty())) {
        typeBuilder.setPrimaryKeyFields(attributeName);
      }
      Class<?> propertyType=descriptor.getPropertyType();
      String refEntityName=entityClassMap.get(propertyType);
      if (refEntityName == null) {
        if (Collection.class.isAssignableFrom(propertyType)) {
          String tableName=getTableName(entityMap.get(entityName)) + "_" + attributeName;
          Class<?> parameterizedTypeClass=getParameterizedTypeClass(clazz,attributeName);
          refEntityName=entityClassMap.get(parameterizedTypeClass);
          if (refEntityName == null) {
            typeBuilder.addDirectCollectionMapping(attributeName,tableName,attributeName,parameterizedTypeClass,entityMap.get(entityName).getIdProperty());
          }
 else {
            DynamicType refType=typeBuilderMap.get(refEntityName).getType();
            typeBuilder.addManyToManyMapping(attributeName,refType,tableName);
          }
        }
      }
 else {
        DynamicType refType=typeBuilderMap.get(refEntityName).getType();
        typeBuilder.addOneToOneMapping(attributeName,refType,attributeName);
      }
    }
  }
  DynamicType[] types=new DynamicType[typeBuilderMap.size()];
  int i=typeBuilderMap.size() - 1;
  for (  JPADynamicTypeBuilder typeBuilder : typeBuilderMap.values()) {
    types[i--]=typeBuilder.getType();
  }
  helper.addTypes(true,true,types);
  schemaManagerFactory.getSchemaManager(helper.getSession()).extendDefaultTables(true);
}
