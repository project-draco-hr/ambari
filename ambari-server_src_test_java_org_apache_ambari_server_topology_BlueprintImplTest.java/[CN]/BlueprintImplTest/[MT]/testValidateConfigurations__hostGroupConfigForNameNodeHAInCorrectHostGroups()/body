{
  Map<String,Map<String,String>> group2Props=new HashMap<>();
  Map<String,String> group2Category2Props=new HashMap<>();
  group2Props.put("category2",group2Category2Props);
  group2Category2Props.put("prop2","val");
  Configuration group2Configuration=new Configuration(group2Props,EMPTY_ATTRIBUTES,configuration);
  expect(group2.getConfiguration()).andReturn(group2Configuration).atLeastOnce();
  expect(group1.getCardinality()).andReturn("1").atLeastOnce();
  expect(group1.getComponents()).andReturn(Arrays.asList(new Component("NAMENODE"))).atLeastOnce();
  expect(group2.getCardinality()).andReturn("1").atLeastOnce();
  expect(group2.getComponents()).andReturn(Arrays.asList(new Component("NAMENODE"))).atLeastOnce();
  Map<String,String> category2Props=new HashMap<>();
  properties.put("category2",category2Props);
  category2Props.put("prop2","val");
  group1Components.add("NAMENODE");
  group2Components.add("NAMENODE");
  expect(stack.getServiceForComponent("NAMENODE")).andReturn("SERVICE2").atLeastOnce();
  Map<String,String> hdfsProps=new HashMap<String,String>();
  properties.put("hdfs-site",hdfsProps);
  hdfsProps.put("foo","val");
  hdfsProps.put("bar","val");
  hdfsProps.put("dfs.nameservices","val");
  Map<String,String> hadoopProps=new HashMap<String,String>();
  properties.put("hadoop-env",hadoopProps);
  hadoopProps.put("dfs_ha_initial_namenode_active","%HOSTGROUP::group2%");
  hadoopProps.put("dfs_ha_initial_namenode_standby","%HOSTGROUP::group3%");
  replay(stack,group1,group2);
  Blueprint blueprint=new BlueprintImpl("test",hostGroups,stack,configuration,null);
  blueprint.validateRequiredProperties();
  verify(stack,group1,group2);
}
