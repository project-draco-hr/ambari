{
  Stack stack=createNiceMock(Stack.class);
  HostGroup group1=createNiceMock(HostGroup.class);
  HostGroup group2=createNiceMock(HostGroup.class);
  Collection<HostGroup> hostGroups=new HashSet<HostGroup>();
  hostGroups.add(group1);
  hostGroups.add(group2);
  Set<String> group1Components=new HashSet<String>();
  group1Components.add("c1");
  group1Components.add("c2");
  Set<String> group2Components=new HashSet<String>();
  group2Components.add("c1");
  group2Components.add("c3");
  Collection<Stack.ConfigProperty> requiredHDFSProperties=new HashSet<Stack.ConfigProperty>();
  requiredHDFSProperties.add(new Stack.ConfigProperty("hdfs-site","foo",null));
  requiredHDFSProperties.add(new Stack.ConfigProperty("hdfs-site","bar",null));
  requiredHDFSProperties.add(new Stack.ConfigProperty("hdfs-site","some_password",null));
  requiredHDFSProperties.add(new Stack.ConfigProperty("category1","prop1",null));
  Collection<Stack.ConfigProperty> requiredService2Properties=new HashSet<Stack.ConfigProperty>();
  requiredService2Properties.add(new Stack.ConfigProperty("category2","prop2",null));
  expect(stack.getServiceForComponent("c1")).andReturn("HDFS").atLeastOnce();
  expect(stack.getServiceForComponent("c2")).andReturn("HDFS").atLeastOnce();
  expect(stack.getServiceForComponent("c3")).andReturn("SERVICE2").atLeastOnce();
  expect(stack.getRequiredConfigurationProperties("HDFS")).andReturn(requiredHDFSProperties).atLeastOnce();
  expect(stack.getRequiredConfigurationProperties("SERVICE2")).andReturn(requiredService2Properties).atLeastOnce();
  expect(stack.isPasswordProperty("HDFS","hdfs-site","foo")).andReturn(false).atLeastOnce();
  expect(stack.isPasswordProperty("HDFS","hdfs-site","bar")).andReturn(false).atLeastOnce();
  expect(stack.isPasswordProperty("HDFS","hdfs-site","some_password")).andReturn(true).atLeastOnce();
  expect(stack.isPasswordProperty("HDFS","category1","prop1")).andReturn(false).atLeastOnce();
  expect(stack.isPasswordProperty("SERVICE2","category2","prop2")).andReturn(false).atLeastOnce();
  expect(group1.getConfiguration()).andReturn(EMPTY_CONFIGURATION).atLeastOnce();
  expect(group1.getName()).andReturn("group1").anyTimes();
  expect(group1.getComponents()).andReturn(group1Components).atLeastOnce();
  expect(group2.getConfiguration()).andReturn(EMPTY_CONFIGURATION).atLeastOnce();
  expect(group2.getName()).andReturn("group2").anyTimes();
  expect(group2.getComponents()).andReturn(group2Components).atLeastOnce();
  replay(stack,group1,group2);
  Map<String,Map<String,String>> properties=new HashMap<String,Map<String,String>>();
  Map<String,String> hdfsProps=new HashMap<String,String>();
  properties.put("hdfs-site",hdfsProps);
  hdfsProps.put("foo","val");
  hdfsProps.put("bar","val");
  Map<String,String> category1Props=new HashMap<String,String>();
  properties.put("category1",category1Props);
  category1Props.put("prop1","val");
  Map<String,Map<String,Map<String,String>>> attributes=new HashMap<String,Map<String,Map<String,String>>>();
  Configuration configuration=new Configuration(properties,attributes,EMPTY_CONFIGURATION);
  Blueprint blueprint=new BlueprintImpl("test",hostGroups,stack,configuration);
  try {
    blueprint.validateRequiredProperties();
    fail("Expected exception to be thrown for missing config property");
  }
 catch (  InvalidTopologyException e) {
    System.out.println("****" + e.getMessage() + "***");
  }
  verify(stack,group1,group2);
}
