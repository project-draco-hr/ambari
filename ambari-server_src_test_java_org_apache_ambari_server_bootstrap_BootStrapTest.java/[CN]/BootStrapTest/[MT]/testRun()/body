{
  Properties properties=new Properties();
  String bootdir=temp.newFolder("bootdir").toString();
  String metadetadir=temp.newFolder("metadetadir").toString();
  String serverVersionFilePath=temp.newFolder("serverVersionFilePath").toString();
  LOG.info("Bootdir is " + bootdir);
  LOG.info("Metadetadir is " + metadetadir);
  LOG.info("ServerVersionFilePath is " + serverVersionFilePath);
  String sharedResourcesDir="src/test/resources/";
  if (System.getProperty("os.name").contains("Windows")) {
    sharedResourcesDir=ClassLoader.getSystemClassLoader().getResource("").getPath();
  }
  properties.setProperty(Configuration.BOOTSTRAP_DIR,bootdir);
  properties.setProperty(Configuration.BOOTSTRAP_SCRIPT,prepareEchoCommand(bootdir));
  properties.setProperty(Configuration.SRVR_KSTR_DIR_KEY,"target" + File.separator + "classes");
  properties.setProperty(Configuration.METADATA_DIR_PATH,metadetadir);
  properties.setProperty(Configuration.SERVER_VERSION_FILE,serverVersionFilePath);
  properties.setProperty(Configuration.SHARED_RESOURCES_DIR_KEY,sharedResourcesDir);
  Configuration conf=new Configuration(properties);
  AmbariMetaInfo ambariMetaInfo=new AmbariMetaInfo(conf);
  BootStrapImpl impl=new BootStrapImpl(conf,ambariMetaInfo);
  impl.init();
  SshHostInfo info=new SshHostInfo();
  info.setSshKey("xyz");
  ArrayList<String> hosts=new ArrayList<String>();
  hosts.add("host1");
  hosts.add("host2");
  info.setUserRunAs("root");
  info.setHosts(hosts);
  info.setUser("user");
  info.setPassword("passwd");
  BSResponse response=impl.runBootStrap(info);
  LOG.info("Response id from bootstrap " + response.getRequestId());
  BootStrapStatus status=impl.getStatus(response.getRequestId());
  LOG.info("Status " + status.getStatus());
  int num=0;
  while ((status.getStatus() == BSStat.RUNNING) && (num < 50)) {
    status=impl.getStatus(response.getRequestId());
    Thread.sleep(1000);
    num++;
  }
  Thread.sleep(5000);
  LOG.info("Status: log " + status.getLog() + " status="+ status.getStatus());
  Assert.assertTrue(status.getLog().contains("host1,host2"));
  Assert.assertEquals(BSStat.SUCCESS,status.getStatus());
  Assert.assertFalse(new File(bootdir + File.separator + "1"+ File.separator+ "sshKey").exists());
  Assert.assertFalse(new File(bootdir + File.separator + "1"+ File.separator+ "host_pass").exists());
}
