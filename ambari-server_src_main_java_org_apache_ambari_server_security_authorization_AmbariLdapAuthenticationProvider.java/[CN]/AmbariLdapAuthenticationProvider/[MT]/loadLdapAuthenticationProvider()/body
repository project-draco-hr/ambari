{
  if (reloadLdapServerProperties()) {
    log.info("LDAP Properties changed - rebuilding Context");
    DefaultSpringSecurityContextSource springSecurityContextSource=new DefaultSpringSecurityContextSource(ldapServerProperties.get().getLdapUrls(),ldapServerProperties.get().getBaseDN());
    if (!ldapServerProperties.get().isAnonymousBind()) {
      springSecurityContextSource.setUserDn(ldapServerProperties.get().getManagerDn());
      springSecurityContextSource.setPassword(ldapServerProperties.get().getManagerPassword());
    }
    try {
      springSecurityContextSource.afterPropertiesSet();
    }
 catch (    Exception e) {
      log.error("LDAP Context Source not loaded ",e);
      throw new UsernameNotFoundException("LDAP Context Source not loaded",e);
    }
    String userSearchBase=ldapServerProperties.get().getUserSearchBase();
    String userSearchFilter=ldapServerProperties.get().getUserSearchFilter();
    FilterBasedLdapUserSearch userSearch=new FilterBasedLdapUserSearch(userSearchBase,userSearchFilter,springSecurityContextSource);
    BindAuthenticator bindAuthenticator=new BindAuthenticator(springSecurityContextSource);
    bindAuthenticator.setUserSearch(userSearch);
    LdapAuthenticationProvider authenticationProvider=new LdapAuthenticationProvider(bindAuthenticator,authoritiesPopulator);
    providerThreadLocal.set(authenticationProvider);
  }
  return providerThreadLocal.get();
}
