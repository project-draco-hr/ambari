{
  boolean ldapConfigPropertiesChanged=reloadLdapServerProperties();
  String ldapUserSearchFilter=getLdapUserSearchFilter(userName);
  if (ldapConfigPropertiesChanged || !ldapUserSearchFilter.equals(ldapUserSearchFilterThreadLocal.get())) {
    LOG.info("Either LDAP Properties or user search filter changed - rebuilding Context");
    LdapContextSource springSecurityContextSource=new LdapContextSource();
    List<String> ldapUrls=ldapServerProperties.get().getLdapUrls();
    springSecurityContextSource.setUrls(ldapUrls.toArray(new String[ldapUrls.size()]));
    springSecurityContextSource.setBase(ldapServerProperties.get().getBaseDN());
    if (!ldapServerProperties.get().isAnonymousBind()) {
      springSecurityContextSource.setUserDn(ldapServerProperties.get().getManagerDn());
      springSecurityContextSource.setPassword(ldapServerProperties.get().getManagerPassword());
    }
    try {
      springSecurityContextSource.afterPropertiesSet();
    }
 catch (    Exception e) {
      LOG.error("LDAP Context Source not loaded ",e);
      throw new UsernameNotFoundException("LDAP Context Source not loaded",e);
    }
    String userSearchBase=ldapServerProperties.get().getUserSearchBase();
    FilterBasedLdapUserSearch userSearch=new FilterBasedLdapUserSearch(userSearchBase,ldapUserSearchFilter,springSecurityContextSource);
    AmbariLdapBindAuthenticator bindAuthenticator=new AmbariLdapBindAuthenticator(springSecurityContextSource,configuration);
    bindAuthenticator.setUserSearch(userSearch);
    LdapAuthenticationProvider authenticationProvider=new LdapAuthenticationProvider(bindAuthenticator,authoritiesPopulator);
    providerThreadLocal.set(authenticationProvider);
  }
  ldapUserSearchFilterThreadLocal.set(ldapUserSearchFilter);
  return providerThreadLocal.get();
}
