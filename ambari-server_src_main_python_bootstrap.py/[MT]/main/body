def main(argv=None):
    scriptDir = os.path.realpath(os.path.dirname(argv[0]))
    onlyargs = argv[1:]
    if (len(onlyargs) < 3):
        sys.stderr.write('Usage: <comma separated hosts> <tmpdir for storage> <user> <sshkey_file> <agent setup script> <ambari-server name> <cluster os type> <ambari version> <ambari port> <user_run_as> <passwordFile>\n')
        sys.exit(2)
        pass
    hostList = onlyargs[0].split(',')
    bootdir = onlyargs[1]
    user = onlyargs[2]
    sshkey_file = onlyargs[3]
    setupAgentFile = onlyargs[4]
    ambariServer = onlyargs[5]
    cluster_os_type = onlyargs[6]
    ambariVersion = onlyargs[7]
    server_port = onlyargs[8]
    user_run_as = onlyargs[9]
    passwordFile = onlyargs[10]
    if (not OSCheck.is_windows_family()):
        subprocess.Popen(['chmod', '600', sshkey_file], stdout=subprocess.PIPE)
        if ((passwordFile is not None) and (passwordFile != 'null')):
            subprocess.Popen(['chmod', '600', passwordFile], stdout=subprocess.PIPE)
    logging.info(((((((((((((((((((((('BootStrapping hosts ' + pprint.pformat(hostList)) + ' using ') + scriptDir) + ' cluster primary OS: ') + cluster_os_type) + " with user '") + user) + "' sshKey File ") + sshkey_file) + ' password File ') + passwordFile) + ' using tmp dir ') + bootdir) + ' ambari: ') + ambariServer) + '; server_port: ') + server_port) + '; ambari version: ') + ambariVersion) + '; user_run_as: ') + user_run_as))
    sharedState = SharedState(user, sshkey_file, scriptDir, bootdir, setupAgentFile, ambariServer, cluster_os_type, ambariVersion, server_port, user_run_as, passwordFile)
    pbootstrap = PBootstrap(hostList, sharedState)
    pbootstrap.run()
    return 0
