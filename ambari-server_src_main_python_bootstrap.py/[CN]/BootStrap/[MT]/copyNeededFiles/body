def copyNeededFiles(self):
    try:
        fileToCopy = self.getRepoFile()
        logging.info("Copying repo file to 'tmp' folder...")
        pscp = PSCP(self.successive_hostlist, self.user, self.sshkeyFile, fileToCopy, '/tmp', self.bootdir)
        pscp.run()
        out = pscp.getstatus()
        failed_current = get_difference(self.successive_hostlist, skip_failed_hosts(out))
        self.successive_hostlist = skip_failed_hosts(out)
        failed = get_difference(self.hostlist, self.successive_hostlist)
        logging.info(((('Parallel scp returns for copying repo file. All failed hosts are: ' + str(failed)) + '. Failed on last step: ') + str(failed_current)))
        self.statuses = unite_statuses(self.statuses, out)
        logging.info('Moving repo file...')
        targetDir = self.getRepoDir()
        command = self.getMoveRepoFileCommand(targetDir)
        pssh = PSSH(self.successive_hostlist, self.user, self.sshkeyFile, command, self.bootdir)
        pssh.run()
        out = pssh.getstatus()
        failed_current = get_difference(self.successive_hostlist, skip_failed_hosts(out))
        self.successive_hostlist = skip_failed_hosts(out)
        failed = get_difference(self.hostlist, self.successive_hostlist)
        logging.info(((('Parallel scp returns for moving repo file. All failed hosts are: ' + str(failed)) + '. Failed on last step: ') + str(failed_current)))
        self.statuses = unite_statuses(self.statuses, out)
        pscp = PSCP(self.successive_hostlist, self.user, self.sshkeyFile, self.setupAgentFile, '/tmp', self.bootdir)
        pscp.run()
        out = pscp.getstatus()
        failed_current = get_difference(self.successive_hostlist, skip_failed_hosts(out))
        self.successive_hostlist = skip_failed_hosts(out)
        failed = get_difference(self.hostlist, self.successive_hostlist)
        logging.info(((('Parallel scp returns for agent script. All failed hosts are: ' + str(failed)) + '. Failed on last step: ') + str(failed_current)))
        self.statuses = unite_statuses(self.statuses, out)
        if (not failed):
            retstatus = 0
        else:
            retstatus = 1
        return retstatus
    except Exception as e:
        logging.info(('Traceback ' + traceback.format_exc()))
        pass
    pass
