def copyPasswordFile(self):
    try:
        logging.info("Copying password file to 'tmp' folder...")
        pscp = PSCP(self.successive_hostlist, self.user, self.sshkeyFile, self.passwordFile, '/tmp', self.bootdir)
        pscp.run()
        out = pscp.getstatus()
        failed_current = get_difference(self.successive_hostlist, skip_failed_hosts(out))
        self.successive_hostlist = skip_failed_hosts(out)
        self.hostlist_to_remove_password_file = self.successive_hostlist
        failed = get_difference(self.hostlist, self.successive_hostlist)
        logging.warn(((('Parallel scp returns for copying password file. All failed hosts are: ' + str(failed)) + '. Failed on last step: ') + str(failed_current)))
        self.statuses = unite_statuses(self.statuses, out)
        logging.info('Changing password file mode...')
        targetDir = self.getRepoDir()
        command = ('chmod 600 ' + self.getPasswordFile())
        pssh = PSSH(self.successive_hostlist, self.user, self.sshkeyFile, command, self.bootdir)
        pssh.run()
        out = pssh.getstatus()
        failed_current = get_difference(self.successive_hostlist, skip_failed_hosts(out))
        self.successive_hostlist = skip_failed_hosts(out)
        failed = get_difference(self.hostlist, self.successive_hostlist)
        logging.warning(((('Parallel scp returns for copying password file. All failed hosts are: ' + str(failed)) + '. Failed on last step: ') + str(failed_current)))
        self.statuses = unite_statuses(self.statuses, out)
        if (not failed):
            retstatus = 0
        else:
            retstatus = 1
        return retstatus
    except Exception as e:
        logging.info(('Traceback ' + traceback.format_exc()))
        return 1
    pass
