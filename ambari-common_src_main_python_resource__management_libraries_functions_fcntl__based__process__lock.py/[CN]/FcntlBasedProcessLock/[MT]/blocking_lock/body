def blocking_lock(self):
    "\n    Creates the lock file if it doesn't exist.\n    Waits to acquire an exclusive lock on the lock file descriptor.\n    "
    if (not self.enabled):
        return
    import fcntl
    Logger.info('Trying to acquire a lock on {0}'.format(self.lock_file_name))
    if ((self.lock_file is None) or self.lock_file.closed):
        self.lock_file = open(self.lock_file_name, 'a')
    try:
        fcntl.lockf(self.lock_file, fcntl.LOCK_EX)
    except:
        if self.skip_fcntl_failures:
            Logger.exception('Fcntl call raised an exception. A lock was not aquired. Continuing as skip_fcntl_failures is set to True')
        else:
            raise
    else:
        self.acquired = True
        Logger.info('Acquired the lock on {0}'.format(self.lock_file_name))
