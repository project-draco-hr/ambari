def unlock(self):
    '\n    Unlocks the lock file descriptor.\n    '
    if (not self.enabled):
        return
    import fcntl
    Logger.info('Releasing the lock on {0}'.format(self.lock_file_name))
    if self.acquired:
        try:
            fcntl.lockf(self.lock_file, fcntl.LOCK_UN)
        except:
            if self.skip_fcntl_failures:
                Logger.exception('Fcntl call raised an exception. The lock was not released. Continuing as skip_fcntl_failures is set to True')
            else:
                raise
        else:
            self.acquired = False
            try:
                self.lock_file.close()
                self.lock_file = None
            except IOError:
                Logger.warning('Failed to close {0}'.format(self.lock_file_name))
