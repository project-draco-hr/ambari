{
  for (  Resource.InternalType internalType : Resource.InternalType.values()) {
    Resource.Type type=null;
    try {
      type=Resource.Type.valueOf(internalType.name());
    }
 catch (    IllegalArgumentException e) {
      Assert.fail("Resource.Type should be defined for internal type " + internalType.name() + ".");
    }
    Assert.assertEquals(type.name(),internalType.name());
    Assert.assertEquals(type.ordinal(),internalType.ordinal());
  }
  Resource.Type newType=new Resource.Type("newType");
  Resource.Type newType2=new Resource.Type("newType2");
  Assert.assertFalse(newType.equals(newType2));
  Assert.assertFalse(newType2.equals(newType));
  Assert.assertEquals("newType",newType.name());
  Assert.assertFalse(newType.isInternalType());
  try {
    newType.getInternalType();
    Assert.fail("Can't get internal type for a extended resource.");
  }
 catch (  UnsupportedOperationException e) {
  }
  Resource.Type t1=Resource.Type.valueOf("newType");
  Resource.Type t2=Resource.Type.valueOf("newType2");
  Assert.assertTrue(newType.equals(t1));
  Assert.assertTrue(t1.equals(newType));
  Assert.assertTrue(newType2.equals(t2));
  Assert.assertTrue(t2.equals(newType2));
  Assert.assertFalse(t1.equals(newType2));
  Assert.assertFalse(t2.equals(newType));
  try {
    Resource.Type.valueOf("badType");
    Assert.fail("Expected IllegalArgumentException.");
  }
 catch (  IllegalArgumentException e) {
  }
}
