@patch.object(HostCleanup.HostCleanup, 'run_os_command')
@patch.object(HostCleanup.HostCleanup, 'do_erase_dir_silent')
@patch.object(HostCleanup.HostCleanup, 'get_alternatives_desc')
def test_do_erase_alternatives(self, get_alternatives_desc_mock, do_erase_dir_silent_mock, run_os_command_mock):
    out = StringIO.StringIO()
    sys.stdout = out
    get_alternatives_desc_mock.return_value = 'somepath to alternative\n'
    run_os_command_mock.return_value = (0, None, None)
    alt_map = {ALT_KEYS[0]: ['alt1'], ALT_KEYS[1]: ['dir1'], }
    self.hostcleanup.do_erase_alternatives(alt_map)
    self.assertTrue(get_alternatives_desc_mock.called)
    get_alternatives_desc_mock.called_once_with('alt1')
    self.assertTrue(run_os_command_mock.called)
    run_os_command_mock.called_once_with(ALT_ERASE_CMD.format('alt1', 'somepath'))
    self.assertTrue(do_erase_dir_silent_mock.called)
    do_erase_dir_silent_mock.called_once_with(['dir1'])
    sys.stdout = sys.__stdout__
