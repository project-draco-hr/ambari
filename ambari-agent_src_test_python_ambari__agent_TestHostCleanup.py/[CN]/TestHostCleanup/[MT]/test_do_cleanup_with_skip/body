@patch.object(HostCleanup.HostCleanup, 'do_clear_cache')
@patch.object(HostCleanup.HostCleanup, 'find_repo_files_for_repos')
@patch.object(OSCheck, 'get_os_type')
@patch.object(HostCleanup.HostCleanup, 'do_kill_processes')
@patch.object(HostCleanup.HostCleanup, 'do_erase_files_silent')
@patch.object(HostCleanup.HostCleanup, 'do_erase_dir_silent')
@patch.object(HostCleanup.HostCleanup, 'do_delete_users')
@patch.object(HostCleanup.HostCleanup, 'do_erase_packages')
def test_do_cleanup_with_skip(self, do_erase_packages_method, do_delete_users_method, do_erase_dir_silent_method, do_erase_files_silent_method, do_kill_processes_method, get_os_type_method, find_repo_files_for_repos_method, clear_cache_mock):
    out = StringIO.StringIO()
    sys.stdout = out
    propertyMap = {PACKAGE_SECTION: ['abcd', 'pqrst'], USER_SECTION: ['abcd', 'pqrst'], REPO_SECTION: ['abcd', 'pqrst'], DIR_SECTION: ['abcd', 'pqrst'], PROCESS_SECTION: ['abcd', 'pqrst'], }
    get_os_type_method.return_value = 'redhat'
    find_repo_files_for_repos_method.return_value = ['abcd', 'pqrst']
    HostCleanup.SKIP_LIST = [PACKAGE_SECTION, REPO_SECTION]
    self.hostcleanup.do_cleanup(propertyMap)
    self.assertTrue(do_delete_users_method.called)
    self.assertTrue(do_erase_dir_silent_method.called)
    self.assertFalse(do_erase_files_silent_method.called)
    self.assertFalse(do_erase_packages_method.called)
    self.assertTrue(do_kill_processes_method.called)
    calls = [call(None), call(['abcd', 'pqrst'])]
    do_erase_dir_silent_method.assert_has_calls(calls)
    do_delete_users_method.assert_called_once_with(['abcd', 'pqrst'])
    do_kill_processes_method.assert_called_once_with(['abcd', 'pqrst'])
    sys.stdout = sys.__stdout__
