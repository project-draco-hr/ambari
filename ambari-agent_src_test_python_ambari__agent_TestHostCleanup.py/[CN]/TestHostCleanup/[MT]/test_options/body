@patch.object(HostCleanup, 'get_YN_input')
@patch.object(HostCleanup.HostCleanup, 'do_cleanup')
@patch.object(HostCleanup.HostCleanup, 'is_current_user_root')
@patch.object(logging.FileHandler, 'setFormatter')
@patch.object(HostCleanup.HostCleanup, 'read_host_check_file')
@patch.object(logging, 'basicConfig')
@patch.object(logging, 'FileHandler')
@patch.object(optparse.OptionParser, 'parse_args')
def test_options(self, parser_mock, file_handler_mock, logging_mock, read_host_check_file_mock, set_formatter_mock, user_root_mock, do_cleanup_mock, get_yn_input_mock):
    parser_mock.return_value = (TestHostCleanup.HostCleanupOptions('/someoutputfile', '/someinputfile', '', False, False), [])
    file_handler_mock.return_value = logging.FileHandler('')
    user_root_mock.return_value = True
    get_yn_input_mock.return_value = True
    HostCleanup.main()
    file_handler_mock.assert_called_with('/someoutputfile')
    self.assertEquals([''], HostCleanup.SKIP_LIST)
    logging_mock.assert_called_with(level=logging.INFO)
    read_host_check_file_mock.assert_called_with('/someinputfile')
    self.assertTrue(get_yn_input_mock.called)
