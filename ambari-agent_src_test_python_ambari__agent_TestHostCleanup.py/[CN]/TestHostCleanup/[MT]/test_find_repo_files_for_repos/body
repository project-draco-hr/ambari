@patch.object(HostCleanup.HostCleanup, 'get_files_in_dir')
@patch.object(OSCheck, 'get_os_type')
def test_find_repo_files_for_repos(self, get_os_type_method, get_files_in_dir_method):
    out = StringIO.StringIO()
    sys.stdout = out
    tmpfile = tempfile.mktemp()
    fileContent = '[###]\n[aass]\n[$$]\n444]saas[333\n1122[naas]2222\nname=sd des derft 3.1\n'
    with open(tmpfile, 'w') as file:
        file.write(fileContent)
    get_os_type_method.return_value = 'redhat'
    get_files_in_dir_method.return_value = [tmpfile]
    repoFiles = self.hostcleanup.find_repo_files_for_repos(['aass'])
    self.assertTrue(get_files_in_dir_method.called)
    self.assertTrue(get_os_type_method.called)
    self.assertEquals(repoFiles, [tmpfile])
    repoFiles = self.hostcleanup.find_repo_files_for_repos(['sd des derft 3.1'])
    self.assertTrue(get_files_in_dir_method.called)
    self.assertTrue(get_os_type_method.called)
    self.assertEquals(repoFiles, [tmpfile])
    repoFiles = self.hostcleanup.find_repo_files_for_repos(['sd des derft 3.1', 'aass'])
    self.assertEquals(repoFiles, [tmpfile])
    repoFiles = self.hostcleanup.find_repo_files_for_repos(['saas'])
    self.assertEquals(repoFiles, [])
    repoFiles = self.hostcleanup.find_repo_files_for_repos([''])
    self.assertEquals(repoFiles, [])
    sys.stdout = sys.__stdout__
