def hive(name=None):
    import params
    if (name == 'hiveserver2'):
        params.HdfsDirectory(params.hive_apps_whs_dir, action='create_delayed', owner=params.hive_user, mode=511)
        params.HdfsDirectory(params.hive_hdfs_user_dir, action='create_delayed', owner=params.hive_user, mode=params.hive_hdfs_user_mode)
        params.HdfsDirectory(None, action='create')
    if ((name == 'metastore') or (name == 'hiveserver2')):
        hive_config_dir = params.hive_server_conf_dir
        config_file_mode = 384
        jdbc_connector()
    else:
        hive_config_dir = params.hive_conf_dir
        config_file_mode = 420
    Directory(hive_config_dir, owner=params.hive_user, group=params.user_group, recursive=True)
    XmlConfig('mapred-site.xml', conf_dir=hive_config_dir, configurations=params.config['configurations']['mapred-site'], owner=params.hive_user, group=params.user_group, mode=config_file_mode)
    XmlConfig('hive-site.xml', conf_dir=hive_config_dir, configurations=params.config['configurations']['hive-site'], owner=params.hive_user, group=params.user_group, mode=config_file_mode)
    environment = {'no_proxy': format('{ambari_server_hostname}'), }
    cmd = format("/bin/sh -c 'cd /usr/lib/ambari-agent/ && curl -kf --retry 5 {jdk_location}{check_db_connection_jar_name} -o {check_db_connection_jar_name}'")
    Execute(cmd, not_if=format('[ -f {check_db_connection_jar_name}]'), environment=environment)
    File(format('{hive_config_dir}/hive-env.sh'), owner=params.hive_user, group=params.user_group, content=Template('hive-env.sh.j2', conf_dir=hive_config_dir))
    if (name == 'metastore'):
        File(params.start_metastore_path, mode=493, content=StaticFile('startMetastore.sh'))
        if params.init_metastore_schema:
            create_schema_cmd = format('export HIVE_CONF_DIR={hive_config_dir} ; {hive_bin}/schematool -initSchema -dbType {hive_metastore_db_type} -userName {hive_metastore_user_name} -passWord {hive_metastore_user_passwd}')
            check_schema_created_cmd = format('export HIVE_CONF_DIR={hive_config_dir} ; {hive_bin}/schematool -info -dbType {hive_metastore_db_type} -userName {hive_metastore_user_name} -passWord {hive_metastore_user_passwd}')
            Execute(create_schema_cmd, not_if=check_schema_created_cmd)
    elif (name == 'hiveserver2'):
        File(params.start_hiveserver2_path, mode=493, content=Template(format('{start_hiveserver2_script}')))
    if (name != 'client'):
        crt_directory(params.hive_pid_dir)
        crt_directory(params.hive_log_dir)
        crt_directory(params.hive_var_lib)
    crt_file(format('{hive_conf_dir}/hive-default.xml.template'))
    crt_file(format('{hive_conf_dir}/hive-env.sh.template'))
    log4j_exec_filename = 'hive-exec-log4j.properties'
    if (params.log4j_exec_props != None):
        File(format('{params.hive_conf_dir}/{log4j_exec_filename}'), mode=420, group=params.user_group, owner=params.hive_user, content=params.log4j_exec_props)
    elif os.path.exists('{params.hive_conf_dir}/{log4j_exec_filename}.template'):
        File(format('{params.hive_conf_dir}/{log4j_exec_filename}'), mode=420, group=params.user_group, owner=params.hive_user, content=StaticFile(format('{params.hive_conf_dir}/{log4j_exec_filename}.template')))
    log4j_filename = 'hive-log4j.properties'
    if (params.log4j_props != None):
        File(format('{params.hive_conf_dir}/{log4j_filename}'), mode=420, group=params.user_group, owner=params.hive_user, content=params.log4j_props)
    elif os.path.exists('{params.hive_conf_dir}/{log4j_filename}.template'):
        File(format('{params.hive_conf_dir}/{log4j_filename}'), mode=420, group=params.user_group, owner=params.hive_user, content=StaticFile(format('{params.hive_conf_dir}/{log4j_filename}.template')))
