{
  Resource resource=new ResourceImpl(Resource.Type.Component);
  resource.setProperty(s_upgradeFinalizedMetricProperty,Boolean.TRUE);
  ClusterController clusterController=createNiceMock(ClusterController.class);
  ComponentResourceProvider crp=createNiceMock(ComponentResourceProvider.class);
  Set<Resource> resourceMap=new HashSet<Resource>();
  resourceMap.add(resource);
  PowerMock.mockStatic(ClusterControllerHelper.class);
  expect(ClusterControllerHelper.getClusterController()).andReturn(clusterController).atLeastOnce();
  expect(clusterController.ensureResourceProvider(anyObject(Resource.Type.class))).andReturn(crp).atLeastOnce();
  expect(clusterController.populateResources(anyObject(Resource.Type.class),anyObject(resourceMap.getClass()),anyObject(Request.class),anyObject(Predicate.class))).andReturn(resourceMap).atLeastOnce();
  PowerMock.replay(ClusterControllerHelper.class);
  replay(crp,clusterController);
  assertEquals(0,m_listener.getAlertEventReceivedCount(AlertReceivedEvent.class));
  HDFSUpgradeFinalizedStatusRunnable runnable=new HDFSUpgradeFinalizedStatusRunnable();
  m_injector.injectMembers(runnable);
  runnable.run();
  assertEquals(1,m_listener.getAlertEventReceivedCount(AlertReceivedEvent.class));
  List<AlertEvent> events=m_listener.getAlertEventInstances(AlertReceivedEvent.class);
  assertEquals(1,events.size());
  AlertReceivedEvent event=(AlertReceivedEvent)events.get(0);
  Alert alert=event.getAlert();
  assertEquals("AMBARI",alert.getService());
  assertEquals("AMBARI_SERVER",alert.getComponent());
  assertEquals(AlertState.OK,alert.getState());
  assertEquals(DEFINITION_NAME,alert.getName());
  verify(m_cluster,m_clusters,m_definitionDao);
}
