{
  AlertTargetEntity entity=s_dao.findTargetById(alertTargetId);
  if (null == entity) {
    String message=MessageFormat.format("The alert target with ID {0} could not be found",alertTargetId);
    throw new AmbariException(message);
  }
  String name=(String)requestMap.get(ALERT_TARGET_NAME);
  String description=(String)requestMap.get(ALERT_TARGET_DESCRIPTION);
  String notificationType=(String)requestMap.get(ALERT_TARGET_NOTIFICATION_TYPE);
  Collection<String> alertStates=(Collection<String>)requestMap.get(ALERT_TARGET_STATES);
  Collection<Long> groupIds=(Collection<Long>)requestMap.get(ALERT_TARGET_GROUPS);
  if (!StringUtils.isBlank(name)) {
    entity.setTargetName(name);
  }
  if (null != description) {
    entity.setDescription(description);
  }
  if (!StringUtils.isBlank(notificationType)) {
    entity.setNotificationType(notificationType);
  }
  String properties=s_gson.toJson(extractProperties(requestMap));
  if (!StringUtils.isEmpty(properties)) {
    entity.setProperties(properties);
  }
  if (null != alertStates) {
    final Set<AlertState> alertStateSet;
    if (alertStates.isEmpty()) {
      alertStateSet=EnumSet.allOf(AlertState.class);
    }
 else {
      alertStateSet=new HashSet<AlertState>(alertStates.size());
      for (      String state : alertStates) {
        alertStateSet.add(AlertState.valueOf(state));
      }
    }
    entity.setAlertStates(alertStateSet);
  }
  if (null != groupIds) {
    Set<AlertGroupEntity> groups=new HashSet<AlertGroupEntity>();
    List<Long> ids=new ArrayList<Long>(groupIds);
    if (ids.size() > 0) {
      groups.addAll(s_dao.findGroupsById(ids));
    }
    entity.setAlertGroups(groups);
  }
  s_dao.merge(entity);
}
