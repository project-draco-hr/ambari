def _copy_files(source_and_dest_pairs, component_user, file_owner, group_owner, kinit_if_needed):
    '\n  :param source_and_dest_pairs: List of tuples (x, y), where x is the source file in the local file system,\n  and y is the destination file path in HDFS\n  :param component_user:  User that will execute the Hadoop commands, usually smokeuser\n  :param file_owner: Owner to set for the file copied to HDFS (typically hdfs account)\n  :param group_owner: Owning group to set for the file copied to HDFS (typically hadoop group)\n  :param kinit_if_needed: kinit command if it is needed, otherwise an empty string\n  :return: Returns 0 if at least one file was copied and no exceptions occurred, and 1 otherwise.\n\n  Must kinit before calling this function.\n  '
    import params
    return_value = 1
    if (source_and_dest_pairs and (len(source_and_dest_pairs) > 0)):
        return_value = 0
        for (source, destination) in source_and_dest_pairs:
            try:
                destination_dir = os.path.dirname(destination)
                params.HdfsDirectory(destination_dir, action='create', owner=file_owner, hdfs_user=params.hdfs_user, mode=365)
                orig_dest_file_name = os.path.split(destination)[1]
                unique_string = str(uuid.uuid4())[:8]
                new_dest_file_name = ((orig_dest_file_name + '.') + unique_string)
                new_destination = os.path.join(destination_dir, new_dest_file_name)
                CopyFromLocal(source, mode=292, owner=file_owner, group=group_owner, user=params.hdfs_user, dest_dir=destination_dir, dest_file=new_dest_file_name, kinnit_if_needed=kinit_if_needed, hdfs_user=params.hdfs_user, hadoop_bin_dir=params.hadoop_bin_dir, hadoop_conf_dir=params.hadoop_conf_dir)
                mv_command = format('fs -mv {new_destination} {destination}')
                ExecuteHadoop(mv_command, user=params.hdfs_user, bin_dir=params.hadoop_bin_dir, conf_dir=params.hadoop_conf_dir)
            except Exception as e:
                Logger.error(('Failed to copy file. Source: %s, Destination: %s. Error: %s' % (source, destination, e.message)))
                return_value = 1
    return return_value
