{
  Map<String,String> oldPropertiesAmsHbaseSite=new HashMap<String,String>(){
{
      put("zookeeper.session.timeout.localHBaseCluster",String.valueOf(20000));
    }
  }
;
  Map<String,String> newPropertiesAmsSite=new HashMap<String,String>(){
{
      put("zookeeper.session.timeout.localHBaseCluster",String.valueOf(120000));
    }
  }
;
  EasyMockSupport easyMockSupport=new EasyMockSupport();
  Clusters clusters=easyMockSupport.createNiceMock(Clusters.class);
  final Cluster cluster=easyMockSupport.createNiceMock(Cluster.class);
  Config mockAmsHbaseSite=easyMockSupport.createNiceMock(Config.class);
  expect(clusters.getClusters()).andReturn(new HashMap<String,Cluster>(){
{
      put("normal",cluster);
    }
  }
).once();
  expect(cluster.getDesiredConfigByType("ams-hbase-site")).andReturn(mockAmsHbaseSite).atLeastOnce();
  expect(mockAmsHbaseSite.getProperties()).andReturn(oldPropertiesAmsHbaseSite).atLeastOnce();
  Injector injector=easyMockSupport.createNiceMock(Injector.class);
  expect(injector.getInstance(Gson.class)).andReturn(null).anyTimes();
  expect(injector.getInstance(MaintenanceStateHelper.class)).andReturn(null).anyTimes();
  expect(injector.getInstance(KerberosHelper.class)).andReturn(createNiceMock(KerberosHelper.class)).anyTimes();
  replay(injector,clusters,mockAmsHbaseSite,cluster);
  AmbariManagementControllerImpl controller=createMockBuilder(AmbariManagementControllerImpl.class).addMockedMethod("createConfiguration").addMockedMethod("getClusters",new Class[]{}).withConstructor(createNiceMock(ActionManager.class),clusters,injector).createNiceMock();
  Injector injector2=easyMockSupport.createNiceMock(Injector.class);
  Capture<ConfigurationRequest> configurationRequestCapture=EasyMock.newCapture();
  ConfigurationResponse configurationResponseMock=easyMockSupport.createMock(ConfigurationResponse.class);
  expect(injector2.getInstance(AmbariManagementController.class)).andReturn(controller).anyTimes();
  expect(controller.getClusters()).andReturn(clusters).anyTimes();
  expect(controller.createConfiguration(capture(configurationRequestCapture))).andReturn(configurationResponseMock).once();
  replay(controller,injector2,configurationResponseMock);
  new UpgradeCatalog213(injector2).updateAMSConfigs();
  easyMockSupport.verifyAll();
  ConfigurationRequest configurationRequest=configurationRequestCapture.getValue();
  Map<String,String> updatedProperties=configurationRequest.getProperties();
  assertTrue(Maps.difference(newPropertiesAmsSite,updatedProperties).areEqual());
}
