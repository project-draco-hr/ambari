{
  final String stackName="HDP";
  final String stackVersion="2.1";
  final String stackNameAndVersion=stackName + "-" + stackVersion;
  final String buildNumber="2.1.0.0-0001";
  final String stackAndBuild=stackName + "-" + buildNumber;
  final String clusterName="c1";
  expect(amc.getAmbariMetaInfo()).andReturn(metaInfo);
  Clusters clusters=createNiceMock(Clusters.class);
  expect(amc.getClusters()).andReturn(clusters);
  Map<String,Cluster> clusterHashMap=new HashMap<String,Cluster>();
  Cluster cluster=createNiceMock(Cluster.class);
  clusterHashMap.put(clusterName,cluster);
  expect(clusters.getClusters()).andReturn(clusterHashMap);
  StackId stackId=new StackId(stackNameAndVersion);
  expect(cluster.getCurrentStackVersion()).andReturn(stackId);
  StackInfo stackInfo=new StackInfo();
  stackInfo.setVersion(buildNumber);
  expect(metaInfo.getStack(stackName,stackVersion)).andReturn(stackInfo);
  StackEntity stackEntity=createNiceMock(StackEntity.class);
  expect(stackEntity.getStackName()).andReturn(stackName);
  expect(stackEntity.getStackVersion()).andReturn(stackVersion);
  expect(stackDAO.find(stackName,stackVersion)).andReturn(stackEntity);
  replay(amc,metaInfo,clusters,cluster,stackEntity,stackDAO);
  RepositoryVersionEntity repositoryVersionEntity=createNiceMock(RepositoryVersionEntity.class);
  expect(repositoryVersionDAO.findByDisplayName(stackAndBuild)).andReturn(null);
  expect(repositoryVersionDAO.findMaxId("id")).andReturn(0L);
  expect(repositoryVersionDAO.findAll()).andReturn(Collections.<RepositoryVersionEntity>emptyList());
  expect(repositoryVersionDAO.create(anyObject(StackEntity.class),anyObject(String.class),anyObject(String.class),anyObject(String.class))).andReturn(repositoryVersionEntity);
  expect(repositoryVersionEntity.getId()).andReturn(1L);
  expect(repositoryVersionEntity.getVersion()).andReturn(buildNumber);
  replay(repositoryVersionDAO,repositoryVersionEntity);
  ClusterVersionEntity clusterVersionEntity=createNiceMock(ClusterVersionEntity.class);
  expect(clusterVersionEntity.getId()).andReturn(1L);
  expect(clusterVersionEntity.getState()).andReturn(RepositoryVersionState.CURRENT);
  expect(clusterVersionEntity.getRepositoryVersion()).andReturn(repositoryVersionEntity);
  expect(clusterVersionDAO.findByClusterAndStackAndVersion(anyObject(String.class),anyObject(StackId.class),anyObject(String.class))).andReturn(null);
  expect(clusterVersionDAO.findMaxId("id")).andReturn(0L);
  expect(clusterVersionDAO.findAll()).andReturn(Collections.<ClusterVersionEntity>emptyList());
  expect(clusterVersionDAO.create(anyObject(ClusterEntity.class),anyObject(RepositoryVersionEntity.class),anyObject(RepositoryVersionState.class),anyLong(),anyLong(),anyObject(String.class))).andReturn(clusterVersionEntity);
  replay(clusterVersionDAO,clusterVersionEntity);
  ClusterEntity clusterEntity=createNiceMock(ClusterEntity.class);
  expect(clusterEntity.getClusterName()).andReturn(clusterName).anyTimes();
  expect(clusterDAO.findByName(anyObject(String.class))).andReturn(clusterEntity);
  Collection<HostEntity> hostEntities=new ArrayList<HostEntity>();
  HostEntity hostEntity1=createNiceMock(HostEntity.class);
  HostEntity hostEntity2=createNiceMock(HostEntity.class);
  expect(hostEntity1.getHostName()).andReturn("host1");
  expect(hostEntity2.getHostName()).andReturn("host2");
  hostEntities.add(hostEntity1);
  hostEntities.add(hostEntity2);
  expect(clusterEntity.getHostEntities()).andReturn(hostEntities);
  expect(hostVersionDAO.findByClusterStackVersionAndHost(anyObject(String.class),anyObject(StackId.class),anyObject(String.class),anyObject(String.class))).andReturn(null);
  expect(hostVersionDAO.findMaxId("id")).andReturn(0L);
  expect(hostVersionDAO.findAll()).andReturn(Collections.<HostVersionEntity>emptyList());
  replay(clusterEntity,clusterDAO,hostVersionDAO,hostEntity1,hostEntity2);
}
