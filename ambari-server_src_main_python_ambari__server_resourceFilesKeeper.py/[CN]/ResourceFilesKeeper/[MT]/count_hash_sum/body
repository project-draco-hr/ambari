def count_hash_sum(self, directory):
    '\n    Recursively counts hash sum of all files in directory and subdirectories.\n    Files and directories are processed in alphabetical order.\n    Ignores previously created directory archives and files containing\n    previously calculated hashes. Compiled pyc files are also ignored\n    '
    try:
        sha1 = hashlib.sha1()
        file_list = []
        for (root, dirs, files) in os.walk(directory):
            for f in files:
                if (not self.is_ignored(f)):
                    full_path = os.path.abspath(os.path.join(root, f))
                    file_list.append(full_path)
        file_list.sort()
        for path in file_list:
            self.dbg_out('Counting hash of {0}'.format(path))
            with open(path, 'rb') as fh:
                while True:
                    data = fh.read(self.BUFFER)
                    if (not data):
                        break
                    sha1.update(data)
        return sha1.hexdigest()
    except Exception as err:
        raise KeeperException('Can not calculate directory hash: {0}'.format(str(err)))
