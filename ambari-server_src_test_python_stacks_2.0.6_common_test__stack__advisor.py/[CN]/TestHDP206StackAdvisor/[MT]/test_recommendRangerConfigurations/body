def test_recommendRangerConfigurations(self):
    clusterData = {}
    services = {'Versions': {'stack_version': '2.3', }, 'services': [{'StackServices': {'service_name': 'RANGER', 'service_version': '0.5.0', }, 'components': [{'StackServiceComponents': {'component_name': 'RANGER_ADMIN', 'hostnames': ['host1'], }, }], }, {'StackServices': {'service_name': 'HDFS', }, 'components': [{'StackServiceComponents': {'component_name': 'NAMENODE', 'hostnames': ['host1'], }, }], }], 'configurations': {'admin-properties': {'properties': {'DB_FLAVOR': 'NOT_EXISTING', }, }, 'ranger-admin-site': {'properties': {'ranger.service.http.port': '7777', 'ranger.service.http.enabled': 'true', }, }, }, }
    expected = {'admin-properties': {'properties': {'SQL_CONNECTOR_JAR': '/usr/share/java/mysql-connector-java.jar', 'policymgr_external_url': 'http://host1:7777', }, }, }
    recommendedConfigurations = {}
    self.stackAdvisor.recommendRangerConfigurations(recommendedConfigurations, clusterData, services, None)
    self.assertEquals(recommendedConfigurations, expected, 'Test for not existing DB_FLAVOR and http enabled, HDP-2.3')
    configurations = {'admin-properties': {'properties': {'DB_FLAVOR': 'POSTGRES', }, }, 'ranger-admin-site': {'properties': {'ranger.service.https.port': '7777', 'ranger.service.http.enabled': 'false', }, }, }
    services['configurations'] = configurations
    expected = {'admin-properties': {'properties': {'SQL_CONNECTOR_JAR': '/usr/share/java/postgresql.jar', 'policymgr_external_url': 'https://host1:7777', }, }, }
    recommendedConfigurations = {}
    self.stackAdvisor.recommendRangerConfigurations(recommendedConfigurations, clusterData, services, None)
    self.assertEquals(recommendedConfigurations, expected, 'Test for DB_FLAVOR POSTGRES and https enabled, HDP-2.3')
    configurations = {'admin-properties': {'properties': {'DB_FLAVOR': 'ORACLE', }, }, 'ranger-site': {'properties': {'http.enabled': 'false', 'https.service.port': '8888', }, }, }
    services['configurations'] = configurations
    expected = {'admin-properties': {'properties': {'SQL_CONNECTOR_JAR': '/usr/share/java/ojdbc6.jar', 'policymgr_external_url': 'https://host1:8888', }, }, 'ranger-env': {'properties': {}, }, }
    recommendedConfigurations = {}
    services['services'][0]['StackServices']['service_version'] = '0.4.0'
    self.stackAdvisor.recommendRangerConfigurations(recommendedConfigurations, clusterData, services, None)
    self.assertEquals(recommendedConfigurations, expected, 'Test for DB_FLAVOR ORACLE and https enabled, HDP-2.2')
    services['ambari-server-properties'] = {'ambari.ldap.isConfigured': 'true', 'authentication.ldap.bindAnonymously': 'false', 'authentication.ldap.baseDn': 'dc=apache,dc=org', 'authentication.ldap.groupNamingAttr': 'cn', 'authentication.ldap.primaryUrl': 'c6403.ambari.apache.org:636', 'authentication.ldap.userObjectClass': 'posixAccount', 'authentication.ldap.secondaryUrl': 'c6403.ambari.apache.org:636', 'authentication.ldap.usernameAttribute': 'uid', 'authentication.ldap.dnAttribute': 'dn', 'authentication.ldap.useSSL': 'true', 'authentication.ldap.managerPassword': '/etc/ambari-server/conf/ldap-password.dat', 'authentication.ldap.groupMembershipAttr': 'memberUid', 'authentication.ldap.groupObjectClass': 'posixGroup', 'authentication.ldap.managerDn': 'uid=hdfs,ou=people,ou=dev,dc=apache,dc=org', }
    services['configurations'] = {}
    expected = {'admin-properties': {'properties': {'policymgr_external_url': 'http://host1:6080', }, }, 'ranger-env': {'properties': {}, }, 'usersync-properties': {'properties': {'SYNC_LDAP_URL': 'ldaps://c6403.ambari.apache.org:636', 'SYNC_LDAP_BIND_DN': 'uid=hdfs,ou=people,ou=dev,dc=apache,dc=org', 'SYNC_LDAP_USER_OBJECT_CLASS': 'posixAccount', 'SYNC_LDAP_USER_NAME_ATTRIBUTE': 'uid', }, }, }
    recommendedConfigurations = {}
    self.stackAdvisor.recommendRangerConfigurations(recommendedConfigurations, clusterData, services, None)
    self.assertEquals(recommendedConfigurations, expected, 'Test Recommend LDAP values')
    del services['ambari-server-properties']
    services['configurations'] = {'core-site': {'properties': {'fs.defaultFS': 'hdfs://host1:8080', }, }, 'ranger-env': {'properties': {'xasecure.audit.destination.db': 'true', 'xasecure.audit.destination.hdfs': 'false', 'xasecure.audit.destination.hdfs.dir': 'hdfs://localhost:8020/ranger/audit/%app-type%/%time:yyyyMMdd%', }, }, 'ranger-hdfs-plugin-properties': {'properties': {}, }, }
    expected = {'admin-properties': {'properties': {'policymgr_external_url': 'http://host1:6080', }, }, 'ranger-hdfs-plugin-properties': {'properties': {'XAAUDIT.HDFS.IS_ENABLED': 'false', 'XAAUDIT.HDFS.DESTINATION_DIRECTORY': 'hdfs://host1:8080/ranger/audit/%app-type%/%time:yyyyMMdd%', 'XAAUDIT.DB.IS_ENABLED': 'true', }, }, 'ranger-env': {'properties': {'xasecure.audit.destination.hdfs.dir': 'hdfs://host1:8080/ranger/audit/%app-type%/%time:yyyyMMdd%', }, }, }
    recommendedConfigurations = {}
    self.stackAdvisor.recommendRangerConfigurations(recommendedConfigurations, clusterData, services, None)
    self.assertEquals(recommendedConfigurations, expected, 'Test Ranger Audit properties')
