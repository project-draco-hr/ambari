{
  ResourceProvider clusterResourceProvider=getResourceProvider(Resource.Type.Cluster);
  Predicate basePredicate=new PredicateBuilder().property(ClusterResourceProvider.CLUSTER_NAME_PROPERTY_ID).equals(clusterName).toPredicate();
  Set<Resource> clusterResource=null;
  try {
    Set<String> propertyIds=new HashSet<String>();
    propertyIds.add(ClusterResourceProvider.CLUSTER_NAME_PROPERTY_ID);
    propertyIds.add(ClusterResourceProvider.CLUSTER_DESIRED_CONFIGS_PROPERTY_ID);
    Map<String,String> requestInfoProperties=new HashMap<String,String>();
    requestInfoProperties.put(ClusterResourceProvider.GET_IGNORE_PERMISSIONS_PROPERTY_ID,"true");
    Request readRequest=PropertyHelper.getReadRequest(propertyIds,requestInfoProperties,null);
    clusterResource=clusterResourceProvider.getResources(readRequest,basePredicate);
  }
 catch (  NoSuchResourceException e) {
    LOG.error("Resource for the desired config not found. " + e);
  }
  String versionTag="version1";
  if (clusterResource != null) {
    for (    Resource resource : clusterResource) {
      Map<String,Object> configs=resource.getPropertiesMap().get(ClusterResourceProvider.CLUSTER_DESIRED_CONFIGS_PROPERTY_ID);
      if (configs != null) {
        DesiredConfig config=(DesiredConfig)configs.get(configType);
        if (config != null) {
          versionTag=config.getTag();
        }
      }
    }
  }
  return versionTag;
}
