{
  Map<String,String> clusterJmxPorts=jmxPortMap.get(clusterName);
  if (clusterJmxPorts == null) {
synchronized (jmxPortMap) {
      clusterJmxPorts=jmxPortMap.get(clusterName);
      if (clusterJmxPorts == null) {
        clusterJmxPorts=new ConcurrentHashMap<String,String>();
        jmxPortMap.put(clusterName,clusterJmxPorts);
      }
    }
  }
  Service.Type service=componentServiceMap.get(componentName);
  if (service != null) {
    try {
      String configType=serviceConfigTypes.get(service);
      String currVersion=getDesiredConfigVersion(clusterName,configType);
      String oldVersion=serviceConfigVersions.get(configType);
      if (!currVersion.equals(oldVersion) || !clusterJmxPorts.containsKey(componentName)) {
        serviceConfigVersions.put(configType,currVersion);
        Map<String,String[]> componentPorts=new HashMap<String,String[]>();
        String[] componentsHttpsPorts;
        if (httpsEnabled) {
          componentsHttpsPorts=serviceDesiredProperties.get(service).get(componentName + "-HTTPS");
        }
 else {
          componentsHttpsPorts=serviceDesiredProperties.get(service).get(componentName);
        }
        componentPorts.put(componentName,componentsHttpsPorts);
        Map<String,String> portMap=getDesiredConfigMap(clusterName,currVersion,serviceConfigTypes.get(service),componentPorts);
        for (        Entry<String,String> entry : portMap.entrySet()) {
          String portString=getPortString(entry.getValue());
          if (null != portString) {
            clusterJmxPorts.put(entry.getKey(),portString);
          }
        }
      }
    }
 catch (    Exception e) {
      LOG.error("Exception initializing jmx port maps. " + e);
    }
  }
  LOG.debug("jmxPortMap -> " + jmxPortMap);
  return clusterJmxPorts.get(componentName);
}
