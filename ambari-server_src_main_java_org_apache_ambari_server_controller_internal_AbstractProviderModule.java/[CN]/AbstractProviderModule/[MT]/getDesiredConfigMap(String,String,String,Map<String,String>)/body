{
  ResourceProvider configResourceProvider=getResourceProvider(Resource.Type.Configuration);
  Predicate configPredicate=new PredicateBuilder().property(ConfigurationResourceProvider.CONFIGURATION_CLUSTER_NAME_PROPERTY_ID).equals(clusterName).and().property(ConfigurationResourceProvider.CONFIGURATION_CONFIG_TYPE_PROPERTY_ID).equals(configType).and().property(ConfigurationResourceProvider.CONFIGURATION_CONFIG_TAG_PROPERTY_ID).equals(versionTag).toPredicate();
  Set<Resource> configResources;
  try {
    configResources=configResourceProvider.getResources(PropertyHelper.getReadRequest(ConfigurationResourceProvider.CONFIGURATION_CLUSTER_NAME_PROPERTY_ID,ConfigurationResourceProvider.CONFIGURATION_CONFIG_TYPE_PROPERTY_ID,ConfigurationResourceProvider.CONFIGURATION_CONFIG_TAG_PROPERTY_ID),configPredicate);
  }
 catch (  NoSuchResourceException e) {
    LOG.info("Resource for the desired config not found. " + e);
    return Collections.emptyMap();
  }
  Map<String,String> mConfigs=new HashMap<String,String>();
  if (configResources != null) {
    for (    Resource res : configResources) {
      Map<String,String> evalutedProperties=null;
      for (      String key : keys.keySet()) {
        String value=(String)res.getPropertyValue(PropertyHelper.getPropertyId(PROPERTIES_CATEGORY,keys.get(key)));
        if (value != null && value.contains("${"))         if (evalutedProperties == null) {
          evalutedProperties=new HashMap<String,String>();
          Map<String,Object> properties=res.getPropertiesMap().get(PROPERTIES_CATEGORY);
          for (          Map.Entry<String,Object> entry : properties.entrySet()) {
            String keyString=entry.getKey();
            Object object=entry.getValue();
            String valueString;
            if (object != null && object instanceof String) {
              valueString=(String)object;
              evalutedProperties.put(keyString,valueString);
              postProcessPropertyValue(keyString,valueString,evalutedProperties,null);
            }
          }
        }
        value=postProcessPropertyValue(keys.get(key),value,evalutedProperties,null);
        LOG.debug("PROPERTY -> key: " + keys.get(key) + ", "+ "value: "+ value);
        mConfigs.put(key,value);
      }
    }
  }
  return mConfigs;
}
