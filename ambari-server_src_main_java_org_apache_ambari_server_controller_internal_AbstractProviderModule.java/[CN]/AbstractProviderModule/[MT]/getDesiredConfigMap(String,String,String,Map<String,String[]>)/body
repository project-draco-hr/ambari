{
  ResourceProvider configResourceProvider=getResourceProvider(Resource.Type.Configuration);
  Predicate configPredicate=new PredicateBuilder().property(ConfigurationResourceProvider.CONFIGURATION_CLUSTER_NAME_PROPERTY_ID).equals(clusterName).and().property(ConfigurationResourceProvider.CONFIGURATION_CONFIG_TYPE_PROPERTY_ID).equals(configType).and().property(ConfigurationResourceProvider.CONFIGURATION_CONFIG_TAG_PROPERTY_ID).equals(versionTag).toPredicate();
  Set<Resource> configResources;
  try {
    configResources=configResourceProvider.getResources(PropertyHelper.getReadRequest(ConfigurationResourceProvider.CONFIGURATION_CLUSTER_NAME_PROPERTY_ID,ConfigurationResourceProvider.CONFIGURATION_CONFIG_TYPE_PROPERTY_ID,ConfigurationResourceProvider.CONFIGURATION_CONFIG_TAG_PROPERTY_ID),configPredicate);
  }
 catch (  NoSuchResourceException e) {
    LOG.info("Resource for the desired config not found. " + e);
    return Collections.emptyMap();
  }
  Map<String,String> mConfigs=new HashMap<String,String>();
  if (configResources != null) {
    for (    Resource res : configResources) {
      Map<String,String> evaluatedProperties=null;
      for (      Entry<String,String[]> entry : keys.entrySet()) {
        String propName=null;
        String value=null;
        for (        String pname : entry.getValue()) {
          propName=pname;
          Map<String,Object> properties=res.getPropertiesMap().get(PROPERTIES_CATEGORY);
          if (properties != null) {
            for (            Map.Entry<String,Object> propertyEntry : properties.entrySet()) {
              if (propertyEntry.getKey().startsWith(pname)) {
                value=(String)propertyEntry.getValue();
                break;
              }
            }
          }
          if (null != value) {
            break;
          }
        }
        if (value != null && value.contains("${")) {
          if (evaluatedProperties == null) {
            evaluatedProperties=new HashMap<String,String>();
            Map<String,Object> properties=res.getPropertiesMap().get(PROPERTIES_CATEGORY);
            for (            Map.Entry<String,Object> subentry : properties.entrySet()) {
              String keyString=subentry.getKey();
              Object object=subentry.getValue();
              String valueString;
              if (object != null && object instanceof String) {
                valueString=(String)object;
                evaluatedProperties.put(keyString,valueString);
                postProcessPropertyValue(keyString,valueString,evaluatedProperties,null);
              }
            }
          }
        }
        value=postProcessPropertyValue(propName,value,evaluatedProperties,null);
        LOG.debug("PROPERTY -> key: " + propName + ", "+ "value: "+ value);
        mConfigs.put(entry.getKey(),value);
      }
    }
  }
  return mConfigs;
}
