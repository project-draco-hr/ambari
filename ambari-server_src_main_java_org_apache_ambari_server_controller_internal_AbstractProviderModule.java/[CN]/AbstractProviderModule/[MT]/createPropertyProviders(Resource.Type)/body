{
  List<PropertyProvider> providers=new LinkedList<PropertyProvider>();
  ComponentSSLConfiguration configuration=ComponentSSLConfiguration.instance();
  URLStreamProvider streamProvider=new URLStreamProvider(PROPERTY_REQUEST_CONNECT_TIMEOUT,PROPERTY_REQUEST_READ_TIMEOUT,configuration);
  if (type.isInternalType()) {
switch (type.getInternalType()) {
case Cluster:
      providers.add(createMetricsReportPropertyProvider(type,streamProvider,ComponentSSLConfiguration.instance(),this,this,PropertyHelper.getPropertyId("Clusters","cluster_name")));
    providers.add(new AlertSummaryPropertyProvider(type,"Clusters/cluster_name",null));
  break;
case Service:
providers.add(new AlertSummaryPropertyProvider(type,"ServiceInfo/cluster_name","ServiceInfo/service_name"));
break;
case Host:
providers.add(createMetricsHostPropertyProvider(type,streamProvider,ComponentSSLConfiguration.instance(),this,this,PropertyHelper.getPropertyId("Hosts","cluster_name"),PropertyHelper.getPropertyId("Hosts","host_name")));
providers.add(new AlertSummaryPropertyProvider(type,"Hosts/cluster_name","Hosts/host_name"));
break;
case Component:
{
PropertyProvider jpp=createJMXPropertyProvider(type,streamProvider,this,this,PropertyHelper.getPropertyId("ServiceComponentInfo","cluster_name"),null,PropertyHelper.getPropertyId("ServiceComponentInfo","component_name"),PropertyHelper.getPropertyId("ServiceComponentInfo","state"));
PropertyProvider gpp=null;
gpp=createMetricsComponentPropertyProvider(type,streamProvider,ComponentSSLConfiguration.instance(),this,this,PropertyHelper.getPropertyId("ServiceComponentInfo","cluster_name"),PropertyHelper.getPropertyId("ServiceComponentInfo","component_name"));
providers.add(new StackDefinedPropertyProvider(type,this,this,this,streamProvider,PropertyHelper.getPropertyId("ServiceComponentInfo","cluster_name"),null,PropertyHelper.getPropertyId("ServiceComponentInfo","component_name"),PropertyHelper.getPropertyId("ServiceComponentInfo","state"),jpp,gpp));
}
break;
case HostComponent:
{
PropertyProvider jpp=createJMXPropertyProvider(type,streamProvider,this,this,PropertyHelper.getPropertyId("HostRoles","cluster_name"),PropertyHelper.getPropertyId("HostRoles","host_name"),PropertyHelper.getPropertyId("HostRoles","component_name"),PropertyHelper.getPropertyId("HostRoles","state"));
PropertyProvider gpp=null;
gpp=createMetricsHostComponentPropertyProvider(type,streamProvider,ComponentSSLConfiguration.instance(),this,this,PropertyHelper.getPropertyId("HostRoles","cluster_name"),PropertyHelper.getPropertyId("HostRoles","host_name"),PropertyHelper.getPropertyId("HostRoles","component_name"));
providers.add(new StackDefinedPropertyProvider(type,this,this,this,streamProvider,PropertyHelper.getPropertyId("HostRoles","cluster_name"),PropertyHelper.getPropertyId("HostRoles","host_name"),PropertyHelper.getPropertyId("HostRoles","component_name"),PropertyHelper.getPropertyId("HostRoles","state"),jpp,gpp));
providers.add(new HttpPropertyProvider(streamProvider,managementController.getClusters(),PropertyHelper.getPropertyId("HostRoles","cluster_name"),PropertyHelper.getPropertyId("HostRoles","host_name"),PropertyHelper.getPropertyId("HostRoles","component_name"),HTTP_PROPERTY_REQUESTS));
providers.add(new LoggingSearchPropertyProvider());
}
break;
case RootServiceComponent:
providers.add(new RootServiceComponentPropertyProvider());
break;
default :
break;
}
}
putPropertyProviders(type,providers);
}
