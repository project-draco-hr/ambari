def select(stack_name, package, version, try_create=True, ignore_errors=False):
    '\n  Selects a config version for the specified package. If this detects that\n  the stack supports configuration versioning but /etc/<component>/conf is a\n  directory, then it will attempt to bootstrap the conf.backup directory and change\n  /etc/<component>/conf into a symlink.\n\n  :param stack_name: the name of the stack\n  :param package: the name of the package, as-used by <conf-selector-tool>\n  :param version: the version number to create\n  :param try_create: optional argument to attempt to create the directory before setting it\n  :param ignore_errors: optional argument to ignore any error and simply log a warning\n  '
    try:
        if (not _valid(stack_name, package, version)):
            return
        if try_create:
            create(stack_name, package, version)
        shell.checked_call(_get_cmd('set-conf-dir', package, version), logoutput=False, quiet=False, sudo=True)
        package_dirs = get_package_dirs()
        if (package in package_dirs):
            Logger.info('Ensuring that {0} has the correct symlink structure'.format(package))
            directory_list = package_dirs[package]
            for directory_structure in directory_list:
                conf_dir = directory_structure['conf_dir']
                current_dir = directory_structure['current_dir']
                if (not os.path.islink(conf_dir)):
                    if os.path.exists(conf_dir):
                        parent_directory = os.path.dirname(conf_dir)
                        conf_backup_dir = os.path.join(parent_directory, 'conf.backup')
                        Execute(('cp', '-R', '-p', conf_dir, conf_backup_dir), not_if=format('test -e {conf_backup_dir}'), sudo=True)
                        Directory(conf_dir, action='delete')
                        Link(conf_dir, to=conf_backup_dir)
                    elif (package in ['atlas']):
                        '\n              In the case of Atlas, the Hive RPM installs /usr/$stack/$version/atlas with some partial packages that\n              contain Hive hooks, while the Atlas RPM is responsible for installing the full content.\n\n              If the user does not have Atlas currently installed on their stack, then /usr/$stack/current/atlas-client\n              will be a broken symlink, and we should not create the\n              symlink /etc/atlas/conf -> /usr/$stack/current/atlas-client/conf .\n              If we mistakenly create this symlink, then when the user performs an EU/RU and then adds Atlas service\n              then the Atlas RPM will not be able to copy its artifacts into /etc/atlas/conf directory and therefore\n              prevent Ambari from by copying those unmanaged contents into /etc/atlas/$version/0\n              '
                        parent_dir = os.path.dirname(current_dir)
                        if os.path.exists(parent_dir):
                            Link(conf_dir, to=current_dir)
                        else:
                            Logger.info("Will not create symlink from {0} to {1} because the destination's parent dir does not exist.".format(conf_dir, current_dir))
                    else:
                        Link(conf_dir, to=current_dir)
    except Exception as exception:
        if (ignore_errors is True):
            Logger.warning('Could not select the directory for package {0}. Error: {1}'.format(package, str(exception)))
        else:
            raise
