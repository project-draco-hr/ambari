def _seed_new_configuration_directories(package, created_directories):
    '\n  Copies any files from the "current" configuration directory to the directories which were\n  newly created with <conf-selector-tool>. This function helps ensure that files which are not tracked\n  by Ambari will be available after performing a stack upgrade. Although old configurations\n  will be copied as well, they will be overwritten when the components are writing out their\n  configs after upgrade during their restart.\n\n  This function will catch all errors, logging them, but not raising an exception. This is to\n  prevent problems here from stopping and otherwise healthy upgrade.\n\n  :param package: the <conf-selector-tool> package name\n  :param created_directories: a list of directories that <conf-selector-tool> said it created\n  :return: None\n  '
    package_dirs = get_package_dirs()
    if (package not in package_dirs):
        Logger.warning('Unable to seed newly created configuration directories for {0} because it is an unknown component'.format(package))
        return
    Logger.info('Seeding versioned configuration directories for {0}'.format(package))
    expected_directories = package_dirs[package]
    try:
        if (len(created_directories) != len(expected_directories)):
            Logger.warning('The known configuration directories for {0} do not match those created by conf-select: {1}'.format(package, str(created_directories)))
            return
        if (len(expected_directories) == 1):
            source_seed_directory = expected_directories[0]['current_dir']
            target_seed_directory = created_directories[0]
            _copy_configurations(source_seed_directory, target_seed_directory)
        else:
            for created_directory in created_directories:
                for expected_directory_structure in expected_directories:
                    prefix = expected_directory_structure.get('prefix', None)
                    if ((prefix is not None) and created_directory.startswith(prefix)):
                        source_seed_directory = expected_directory_structure['current_dir']
                        target_seed_directory = created_directory
                        _copy_configurations(source_seed_directory, target_seed_directory)
    except Exception as e:
        Logger.warning('Unable to seed new configuration directories for {0}. {1}'.format(package, str(e)))
