def build(self, forced_component_status=None):
    '\n    If forced_component_status is explicitly defined, than StatusCheck methods are\n    not used. This feature has been added to support custom (ver 2.0) services.\n    '
    global SERVICES, CLIENT_COMPONENTS, COMPONENTS, LIVE_STATUS, DEAD_STATUS
    component = {'serviceName': self.service, 'componentName': self.component, }
    if forced_component_status:
        status = forced_component_status
    elif (component in self.CLIENT_COMPONENTS):
        status = self.DEAD_STATUS
    elif (component in self.COMPONENTS):
        statusCheck = StatusCheck(AmbariConfig.servicesToPidNames, AmbariConfig.pidPathVars, self.globalConfig, AmbariConfig.servicesToLinuxUser)
        serviceStatus = statusCheck.getStatus(self.component)
        if (serviceStatus is None):
            logger.warn(('There is no service to pid mapping for ' + self.component))
        status = (self.LIVE_STATUS if serviceStatus else self.DEAD_STATUS)
    livestatus = {'componentName': self.component, 'msg': '', 'status': status, 'clusterName': self.cluster, 'serviceName': self.service, 'stackVersion': self.versionsHandler.read_stack_version(self.component), }
    active_config = self.actualConfigHandler.read_actual_component(self.component)
    if (not (active_config is None)):
        livestatus['configurationTags'] = active_config
    logger.debug(((((('The live status for component ' + str(self.component)) + ' of service ') + str(self.service)) + ' is ') + str(livestatus)))
    return livestatus
