{
  AmbariManagementController ams=createNiceMock(AmbariManagementController.class);
  PowerMock.mockStatic(AmbariServer.class);
  expect(AmbariServer.getController()).andReturn(ams);
  AmbariMetaInfo ambariMetaInfo=createNiceMock(AmbariMetaInfo.class);
  Clusters clusters=createNiceMock(Clusters.class);
  Cluster cluster=createNiceMock(Cluster.class);
  ComponentInfo componentInfo=createNiceMock(ComponentInfo.class);
  StackId stackId=new StackId("HDP","2.2");
  expect(ams.getClusters()).andReturn(clusters).anyTimes();
  try {
    expect(clusters.getCluster(anyObject(String.class))).andReturn(cluster).anyTimes();
  }
 catch (  AmbariException e) {
    e.printStackTrace();
  }
  expect(cluster.getCurrentStackVersion()).andReturn(stackId).anyTimes();
  expect(ams.getAmbariMetaInfo()).andReturn(ambariMetaInfo).anyTimes();
  expect(ambariMetaInfo.getComponentToService("HDP","2.2","HBASE_REGIONSERVER")).andReturn("HBASE").anyTimes();
  expect(ambariMetaInfo.getComponent("HDP","2.2","HBASE","HBASE_REGIONSERVER")).andReturn(componentInfo).anyTimes();
  expect(componentInfo.getTimelineAppid()).andReturn("HBASE");
  replay(ams,clusters,cluster,ambariMetaInfo,componentInfo);
  PowerMock.replayAll();
  TestStreamProvider streamProvider=new TestStreamProvider(AGGREGATE_METRICS_FILE_PATH);
  TestMetricHostProvider metricHostProvider=new TestMetricHostProvider();
  ComponentSSLConfiguration sslConfiguration=mock(ComponentSSLConfiguration.class);
  Map<String,Map<String,PropertyInfo>> propertyIds=PropertyHelper.getMetricPropertyIds(Resource.Type.Component);
  PropertyHelper.updateMetricsWithAggregateFunctionSupport(propertyIds);
  AMSComponentPropertyProvider propertyProvider=new AMSComponentPropertyProvider(propertyIds,streamProvider,sslConfiguration,metricHostProvider,CLUSTER_NAME_PROPERTY_ID,COMPONENT_NAME_PROPERTY_ID);
  String propertyId=PropertyHelper.getPropertyId("metrics/rpc","NumOpenConnections._sum");
  Resource resource=new ResourceImpl(Resource.Type.Component);
  resource.setProperty(COMPONENT_NAME_PROPERTY_ID,"HBASE_REGIONSERVER");
  Map<String,TemporalInfo> temporalInfoMap=new HashMap<String,TemporalInfo>();
  temporalInfoMap.put(propertyId,new TemporalInfoImpl(1429824611300L,1429825241400L,1L));
  Request request=PropertyHelper.getReadRequest(Collections.singleton(propertyId),temporalInfoMap);
  Set<Resource> resources=propertyProvider.populateResources(Collections.singleton(resource),request,null);
  Assert.assertEquals(1,resources.size());
  Resource res=resources.iterator().next();
  Map<String,Object> properties=PropertyHelper.getProperties(resources.iterator().next());
  Assert.assertNotNull(properties);
  URIBuilder uriBuilder=AMSPropertyProvider.getAMSUriBuilder("localhost",8188);
  uriBuilder.addParameter("metricNames","rpc.rpc.NumOpenConnections._sum");
  uriBuilder.addParameter("appId","HBASE");
  uriBuilder.addParameter("startTime","1429824611300");
  uriBuilder.addParameter("endTime","1429825241400");
  Assert.assertEquals(uriBuilder.toString(),streamProvider.getLastSpec());
  Number[][] val=(Number[][])res.getPropertyValue(propertyId);
  Assert.assertEquals(32,val.length);
}
