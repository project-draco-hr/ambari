{
  TestStreamProvider streamProvider=new TestStreamProvider(MULTIPLE_HOST_METRICS_FILE_PATH);
  TestMetricHostProvider metricHostProvider=new TestMetricHostProvider();
  ComponentSSLConfiguration sslConfiguration=mock(ComponentSSLConfiguration.class);
  Map<String,Map<String,PropertyInfo>> propertyIds=PropertyHelper.getMetricPropertyIds(Resource.Type.Host);
  AMSPropertyProvider propertyProvider=new AMSHostPropertyProvider(propertyIds,streamProvider,sslConfiguration,metricHostProvider,CLUSTER_NAME_PROPERTY_ID,HOST_NAME_PROPERTY_ID);
  Resource resource=new ResourceImpl(Resource.Type.Host);
  resource.setProperty(HOST_NAME_PROPERTY_ID,"h1");
  Map<String,TemporalInfo> temporalInfoMap=new HashMap<String,TemporalInfo>();
  temporalInfoMap.put(PROPERTY_ID1,new TemporalInfoImpl(1416445244701L,1416445244901L,1L));
  temporalInfoMap.put(PROPERTY_ID2,new TemporalInfoImpl(1416445244701L,1416445244901L,1L));
  Request request=PropertyHelper.getReadRequest(new HashSet<String>(){
{
      add(PROPERTY_ID1);
      add(PROPERTY_ID2);
    }
  }
,temporalInfoMap);
  Set<Resource> resources=propertyProvider.populateResources(Collections.singleton(resource),request,null);
  Assert.assertEquals(1,resources.size());
  Resource res=resources.iterator().next();
  Map<String,Object> properties=PropertyHelper.getProperties(resources.iterator().next());
  Assert.assertNotNull(properties);
  URIBuilder uriBuilder=AMSPropertyProvider.getUriBuilder("localhost",8188);
  uriBuilder.addParameter("metricNames","cpu_user,mem_free");
  uriBuilder.addParameter("hostname","h1");
  uriBuilder.addParameter("appId","HOST");
  uriBuilder.addParameter("startTime","1416445244701");
  uriBuilder.addParameter("endTime","1416445244901");
  URIBuilder uriBuilder2=AMSPropertyProvider.getUriBuilder("localhost",8188);
  uriBuilder2.addParameter("metricNames","mem_free,cpu_user");
  uriBuilder2.addParameter("hostname","h1");
  uriBuilder2.addParameter("appId","HOST");
  uriBuilder2.addParameter("startTime","1416445244701");
  uriBuilder2.addParameter("endTime","1416445244901");
  Assert.assertTrue(uriBuilder.toString().equals(streamProvider.getLastSpec()) || uriBuilder2.toString().equals(streamProvider.getLastSpec()));
  Number[][] val=(Number[][])res.getPropertyValue(PROPERTY_ID1);
  Assert.assertEquals(111,val.length);
  val=(Number[][])res.getPropertyValue(PROPERTY_ID2);
  Assert.assertEquals(86,val.length);
}
