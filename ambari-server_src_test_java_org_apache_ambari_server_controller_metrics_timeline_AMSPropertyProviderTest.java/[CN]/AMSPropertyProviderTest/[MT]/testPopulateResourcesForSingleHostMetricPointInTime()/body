{
  setUpCommonMocks();
  TestStreamProvider streamProvider=new TestStreamProvider(SINGLE_HOST_METRICS_FILE_PATH);
  injectCacheEntryFactoryWithStreamProvider(streamProvider);
  TestMetricHostProvider metricHostProvider=new TestMetricHostProvider();
  ComponentSSLConfiguration sslConfiguration=mock(ComponentSSLConfiguration.class);
  Map<String,Map<String,PropertyInfo>> propertyIds=PropertyHelper.getMetricPropertyIds(Resource.Type.Host);
  AMSPropertyProvider propertyProvider=new AMSHostPropertyProvider(propertyIds,streamProvider,sslConfiguration,cacheProvider,metricHostProvider,CLUSTER_NAME_PROPERTY_ID,HOST_NAME_PROPERTY_ID);
  Resource resource=new ResourceImpl(Resource.Type.Host);
  resource.setProperty(CLUSTER_NAME_PROPERTY_ID,"c1");
  resource.setProperty(HOST_NAME_PROPERTY_ID,"h1");
  Map<String,TemporalInfo> temporalInfoMap=Collections.emptyMap();
  Request request=PropertyHelper.getReadRequest(Collections.singleton(PROPERTY_ID1),temporalInfoMap);
  System.out.println(request);
  Set<Resource> resources=propertyProvider.populateResources(Collections.singleton(resource),request,null);
  Assert.assertEquals(1,resources.size());
  Resource res=resources.iterator().next();
  Map<String,Object> properties=PropertyHelper.getProperties(res);
  Assert.assertNotNull(properties);
  URIBuilder uriBuilder=AMSPropertyProvider.getAMSUriBuilder("localhost",8188);
  uriBuilder.addParameter("metricNames","cpu_user");
  uriBuilder.addParameter("hostname","h1");
  uriBuilder.addParameter("appId","HOST");
  Assert.assertEquals(uriBuilder.toString(),streamProvider.getLastSpec());
  Double val=(Double)res.getPropertyValue(PROPERTY_ID1);
  Assert.assertEquals(41.088,val,0.001);
}
