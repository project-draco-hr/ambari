{
  TestStreamProvider streamProvider=new TestStreamProvider(EMBEDDED_METRICS_FILE_PATH);
  TestMetricHostProvider metricHostProvider=new TestMetricHostProvider();
  ComponentSSLConfiguration sslConfiguration=mock(ComponentSSLConfiguration.class);
  Map<String,Map<String,PropertyInfo>> propertyIds=PropertyHelper.getMetricPropertyIds(Resource.Type.Component);
  AMSPropertyProvider propertyProvider=new AMSComponentPropertyProvider(propertyIds,streamProvider,sslConfiguration,metricHostProvider,CLUSTER_NAME_PROPERTY_ID,COMPONENT_NAME_PROPERTY_ID);
  String propertyId=PropertyHelper.getPropertyId("metrics/hbase/regionserver","requests");
  Resource resource=new ResourceImpl(Resource.Type.Component);
  resource.setProperty(HOST_NAME_PROPERTY_ID,"h1");
  resource.setProperty(COMPONENT_NAME_PROPERTY_ID,"METRICS_COLLECTOR");
  Map<String,TemporalInfo> temporalInfoMap=new HashMap<String,TemporalInfo>();
  temporalInfoMap.put(propertyId,new TemporalInfoImpl(1421694000L,1421697600L,1L));
  Request request=PropertyHelper.getReadRequest(Collections.singleton(propertyId),temporalInfoMap);
  Set<Resource> resources=propertyProvider.populateResources(Collections.singleton(resource),request,null);
  Assert.assertEquals(1,resources.size());
  Resource res=resources.iterator().next();
  Map<String,Object> properties=PropertyHelper.getProperties(resources.iterator().next());
  Assert.assertNotNull(properties);
  URIBuilder uriBuilder=AMSPropertyProvider.getAMSUriBuilder("localhost",8188);
  uriBuilder.addParameter("metricNames","regionserver.Server.totalRequestCount");
  uriBuilder.addParameter("appId","AMS-HBASE");
  uriBuilder.addParameter("startTime","1421694000");
  uriBuilder.addParameter("endTime","1421697600");
  Assert.assertEquals(uriBuilder.toString(),streamProvider.getLastSpec());
  Number[][] val=(Number[][])res.getPropertyValue(propertyId);
  Assert.assertEquals(188,val.length);
}
