{
  Multimap<String,ServicePropertyInfo> servicePropsByName=Multimaps.index(getServicePropertyList(),new Function<ServicePropertyInfo,String>(){
    @Override public String apply(    ServicePropertyInfo servicePropertyInfo){
      return servicePropertyInfo.getName();
    }
  }
);
  for (  String propertyName : servicePropsByName.keySet()) {
    if (servicePropsByName.get(propertyName).size() > 1) {
      setValid(false);
      addError("Duplicate service property with name '" + propertyName + "' found in "+ getName()+ ":"+ getVersion()+ " service definition !");
    }
  }
  for (  ComponentInfo component : getComponents()) {
    int primaryLogs=0;
    for (    LogDefinition log : component.getLogs()) {
      primaryLogs+=log.isPrimary() ? 1 : 0;
    }
    if (primaryLogs > 1) {
      setValid(false);
      addError("More than one primary log exists for the component " + component.getName());
    }
  }
  if (credentialStoreInfo != null) {
    if (credentialStoreInfo.isSupported() != null && credentialStoreInfo.isEnabled() != null) {
      if (!credentialStoreInfo.isSupported() && credentialStoreInfo.isEnabled()) {
        setValid(false);
        addError("Credential store cannot be enabled for service " + getName() + " as it does not support it.");
      }
    }
    if (credentialStoreInfo.isSupported() == null) {
      setValid(false);
      addError("Credential store supported is not specified for service " + getName());
    }
    if (credentialStoreInfo.isEnabled() == null) {
      setValid(false);
      addError("Credential store enabled is not specified for service " + getName());
    }
  }
}
