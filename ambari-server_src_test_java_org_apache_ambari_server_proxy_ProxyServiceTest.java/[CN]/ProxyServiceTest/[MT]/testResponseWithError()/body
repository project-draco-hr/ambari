{
  ProxyService ps=new ProxyService();
  URLStreamProvider streamProviderMock=PowerMock.createNiceMock(URLStreamProvider.class);
  HttpURLConnection urlConnectionMock=createMock(HttpURLConnection.class);
  URI uriMock=PowerMock.createMock(URI.class);
  MultivaluedMap<String,String> headerParams=new MultivaluedMapImpl();
  Map<String,List<String>> headerParamsToForward=new HashMap<String,List<String>>();
  headerParams.add("AmbariProxy-User-Remote","testuser");
  headerParams.add("Content-Type","testtype");
  List<String> userRemoteParams=new LinkedList<String>();
  userRemoteParams.add("testuser");
  headerParamsToForward.put("User-Remote",userRemoteParams);
  expect(getHttpHeaders().getRequestHeaders()).andReturn(headerParams);
  expect(getHttpHeaders().getRequestHeader("AmbariProxy-User-Remote")).andReturn(userRemoteParams);
  expect(getUriInfo().getRequestUri()).andReturn(uriMock);
  expect(uriMock.getQuery()).andReturn("url=testurl");
  expect(streamProviderMock.processURL("testurl","GET",null,headerParamsToForward)).andReturn(urlConnectionMock);
  expect(urlConnectionMock.getResponseCode()).andReturn(405).times(2);
  PowerMock.expectNew(URLStreamProvider.class,3000,3000,null,null,null).andReturn(streamProviderMock);
  PowerMock.replay(streamProviderMock,URLStreamProvider.class,uriMock,URI.class);
  replay(getUriInfo(),urlConnectionMock,getHttpHeaders());
  ps.processGetRequestForwarding(getHttpHeaders(),getUriInfo());
}
