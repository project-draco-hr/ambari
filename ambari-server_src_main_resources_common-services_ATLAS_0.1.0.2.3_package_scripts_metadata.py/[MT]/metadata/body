def metadata(type='server'):
    import params
    Directory(params.conf_dir, mode=493, cd_access='a', owner=params.metadata_user, group=params.user_group, create_parents=True)
    if (type == 'server'):
        Directory([params.pid_dir], mode=493, cd_access='a', owner=params.metadata_user, group=params.user_group, create_parents=True)
        Directory(format('{conf_dir}/solr'), mode=493, cd_access='a', owner=params.metadata_user, group=params.user_group, create_parents=True, recursive_ownership=True)
        Directory(params.log_dir, mode=493, cd_access='a', owner=params.metadata_user, group=params.user_group, create_parents=True)
        Directory(params.data_dir, mode=420, cd_access='a', owner=params.metadata_user, group=params.user_group, create_parents=True)
        Directory(params.expanded_war_dir, mode=420, cd_access='a', owner=params.metadata_user, group=params.user_group, create_parents=True)
        File(format('{expanded_war_dir}/atlas.war'), content=StaticFile(format('{metadata_home}/server/webapp/atlas.war')))
        File(format('{conf_dir}/atlas-log4j.xml'), mode=420, owner=params.metadata_user, group=params.user_group, content=InlineTemplate(params.metadata_log4j_content))
        File(format('{conf_dir}/atlas-env.sh'), owner=params.metadata_user, group=params.user_group, mode=493, content=InlineTemplate(params.metadata_env_content))
        files_to_chown = [format('{conf_dir}/policy-store.txt'), format('{conf_dir}/users-credentials.properties')]
        for file in files_to_chown:
            if os.path.exists(file):
                Execute(('chown', format('{metadata_user}:{user_group}'), file), sudo=True)
                Execute(('chmod', '644', file), sudo=True)
        if params.metadata_solrconfig_content:
            File(format('{conf_dir}/solr/solrconfig.xml'), mode=420, owner=params.metadata_user, group=params.user_group, content=InlineTemplate(params.metadata_solrconfig_content))
    PropertiesFile(format('{conf_dir}/{conf_file}'), properties=params.application_properties, mode=420, owner=params.metadata_user, group=params.user_group)
    if params.security_enabled:
        TemplateConfig(format(params.atlas_jaas_file), owner=params.metadata_user)
    if ((type == 'server') and params.search_backend_solr and params.has_infra_solr):
        solr_cloud_util.setup_solr_client(params.config)
        check_znode()
        jaasFile = (params.atlas_jaas_file if params.security_enabled else None)
        upload_conf_set('atlas_configs', jaasFile)
        create_collection('vertex_index', 'atlas_configs', jaasFile)
        create_collection('edge_index', 'atlas_configs', jaasFile)
        create_collection('fulltext_index', 'atlas_configs', jaasFile)
    File(params.atlas_hbase_setup, group=params.user_group, owner=params.hbase_user, content=Template('atlas_hbase_setup.rb.j2'))
    is_atlas_upgrade_support = check_stack_feature(StackFeature.ATLAS_UPGRADE_SUPPORT, get_stack_feature_version(params.config))
    if (is_atlas_upgrade_support and params.security_enabled):
        File(params.atlas_kafka_setup, group=params.user_group, owner=params.kafka_user, content=Template('atlas_kafka_acl.sh.j2'))
        if (not params.host_with_kafka):
            File(format('{kafka_conf_dir}/kafka-env.sh'), owner=params.kafka_user, content=InlineTemplate(params.kafka_env_sh_template))
            File(format('{kafka_conf_dir}/kafka_jaas.conf'), group=params.user_group, owner=params.kafka_user, content=Template('kafka_jaas.conf.j2'))
