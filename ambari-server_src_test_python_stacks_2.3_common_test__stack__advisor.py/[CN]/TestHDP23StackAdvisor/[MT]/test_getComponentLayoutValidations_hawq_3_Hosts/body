@patch('socket.getfqdn', side_effect=fqdn_mock_result)
def test_getComponentLayoutValidations_hawq_3_Hosts(self, socket_mock):
    ' Test layout validations for HAWQ components on a 3-node cluster '
    services = self.load_json('services-normal-hawq-3-hosts.json')
    componentsListList = [service['components'] for service in services['services']]
    componentsList = [item for sublist in componentsListList for item in sublist]
    hawqMasterHosts = [component['StackServiceComponents']['hostnames'] for component in componentsList if (component['StackServiceComponents']['component_name'] == 'HAWQMASTER')]
    hawqStandbyHosts = [component['StackServiceComponents']['hostnames'] for component in componentsList if (component['StackServiceComponents']['component_name'] == 'HAWQSTANDBY')]
    self.assertEquals(len(hawqMasterHosts[0]), 1)
    self.assertEquals(len(hawqStandbyHosts[0]), 1)
    self.assertNotEquals(hawqMasterHosts[0][0], hawqStandbyHosts[0][0])
    hosts = self.load_json('hosts-3-hosts.json')
    hostsList = [host['Hosts']['host_name'] for host in hosts['items']]
    self.assertEquals(len(hostsList), 3)
    validations = self.stackAdvisor.getComponentLayoutValidations(services, hosts)
    self.assertEquals(len(validations), 0)
    services = self.load_json('services-master_standby_colo-3-hosts.json')
    componentsListList = [service['components'] for service in services['services']]
    componentsList = [item for sublist in componentsListList for item in sublist]
    hawqMasterHosts = [component['StackServiceComponents']['hostnames'] for component in componentsList if (component['StackServiceComponents']['component_name'] == 'HAWQMASTER')]
    hawqStandbyHosts = [component['StackServiceComponents']['hostnames'] for component in componentsList if (component['StackServiceComponents']['component_name'] == 'HAWQSTANDBY')]
    self.assertEquals(len(hawqMasterHosts[0]), 1)
    self.assertEquals(len(hawqStandbyHosts[0]), 1)
    self.assertEquals(hawqMasterHosts[0][0], hawqStandbyHosts[0][0])
    validations = self.stackAdvisor.getComponentLayoutValidations(services, hosts)
    self.assertEquals(len(validations), 1)
    expected = {'component-name': 'HAWQSTANDBY', 'message': 'HAWQ Standby Master and HAWQ Master should not be deployed on the same host.', 'type': 'host-component', 'host': 'c6403.ambari.apache.org', 'level': 'ERROR', }
    self.assertEquals(validations[0], expected)
    services = self.load_json('services-master_ambari_colo-3-hosts.json')
    componentsListList = [service['components'] for service in services['services']]
    componentsList = [item for sublist in componentsListList for item in sublist]
    hawqMasterHosts = [component['StackServiceComponents']['hostnames'] for component in componentsList if (component['StackServiceComponents']['component_name'] == 'HAWQMASTER')]
    hawqStandbyHosts = [component['StackServiceComponents']['hostnames'] for component in componentsList if (component['StackServiceComponents']['component_name'] == 'HAWQSTANDBY')]
    self.assertEquals(len(hawqMasterHosts[0]), 1)
    self.assertEquals(len(hawqStandbyHosts[0]), 1)
    self.assertNotEquals(hawqMasterHosts[0][0], hawqStandbyHosts[0][0])
    self.assertEquals(hawqMasterHosts[0][0], 'c6401.ambari.apache.org')
    validations = self.stackAdvisor.getComponentLayoutValidations(services, hosts)
    self.assertEquals(len(validations), 1)
    expected = {'component-name': 'HAWQMASTER', 'message': 'HAWQ Master and Ambari Server should not be deployed on the same host. If you leave them collocated, make sure to set HAWQ Master Port property to a value different from the port number used by Ambari Server database.', 'type': 'host-component', 'host': 'c6401.ambari.apache.org', 'level': 'WARN', }
    self.assertEquals(validations[0], expected)
    services = self.load_json('services-standby_ambari_colo-3-hosts.json')
    componentsListList = [service['components'] for service in services['services']]
    componentsList = [item for sublist in componentsListList for item in sublist]
    hawqMasterHosts = [component['StackServiceComponents']['hostnames'] for component in componentsList if (component['StackServiceComponents']['component_name'] == 'HAWQMASTER')]
    hawqStandbyHosts = [component['StackServiceComponents']['hostnames'] for component in componentsList if (component['StackServiceComponents']['component_name'] == 'HAWQSTANDBY')]
    self.assertEquals(len(hawqMasterHosts[0]), 1)
    self.assertEquals(len(hawqStandbyHosts[0]), 1)
    self.assertNotEquals(hawqMasterHosts[0][0], hawqStandbyHosts[0][0])
    self.assertEquals(hawqStandbyHosts[0][0], 'c6401.ambari.apache.org')
    validations = self.stackAdvisor.getComponentLayoutValidations(services, hosts)
    self.assertEquals(len(validations), 1)
    expected = {'component-name': 'HAWQSTANDBY', 'message': 'HAWQ Standby Master and Ambari Server should not be deployed on the same host. If you leave them collocated, make sure to set HAWQ Master Port property to a value different from the port number used by Ambari Server database.', 'type': 'host-component', 'host': 'c6401.ambari.apache.org', 'level': 'WARN', }
    self.assertEquals(validations[0], expected)
