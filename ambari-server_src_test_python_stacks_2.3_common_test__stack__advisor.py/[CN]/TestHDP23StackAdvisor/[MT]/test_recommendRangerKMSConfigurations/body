def test_recommendRangerKMSConfigurations(self):
    clusterData = {}
    services = {'Versions': {'stack_version': '2.3', }, 'services': [{'StackServices': {'service_name': 'RANGER', 'service_version': '0.5.0.2.3', }, 'components': [{'StackServiceComponents': {'component_name': 'RANGER_ADMIN', 'hostnames': ['host1'], }, }], }], 'configurations': {'kms-env': {'properties': {'kms_user': 'kmsname', }, }, 'core-site': {'properties': {}, }, }, 'forced-configurations': [], }
    expected = {'kms-properties': {'properties': {}, }, 'dbks-site': {'properties': {}, }, 'core-site': {'properties': {}, }, }
    recommendedConfigurations = {}
    self.stackAdvisor.recommendRangerKMSConfigurations(recommendedConfigurations, clusterData, services, None)
    self.assertEquals(recommendedConfigurations, expected)
    services['services'].append({'StackServices': {'service_name': 'KERBEROS', }, })
    expected = {'kms-properties': {'properties': {}, }, 'dbks-site': {'properties': {}, }, 'core-site': {'properties': {'hadoop.proxyuser.kmsname.groups': '*', }, }, }
    recommendedConfigurations = {}
    self.stackAdvisor.recommendRangerKMSConfigurations(recommendedConfigurations, clusterData, services, None)
    self.assertEquals(recommendedConfigurations, expected)
    recommendedConfigurations = {}
    services['changed-configurations'] = [{'type': 'kms-env', 'name': 'kms_user', 'old_value': 'kmsname', }]
    services['configurations']['kms-env']['properties']['kms_user'] = 'kmsnew'
    expected['core-site'] = {'properties': {'hadoop.proxyuser.kmsnew.groups': '*', }, 'property_attributes': {'hadoop.proxyuser.kmsname.groups': {'delete': 'true', }, }, }
    self.stackAdvisor.recommendRangerKMSConfigurations(recommendedConfigurations, clusterData, services, None)
    self.assertEquals(recommendedConfigurations, expected)
