def test_validateHAWQConfigurations(self):
    services = self.load_json('services-hawq-3-hosts.json')
    configurations = services['configurations']
    configurations['hawq-site'] = {'properties': {'hawq_rm_yarn_address': 'localhost:8032', 'hawq_rm_yarn_scheduler_address': 'localhost:8030', }, }
    configurations['yarn-site'] = {'properties': {'yarn.resourcemanager.address': 'host1:8050', 'yarn.resourcemanager.scheduler.address': 'host1:8030', }, }
    services['services'].append({'StackServices': {'service_name': 'YARN', }, 'components': [], })
    properties = configurations['hawq-site']['properties']
    defaults = {}
    hosts = {}
    expected_warnings = {'hawq_rm_yarn_address': {'config-type': 'hawq-site', 'message': 'Expected value: host1:8050 (this property should have the same value as the property yarn.resourcemanager.address in yarn-site)', 'type': 'configuration', 'config-name': 'hawq_rm_yarn_address', 'level': 'WARN', }, 'hawq_rm_yarn_scheduler_address': {'config-type': 'hawq-site', 'message': 'Expected value: host1:8030 (this property should have the same value as the property yarn.resourcemanager.scheduler.address in yarn-site)', 'type': 'configuration', 'config-name': 'hawq_rm_yarn_scheduler_address', 'level': 'WARN', }, }
    problems = self.stackAdvisor.validateHAWQConfigurations(properties, defaults, configurations, services, hosts)
    problems_dict = {}
    for problem in problems:
        problems_dict[problem['config-name']] = problem
    self.assertEqual(len(problems), 2)
    self.assertEqual(problems_dict, expected_warnings)
    services = {'services': [{'StackServices': {'service_name': 'HAWQ', }, 'components': [], }], 'configurations': {'hawq-site': {'properties': {'hawq_global_rm_type': 'yarn', }, }, }, }
    properties = services['configurations']['hawq-site']['properties']
    '\n    Validation error expected is as below:\n                    [ {\n                          "config-type": "hawq-site",\n                          "message": "hawq_global_rm_type must be set to none if YARN service is not installed",\n                          "type": "configuration",\n                          "config-name": "hawq_global_rm_type",\n                          "level": "ERROR"\n                    } ]\n    '
    problems = self.stackAdvisor.validateHAWQConfigurations(properties, defaults, services['configurations'], services, hosts)
    self.assertEqual(len(problems), 1)
    self.assertEqual(problems[0]['config-type'], 'hawq-site')
    self.assertEqual(problems[0]['message'], 'hawq_global_rm_type must be set to none if YARN service is not installed')
    self.assertEqual(problems[0]['type'], 'configuration')
    self.assertEqual(problems[0]['config-name'], 'hawq_global_rm_type')
    self.assertEqual(problems[0]['level'], 'ERROR')
    services['services'].append({'StackServices': {'service_name': 'YARN', }, 'components': [], })
    problems = self.stackAdvisor.validateHAWQConfigurations(properties, defaults, services['configurations'], services, hosts)
    self.assertEqual(len(problems), 0)
