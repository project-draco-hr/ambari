def test_recommendKAFKAConfigurations(self):
    configurations = {}
    clusterData = {'totalAvailableRam': 2048, 'hBaseInstalled': True, 'hbaseRam': 112, 'reservedRam': 128, }
    services = {'services': [{'StackServices': {'service_name': 'KAFKA', 'service_version': '2.6.0.2.2', }, }], 'Versions': {'stack_version': '2.3', }, 'configurations': {'core-site': {'properties': {}, }, 'kafka-broker': {'properties': {'authorizer.class.name': 'kafka.security.auth.SimpleAclAuthorizer', }, 'property_attributes': {}, }, 'ranger-kafka-plugin-properties': {'properties': {'ranger-kafka-plugin-enabled': 'No', }, }, 'kafka-log4j': {'properties': {'content': 'kafka.logs.dir=logs', }, }, }, }
    self.stackAdvisor.recommendKAFKAConfigurations(configurations, clusterData, services, None)
    self.assertEquals(configurations['kafka-broker']['property_attributes']['authorizer.class.name'], {'delete': 'true', }, 'Test authorizer.class.name with Ranger Kafka plugin is disabled in non-kerberos environment')
    configurations['kafka-broker']['properties'] = {}
    configurations['kafka-broker']['property_attributes'] = {}
    services['configurations']['core-site']['properties']['hadoop.security.authentication'] = 'kerberos'
    services['configurations']['kafka-broker']['properties']['authorizer.class.name'] = 'org.apache.ranger.authorization.kafka.authorizer.RangerKafkaAuthorizer'
    self.stackAdvisor.recommendKAFKAConfigurations(configurations, clusterData, services, None)
    self.assertEquals(configurations['kafka-broker']['properties']['authorizer.class.name'], 'kafka.security.auth.SimpleAclAuthorizer', 'Test authorizer.class.name with Ranger Kafka plugin disabled in kerberos environment')
    configurations['kafka-broker']['properties'] = {}
    configurations['kafka-broker']['property_attributes'] = {}
    del services['configurations']['core-site']['properties']['hadoop.security.authentication']
    services['configurations']['kafka-broker']['properties']['authorizer.class.name'] = 'kafka.security.auth.SimpleAclAuthorizer'
    services['configurations']['ranger-kafka-plugin-properties']['properties']['ranger-kafka-plugin-enabled'] = 'Yes'
    self.stackAdvisor.recommendKAFKAConfigurations(configurations, clusterData, services, None)
    self.assertEquals(configurations['kafka-broker']['properties']['authorizer.class.name'], 'org.apache.ranger.authorization.kafka.authorizer.RangerKafkaAuthorizer', 'Test authorizer.class.name with Ranger Kafka plugin enabled in kerberos environment')
    configurations['kafka-broker']['properties'] = {}
    configurations['kafka-broker']['property_attributes'] = {}
    services['configurations']['core-site']['properties']['hadoop.security.authentication'] = 'kerberos'
    services['configurations']['kafka-broker']['properties']['authorizer.class.name'] = 'kafka.security.auth.SimpleAclAuthorizer'
    services['configurations']['ranger-kafka-plugin-properties']['properties']['ranger-kafka-plugin-enabled'] = 'Yes'
    self.stackAdvisor.recommendKAFKAConfigurations(configurations, clusterData, services, None)
    self.assertEquals(configurations['kafka-broker']['properties']['authorizer.class.name'], 'org.apache.ranger.authorization.kafka.authorizer.RangerKafkaAuthorizer', 'Test authorizer.class.name with Ranger Kafka plugin enabled in kerberos environment')
    self.stackAdvisor.recommendKAFKAConfigurations(configurations, clusterData, services, None)
    log4jContent = services['configurations']['kafka-log4j']['properties']['content']
    newRangerLog4content = "\nlog4j.appender.rangerAppender=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.rangerAppender.DatePattern='.'yyyy-MM-dd-HH\nlog4j.appender.rangerAppender.File=${kafka.logs.dir}/ranger_kafka.log\nlog4j.appender.rangerAppender.layout=org.apache.log4j.PatternLayout\nlog4j.appender.rangerAppender.layout.ConversionPattern=%d{ISO8601} %p [%t] %C{6} (%F:%L) - %m%n\nlog4j.logger.org.apache.ranger=INFO, rangerAppender"
    expectedLog4jContent = (log4jContent + newRangerLog4content)
    self.assertEquals(configurations['kafka-log4j']['properties']['content'], expectedLog4jContent, 'Test kafka-log4j content when Ranger plugin for Kafka is enabled')
