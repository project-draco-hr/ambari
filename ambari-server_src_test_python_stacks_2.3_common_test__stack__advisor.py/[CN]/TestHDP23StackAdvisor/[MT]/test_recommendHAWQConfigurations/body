def test_recommendHAWQConfigurations(self):
    services = self.load_json('services-normal-hawq-3-hosts.json')
    componentsListList = [service['components'] for service in services['services']]
    componentsList = [item for sublist in componentsListList for item in sublist]
    hawqSegmentComponent = [component['StackServiceComponents'] for component in componentsList if (component['StackServiceComponents']['component_name'] == 'HAWQSEGMENT')][0]
    services['configurations']['hawq-site'] = {'properties': {'default_hash_table_bucket_number': '24', 'hawq_rm_nvseg_perquery_limit': '512', 'hawq_rm_yarn_address': 'localhost:8032', 'hawq_rm_yarn_scheduler_address': 'localhost:8030', }, }
    services['configurations']['hdfs-client'] = {'properties': {'output.replace-datanode-on-failure': 'true', }, }
    services['configurations']['yarn-site'] = {'properties': {'yarn.resourcemanager.address': 'host1:8050', 'yarn.resourcemanager.scheduler.address': 'host1:8030', }, }
    services['services'].append({'StackServices': {'service_name': 'YARN', }, 'components': [], })
    configurations = {}
    clusterData = {}
    self.assertEquals(len(hawqSegmentComponent['hostnames']), 3)
    self.stackAdvisor.recommendHAWQConfigurations(configurations, clusterData, services, None)
    self.assertEquals(configurations['hawq-site']['properties']['default_hash_table_bucket_number'], str((3 * 6)))
    self.assertEquals(configurations['hdfs-client']['properties']['output.replace-datanode-on-failure'], 'false')
    self.assertEquals(configurations['hawq-site']['properties']['hawq_rm_yarn_address'], 'host1:8050')
    self.assertEquals(configurations['hawq-site']['properties']['hawq_rm_yarn_scheduler_address'], 'host1:8030')
    hawqSegmentComponent['hostnames'] = [('host' + str(i)) for i in range(100)]
    self.stackAdvisor.recommendHAWQConfigurations(configurations, clusterData, services, None)
    self.assertEquals(configurations['hawq-site']['properties']['default_hash_table_bucket_number'], str((100 * 5)))
    self.assertEquals(configurations['hdfs-client']['properties']['output.replace-datanode-on-failure'], 'true')
    hawqSegmentComponent['hostnames'] = [('host' + str(i)) for i in range(512)]
    self.stackAdvisor.recommendHAWQConfigurations(configurations, clusterData, services, None)
    self.assertEquals(configurations['hawq-site']['properties']['default_hash_table_bucket_number'], '512')
    self.assertEquals(configurations['hdfs-client']['properties']['output.replace-datanode-on-failure'], 'true')
    hawqSegmentComponent['hostnames'] = [('host' + str(i)) for i in range(513)]
    self.stackAdvisor.recommendHAWQConfigurations(configurations, clusterData, services, None)
    self.assertEquals(configurations['hawq-site']['properties']['default_hash_table_bucket_number'], '512')
    self.assertEquals(configurations['hdfs-client']['properties']['output.replace-datanode-on-failure'], 'true')
    configurations = {}
    services['configurations']['hawq-site'] = {'properties': {'hawq-site': {'properties': {}, }, }, }
    hawqSegmentComponent['hostnames'] = []
    self.stackAdvisor.recommendHAWQConfigurations(configurations, clusterData, services, None)
    self.assertEquals(configurations, {'hdfs-client': {'properties': {'output.replace-datanode-on-failure': 'false', }, }, 'hawq-site': {'properties': {}, }, })
