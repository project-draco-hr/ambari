def server_process_main(options, scmStatus=None):
    properties = get_ambari_properties()
    if (properties == (-1)):
        err = 'Error getting ambari properties'
        raise FatalException((-1), err)
    properties_for_print = []
    logger.info('Ambari server properties config:')
    for (key, value) in properties.getPropertyDict().items():
        if (('passwd' not in key) and ('password' not in key)):
            properties_for_print.append(((key + '=') + value))
    logger.info(properties_for_print)
    try:
        set_debug_mode_from_options(options)
    except AttributeError:
        pass
    if (not check_reverse_lookup()):
        print_warning_msg('The hostname was not found in the reverse DNS lookup. This may result in incorrect behavior. Please check the DNS setup and fix the issue.')
    check_database_name_property()
    parse_properties_file(options)
    is_active_instance = get_is_active_instance()
    if (not is_active_instance):
        print_warning_msg('This instance of ambari server is not designated as active. Cannot start ambari server.')
        err = 'This is not an active instance. Shutting down...'
        raise FatalException(1, err)
    ambari_user = read_ambari_user()
    current_user = ensure_can_start_under_current_user(ambari_user)
    print_info_msg('Ambari Server is not running...')
    jdk_path = find_jdk()
    if (jdk_path is None):
        err = ('No JDK found, please run the "ambari-server setup" command to install a JDK automatically or install any JDK manually to ' + configDefaults.JDK_INSTALL_DIR)
        raise FatalException(1, err)
    if (not options.skip_properties_validation):
        missing_properties = get_missing_properties(properties)
        if missing_properties:
            err = (('Required properties are not found: ' + str(missing_properties)) + '. To skip properties validation use "--skip-properties-validation"')
            raise FatalException(1, err)
    if is_root():
        print configDefaults.MESSAGE_SERVER_RUNNING_AS_ROOT
    ensure_jdbc_driver_is_installed(options, properties)
    ensure_dbms_is_running(options, properties, scmStatus)
    if (scmStatus is not None):
        scmStatus.reportStartPending()
    refresh_stack_hash(properties)
    if (scmStatus is not None):
        scmStatus.reportStartPending()
    ensure_server_security_is_configured()
    if (scmStatus is not None):
        scmStatus.reportStartPending()
    java_exe = get_java_exe_path()
    serverClassPath = ServerClassPath(properties, options)
    debug_mode = get_debug_mode()
    debug_start = ((debug_mode & 1) or SERVER_START_DEBUG)
    suspend_start = ((debug_mode & 2) or SUSPEND_START_MODE)
    suspend_mode = ('y' if suspend_start else 'n')
    environ = generate_env(options, ambari_user, current_user)
    class_path = serverClassPath.get_full_ambari_classpath_escaped_for_shell(validate_classpath=True)
    if options.skip_database_check:
        global jvm_args
        jvm_args += ' -DskipDatabaseConsistencyCheck'
        print (('Ambari Server is starting with the database consistency check skipped. Do not make any changes to your cluster topology or perform a cluster upgrade until you correct the database consistency issues. See "' + configDefaults.DB_CHECK_LOG) + '" for more details on the consistency issues.')
        properties.process_pair(CHECK_DATABASE_SKIPPED_PROPERTY, 'true')
    else:
        print 'Ambari database consistency check started...'
        properties.process_pair(CHECK_DATABASE_SKIPPED_PROPERTY, 'false')
    update_properties(properties)
    param_list = generate_child_process_param_list(ambari_user, java_exe, class_path, debug_start, suspend_mode)

    def make_process_independent():
        if IS_FOREGROUND:
            return
        processId = os.getpid()
        if (processId > 0):
            try:
                os.setpgid(processId, processId)
            except OSError as e:
                print_warning_msg('setpgid({0}, {0}) failed - {1}'.format(pidJava, str(e)))
                pass
    print_info_msg(('Running server: ' + str(param_list)))
    procJava = subprocess.Popen(param_list, env=environ, preexec_fn=make_process_independent)
    pidJava = procJava.pid
    if (pidJava <= 0):
        procJava.terminate()
        exitcode = procJava.returncode
        exitfile = os.path.join(configDefaults.PID_DIR, EXITCODE_NAME)
        save_pid(exitcode, exitfile)
        if (scmStatus is not None):
            scmStatus.reportStopPending()
        raise FatalException((-1), AMBARI_SERVER_DIE_MSG.format(exitcode, configDefaults.SERVER_OUT_FILE))
    else:
        pidfile = os.path.join(configDefaults.PID_DIR, PID_NAME)
        save_pid(pidJava, pidfile)
        print ('Server PID at: ' + pidfile)
        print ('Server out at: ' + configDefaults.SERVER_OUT_FILE)
        print ('Server log at: ' + configDefaults.SERVER_LOG_FILE)
        wait_for_server_start(pidfile, scmStatus)
    if (scmStatus is not None):
        scmStatus.reportStarted()
    if IS_FOREGROUND:
        procJava.communicate()
    return procJava
