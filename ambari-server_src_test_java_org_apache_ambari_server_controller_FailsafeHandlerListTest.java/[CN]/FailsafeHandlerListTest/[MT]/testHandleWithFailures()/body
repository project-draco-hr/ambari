{
  final FailsafeHandlerList handlerList=EasyMock.createMockBuilder(FailsafeHandlerList.class).withConstructor().addMockedMethod("isStarted").createMock();
  EasyMock.expect(handlerList.isStarted()).andReturn(false).times(3).andReturn(true).anyTimes();
  final Handler normalHandler1=EasyMock.createNiceMock(Handler.class);
  final Handler normalHandler2=EasyMock.createNiceMock(Handler.class);
  final Handler failureHandler=EasyMock.createNiceMock(Handler.class);
  final HttpServletRequest request=EasyMock.createNiceMock(HttpServletRequest.class);
  final HttpServletResponse response=EasyMock.createNiceMock(HttpServletResponse.class);
  normalHandler1.handle(EasyMock.<String>anyObject(),EasyMock.<Request>anyObject(),EasyMock.<HttpServletRequest>anyObject(),EasyMock.<HttpServletResponse>anyObject());
  EasyMock.expectLastCall().once();
  normalHandler2.handle(EasyMock.<String>anyObject(),EasyMock.<Request>anyObject(),EasyMock.<HttpServletRequest>anyObject(),EasyMock.<HttpServletResponse>anyObject());
  EasyMock.expectLastCall().once();
  failureHandler.handle(EasyMock.<String>anyObject(),EasyMock.<Request>anyObject(),EasyMock.<HttpServletRequest>anyObject(),EasyMock.<HttpServletResponse>anyObject());
  EasyMock.expectLastCall().andThrow(new IOException());
  EasyMock.replay(handlerList,normalHandler1,normalHandler2,failureHandler);
  handlerList.addFailsafeHandler(normalHandler1);
  handlerList.addFailsafeHandler(failureHandler);
  handlerList.addFailsafeHandler(normalHandler2);
  handlerList.start();
  handlerList.handle("",new Request(),request,response);
  EasyMock.verify(handlerList,normalHandler1,normalHandler2,failureHandler);
}
