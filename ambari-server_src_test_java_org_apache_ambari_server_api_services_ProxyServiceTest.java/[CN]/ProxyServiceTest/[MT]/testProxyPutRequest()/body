{
  ProxyService ps=new ProxyService();
  URLStreamProvider streamProviderMock=PowerMock.createNiceMock(URLStreamProvider.class);
  HttpURLConnection urlConnectionMock=createMock(HttpURLConnection.class);
  MultivaluedMap<String,String> queryParams=new MultivaluedMapImpl();
  Response.ResponseBuilder responseBuilderMock=PowerMock.createMock(ResponseBuilderImpl.class);
  Response responseMock=createMock(ResponseImpl.class);
  queryParams.add("url","testurl");
  InputStream is=new ByteArrayInputStream("test".getBytes());
  PowerMock.mockStatic(Response.class);
  expect(getUriInfo().getQueryParameters()).andReturn(queryParams);
  expect(streamProviderMock.processURL("testurl","PUT","testbody")).andReturn(urlConnectionMock);
  expect(urlConnectionMock.getResponseCode()).andReturn(200);
  expect(urlConnectionMock.getContentType()).andReturn("text/plain");
  expect(urlConnectionMock.getInputStream()).andReturn(is);
  PowerMock.expectNew(URLStreamProvider.class,3000,500,null,null,null).andReturn(streamProviderMock);
  expect(Response.status(200)).andReturn(responseBuilderMock);
  expect(responseBuilderMock.entity(is)).andReturn(responseBuilderMock);
  expect(responseBuilderMock.type("text/plain")).andReturn(responseBuilderMock);
  expect(responseBuilderMock.build()).andReturn(responseMock);
  PowerMock.replay(streamProviderMock,URLStreamProvider.class,Response.class,responseBuilderMock);
  replay(getUriInfo(),urlConnectionMock);
  Response resultForPutRequest=ps.processPutRequestForwarding("testbody",getHttpHeaders(),getUriInfo());
  assertSame(resultForPutRequest,responseMock);
}
