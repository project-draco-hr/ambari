def perform_stack_upgrade(self, command, tmpout, tmperr):
    logger.info('Performing stack upgrade')
    params = command['commandParams']
    srcStack = params['source_stack_version']
    tgtStack = params['target_stack_version']
    component = command['component']
    srcStackTuple = self.split_stack_version(srcStack)
    tgtStackTuple = self.split_stack_version(srcStack)
    if ((srcStackTuple == None) or (tgtStackTuple == None)):
        errorstr = ('Source (%s) or target (%s) version does not match pattern       <Name>-<Version>' % (srcStack, tgtStack))
        logger.info(errorstr)
        result = {'exitcode': 1, 'stdout': 'None', 'stderr': errorstr, }
    elif (srcStack != tgtStack):
        paramTuple = sum((srcStackTuple, tgtStackTuple), ())
        upgradeId = ('%s-%s.%s_%s-%s.%s' % paramTuple)
        basedir = os.path.join(self.stacksDir, upgradeId, component)
        if (not os.path.isdir(basedir)):
            errorstr = ('Upgrade %s is not supported' % upgradeId)
            logger.error(errorstr)
            result = {'exitcode': 1, 'stdout': errorstr, 'stderr': errorstr, }
        else:
            result = {'exitcode': 0, 'stdout': '', 'stderr': '', }
            for dir in self.SCRIPT_DIRS:
                if (result['exitcode'] != 0):
                    break
                tmpRes = self.execute_dir(command, basedir, dir, tmpout, tmperr)
                result = {'exitcode': (result['exitcode'] or tmpRes['exitcode']), 'stdout': ('%s\n%s' % (result['stdout'], tmpRes['stdout'])), 'stderr': ('%s\n%s' % (result['stderr'], tmpRes['stderr'])), }
            if (result['exitcode'] == 0):
                logger.info(('Upgrade %s successfully finished' % upgradeId))
                self.versionsHandler.write_stack_version(component, tgtStack)
    else:
        infostr = ('target_stack_version (%s) matches current stack version for component %s, nothing to do' % (tgtStack, component))
        logger.info(infostr)
        result = {'exitcode': 0, 'stdout': infostr, 'stderr': 'None', }
    result = {'exitcode': result['exitcode'], 'stdout': grep.tail(result['stdout'], grep.OUTPUT_LAST_LINES), 'stderr': grep.tail(result['stderr'], grep.OUTPUT_LAST_LINES), }
    return result
