def execute_dir(self, command, basedir, dir, tmpout, tmperr):
    '\n    Executes *.py and *.pp files located in a given directory.\n    Files a executed in a numeric sorting order.\n    '
    dirpath = os.path.join(basedir, dir)
    logger.info(('Executing %s' % dirpath))
    if (not os.path.isdir(dirpath)):
        logger.warn('Script directory %s does not exist, skipping')
        return
    fileList = os.listdir(dirpath)
    fileList.sort(key=self.get_key_func)
    formattedResult = {'exitcode': 0, 'stdout': '', 'stderr': '', }
    for filename in fileList:
        prevcode = formattedResult['exitcode']
        if ((prevcode != 0) or (self.get_key_func(filename) == self.NAME_PARSING_FAILED_CODE)):
            break
        filepath = os.path.join(dirpath, filename)
        if filename.endswith('.pp'):
            logger.info(('Running puppet file %s' % filepath))
            result = self.puppetExecutor.just_run_one_file(command, filename, tmpout, tmperr)
        elif filename.endswith('.py'):
            logger.info(('Running python file %s' % filepath))
            result = self.pythonExecutor.run_file(filepath, tmpout, tmperr)
        elif filename.endswith('.pyc'):
            pass
        else:
            warnstr = ('Unrecognized file type, skipping: %s' % filepath)
            logger.warn(warnstr)
            result = {'exitcode': 0, 'stdout': warnstr, 'stderr': 'None', }
        formattedResult = {'exitcode': (prevcode or result['exitcode']), 'stdout': ('%s\n%s' % (formattedResult['stdout'], result['stdout'])), 'stderr': ('%s\n%s' % (formattedResult['stderr'], result['stderr'])), }
    logger.debug(('Result of %s: \n %s' % (dirpath, pprint.pformat(formattedResult))))
    return formattedResult
