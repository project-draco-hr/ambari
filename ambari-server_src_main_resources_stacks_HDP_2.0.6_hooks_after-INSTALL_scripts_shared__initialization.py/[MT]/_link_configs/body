def _link_configs(package, version, dirs):
    "\n  Link a specific package's configuration directory\n  "
    bad_dirs = []
    for dir_def in dirs:
        if (not os.path.exists(dir_def['conf_dir'])):
            bad_dirs.append(dir_def['conf_dir'])
    if (len(bad_dirs) > 0):
        Logger.debug('Skipping {0} as it does not exist.'.format(','.join(bad_dirs)))
        return
    bad_dirs = []
    for dir_def in dirs:
        old_conf = dir_def['conf_dir']
        if os.path.islink(old_conf):
            Logger.debug('{0} is a link to {1}'.format(old_conf, os.path.realpath(old_conf)))
            bad_dirs.append(old_conf)
    if (len(bad_dirs) > 0):
        return
    for dir_def in dirs:
        old_conf = dir_def['conf_dir']
        old_parent = os.path.abspath(os.path.join(old_conf, os.pardir))
        old_conf_copy = os.path.join(old_parent, 'conf.install')
        Execute(('cp', '-R', '-p', old_conf, old_conf_copy), not_if=format('test -e {old_conf_copy}'), sudo=True)
    versioned_confs = conf_select.create('HDP', package, version, dry_run=True)
    Logger.info('New conf directories: {0}'.format(', '.join(versioned_confs)))
    need_dirs = []
    for d in versioned_confs:
        if (not os.path.exists(d)):
            need_dirs.append(d)
    if (len(need_dirs) > 0):
        conf_select.create('HDP', package, version)
        if (len(dirs) > 1):
            for need_dir in need_dirs:
                for dir_def in dirs:
                    if (('prefix' in dir_def) and need_dir.startswith(dir_def['prefix'])):
                        old_conf = dir_def['conf_dir']
                        versioned_conf = need_dir
                        Execute(as_sudo(['cp', '-R', '-p', os.path.join(old_conf, '*'), versioned_conf], auto_escape=False), only_if=format('ls {old_conf}/*'))
        elif ((1 == len(dirs)) and (1 == len(need_dirs))):
            old_conf = dirs[0]['conf_dir']
            versioned_conf = need_dirs[0]
            Execute(as_sudo(['cp', '-R', '-p', os.path.join(old_conf, '*'), versioned_conf], auto_escape=False), only_if=format('ls {old_conf}/*'))
    try:
        conf_select.select('HDP', package, version)
        for dir_def in dirs:
            Directory(dir_def['conf_dir'], action='delete')
            Link(dir_def['conf_dir'], to=dir_def['current_dir'])
    except Exception as e:
        Logger.warning('Could not select the directory: {0}'.format(e.message))
