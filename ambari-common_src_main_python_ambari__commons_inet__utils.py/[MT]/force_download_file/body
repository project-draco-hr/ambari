def force_download_file(link, destination, chunk_size=(16 * 1024), progress_func=None):
    request = urllib2.Request(link)
    if (os.path.exists(destination) and (not os.path.isfile(destination))):
        err = ('Download target {0} is a directory.' % destination)
        raise FatalException(1, err)
    (dest_path, file_name) = os.path.split(destination)
    temp_dest = (destination + '.tmpdownload')
    partial_size = 0
    if os.path.exists(temp_dest):
        partial_size = os.stat(temp_dest).st_size
        if (partial_size > chunk_size):
            resume_pos = (partial_size - chunk_size)
            request.add_header('Range', ('bytes=%s-' % resume_pos))
    elif (not os.path.exists(dest_path)):
        os.makedirs(dest_path)
    response = urllib2.urlopen(request)
    (file_size, seek_pos) = find_range_components(response.info())
    print_info_msg(('Downloading to: %s Bytes: %s' % (destination, file_size)))
    if (partial_size < file_size):
        if (seek_pos == 0):
            open_mode = 'wb'
        else:
            open_mode = 'rb+'
        f = open(temp_dest, open_mode)
        try:
            if (seek_pos > 0):
                f.seek(seek_pos)
            file_size_dl = seek_pos
            while True:
                buffer = response.read(chunk_size)
                if (not buffer):
                    break
                file_size_dl += len(buffer)
                f.write(buffer)
                if (progress_func is not None):
                    progress_func(file_name, file_size_dl, chunk_size, file_size)
        finally:
            f.close()
        sys.stdout.write('\n')
        sys.stdout.flush()
    print_info_msg('Finished downloading {0} to {1}'.format(link, destination))
    downloaded_size = os.stat(temp_dest).st_size
    if (downloaded_size != file_size):
        err = ('Size of downloaded file {0} is {1} bytes, it is probably damaged or incomplete' % (destination, downloaded_size))
        raise FatalException(1, err)
    if os.path.exists(destination):
        os.unlink(destination)
    os.rename(temp_dest, destination)
