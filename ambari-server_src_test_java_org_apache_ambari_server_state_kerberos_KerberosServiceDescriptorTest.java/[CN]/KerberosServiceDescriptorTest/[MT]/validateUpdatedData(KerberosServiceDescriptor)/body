{
  Assert.assertNotNull(serviceDescriptor);
  Assert.assertEquals("A_DIFFERENT_SERVICE_NAME",serviceDescriptor.getName());
  Map<String,KerberosComponentDescriptor> componentDescriptors=serviceDescriptor.getComponents();
  Assert.assertNotNull(componentDescriptors);
  Assert.assertEquals(2,componentDescriptors.size());
  KerberosComponentDescriptorTest.validateFromJSON(serviceDescriptor.getComponent("COMPONENT_NAME"));
  KerberosComponentDescriptorTest.validateFromMap(serviceDescriptor.getComponent("A_DIFFERENT_COMPONENT_NAME"));
  List<KerberosIdentityDescriptor> identityDescriptors=serviceDescriptor.getIdentities();
  Assert.assertNotNull(identityDescriptors);
  Assert.assertEquals(1,identityDescriptors.size());
  for (  KerberosIdentityDescriptor identityDescriptor : identityDescriptors) {
    KerberosIdentityDescriptorTest.validateUpdatedData(identityDescriptor);
  }
  Map<String,KerberosConfigurationDescriptor> configurations=serviceDescriptor.getConfigurations();
  Assert.assertNotNull(configurations);
  Assert.assertEquals(1,configurations.size());
  KerberosConfigurationDescriptor configuration=configurations.get("service-site");
  Assert.assertNotNull(configuration);
  Map<String,String> properties=configuration.getProperties();
  Assert.assertEquals("service-site",configuration.getType());
  Assert.assertNotNull(properties);
  Assert.assertEquals(3,properties.size());
  Assert.assertEquals("red",properties.get("service.property1"));
  Assert.assertEquals("value2",properties.get("service.property2"));
  Assert.assertEquals("green",properties.get("service.property"));
  Set<String> authToLocalProperties=serviceDescriptor.getAuthToLocalProperties();
  Assert.assertNotNull(authToLocalProperties);
  Assert.assertEquals(2,authToLocalProperties.size());
  Iterator<String> iterator=new TreeSet<String>(authToLocalProperties).iterator();
  Assert.assertEquals("service.name.rules1",iterator.next());
  Assert.assertEquals("service.name.rules2",iterator.next());
}
