{
  Assert.assertNotNull(serviceDescriptor);
  Assert.assertTrue(serviceDescriptor.isContainer());
  Assert.assertEquals("A_DIFFERENT_SERVICE_NAME",serviceDescriptor.getName());
  Map<String,KerberosComponentDescriptor> componentDescriptors=serviceDescriptor.getComponents();
  Assert.assertNotNull(componentDescriptors);
  Assert.assertEquals(1,componentDescriptors.size());
  for (  KerberosComponentDescriptor componentDescriptor : componentDescriptors.values()) {
    KerberosComponentDescriptorTest.validateFromMap(componentDescriptor);
  }
  List<KerberosIdentityDescriptor> identityDescriptors=serviceDescriptor.getIdentities();
  Assert.assertNotNull(identityDescriptors);
  Assert.assertEquals(1,identityDescriptors.size());
  for (  KerberosIdentityDescriptor identityDescriptor : identityDescriptors) {
    KerberosIdentityDescriptorTest.validateFromMap(identityDescriptor);
  }
  Map<String,KerberosConfigurationDescriptor> configurations=serviceDescriptor.getConfigurations();
  Assert.assertNotNull(configurations);
  Assert.assertEquals(1,configurations.size());
  KerberosConfigurationDescriptor configuration=configurations.get("service-site");
  Assert.assertNotNull(configuration);
  Map<String,String> properties=configuration.getProperties();
  Assert.assertEquals("service-site",configuration.getType());
  Assert.assertNotNull(properties);
  Assert.assertEquals(2,properties.size());
  Assert.assertEquals("red",properties.get("service.property1"));
  Assert.assertEquals("green",properties.get("service.property"));
  Set<String> authToLocalProperties=serviceDescriptor.getAuthToLocalProperties();
  Assert.assertNotNull(authToLocalProperties);
  Assert.assertEquals(1,authToLocalProperties.size());
  Assert.assertEquals("service.name.rules2",authToLocalProperties.iterator().next());
}
