{
  ServiceComponent serviceComponent=mock(ServiceComponent.class);
  when(serviceComponent.isVersionAdvertised()).thenReturn(true);
  when(service.getMaintenanceState()).thenReturn(MaintenanceState.OFF);
  when(service.getServiceComponents()).thenReturn(ImmutableMap.of(SERVICE_COMPONENT_NAME,serviceComponent));
  ServiceConfigEntity serviceConfigEntity=new ServiceConfigEntity();
  serviceConfigEntity.setServiceName(SERVICE_NAME);
  serviceConfigEntity.setCreateTimestamp(CONFIG_CREATE_TIMESTAMP);
  HostRoleCommandEntity hostRoleCommandEntity1=new HostRoleCommandEntity();
  hostRoleCommandEntity1.setRoleCommand(RoleCommand.SERVICE_CHECK);
  hostRoleCommandEntity1.setCommandDetail(COMMAND_DETAIL);
  hostRoleCommandEntity1.setStartTime(SERVICE_CHECK_START_TIME);
  hostRoleCommandEntity1.setRole(Role.HDFS_SERVICE_CHECK);
  HostRoleCommandEntity hostRoleCommandEntity2=new HostRoleCommandEntity();
  hostRoleCommandEntity2.setRoleCommand(RoleCommand.SERVICE_CHECK);
  hostRoleCommandEntity2.setCommandDetail(COMMAND_DETAIL);
  hostRoleCommandEntity2.setStartTime(CONFIG_CREATE_TIMESTAMP - 1L);
  hostRoleCommandEntity2.setRole(Role.HDFS_SERVICE_CHECK);
  when(serviceConfigDAO.getLastServiceConfig(eq(CLUSTER_ID),eq(SERVICE_NAME))).thenReturn(serviceConfigEntity);
  when(hostRoleCommandDAO.findAll(any(Request.class),any(Predicate.class))).thenReturn(Arrays.asList(hostRoleCommandEntity1,hostRoleCommandEntity2));
  PrerequisiteCheck check=new PrerequisiteCheck(null,CLUSTER_NAME);
  serviceCheckValidityCheck.perform(check,new PrereqCheckRequest(CLUSTER_NAME));
  Assert.assertEquals(PrereqCheckStatus.FAIL,check.getStatus());
}
