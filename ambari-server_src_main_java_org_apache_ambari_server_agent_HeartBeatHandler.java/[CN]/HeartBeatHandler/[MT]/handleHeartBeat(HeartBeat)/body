{
  long now=System.currentTimeMillis();
  if (heartbeat.getAgentEnv() != null && heartbeat.getAgentEnv().getHostHealth() != null) {
    heartbeat.getAgentEnv().getHostHealth().setServerTimeStampAtReporting(now);
  }
  String hostname=heartbeat.getHostname();
  Long currentResponseId=hostResponseIds.get(hostname);
  HeartBeatResponse response;
  if (currentResponseId == null) {
    LOG.error("CurrentResponseId unknown for " + hostname + " - send register command");
    return createRegisterCommand();
  }
  LOG.info("Received heartbeat from host" + ", hostname=" + hostname + ", currentResponseId="+ currentResponseId+ ", receivedResponseId="+ heartbeat.getResponseId());
  if (heartbeat.getResponseId() == currentResponseId - 1) {
    LOG.warn("Old responseId received - response was lost - returning cached response");
    return hostResponses.get(hostname);
  }
 else   if (heartbeat.getResponseId() != currentResponseId) {
    LOG.error("Error in responseId sequence - sending agent restart command");
    return createRestartCommand(currentResponseId);
  }
  response=new HeartBeatResponse();
  response.setResponseId(++currentResponseId);
  Host hostObject=clusterFsm.getHost(hostname);
  if (hostObject.getState().equals(HostState.HEARTBEAT_LOST)) {
    LOG.warn("Host is in HEARTBEAT_LOST state - sending register command");
    return createRegisterCommand();
  }
  hostResponseIds.put(hostname,currentResponseId);
  hostResponses.put(hostname,response);
  HostState hostState=hostObject.getState();
  if (heartbeat.componentStatus.size() > 0 && hostObject.getState().equals(HostState.WAITING_FOR_HOST_STATUS_UPDATES)) {
    try {
      LOG.debug("Got component status updates");
      hostObject.handleEvent(new HostStatusUpdatesReceivedEvent(hostname,now));
    }
 catch (    InvalidStateTransitionException e) {
      LOG.warn("Failed to notify the host about component status updates",e);
    }
  }
  try {
    if (heartbeat.getNodeStatus().getStatus().equals(HostStatus.Status.HEALTHY)) {
      hostObject.handleEvent(new HostHealthyHeartbeatEvent(hostname,now,heartbeat.getAgentEnv()));
    }
 else {
      hostObject.handleEvent(new HostUnhealthyHeartbeatEvent(hostname,now,null));
    }
    if (hostState != hostObject.getState())     scanner.updateHBaseMaster(hostObject);
  }
 catch (  InvalidStateTransitionException ex) {
    LOG.warn("Asking agent to reregister due to " + ex.getMessage(),ex);
    hostObject.setState(HostState.INIT);
    return createRegisterCommand();
  }
  processCommandReports(heartbeat,hostname,clusterFsm,now);
  processStatusReports(heartbeat,hostname,clusterFsm);
  if (hostObject.getState().equals(HostState.HEALTHY)) {
    sendCommands(hostname,response);
    annotateResponse(hostname,response);
  }
  return response;
}
