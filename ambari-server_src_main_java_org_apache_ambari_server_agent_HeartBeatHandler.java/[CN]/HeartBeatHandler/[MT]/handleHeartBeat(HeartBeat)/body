{
  HeartBeatResponse response=new HeartBeatResponse();
  response.setResponseId(0L);
  String hostname=heartbeat.getHostname();
  LOG.info("Action queue reference = " + actionQueue);
  LOG.info("Heartbeat received from host " + heartbeat.getHostname() + " responseId="+ heartbeat.getResponseId());
  Host hostObject=clusterFsm.getHost(hostname);
  long now=System.currentTimeMillis();
  try {
    if (heartbeat.getNodeStatus().getStatus().equals(HostStatus.Status.HEALTHY)) {
      hostObject.handleEvent(new HostHealthyHeartbeatEvent(hostname,now));
    }
 else {
      hostObject.handleEvent(new HostUnhealthyHeartbeatEvent(hostname,now,null));
    }
  }
 catch (  InvalidStateTransitonException ex) {
    hostObject.setState(HostState.INIT);
    RegistrationCommand regCmd=new RegistrationCommand();
    response.setRegistrationCommand(regCmd);
    return response;
  }
  List<CommandReport> reports=heartbeat.getReports();
  actionManager.actionResponse(hostname,reports);
  Set<Cluster> clusters=clusterFsm.getClustersForHost(hostname);
  for (  Cluster cl : clusters) {
    for (    ComponentStatus status : heartbeat.componentStatus) {
      if (status.getClusterName() == cl.getClusterName()) {
        Service svc=cl.getService(status.getServiceName());
        ServiceComponent svcComp=svc.getServiceComponent(status.getComponentName());
        ServiceComponentHost scHost=svcComp.getServiceComponentHost(hostname);
        State liveState=State.valueOf(State.class,status.getStatus());
        scHost.setState(liveState);
      }
    }
  }
  LOG.info("Host state =" + hostObject.getState());
  if (hostObject.getState().equals(HostState.HEALTHY)) {
    List<AgentCommand> cmds=actionQueue.dequeueAll(heartbeat.getHostname());
    if (cmds != null && !cmds.isEmpty()) {
      LOG.info("Sending commands..");
      for (      AgentCommand ac : cmds) {
        try {
          LOG.info("Command string = " + StageUtils.jaxbToString(ac));
        }
 catch (        Exception e) {
          throw new AmbariException("Could not get jaxb string for command",e);
        }
        if (ac.getCommandType().equals(AgentCommandType.EXECUTION_COMMAND)) {
          response.addExecutionCommand((ExecutionCommand)ac);
        }
      }
    }
 else {
      LOG.info("No commands to send");
    }
  }
  return response;
}
