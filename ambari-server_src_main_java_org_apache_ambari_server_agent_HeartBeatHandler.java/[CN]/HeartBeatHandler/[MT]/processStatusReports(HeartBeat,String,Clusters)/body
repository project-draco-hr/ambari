{
  Set<Cluster> clusters=clusterFsm.getClustersForHost(hostname);
  for (  Cluster cl : clusters) {
    for (    ComponentStatus status : heartbeat.componentStatus) {
      if (status.getClusterName().equals(cl.getClusterName())) {
        try {
          Service svc=cl.getService(status.getServiceName());
          String componentName=status.getComponentName();
          if (svc.getServiceComponents().containsKey(componentName)) {
            ServiceComponent svcComp=svc.getServiceComponent(componentName);
            ServiceComponentHost scHost=svcComp.getServiceComponentHost(hostname);
            State prevState=scHost.getState();
            State liveState=State.valueOf(State.class,status.getStatus());
            if (prevState.equals(State.INSTALLED) || prevState.equals(State.STARTED) || prevState.equals(State.STARTING)|| prevState.equals(State.STOPPING)|| prevState.equals(State.UNKNOWN)) {
              scHost.setState(liveState);
              if (!prevState.equals(liveState)) {
                LOG.info("State of service component " + componentName + " of service "+ status.getServiceName()+ " of cluster "+ status.getClusterName()+ " has changed from "+ prevState+ " to "+ liveState+ " at host "+ hostname);
              }
            }
            if (null != status.getStackVersion() && !status.getStackVersion().isEmpty()) {
              scHost.setStackVersion(gson.fromJson(status.getStackVersion(),StackId.class));
            }
            if (null != status.getConfigTags()) {
              scHost.updateActualConfigs(status.getConfigTags());
            }
            Map<String,Object> extra=status.getExtra();
            if (null != extra && !extra.isEmpty()) {
              try {
                if (extra.containsKey("processes")) {
                  @SuppressWarnings("unchecked") List<Map<String,String>> list=(List<Map<String,String>>)extra.get("processes");
                  scHost.setProcesses(list);
                }
              }
 catch (              Exception e) {
                LOG.error("Could not access extra JSON for " + scHost.getServiceComponentName() + " from "+ scHost.getHostName()+ ": "+ status.getExtra()+ " ("+ e.getMessage()+ ")");
              }
            }
            if (null != status.getAlerts()) {
              List<Alert> clusterAlerts=new ArrayList<Alert>();
              for (              AgentAlert aa : status.getAlerts()) {
                Alert alert=new Alert(aa.getName(),aa.getInstance(),scHost.getServiceName(),scHost.getServiceComponentName(),scHost.getHostName(),aa.getState());
                alert.setLabel(aa.getLabel());
                alert.setText(aa.getText());
                clusterAlerts.add(alert);
              }
              if (0 != clusterAlerts.size()) {
                cl.addAlerts(clusterAlerts);
              }
            }
          }
 else {
          }
        }
 catch (        ServiceNotFoundException e) {
          LOG.warn("Received a live status update for a non-initialized" + " service" + ", clusterName=" + status.getClusterName() + ", serviceName="+ status.getServiceName());
          continue;
        }
catch (        ServiceComponentNotFoundException e) {
          LOG.warn("Received a live status update for a non-initialized" + " servicecomponent" + ", clusterName=" + status.getClusterName() + ", serviceName="+ status.getServiceName()+ ", componentName="+ status.getComponentName());
          continue;
        }
catch (        ServiceComponentHostNotFoundException e) {
          LOG.warn("Received a live status update for a non-initialized" + " service" + ", clusterName=" + status.getClusterName() + ", serviceName="+ status.getServiceName()+ ", componentName="+ status.getComponentName()+ ", hostname="+ hostname);
          continue;
        }
catch (        RuntimeException e) {
          LOG.warn("Received a live status with invalid payload" + " service" + ", clusterName=" + status.getClusterName() + ", serviceName="+ status.getServiceName()+ ", componentName="+ status.getComponentName()+ ", hostname="+ hostname+ ", error="+ e.getMessage());
          continue;
        }
      }
    }
  }
}
