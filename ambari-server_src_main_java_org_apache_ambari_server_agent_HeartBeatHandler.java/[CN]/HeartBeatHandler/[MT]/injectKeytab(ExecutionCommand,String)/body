{
  Map<String,String> hlp=ec.getHostLevelParams();
  if ((hlp == null) || !"SET_KEYTAB".equals(hlp.get("custom_command"))) {
    return;
  }
  List<Map<String,String>> kcp=ec.getKerberosCommandParams();
  String dataDir=ec.getCommandParams().get(KerberosServerAction.DATA_DIRECTORY);
  KerberosActionDataFileReader reader=null;
  try {
    reader=new KerberosActionDataFileReader(new File(dataDir,KerberosActionDataFile.DATA_FILE_NAME));
    for (    Map<String,String> record : reader) {
      String hostName=record.get(KerberosActionDataFile.HOSTNAME);
      if (targetHost.equalsIgnoreCase(hostName)) {
        String keytabFilePath=record.get(KerberosActionDataFile.KEYTAB_FILE_PATH);
        if (keytabFilePath != null) {
          String sha1Keytab=DigestUtils.sha1Hex(keytabFilePath);
          File keytabFile=new File(dataDir + File.separator + hostName+ File.separator+ sha1Keytab);
          if (keytabFile.canRead()) {
            Map<String,String> keytabMap=new HashMap<String,String>();
            String principal=record.get(KerberosActionDataFile.PRINCIPAL);
            String isService=record.get(KerberosActionDataFile.SERVICE);
            keytabMap.put(KerberosActionDataFile.HOSTNAME,hostName);
            keytabMap.put(KerberosActionDataFile.SERVICE,isService);
            keytabMap.put(KerberosActionDataFile.COMPONENT,record.get(KerberosActionDataFile.COMPONENT));
            keytabMap.put(KerberosActionDataFile.PRINCIPAL,principal);
            keytabMap.put(KerberosActionDataFile.PRINCIPAL_CONFIGURATION,record.get(KerberosActionDataFile.PRINCIPAL_CONFIGURATION));
            keytabMap.put(KerberosActionDataFile.KEYTAB_FILE_PATH,keytabFilePath);
            keytabMap.put(KerberosActionDataFile.KEYTAB_FILE_OWNER_NAME,record.get(KerberosActionDataFile.KEYTAB_FILE_OWNER_NAME));
            keytabMap.put(KerberosActionDataFile.KEYTAB_FILE_OWNER_ACCESS,record.get(KerberosActionDataFile.KEYTAB_FILE_OWNER_ACCESS));
            keytabMap.put(KerberosActionDataFile.KEYTAB_FILE_GROUP_NAME,record.get(KerberosActionDataFile.KEYTAB_FILE_GROUP_NAME));
            keytabMap.put(KerberosActionDataFile.KEYTAB_FILE_GROUP_ACCESS,record.get(KerberosActionDataFile.KEYTAB_FILE_GROUP_ACCESS));
            keytabMap.put(KerberosActionDataFile.KEYTAB_FILE_CONFIGURATION,record.get(KerberosActionDataFile.KEYTAB_FILE_CONFIGURATION));
            BufferedInputStream bufferedIn=new BufferedInputStream(new FileInputStream(keytabFile));
            byte[] keytabContent=IOUtils.toByteArray(bufferedIn);
            String keytabContentBase64=Base64.encodeBase64String(keytabContent);
            keytabMap.put(KerberosServerAction.KEYTAB_CONTENT_BASE64,keytabContentBase64);
            kcp.add(keytabMap);
          }
        }
      }
    }
  }
 catch (  IOException e) {
    throw new AmbariException("Could not inject keytabs to enable kerberos");
  }
 finally {
    if (reader != null) {
      try {
        reader.close();
      }
 catch (      Throwable t) {
      }
    }
  }
  ec.setKerberosCommandParams(kcp);
}
