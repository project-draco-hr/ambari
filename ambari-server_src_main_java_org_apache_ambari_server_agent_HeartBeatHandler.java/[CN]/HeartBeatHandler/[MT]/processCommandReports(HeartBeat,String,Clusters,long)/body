{
  List<CommandReport> reports=heartbeat.getReports();
  List<Long> taskIds=new ArrayList<Long>();
  for (  CommandReport report : reports) {
    taskIds.add(report.getTaskId());
  }
  Collection<HostRoleCommand> commands=actionManager.getTasks(taskIds);
  Iterator<HostRoleCommand> hostRoleCommandIterator=commands.iterator();
  for (  CommandReport report : reports) {
    Long clusterId=null;
    if (report.getClusterName() != null) {
      try {
        Cluster cluster=clusterFsm.getCluster(report.getClusterName());
        clusterId=Long.valueOf(cluster.getClusterId());
      }
 catch (      AmbariException e) {
      }
    }
    LOG.debug("Received command report: " + report);
    HostRoleCommand hostRoleCommand=hostRoleCommandIterator.next();
    if (RoleCommand.valueOf(report.getRoleCommand()) == RoleCommand.ACTIONEXECUTE && HostRoleStatus.valueOf(report.getStatus()).isCompletedState()) {
      ActionFinalReportReceivedEvent event=new ActionFinalReportReceivedEvent(clusterId,hostname,report,report.getRole());
      ambariEventPublisher.publish(event);
    }
    if (hostRoleCommand.getStatus() == HostRoleStatus.ABORTED) {
      continue;
    }
    if (hostRoleCommand.getStatus() == HostRoleStatus.QUEUED && report.getStatus().equals("IN_PROGRESS")) {
      hostRoleCommand.setStartTime(now);
    }
    if (Service.Type.KERBEROS.name().equalsIgnoreCase(report.getServiceName()) && Role.KERBEROS_CLIENT.name().equalsIgnoreCase(report.getRole()) && RoleCommand.CUSTOM_COMMAND.name().equalsIgnoreCase(report.getRoleCommand())&& RequestExecution.Status.COMPLETED.name().equalsIgnoreCase(report.getStatus())) {
      String customCommand=report.getCustomCommand();
      boolean adding="SET_KEYTAB".equalsIgnoreCase(customCommand);
      if (adding || "REMOVE_KEYTAB".equalsIgnoreCase(customCommand)) {
        WriteKeytabsStructuredOut writeKeytabsStructuredOut;
        try {
          writeKeytabsStructuredOut=gson.fromJson(report.getStructuredOut(),WriteKeytabsStructuredOut.class);
        }
 catch (        JsonSyntaxException ex) {
          writeKeytabsStructuredOut=null;
        }
        if (writeKeytabsStructuredOut != null) {
          Map<String,String> keytabs=writeKeytabsStructuredOut.getKeytabs();
          if (keytabs != null) {
            for (            Map.Entry<String,String> entry : keytabs.entrySet()) {
              String principal=entry.getKey();
              if (!kerberosPrincipalHostDAO.exists(principal,hostname)) {
                if (adding) {
                  kerberosPrincipalHostDAO.create(principal,hostname);
                }
 else                 if ("_REMOVED_".equalsIgnoreCase(entry.getValue())) {
                  kerberosPrincipalHostDAO.remove(principal,hostname);
                }
              }
            }
          }
        }
      }
    }
    if (RoleCommand.ACTIONEXECUTE.toString().equals(report.getRoleCommand()) || (RoleCommand.CUSTOM_COMMAND.toString().equals(report.getRoleCommand()) && !("RESTART".equals(report.getCustomCommand()) || "START".equals(report.getCustomCommand()) || "STOP".equals(report.getCustomCommand())))) {
      continue;
    }
    Cluster cl=clusterFsm.getCluster(report.getClusterName());
    String service=report.getServiceName();
    if (service == null || service.isEmpty()) {
      throw new AmbariException("Invalid command report, service: " + service);
    }
    if (actionMetadata.getActions(service.toLowerCase()).contains(report.getRole())) {
      LOG.debug(report.getRole() + " is an action - skip component lookup");
    }
 else {
      try {
        Service svc=cl.getService(service);
        ServiceComponent svcComp=svc.getServiceComponent(report.getRole());
        ServiceComponentHost scHost=svcComp.getServiceComponentHost(hostname);
        String schName=scHost.getServiceComponentName();
        if (report.getStatus().equals(HostRoleStatus.COMPLETED.toString())) {
          if (StringUtils.isNotBlank(report.getStructuredOut())) {
            ComponentVersionStructuredOut structuredOutput=null;
            try {
              structuredOutput=gson.fromJson(report.getStructuredOut(),ComponentVersionStructuredOut.class);
            }
 catch (            JsonSyntaxException ex) {
            }
            String newVersion=structuredOutput == null ? null : structuredOutput.getVersion();
            handleComponentVersionReceived(cl,scHost,newVersion,true);
          }
          if (scHost.getState().equals(State.UPGRADING)) {
            scHost.setStackVersion(scHost.getDesiredStackVersion());
          }
 else           if ((report.getRoleCommand().equals(RoleCommand.START.toString()) || (report.getRoleCommand().equals(RoleCommand.CUSTOM_COMMAND.toString()) && ("START".equals(report.getCustomCommand()) || "RESTART".equals(report.getCustomCommand())))) && null != report.getConfigurationTags() && !report.getConfigurationTags().isEmpty()) {
            LOG.info("Updating applied config on service " + scHost.getServiceName() + ", component "+ scHost.getServiceComponentName()+ ", host "+ scHost.getHostName());
            scHost.updateActualConfigs(report.getConfigurationTags());
            scHost.setRestartRequired(false);
          }
          if ((RoleCommand.INSTALL.toString().equals(report.getRoleCommand()) || (RoleCommand.CUSTOM_COMMAND.toString().equals(report.getRoleCommand()) && "INSTALL".equals(report.getCustomCommand()))) && svcComp.isClientComponent()) {
            scHost.updateActualConfigs(report.getConfigurationTags());
            scHost.setRestartRequired(false);
          }
          if (RoleCommand.CUSTOM_COMMAND.toString().equals(report.getRoleCommand()) && !("START".equals(report.getCustomCommand()) || "STOP".equals(report.getCustomCommand()))) {
            continue;
          }
          if (RoleCommand.START.toString().equals(report.getRoleCommand()) || (RoleCommand.CUSTOM_COMMAND.toString().equals(report.getRoleCommand()) && "START".equals(report.getCustomCommand()))) {
            scHost.handleEvent(new ServiceComponentHostStartedEvent(schName,hostname,now));
            scHost.setRestartRequired(false);
          }
 else           if (RoleCommand.STOP.toString().equals(report.getRoleCommand()) || (RoleCommand.CUSTOM_COMMAND.toString().equals(report.getRoleCommand()) && "STOP".equals(report.getCustomCommand()))) {
            scHost.handleEvent(new ServiceComponentHostStoppedEvent(schName,hostname,now));
          }
 else {
            scHost.handleEvent(new ServiceComponentHostOpSucceededEvent(schName,hostname,now));
          }
        }
 else         if (report.getStatus().equals("FAILED")) {
          LOG.warn("Operation failed - may be retried. Service component host: " + schName + ", host: "+ hostname+ " Action id"+ report.getActionId());
          if (actionManager.isInProgressCommand(report)) {
            scHost.handleEvent(new ServiceComponentHostOpFailedEvent(schName,hostname,now));
          }
 else {
            LOG.info("Received report for a command that is no longer active. " + report);
          }
        }
 else         if (report.getStatus().equals("IN_PROGRESS")) {
          scHost.handleEvent(new ServiceComponentHostOpInProgressEvent(schName,hostname,now));
        }
      }
 catch (      ServiceComponentNotFoundException scnex) {
        LOG.warn("Service component not found ",scnex);
      }
catch (      InvalidStateTransitionException ex) {
        if (LOG.isDebugEnabled()) {
          LOG.warn("State machine exception.",ex);
        }
 else {
          LOG.warn("State machine exception. " + ex.getMessage());
        }
      }
    }
  }
  actionManager.processTaskResponse(hostname,reports,commands);
}
