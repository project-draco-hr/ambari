{
  List<Map<String,String>> kcp=ec.getKerberosCommandParams();
  String dataDir=ec.getCommandParams().get(KerberosServerAction.DATA_DIRECTORY);
  KerberosIdentityDataFileReader reader=null;
  try {
    reader=kerberosIdentityDataFileReaderFactory.createKerberosIdentityDataFileReader(new File(dataDir,KerberosIdentityDataFileReader.DATA_FILE_NAME));
    for (    Map<String,String> record : reader) {
      String hostName=record.get(KerberosIdentityDataFileReader.HOSTNAME);
      if (targetHost.equalsIgnoreCase(hostName)) {
        if ("SET_KEYTAB".equalsIgnoreCase(command)) {
          String keytabFilePath=record.get(KerberosIdentityDataFileReader.KEYTAB_FILE_PATH);
          if (keytabFilePath != null) {
            String sha1Keytab=DigestUtils.sha1Hex(keytabFilePath);
            File keytabFile=new File(dataDir + File.separator + hostName+ File.separator+ sha1Keytab);
            if (keytabFile.canRead()) {
              Map<String,String> keytabMap=new HashMap<String,String>();
              String principal=record.get(KerberosIdentityDataFileReader.PRINCIPAL);
              String isService=record.get(KerberosIdentityDataFileReader.SERVICE);
              keytabMap.put(KerberosIdentityDataFileReader.HOSTNAME,hostName);
              keytabMap.put(KerberosIdentityDataFileReader.SERVICE,isService);
              keytabMap.put(KerberosIdentityDataFileReader.COMPONENT,record.get(KerberosIdentityDataFileReader.COMPONENT));
              keytabMap.put(KerberosIdentityDataFileReader.PRINCIPAL,principal);
              keytabMap.put(KerberosIdentityDataFileReader.KEYTAB_FILE_PATH,keytabFilePath);
              keytabMap.put(KerberosIdentityDataFileReader.KEYTAB_FILE_OWNER_NAME,record.get(KerberosIdentityDataFileReader.KEYTAB_FILE_OWNER_NAME));
              keytabMap.put(KerberosIdentityDataFileReader.KEYTAB_FILE_OWNER_ACCESS,record.get(KerberosIdentityDataFileReader.KEYTAB_FILE_OWNER_ACCESS));
              keytabMap.put(KerberosIdentityDataFileReader.KEYTAB_FILE_GROUP_NAME,record.get(KerberosIdentityDataFileReader.KEYTAB_FILE_GROUP_NAME));
              keytabMap.put(KerberosIdentityDataFileReader.KEYTAB_FILE_GROUP_ACCESS,record.get(KerberosIdentityDataFileReader.KEYTAB_FILE_GROUP_ACCESS));
              BufferedInputStream bufferedIn=new BufferedInputStream(new FileInputStream(keytabFile));
              byte[] keytabContent=IOUtils.toByteArray(bufferedIn);
              String keytabContentBase64=Base64.encodeBase64String(keytabContent);
              keytabMap.put(KerberosServerAction.KEYTAB_CONTENT_BASE64,keytabContentBase64);
              kcp.add(keytabMap);
            }
          }
        }
 else         if ("REMOVE_KEYTAB".equalsIgnoreCase(command)) {
          Map<String,String> keytabMap=new HashMap<String,String>();
          keytabMap.put(KerberosIdentityDataFileReader.HOSTNAME,hostName);
          keytabMap.put(KerberosIdentityDataFileReader.SERVICE,record.get(KerberosIdentityDataFileReader.SERVICE));
          keytabMap.put(KerberosIdentityDataFileReader.COMPONENT,record.get(KerberosIdentityDataFileReader.COMPONENT));
          keytabMap.put(KerberosIdentityDataFileReader.PRINCIPAL,record.get(KerberosIdentityDataFileReader.PRINCIPAL));
          keytabMap.put(KerberosIdentityDataFileReader.KEYTAB_FILE_PATH,record.get(KerberosIdentityDataFileReader.KEYTAB_FILE_PATH));
          kcp.add(keytabMap);
        }
      }
    }
  }
 catch (  IOException e) {
    throw new AmbariException("Could not inject keytabs to enable kerberos");
  }
 finally {
    if (reader != null) {
      try {
        reader.close();
      }
 catch (      Throwable t) {
      }
    }
  }
  ec.setKerberosCommandParams(kcp);
}
