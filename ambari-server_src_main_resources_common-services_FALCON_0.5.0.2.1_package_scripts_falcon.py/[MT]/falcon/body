@OsFamilyFuncImpl(os_family=OsFamilyImpl.DEFAULT)
def falcon(type, action=None, upgrade_type=None):
    import params
    if (action == 'config'):
        Directory(params.falcon_pid_dir, owner=params.falcon_user, create_parents=True, mode=493, cd_access='a')
        Directory(params.falcon_log_dir, owner=params.falcon_user, create_parents=True, mode=493, cd_access='a')
        Directory(params.falcon_webapp_dir, owner=params.falcon_user, create_parents=True)
        Directory(params.falcon_home, owner=params.falcon_user, create_parents=True)
        Directory(params.etc_prefix_dir, mode=493, create_parents=True)
        Directory(params.falcon_conf_dir, owner=params.falcon_user, create_parents=True)
        File((params.falcon_conf_dir + '/falcon-env.sh'), content=InlineTemplate(params.falcon_env_sh_template), owner=params.falcon_user, group=params.user_group)
        PropertiesFile((params.falcon_conf_dir + '/client.properties'), properties=params.falcon_client_properties, mode=420, owner=params.falcon_user)
        PropertiesFile((params.falcon_conf_dir + '/runtime.properties'), properties=params.falcon_runtime_properties, mode=420, owner=params.falcon_user)
        PropertiesFile((params.falcon_conf_dir + '/startup.properties'), properties=params.falcon_startup_properties, mode=420, owner=params.falcon_user)
        if params.falcon_graph_storage_directory:
            Directory(params.falcon_graph_storage_directory, owner=params.falcon_user, group=params.user_group, mode=509, create_parents=True, cd_access='a')
        if params.falcon_graph_serialize_path:
            Directory(params.falcon_graph_serialize_path, owner=params.falcon_user, group=params.user_group, mode=509, create_parents=True, cd_access='a')
        if params.falcon_atlas_support:
            install_atlas_hook_packages(params.atlas_plugin_package, params.atlas_ubuntu_plugin_package, params.host_sys_prepped, params.agent_stack_retry_on_unavailability, params.agent_stack_retry_count)
            atlas_hook_filepath = os.path.join(params.falcon_conf_dir, params.atlas_hook_filename)
            setup_atlas_hook(SERVICE.FALCON, params.falcon_atlas_application_properties, atlas_hook_filepath, params.falcon_user, params.user_group)
            if (params.current_version_formatted and check_stack_feature(StackFeature.FALCON_ATLAS_SUPPORT_2_3, params.current_version_formatted)):
                setup_atlas_jar_symlinks('falcon', params.falcon_webinf_lib)
    if (type == 'server'):
        if (action == 'config'):
            if (params.store_uri[0:4] == 'hdfs'):
                params.HdfsResource(params.store_uri, type='directory', action='create_on_execute', owner=params.falcon_user, mode=493)
            elif (params.store_uri[0:4] == 'file'):
                Directory(params.store_uri[7:], owner=params.falcon_user, create_parents=True)
            params.HdfsResource(params.falcon_apps_dir, type='directory', action='create_on_execute', owner=params.falcon_user, mode=511)
            if params.supports_data_mirroring:
                params.HdfsResource(params.dfs_data_mirroring_dir, type='directory', action='create_on_execute', owner=params.falcon_user, group=params.proxyuser_group, recursive_chown=True, recursive_chmod=True, mode=504, source=params.local_data_mirroring_dir)
            effective_version = (params.stack_version_formatted if (upgrade_type is None) else format_stack_version(params.version))
            supports_falcon_extensions = (effective_version and check_stack_feature(StackFeature.FALCON_EXTENSIONS, effective_version))
            if supports_falcon_extensions:
                params.HdfsResource(params.falcon_extensions_dest_dir, type='directory', action='create_on_execute', owner=params.falcon_user, group=params.proxyuser_group, recursive_chown=True, recursive_chmod=True, mode=493, source=params.falcon_extensions_source_dir)
                params.HdfsResource(os.path.join(params.falcon_extensions_dest_dir, 'mirroring'), type='directory', action='create_on_execute', owner=params.falcon_user, group=params.proxyuser_group, mode=504)
            params.HdfsResource(None, action='execute')
            Directory(params.falcon_local_dir, owner=params.falcon_user, create_parents=True, cd_access='a')
            if (params.falcon_embeddedmq_enabled == True):
                Directory(os.path.abspath(os.path.join(params.falcon_embeddedmq_data, '..')), owner=params.falcon_user, create_parents=True)
                Directory(params.falcon_embeddedmq_data, owner=params.falcon_user, create_parents=True)
        environment_dictionary = {'HADOOP_HOME': params.hadoop_home_dir, }
        pid = get_user_call_output.get_user_call_output(format('cat {server_pid_file}'), user=params.falcon_user, is_checked_call=False)[1]
        process_exists = format('ls {server_pid_file} && ps -p {pid}')
        if (action == 'start'):
            try:
                Execute(format('{falcon_home}/bin/falcon-config.sh server falcon'), user=params.falcon_user, path=params.hadoop_bin_dir, environment=environment_dictionary, not_if=process_exists)
            except:
                show_logs(params.falcon_log_dir, params.falcon_user)
                raise
            if (not os.path.exists(params.target_jar_file)):
                try:
                    File(params.target_jar_file, content=DownloadSource(params.bdb_resource_name), mode=493)
                except:
                    exc_msg = traceback.format_exc()
                    exception_message = format('Caught Exception while downloading {bdb_resource_name}:\n{exc_msg}')
                    Logger.error(exception_message)
                if (not os.path.isfile(params.target_jar_file)):
                    error_message = '\nIf you are using bdb as the Falcon graph db store, please run\nambari-server setup --jdbc-db=bdb --jdbc-driver=<path to je5.0.73.jar>\non the ambari server host.  Otherwise falcon startup will fail.\nOtherwise please configure Falcon to use HBase as the backend as described\nin the Falcon documentation.\n'
                    Logger.error(error_message)
            try:
                Execute(format('{falcon_home}/bin/falcon-start -port {falcon_port}'), user=params.falcon_user, path=params.hadoop_bin_dir, environment=environment_dictionary, not_if=process_exists)
            except:
                show_logs(params.falcon_log_dir, params.falcon_user)
                raise
        if (action == 'stop'):
            try:
                Execute(format('{falcon_home}/bin/falcon-stop'), user=params.falcon_user, path=params.hadoop_bin_dir, environment=environment_dictionary)
            except:
                show_logs(params.falcon_log_dir, params.falcon_user)
                raise
            File(params.server_pid_file, action='delete')
