@OsFamilyFuncImpl(os_family=OsFamilyImpl.DEFAULT)
def falcon(type, action=None, upgrade_type=None):
    import params
    if (action == 'config'):
        Directory(params.falcon_pid_dir, owner=params.falcon_user, create_parents=True, mode=493, cd_access='a')
        Directory(params.falcon_log_dir, owner=params.falcon_user, create_parents=True, mode=493, cd_access='a')
        Directory(params.falcon_webapp_dir, owner=params.falcon_user, create_parents=True)
        Directory(params.falcon_home, owner=params.falcon_user, create_parents=True)
        Directory(params.etc_prefix_dir, mode=493, create_parents=True)
        Directory(params.falcon_conf_dir, owner=params.falcon_user, create_parents=True)
        File((params.falcon_conf_dir + '/falcon-env.sh'), content=InlineTemplate(params.falcon_env_sh_template), owner=params.falcon_user, group=params.user_group)
        File((params.falcon_conf_dir + '/client.properties'), content=Template('client.properties.j2'), mode=420, owner=params.falcon_user)
        PropertiesFile((params.falcon_conf_dir + '/runtime.properties'), properties=params.falcon_runtime_properties, mode=420, owner=params.falcon_user)
        PropertiesFile((params.falcon_conf_dir + '/startup.properties'), properties=params.falcon_startup_properties, mode=420, owner=params.falcon_user)
        if params.falcon_graph_storage_directory:
            Directory(params.falcon_graph_storage_directory, owner=params.falcon_user, group=params.user_group, mode=509, create_parents=True, cd_access='a')
        if params.falcon_graph_serialize_path:
            Directory(params.falcon_graph_serialize_path, owner=params.falcon_user, group=params.user_group, mode=509, create_parents=True, cd_access='a')
        if params.has_atlas:
            atlas_falcon_hook_dir = os.path.join(params.atlas_home_dir, 'hook', 'falcon')
            if os.path.exists(atlas_falcon_hook_dir):
                Link(os.path.join(params.falcon_conf_dir, params.atlas_conf_file), to=os.path.join(params.atlas_conf_dir, params.atlas_conf_file))
    if (type == 'server'):
        if (action == 'config'):
            if (params.store_uri[0:4] == 'hdfs'):
                params.HdfsResource(params.store_uri, type='directory', action='create_on_execute', owner=params.falcon_user, mode=493)
            elif (params.store_uri[0:4] == 'file'):
                Directory(params.store_uri[7:], owner=params.falcon_user, create_parents=True)
            params.HdfsResource(params.falcon_apps_dir, type='directory', action='create_on_execute', owner=params.falcon_user, mode=511)
            if (params.falcon_store_uri[0:4] == 'hdfs'):
                params.HdfsResource(params.falcon_store_uri, type='directory', action='create_on_execute', owner=params.falcon_user, mode=493)
            elif (params.falcon_store_uri[0:4] == 'file'):
                Directory(params.falcon_store_uri[7:], owner=params.falcon_user, create_parents=True)
            if params.supports_hive_dr:
                params.HdfsResource(params.dfs_data_mirroring_dir, type='directory', action='create_on_execute', owner=params.falcon_user, group=params.proxyuser_group, recursive_chown=True, recursive_chmod=True, mode=504, source=params.local_data_mirroring_dir)
            params.HdfsResource(None, action='execute')
            Directory(params.falcon_local_dir, owner=params.falcon_user, create_parents=True, cd_access='a')
            if (params.falcon_embeddedmq_enabled == True):
                Directory(os.path.abspath(os.path.join(params.falcon_embeddedmq_data, '..')), owner=params.falcon_user, create_parents=True)
                Directory(params.falcon_embeddedmq_data, owner=params.falcon_user, create_parents=True)
        environment_dictionary = {'HADOOP_HOME': params.hadoop_home_dir, }
        if (action == 'start'):
            Execute(format('{falcon_home}/bin/falcon-start -port {falcon_port}'), user=params.falcon_user, path=params.hadoop_bin_dir, environment=environment_dictionary)
            if params.has_atlas:
                atlas_falcon_hook_dir = os.path.join(params.atlas_home_dir, 'hook', 'falcon')
                if os.path.exists(atlas_falcon_hook_dir):
                    src_files = os.listdir(atlas_falcon_hook_dir)
                    for file_name in src_files:
                        atlas_falcon_hook_file_name = os.path.join(atlas_falcon_hook_dir, file_name)
                        falcon_lib_file_name = os.path.join(params.falcon_webinf_lib, file_name)
                        if os.path.isfile(atlas_falcon_hook_file_name):
                            Link(falcon_lib_file_name, to=atlas_falcon_hook_file_name)
        if (action == 'stop'):
            Execute(format('{falcon_home}/bin/falcon-stop'), user=params.falcon_user, path=params.hadoop_bin_dir, environment=environment_dictionary)
            File(params.server_pid_file, action='delete')
