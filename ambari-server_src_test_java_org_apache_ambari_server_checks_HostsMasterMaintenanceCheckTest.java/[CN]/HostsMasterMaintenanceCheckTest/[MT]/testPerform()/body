{
  final HostsMasterMaintenanceCheck hostsMasterMaintenanceCheck=new HostsMasterMaintenanceCheck();
  hostsMasterMaintenanceCheck.clustersProvider=new Provider<Clusters>(){
    @Override public Clusters get(){
      return clusters;
    }
  }
;
  hostsMasterMaintenanceCheck.repositoryVersionDaoProvider=new Provider<RepositoryVersionDAO>(){
    @Override public RepositoryVersionDAO get(){
      return repositoryVersionDAO;
    }
  }
;
  hostsMasterMaintenanceCheck.repositoryVersionHelper=new Provider<RepositoryVersionHelper>(){
    @Override public RepositoryVersionHelper get(){
      return repositoryVersionHelper;
    }
  }
;
  hostsMasterMaintenanceCheck.ambariMetaInfo=new Provider<AmbariMetaInfo>(){
    @Override public AmbariMetaInfo get(){
      return ambariMetaInfo;
    }
  }
;
  final Cluster cluster=Mockito.mock(Cluster.class);
  Mockito.when(cluster.getClusterId()).thenReturn(1L);
  Mockito.when(clusters.getCluster("cluster")).thenReturn(cluster);
  Mockito.when(cluster.getDesiredStackVersion()).thenReturn(new StackId("HDP","1.0"));
  Mockito.when(repositoryVersionHelper.getUpgradePackageName(Mockito.anyString(),Mockito.anyString(),Mockito.anyString())).thenReturn(null);
  PrerequisiteCheck check=new PrerequisiteCheck(null,null);
  hostsMasterMaintenanceCheck.perform(check,new PrereqCheckRequest("cluster"));
  Assert.assertEquals(PrereqCheckStatus.FAIL,check.getStatus());
  Mockito.when(repositoryVersionHelper.getUpgradePackageName(Mockito.anyString(),Mockito.anyString(),Mockito.anyString())).thenReturn("upgrade pack");
  Mockito.when(ambariMetaInfo.getUpgradePacks(Mockito.anyString(),Mockito.anyString())).thenReturn(new HashMap<String,UpgradePack>());
  check=new PrerequisiteCheck(null,null);
  hostsMasterMaintenanceCheck.perform(check,new PrereqCheckRequest("cluster"));
  Assert.assertEquals(PrereqCheckStatus.FAIL,check.getStatus());
  final Map<String,UpgradePack> upgradePacks=new HashMap<String,UpgradePack>();
  final UpgradePack upgradePack=Mockito.mock(UpgradePack.class);
  upgradePacks.put("upgrade pack",upgradePack);
  Mockito.when(ambariMetaInfo.getUpgradePacks(Mockito.anyString(),Mockito.anyString())).thenReturn(upgradePacks);
  Mockito.when(upgradePack.getTasks()).thenReturn(new HashMap<String,Map<String,ProcessingComponent>>());
  Mockito.when(cluster.getServices()).thenReturn(new HashMap<String,Service>());
  Mockito.when(clusters.getHostsForCluster(Mockito.anyString())).thenReturn(new HashMap<String,Host>());
  check=new PrerequisiteCheck(null,null);
  hostsMasterMaintenanceCheck.perform(check,new PrereqCheckRequest("cluster"));
  Assert.assertEquals(PrereqCheckStatus.PASS,check.getStatus());
}
