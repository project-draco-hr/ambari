{
  final HostMaintenanceModeCheck hostMaintenanceModeCheck=new HostMaintenanceModeCheck();
  hostMaintenanceModeCheck.clustersProvider=new Provider<Clusters>(){
    @Override public Clusters get(){
      return clusters;
    }
  }
;
  final Cluster cluster=Mockito.mock(Cluster.class);
  Mockito.when(cluster.getClusterId()).thenReturn(1L);
  Mockito.when(cluster.getCurrentStackVersion()).thenReturn(new StackId("HDP","2.2"));
  Mockito.when(clusters.getCluster("cluster")).thenReturn(cluster);
  final List<Host> hosts=new ArrayList<>();
  final Host host1=Mockito.mock(Host.class);
  final Host host2=Mockito.mock(Host.class);
  final Host host3=Mockito.mock(Host.class);
  Mockito.when(host1.getMaintenanceState(1L)).thenReturn(MaintenanceState.OFF);
  Mockito.when(host2.getMaintenanceState(1L)).thenReturn(MaintenanceState.OFF);
  Mockito.when(host3.getMaintenanceState(1L)).thenReturn(MaintenanceState.OFF);
  hosts.add(host1);
  hosts.add(host2);
  hosts.add(host3);
  Mockito.when(cluster.getHosts()).thenReturn(hosts);
  PrerequisiteCheck check=new PrerequisiteCheck(null,null);
  hostMaintenanceModeCheck.perform(check,new PrereqCheckRequest("cluster"));
  Assert.assertEquals(PrereqCheckStatus.PASS,check.getStatus());
  check=new PrerequisiteCheck(null,null);
  Mockito.when(host3.getMaintenanceState(1L)).thenReturn(MaintenanceState.ON);
  hostMaintenanceModeCheck.perform(check,new PrereqCheckRequest("cluster"));
  Assert.assertEquals(PrereqCheckStatus.WARNING,check.getStatus());
}
