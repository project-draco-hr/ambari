{
  if (tasks == null || tasks.isEmpty() || tasks.get(0).getTasks() == null || tasks.get(0).getTasks().isEmpty()) {
    return;
  }
  StageWrapper.Type type=tasks.get(0).getTasks().get(0).getStageWrapperType();
  for (  TaskWrapper tw : tasks) {
    List<Set<String>> hostSets=null;
    if (m_grouping.parallelScheduler != null && m_grouping.parallelScheduler.maxDegreeOfParallelism > 0) {
      hostSets=SetUtils.split(tw.getHosts(),m_grouping.parallelScheduler.maxDegreeOfParallelism);
    }
 else {
      hostSets=SetUtils.split(tw.getHosts(),1);
    }
    int numBatchesNeeded=hostSets.size();
    int batchNum=0;
    for (    Set<String> hostSubset : hostSets) {
      batchNum++;
      TaskWrapper expandedTW=new TaskWrapper(tw.getService(),tw.getComponent(),hostSubset,tw.getParams(),tw.getTasks());
      String stageText=getStageText(verb,ctx.getComponentDisplay(service,pc.name),hostSubset,batchNum,numBatchesNeeded);
      StageWrapper stage=new StageWrapper(type,stageText,params,new TaskWrapper(service,pc.name,hostSubset,params,tw.getTasks()));
      m_stages.add(stage);
    }
  }
}
