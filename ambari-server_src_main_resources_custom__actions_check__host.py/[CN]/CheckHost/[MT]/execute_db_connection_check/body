def execute_db_connection_check(self, config):
    print 'DB connection check started.'
    ambari_server_hostname = config['commandParams']['ambari_server_host']
    check_db_connection_jar_name = 'DBConnectionVerification.jar'
    jdk_location = config['commandParams']['jdk_location']
    java64_home = config['commandParams']['java_home']
    db_name = config['commandParams']['db_name']
    if (db_name == DB_MYSQL):
        jdbc_url = (jdk_location + JDBC_DRIVER_SYMLINK_MYSQL)
        jdbc_driver = JDBC_DRIVER_MYSQL
        jdbc_name = JDBC_DRIVER_SYMLINK_MYSQL
    elif (db_name == DB_ORACLE):
        jdbc_url = (jdk_location + JDBC_DRIVER_SYMLINK_ORACLE)
        jdbc_driver = JDBC_DRIVER_ORACLE
        jdbc_name = JDBC_DRIVER_SYMLINK_ORACLE
    elif (db_name == DB_POSTGRESQL):
        jdbc_url = (jdk_location + JDBC_DRIVER_SYMLINK_POSTGRESQL)
        jdbc_driver = JDBC_DRIVER_POSTGRESQL
        jdbc_name = JDBC_DRIVER_SYMLINK_POSTGRESQL
    db_connection_url = config['commandParams']['db_connection_url']
    user_name = config['commandParams']['user_name']
    user_passwd = config['commandParams']['user_passwd']
    java_exec = os.path.join(java64_home, 'bin', 'java')
    if ((('jdk_name' not in config['commandParams']) or (config['commandParams']['jdk_name'] == None) or (config['commandParams']['jdk_name'] == '')) and (not os.path.isfile(java_exec))):
        message = 'Custom java is not available on host. Please install it. Java home should be the same as on server. \n'
        print message
        db_connection_check_structured_output = {'exit_code': 1, 'message': message, }
        return db_connection_check_structured_output
    environment = {'no_proxy': format('{ambari_server_hostname}'), }
    artifact_dir = '/tmp/HDP-artifacts/'
    java_dir = os.path.dirname(java64_home)
    if (not os.path.isfile(java_exec)):
        try:
            jdk_name = config['commandParams']['jdk_name']
            jdk_curl_target = format('{artifact_dir}/{jdk_name}')
            Execute(format('mkdir -p {artifact_dir} ; curl -kf --retry 10 {jdk_location}/{jdk_name} -o {jdk_curl_target}'), path=['/bin', '/usr/bin/'], environment=environment)
        except Exception as e:
            message = ('Error downloading JDK from Ambari Server resources. Check network access to Ambari Server.\n' + str(e))
            print message
            db_connection_check_structured_output = {'exit_code': 1, 'message': message, }
            return db_connection_check_structured_output
        if jdk_name.endswith('.bin'):
            install_cmd = format('mkdir -p {java_dir} ; chmod +x {jdk_curl_target}; cd {java_dir} ; echo A | {jdk_curl_target} -noregister > /dev/null 2>&1')
        elif jdk_name.endswith('.gz'):
            install_cmd = format('mkdir -p {java_dir} ; cd {java_dir} ; tar -xf {jdk_curl_target} > /dev/null 2>&1')
        try:
            Execute(install_cmd, path=['/bin', '/usr/bin/'])
        except Exception as e:
            message = ('Error installing java.\n' + str(e))
            print message
            db_connection_check_structured_output = {'exit_code': 1, 'message': message, }
            return db_connection_check_structured_output
    try:
        cmd = format("/bin/sh -c 'cd /usr/lib/ambari-agent/ && curl -kf --retry 5 {jdk_location}{check_db_connection_jar_name} -o {check_db_connection_jar_name}'")
        Execute(cmd, not_if=format('[ -f /usr/lib/ambari-agent/{check_db_connection_jar_name}]'), environment=environment)
    except Exception as e:
        message = ('Error downloading DBConnectionVerification.jar from Ambari Server resources. Check network access to Ambari Server.\n' + str(e))
        print message
        db_connection_check_structured_output = {'exit_code': 1, 'message': message, }
        return db_connection_check_structured_output
    try:
        cmd = format("/bin/sh -c 'cd /usr/lib/ambari-agent/ && curl -kf --retry 5 {jdbc_url} -o {jdbc_name}'")
        Execute(cmd, not_if=format('[ -f /usr/lib/ambari-agent/{jdbc_name}]'), environment=environment)
    except Exception as e:
        message = (format('Error: Ambari Server cannot download the database JDBC driver and is unable to test the database connection. You must run ambari-server setup --jdbc-db={db_name} --jdbc-driver=/path/to/your/{db_name}/driver.jar on the Ambari Server host to make the JDBC driver available for download and to enable testing the database connection.\n') + str(e))
        print message
        db_connection_check_structured_output = {'exit_code': 1, 'message': message, }
        return db_connection_check_structured_output
    db_connection_check_command = format('{java64_home}/bin/java -cp /usr/lib/ambari-agent/{check_db_connection_jar_name}:/usr/lib/ambari-agent/{jdbc_name} org.apache.ambari.server.DBConnectionVerification {db_connection_url} {user_name} {user_passwd!p} {jdbc_driver}')
    process = subprocess.Popen(db_connection_check_command, stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
    (stdoutdata, stderrdata) = process.communicate()
    print ('INFO stdoutdata: ' + stdoutdata)
    print ('INFO stderrdata: ' + stderrdata)
    print ('INFO returncode: ' + str(process.returncode))
    if (process.returncode == 0):
        db_connection_check_structured_output = {'exit_code': 0, 'message': 'DB connection check completed successfully!', }
    else:
        db_connection_check_structured_output = {'exit_code': 1, 'message': (stdoutdata + stderrdata), }
    return db_connection_check_structured_output
