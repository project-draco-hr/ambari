{
  Set<Map<String,Object>> requestProperties=request.getProperties();
  if (requestProperties.size() > 1) {
    throw new IllegalArgumentException("Cannot process more than one file per request");
  }
  final Map<String,Object> properties=requestProperties.iterator().next();
  if (!properties.containsKey(VERSION_DEF_DEFINITION_URL) && !properties.containsKey(VERSION_DEF_DEFINITION_BASE64) && !properties.containsKey(VERSION_DEF_AVAILABLE_DEFINITION)) {
    throw new IllegalArgumentException(String.format("Creation method is not known.  %s or %s is required or upload the file directly",VERSION_DEF_DEFINITION_URL,VERSION_DEF_AVAILABLE_DEFINITION));
  }
  if (properties.containsKey(VERSION_DEF_DEFINITION_URL) && properties.containsKey(VERSION_DEF_DEFINITION_BASE64)) {
    throw new IllegalArgumentException(String.format("Specify ONLY the url with %s or upload the file directly",VERSION_DEF_DEFINITION_URL));
  }
  final String definitionUrl=(String)properties.get(VERSION_DEF_DEFINITION_URL);
  final String definitionBase64=(String)properties.get(VERSION_DEF_DEFINITION_BASE64);
  final String definitionName=(String)properties.get(VERSION_DEF_AVAILABLE_DEFINITION);
  final Set<String> validations=new HashSet<>();
  final boolean dryRun=request.isDryRunRequest();
  final boolean skipUrlCheck;
  if (null != request.getRequestInfoProperties()) {
    skipUrlCheck=BooleanUtils.toBoolean(request.getRequestInfoProperties().get(DIRECTIVE_SKIP_URL_CHECK));
  }
 else {
    skipUrlCheck=false;
  }
  XmlHolder xmlHolder=createResources(new Command<XmlHolder>(){
    @Override public XmlHolder invoke() throws AmbariException {
      XmlHolder holder=null;
      if (null != definitionUrl) {
        holder=loadXml(definitionUrl);
      }
 else       if (null != definitionBase64) {
        holder=loadXml(Base64.decodeBase64(definitionBase64));
      }
 else       if (null != definitionName) {
        VersionDefinitionXml xml=s_metaInfo.get().getVersionDefinition(definitionName);
        if (null == xml) {
          throw new AmbariException(String.format("Version %s not found",definitionName));
        }
        holder=new XmlHolder();
        holder.xml=xml;
        try {
          holder.xmlString=xml.toXml();
        }
 catch (        Exception e) {
          throw new AmbariException(String.format("The available repository %s does not serialize",definitionName));
        }
      }
 else {
        throw new AmbariException("Cannot determine creation method");
      }
      toRepositoryVersionEntity(holder);
      try {
        RepositoryVersionResourceProvider.validateRepositoryVersion(s_repoVersionDAO,s_metaInfo.get(),holder.entity,skipUrlCheck);
      }
 catch (      AmbariException e) {
        if (dryRun) {
          validations.add(e.getMessage());
        }
 else {
          throw e;
        }
      }
      checkForParent(holder);
      return holder;
    }
  }
);
  if (StringUtils.isNotBlank(ObjectUtils.toString(properties.get(VERSION_DEF_DISPLAY_NAME)))) {
    xmlHolder.xml.release.display=properties.get(VERSION_DEF_DISPLAY_NAME).toString();
    xmlHolder.entity.setDisplayName(properties.get(VERSION_DEF_DISPLAY_NAME).toString());
  }
  if (s_repoVersionDAO.findByDisplayName(xmlHolder.entity.getDisplayName()) != null) {
    String err=String.format("Repository version with name %s already exists.",xmlHolder.entity.getDisplayName());
    if (dryRun) {
      validations.add(err);
    }
 else {
      throw new IllegalArgumentException(err);
    }
  }
  if (s_repoVersionDAO.findByStackAndVersion(xmlHolder.entity.getStack(),xmlHolder.entity.getVersion()) != null) {
    String err=String.format("Repository version for stack %s and version %s already exists.",xmlHolder.entity.getStackId(),xmlHolder.entity.getVersion());
    if (dryRun) {
      validations.add(err);
    }
 else {
      throw new IllegalArgumentException(err);
    }
  }
  final Resource res;
  if (dryRun) {
    Set<String> ids=Sets.newHashSet(VERSION_DEF_TYPE_PROPERTY_ID,VERSION_DEF_FULL_VERSION,VERSION_DEF_RELEASE_BUILD,VERSION_DEF_RELEASE_COMPATIBLE_WITH,VERSION_DEF_RELEASE_NOTES,VERSION_DEF_RELEASE_VERSION,VERSION_DEF_DISPLAY_NAME,VERSION_DEF_AVAILABLE_SERVICES,VERSION_DEF_VALIDATION,VERSION_DEF_STACK_SERVICES);
    res=toResource(null,xmlHolder.xml,ids,validations);
    if (null != definitionName) {
      res.setProperty(SHOW_AVAILABLE,true);
    }
    addSubresources(res,xmlHolder.entity);
  }
 else {
    s_repoVersionDAO.create(xmlHolder.entity);
    res=toResource(xmlHolder.entity,Collections.<String>emptySet());
    notifyCreate(Resource.Type.VersionDefinition,request);
  }
  RequestStatusImpl status=new RequestStatusImpl(null,Collections.singleton(res));
  return status;
}
