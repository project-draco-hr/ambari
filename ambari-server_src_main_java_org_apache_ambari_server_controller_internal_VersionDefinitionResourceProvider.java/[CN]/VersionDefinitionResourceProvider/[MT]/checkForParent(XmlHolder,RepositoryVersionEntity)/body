{
  if (entity.getType() != RepositoryType.PATCH) {
    return;
  }
  List<RepositoryVersionEntity> entities=s_repoVersionDAO.findByStack(entity.getStackId());
  if (entities.isEmpty()) {
    throw new AmbariException(String.format("Patch %s was uploaded, but there are no repositories for %s",entity.getVersion(),entity.getStackId().toString()));
  }
  List<RepositoryVersionEntity> matching=new ArrayList<>();
  boolean emptyCompatible=StringUtils.isBlank(holder.xml.release.compatibleWith);
  for (  RepositoryVersionEntity candidate : entities) {
    String baseVersion=candidate.getVersion();
    if (baseVersion.lastIndexOf('-') > -1) {
      baseVersion=baseVersion.substring(0,baseVersion.lastIndexOf('-'));
    }
    if (emptyCompatible) {
      if (baseVersion.equals(holder.xml.release.version)) {
        matching.add(candidate);
      }
    }
 else {
      if (baseVersion.matches(holder.xml.release.compatibleWith)) {
        matching.add(candidate);
      }
    }
  }
  if (matching.isEmpty()) {
    String format="No versions matched pattern %s";
    throw new AmbariException(String.format(format,emptyCompatible ? holder.xml.release.version : holder.xml.release.compatibleWith));
  }
 else   if (matching.size() > 1) {
    Set<String> versions=new HashSet<>();
    for (    RepositoryVersionEntity match : matching) {
      versions.add(match.getVersion());
    }
    throw new AmbariException(String.format("More than one repository matches patch %s: %s",entity.getVersion(),StringUtils.join(versions,", ")));
  }
  RepositoryVersionEntity parent=matching.get(0);
  entity.setParent(parent);
}
