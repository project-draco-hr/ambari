{
  if (!isInitialized) {
    hBaseAccessor=new PhoenixHBaseAccessor(hbaseConf,metricsConf);
    hBaseAccessor.initMetricSchema();
    if (Boolean.parseBoolean(metricsConf.get(USE_GROUPBY_AGGREGATOR_QUERIES,"true"))) {
      LOG.info("Using group by aggregators for aggregating host and cluster metrics.");
    }
    TimelineMetricAggregator secondClusterAggregator=TimelineMetricAggregatorFactory.createTimelineClusterAggregatorSecond(hBaseAccessor,metricsConf);
    if (!secondClusterAggregator.isDisabled()) {
      Thread aggregatorThread=new Thread(secondClusterAggregator);
      aggregatorThread.start();
    }
    TimelineMetricAggregator minuteClusterAggregator=TimelineMetricAggregatorFactory.createTimelineClusterAggregatorMinute(hBaseAccessor,metricsConf);
    if (!minuteClusterAggregator.isDisabled()) {
      Thread aggregatorThread=new Thread(minuteClusterAggregator);
      aggregatorThread.start();
    }
    TimelineMetricAggregator hourlyClusterAggregator=TimelineMetricAggregatorFactory.createTimelineClusterAggregatorHourly(hBaseAccessor,metricsConf);
    if (!hourlyClusterAggregator.isDisabled()) {
      Thread aggregatorThread=new Thread(hourlyClusterAggregator);
      aggregatorThread.start();
    }
    TimelineMetricAggregator dailyClusterAggregator=TimelineMetricAggregatorFactory.createTimelineClusterAggregatorDaily(hBaseAccessor,metricsConf);
    if (!dailyClusterAggregator.isDisabled()) {
      Thread aggregatorThread=new Thread(dailyClusterAggregator);
      aggregatorThread.start();
    }
    TimelineMetricAggregator minuteHostAggregator=TimelineMetricAggregatorFactory.createTimelineMetricAggregatorMinute(hBaseAccessor,metricsConf);
    if (!minuteHostAggregator.isDisabled()) {
      Thread minuteAggregatorThread=new Thread(minuteHostAggregator);
      minuteAggregatorThread.start();
    }
    TimelineMetricAggregator hourlyHostAggregator=TimelineMetricAggregatorFactory.createTimelineMetricAggregatorHourly(hBaseAccessor,metricsConf);
    if (!hourlyHostAggregator.isDisabled()) {
      Thread aggregatorHourlyThread=new Thread(hourlyHostAggregator);
      aggregatorHourlyThread.start();
    }
    TimelineMetricAggregator dailyHostAggregator=TimelineMetricAggregatorFactory.createTimelineMetricAggregatorDaily(hBaseAccessor,metricsConf);
    if (!dailyHostAggregator.isDisabled()) {
      Thread aggregatorDailyThread=new Thread(dailyHostAggregator);
      aggregatorDailyThread.start();
    }
    int initDelay=configuration.getTimelineMetricsServiceWatcherInitDelay();
    int delay=configuration.getTimelineMetricsServiceWatcherDelay();
    executorService.scheduleWithFixedDelay(new TimelineMetricStoreWatcher(this,configuration),initDelay,delay,TimeUnit.SECONDS);
    LOG.info("Started watchdog for timeline metrics store with initial " + "delay = " + initDelay + ", delay = "+ delay);
    isInitialized=true;
  }
}
