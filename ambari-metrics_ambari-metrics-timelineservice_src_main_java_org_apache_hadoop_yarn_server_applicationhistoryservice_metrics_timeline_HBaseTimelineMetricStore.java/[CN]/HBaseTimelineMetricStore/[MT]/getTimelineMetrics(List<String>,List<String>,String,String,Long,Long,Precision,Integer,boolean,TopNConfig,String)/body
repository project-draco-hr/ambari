{
  if (metricNames == null || metricNames.isEmpty()) {
    throw new IllegalArgumentException("No metric name filter specified.");
  }
  if ((startTime == null && endTime != null) || (startTime != null && endTime == null)) {
    throw new IllegalArgumentException("Open ended query not supported ");
  }
  if (limit != null && limit > PhoenixHBaseAccessor.RESULTSET_LIMIT) {
    throw new IllegalArgumentException("Limit too big");
  }
  TimelineMetricsSeriesAggregateFunction seriesAggrFunctionInstance=null;
  if (!StringUtils.isEmpty(seriesAggregateFunction)) {
    SeriesAggregateFunction func=SeriesAggregateFunction.getFunction(seriesAggregateFunction);
    seriesAggrFunctionInstance=TimelineMetricsSeriesAggregateFunctionFactory.newInstance(func);
  }
  Multimap<String,List<Function>> metricFunctions=parseMetricNamesToAggregationFunctions(metricNames);
  ConditionBuilder conditionBuilder=new ConditionBuilder(new ArrayList<String>(metricFunctions.keySet())).hostnames(hostnames).appId(applicationId).instanceId(instanceId).startTime(startTime).endTime(endTime).precision(precision).limit(limit).grouped(groupedByHosts);
  if (topNConfig != null) {
    if (TopNCondition.isTopNHostCondition(metricNames,hostnames) || TopNCondition.isTopNMetricCondition(metricNames,hostnames)) {
      conditionBuilder.topN(topNConfig.getTopN());
      conditionBuilder.isBottomN(topNConfig.getIsBottomN());
      Function.ReadFunction readFunction=Function.ReadFunction.getFunction(topNConfig.getTopNFunction());
      Function function=new Function(readFunction,null);
      conditionBuilder.topNFunction(function);
    }
 else {
      LOG.info("Invalid Input for TopN query. Ignoring TopN Request.");
    }
  }
 else   if (hostnames != null && hostnames.size() > defaultTopNHostsLimit) {
    LOG.info("Requesting data for more than " + defaultTopNHostsLimit + " Hosts. "+ "Defaulting to Top "+ defaultTopNHostsLimit);
    conditionBuilder.topN(defaultTopNHostsLimit);
    conditionBuilder.isBottomN(false);
  }
  Condition condition=conditionBuilder.build();
  TimelineMetrics metrics;
  if (hostnames == null || hostnames.isEmpty()) {
    metrics=hBaseAccessor.getAggregateMetricRecords(condition,metricFunctions);
  }
 else {
    metrics=hBaseAccessor.getMetricRecords(condition,metricFunctions);
  }
  metrics=postProcessMetrics(metrics);
  if (metrics.getMetrics().size() == 0) {
    return metrics;
  }
  return seriesAggregateMetrics(seriesAggrFunctionInstance,metrics);
}
