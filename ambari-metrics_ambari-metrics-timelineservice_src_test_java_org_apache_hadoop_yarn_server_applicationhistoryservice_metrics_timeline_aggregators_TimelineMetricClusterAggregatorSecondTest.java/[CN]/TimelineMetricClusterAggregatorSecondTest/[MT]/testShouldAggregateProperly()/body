{
  long aggregatorInterval=120000l;
  long sliceInterval=30000l;
  Configuration configuration=new Configuration();
  TimelineMetricMetadataManager metricMetadataManagerMock=EasyMock.createNiceMock(TimelineMetricMetadataManager.class);
  TimelineMetricClusterAggregatorSecond secondAggregator=new TimelineMetricClusterAggregatorSecond(METRIC_AGGREGATE_SECOND,metricMetadataManagerMock,null,configuration,null,aggregatorInterval,2,"false","","",aggregatorInterval,sliceInterval,null);
  long startTime=AbstractTimelineAggregator.getRoundedCheckPointTimeMillis(System.currentTimeMillis(),aggregatorInterval);
  List<Long[]> timeslices=secondAggregator.getTimeSlices(startTime,startTime + aggregatorInterval);
  Map<TimelineClusterMetric,MetricClusterAggregate> aggregateClusterMetrics=new HashMap<>();
  long seconds=1000;
  TimelineMetric timelineMetric=new TimelineMetric();
  timelineMetric.setMetricName("m1");
  timelineMetric.setHostName("h1");
  timelineMetric.setAppId("a1");
  timelineMetric.setType("GUAGE");
  timelineMetric.setStartTime(startTime);
  TreeMap<Long,Double> metricValues=new TreeMap<Long,Double>();
  metricValues.put(startTime + 15 * seconds,1.0);
  metricValues.put(startTime + 45 * seconds,2.0);
  metricValues.put(startTime + 75 * seconds,3.0);
  metricValues.put(startTime + 105 * seconds,4.0);
  metricValues.put(startTime + 135 * seconds,5.0);
  metricValues.put(startTime + 165 * seconds,6.0);
  timelineMetric.setMetricValues(metricValues);
  secondAggregator.processAggregateClusterMetrics(aggregateClusterMetrics,timelineMetric,timeslices);
  Assert.assertEquals(aggregateClusterMetrics.size(),4);
  TimelineClusterMetric timelineClusterMetric=new TimelineClusterMetric(timelineMetric.getMetricName(),timelineMetric.getAppId(),timelineMetric.getInstanceId(),startTime + 30 * seconds,timelineMetric.getType());
  Assert.assertTrue(aggregateClusterMetrics.containsKey(timelineClusterMetric));
  Assert.assertEquals(aggregateClusterMetrics.get(timelineClusterMetric).getSum(),1.0);
  timelineClusterMetric.setTimestamp(startTime + 4 * 30 * seconds);
  Assert.assertTrue(aggregateClusterMetrics.containsKey(timelineClusterMetric));
  Assert.assertEquals(aggregateClusterMetrics.get(timelineClusterMetric).getSum(),4.0);
  metricValues.clear();
  aggregateClusterMetrics.clear();
  metricValues.put(startTime + 15 * seconds,1.0);
  metricValues.put(startTime + 75 * seconds,3.0);
  metricValues.put(startTime + 105 * seconds,4.0);
  metricValues.put(startTime + 135 * seconds,5.0);
  metricValues.put(startTime + 165 * seconds,6.0);
  timelineMetric.setMetricValues(metricValues);
  secondAggregator.processAggregateClusterMetrics(aggregateClusterMetrics,timelineMetric,timeslices);
  Assert.assertEquals(aggregateClusterMetrics.size(),4);
  timelineClusterMetric.setTimestamp(startTime + 60 * seconds);
  Assert.assertTrue(aggregateClusterMetrics.containsKey(timelineClusterMetric));
  Assert.assertEquals(aggregateClusterMetrics.get(timelineClusterMetric).getSum(),2.0);
  metricValues.clear();
  aggregateClusterMetrics.clear();
  metricValues.put(startTime + 15 * seconds,1.0);
  metricValues.put(startTime + 45 * seconds,2.0);
  metricValues.put(startTime + 75 * seconds,3.0);
  metricValues.put(startTime + 135 * seconds,5.0);
  metricValues.put(startTime + 165 * seconds,6.0);
  timelineMetric.setMetricValues(metricValues);
  timelineMetric.setType("GUAGE");
  secondAggregator.processAggregateClusterMetrics(aggregateClusterMetrics,timelineMetric,timeslices);
  Assert.assertEquals(aggregateClusterMetrics.size(),4);
  timelineClusterMetric.setTimestamp(startTime + 120 * seconds);
  Assert.assertTrue(aggregateClusterMetrics.containsKey(timelineClusterMetric));
  Assert.assertEquals(aggregateClusterMetrics.get(timelineClusterMetric).getSum(),3.0);
  aggregateClusterMetrics.clear();
  timelineMetric.setType("COUNTER");
  secondAggregator.processAggregateClusterMetrics(aggregateClusterMetrics,timelineMetric,timeslices);
  Assert.assertEquals(aggregateClusterMetrics.size(),4);
  timelineClusterMetric.setTimestamp(startTime + 120 * seconds);
  Assert.assertTrue(aggregateClusterMetrics.containsKey(timelineClusterMetric));
  Assert.assertEquals(aggregateClusterMetrics.get(timelineClusterMetric).getSum(),4.5);
  metricValues.clear();
  aggregateClusterMetrics.clear();
  metricValues.put(startTime + 45 * seconds,2.0);
  metricValues.put(startTime + 75 * seconds,3.0);
  metricValues.put(startTime + 105 * seconds,4.0);
  metricValues.put(startTime + 135 * seconds,5.0);
  metricValues.put(startTime + 165 * seconds,6.0);
  timelineMetric.setMetricValues(metricValues);
  timelineMetric.setType("GUAGE");
  secondAggregator.processAggregateClusterMetrics(aggregateClusterMetrics,timelineMetric,timeslices);
  Assert.assertEquals(aggregateClusterMetrics.size(),4);
  timelineClusterMetric.setTimestamp(startTime + 30 * seconds);
  Assert.assertTrue(aggregateClusterMetrics.containsKey(timelineClusterMetric));
  Assert.assertEquals(aggregateClusterMetrics.get(timelineClusterMetric).getSum(),2.0);
  aggregateClusterMetrics.clear();
  timelineMetric.setType("COUNTER");
  int liveHosts=secondAggregator.processAggregateClusterMetrics(aggregateClusterMetrics,timelineMetric,timeslices);
  Assert.assertEquals(liveHosts,1);
  Assert.assertEquals(aggregateClusterMetrics.size(),4);
  timelineClusterMetric.setTimestamp(startTime + 30 * seconds);
  Assert.assertTrue(aggregateClusterMetrics.containsKey(timelineClusterMetric));
  Assert.assertEquals(aggregateClusterMetrics.get(timelineClusterMetric).getSum(),1.5);
  metricValues.clear();
  aggregateClusterMetrics.clear();
  metricValues.put(startTime + 135 * seconds,5.0);
  metricValues.put(startTime + 165 * seconds,6.0);
  timelineMetric.setMetricValues(metricValues);
  timelineMetric.setType("GUAGE");
  secondAggregator.processAggregateClusterMetrics(aggregateClusterMetrics,timelineMetric,timeslices);
  Assert.assertEquals(aggregateClusterMetrics.size(),4);
  timelineClusterMetric.setTimestamp(startTime + 30 * seconds);
  Assert.assertTrue(aggregateClusterMetrics.containsKey(timelineClusterMetric));
  Assert.assertEquals(aggregateClusterMetrics.get(timelineClusterMetric).getSum(),5.0);
  aggregateClusterMetrics.clear();
  timelineMetric.setType("COUNTER");
  liveHosts=secondAggregator.processAggregateClusterMetrics(aggregateClusterMetrics,timelineMetric,timeslices);
  Assert.assertEquals(liveHosts,1);
  Assert.assertEquals(aggregateClusterMetrics.size(),4);
  timelineClusterMetric.setTimestamp(startTime + 60 * seconds);
  Assert.assertTrue(aggregateClusterMetrics.containsKey(timelineClusterMetric));
  Assert.assertEquals(aggregateClusterMetrics.get(timelineClusterMetric).getSum(),2.5);
  metricValues.clear();
  aggregateClusterMetrics.clear();
}
