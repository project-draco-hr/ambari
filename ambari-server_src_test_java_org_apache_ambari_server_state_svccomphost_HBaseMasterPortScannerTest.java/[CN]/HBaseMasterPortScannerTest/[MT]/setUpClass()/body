{
  injector=Guice.createInjector(new InMemoryDefaultTestModule());
  injector.getInstance(GuiceJpaInitializer.class);
  hostnames=new ArrayList<String>();
  hostnames.add("localhost");
  hostnames.add("localhost1");
  hostnames.add("localhost2");
  hostnames.add("localhost3");
  try {
    serverSocket=new ServerSocket(60010);
  }
 catch (  IOException e) {
    try {
      serverSocket.close();
    }
 catch (    IOException ex) {
      log.debug("Could not close on port: 60010");
      log.error(ex.getMessage());
    }
    log.error("Could not listen on port: 60010");
  }
  scaner=injector.getInstance(HBaseMasterPortScanner.class);
  clusters=injector.getInstance(Clusters.class);
  metaInfo=injector.getInstance(AmbariMetaInfo.class);
  serviceFactory=injector.getInstance(ServiceFactory.class);
  metaInfo.init();
  clusters.addCluster(DummyCluster);
  cluster=clusters.getCluster(DummyCluster);
  cluster.setDesiredStackVersion(new StackId("HDP-0.2"));
  Set<String> hostNamesSet=new HashSet<String>();
  for (  String hostname : hostnames) {
    clusters.addHost(hostname);
    clusters.getHost(hostname).persist();
    Host hostObject=clusters.getHost(hostname);
    hostObject.setIPv4("ipv4");
    hostObject.setIPv6("ipv6");
    hostObject.setOsType(DummyOsType);
    hostNamesSet.add(hostname);
    if (hostname.equals("localhost")) {
      host=hostObject;
    }
  }
  clusters.mapHostsToCluster(hostNamesSet,DummyCluster);
  Service service=cluster.addService(HDFS);
  service.persist();
  service.addServiceComponent(NAMENODE).persist();
  service.getServiceComponent(NAMENODE).addServiceComponentHost("localhost").persist();
  service.addServiceComponent(DATANODE).persist();
  service.getServiceComponent(DATANODE).addServiceComponentHost("localhost").persist();
  service=serviceFactory.createNew(cluster,"HBASE");
  cluster.addService(service);
  service.persist();
  service=cluster.getService("HBASE");
  service.addServiceComponent(HBASE_MASTER).persist();
  service.persist();
  for (  String hostname : hostnames) {
    service.getServiceComponent(HBASE_MASTER).addServiceComponentHost(hostname).persist();
    if (hostname.equals("localhost")) {
      serviceComponentHost=service.getServiceComponent(HBASE_MASTER).getServiceComponentHost(hostname);
    }
  }
}
