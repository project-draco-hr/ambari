{
  injector=Guice.createInjector(new InMemoryDefaultTestModule());
  injector.getInstance(GuiceJpaInitializer.class);
  hostnames=new ArrayList<String>();
  hostnames.add("127.0.0.1");
  hostnames.add("host1");
  hostnames.add("host2");
  hostnames.add("host3");
  clusters=injector.getInstance(Clusters.class);
  scaner=new HBaseMasterPortScannerMock(clusters);
  metaInfo=injector.getInstance(AmbariMetaInfo.class);
  serviceFactory=injector.getInstance(ServiceFactory.class);
  metaInfo.init();
  clusters.addCluster(DummyCluster);
  cluster=clusters.getCluster(DummyCluster);
  cluster.setDesiredStackVersion(new StackId("HDP-0.2"));
  Set<String> hostNamesSet=new HashSet<String>();
  for (  String hostname : hostnames) {
    clusters.addHost(hostname);
    clusters.getHost(hostname).persist();
    Host hostObject=clusters.getHost(hostname);
    hostObject.setIPv4("ipv4");
    hostObject.setIPv6("ipv6");
    hostObject.setOsType(DummyOsType);
    hostNamesSet.add(hostname);
    if (hostname.equals("127.0.0.1")) {
      host=hostObject;
    }
  }
  clusters.mapHostsToCluster(hostNamesSet,DummyCluster);
  Service service=cluster.addService(HDFS);
  service.persist();
  service.addServiceComponent(NAMENODE).persist();
  service.getServiceComponent(NAMENODE).addServiceComponentHost("127.0.0.1").persist();
  service.addServiceComponent(DATANODE).persist();
  service.getServiceComponent(DATANODE).addServiceComponentHost("127.0.0.1").persist();
  service=serviceFactory.createNew(cluster,"HBASE");
  cluster.addService(service);
  service.persist();
  service=cluster.getService("HBASE");
  service.addServiceComponent(HBASE_MASTER).persist();
  service.persist();
  for (  String hostname : hostnames) {
    service.getServiceComponent(HBASE_MASTER).addServiceComponentHost(hostname).persist();
    if (hostname.equals("127.0.0.1")) {
      serviceComponentHost=service.getServiceComponent(HBASE_MASTER).getServiceComponentHost(hostname);
      serviceComponentHost.setState(State.STARTED);
    }
  }
  when(timerMock.purge()).thenReturn(0);
}
