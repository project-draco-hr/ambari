def ams(name=None):
    import params
    if (name == 'collector'):
        Directory(params.ams_collector_conf_dir, owner=params.ams_user, group=params.user_group, recursive=True)
        Directory(params.ams_checkpoint_dir, owner=params.ams_user, group=params.user_group, recursive=True)
        XmlConfig('ams-site.xml', conf_dir=params.ams_collector_conf_dir, configurations=params.config['configurations']['ams-site'], configuration_attributes=params.config['configuration_attributes']['ams-site'], owner=params.ams_user, group=params.user_group)
        XmlConfig('hbase-site.xml', conf_dir=params.ams_collector_conf_dir, configurations=params.config['configurations']['ams-hbase-site'], configuration_attributes=params.config['configuration_attributes']['ams-hbase-site'], owner=params.ams_user, group=params.user_group)
        if (params.log4j_props != None):
            File(format('{params.ams_collector_conf_dir}/log4j.properties'), mode=420, group=params.user_group, owner=params.ams_user, content=params.log4j_props)
        File(format('{ams_collector_conf_dir}/ams-env.sh'), owner=params.ams_user, content=InlineTemplate(params.ams_env_sh_template))
        pass
    elif (name == 'monitor'):
        Directory(params.ams_monitor_conf_dir, owner=params.ams_user, group=params.user_group, recursive=True)
        TemplateConfig(format('{ams_monitor_conf_dir}/metric_monitor.ini'), owner=params.ams_user, group=params.user_group, template_tag=None)
        TemplateConfig(format('{ams_monitor_conf_dir}/metric_groups.conf'), owner=params.ams_user, group=params.user_group, template_tag=None)
        File(format('{ams_monitor_conf_dir}/ams-env.sh'), owner=params.ams_user, content=InlineTemplate(params.ams_env_sh_template))
        pass
    pass
