'\nLicensed to the Apache Software Foundation (ASF) under one\nor more contributor license agreements.  See the NOTICE file\ndistributed with this work for additional information\nregarding copyright ownership.  The ASF licenses this file\nto you under the Apache License, Version 2.0 (the\n"License"); you may not use this file except in compliance\nwith the License.  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n'
import cgi
import os
import rrdtool
import sys
sys.stdout.write('Content-type: application/json\n\n')
queryString = dict(cgi.parse_qsl(os.environ['QUERY_STRING']))
sys.stdout.write('[\n')
first = True
if ('m' in queryString):
    metricParts = queryString['m'].split(',')
else:
    metricParts = ['']
metricParts = stripList(metricParts)
hostParts = []
if ('h' in queryString):
    hostParts = queryString['h'].split(',')
hostParts = stripList(hostParts)
if ('c' in queryString):
    clusterParts = queryString['c'].split(',')
else:
    clusterParts = ['']
clusterParts = stripList(clusterParts)
if ('p' in queryString):
    rrdPath = queryString['p']
else:
    rrdPath = '/var/lib/ganglia/rrds/'
start = None
if ('s' in queryString):
    start = queryString['s']
end = None
if ('e' in queryString):
    end = queryString['e']
resolution = None
if ('r' in queryString):
    resolution = queryString['r']
if ('cf' in queryString):
    cf = queryString['cf']
else:
    cf = 'AVERAGE'
for cluster in clusterParts:
    for (path, dirs, files) in os.walk((rrdPath + cluster)):
        pathParts = path.split('/')
        if ((len(hostParts) == 0) or (pathParts[(-1)] in hostParts)):
            for file in files:
                for metric in metricParts:
                    if file.endswith((metric + '.rrd')):
                        if (not first):
                            sys.stdout.write(',\n')
                        printMetric(pathParts[(-2)], pathParts[(-1)], file[:(-4)], os.path.join(path, file), cf, start, end, resolution)
                        first = False
sys.stdout.write('\n]\n')
sys.stdout.flush
