def setup_ranger_plugin(component_select_name, service_name, component_downloaded_custom_connector, component_driver_curl_source, component_driver_curl_target, java_home, repo_name, plugin_repo_dict, ranger_env_properties, plugin_properties, policy_user, policymgr_mgr_url, plugin_enabled, conf_dict, component_user, component_group, cache_service_list, plugin_audit_properties, plugin_audit_attributes, plugin_security_properties, plugin_security_attributes, plugin_policymgr_ssl_properties, plugin_policymgr_ssl_attributes, component_list, audit_db_is_enabled, credential_file, xa_audit_db_password, ssl_truststore_password, ssl_keystore_password, api_version=None, hdp_version_override=None):
    File(component_downloaded_custom_connector, content=DownloadSource(component_driver_curl_source))
    Execute(('cp', '--remove-destination', component_downloaded_custom_connector, component_driver_curl_target), not_if=format('test -f {component_driver_curl_target}'), sudo=True)
    hdp_version = get_hdp_version(component_select_name)
    if (hdp_version_override is not None):
        hdp_version = hdp_version_override
    component_conf_dir = conf_dict
    if plugin_enabled:
        if ((api_version == 'v2') and (api_version is not None)):
            ranger_adm_obj = RangeradminV2(url=policymgr_mgr_url)
        else:
            ranger_adm_obj = Rangeradmin(url=policymgr_mgr_url)
        ranger_adm_obj.create_ranger_repository(service_name, repo_name, plugin_repo_dict, ranger_env_properties['ranger_admin_username'], ranger_env_properties['ranger_admin_password'], ranger_env_properties['admin_username'], ranger_env_properties['admin_password'], policy_user)
        current_datetime = datetime.now()
        File(format('{component_conf_dir}/ranger-security.xml'), owner=component_user, group=component_group, mode=420, content=InlineTemplate(format('<ranger>\n<enabled>{current_datetime}</enabled>\n</ranger>')))
        Directory([os.path.join('/etc', 'ranger', repo_name), os.path.join('/etc', 'ranger', repo_name, 'policycache')], owner=component_user, group=component_group, mode=509, recursive=True)
        for cache_service in cache_service_list:
            File(os.path.join('/etc', 'ranger', repo_name, 'policycache', format('{cache_service}_{repo_name}.json')), owner=component_user, group=component_group, mode=420)
        XmlConfig(format('ranger-{service_name}-audit.xml'), conf_dir=component_conf_dir, configurations=plugin_audit_properties, configuration_attributes=plugin_audit_attributes, owner=component_user, group=component_group, mode=484)
        XmlConfig(format('ranger-{service_name}-security.xml'), conf_dir=component_conf_dir, configurations=plugin_security_properties, configuration_attributes=plugin_security_attributes, owner=component_user, group=component_group, mode=484)
        XmlConfig('ranger-policymgr-ssl.xml', conf_dir=component_conf_dir, configurations=plugin_policymgr_ssl_properties, configuration_attributes=plugin_policymgr_ssl_attributes, owner=component_user, group=component_group, mode=484)
        setup_ranger_plugin_jar_symblink(hdp_version, service_name, component_list)
        setup_ranger_plugin_keystore(service_name, audit_db_is_enabled, hdp_version, credential_file, xa_audit_db_password, ssl_truststore_password, ssl_keystore_password, component_user, component_group, java_home)
    else:
        File(format('{component_conf_dir}/ranger-security.xml'), action='delete')
