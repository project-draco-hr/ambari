def make_module(self, vars=None, shared=False, locals=None):
    "This method works like the :attr:`module` attribute when called\n        without arguments but it will evaluate the template on every call\n        rather than caching it.  It's also possible to provide\n        a dict which is then used as context.  The arguments are the same\n        as for the :meth:`new_context` method.\n        "
    return TemplateModule(self, self.new_context(vars, shared, locals))
