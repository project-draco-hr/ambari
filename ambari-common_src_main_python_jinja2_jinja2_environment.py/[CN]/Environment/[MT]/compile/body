@internalcode
def compile(self, source, name=None, filename=None, raw=False, defer_init=False):
    'Compile a node or template source code.  The `name` parameter is\n        the load name of the template after it was joined using\n        :meth:`join_path` if necessary, not the filename on the file system.\n        the `filename` parameter is the estimated filename of the template on\n        the file system.  If the template came from a database or memory this\n        can be omitted.\n\n        The return value of this method is a python code object.  If the `raw`\n        parameter is `True` the return value will be a string with python\n        code equivalent to the bytecode returned otherwise.  This method is\n        mainly used internally.\n\n        `defer_init` is use internally to aid the module code generator.  This\n        causes the generated code to be able to import without the global\n        environment variable to be set.\n\n        .. versionadded:: 2.4\n           `defer_init` parameter added.\n        '
    source_hint = None
    try:
        if isinstance(source, basestring):
            source_hint = source
            source = self._parse(source, name, filename)
        if self.optimized:
            source = optimize(source, self)
        source = self._generate(source, name, filename, defer_init=defer_init)
        if raw:
            return source
        if (filename is None):
            filename = '<template>'
        else:
            filename = _encode_filename(filename)
        return self._compile(source, filename)
    except TemplateSyntaxError:
        exc_info = sys.exc_info()
    self.handle_exception(exc_info, source_hint=source)
