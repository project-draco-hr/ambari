def list_templates(self, extensions=None, filter_func=None):
    "Returns a list of templates for this environment.  This requires\n        that the loader supports the loader's\n        :meth:`~BaseLoader.list_templates` method.\n\n        If there are other files in the template folder besides the\n        actual templates, the returned list can be filtered.  There are two\n        ways: either `extensions` is set to a list of file extensions for\n        templates, or a `filter_func` can be provided which is a callable that\n        is passed a template name and should return `True` if it should end up\n        in the result list.\n\n        If the loader does not support that, a :exc:`TypeError` is raised.\n        "
    x = self.loader.list_templates()
    if (extensions is not None):
        if (filter_func is not None):
            raise TypeError('either extensions or filter_func can be passed, but not both')
        filter_func = (lambda x: (('.' in x) and (x.rsplit('.', 1)[1] in extensions)))
    if (filter_func is not None):
        x = filter(filter_func, x)
    return x
