@patch('__builtin__.open')
@patch('resource_management.core.shell.call')
def test_get_component_version(self, call_mock, open_mock):
    stack_expected_version = '2.2.1.0-2175'


    class MagicFile(object):
        allowed_names = set(['hadoop-hdfs-namenode', 'hadoop-hdfs-datanode', 'zookeeper-server', 'zookeeper-client'])

        def read(self, value):
            return (((value + ' - ') + stack_expected_version) if (value in self.allowed_names) else ('ERROR: Invalid package - ' + value))

        def __exit__(self, exc_type, exc_val, exc_tb):
            pass

        def __enter__(self):
            return self
    pass


    class MagicFile1(MagicFile):

        def read(self):
            return super(MagicFile1, self).read('hadoop-nonexistent-component-name')


    class MagicFile2(MagicFile):

        def read(self):
            return super(MagicFile2, self).read('hadoop-hdfs-namenode')


    class MagicFile3(MagicFile):

        def read(self):
            return super(MagicFile3, self).read('hadoop-hdfs-datanode')
    open_mock.side_effect = [MagicFile1(), MagicFile2(), MagicFile3()]
    call_mock.side_effect = ([(0, 'value will come from MagicFile')] * 3)
    version = self.module.get_component_version(None, 'hadoop-hdfs-datanode')
    self.assertEquals(version, None)
    version = self.module.get_component_version('StackDoesNotExist', 'hadoop-hdfs-datanode')
    self.assertEquals(version, None)
    version = self.module.get_component_version('HDP', None)
    self.assertEquals(version, None)
    version = self.module.get_component_version('HDP', 'hadoop-nonexistent-component-name')
    self.assertEquals(version, None)
    version = self.module.get_component_version('HDP', 'hadoop-hdfs-namenode')
    self.assertEquals(version, stack_expected_version)
    version = self.module.get_component_version('HDP', 'hadoop-hdfs-datanode')
    self.assertEquals(version, stack_expected_version)
