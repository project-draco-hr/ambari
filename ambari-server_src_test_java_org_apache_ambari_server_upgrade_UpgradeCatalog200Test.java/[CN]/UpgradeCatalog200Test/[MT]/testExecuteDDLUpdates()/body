{
  final DBAccessor dbAccessor=createNiceMock(DBAccessor.class);
  Configuration configuration=createNiceMock(Configuration.class);
  ResultSet resultSet=createNiceMock(ResultSet.class);
  expect(configuration.getDatabaseUrl()).andReturn(Configuration.JDBC_IN_MEMORY_URL).anyTimes();
  Capture<DBAccessor.DBColumnInfo> alertDefinitionIgnoreColumnCapture=new Capture<DBAccessor.DBColumnInfo>();
  Capture<DBAccessor.DBColumnInfo> alertDefinitionDescriptionColumnCapture=new Capture<DBAccessor.DBColumnInfo>();
  Capture<DBAccessor.DBColumnInfo> alertTargetGlobalColumnCapture=new Capture<DBAccessor.DBColumnInfo>();
  Capture<DBAccessor.DBColumnInfo> hostComponentStateColumnCapture=new Capture<DBAccessor.DBColumnInfo>();
  Capture<DBAccessor.DBColumnInfo> hostComponentVersionColumnCapture=new Capture<DBAccessor.DBColumnInfo>();
  Capture<DBAccessor.DBColumnInfo> clustersSecurityTypeColumnCapture=new Capture<DBAccessor.DBColumnInfo>();
  Capture<DBAccessor.DBColumnInfo> hostComponentStateSecurityStateColumnCapture=new Capture<DBAccessor.DBColumnInfo>();
  Capture<DBAccessor.DBColumnInfo> hostComponentDesiredStateSecurityStateColumnCapture=new Capture<DBAccessor.DBColumnInfo>();
  Capture<DBAccessor.DBColumnInfo> hostRoleCommandRetryColumnCapture=new Capture<DBAccessor.DBColumnInfo>();
  Capture<DBAccessor.DBColumnInfo> stageSkippableColumnCapture=new Capture<DBAccessor.DBColumnInfo>();
  Capture<DBAccessor.DBColumnInfo> viewparameterLabelColumnCapture=new Capture<DBAccessor.DBColumnInfo>();
  Capture<DBAccessor.DBColumnInfo> viewparameterPlaceholderColumnCapture=new Capture<DBAccessor.DBColumnInfo>();
  Capture<DBAccessor.DBColumnInfo> viewparameterDefaultValueColumnCapture=new Capture<DBAccessor.DBColumnInfo>();
  Capture<DBAccessor.DBColumnInfo> serviceDesiredStateSecurityStateColumnCapture=new Capture<DBAccessor.DBColumnInfo>();
  Capture<List<DBAccessor.DBColumnInfo>> clusterVersionCapture=new Capture<List<DBAccessor.DBColumnInfo>>();
  Capture<List<DBAccessor.DBColumnInfo>> hostVersionCapture=new Capture<List<DBAccessor.DBColumnInfo>>();
  Capture<DBAccessor.DBColumnInfo> valueColumnCapture=new Capture<DBAccessor.DBColumnInfo>();
  Capture<DBAccessor.DBColumnInfo> dataValueColumnCapture=new Capture<DBAccessor.DBColumnInfo>();
  Capture<List<DBAccessor.DBColumnInfo>> alertTargetStatesCapture=new Capture<List<DBAccessor.DBColumnInfo>>();
  Capture<List<DBAccessor.DBColumnInfo>> artifactCapture=new Capture<List<DBAccessor.DBColumnInfo>>();
  Capture<List<DBAccessor.DBColumnInfo>> upgradeCapture=new Capture<List<DBAccessor.DBColumnInfo>>();
  Capture<List<DBAccessor.DBColumnInfo>> upgradeGroupCapture=new Capture<List<DBAccessor.DBColumnInfo>>();
  Capture<List<DBAccessor.DBColumnInfo>> upgradeItemCapture=new Capture<List<DBAccessor.DBColumnInfo>>();
  dbAccessor.addColumn(eq("alert_definition"),capture(alertDefinitionIgnoreColumnCapture));
  dbAccessor.addColumn(eq("alert_definition"),capture(alertDefinitionDescriptionColumnCapture));
  dbAccessor.createTable(eq("alert_target_states"),capture(alertTargetStatesCapture),eq("target_id"));
  dbAccessor.addColumn(eq("alert_target"),capture(alertTargetGlobalColumnCapture));
  dbAccessor.addColumn(eq("hostcomponentstate"),capture(hostComponentStateColumnCapture));
  dbAccessor.addColumn(eq("hostcomponentstate"),capture(hostComponentVersionColumnCapture));
  dbAccessor.addColumn(eq("host_role_command"),capture(hostRoleCommandRetryColumnCapture));
  dbAccessor.addColumn(eq("stage"),capture(stageSkippableColumnCapture));
  dbAccessor.addColumn(eq("clusters"),capture(clustersSecurityTypeColumnCapture));
  dbAccessor.addColumn(eq("hostcomponentstate"),capture(hostComponentStateSecurityStateColumnCapture));
  dbAccessor.addColumn(eq("hostcomponentdesiredstate"),capture(hostComponentDesiredStateSecurityStateColumnCapture));
  dbAccessor.addColumn(eq("viewparameter"),capture(viewparameterLabelColumnCapture));
  dbAccessor.addColumn(eq("viewparameter"),capture(viewparameterPlaceholderColumnCapture));
  dbAccessor.addColumn(eq("viewparameter"),capture(viewparameterDefaultValueColumnCapture));
  dbAccessor.addColumn(eq("servicedesiredstate"),capture(serviceDesiredStateSecurityStateColumnCapture));
  dbAccessor.createTable(eq("cluster_version"),capture(clusterVersionCapture),eq("id"));
  dbAccessor.createTable(eq("host_version"),capture(hostVersionCapture),eq("id"));
  dbAccessor.createTable(eq("upgrade"),capture(upgradeCapture),eq("upgrade_id"));
  dbAccessor.createTable(eq("upgrade_group"),capture(upgradeGroupCapture),eq("upgrade_group_id"));
  dbAccessor.createTable(eq("upgrade_item"),capture(upgradeItemCapture),eq("upgrade_item_id"));
  dbAccessor.createTable(eq("artifact"),capture(artifactCapture),eq("artifact_name"),eq("foreign_keys"));
  setViewInstancePropertyExpectations(dbAccessor,valueColumnCapture);
  setViewInstanceDataExpectations(dbAccessor,dataValueColumnCapture);
  replay(dbAccessor,configuration,resultSet);
  AbstractUpgradeCatalog upgradeCatalog=getUpgradeCatalog(dbAccessor);
  Class<?> c=AbstractUpgradeCatalog.class;
  Field f=c.getDeclaredField("configuration");
  f.setAccessible(true);
  f.set(upgradeCatalog,configuration);
  upgradeCatalog.executeDDLUpdates();
  verify(dbAccessor,configuration,resultSet);
  verifyAlertDefinitionIgnoreColumn(alertDefinitionIgnoreColumnCapture);
  verifyAlertDefinitionDescriptionColumn(alertDefinitionDescriptionColumnCapture);
  verifyAlertTargetGlobal(alertTargetGlobalColumnCapture);
  verifyAlertTargetStatesTable(alertTargetStatesCapture);
  DBAccessor.DBColumnInfo upgradeStateColumn=hostComponentStateColumnCapture.getValue();
  assertEquals("upgrade_state",upgradeStateColumn.getName());
  assertEquals(32,(int)upgradeStateColumn.getLength());
  assertEquals(String.class,upgradeStateColumn.getType());
  assertEquals("NONE",upgradeStateColumn.getDefaultValue());
  assertFalse(upgradeStateColumn.isNullable());
  DBAccessor.DBColumnInfo upgradeVersionColumn=hostComponentVersionColumnCapture.getValue();
  assertEquals("version",upgradeVersionColumn.getName());
  assertEquals(32,(int)upgradeVersionColumn.getLength());
  assertEquals(String.class,upgradeVersionColumn.getType());
  assertEquals("UNKNOWN",upgradeVersionColumn.getDefaultValue());
  assertFalse(upgradeVersionColumn.isNullable());
  DBAccessor.DBColumnInfo upgradeRetryColumn=hostRoleCommandRetryColumnCapture.getValue();
  assertEquals("retry_allowed",upgradeRetryColumn.getName());
  assertEquals(1,(int)upgradeRetryColumn.getLength());
  assertEquals(Integer.class,upgradeRetryColumn.getType());
  assertEquals(0,upgradeRetryColumn.getDefaultValue());
  assertFalse(upgradeRetryColumn.isNullable());
  DBAccessor.DBColumnInfo upgradeSkippableColumn=stageSkippableColumnCapture.getValue();
  assertEquals("skippable",upgradeSkippableColumn.getName());
  assertEquals(1,(int)upgradeSkippableColumn.getLength());
  assertEquals(Integer.class,upgradeSkippableColumn.getType());
  assertEquals(0,upgradeSkippableColumn.getDefaultValue());
  assertFalse(upgradeSkippableColumn.isNullable());
  verifyClustersSecurityType(clustersSecurityTypeColumnCapture);
  verifyComponentSecurityStateColumn(hostComponentStateSecurityStateColumnCapture);
  verifyComponentSecurityStateColumn(hostComponentDesiredStateSecurityStateColumnCapture);
  verifyServiceSecurityStateColumn(serviceDesiredStateSecurityStateColumnCapture);
  verifyViewParameterColumns(viewparameterLabelColumnCapture,viewparameterPlaceholderColumnCapture,viewparameterDefaultValueColumnCapture);
  List<DBAccessor.DBColumnInfo> artifactColumns=artifactCapture.getValue();
  testCreateArtifactTable(artifactColumns);
  assertEquals(7,clusterVersionCapture.getValue().size());
  assertEquals(4,hostVersionCapture.getValue().size());
  assertViewInstancePropertyColumns(valueColumnCapture);
  assertViewInstanceDataColumns(dataValueColumnCapture);
  assertEquals(5,upgradeCapture.getValue().size());
  assertEquals(4,upgradeGroupCapture.getValue().size());
  assertEquals(7,upgradeItemCapture.getValue().size());
}
