@patch('resource_management.core.providers.system._ensure_metadata')
@patch.object(sudo, 'create_file')
@patch.object(os.path, 'exists')
@patch.object(os.path, 'isdir')
@patch.object(time, 'asctime')
def test_action_create_properties_with_metacharacters(self, time_asctime_mock, os_path_isdir_mock, os_path_exists_mock, create_file_mock, ensure_mock):
    '\n    Tests if \'action_create\' - creates new non existent file and write proper data\n    1) properties={"":"", "Some property":"Metacharacters: -%{} ${a.a}/"}\n    2) dir=None\n    '
    os_path_isdir_mock.side_effect = [False, True]
    os_path_exists_mock.return_value = False
    time_asctime_mock.return_value = 777
    with Environment('/') as env:
        PropertiesFile('/dir/new_file', properties={'': '', 'prop.1': "'.'yyyy-MM-dd-HH", 'prop.3': '%d{ISO8601} %5p %c{1}:%L - %m%n', 'prop.2': 'INFO, openjpa', 'prop.4': '${oozie.log.dir}/oozie.log', 'prop.empty': '', })
    create_file_mock.assert_called_with('/dir/new_file', u"# Generated by Apache Ambari. 777\n    \n=\nprop.1='.'yyyy-MM-dd-HH\nprop.2=INFO, openjpa\nprop.3=%d{ISO8601} %5p %c{1}:%L - %m%n\nprop.4=${oozie.log.dir}/oozie.log\nprop.empty=\n    \n")
    ensure_mock.assert_called()
