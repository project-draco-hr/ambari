{
  Set<RepositoryVersionState> allowedStates=new HashSet<RepositoryVersionState>();
  allowedStates.add(RepositoryVersionState.UPGRADED);
  StringBuffer outSB=new StringBuffer();
  StringBuffer errSB=new StringBuffer();
  try {
    String version=this.getExecutionCommand().getCommandParams().get("version");
    String clusterName=this.getExecutionCommand().getClusterName();
    outSB.append(MessageFormat.format("Begin finalizing the upgrade of cluster {0} to version {1}\n",clusterName,version));
    Cluster cluster=clusters.getCluster(clusterName);
    StackId stack=cluster.getCurrentStackVersion();
    String stackId=stack.getStackId();
    ClusterVersionEntity upgradingClusterVersion=clusterVersionDAO.findByClusterAndStackAndVersion(clusterName,stackId,version);
    if (upgradingClusterVersion == null) {
      throw new AmbariException(String.format("Cluster stack version %s not found",version));
    }
    List<HostVersionEntity> hostVersions=hostVersionDAO.findByClusterStackAndVersion(clusterName,stackId,version);
    Set<HostVersionEntity> hostsWithAllowedVersion=new HashSet<HostVersionEntity>();
    Set<HostVersionEntity> hostsWithoutCorrectVersionState=new HashSet<HostVersionEntity>();
    Set<String> hostsToUpdate=new HashSet<String>();
    boolean atLeastOneHostInInstalledState=false;
    for (    HostVersionEntity hostVersion : hostVersions) {
      boolean isStateCorrect=false;
      if (allowedStates.contains(hostVersion.getState())) {
        isStateCorrect=true;
      }
 else {
        if (hostVersion.getState() == RepositoryVersionState.INSTALLED) {
          HostEntity host=hostVersion.getHostEntity();
          ServiceComponentHostSummary hostSummary=new ServiceComponentHostSummary(ambariMetaInfo,host,stack);
          if (hostSummary.haveAllComponentsFinishedAdvertisingVersion()) {
            isStateCorrect=true;
            atLeastOneHostInInstalledState=true;
          }
        }
      }
      if (isStateCorrect) {
        hostsWithAllowedVersion.add(hostVersion);
        hostsToUpdate.add(hostVersion.getHostName());
      }
 else {
        hostsWithoutCorrectVersionState.add(hostVersion);
      }
    }
    if (hostsWithoutCorrectVersionState.size() > 0) {
      String message=String.format("The following %d host(s) have not been upgraded to version %s. " + "Please install and upgrade the Stack Version on those hosts and try again.\nHosts: %s\n",hostsWithoutCorrectVersionState.size(),version,StringUtils.join(hostsWithoutCorrectVersionState,", "));
      outSB.append(message);
      throw new AmbariException(message);
    }
    if (atLeastOneHostInInstalledState) {
      cluster.transitionClusterVersion(stackId,version,RepositoryVersionState.UPGRADED);
      upgradingClusterVersion=clusterVersionDAO.findByClusterAndStackAndVersion(clusterName,stackId,version);
    }
    if (!allowedStates.contains(upgradingClusterVersion.getState())) {
      throw new AmbariException(String.format("The cluster stack version state %s is not allowed to transition directly into %s",upgradingClusterVersion.getState(),RepositoryVersionState.CURRENT.toString()));
    }
    outSB.append(String.format("Will finalize the upgraded state of host components in %d host(s).\n",hostsWithAllowedVersion.size()));
    for (    HostVersionEntity hostVersion : hostsWithAllowedVersion) {
      Collection<HostComponentStateEntity> hostComponentStates=hostComponentStateDAO.findByHost(hostVersion.getHostName());
      for (      HostComponentStateEntity hostComponentStateEntity : hostComponentStates) {
        hostComponentStateEntity.setUpgradeState(UpgradeState.NONE);
        hostComponentStateDAO.merge(hostComponentStateEntity);
      }
    }
    outSB.append(String.format("Will finalize the version for %d host(s).\n",hostsWithAllowedVersion.size()));
    cluster.mapHostVersions(hostsToUpdate,upgradingClusterVersion,RepositoryVersionState.CURRENT);
    outSB.append(String.format("Will finalize the version for cluster %s.\n",clusterName));
    cluster.transitionClusterVersion(stackId,version,RepositoryVersionState.CURRENT);
    outSB.append("Upgrade was successful!\n");
    return createCommandReport(0,HostRoleStatus.COMPLETED,"{}",outSB.toString(),errSB.toString());
  }
 catch (  Exception e) {
    errSB.append(e.getMessage());
    return createCommandReport(-1,HostRoleStatus.FAILED,"{}",outSB.toString(),errSB.toString());
  }
}
