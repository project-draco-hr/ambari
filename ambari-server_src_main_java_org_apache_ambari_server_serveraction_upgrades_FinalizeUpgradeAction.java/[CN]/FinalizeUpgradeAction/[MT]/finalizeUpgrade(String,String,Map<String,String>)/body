{
  StringBuilder outSB=new StringBuilder();
  StringBuilder errSB=new StringBuilder();
  try {
    outSB.append(MessageFormat.format("Begin finalizing the upgrade of cluster {0} to version {1}\n",clusterName,version));
    Cluster cluster=clusters.getCluster(clusterName);
    StackId clusterDesiredStackId=cluster.getDesiredStackVersion();
    StackId clusterCurrentStackId=cluster.getCurrentStackVersion();
    ClusterVersionEntity upgradingClusterVersion=clusterVersionDAO.findByClusterAndStackAndVersion(clusterName,clusterDesiredStackId,version);
    if (upgradingClusterVersion == null) {
      throw new AmbariException(MessageFormat.format("Cluster stack version {0} not found",version));
    }
    List<HostVersionEntity> hostVersions=hostVersionDAO.findByClusterStackAndVersion(clusterName,clusterDesiredStackId,version);
    Set<HostVersionEntity> hostVersionsAllowed=new HashSet<HostVersionEntity>();
    Set<String> hostsWithoutCorrectVersionState=new HashSet<String>();
    Set<String> hostsToUpdate=new HashSet<String>();
    for (    HostVersionEntity hostVersion : hostVersions) {
      boolean hostHasCorrectVersionState=false;
      RepositoryVersionState hostVersionState=hostVersion.getState();
switch (hostVersionState) {
case CURRENT:
{
          hostHasCorrectVersionState=true;
          break;
        }
case NOT_REQUIRED:
case INSTALLED:
{
        HostEntity host=hostVersion.getHostEntity();
        ServiceComponentHostSummary hostSummary=new ServiceComponentHostSummary(ambariMetaInfo,host,clusterDesiredStackId);
        if (hostSummary.haveAllComponentsFinishedAdvertisingVersion()) {
          hostHasCorrectVersionState=true;
        }
 else {
          hostsWithoutCorrectVersionState.add(hostVersion.getHostName());
        }
        break;
      }
default :
{
      hostsWithoutCorrectVersionState.add(hostVersion.getHostName());
      break;
    }
}
if (hostHasCorrectVersionState) {
  hostVersionsAllowed.add(hostVersion);
  hostsToUpdate.add(hostVersion.getHostName());
}
}
if (hostsWithoutCorrectVersionState.size() > 0) {
String message=String.format("The following %d host(s) have not been upgraded to version %s. " + "Please install and upgrade the Stack Version on those hosts and try again.\nHosts: %s\n",hostsWithoutCorrectVersionState.size(),version,StringUtils.join(hostsWithoutCorrectVersionState,", "));
outSB.append(message);
throw new AmbariException(message);
}
List<InfoTuple> errors=checkHostComponentVersions(cluster,version,clusterDesiredStackId);
if (!errors.isEmpty()) {
StrBuilder messageBuff=new StrBuilder(String.format("The following %d host component(s) " + "have not been upgraded to version %s. Please install and upgrade " + "the Stack Version on those hosts and try again.\nHost components:\n",errors.size(),version));
for (InfoTuple error : errors) {
  messageBuff.append(String.format("%s on host %s\n",error.componentName,error.hostName));
}
throw new AmbariException(messageBuff.toString());
}
upgradingClusterVersion=clusterVersionDAO.findByClusterAndStackAndVersion(clusterName,clusterDesiredStackId,version);
if (RepositoryVersionState.INSTALLING == upgradingClusterVersion.getState()) {
cluster.transitionClusterVersion(clusterDesiredStackId,version,RepositoryVersionState.INSTALLED);
upgradingClusterVersion=clusterVersionDAO.findByClusterAndStackAndVersion(clusterName,clusterDesiredStackId,version);
}
if (RepositoryVersionState.INSTALLED != upgradingClusterVersion.getState()) {
throw new AmbariException(String.format("The cluster stack version state %s is not allowed to transition directly into %s",upgradingClusterVersion.getState(),RepositoryVersionState.CURRENT.toString()));
}
outSB.append(String.format("Finalizing the upgraded state of host components in %d host(s).\n",hostVersionsAllowed.size()));
for (HostVersionEntity hostVersion : hostVersionsAllowed) {
Collection<HostComponentStateEntity> hostComponentStates=hostComponentStateDAO.findByHost(hostVersion.getHostName());
for (HostComponentStateEntity hostComponentStateEntity : hostComponentStates) {
  hostComponentStateEntity.setUpgradeState(UpgradeState.NONE);
  hostComponentStateDAO.merge(hostComponentStateEntity);
}
}
outSB.append(String.format("Finalizing the version for %d host(s).\n",hostVersionsAllowed.size()));
cluster.mapHostVersions(hostsToUpdate,upgradingClusterVersion,RepositoryVersionState.CURRENT);
cluster.setUpgradeEntity(null);
outSB.append(String.format("Finalizing the version for cluster %s.\n",clusterName));
cluster.transitionClusterVersion(clusterDesiredStackId,version,RepositoryVersionState.CURRENT);
if (commandParams.containsKey(REQUEST_ID)) {
String requestId=commandParams.get(REQUEST_ID);
UpgradeEntity upgradeEntity=upgradeDAO.findUpgradeByRequestId(Long.valueOf(requestId));
if (null != upgradeEntity) {
  outSB.append("Creating upgrade history.\n");
  writeComponentHistory(cluster,upgradeEntity,clusterCurrentStackId,clusterDesiredStackId);
}
 else {
  String warning=String.format("Unable to create upgrade history because no upgrade could be found for request with ID %s\n",requestId);
  outSB.append(warning);
}
}
outSB.append("Upgrade was successful!\n");
return createCommandReport(0,HostRoleStatus.COMPLETED,"{}",outSB.toString(),errSB.toString());
}
 catch (Exception e) {
errSB.append(e.getMessage());
return createCommandReport(-1,HostRoleStatus.FAILED,"{}",outSB.toString(),errSB.toString());
}
}
