{
  context.setAmbariMetaInfo(m_ambariMetaInfo.get());
  Cluster cluster=context.getCluster();
  MasterHostResolver mhr=context.getResolver();
  Map<String,Map<String,ProcessingComponent>> allTasks=upgradePack.getTasks();
  List<UpgradeGroupHolder> groups=new ArrayList<>();
  for (  Grouping group : upgradePack.getGroups(context.getDirection())) {
    UpgradeGroupHolder groupHolder=new UpgradeGroupHolder();
    groupHolder.name=group.name;
    groupHolder.title=group.title;
    groupHolder.groupClass=group.getClass();
    groupHolder.skippable=group.skippable;
    groupHolder.allowRetry=group.allowRetry;
    if (context.getDirection().isDowngrade()) {
      groupHolder.skippable=true;
    }
    if (upgradePack.getType() == UpgradeType.NON_ROLLING) {
      group.performServiceCheck=false;
    }
    StageWrapperBuilder builder=group.getBuilder();
    List<UpgradePack.OrderService> services=group.services;
    if (upgradePack.getType() == UpgradeType.ROLLING) {
      if (context.getDirection().isDowngrade() && !services.isEmpty()) {
        List<UpgradePack.OrderService> reverse=new ArrayList<>(services);
        Collections.reverse(reverse);
        services=reverse;
      }
    }
    for (    UpgradePack.OrderService service : services) {
      if (upgradePack.getType() == UpgradeType.ROLLING && !allTasks.containsKey(service.serviceName)) {
        continue;
      }
      Task.Type functionName=null;
      if (RestartGrouping.class.isInstance(group)) {
        functionName=((RestartGrouping)group).getFunction();
      }
      if (StartGrouping.class.isInstance(group)) {
        functionName=((StartGrouping)group).getFunction();
      }
      if (StopGrouping.class.isInstance(group)) {
        functionName=((StopGrouping)group).getFunction();
      }
      for (      String component : service.components) {
        if (upgradePack.getType() == UpgradeType.ROLLING && !allTasks.get(service.serviceName).containsKey(component)) {
          continue;
        }
        HostsType hostsType=mhr.getMasterAndHosts(service.serviceName,component);
        if (null == hostsType) {
          continue;
        }
        if (!hostsType.unhealthy.isEmpty()) {
          context.addUnhealthy(hostsType.unhealthy);
        }
        Service svc=cluster.getService(service.serviceName);
        ProcessingComponent pc=null;
        if (upgradePack.getType() == UpgradeType.ROLLING) {
          pc=allTasks.get(service.serviceName).get(component);
        }
 else         if (upgradePack.getType() == UpgradeType.NON_ROLLING) {
          if (null != functionName) {
            pc=new ProcessingComponent();
            pc.name=component;
            pc.tasks=new ArrayList<>();
            if (functionName == Type.START) {
              pc.tasks.add(new StartTask());
            }
 else             if (functionName == Type.STOP) {
              pc.tasks.add(new StopTask());
            }
 else             if (functionName == Type.RESTART) {
              pc.tasks.add(new RestartTask());
            }
          }
        }
        if (pc == null) {
          LOG.error(MessageFormat.format("Couldn't create a processing component for service {0} and component {1}.",service.serviceName,component));
          continue;
        }
        setDisplayNames(context,service.serviceName,component);
        if (service.serviceName.equalsIgnoreCase("HDFS") && component.equalsIgnoreCase("NAMENODE")) {
          if (!hostsType.hosts.isEmpty() && hostsType.master != null && hostsType.secondary != null) {
            LinkedHashSet<String> order=new LinkedHashSet<>();
            order.add(hostsType.secondary);
            order.add(hostsType.master);
            hostsType.hosts=order;
          }
          builder.add(context,hostsType,service.serviceName,svc.isClientOnlyService(),pc);
        }
 else {
          builder.add(context,hostsType,service.serviceName,svc.isClientOnlyService(),pc);
        }
      }
    }
    List<StageWrapper> proxies=builder.build(context);
    if (!proxies.isEmpty()) {
      groupHolder.items=proxies;
      postProcess(context,groupHolder);
      groups.add(groupHolder);
    }
  }
  if (LOG.isDebugEnabled()) {
    for (    UpgradeGroupHolder group : groups) {
      LOG.debug(group.name);
      int i=0;
      for (      StageWrapper proxy : group.items) {
        LOG.debug("  Stage {}",Integer.valueOf(i++));
        int j=0;
        for (        TaskWrapper task : proxy.getTasks()) {
          LOG.debug("    Task {} {}",Integer.valueOf(j++),task);
        }
      }
    }
  }
  return groups;
}
