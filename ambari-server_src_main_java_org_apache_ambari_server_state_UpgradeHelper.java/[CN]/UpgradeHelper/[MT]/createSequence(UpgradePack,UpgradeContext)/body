{
  context.setAmbariMetaInfo(m_ambariMetaInfo.get());
  Cluster cluster=context.getCluster();
  MasterHostResolver mhr=context.getResolver();
  Map<String,Map<String,ProcessingComponent>> allTasks=upgradePack.getTasks();
  List<UpgradeGroupHolder> groups=new ArrayList<>();
  for (  Grouping group : upgradePack.getGroups(context.getDirection())) {
    if (!context.isScoped(group.scope)) {
      continue;
    }
    UpgradeGroupHolder groupHolder=new UpgradeGroupHolder();
    groupHolder.name=group.name;
    groupHolder.title=group.title;
    groupHolder.groupClass=group.getClass();
    groupHolder.skippable=group.skippable;
    groupHolder.supportsAutoSkipOnFailure=group.supportsAutoSkipOnFailure;
    groupHolder.allowRetry=group.allowRetry;
    if (context.getDirection().isDowngrade()) {
      groupHolder.skippable=true;
    }
    Task.Type functionName=null;
    if (upgradePack.getType() == UpgradeType.NON_ROLLING) {
      group.performServiceCheck=false;
      if (RestartGrouping.class.isInstance(group)) {
        functionName=((RestartGrouping)group).getFunction();
      }
      if (StartGrouping.class.isInstance(group)) {
        functionName=((StartGrouping)group).getFunction();
      }
      if (StopGrouping.class.isInstance(group)) {
        functionName=((StopGrouping)group).getFunction();
      }
    }
    StageWrapperBuilder builder=group.getBuilder();
    List<UpgradePack.OrderService> services=group.services;
    if (upgradePack.getType() == UpgradeType.ROLLING) {
      if (context.getDirection().isDowngrade() && !services.isEmpty()) {
        List<UpgradePack.OrderService> reverse=new ArrayList<>(services);
        Collections.reverse(reverse);
        services=reverse;
      }
    }
    for (    UpgradePack.OrderService service : services) {
      if (!context.isServiceSupported(service.serviceName)) {
        continue;
      }
      if (upgradePack.getType() == UpgradeType.ROLLING && !allTasks.containsKey(service.serviceName)) {
        continue;
      }
      for (      String component : service.components) {
        if (upgradePack.getType() == UpgradeType.ROLLING && !allTasks.get(service.serviceName).containsKey(component)) {
          continue;
        }
        HostsType hostsType=mhr.getMasterAndHosts(service.serviceName,component);
        if (null == hostsType) {
          continue;
        }
        if (!hostsType.unhealthy.isEmpty()) {
          context.addUnhealthy(hostsType.unhealthy);
        }
        Service svc=cluster.getService(service.serviceName);
        ProcessingComponent pc=null;
        if (upgradePack.getType() == UpgradeType.ROLLING) {
          pc=allTasks.get(service.serviceName).get(component);
        }
 else         if (upgradePack.getType() == UpgradeType.NON_ROLLING) {
          if (null != functionName) {
            if (functionName == Type.STOP) {
              pc=new ProcessingComponent();
              pc.name=component;
              pc.tasks=new ArrayList<>();
              pc.tasks.add(new StopTask());
            }
 else {
              if (allTasks.containsKey(service.serviceName) && allTasks.get(service.serviceName).containsKey(component)) {
                pc=allTasks.get(service.serviceName).get(component);
              }
 else {
                pc=new ProcessingComponent();
                pc.name=component;
                pc.tasks=new ArrayList<>();
                if (functionName == Type.START) {
                  pc.tasks.add(new StartTask());
                }
                if (functionName == Type.RESTART) {
                  pc.tasks.add(new RestartTask());
                }
              }
            }
          }
        }
        if (pc == null) {
          LOG.error(MessageFormat.format("Couldn't create a processing component for service {0} and component {1}.",service.serviceName,component));
          continue;
        }
        setDisplayNames(context,service.serviceName,component);
        if (service.serviceName.equalsIgnoreCase("HDFS") && component.equalsIgnoreCase("NAMENODE")) {
switch (upgradePack.getType()) {
case ROLLING:
            if (!hostsType.hosts.isEmpty() && hostsType.master != null && hostsType.secondary != null) {
              LinkedHashSet<String> order=new LinkedHashSet<String>();
              order.add(hostsType.secondary);
              order.add(hostsType.master);
              hostsType.hosts=order;
              builder.add(context,hostsType,service.serviceName,svc.isClientOnlyService(),pc,null);
            }
          break;
case NON_ROLLING:
        boolean isNameNodeHA=mhr.isNameNodeHA();
      if (isNameNodeHA && hostsType.master != null && hostsType.secondary != null) {
        HostsType ht1=new HostsType();
        LinkedHashSet<String> h1Hosts=new LinkedHashSet<String>();
        h1Hosts.add(hostsType.master);
        ht1.hosts=h1Hosts;
        Map<String,String> h1Params=new HashMap<String,String>();
        h1Params.put("desired_namenode_role","active");
        HostsType ht2=new HostsType();
        LinkedHashSet<String> h2Hosts=new LinkedHashSet<String>();
        h2Hosts.add(hostsType.secondary);
        ht2.hosts=h2Hosts;
        Map<String,String> h2Params=new HashMap<String,String>();
        h2Params.put("desired_namenode_role","standby");
        builder.add(context,ht1,service.serviceName,svc.isClientOnlyService(),pc,h1Params);
        builder.add(context,ht2,service.serviceName,svc.isClientOnlyService(),pc,h2Params);
      }
 else {
        builder.add(context,hostsType,service.serviceName,svc.isClientOnlyService(),pc,null);
      }
    break;
}
}
 else {
builder.add(context,hostsType,service.serviceName,svc.isClientOnlyService(),pc,null);
}
}
}
List<StageWrapper> proxies=builder.build(context);
if (!proxies.isEmpty()) {
groupHolder.items=proxies;
postProcess(context,groupHolder);
groups.add(groupHolder);
}
}
if (LOG.isDebugEnabled()) {
for (UpgradeGroupHolder group : groups) {
LOG.debug(group.name);
int i=0;
for (StageWrapper proxy : group.items) {
LOG.debug("  Stage {}",Integer.valueOf(i++));
int j=0;
for (TaskWrapper task : proxy.getTasks()) {
LOG.debug("    Task {} {}",Integer.valueOf(j++),task);
}
}
}
}
return groups;
}
