{
  Cluster cluster=clusters.get().getCluster(clusterName);
  StackId stack=cluster.getCurrentStackVersion();
  String repoVersion=upgradeToVersion;
  if (direction.isDowngrade() && null != upgradeFromVersion) {
    repoVersion=upgradeFromVersion;
  }
  RepositoryVersionEntity versionEntity=s_repoVersionDAO.get().findByStackNameAndVersion(stack.getStackName(),repoVersion);
  if (versionEntity == null) {
    throw new AmbariException(String.format("Repository version %s was not found",repoVersion));
  }
  Map<String,UpgradePack> packs=m_ambariMetaInfo.get().getUpgradePacks(stack.getStackName(),stack.getStackVersion());
  UpgradePack pack=null;
  if (StringUtils.isNotEmpty(preferredUpgradePackName) && packs.containsKey(preferredUpgradePackName)) {
    pack=packs.get(preferredUpgradePackName);
  }
 else {
    String repoStackId=versionEntity.getStackId().getStackId();
    for (    UpgradePack upgradePack : packs.values()) {
      if (null != upgradePack.getTargetStack() && upgradePack.getTargetStack().equals(repoStackId) && upgradeType == upgradePack.getType()) {
        if (null == pack) {
          pack=upgradePack;
        }
 else {
          throw new AmbariException(String.format("Unable to perform %s. Found multiple upgrade packs for type %s and target version %s",direction.getText(false),upgradeType.toString(),repoVersion));
        }
      }
    }
  }
  if (null == pack) {
    throw new AmbariException(String.format("Unable to perform %s. Could not locate %s upgrade pack for version %s",direction.getText(false),upgradeType.toString(),repoVersion));
  }
  return pack;
}
