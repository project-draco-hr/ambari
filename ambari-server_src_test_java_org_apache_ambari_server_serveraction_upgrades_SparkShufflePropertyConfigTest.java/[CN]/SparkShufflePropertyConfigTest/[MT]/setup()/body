{
  m_injector=EasyMock.createMock(Injector.class);
  m_clusters=EasyMock.createMock(Clusters.class);
  cluster=EasyMock.createMock(Cluster.class);
  Config adminConfig=new ConfigImpl("yarn-site"){
    Map<String,String> mockProperties=new HashMap<String,String>(){
{
        put("yarn.nodemanager.aux-services","some_service");
      }
    }
;
    @Override public Map<String,String> getProperties(){
      return mockProperties;
    }
    @Override public void setProperties(    Map<String,String> properties){
      mockProperties.putAll(properties);
    }
    @Override public void persist(    boolean newConfig){
    }
  }
;
  expect(cluster.getDesiredConfigByType("yarn-site")).andReturn(adminConfig).atLeastOnce();
  expect(m_clusters.getCluster((String)anyObject())).andReturn(cluster).anyTimes();
  expect(m_injector.getInstance(Clusters.class)).andReturn(m_clusters).atLeastOnce();
  replay(m_injector,m_clusters);
  clusterField=SparkShufflePropertyConfig.class.getDeclaredField("clusters");
  clusterField.setAccessible(true);
}
