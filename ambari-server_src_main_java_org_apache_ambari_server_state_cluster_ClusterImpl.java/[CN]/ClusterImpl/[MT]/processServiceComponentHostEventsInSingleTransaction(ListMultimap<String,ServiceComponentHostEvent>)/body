{
  Map<ServiceComponentHostEvent,String> failedEvents=new HashMap<ServiceComponentHostEvent,String>();
  for (  Entry<String,ServiceComponentHostEvent> entry : eventMap.entries()) {
    String serviceName=entry.getKey();
    ServiceComponentHostEvent event=entry.getValue();
    String serviceComponentName=event.getServiceComponentName();
    if (StringUtils.isBlank(serviceName) || Services.AMBARI.name().equals(serviceName)) {
      continue;
    }
    if (StringUtils.isBlank(serviceComponentName)) {
      continue;
    }
    try {
      Service service=getService(serviceName);
      ServiceComponent serviceComponent=service.getServiceComponent(serviceComponentName);
      ServiceComponentHost serviceComponentHost=serviceComponent.getServiceComponentHost(event.getHostName());
      serviceComponentHost.handleEvent(event);
    }
 catch (    ServiceNotFoundException e) {
      String message=String.format("ServiceComponentHost lookup exception. Service not found for Service: %s. Error: %s",serviceName,e.getMessage());
      LOG.error(message);
      failedEvents.put(event,message);
    }
catch (    ServiceComponentNotFoundException e) {
      String message=String.format("ServiceComponentHost lookup exception. Service Component not found for Service: %s, Component: %s. Error: %s",serviceName,serviceComponentName,e.getMessage());
      LOG.error(message);
      failedEvents.put(event,message);
    }
catch (    ServiceComponentHostNotFoundException e) {
      String message=String.format("ServiceComponentHost lookup exception. Service Component Host not found for Service: %s, Component: %s, Host: %s. Error: %s",serviceName,serviceComponentName,event.getHostName(),e.getMessage());
      LOG.error(message);
      failedEvents.put(event,message);
    }
catch (    AmbariException e) {
      String message=String.format("ServiceComponentHost lookup exception %s",e.getMessage());
      LOG.error(message);
      failedEvents.put(event,message);
    }
catch (    InvalidStateTransitionException e) {
      LOG.error("Invalid transition ",e);
      boolean isFailure=true;
      Enum<?> currentState=e.getCurrentState();
      Enum<?> failedEvent=e.getEvent();
      if (currentState == State.STARTED && failedEvent == ServiceComponentHostEventType.HOST_SVCCOMP_START) {
        isFailure=false;
        LOG.warn("The start request for {} is invalid since the component is already started. Ignoring the request.",serviceComponentName);
      }
      if (currentState == State.UNKNOWN && failedEvent == ServiceComponentHostEventType.HOST_SVCCOMP_OP_IN_PROGRESS) {
        isFailure=false;
        LOG.warn("The host {} is in an unknown state; attempting to put {} back in progress.",event.getHostName(),serviceComponentName);
      }
      if (isFailure) {
        failedEvents.put(event,String.format("Invalid transition. %s",e.getMessage()));
      }
    }
  }
  return failedEvents;
}
