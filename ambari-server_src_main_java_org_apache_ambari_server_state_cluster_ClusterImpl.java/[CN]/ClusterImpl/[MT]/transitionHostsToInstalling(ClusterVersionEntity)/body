{
  if (sourceClusterVersion == null) {
    throw new AmbariException("Could not find current stack version of cluster " + getClusterName());
  }
  if (RepositoryVersionState.INSTALLING != sourceClusterVersion.getState()) {
    throw new AmbariException("Unable to transition cluster hosts into " + RepositoryVersionState.INSTALLING + ". The only valid state is INSTALLING");
  }
  Map<String,Host> hosts=clusters.getHostsForCluster(getClusterName());
  Set<String> existingHostsWithClusterStackAndVersion=new HashSet<String>();
  HashMap<String,HostVersionEntity> existingHostStackVersions=new HashMap<String,HostVersionEntity>();
  clusterGlobalLock.writeLock().lock();
  try {
    StackEntity repoVersionStackEntity=sourceClusterVersion.getRepositoryVersion().getStack();
    StackId repoVersionStackId=new StackId(repoVersionStackEntity);
    List<HostVersionEntity> existingHostVersionEntities=hostVersionDAO.findByClusterStackAndVersion(getClusterName(),repoVersionStackId,sourceClusterVersion.getRepositoryVersion().getVersion());
    for (    HostVersionEntity entity : existingHostVersionEntities) {
      String hostName=entity.getHostName();
      existingHostsWithClusterStackAndVersion.add(hostName);
      existingHostStackVersions.put(hostName,entity);
    }
    Sets.SetView<String> hostsMissingRepoVersion=Sets.difference(hosts.keySet(),existingHostsWithClusterStackAndVersion);
    createOrUpdateHostVersionToState(sourceClusterVersion,hosts,existingHostStackVersions,hostsMissingRepoVersion,RepositoryVersionState.INSTALLING);
  }
  finally {
    clusterGlobalLock.writeLock().unlock();
  }
}
