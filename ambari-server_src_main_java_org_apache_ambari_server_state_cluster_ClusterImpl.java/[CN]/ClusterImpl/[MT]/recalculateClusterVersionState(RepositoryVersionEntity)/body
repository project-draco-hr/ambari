{
  if (repositoryVersion == null) {
    return;
  }
  StackId stackId=repositoryVersion.getStackId();
  String version=repositoryVersion.getVersion();
  Map<String,Host> hosts=clusters.getHostsForCluster(getClusterName());
  clusterGlobalLock.writeLock().lock();
  try {
    ClusterVersionEntity clusterVersion=clusterVersionDAO.findByClusterAndStackAndVersion(getClusterName(),stackId,version);
    boolean performingInitialBootstrap=false;
    if (clusterVersion == null) {
      if (clusterVersionDAO.findByCluster(getClusterName()).isEmpty()) {
        performingInitialBootstrap=true;
        createClusterVersionInternal(stackId,version,AuthorizationHelper.getAuthenticatedName(configuration.getAnonymousAuditName()),RepositoryVersionState.INSTALLING);
        clusterVersion=clusterVersionDAO.findByClusterAndStackAndVersion(getClusterName(),stackId,version);
        if (clusterVersion == null) {
          LOG.warn(String.format("Could not create a cluster version for cluster %s and stack %s using repo version %s",getClusterName(),stackId.getStackId(),repositoryVersion));
          return;
        }
      }
 else {
        LOG.warn(String.format("Repository version %s not found for cluster %s",repositoryVersion,getClusterName()));
        return;
      }
    }
    if (clusterVersion.getState() != RepositoryVersionState.INSTALL_FAILED && clusterVersion.getState() != RepositoryVersionState.OUT_OF_SYNC && clusterVersion.getState() != RepositoryVersionState.INSTALLING && clusterVersion.getState() != RepositoryVersionState.INSTALLED && clusterVersion.getState() != RepositoryVersionState.INIT) {
      return;
    }
    Set<String> hostsWithoutHostVersion=new HashSet<String>();
    Map<RepositoryVersionState,Set<String>> stateToHosts=new HashMap<RepositoryVersionState,Set<String>>();
    List<HostVersionEntity> hostVersionEntities=hostVersionDAO.findByClusterStackAndVersion(getClusterName(),stackId,version);
    Set<String> hostsWithState=new HashSet<String>();
    Set<String> hostsInMaintenanceState=new HashSet<>();
    for (    HostVersionEntity hostVersionEntity : hostVersionEntities) {
      String hostname=hostVersionEntity.getHostEntity().getHostName();
      Host host=hosts.get(hostname);
      if (host != null && host.getMaintenanceState(getClusterId()) == MaintenanceState.ON) {
        hostsInMaintenanceState.add(hostname);
        continue;
      }
      hostsWithState.add(hostname);
      RepositoryVersionState hostState=hostVersionEntity.getState();
      if (stateToHosts.containsKey(hostState)) {
        stateToHosts.get(hostState).add(hostname);
      }
 else {
        Set<String> hostsInState=new HashSet<String>();
        hostsInState.add(hostname);
        stateToHosts.put(hostState,hostsInState);
      }
    }
    hostsWithoutHostVersion.addAll(hosts.keySet());
    hostsWithoutHostVersion.removeAll(hostsWithState);
    hostsWithoutHostVersion.removeAll(hostsInMaintenanceState);
    for (    String hostname : hostsWithoutHostVersion) {
      HostEntity hostEntity=hostDAO.findByName(hostname);
      if (performingInitialBootstrap && hostEntity.getHostStateEntity().getCurrentState() != HostState.HEALTHY) {
        continue;
      }
      final Collection<HostComponentStateEntity> allHostComponents=hostEntity.getHostComponentStateEntities();
      for (      HostComponentStateEntity hostComponentStateEntity : allHostComponents) {
        if (hostComponentStateEntity.getVersion().equalsIgnoreCase(State.UNKNOWN.toString())) {
          ComponentInfo compInfo=ambariMetaInfo.getComponent(stackId.getStackName(),stackId.getStackVersion(),hostComponentStateEntity.getServiceName(),hostComponentStateEntity.getComponentName());
          if (compInfo.isVersionAdvertised()) {
            LOG.debug("Skipping transitioning the cluster version because host " + hostname + " does not have a version yet.");
            return;
          }
        }
      }
    }
    RepositoryVersionState effectiveClusterVersionState=getEffectiveState(stateToHosts);
    if (effectiveClusterVersionState != null && effectiveClusterVersionState != clusterVersion.getState()) {
      try {
        transitionClusterVersion(stackId,version,effectiveClusterVersionState);
      }
 catch (      AmbariException e) {
        ;
      }
    }
  }
  finally {
    clusterGlobalLock.writeLock().unlock();
  }
}
