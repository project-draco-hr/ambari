{
  clusterGlobalLock.writeLock().lock();
  try {
    ClusterEntity clusterEntity=getClusterEntity();
    Collection<ClusterConfigMappingEntity> configMappingEntities=clusterEntity.getConfigMappingEntities();
    for (    ClusterConfigMappingEntity e : configMappingEntities) {
      LOG.debug("{} with tag {} is unselected",e.getType(),e.getTag());
      e.setSelected(0);
    }
    List<ClusterConfigMappingEntity> clusterConfigMappingsForStack=clusterDAO.getClusterConfigMappingsByStack(clusterEntity.getClusterId(),stackId);
    Collection<ClusterConfigMappingEntity> latestConfigMappingByStack=getLatestConfigMapping(clusterConfigMappingsForStack);
    for (    ClusterConfigMappingEntity configMappingEntity : configMappingEntities) {
      String type=configMappingEntity.getType();
      String tag=configMappingEntity.getTag();
      for (      ClusterConfigMappingEntity latest : latestConfigMappingByStack) {
        String latestType=latest.getType();
        String latestTag=latest.getTag();
        if (StringUtils.equals(type,latestType) && StringUtils.equals(tag,latestTag)) {
          LOG.info("{} with version tag {} is selected for stack {}",type,tag,stackId.toString());
          configMappingEntity.setSelected(1);
        }
      }
    }
    clusterEntity.setConfigMappingEntities(configMappingEntities);
    clusterEntity=clusterDAO.merge(clusterEntity);
    clusterDAO.mergeConfigMappings(configMappingEntities);
    cacheConfigurations();
  }
  finally {
    clusterGlobalLock.writeLock().unlock();
  }
  LOG.info("Applied latest configurations for {} on stack {}. The desired configurations are now {}",getClusterName(),stackId,getDesiredConfigs());
  EntityManagerCacheInvalidationEvent event=new EntityManagerCacheInvalidationEvent();
  jpaEventPublisher.publish(event);
}
