{
  loadServiceHostComponents();
  clusterGlobalLock.writeLock().lock();
  try {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Trying to add ServiceComponentHost to ClusterHostMap cache" + ", serviceName=" + svcCompHost.getServiceName() + ", componentName="+ svcCompHost.getServiceComponentName()+ ", hostname="+ svcCompHost.getHostName());
    }
    final String hostname=svcCompHost.getHostName();
    final String serviceName=svcCompHost.getServiceName();
    final String componentName=svcCompHost.getServiceComponentName();
    Set<Cluster> cs=clusters.getClustersForHost(hostname);
    boolean clusterFound=false;
    Iterator<Cluster> iter=cs.iterator();
    while (iter.hasNext()) {
      Cluster c=iter.next();
      if (c.getClusterId() == getClusterId()) {
        clusterFound=true;
        break;
      }
    }
    if (!clusterFound) {
      throw new AmbariException("Host does not belong this cluster" + ", hostname=" + hostname + ", clusterName="+ getClusterName()+ ", clusterId="+ getClusterId());
    }
    if (!serviceComponentHosts.containsKey(serviceName)) {
      serviceComponentHosts.put(serviceName,new HashMap<String,Map<String,ServiceComponentHost>>());
    }
    if (!serviceComponentHosts.get(serviceName).containsKey(componentName)) {
      serviceComponentHosts.get(serviceName).put(componentName,new HashMap<String,ServiceComponentHost>());
    }
    if (serviceComponentHosts.get(serviceName).get(componentName).containsKey(hostname)) {
      throw new AmbariException("Duplicate entry for ServiceComponentHost" + ", serviceName=" + serviceName + ", serviceComponentName"+ componentName+ ", hostname= "+ hostname);
    }
    if (!serviceComponentHostsByHost.containsKey(hostname)) {
      serviceComponentHostsByHost.put(hostname,new ArrayList<ServiceComponentHost>());
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug("Adding a new ServiceComponentHost" + ", clusterName=" + getClusterName() + ", clusterId="+ getClusterId()+ ", serviceName="+ serviceName+ ", serviceComponentName"+ componentName+ ", hostname= "+ hostname);
    }
    serviceComponentHosts.get(serviceName).get(componentName).put(hostname,svcCompHost);
    serviceComponentHostsByHost.get(hostname).add(svcCompHost);
  }
  finally {
    clusterGlobalLock.writeLock().unlock();
  }
}
