{
  if (sourceClusterVersion == null) {
    throw new AmbariException("Could not find current stack version of cluster " + getClusterName());
  }
  RepositoryVersionState desiredState=sourceClusterVersion.getState();
  @SuppressWarnings("serial") Set<RepositoryVersionState> validStates=new HashSet<RepositoryVersionState>(){
{
      add(RepositoryVersionState.INSTALLING);
    }
  }
;
  if (!validStates.contains(desiredState)) {
    throw new AmbariException("The state must be one of " + validStates);
  }
  Map<String,Host> hosts=clusters.getHostsForCluster(getClusterName());
  Set<String> existingHostsWithClusterStackAndVersion=new HashSet<String>();
  HashMap<String,HostVersionEntity> existingHostStackVersions=new HashMap<String,HostVersionEntity>();
  clusterGlobalLock.writeLock().lock();
  try {
    StackEntity repoVersionStackEntity=sourceClusterVersion.getRepositoryVersion().getStack();
    StackId repoVersionStackId=new StackId(repoVersionStackEntity);
    List<HostVersionEntity> existingHostVersionEntities=hostVersionDAO.findByClusterStackAndVersion(getClusterName(),repoVersionStackId,sourceClusterVersion.getRepositoryVersion().getVersion());
    if (existingHostVersionEntities != null) {
      for (      HostVersionEntity entity : existingHostVersionEntities) {
        existingHostsWithClusterStackAndVersion.add(entity.getHostName());
        existingHostStackVersions.put(entity.getHostName(),entity);
      }
    }
    Sets.SetView<String> hostsMissingRepoVersion=Sets.difference(hosts.keySet(),existingHostsWithClusterStackAndVersion);
    for (    String hostname : hosts.keySet()) {
      if (hostsMissingRepoVersion.contains(hostname)) {
        HostEntity hostEntity=hostDAO.findByName(hostname);
        HostVersionEntity hostVersionEntity=new HostVersionEntity(hostname,sourceClusterVersion.getRepositoryVersion(),RepositoryVersionState.INSTALLING);
        hostVersionEntity.setHostEntity(hostEntity);
        hostVersionDAO.create(hostVersionEntity);
      }
 else {
        HostVersionEntity hostVersionEntity=existingHostStackVersions.get(hostname);
        hostVersionEntity.setState(desiredState);
        hostVersionDAO.merge(hostVersionEntity);
      }
    }
  }
  finally {
    clusterGlobalLock.writeLock().unlock();
  }
}
