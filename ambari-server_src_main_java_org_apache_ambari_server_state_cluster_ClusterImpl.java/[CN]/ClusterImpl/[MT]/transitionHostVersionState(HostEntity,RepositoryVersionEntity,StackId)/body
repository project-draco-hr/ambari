{
  StackEntity repoVersionStackEntity=repositoryVersion.getStack();
  StackId repoVersionStackId=new StackId(repoVersionStackEntity);
  HostVersionEntity hostVersionEntity=hostVersionDAO.findByClusterStackVersionAndHost(getClusterName(),repoVersionStackId,repositoryVersion.getVersion(),host.getHostName());
  hostTransitionStateWriteLock.lock();
  try {
    boolean performingInitialBootstrap=false;
    if (hostVersionEntity == null) {
      if (hostVersionDAO.findByClusterAndHost(getClusterName(),host.getHostName()).isEmpty()) {
        performingInitialBootstrap=true;
      }
      hostVersionEntity=new HostVersionEntity(host,repositoryVersion,RepositoryVersionState.INSTALLING);
      hostVersionDAO.create(hostVersionEntity);
    }
    HostVersionEntity currentVersionEntity=hostVersionDAO.findByHostAndStateCurrent(getClusterName(),host.getHostName());
    boolean isCurrentPresent=(currentVersionEntity != null);
    final ServiceComponentHostSummary hostSummary=new ServiceComponentHostSummary(ambariMetaInfo,host,stack);
    if (!isCurrentPresent) {
      if (hostSummary.isUpgradeFinished() || performingInitialBootstrap) {
        hostVersionEntity.setState(RepositoryVersionState.CURRENT);
        hostVersionEntity=hostVersionDAO.merge(hostVersionEntity);
      }
    }
 else {
      if (hostSummary.isUpgradeFinished() && hostVersionEntity.getState().equals(RepositoryVersionState.INSTALLED)) {
        currentVersionEntity.setState(RepositoryVersionState.INSTALLED);
        hostVersionEntity.setState(RepositoryVersionState.CURRENT);
        hostVersionDAO.merge(currentVersionEntity);
        hostVersionEntity=hostVersionDAO.merge(hostVersionEntity);
      }
    }
  }
  finally {
    hostTransitionStateWriteLock.unlock();
  }
  return hostVersionEntity;
}
