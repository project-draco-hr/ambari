{
  HostVersionEntity hostVersionEntity=null;
  List<HostVersionEntity> hostVersions=hostVersionDAO.findByHost(host.getHostName());
  if (hostVersions == null || hostVersions.isEmpty()) {
    hostVersionEntity=new HostVersionEntity(host.getHostName(),repositoryVersion,RepositoryVersionState.UPGRADING);
    hostVersionEntity.setHostEntity(host);
    hostVersionDAO.create(hostVersionEntity);
  }
 else {
    hostVersionEntity=hostVersionDAO.findByClusterStackVersionAndHost(getClusterName(),repositoryVersion.getStack(),repositoryVersion.getVersion(),host.getHostName());
    if (hostVersionEntity == null) {
      throw new AmbariException("Host " + host.getHostName() + " is expected to have a Host Version for stack "+ repositoryVersion.getStackVersion());
    }
  }
  final ServiceComponentHostSummary hostSummary=new ServiceComponentHostSummary(ambariMetaInfo,host,stack);
  final Collection<HostComponentStateEntity> versionedHostComponents=hostSummary.getVersionedHostComponents();
  List<ClusterVersionEntity> clusterVersions=clusterVersionDAO.findByCluster(getClusterName());
  if (clusterVersions.size() <= 1) {
    if (hostSummary.haveAllComponentsFinishedAdvertisingVersion() && (hostVersionEntity.getState().equals(RepositoryVersionState.UPGRADING) || hostVersionEntity.getState().equals(RepositoryVersionState.UPGRADED)) && ServiceComponentHostSummary.haveSameVersion(versionedHostComponents)) {
      hostVersionEntity.setState(RepositoryVersionState.CURRENT);
      hostVersionDAO.merge(hostVersionEntity);
    }
  }
 else {
    if (hostSummary.haveAllComponentsFinishedAdvertisingVersion() && hostVersionEntity.getState().equals(RepositoryVersionState.UPGRADING) && ServiceComponentHostSummary.haveSameVersion(versionedHostComponents)) {
      hostVersionEntity.setState(RepositoryVersionState.UPGRADED);
      hostVersionDAO.merge(hostVersionEntity);
    }
 else {
      if (hostVersionEntity.getState().equals(RepositoryVersionState.INSTALLED) && versionedHostComponents.size() > 0 && !ServiceComponentHostSummary.haveSameVersion(versionedHostComponents)) {
        hostVersionEntity.setState(RepositoryVersionState.UPGRADING);
        hostVersionDAO.merge(hostVersionEntity);
      }
    }
  }
  return hostVersionEntity;
}
