{
  if (stateToHosts == null || stateToHosts.keySet().size() < 1) {
    return null;
  }
  int totalHosts=0;
  for (  Set<String> hosts : stateToHosts.values()) {
    totalHosts+=hosts.size();
  }
  if (stateToHosts.containsKey(RepositoryVersionState.CURRENT) && stateToHosts.get(RepositoryVersionState.CURRENT).size() == totalHosts) {
    return RepositoryVersionState.CURRENT;
  }
  if (stateToHosts.containsKey(RepositoryVersionState.UPGRADE_FAILED) && !stateToHosts.get(RepositoryVersionState.UPGRADE_FAILED).isEmpty()) {
    return RepositoryVersionState.UPGRADE_FAILED;
  }
  if (stateToHosts.containsKey(RepositoryVersionState.UPGRADED) && stateToHosts.get(RepositoryVersionState.UPGRADED).size() == totalHosts) {
    return RepositoryVersionState.UPGRADED;
  }
  if (stateToHosts.containsKey(RepositoryVersionState.UPGRADING) && !stateToHosts.get(RepositoryVersionState.UPGRADING).isEmpty()) {
    return RepositoryVersionState.UPGRADING;
  }
  if (stateToHosts.containsKey(RepositoryVersionState.INSTALLED) && stateToHosts.get(RepositoryVersionState.INSTALLED).size() == totalHosts) {
    return RepositoryVersionState.INSTALLED;
  }
  if (stateToHosts.containsKey(RepositoryVersionState.INSTALL_FAILED) && !stateToHosts.get(RepositoryVersionState.INSTALL_FAILED).isEmpty()) {
    return RepositoryVersionState.INSTALL_FAILED;
  }
  final int totalINSTALLING=stateToHosts.containsKey(RepositoryVersionState.INSTALLING) ? stateToHosts.get(RepositoryVersionState.INSTALLING).size() : 0;
  final int totalINSTALLED=stateToHosts.containsKey(RepositoryVersionState.INSTALLED) ? stateToHosts.get(RepositoryVersionState.INSTALLED).size() : 0;
  if (totalINSTALLING + totalINSTALLED == totalHosts) {
    return RepositoryVersionState.INSTALLING;
  }
  return RepositoryVersionState.OUT_OF_SYNC;
}
