{
  if (currentClusterVersion == null) {
    throw new AmbariException("Could not find current stack version of cluster " + getClusterName());
  }
  final Set<RepositoryVersionState> validStates=new HashSet<RepositoryVersionState>(){
{
      add(RepositoryVersionState.CURRENT);
    }
  }
;
  if (!validStates.contains(desiredState)) {
    throw new AmbariException("The state must be one of [" + StringUtils.join(validStates,", ") + "]");
  }
  clusterGlobalLock.writeLock().lock();
  try {
    StackEntity repoVersionStackEntity=currentClusterVersion.getRepositoryVersion().getStack();
    StackId repoVersionStackId=new StackId(repoVersionStackEntity);
    Map<String,HostVersionEntity> existingHostToHostVersionEntity=new HashMap<String,HostVersionEntity>();
    List<HostVersionEntity> existingHostVersionEntities=hostVersionDAO.findByClusterStackAndVersion(getClusterName(),repoVersionStackId,currentClusterVersion.getRepositoryVersion().getVersion());
    if (existingHostVersionEntities != null) {
      for (      HostVersionEntity entity : existingHostVersionEntities) {
        existingHostToHostVersionEntity.put(entity.getHostName(),entity);
      }
    }
    Sets.SetView<String> intersection=Sets.intersection(existingHostToHostVersionEntity.keySet(),hostNames);
    for (    String hostname : hostNames) {
      List<HostVersionEntity> currentHostVersions=hostVersionDAO.findByClusterHostAndState(getClusterName(),hostname,RepositoryVersionState.CURRENT);
      HostVersionEntity currentHostVersionEntity=(currentHostVersions != null && currentHostVersions.size() == 1) ? currentHostVersions.get(0) : null;
      if (!intersection.contains(hostname)) {
        HostEntity hostEntity=hostDAO.findByName(hostname);
        HostVersionEntity hostVersionEntity=new HostVersionEntity(hostEntity,currentClusterVersion.getRepositoryVersion(),desiredState);
        hostVersionDAO.create(hostVersionEntity);
      }
 else {
        HostVersionEntity hostVersionEntity=existingHostToHostVersionEntity.get(hostname);
        if (hostVersionEntity.getState() != desiredState) {
          hostVersionEntity.setState(desiredState);
          hostVersionEntity=hostVersionDAO.merge(hostVersionEntity);
        }
        if (currentHostVersionEntity != null && !currentHostVersionEntity.getRepositoryVersion().equals(hostVersionEntity.getRepositoryVersion()) && desiredState == RepositoryVersionState.CURRENT && currentHostVersionEntity.getState() == RepositoryVersionState.CURRENT) {
          currentHostVersionEntity.setState(RepositoryVersionState.INSTALLED);
          currentHostVersionEntity=hostVersionDAO.merge(currentHostVersionEntity);
        }
      }
    }
  }
  finally {
    clusterGlobalLock.writeLock().unlock();
  }
}
