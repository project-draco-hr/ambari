{
  Map<ServiceComponentHostEvent,String> failedEvents=new HashMap<ServiceComponentHostEvent,String>();
  clusterGlobalLock.readLock().lock();
  try {
    for (    Entry<String,ServiceComponentHostEvent> entry : eventMap.entries()) {
      String serviceName=entry.getKey();
      ServiceComponentHostEvent event=entry.getValue();
      try {
        Service service=getService(serviceName);
        ServiceComponent serviceComponent=service.getServiceComponent(event.getServiceComponentName());
        ServiceComponentHost serviceComponentHost=serviceComponent.getServiceComponentHost(event.getHostName());
        serviceComponentHost.handleEvent(event);
      }
 catch (      ServiceNotFoundException e) {
        String message=String.format("ServiceComponentHost lookup exception. Service not found for Service: %s. Error: %s",serviceName,e.getMessage());
        LOG.error(message);
        e.printStackTrace();
        failedEvents.put(event,message);
      }
catch (      ServiceComponentNotFoundException e) {
        String message=String.format("ServiceComponentHost lookup exception. Service Component not found for Service: %s, Component: %s. Error: %s",serviceName,event.getServiceComponentName(),e.getMessage());
        LOG.error(message);
        e.printStackTrace();
        failedEvents.put(event,message);
      }
catch (      ServiceComponentHostNotFoundException e) {
        String message=String.format("ServiceComponentHost lookup exception. Service Component Host not found for Service: %s, Component: %s, Host: %s. Error: %s",serviceName,event.getServiceComponentName(),event.getHostName(),e.getMessage());
        LOG.error(message);
        e.printStackTrace();
        failedEvents.put(event,message);
      }
catch (      AmbariException e) {
        String message=String.format("ServiceComponentHost lookup exception %s",e.getMessage());
        LOG.error(message);
        e.printStackTrace();
        failedEvents.put(event,message);
      }
catch (      InvalidStateTransitionException e) {
        LOG.error("Invalid transition ",e);
        if ((e.getEvent() == ServiceComponentHostEventType.HOST_SVCCOMP_START) && (e.getCurrentState() == State.STARTED)) {
          LOG.warn("Component request for component = " + event.getServiceComponentName() + " to start is invalid, since component is already started. Ignoring this request.");
        }
 else {
          failedEvents.put(event,String.format("Invalid transition. %s",e.getMessage()));
        }
      }
    }
  }
  finally {
    clusterGlobalLock.readLock().unlock();
  }
  return failedEvents;
}
