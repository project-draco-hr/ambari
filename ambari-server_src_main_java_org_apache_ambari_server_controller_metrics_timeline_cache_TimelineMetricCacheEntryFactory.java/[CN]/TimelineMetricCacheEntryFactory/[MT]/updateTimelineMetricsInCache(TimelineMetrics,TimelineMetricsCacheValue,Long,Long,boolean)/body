{
  Map<String,TimelineMetric> existingTimelineMetricMap=timelineMetricsCacheValue.getTimelineMetrics();
  for (  TimelineMetric timelineMetric : newMetrics.getMetrics()) {
    if (LOG.isTraceEnabled()) {
      TreeMap<Long,Double> sortedMetrics=new TreeMap<Long,Double>(timelineMetric.getMetricValues());
      LOG.trace("New metric: " + timelineMetric.getMetricName() + " # "+ timelineMetric.getMetricValues().size()+ ", startTime = "+ sortedMetrics.firstKey()+ ", endTime = "+ sortedMetrics.lastKey());
    }
    TimelineMetric existingMetric=existingTimelineMetricMap.get(timelineMetric.getMetricName());
    if (existingMetric != null) {
      if (removeAll) {
        existingMetric.setMetricValues(new TreeMap<Long,Double>());
      }
      Map<Long,Double> existingMetricValues=existingMetric.getMetricValues();
      LOG.trace("Existing metric: " + timelineMetric.getMetricName() + " # "+ existingMetricValues.size());
      Iterator<Map.Entry<Long,Double>> valueIterator=existingMetricValues.entrySet().iterator();
      while (valueIterator.hasNext()) {
        Map.Entry<Long,Double> metricEntry=valueIterator.next();
        if (metricEntry.getKey() < requestedStartTime || metricEntry.getKey() > requestedEndTime) {
          valueIterator.remove();
        }
      }
      existingMetricValues.putAll(timelineMetric.getMetricValues());
      if (LOG.isTraceEnabled()) {
        TreeMap<Long,Double> sortedMetrics=new TreeMap<Long,Double>(existingMetricValues);
        LOG.trace("Merged metric: " + timelineMetric.getMetricName() + ", "+ "Final size: "+ existingMetricValues.size()+ ", startTime = "+ sortedMetrics.firstKey()+ ", endTime = "+ sortedMetrics.lastKey());
      }
    }
 else {
      existingTimelineMetricMap.put(timelineMetric.getMetricName(),timelineMetric);
    }
  }
}
