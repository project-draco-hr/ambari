{
  Long endTime=1407959918L;
  Long startTime=1407959718L;
  Condition condition=new DefaultCondition(Arrays.asList("cpu_user","mem_free"),Collections.singletonList("h1"),"a1","i1",startTime,endTime,null,null,false);
  Connection connection=createNiceMock(Connection.class);
  PreparedStatement preparedStatement=createNiceMock(PreparedStatement.class);
  Capture<String> stmtCapture=new Capture<String>();
  expect(connection.prepareStatement(EasyMock.and(EasyMock.anyString(),EasyMock.capture(stmtCapture)))).andReturn(preparedStatement);
  replay(connection,preparedStatement);
  PhoenixTransactSQL.prepareGetAggregateSqlStmt(connection,condition);
  String stmt=stmtCapture.getValue();
  Assert.assertTrue(stmt.contains("FROM METRIC_AGGREGATE"));
  Assert.assertEquals(Precision.SECONDS,condition.getPrecision());
  verify(connection,preparedStatement);
  startTime=endTime - PhoenixTransactSQL.DAY / 1000;
  condition=new DefaultCondition(Arrays.asList("cpu_user","mem_free"),Collections.singletonList("h1"),"a1","i1",startTime,endTime,null,null,false);
  connection=createNiceMock(Connection.class);
  preparedStatement=createNiceMock(PreparedStatement.class);
  stmtCapture=new Capture<String>();
  expect(connection.prepareStatement(EasyMock.and(EasyMock.anyString(),EasyMock.capture(stmtCapture)))).andReturn(preparedStatement);
  replay(connection,preparedStatement);
  PhoenixTransactSQL.prepareGetAggregateSqlStmt(connection,condition);
  stmt=stmtCapture.getValue();
  Assert.assertTrue(stmt.contains("FROM METRIC_AGGREGATE"));
  Assert.assertEquals(Precision.SECONDS,condition.getPrecision());
  verify(connection,preparedStatement);
  startTime=endTime - PhoenixTransactSQL.DAY * 30 / 1000;
  condition=new DefaultCondition(Arrays.asList("cpu_user","mem_free"),Collections.singletonList("h1"),"a1","i1",startTime,endTime,null,null,false);
  connection=createNiceMock(Connection.class);
  preparedStatement=createNiceMock(PreparedStatement.class);
  stmtCapture=new Capture<String>();
  expect(connection.prepareStatement(EasyMock.and(EasyMock.anyString(),EasyMock.capture(stmtCapture)))).andReturn(preparedStatement);
  replay(connection,preparedStatement);
  PhoenixTransactSQL.prepareGetAggregateSqlStmt(connection,condition);
  stmt=stmtCapture.getValue();
  Assert.assertTrue(stmt.contains("FROM METRIC_AGGREGATE_HOURLY"));
  Assert.assertEquals(Precision.HOURS,condition.getPrecision());
  verify(connection,preparedStatement);
  startTime=endTime - PhoenixTransactSQL.DAY * 30 * 2 / 1000;
  condition=new DefaultCondition(Arrays.asList("cpu_user","mem_free"),Collections.singletonList("h1"),"a1","i1",startTime,endTime,null,null,false);
  connection=createNiceMock(Connection.class);
  preparedStatement=createNiceMock(PreparedStatement.class);
  stmtCapture=new Capture<String>();
  expect(connection.prepareStatement(EasyMock.and(EasyMock.anyString(),EasyMock.capture(stmtCapture)))).andReturn(preparedStatement);
  replay(connection,preparedStatement);
  PhoenixTransactSQL.prepareGetAggregateSqlStmt(connection,condition);
  stmt=stmtCapture.getValue();
  Assert.assertTrue(stmt.contains("FROM METRIC_AGGREGATE_DAILY"));
  Assert.assertEquals(Precision.DAYS,condition.getPrecision());
  verify(connection,preparedStatement);
}
