{
  List<String> metrics=new ArrayList<String>();
  List<String> hosts=new ArrayList<String>();
  int numMetrics=0;
  int numHosts=0;
  int limit=PhoenixHBaseAccessor.RESULTSET_LIMIT;
  numMetrics=22;
  numHosts=2;
  for (int i=0; i < numMetrics; i++) {
    metrics.add("TestMetric" + i);
  }
  for (int i=0; i < numHosts; i++) {
    hosts.add("TestHost" + i);
  }
  Condition condition=new DefaultCondition(metrics,hosts,"a1","i1",1407950000L,1407953600L,Precision.SECONDS,null,false);
  Connection connection=createNiceMock(Connection.class);
  PreparedStatement preparedStatement=createNiceMock(PreparedStatement.class);
  Capture<String> stmtCapture=new Capture<String>();
  expect(connection.prepareStatement(EasyMock.and(EasyMock.anyString(),EasyMock.capture(stmtCapture)))).andReturn(preparedStatement);
  replay(connection,preparedStatement);
  PhoenixTransactSQL.prepareGetMetricsSqlStmt(connection,condition);
  String stmt=stmtCapture.getValue();
  Assert.assertTrue(stmt.contains("FROM METRIC_RECORD"));
  verify(connection,preparedStatement);
  condition=new DefaultCondition(metrics,hosts,"a1","i1",1407950000L,1407953600L,null,null,false);
  connection=createNiceMock(Connection.class);
  preparedStatement=createNiceMock(PreparedStatement.class);
  stmtCapture=new Capture<String>();
  expect(connection.prepareStatement(EasyMock.and(EasyMock.anyString(),EasyMock.capture(stmtCapture)))).andReturn(preparedStatement);
  replay(connection,preparedStatement);
  PhoenixTransactSQL.prepareGetMetricsSqlStmt(connection,condition);
  stmt=stmtCapture.getValue();
  Assert.assertTrue(stmt.contains("FROM METRIC_RECORD"));
  verify(connection,preparedStatement);
  metrics.clear();
  hosts.clear();
  numMetrics=2;
  numHosts=20;
  for (int i=0; i < numMetrics; i++) {
    metrics.add("TestMetric" + i);
  }
  for (int i=0; i < numHosts; i++) {
    hosts.add("TestHost" + i);
  }
  condition=new DefaultCondition(metrics,hosts,"a1","i1",1407867200L,1407953600L,null,null,false);
  connection=createNiceMock(Connection.class);
  preparedStatement=createNiceMock(PreparedStatement.class);
  stmtCapture=new Capture<String>();
  expect(connection.prepareStatement(EasyMock.and(EasyMock.anyString(),EasyMock.capture(stmtCapture)))).andReturn(preparedStatement);
  replay(connection,preparedStatement);
  PhoenixTransactSQL.prepareGetMetricsSqlStmt(connection,condition);
  stmt=stmtCapture.getValue();
  Assert.assertTrue(stmt.contains("FROM METRIC_RECORD_MINUTE"));
  verify(connection,preparedStatement);
  metrics.clear();
  hosts.clear();
  numMetrics=20;
  for (int i=0; i < numMetrics; i++) {
    metrics.add("TestMetric" + i);
  }
  condition=new DefaultCondition(metrics,hosts,"a1","i1",1407867200L,1407953600L,null,null,false);
  connection=createNiceMock(Connection.class);
  preparedStatement=createNiceMock(PreparedStatement.class);
  stmtCapture=new Capture<String>();
  expect(connection.prepareStatement(EasyMock.and(EasyMock.anyString(),EasyMock.capture(stmtCapture)))).andReturn(preparedStatement);
  replay(connection,preparedStatement);
  PhoenixTransactSQL.prepareGetAggregateSqlStmt(connection,condition);
  stmt=stmtCapture.getValue();
  Assert.assertTrue(stmt.contains("FROM METRIC_AGGREGATE_MINUTE"));
  verify(connection,preparedStatement);
  metrics.clear();
  hosts.clear();
  numMetrics=10;
  numHosts=5;
  for (int i=0; i < numMetrics; i++) {
    metrics.add("TestMetric" + i);
  }
  for (int i=0; i < numHosts; i++) {
    hosts.add("TestHost" + i);
  }
  condition=new DefaultCondition(metrics,hosts,"a1","i1",1407950000L,1407953600L,null,null,false);
  boolean exceptionThrown=false;
  boolean requestedSizeFoundInMessage=false;
  try {
    PhoenixTransactSQL.prepareGetMetricsSqlStmt(connection,condition);
  }
 catch (  PrecisionLimitExceededException pe) {
    exceptionThrown=true;
    String message=pe.getMessage();
    if (message != null && message.contains("18000")) {
      requestedSizeFoundInMessage=true;
    }
  }
  Assert.assertTrue(exceptionThrown);
  Assert.assertTrue(requestedSizeFoundInMessage);
}
