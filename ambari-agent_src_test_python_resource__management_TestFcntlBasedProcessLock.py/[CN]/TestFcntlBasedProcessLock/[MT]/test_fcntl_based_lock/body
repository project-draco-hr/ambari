@not_for_platform(PLATFORM_WINDOWS)
def test_fcntl_based_lock(self):
    '\n    Test blocking_lock using multiprocessing.Lock\n    '
    test_temp_dir = tempfile.mkdtemp(prefix='test_file_based_lock')
    try:
        lock_file = os.path.join(test_temp_dir, 'lock')

        def dummy_task(index, mutex):
            with FcntlBasedProcessLock(lock_file, skip_fcntl_failures=False):
                if (not mutex.acquire(block=False)):
                    raise Exception('ERROR: FcntlBasedProcessLock was acquired by several processes')
                time.sleep(0.1)
                mutex.release()
        mutex = multiprocessing.Lock()
        process_list = []
        for i in range(0, 3):
            p = multiprocessing.Process(target=dummy_task, args=(i, mutex))
            p.start()
            process_list.append(p)
        for p in process_list:
            p.join(2)
            self.assertEquals(p.exitcode, 0)
    finally:
        shutil.rmtree(test_temp_dir)
