@patch('resource_management.libraries.functions.packages_analyzer.rmf_shell.checked_call')
@patch.object(OSCheck, 'is_in_family')
@patch.object(packages_analyzer, 'Logger')
def test_vefify_dependency_suse(self, logger_mock, in_family_patch_mock, checked_call_mock):
    test_cases = [{'name': 'SUSE Case', 'os': OSConst.SUSE_FAMILY, 'cheked_call_result': '5 new packages to install', }, {'name': 'REDHAT Case', 'os': OSConst.REDHAT_FAMILY, 'cheked_call_result': 'Error:', }, {'name': 'UBUNTU Case', 'os': OSConst.UBUNTU_FAMILY, 'cheked_call_result': 'E:', }]
    for test_case in test_cases:
        in_family_patch_mock.side_effect = (lambda current_family, family: (family == test_case['os']))
        checked_call_mock.return_value = (0, 'OK.')
        self.assertTrue(packages_analyzer.verifyDependencies(), ("test_verify_dependency failed on '%s'" % test_case['name']))
        checked_call_mock.return_value = (0, test_case['cheked_call_result'])
        self.assertFalse(packages_analyzer.verifyDependencies(), ("test_verify_dependency failed on '%s'" % test_case['name']))
        try:
            in_family_patch_mock.side_effect = (lambda current_family, family: False)
            packages_analyzer.verifyDependencies()
            self.assertTrue(False, 'Wrong handling of unknown operation system')
        except Fail:
            pass
