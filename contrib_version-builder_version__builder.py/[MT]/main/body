def main(argv):
    parser = optparse.OptionParser(epilog="OS utility 'xmllint' is required for this tool to function.  It handles pretty-printing and XSD validation.")
    parser.add_option('--file', dest='filename', help='The output XML file')
    parser.add_option('--finalize', action='store_true', dest='finalize', help='Finalize and validate the XML file')
    parser.add_option('--xsd', dest='xsd_file', help='The XSD location when finalizing')
    parser.add_option('--release-type', type='choice', choices=['STANDARD', 'PATCH'], dest='release_type', help='Indicate the release type: i.e. STANDARD or PATCH')
    parser.add_option('--release-stack', dest='release_stack', help='The stack id: e.g. HDP-2.4')
    parser.add_option('--release-version', dest='release_version', help='The release version without build number: e.g. 2.4.0.1')
    parser.add_option('--release-build', dest='release_build', help='The release build number: e.g. 1234')
    parser.add_option('--release-compatible', dest='release_compatible', help='Regular Expression string to identify version compatibility for patches: e.g. 2.4.1.[0-9]')
    parser.add_option('--release-notes', dest='release_notes', help='A http link to the documentation notes')
    parser.add_option('--release-display', dest='release_display', help='The display name for this release')
    parser.add_option('--release-package-version', dest='release_package_version', help='Identifier to use when installing packages, generally a part of the package name')
    parser.add_option('--manifest', action='store_true', dest='manifest', help='Add a manifest service with other options: --manifest-id, --manifest-service, --manifest-version, --manifest-version-id')
    parser.add_option('--manifest-id', dest='manifest_id', help='Unique ID for a service in a manifest.  Required when specifying --manifest and --available')
    parser.add_option('--manifest-service', dest='manifest_service')
    parser.add_option('--manifest-version', dest='manifest_version')
    parser.add_option('--manifest-version-id', dest='manifest_version_id')
    parser.add_option('--available', action='store_true', dest='available', help='Add an available service with other options: --manifest-id, --available-components')
    parser.add_option('--available-components', dest='available_components', help='A CSV of service components that are intended to be upgraded via patch.       Omitting this implies the entire service should be upgraded')
    parser.add_option('--os', action='store_true', dest='os', help='Add OS data with options --os-family, --os-package-version')
    parser.add_option('--os-family', dest='os_family', help='The operating system: i.e redhat7, debian7, ubuntu12, ubuntu14, suse11, suse12')
    parser.add_option('--os-package-version', dest='os_package_version', help='The package version to use for the OS')
    parser.add_option('--repo', action='store_true', dest='repo', help='Add repository data with options: --repo-os, --repo-url, --repo-id, --repo-name')
    parser.add_option('--repo-os', dest='repo_os', help='The operating system type: i.e. redhat6, redhat7, debian7, ubuntu12, ubuntu14, suse11, suse12')
    parser.add_option('--repo-url', dest='repo_url', help='The base url for the repository data')
    parser.add_option('--repo-id', dest='repo_id', help='The ID of the repo')
    parser.add_option('--repo-name', dest='repo_name', help='The name of the repo')
    (options, args) = parser.parse_args()
    if (not options.filename):
        parser.error('--file option is required')
    if (options.finalize and (not options.xsd_file)):
        parser.error('Must supply XSD (--xsd) when finalizing')
    validate_manifest(parser, options)
    validate_available(parser, options)
    validate_os(parser, options)
    validate_repo(parser, options)
    vb = VersionBuilder(options.filename)
    process_release(vb, options)
    process_manifest(vb, options)
    process_available(vb, options)
    process_os(vb, options)
    process_repo(vb, options)
    vb.persist()
    if options.finalize:
        vb.finalize(options.xsd_file)
