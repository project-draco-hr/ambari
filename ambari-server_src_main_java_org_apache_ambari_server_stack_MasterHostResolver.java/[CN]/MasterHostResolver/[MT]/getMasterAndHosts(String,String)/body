{
  if (serviceName == null || componentName == null) {
    return null;
  }
  Set<String> componentHosts=m_cluster.getHosts(serviceName,componentName);
  if (0 == componentHosts.size()) {
    return null;
  }
  HostsType hostsType=new HostsType();
  hostsType.hosts.addAll(componentHosts);
  Service s=Service.OTHER;
  try {
    s=Service.valueOf(serviceName.toUpperCase());
  }
 catch (  Exception e) {
  }
  try {
switch (s) {
case HDFS:
      if (componentName.equalsIgnoreCase("NAMENODE")) {
        if (componentHosts.size() != 2) {
          return filterSameVersion(hostsType,serviceName,componentName);
        }
        Map<Status,String> pair=getNameNodePair();
        if (pair != null) {
          hostsType.master=pair.containsKey(Status.ACTIVE) ? pair.get(Status.ACTIVE) : null;
          hostsType.secondary=pair.containsKey(Status.STANDBY) ? pair.get(Status.STANDBY) : null;
        }
 else {
          hostsType.master=componentHosts.iterator().next();
        }
      }
    break;
case YARN:
  if (componentName.equalsIgnoreCase("RESOURCEMANAGER")) {
    resolveResourceManagers(getCluster(),hostsType);
  }
break;
case HBASE:
if (componentName.equalsIgnoreCase("HBASE_MASTER")) {
resolveHBaseMasters(getCluster(),hostsType);
}
break;
default :
break;
}
}
 catch (Exception err) {
LOG.error("Unable to get master and hosts for Component " + componentName + ". Error: "+ err.getMessage(),err);
}
hostsType=filterSameVersion(hostsType,serviceName,componentName);
return hostsType;
}
