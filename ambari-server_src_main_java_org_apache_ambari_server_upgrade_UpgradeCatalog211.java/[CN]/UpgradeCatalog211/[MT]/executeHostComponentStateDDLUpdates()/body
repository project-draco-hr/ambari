{
  dbAccessor.addColumn(HOST_COMPONENT_STATE_TABLE,new DBColumnInfo(HOST_COMPONENT_STATE_ID_COLUMN,Long.class,null,null,true));
  AtomicLong id=new AtomicLong(1);
  Statement statement=null;
  ResultSet resultSet=null;
  try {
    statement=dbAccessor.getConnection().createStatement();
    if (statement != null) {
      String selectSQL=MessageFormat.format("SELECT cluster_id, service_name, component_name, host_id FROM {0}",HOST_COMPONENT_STATE_TABLE);
      resultSet=statement.executeQuery(selectSQL);
      while (resultSet.next()) {
        final Long clusterId=resultSet.getLong("cluster_id");
        final String serviceName=resultSet.getString("service_name");
        final String componentName=resultSet.getString("component_name");
        final Long hostId=resultSet.getLong("host_id");
        String updateSQL=MessageFormat.format("UPDATE {0} SET {1} = {2} WHERE cluster_id = {3} AND service_name = ''{4}'' AND component_name = ''{5}'' and host_id = {6}",HOST_COMPONENT_STATE_TABLE,HOST_COMPONENT_STATE_ID_COLUMN,id.getAndIncrement(),clusterId,serviceName,componentName,hostId);
        dbAccessor.executeQuery(updateSQL);
      }
    }
  }
  finally {
    JdbcUtils.closeResultSet(resultSet);
    JdbcUtils.closeStatement(statement);
  }
  dbAccessor.alterColumn(HOST_COMPONENT_STATE_TABLE,new DBColumnInfo(HOST_COMPONENT_STATE_ID_COLUMN,Long.class,null,null,false));
  addSequence("hostcomponentstate_id_seq",id.get(),false);
  String primaryKeyConstraintName=null;
  Configuration.DatabaseType databaseType=configuration.getDatabaseType();
switch (databaseType) {
case POSTGRES:
{
      primaryKeyConstraintName="hostcomponentstate_pkey";
      break;
    }
case ORACLE:
case SQL_SERVER:
{
    primaryKeyConstraintName=dbAccessor.getPrimaryKeyConstraintName(HOST_COMPONENT_STATE_TABLE);
    break;
  }
default :
break;
}
if (databaseType == DatabaseType.MYSQL) {
String mysqlDropQuery=MessageFormat.format("ALTER TABLE {0} DROP PRIMARY KEY",HOST_COMPONENT_STATE_TABLE);
dbAccessor.executeQuery(mysqlDropQuery,true);
}
 else {
if (null == primaryKeyConstraintName) {
LOG.warn("Unable to determine the primary key constraint name for {}",HOST_COMPONENT_STATE_TABLE);
}
 else {
dbAccessor.dropPKConstraint(HOST_COMPONENT_STATE_TABLE,primaryKeyConstraintName,true);
}
}
dbAccessor.addPKConstraint(HOST_COMPONENT_STATE_TABLE,"pk_hostcomponentstate","id");
dbAccessor.createIndex(HOST_COMPONENT_STATE_INDEX,HOST_COMPONENT_STATE_TABLE,"host_id","component_name","service_name","cluster_id");
}
