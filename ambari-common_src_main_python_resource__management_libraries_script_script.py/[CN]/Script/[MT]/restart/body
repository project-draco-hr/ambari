def restart(self, env):
    '\n    Default implementation of restart command is to call stop and start methods\n    Feel free to override restart() method with your implementation.\n    For client components we call install\n    '
    config = self.get_config()
    componentCategory = None
    try:
        componentCategory = config['roleParams']['component_category']
    except KeyError:
        pass
    upgrade_type_command_param = ''
    direction = None
    if (config is not None):
        command_params = (config['commandParams'] if ('commandParams' in config) else None)
        if (command_params is not None):
            upgrade_type_command_param = (command_params['upgrade_type'] if ('upgrade_type' in command_params) else '')
            direction = (command_params['upgrade_direction'] if ('upgrade_direction' in command_params) else None)
    upgrade_type = Script.get_upgrade_type(upgrade_type_command_param)
    is_stack_upgrade = (upgrade_type is not None)
    if is_stack_upgrade:
        upgrade_info = {'upgrade_type': upgrade_type_command_param, }
        if (direction is not None):
            upgrade_info['direction'] = direction.upper()
        Script.structuredOut.update(upgrade_info)
    if (componentCategory and (componentCategory.strip().lower() == 'CLIENT'.lower())):
        if is_stack_upgrade:
            if ('pre_upgrade_restart' in dir(self)):
                self.pre_upgrade_restart(env, upgrade_type=upgrade_type)
            else:
                self.pre_rolling_restart(env)
        self.install(env)
    else:
        if ('upgrade_type' in inspect.getargspec(self.stop).args):
            self.stop(env, upgrade_type=upgrade_type)
        elif is_stack_upgrade:
            self.stop(env, rolling_restart=(upgrade_type == UPGRADE_TYPE_ROLLING))
        else:
            self.stop(env)
        if is_stack_upgrade:
            if ('pre_upgrade_restart' in dir(self)):
                self.pre_upgrade_restart(env, upgrade_type=upgrade_type)
            else:
                self.pre_rolling_restart(env)
        service_name = (config['serviceName'] if ((config is not None) and ('serviceName' in config)) else None)
        try:
            services_to_skip = ['RANGER', 'RANGER_KMS']
            if (service_name in services_to_skip):
                Logger.info('Temporarily skipping status check for {0} service only.'.format(service_name))
            elif is_stack_upgrade:
                Logger.info('Skipping status check for {0} service during upgrade'.format(service_name))
            else:
                self.status(env)
                raise Fail('Stop command finished but process keep running.')
        except ComponentIsNotRunning as e:
            pass
        except ClientComponentHasNoStatus as e:
            pass
        self.pre_start()
        if ('upgrade_type' in inspect.getargspec(self.start).args):
            self.start(env, upgrade_type=upgrade_type)
        elif is_stack_upgrade:
            self.start(env, rolling_restart=(upgrade_type == UPGRADE_TYPE_ROLLING))
        else:
            self.start(env)
        self.post_start()
        if is_stack_upgrade:
            if ('post_upgrade_restart' in dir(self)):
                self.post_upgrade_restart(env, upgrade_type=upgrade_type)
            else:
                self.post_rolling_restart(env)
    if self.should_expose_component_version('restart'):
        self.save_component_version_to_structured_out()
