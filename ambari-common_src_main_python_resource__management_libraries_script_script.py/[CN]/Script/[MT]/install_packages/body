def install_packages(self, env):
    "\n    List of packages that are required< by service is received from the server\n    as a command parameter. The method installs all packages\n    from this list\n    \n    exclude_packages - list of regexes (possibly raw strings as well), the\n    packages which match the regex won't be installed.\n    NOTE: regexes don't have Python syntax, but simple package regexes which support only * and .* and ?\n    "
    config = self.get_config()
    if ('host_sys_prepped' in config['hostLevelParams']):
        if (config['hostLevelParams']['host_sys_prepped'] == True):
            Logger.info('Node has all packages pre-installed. Skipping.')
            return
        pass
    try:
        package_list_str = config['hostLevelParams']['package_list']
        agent_stack_retry_on_unavailability = bool(config['hostLevelParams']['agent_stack_retry_on_unavailability'])
        agent_stack_retry_count = int(config['hostLevelParams']['agent_stack_retry_count'])
        if (isinstance(package_list_str, basestring) and (len(package_list_str) > 0)):
            package_list = json.loads(package_list_str)
            for package in package_list:
                if Script.check_package_condition(package):
                    name = self.format_package_name(package['name'])
                    if OSCheck.is_windows_family():
                        if ('ambari-metrics' in name):
                            Package(name)
                    else:
                        Package(name, retry_on_repo_unavailability=agent_stack_retry_on_unavailability, retry_count=agent_stack_retry_count)
    except KeyError:
        pass
    if OSCheck.is_windows_family():
        hadoop_user = config['configurations']['cluster-env']['hadoop.user.name']
        install_windows_msi(config['hostLevelParams']['jdk_location'], config['hostLevelParams']['agentCacheDir'], ['hdp-2.3.0.0.winpkg.msi', 'hdp-2.3.0.0.cab', 'hdp-2.3.0.0-01.cab'], hadoop_user, self.get_password(hadoop_user), str(config['hostLevelParams']['stack_version']))
        reload_windows_env()
