def execute(self):
    '\n    Sets up logging;\n    Parses command parameters and executes method relevant to command type\n    '
    if (len(sys.argv) < 7):
        print 'Script expects at least 6 arguments'
        print USAGE.format(os.path.basename(sys.argv[0]))
        sys.exit(1)
    self.command_name = str.lower(sys.argv[1])
    self.command_data_file = sys.argv[2]
    self.basedir = sys.argv[3]
    self.stroutfile = sys.argv[4]
    self.load_structured_out()
    self.logging_level = sys.argv[5]
    Script.tmp_dir = sys.argv[6]
    logging_level_str = logging._levelNames[self.logging_level]
    Logger.initialize_logger(__name__, logging_level=logging_level_str)
    if OSCheck.is_windows_family():
        reload_windows_env()
    try:
        with open(self.command_data_file) as f:
            pass
            Script.config = ConfigDictionary(json.load(f))
            Script.passwords = {}
            for (k, v) in _PASSWORD_MAP.iteritems():
                if (get_path_from_configuration(k, Script.config) and get_path_from_configuration(v, Script.config)):
                    Script.passwords[get_path_from_configuration(k, Script.config)] = get_path_from_configuration(v, Script.config)
    except IOError:
        Logger.logger.exception('Can not read json file with command parameters: ')
        sys.exit(1)
    try:
        method = self.choose_method_to_execute(self.command_name)
        with Environment(self.basedir, tmp_dir=Script.tmp_dir) as env:
            env.config.download_path = Script.tmp_dir
            method(env)
    finally:
        if self.should_expose_component_version(self.command_name):
            self.save_component_version_to_structured_out()
