def generate_configs(self, env):
    '\n    Generates config files and stores them as an archive in tmp_dir\n    based on xml_configs_list and env_configs_list from commandParams\n    '
    import params
    env.set_params(params)
    config = self.get_config()
    xml_configs_list = config['commandParams']['xml_configs_list']
    env_configs_list = config['commandParams']['env_configs_list']
    properties_configs_list = config['commandParams']['properties_configs_list']
    Directory(self.get_tmp_dir(), recursive=True)
    conf_tmp_dir = tempfile.mkdtemp(dir=self.get_tmp_dir())
    output_filename = os.path.join(self.get_tmp_dir(), config['commandParams']['output_file'])
    try:
        for file_dict in xml_configs_list:
            for (filename, dict) in file_dict.iteritems():
                XmlConfig(filename, conf_dir=conf_tmp_dir, mode=420, **self.generate_configs_get_xml_file_content(filename, dict))
        for file_dict in env_configs_list:
            for (filename, dicts) in file_dict.iteritems():
                File(os.path.join(conf_tmp_dir, filename), mode=420, content=InlineTemplate(self.generate_configs_get_template_file_content(filename, dicts)))
        for file_dict in properties_configs_list:
            for (filename, dict) in file_dict.iteritems():
                PropertiesFile(os.path.join(conf_tmp_dir, filename), mode=420, properties=self.generate_configs_get_xml_file_dict(filename, dict))
        with closing(tarfile.open(output_filename, 'w:gz')) as tar:
            try:
                tar.add(conf_tmp_dir, arcname=os.path.basename('.'))
            finally:
                tar.close()
    finally:
        Directory(conf_tmp_dir, action='delete')
