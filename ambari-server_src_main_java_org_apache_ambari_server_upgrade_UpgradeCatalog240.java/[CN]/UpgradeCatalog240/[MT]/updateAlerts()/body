{
  final Map<String,String> hdfsVisibilityMap=new HashMap<String,String>(){
{
      put("mergeHaMetrics","HIDDEN");
      put("appId","HIDDEN");
      put("metricName","HIDDEN");
    }
  }
;
  final Map<String,String> defaultKeytabVisibilityMap=new HashMap<String,String>(){
{
      put("default.smoke.principal","HIDDEN");
      put("default.smoke.keytab","HIDDEN");
    }
  }
;
  final Map<String,String> percentParameterMap=new HashMap<String,String>(){
{
      put("units","%");
      put("type","PERCENT");
    }
  }
;
  Map<String,Map<String,String>> visibilityMap=new HashMap<String,Map<String,String>>(){
{
      put("hive_webhcat_server_status",new HashMap<String,String>(){
{
          put("default.smoke.user","HIDDEN");
        }
      }
);
      put("hive_metastore_process",defaultKeytabVisibilityMap);
      put("hive_server_process",defaultKeytabVisibilityMap);
      put("namenode_service_rpc_queue_latency_hourly",hdfsVisibilityMap);
      put("namenode_client_rpc_queue_latency_hourly",hdfsVisibilityMap);
      put("namenode_service_rpc_processing_latency_hourly",hdfsVisibilityMap);
      put("namenode_client_rpc_processing_latency_hourly",hdfsVisibilityMap);
      put("increase_nn_heap_usage_daily",hdfsVisibilityMap);
      put("namenode_service_rpc_processing_latency_daily",hdfsVisibilityMap);
      put("namenode_client_rpc_processing_latency_daily",hdfsVisibilityMap);
      put("namenode_service_rpc_queue_latency_daily",hdfsVisibilityMap);
      put("namenode_client_rpc_queue_latency_daily",hdfsVisibilityMap);
      put("namenode_increase_in_storage_capacity_usage_daily",hdfsVisibilityMap);
      put("increase_nn_heap_usage_weekly",hdfsVisibilityMap);
      put("namenode_increase_in_storage_capacity_usage_weekly",hdfsVisibilityMap);
    }
  }
;
  Map<String,Map<String,String>> reportingPercentMap=new HashMap<String,Map<String,String>>(){
{
      put("hawq_segment_process_percent",percentParameterMap);
      put("mapreduce_history_server_cpu",percentParameterMap);
      put("yarn_nodemanager_webui_percent",percentParameterMap);
      put("yarn_resourcemanager_cpu",percentParameterMap);
      put("datanode_process_percent",percentParameterMap);
      put("datanode_storage_percent",percentParameterMap);
      put("journalnode_process_percent",percentParameterMap);
      put("namenode_cpu",percentParameterMap);
      put("namenode_hdfs_capacity_utilization",percentParameterMap);
      put("datanode_storage",percentParameterMap);
      put("datanode_heap_usage",percentParameterMap);
      put("storm_supervisor_process_percent",percentParameterMap);
      put("hbase_regionserver_process_percent",percentParameterMap);
      put("hbase_master_cpu",percentParameterMap);
      put("zookeeper_server_process_percent",percentParameterMap);
      put("metrics_monitor_process_percent",percentParameterMap);
      put("ams_metrics_collector_hbase_master_cpu",percentParameterMap);
    }
  }
;
  Map<String,Map<String,Integer>> reportingMultiplierMap=new HashMap<String,Map<String,Integer>>(){
{
      put("hawq_segment_process_percent",new HashMap<String,Integer>(){
{
          put("warning",100);
          put("critical",100);
        }
      }
);
      put("yarn_nodemanager_webui_percent",new HashMap<String,Integer>(){
{
          put("warning",100);
          put("critical",100);
        }
      }
);
      put("datanode_process_percent",new HashMap<String,Integer>(){
{
          put("warning",100);
          put("critical",100);
        }
      }
);
      put("datanode_storage_percent",new HashMap<String,Integer>(){
{
          put("warning",100);
          put("critical",100);
        }
      }
);
      put("journalnode_process_percent",new HashMap<String,Integer>(){
{
          put("warning",100);
          put("critical",100);
        }
      }
);
      put("storm_supervisor_process_percent",new HashMap<String,Integer>(){
{
          put("warning",100);
          put("critical",100);
        }
      }
);
      put("hbase_regionserver_process_percent",new HashMap<String,Integer>(){
{
          put("warning",100);
          put("critical",100);
        }
      }
);
      put("zookeeper_server_process_percent",new HashMap<String,Integer>(){
{
          put("warning",100);
          put("critical",100);
        }
      }
);
      put("metrics_monitor_process_percent",new HashMap<String,Integer>(){
{
          put("warning",100);
          put("critical",100);
        }
      }
);
    }
  }
;
  Map<String,Map<String,Integer>> scriptAlertMultiplierMap=new HashMap<String,Map<String,Integer>>(){
{
      put("ambari_agent_disk_usage",new HashMap<String,Integer>(){
{
          put("percent.used.space.warning.threshold",100);
          put("percent.free.space.critical.threshold",100);
        }
      }
);
      put("namenode_last_checkpoint",new HashMap<String,Integer>(){
{
          put("checkpoint.time.warning.threshold",100);
          put("checkpoint.time.critical.threshold",100);
        }
      }
);
    }
  }
;
  Set<String> alertNamesForPropertyUpdates=new HashSet<String>(){
{
      add("namenode_service_rpc_queue_latency_hourly");
      add("namenode_client_rpc_queue_latency_hourly");
      add("namenode_service_rpc_processing_latency_hourly");
      add("namenode_client_rpc_processing_latency_hourly");
      add("increase_nn_heap_usage_daily");
      add("namenode_service_rpc_processing_latency_daily");
      add("namenode_client_rpc_processing_latency_daily");
      add("namenode_service_rpc_queue_latency_daily");
      add("namenode_client_rpc_queue_latency_daily");
      add("namenode_increase_in_storage_capacity_usage_daily");
      add("increase_nn_heap_usage_weekly");
      add("namenode_increase_in_storage_capacity_usage_weekly");
      add("hawq_segment_process_percent");
      add("mapreduce_history_server_cpu");
      add("yarn_nodemanager_webui_percent");
      add("yarn_resourcemanager_cpu");
      add("datanode_process_percent");
      add("datanode_storage_percent");
      add("journalnode_process_percent");
      add("namenode_cpu");
      add("namenode_hdfs_capacity_utilization");
      add("datanode_storage");
      add("datanode_heap_usage");
      add("storm_supervisor_process_percent");
      add("hbase_regionserver_process_percent");
      add("hbase_master_cpu");
      add("zookeeper_server_process_percent");
      add("metrics_monitor_process_percent");
      add("ams_metrics_collector_hbase_master_cpu");
      add("ambari_agent_disk_usage");
      add("namenode_last_checkpoint");
    }
  }
;
  LOG.info("Updating alert definitions.");
  AmbariManagementController ambariManagementController=injector.getInstance(AmbariManagementController.class);
  AlertDefinitionDAO alertDefinitionDAO=injector.getInstance(AlertDefinitionDAO.class);
  Clusters clusters=ambariManagementController.getClusters();
  Map<String,Cluster> clusterMap=getCheckedClusterMap(clusters);
  for (  final Cluster cluster : clusterMap.values()) {
    long clusterID=cluster.getClusterId();
    final AlertDefinitionEntity namenodeLastCheckpointAlertDefinitionEntity=alertDefinitionDAO.findByName(clusterID,"namenode_last_checkpoint");
    final AlertDefinitionEntity namenodeHAHealthAlertDefinitionEntity=alertDefinitionDAO.findByName(clusterID,"namenode_ha_health");
    final AlertDefinitionEntity nodemanagerHealthAlertDefinitionEntity=alertDefinitionDAO.findByName(clusterID,"yarn_nodemanager_health");
    final AlertDefinitionEntity nodemanagerHealthSummaryAlertDefinitionEntity=alertDefinitionDAO.findByName(clusterID,"nodemanager_health_summary");
    final AlertDefinitionEntity hiveMetastoreProcessAlertDefinitionEntity=alertDefinitionDAO.findByName(clusterID,"hive_metastore_process");
    final AlertDefinitionEntity hiveServerProcessAlertDefinitionEntity=alertDefinitionDAO.findByName(clusterID,"hive_server_process");
    final AlertDefinitionEntity hiveWebhcatServerStatusAlertDefinitionEntity=alertDefinitionDAO.findByName(clusterID,"hive_webhcat_server_status");
    final AlertDefinitionEntity flumeAgentStatusAlertDefinitionEntity=alertDefinitionDAO.findByName(clusterID,"flume_agent_status");
    Map<AlertDefinitionEntity,List<String>> alertDefinitionParams=new HashMap<>();
    checkedPutToMap(alertDefinitionParams,namenodeLastCheckpointAlertDefinitionEntity,Lists.newArrayList("connection.timeout","checkpoint.time.warning.threshold","checkpoint.time.critical.threshold"));
    checkedPutToMap(alertDefinitionParams,namenodeHAHealthAlertDefinitionEntity,Lists.newArrayList("connection.timeout"));
    checkedPutToMap(alertDefinitionParams,nodemanagerHealthAlertDefinitionEntity,Lists.newArrayList("connection.timeout"));
    checkedPutToMap(alertDefinitionParams,nodemanagerHealthSummaryAlertDefinitionEntity,Lists.newArrayList("connection.timeout"));
    checkedPutToMap(alertDefinitionParams,hiveMetastoreProcessAlertDefinitionEntity,Lists.newArrayList("default.smoke.user","default.smoke.principal","default.smoke.keytab"));
    checkedPutToMap(alertDefinitionParams,hiveServerProcessAlertDefinitionEntity,Lists.newArrayList("default.smoke.user","default.smoke.principal","default.smoke.keytab"));
    checkedPutToMap(alertDefinitionParams,hiveWebhcatServerStatusAlertDefinitionEntity,Lists.newArrayList("default.smoke.user","connection.timeout"));
    checkedPutToMap(alertDefinitionParams,flumeAgentStatusAlertDefinitionEntity,Lists.newArrayList("run.directory"));
    List<AlertDefinitionEntity> definitionsForPropertyUpdates=new ArrayList<>();
    for (    Map.Entry<AlertDefinitionEntity,List<String>> entry : alertDefinitionParams.entrySet()) {
      AlertDefinitionEntity alertDefinition=entry.getKey();
      String source=alertDefinition.getSource();
      alertDefinition.setSource(addParam(source,entry.getValue()));
      definitionsForPropertyUpdates.add(alertDefinition);
    }
    for (    String name : alertNamesForPropertyUpdates) {
      AlertDefinitionEntity alertDefinition=alertDefinitionDAO.findByName(clusterID,name);
      if (alertDefinition != null) {
        definitionsForPropertyUpdates.add(alertDefinition);
      }
    }
    for (    AlertDefinitionEntity alertDefinition : definitionsForPropertyUpdates) {
      if (visibilityMap.containsKey(alertDefinition.getDefinitionName())) {
        for (        Map.Entry<String,String> entry : visibilityMap.get(alertDefinition.getDefinitionName()).entrySet()) {
          String paramName=entry.getKey();
          String visibilityValue=entry.getValue();
          String source=alertDefinition.getSource();
          alertDefinition.setSource(addParamOption(source,paramName,"visibility",visibilityValue));
        }
      }
      if (scriptAlertMultiplierMap.containsKey(alertDefinition.getDefinitionName())) {
        for (        Map.Entry<String,Integer> entry : scriptAlertMultiplierMap.get(alertDefinition.getDefinitionName()).entrySet()) {
          String paramName=entry.getKey();
          Integer multiplier=entry.getValue();
          String source=alertDefinition.getSource();
          Float oldValue=getParamFloatValue(source,paramName);
          Integer newValue=Math.round(oldValue * multiplier);
          alertDefinition.setSource(setParamIntegerValue(source,paramName,newValue));
        }
      }
      if (reportingMultiplierMap.containsKey(alertDefinition.getDefinitionName())) {
        for (        Map.Entry<String,Integer> entry : reportingMultiplierMap.get(alertDefinition.getDefinitionName()).entrySet()) {
          String reportingName=entry.getKey();
          Integer multiplier=entry.getValue();
          String source=alertDefinition.getSource();
          Float oldValue=getReportingFloatValue(source,reportingName);
          Integer newValue=Math.round(oldValue * multiplier);
          alertDefinition.setSource(setReportingIntegerValue(source,reportingName,newValue));
        }
      }
      if (reportingPercentMap.containsKey(alertDefinition.getDefinitionName())) {
        for (        Map.Entry<String,String> entry : reportingPercentMap.get(alertDefinition.getDefinitionName()).entrySet()) {
          String paramName=entry.getKey();
          String paramValue=entry.getValue();
          String source=alertDefinition.getSource();
          alertDefinition.setSource(addReportingOption(source,paramName,paramValue));
        }
      }
      alertDefinition.setHash(UUID.randomUUID().toString());
      alertDefinitionDAO.merge(alertDefinition);
    }
  }
}
