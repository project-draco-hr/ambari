{
  final AmbariManagementController controller=injector.getInstance(AmbariManagementController.class);
  final Clusters clusters=controller.getClusters();
  if (null != clusters) {
    Map<String,Cluster> clusterMap=clusters.getClusters();
    if (null != clusterMap && !clusterMap.isEmpty()) {
      for (      final Cluster cluster : clusterMap.values()) {
        Set<String> installedServices=cluster.getServices().keySet();
        StackId stackId=cluster.getCurrentStackVersion();
        if (installedServices.contains("HBASE") && SecurityType.KERBEROS == cluster.getSecurityType()) {
          Config hbaseSite=cluster.getDesiredConfigByType(HBASE_SITE_CONFIG);
          if (null != hbaseSite) {
            Map<String,String> hbaseSiteProperties=hbaseSite.getProperties();
            boolean enableRangerHbase=false;
            boolean xmlConfigurationsSupported=false;
            Config rangerHbasePluginProperties=cluster.getDesiredConfigByType("ranger-hbase-plugin-properties");
            if (rangerHbasePluginProperties != null && rangerHbasePluginProperties.getProperties().containsKey("ranger-hbase-plugin-enabled")) {
              enableRangerHbase=rangerHbasePluginProperties.getProperties().get("ranger-hbase-plugin-enabled").toLowerCase() == "yes";
            }
            Config rangerEnv=cluster.getDesiredConfigByType("ranger-env");
            if (rangerEnv != null && rangerEnv.getProperties().containsKey("xml_configurations_supported")) {
              xmlConfigurationsSupported=Boolean.parseBoolean(rangerEnv.getProperties().get("xml_configurations_supported"));
            }
            final Map<String,String> updatedHbaseProperties=new HashMap<>();
            if (hbaseSiteProperties.containsKey("hbase.coprocessor.master.classes") && hbaseSiteProperties.get("hbase.coprocessor.master.classes").equals("{{hbase_coprocessor_master_classes}}")) {
              if (!enableRangerHbase) {
                updatedHbaseProperties.put("hbase.coprocessor.master.classes","org.apache.hadoop.hbase.security.access.AccessController");
              }
 else               if (xmlConfigurationsSupported) {
                updatedHbaseProperties.put("hbase.coprocessor.master.classes","org.apache.ranger.authorization.hbase.RangerAuthorizationCoprocessor");
              }
 else {
                updatedHbaseProperties.put("hbase.coprocessor.master.classes","com.xasecure.authorization.hbase.XaSecureAuthorizationCoprocessor");
              }
            }
            if (hbaseSiteProperties.containsKey("hbase.coprocessor.regionserver.classes") && hbaseSiteProperties.get("hbase.coprocessor.regionserver.classes").equals("{{hbase_coprocessor_regionserver_classes}}")) {
              if (!enableRangerHbase) {
                updatedHbaseProperties.put("hbase.coprocessor.regionserver.classes","org.apache.hadoop.hbase.security.access.AccessController");
              }
 else               if (xmlConfigurationsSupported) {
                updatedHbaseProperties.put("hbase.coprocessor.regionserver.classes","org.apache.ranger.authorization.hbase.RangerAuthorizationCoprocessor");
              }
 else {
                updatedHbaseProperties.put("hbase.coprocessor.regionserver.classes","com.xasecure.authorization.hbase.XaSecureAuthorizationCoprocessor");
              }
            }
            if (hbaseSiteProperties.containsKey("hbase.coprocessor.region.classes") && hbaseSiteProperties.get("hbase.coprocessor.region.classes").equals("{{hbase_coprocessor_region_classes}}")) {
              if (!enableRangerHbase) {
                updatedHbaseProperties.put("hbase.coprocessor.region.classes","org.apache.hadoop.hbase.security.token.TokenProvider,org.apache.hadoop.hbase.security.access.SecureBulkLoadEndpoint,org.apache.hadoop.hbase.security.access.AccessController");
              }
 else               if (xmlConfigurationsSupported) {
                updatedHbaseProperties.put("hbase.coprocessor.region.classes","org.apache.hadoop.hbase.security.token.TokenProvider,org.apache.hadoop.hbase.security.access.SecureBulkLoadEndpoint,org.apache.ranger.authorization.hbase.RangerAuthorizationCoprocessor");
              }
 else {
                updatedHbaseProperties.put("hbase.coprocessor.region.classes","org.apache.hadoop.hbase.security.token.TokenProvider,org.apache.hadoop.hbase.security.access.SecureBulkLoadEndpoint,com.xasecure.authorization.hbase.XaSecureAuthorizationCoprocessor");
              }
            }
            updateConfigurationProperties(HBASE_SITE_CONFIG,updatedHbaseProperties,true,false);
            if (isAtLeastHdp25(stackId)) {
              String principal=hbaseSiteProperties.get(HBASE_SPNEGO_PRINCIPAL_KEY);
              String keytab=hbaseSiteProperties.get(HBASE_SPNEGO_KEYTAB_KEY);
              final Map<String,String> updatedKerberosProperties=new HashMap<>();
              if (null == principal) {
                final KerberosDescriptor defaultDescriptor=getKerberosDescriptor(cluster);
                final KerberosIdentityDescriptor spnegoDescriptor=defaultDescriptor.getIdentity("spnego");
                if (null != spnegoDescriptor) {
                  KerberosPrincipalDescriptor principalDescriptor=spnegoDescriptor.getPrincipalDescriptor();
                  if (null != principalDescriptor) {
                    updatedKerberosProperties.put(HBASE_SPNEGO_PRINCIPAL_KEY,principalDescriptor.getValue());
                  }
                }
              }
              if (null == keytab) {
                final KerberosDescriptor defaultDescriptor=getKerberosDescriptor(cluster);
                final KerberosIdentityDescriptor spnegoDescriptor=defaultDescriptor.getIdentity("spnego");
                if (null != spnegoDescriptor) {
                  KerberosKeytabDescriptor keytabDescriptor=spnegoDescriptor.getKeytabDescriptor();
                  if (null != keytabDescriptor) {
                    updatedKerberosProperties.put(HBASE_SPNEGO_KEYTAB_KEY,keytabDescriptor.getFile());
                  }
                }
              }
              if (!updatedKerberosProperties.isEmpty()) {
                updateConfigurationProperties(HBASE_SITE_CONFIG,updatedKerberosProperties,true,false);
              }
            }
          }
        }
      }
    }
  }
}
