{
  AmbariManagementController ambariManagementController=injector.getInstance(AmbariManagementController.class);
  Clusters clusters=ambariManagementController.getClusters();
  Map<String,Cluster> clusterMap=getCheckedClusterMap(clusters);
  for (  final Cluster cluster : clusterMap.values()) {
    Config config;
    String newDefault=null;
    AmbariMetaInfo metaInfo=ambariManagementController.getAmbariMetaInfo();
    StackId stackId=cluster.getCurrentStackVersion();
    StackInfo stackInfo=((metaInfo == null) || (stackId == null)) ? null : metaInfo.getStack(stackId.getStackName(),stackId.getStackVersion());
    if (stackInfo != null) {
      ServiceInfo kerberosService=stackInfo.getService("KERBEROS");
      if (kerberosService != null) {
        List<PropertyInfo> properties=kerberosService.getProperties();
        if (properties != null) {
          for (          PropertyInfo propertyInfo : properties) {
            if ("krb5-conf.xml".equals(propertyInfo.getFilename()) && "content".equals(propertyInfo.getName())) {
              newDefault=propertyInfo.getValue();
              break;
            }
          }
        }
      }
    }
    config=cluster.getDesiredConfigByType("kerberos-env");
    if (config != null) {
      String value=config.getProperties().get("kdc_host");
      Map<String,String> updates=Collections.singletonMap("kdc_hosts",value);
      Set<String> removes=Collections.singleton("kdc_host");
      updateConfigurationPropertiesForCluster(cluster,"kerberos-env",updates,removes,true,false);
    }
    if (newDefault != null) {
      config=cluster.getDesiredConfigByType("krb5-conf");
      if (config != null) {
        String value=config.getProperties().get("content");
        String oldDefault="\n[libdefaults]\n  renew_lifetime = 7d\n  forwardable = true\n  default_realm = {{realm}}\n  ticket_lifetime = 24h\n  dns_lookup_realm = false\n  dns_lookup_kdc = false\n  #default_tgs_enctypes = {{encryption_types}}\n  #default_tkt_enctypes = {{encryption_types}}\n\n{% if domains %}\n[domain_realm]\n{% for domain in domains.split(\u0027,\u0027) %}\n  {{domain}} = {{realm}}\n{% endfor %}\n{% endif %}\n\n[logging]\n  default = FILE:/var/log/krb5kdc.log\n  admin_server = FILE:/var/log/kadmind.log\n  kdc = FILE:/var/log/krb5kdc.log\n\n[realms]\n  {{realm}} = {\n    admin_server = {{admin_server_host|default(kdc_host, True)}}\n    kdc = {{kdc_host}}\n  }\n\n{# Append additional realm declarations below #}";
        if (oldDefault.equalsIgnoreCase(value)) {
          Map<String,String> updates=Collections.singletonMap("content",newDefault);
          updateConfigurationPropertiesForCluster(cluster,"krb5-conf",updates,null,true,false);
        }
 else {
          LOG.warn("The krb5-conf/content value was not updated to use the kerberos-env/kdc_hosts " + "property since the stored template appears to have been changed from the default. " + "This value should be manually updated so that\n"+ "\tkdc = {{kdc_host}}\n"+ "Is changed to something like\n"+ "\t{%- if kdc_hosts &gt; 0 -%}\n"+ "\t{%- set kdc_host_list = kdc_hosts.split(',')  -%}\n"+ "\t{%- if kdc_host_list -%}\n"+ "\t{% for kdc_host in kdc_host_list %}\n"+ "\t    kdc = {{kdc_host|trim()}}\n"+ "\t{%- endfor -%}");
        }
      }
    }
  }
}
