{
  JsonObject sourceJson=new JsonParser().parse(source).getAsJsonObject();
  JsonArray parametersJson=sourceJson.getAsJsonArray("parameters");
  boolean parameterExists=parametersJson != null && !parametersJson.isJsonNull();
  if (parameterExists) {
    Iterator<JsonElement> jsonElementIterator=parametersJson.iterator();
    while (jsonElementIterator.hasNext()) {
      JsonElement element=jsonElementIterator.next();
      JsonElement name=element.getAsJsonObject().get("name");
      if (name != null && !name.isJsonNull() && params.contains(name.getAsString())) {
        params.remove(name.getAsString());
      }
    }
    if (params.size() == 0) {
      return sourceJson.toString();
    }
  }
  List<JsonObject> paramsToAdd=new ArrayList<>();
  if (params.contains("connection.timeout")) {
    JsonObject param=new JsonObject();
    param.add("name",new JsonPrimitive("connection.timeout"));
    param.add("display_name",new JsonPrimitive("Connection Timeout"));
    param.add("value",new JsonPrimitive(5.0));
    param.add("type",new JsonPrimitive("NUMERIC"));
    param.add("description",new JsonPrimitive("The maximum time before this alert is considered to be CRITICAL"));
    param.add("units",new JsonPrimitive("seconds"));
    param.add("threshold",new JsonPrimitive("CRITICAL"));
    paramsToAdd.add(param);
  }
  if (params.contains("checkpoint.time.warning.threshold")) {
    JsonObject param=new JsonObject();
    param.add("name",new JsonPrimitive("checkpoint.time.warning.threshold"));
    param.add("display_name",new JsonPrimitive("Checkpoint Warning"));
    param.add("value",new JsonPrimitive(2.0));
    param.add("type",new JsonPrimitive("PERCENT"));
    param.add("description",new JsonPrimitive("The percentage of the last checkpoint time greater than the interval in order to trigger a warning alert."));
    param.add("units",new JsonPrimitive("%"));
    param.add("threshold",new JsonPrimitive("WARNING"));
    paramsToAdd.add(param);
  }
  if (params.contains("checkpoint.time.critical.threshold")) {
    JsonObject param=new JsonObject();
    param.add("name",new JsonPrimitive("checkpoint.time.critical.threshold"));
    param.add("display_name",new JsonPrimitive("Checkpoint Critical"));
    param.add("value",new JsonPrimitive(2.0));
    param.add("type",new JsonPrimitive("PERCENT"));
    param.add("description",new JsonPrimitive("The percentage of the last checkpoint time greater than the interval in order to trigger a critical alert."));
    param.add("units",new JsonPrimitive("%"));
    param.add("threshold",new JsonPrimitive("CRITICAL"));
    paramsToAdd.add(param);
  }
  if (params.contains("default.smoke.user")) {
    JsonObject param=new JsonObject();
    param.add("name",new JsonPrimitive("default.smoke.user"));
    param.add("display_name",new JsonPrimitive("Default Smoke User"));
    param.add("value",new JsonPrimitive("ambari-qa"));
    param.add("type",new JsonPrimitive("STRING"));
    param.add("description",new JsonPrimitive("The user that will run the Hive commands if not specified in cluster-env/smokeuser"));
    paramsToAdd.add(param);
  }
  if (params.contains("default.smoke.principal")) {
    JsonObject param=new JsonObject();
    param.add("name",new JsonPrimitive("default.smoke.principal"));
    param.add("display_name",new JsonPrimitive("Default Smoke Principal"));
    param.add("value",new JsonPrimitive("ambari-qa@EXAMPLE.COM"));
    param.add("type",new JsonPrimitive("STRING"));
    param.add("description",new JsonPrimitive("The principal to use when retrieving the kerberos ticket if not specified in cluster-env/smokeuser_principal_name"));
    paramsToAdd.add(param);
  }
  if (params.contains("default.smoke.keytab")) {
    JsonObject param=new JsonObject();
    param.add("name",new JsonPrimitive("default.smoke.keytab"));
    param.add("display_name",new JsonPrimitive("Default Smoke Keytab"));
    param.add("value",new JsonPrimitive("/etc/security/keytabs/smokeuser.headless.keytab"));
    param.add("type",new JsonPrimitive("STRING"));
    param.add("description",new JsonPrimitive("The keytab to use when retrieving the kerberos ticket if not specified in cluster-env/smokeuser_keytab"));
    paramsToAdd.add(param);
  }
  if (params.contains("run.directory")) {
    JsonObject param=new JsonObject();
    param.add("name",new JsonPrimitive("run.directory"));
    param.add("display_name",new JsonPrimitive("Run Directory"));
    param.add("value",new JsonPrimitive("/var/run/flume"));
    param.add("type",new JsonPrimitive("STRING"));
    param.add("description",new JsonPrimitive("The directory where flume agent processes will place their PID files."));
    paramsToAdd.add(param);
  }
  if (params.contains("minimum.free.space")) {
    JsonObject param=new JsonObject();
    param.add("name",new JsonPrimitive("minimum.free.space"));
    param.add("display_name",new JsonPrimitive("Minimum Free Space"));
    param.add("value",new JsonPrimitive("5000000000"));
    param.add("type",new JsonPrimitive("NUMERIC"));
    param.add("description",new JsonPrimitive("The overall amount of free disk space left before an alert is triggered."));
    param.add("units",new JsonPrimitive("bytes"));
    param.add("threshold",new JsonPrimitive("WARNING"));
    paramsToAdd.add(param);
  }
  if (params.contains("percent.used.space.warning.threshold")) {
    JsonObject param=new JsonObject();
    param.add("name",new JsonPrimitive("percent.used.space.warning.threshold"));
    param.add("display_name",new JsonPrimitive("Warning"));
    param.add("value",new JsonPrimitive("50"));
    param.add("type",new JsonPrimitive("PERCENT"));
    param.add("description",new JsonPrimitive("The percent of disk space consumed before a warning is triggered."));
    param.add("units",new JsonPrimitive("%"));
    param.add("threshold",new JsonPrimitive("WARNING"));
    paramsToAdd.add(param);
  }
  if (params.contains("percent.free.space.critical.threshold")) {
    JsonObject param=new JsonObject();
    param.add("name",new JsonPrimitive("percent.free.space.critical.threshold"));
    param.add("display_name",new JsonPrimitive("Critical"));
    param.add("value",new JsonPrimitive("80"));
    param.add("type",new JsonPrimitive("PERCENT"));
    param.add("description",new JsonPrimitive("The percent of disk space consumed before a critical alert is triggered."));
    param.add("units",new JsonPrimitive("%"));
    param.add("threshold",new JsonPrimitive("CRITICAL"));
    paramsToAdd.add(param);
  }
  if (params.contains("request.by.status.warning.threshold")) {
    JsonObject param=new JsonObject();
    param.add("name",new JsonPrimitive("request.by.status.warning.threshold"));
    param.add("display_name",new JsonPrimitive("Warning Request Time"));
    param.add("value",new JsonPrimitive("3000"));
    param.add("type",new JsonPrimitive("NUMERIC"));
    param.add("description",new JsonPrimitive("The time to find requests in progress before a warning alert is triggered."));
    param.add("units",new JsonPrimitive("ms"));
    param.add("threshold",new JsonPrimitive("WARNING"));
    paramsToAdd.add(param);
  }
  if (params.contains("request.by.status.critical.threshold")) {
    JsonObject param=new JsonObject();
    param.add("name",new JsonPrimitive("request.by.status.critical.threshold"));
    param.add("display_name",new JsonPrimitive("Critical Request Time"));
    param.add("value",new JsonPrimitive("5000"));
    param.add("type",new JsonPrimitive("NUMERIC"));
    param.add("description",new JsonPrimitive("The time to find requests in progress before a critical alert is triggered."));
    param.add("units",new JsonPrimitive("ms"));
    param.add("threshold",new JsonPrimitive("CRITICAL"));
    paramsToAdd.add(param);
  }
  if (params.contains("task.status.aggregation.warning.threshold")) {
    JsonObject param=new JsonObject();
    param.add("name",new JsonPrimitive("task.status.aggregation.warning.threshold"));
    param.add("display_name",new JsonPrimitive("Warning Process Time"));
    param.add("value",new JsonPrimitive("3000"));
    param.add("type",new JsonPrimitive("NUMERIC"));
    param.add("description",new JsonPrimitive("The time to calculate a request's status from its tasks before a warning alert is triggered."));
    param.add("units",new JsonPrimitive("ms"));
    param.add("threshold",new JsonPrimitive("WARNING"));
    paramsToAdd.add(param);
  }
  if (params.contains("task.status.aggregation.critical.threshold")) {
    JsonObject param=new JsonObject();
    param.add("name",new JsonPrimitive("task.status.aggregation.critical.threshold"));
    param.add("display_name",new JsonPrimitive("Critical Process Time"));
    param.add("value",new JsonPrimitive("5000"));
    param.add("type",new JsonPrimitive("NUMERIC"));
    param.add("description",new JsonPrimitive("The time to calculate a request's status from its tasks before a critical alert is triggered."));
    param.add("units",new JsonPrimitive("ms"));
    param.add("threshold",new JsonPrimitive("CRITICAL"));
    paramsToAdd.add(param);
  }
  if (params.contains("rest.api.cluster.warning.threshold")) {
    JsonObject param=new JsonObject();
    param.add("name",new JsonPrimitive("rest.api.cluster.warning.threshold"));
    param.add("display_name",new JsonPrimitive("Warning Response Time"));
    param.add("value",new JsonPrimitive("5000"));
    param.add("type",new JsonPrimitive("NUMERIC"));
    param.add("description",new JsonPrimitive("The time to get a cluster via the REST API before a warning alert is triggered."));
    param.add("units",new JsonPrimitive("ms"));
    param.add("threshold",new JsonPrimitive("WARNING"));
    paramsToAdd.add(param);
  }
  if (params.contains("rest.api.cluster.critical.threshold")) {
    JsonObject param=new JsonObject();
    param.add("name",new JsonPrimitive("rest.api.cluster.critical.threshold"));
    param.add("display_name",new JsonPrimitive("Critical Response Time"));
    param.add("value",new JsonPrimitive("7000"));
    param.add("type",new JsonPrimitive("NUMERIC"));
    param.add("description",new JsonPrimitive("The time to get a cluster via the REST API before a critical alert is triggered."));
    param.add("units",new JsonPrimitive("ms"));
    param.add("threshold",new JsonPrimitive("CRITICAL"));
    paramsToAdd.add(param);
  }
  if (!parameterExists) {
    parametersJson=new JsonArray();
    for (    JsonObject param : paramsToAdd) {
      parametersJson.add(param);
    }
    sourceJson.add("parameters",parametersJson);
  }
 else {
    for (    JsonObject param : paramsToAdd) {
      parametersJson.add(param);
    }
    sourceJson.remove("parameters");
    sourceJson.add("parameters",parametersJson);
  }
  return sourceJson.toString();
}
