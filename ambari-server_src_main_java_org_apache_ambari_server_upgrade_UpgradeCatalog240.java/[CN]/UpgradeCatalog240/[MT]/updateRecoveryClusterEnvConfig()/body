{
  Map<String,String> propertyMap=new HashMap<>();
  if (StringUtils.isNotEmpty(config.getNodeRecoveryType())) {
    propertyMap.put(RecoveryConfigHelper.RECOVERY_ENABLED_KEY,"true");
    propertyMap.put(RecoveryConfigHelper.RECOVERY_TYPE_KEY,config.getNodeRecoveryType());
  }
 else {
    propertyMap.put(RecoveryConfigHelper.RECOVERY_ENABLED_KEY,"false");
  }
  if (StringUtils.isNotEmpty(config.getNodeRecoveryLifetimeMaxCount())) {
    propertyMap.put(RecoveryConfigHelper.RECOVERY_LIFETIME_MAX_COUNT_KEY,config.getNodeRecoveryLifetimeMaxCount());
  }
  if (StringUtils.isNotEmpty(config.getNodeRecoveryMaxCount())) {
    propertyMap.put(RecoveryConfigHelper.RECOVERY_MAX_COUNT_KEY,config.getNodeRecoveryMaxCount());
  }
  if (StringUtils.isNotEmpty(config.getNodeRecoveryRetryGap())) {
    propertyMap.put(RecoveryConfigHelper.RECOVERY_RETRY_GAP_KEY,config.getNodeRecoveryRetryGap());
  }
  if (StringUtils.isNotEmpty(config.getNodeRecoveryWindowInMin())) {
    propertyMap.put(RecoveryConfigHelper.RECOVERY_WINDOW_IN_MIN_KEY,config.getNodeRecoveryWindowInMin());
  }
  AmbariManagementController ambariManagementController=injector.getInstance(AmbariManagementController.class);
  Clusters clusters=ambariManagementController.getClusters();
  Map<String,Cluster> clusterMap=getCheckedClusterMap(clusters);
  for (  final Cluster cluster : clusterMap.values()) {
    updateConfigurationPropertiesForCluster(cluster,ConfigHelper.CLUSTER_ENV,propertyMap,true,true);
  }
}
