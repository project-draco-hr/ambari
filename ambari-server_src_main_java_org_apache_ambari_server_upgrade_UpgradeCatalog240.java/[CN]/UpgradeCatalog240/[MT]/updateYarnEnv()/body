{
  AmbariManagementController ambariManagementController=injector.getInstance(AmbariManagementController.class);
  Clusters clusters=ambariManagementController.getClusters();
  Map<String,Cluster> clusterMap=getCheckedClusterMap(clusters);
  for (  final Cluster cluster : clusterMap.values()) {
    Config yarnEnvConfig=cluster.getDesiredConfigByType(YARN_ENV_CONFIG);
    Map<String,String> yarnEnvProps=new HashMap<String,String>();
    if (yarnEnvConfig != null) {
      String content=yarnEnvConfig.getProperties().get("content");
      content=content.replaceAll("export YARN_HISTORYSERVER_HEAPSIZE=\\{\\{apptimelineserver_heapsize\\}\\}","# export YARN_HISTORYSERVER_HEAPSIZE=\\{\\{apptimelineserver_heapsize\\}\\}");
      content=content + "\n\n      # Specify the max Heapsize for the timeline server using a numerical value\n" + "      # in the scale of MB. For example, to specify an jvm option of -Xmx1000m, set\n"+ "      # the value to 1024.\n"+ "      # This value will be overridden by an Xmx setting specified in either YARN_OPTS\n"+ "      # and/or YARN_TIMELINESERVER_OPTS.\n"+ "      # If not specified, the default value will be picked from either YARN_HEAPMAX\n"+ "      # or JAVA_HEAP_MAX with YARN_HEAPMAX as the preferred option of the two.\n"+ "      export YARN_TIMELINESERVER_HEAPSIZE={{apptimelineserver_heapsize}}";
      yarnEnvProps.put("content",content);
      updateConfigurationPropertiesForCluster(cluster,YARN_ENV_CONFIG,yarnEnvProps,true,true);
    }
  }
}
