{
  AmbariManagementController ambariManagementController=injector.getInstance(AmbariManagementController.class);
  Clusters clusters=ambariManagementController.getClusters();
  if (clusters != null) {
    Map<String,Cluster> clusterMap=clusters.getClusters();
    if (clusterMap != null && !clusterMap.isEmpty()) {
      for (      final Cluster cluster : clusterMap.values()) {
        Config amsEnv=cluster.getDesiredConfigByType("ams-env");
        if (amsEnv != null) {
          String content=amsEnv.getProperties().get("content");
          if (content != null && !content.contains("AMS_INSTANCE_NAME")) {
            String newContent=content + "\n # AMS instance name\n" + "export AMS_INSTANCE_NAME={{hostname}}\n";
            updateConfigurationProperties("ams-env",Collections.singletonMap("content",newContent),true,true);
          }
        }
        Config amsHBaseEnv=cluster.getDesiredConfigByType("ams-hbase-env");
        if (amsHBaseEnv != null) {
          String content=amsHBaseEnv.getProperties().get("content");
          Map<String,String> newProperties=new HashMap<>();
          if (content != null && !content.contains("HBASE_HOME=")) {
            String newContent=content + "\n # Explicitly Setting HBASE_HOME for AMS HBase so that there is no conflict\n" + "export HBASE_HOME={{ams_hbase_home_dir}}\n";
            newProperties.put("content",newContent);
          }
          updateConfigurationPropertiesForCluster(cluster,"ams-hbase-env",newProperties,true,true);
        }
        Config amsSite=cluster.getDesiredConfigByType(AMS_SITE);
        if (amsSite != null) {
          String metadataFilters=amsSite.getProperties().get("timeline.metrics.service.metadata.filters");
          if (StringUtils.isEmpty(metadataFilters) || !metadataFilters.contains("ContainerResource")) {
            updateConfigurationProperties("ams-site",Collections.singletonMap("timeline.metrics.service.metadata.filters","ContainerResource"),true,false);
          }
          Map<String,String> amsSiteProperties=amsSite.getProperties();
          Map<String,String> newProperties=new HashMap<>();
          if (!amsSiteProperties.containsKey(TIMELINE_METRICS_SINK_COLLECTION_PERIOD) || "60".equals(amsSiteProperties.get(TIMELINE_METRICS_SINK_COLLECTION_PERIOD))) {
            newProperties.put(TIMELINE_METRICS_SINK_COLLECTION_PERIOD,"10");
            LOG.info("Setting value of " + TIMELINE_METRICS_SINK_COLLECTION_PERIOD + " : 10");
          }
          updateConfigurationPropertiesForCluster(cluster,AMS_SITE,newProperties,true,true);
        }
        Config amsGrafanaIni=cluster.getDesiredConfigByType("ams-grafana-ini");
        if (amsGrafanaIni != null) {
          Map<String,String> amsGrafanaIniProperties=amsGrafanaIni.getProperties();
          String content=amsGrafanaIniProperties.get("content");
          Map<String,String> newProperties=new HashMap<>();
          newProperties.put("content",updateAmsGrafanaIni(content));
          updateConfigurationPropertiesForCluster(cluster,"ams-grafana-ini",newProperties,true,true);
        }
        Config amsHbaseSite=cluster.getDesiredConfigByType(AMS_HBASE_SITE);
        if (amsHbaseSite != null) {
          Map<String,String> amsHbaseSiteProperties=amsHbaseSite.getProperties();
          Map<String,String> newProperties=new HashMap<>();
          if (amsHbaseSiteProperties.containsKey(HBASE_RPC_TIMEOUT_PROPERTY) && "30000".equals(amsHbaseSiteProperties.get(HBASE_RPC_TIMEOUT_PROPERTY))) {
            newProperties.put(HBASE_RPC_TIMEOUT_PROPERTY,String.valueOf(300000));
          }
          updateConfigurationPropertiesForCluster(cluster,AMS_HBASE_SITE,newProperties,true,true);
        }
      }
    }
  }
}
