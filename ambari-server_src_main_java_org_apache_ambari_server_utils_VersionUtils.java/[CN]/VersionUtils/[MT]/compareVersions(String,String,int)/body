{
  if (version1 == null) {
    throw new IllegalArgumentException("version1 cannot be null");
  }
  if (version2 == null) {
    throw new IllegalArgumentException("version2 cannot be null");
  }
  version1=StringUtils.trim(version1);
  version2=StringUtils.trim(version2);
  if (version1.indexOf('-') >= 0) {
    version1=version1.substring(0,version1.indexOf('-'));
  }
  if (version2.indexOf('-') >= 0) {
    version2=version2.substring(0,version2.indexOf('-'));
  }
  if (version1.isEmpty()) {
    throw new IllegalArgumentException("version1 cannot be empty");
  }
  if (version2.isEmpty()) {
    throw new IllegalArgumentException("version2 cannot be empty");
  }
  if (maxLengthToCompare < 0) {
    throw new IllegalArgumentException("maxLengthToCompare cannot be less than 0");
  }
  if (BootStrapImpl.DEV_VERSION.equals(version1.trim()))   return 0;
  String[] version1Parts=version1.split("\\.");
  String[] version2Parts=version2.split("\\.");
  int length=Math.max(version1Parts.length,version2Parts.length);
  length=maxLengthToCompare == 0 || maxLengthToCompare > length ? length : maxLengthToCompare;
  List<Integer> stack1Parts=new ArrayList<Integer>();
  List<Integer> stack2Parts=new ArrayList<Integer>();
  for (int i=0; i < length; i++) {
    try {
      int stack1Part=i < version1Parts.length ? Integer.parseInt(version1Parts[i]) : 0;
      stack1Parts.add(stack1Part);
    }
 catch (    NumberFormatException e) {
      stack1Parts.add(0);
    }
    try {
      int stack2Part=i < version2Parts.length ? Integer.parseInt(version2Parts[i]) : 0;
      stack2Parts.add(stack2Part);
    }
 catch (    NumberFormatException e) {
      stack2Parts.add(0);
    }
  }
  length=Math.max(stack1Parts.size(),stack2Parts.size());
  for (int i=0; i < length; i++) {
    Integer stack1Part=stack1Parts.get(i);
    Integer stack2Part=stack2Parts.get(i);
    if (stack1Part < stack2Part) {
      return -1;
    }
    if (stack1Part > stack2Part) {
      return 1;
    }
  }
  return 0;
}
