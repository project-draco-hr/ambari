{
  Injector injector=createInjector();
  PrincipalEntity principalEntity1=createMockPrincipalEntity(1L,createMockPrincipalTypeEntity("USER"));
  ResourceTypeEntity clusterResourceTypeEntity=createMockResourceTypeEntity(ResourceType.CLUSTER);
  ResourceEntity clusterResourceEntity=createMockResourceEntity(1L,clusterResourceTypeEntity);
  PermissionEntity permissionEntity=createMockPermissionEntity("CLUSTER.OPERATOR","Cluster Operator",clusterResourceTypeEntity);
  PrivilegeEntity privilegeEntity1=createMockPrivilegeEntity(1,clusterResourceEntity,principalEntity1,permissionEntity);
  Set<PrivilegeEntity> privilege1Entities=new HashSet<PrivilegeEntity>();
  privilege1Entities.add(privilegeEntity1);
  expect(principalEntity1.getPrivileges()).andReturn(privilege1Entities).atLeastOnce();
  PrivilegeDAO privilegeDAO=injector.getInstance(PrivilegeDAO.class);
  expect(privilegeDAO.findById(1)).andReturn(privilegeEntity1).atLeastOnce();
  privilegeDAO.remove(privilegeEntity1);
  expectLastCall().atLeastOnce();
  PrincipalDAO principalDAO=injector.getInstance(PrincipalDAO.class);
  expect(principalDAO.merge(principalEntity1)).andReturn(principalEntity1).atLeastOnce();
  replayAll();
  SecurityContextHolder.getContext().setAuthentication(authentication);
  ResourceProvider provider=getResourceProvider(injector);
  provider.deleteResources(new RequestImpl(null,null,null,null),createPredicate(1L));
  verifyAll();
}
