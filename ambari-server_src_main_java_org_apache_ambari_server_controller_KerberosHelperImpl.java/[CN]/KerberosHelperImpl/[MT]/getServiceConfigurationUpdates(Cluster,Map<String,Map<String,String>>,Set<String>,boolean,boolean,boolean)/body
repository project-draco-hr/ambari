{
  Map<String,Map<String,String>> kerberosConfigurations=new HashMap<String,Map<String,String>>();
  KerberosDetails kerberosDetails=getKerberosDetails(cluster,null);
  KerberosDescriptor kerberosDescriptor=getKerberosDescriptor(cluster);
  Map<String,String> kerberosDescriptorProperties=kerberosDescriptor.getProperties();
  Map<String,Map<String,String>> configurations=addAdditionalConfigurations(cluster,deepCopy(existingConfigurations),null,kerberosDescriptorProperties);
  Map<String,Set<String>> propertiesToIgnore=new HashMap<String,Set<String>>();
  Map<String,Object> filterContext=new HashMap<String,Object>();
  filterContext.put("configurations",configurations);
  filterContext.put("services",services);
  for (  String serviceName : services) {
    KerberosServiceDescriptor serviceDescriptor=kerberosDescriptor.getService(serviceName);
    if (serviceDescriptor != null) {
      Map<String,KerberosComponentDescriptor> componentDescriptors=serviceDescriptor.getComponents();
      for (      KerberosComponentDescriptor componentDescriptor : componentDescriptors.values()) {
        if (componentDescriptor != null) {
          Map<String,Map<String,String>> identityConfigurations;
          identityConfigurations=getIdentityConfigurations(serviceDescriptor.getIdentities(true,filterContext));
          if (identityConfigurations != null) {
            for (            Map.Entry<String,Map<String,String>> entry : identityConfigurations.entrySet()) {
              String configType=entry.getKey();
              Map<String,String> properties=entry.getValue();
              mergeConfigurations(kerberosConfigurations,configType,entry.getValue(),configurations);
              if ((properties != null) && !properties.isEmpty()) {
                Set<String> propertyNames=propertiesToIgnore.get(configType);
                if (propertyNames == null) {
                  propertyNames=new HashSet<String>();
                  propertiesToIgnore.put(configType,propertyNames);
                }
                propertyNames.addAll(properties.keySet());
              }
            }
          }
          identityConfigurations=getIdentityConfigurations(componentDescriptor.getIdentities(true,filterContext));
          if (identityConfigurations != null) {
            for (            Map.Entry<String,Map<String,String>> entry : identityConfigurations.entrySet()) {
              String configType=entry.getKey();
              Map<String,String> properties=entry.getValue();
              mergeConfigurations(kerberosConfigurations,configType,entry.getValue(),configurations);
              if ((properties != null) && !properties.isEmpty()) {
                Set<String> propertyNames=propertiesToIgnore.get(configType);
                if (propertyNames == null) {
                  propertyNames=new HashSet<String>();
                  propertiesToIgnore.put(configType,propertyNames);
                }
                propertyNames.addAll(properties.keySet());
              }
            }
          }
          mergeConfigurations(kerberosConfigurations,componentDescriptor.getConfigurations(!serviceAlreadyExists),configurations);
        }
      }
    }
  }
  if (kerberosDetails.createAmbariPrincipal()) {
    KerberosIdentityDescriptor ambariServerIdentityDescriptor=kerberosDescriptor.getIdentity(KerberosHelper.AMBARI_IDENTITY_NAME);
    Map<String,Map<String,String>> map=new HashMap<String,Map<String,String>>();
    if (ambariServerIdentityDescriptor != null) {
      KerberosPrincipalDescriptor principalDescriptor=ambariServerIdentityDescriptor.getPrincipalDescriptor();
      if (principalDescriptor != null) {
        putConfiguration(map,principalDescriptor.getConfiguration(),principalDescriptor.getValue());
      }
      KerberosKeytabDescriptor keytabDescriptor=ambariServerIdentityDescriptor.getKeytabDescriptor();
      if (keytabDescriptor != null) {
        putConfiguration(map,keytabDescriptor.getConfiguration(),keytabDescriptor.getFile());
      }
      for (      Map.Entry<String,Map<String,String>> entry : map.entrySet()) {
        String configType=entry.getKey();
        mergeConfigurations(kerberosConfigurations,configType,entry.getValue(),configurations);
      }
    }
  }
  setAuthToLocalRules(kerberosDescriptor,cluster,kerberosDetails.getDefaultRealm(),configurations,kerberosConfigurations);
  return (applyStackAdvisorUpdates) ? applyStackAdvisorUpdates(cluster,cluster.getServices().keySet(),configurations,kerberosConfigurations,propertiesToIgnore,null,new HashMap<String,Set<String>>(),kerberosEnabled) : kerberosConfigurations;
}
