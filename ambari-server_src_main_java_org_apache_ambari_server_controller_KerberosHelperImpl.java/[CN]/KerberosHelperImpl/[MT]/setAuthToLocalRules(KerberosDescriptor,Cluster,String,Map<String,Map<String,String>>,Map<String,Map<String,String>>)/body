{
  boolean processAuthToLocalRules=true;
  Map<String,String> kerberosEnvProperties=existingConfigurations.get("kerberos-env");
  if (kerberosEnvProperties.containsKey("manage_auth_to_local")) {
    processAuthToLocalRules=Boolean.valueOf(kerberosEnvProperties.get("manage_auth_to_local"));
  }
  if (kerberosDescriptor != null && processAuthToLocalRules) {
    Set<String> authToLocalProperties;
    Set<String> authToLocalPropertiesToSet=new HashSet<String>();
    boolean caseInsensitiveUser=Boolean.valueOf(existingConfigurations.get("kerberos-env").get("case_insensitive_username_rules"));
    String additionalRealms=kerberosDescriptor.getProperty("additional_realms");
    AuthToLocalBuilder authToLocalBuilder=new AuthToLocalBuilder(realm,additionalRealms,caseInsensitiveUser);
    addIdentities(authToLocalBuilder,kerberosDescriptor.getIdentities(),null,existingConfigurations);
    authToLocalProperties=kerberosDescriptor.getAuthToLocalProperties();
    if (authToLocalProperties != null) {
      authToLocalPropertiesToSet.addAll(authToLocalProperties);
    }
    Map<String,KerberosServiceDescriptor> services=kerberosDescriptor.getServices();
    if (services != null) {
      Map<String,Service> installedServices=cluster.getServices();
      for (      KerberosServiceDescriptor service : services.values()) {
        if (installedServices.containsKey(service.getName())) {
          Service svc=installedServices.get(service.getName());
          addIdentities(authToLocalBuilder,service.getIdentities(true),null,existingConfigurations);
          authToLocalProperties=service.getAuthToLocalProperties();
          if (authToLocalProperties != null) {
            authToLocalPropertiesToSet.addAll(authToLocalProperties);
          }
          Map<String,KerberosComponentDescriptor> components=service.getComponents();
          if (components != null) {
            Map<String,ServiceComponent> serviceComponents=svc.getServiceComponents();
            for (            KerberosComponentDescriptor component : components.values()) {
              ServiceComponent svcComp=null;
              if (!serviceComponents.containsKey(component.getName()))               continue;
              svcComp=serviceComponents.get(component.getName());
              boolean addSvcCompIdentities=false;
              if (cluster.isBluePrintDeployed()) {
                if (svcComp.getDesiredState() == State.INSTALLED || svcComp.getDesiredState() == State.STARTED)                 addSvcCompIdentities=true;
              }
 else {
                for (                ServiceComponentHost svcCompHost : svcComp.getServiceComponentHosts().values()) {
                  if (svcCompHost.getDesiredState() != State.UNKNOWN && svcCompHost.getDesiredState() != State.UNINSTALLING && svcCompHost.getDesiredState() != State.UNINSTALLED && svcCompHost.getDesiredState() != State.INSTALL_FAILED && svcCompHost.getDesiredState() != State.WIPING_OUT) {
                    addSvcCompIdentities=true;
                    break;
                  }
                }
              }
              if (addSvcCompIdentities) {
                LOG.info("Adding identity for " + component.getName() + " to auth to local mapping");
                addIdentities(authToLocalBuilder,component.getIdentities(true),null,existingConfigurations);
                authToLocalProperties=component.getAuthToLocalProperties();
                if (authToLocalProperties != null) {
                  authToLocalPropertiesToSet.addAll(authToLocalProperties);
                }
              }
            }
          }
        }
      }
    }
    if (!authToLocalPropertiesToSet.isEmpty()) {
      for (      String authToLocalProperty : authToLocalPropertiesToSet) {
        Matcher m=KerberosDescriptor.AUTH_TO_LOCAL_PROPERTY_SPECIFICATION_PATTERN.matcher(authToLocalProperty);
        if (m.matches()) {
          AuthToLocalBuilder builder;
          try {
            builder=(AuthToLocalBuilder)authToLocalBuilder.clone();
          }
 catch (          CloneNotSupportedException e) {
            LOG.error("Failed to clone the AuthToLocalBuilder: " + e.getLocalizedMessage(),e);
            throw new AmbariException("Failed to clone the AuthToLocalBuilder: " + e.getLocalizedMessage(),e);
          }
          String configType=m.group(1);
          String propertyName=m.group(2);
          if (configType == null) {
            configType="";
          }
          Map<String,String> existingConfiguration=existingConfigurations.get(configType);
          if (existingConfiguration != null) {
            builder.addRules(existingConfiguration.get(propertyName));
          }
          Map<String,String> kerberosConfiguration=kerberosConfigurations.get(configType);
          if (kerberosConfiguration != null) {
            builder.addRules(kerberosConfiguration.get(propertyName));
          }
 else {
            kerberosConfiguration=new HashMap<String,String>();
            kerberosConfigurations.put(configType,kerberosConfiguration);
          }
          kerberosConfiguration.put(propertyName,builder.generate(AuthToLocalBuilder.ConcatenationType.translate(m.group(3))));
        }
      }
    }
  }
}
