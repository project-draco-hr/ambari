{
  StackId stackVersion=cluster.getCurrentStackVersion();
  List<String> hostNames=new ArrayList<String>();
  Collection<Host> hosts=cluster.getHosts();
  if (hosts != null) {
    for (    Host host : hosts) {
      hostNames.add(host.getHostName());
    }
  }
  if (!hostNames.isEmpty()) {
    Map<String,Map<String,Map<String,String>>> requestConfigurations=new HashMap<String,Map<String,Map<String,String>>>();
    if (existingConfigurations != null) {
      for (      Map.Entry<String,Map<String,String>> configuration : existingConfigurations.entrySet()) {
        Map<String,Map<String,String>> properties=new HashMap<String,Map<String,String>>();
        String configType=configuration.getKey();
        Map<String,String> configurationProperties=configuration.getValue();
        if (configurationProperties == null) {
          configurationProperties=Collections.emptyMap();
        }
        if ("cluster-env".equals(configType)) {
          configurationProperties=new HashMap<String,String>(configurationProperties);
          configurationProperties.put("security_enabled",(kerberosEnabled) ? "true" : "false");
        }
        properties.put("properties",configurationProperties);
        requestConfigurations.put(configType,properties);
      }
    }
    for (    Map.Entry<String,Map<String,String>> configuration : kerberosConfigurations.entrySet()) {
      String configType=configuration.getKey();
      Map<String,String> configurationProperties=configuration.getValue();
      if ((configurationProperties != null) && !configurationProperties.isEmpty()) {
        Map<String,Map<String,String>> requestConfiguration=requestConfigurations.get(configType);
        if (requestConfiguration == null) {
          requestConfiguration=new HashMap<String,Map<String,String>>();
          requestConfigurations.put(configType,requestConfiguration);
        }
        Map<String,String> requestConfigurationProperties=requestConfiguration.get("properties");
        if (requestConfigurationProperties == null) {
          requestConfigurationProperties=new HashMap<String,String>();
        }
 else {
          requestConfigurationProperties=new HashMap<String,String>(requestConfigurationProperties);
        }
        requestConfigurationProperties.putAll(configurationProperties);
        requestConfiguration.put("properties",requestConfigurationProperties);
      }
    }
    StackAdvisorRequest request=StackAdvisorRequest.StackAdvisorRequestBuilder.forStack(stackVersion.getStackName(),stackVersion.getStackVersion()).forServices(new ArrayList<String>(services)).forHosts(hostNames).withConfigurations(requestConfigurations).ofType(StackAdvisorRequest.StackAdvisorRequestType.CONFIGURATIONS).build();
    try {
      RecommendationResponse response=stackAdvisorHelper.recommend(request);
      RecommendationResponse.Recommendation recommendation=(response == null) ? null : response.getRecommendations();
      RecommendationResponse.Blueprint blueprint=(recommendation == null) ? null : recommendation.getBlueprint();
      Map<String,RecommendationResponse.BlueprintConfigurations> configurations=(blueprint == null) ? null : blueprint.getConfigurations();
      if (configurations != null) {
        for (        Map.Entry<String,RecommendationResponse.BlueprintConfigurations> configuration : configurations.entrySet()) {
          String configType=configuration.getKey();
          Map<String,String> recommendedConfigProperties=configuration.getValue().getProperties();
          Map<String,String> existingConfigProperties=(existingConfigurations == null) ? null : existingConfigurations.get(configType);
          Map<String,String> kerberosConfigProperties=kerberosConfigurations.get(configType);
          Set<String> ignoreProperties=(propertiesToIgnore == null) ? null : propertiesToIgnore.get(configType);
          for (          Map.Entry<String,String> property : recommendedConfigProperties.entrySet()) {
            String propertyName=property.getKey();
            if ((ignoreProperties == null) || !ignoreProperties.contains(propertyName)) {
              String recommendedValue=property.getValue();
              if (kerberosConfigProperties == null) {
                if ((existingConfigProperties == null) || !existingConfigProperties.containsKey(propertyName)) {
                  LOG.debug("Adding Kerberos configuration based on StackAdvisor recommendation:" + "\n\tConfigType: {}\n\tProperty: {}\n\tValue: {}",configType,propertyName,recommendedValue);
                  HashMap<String,String> properties=new HashMap<String,String>();
                  properties.put(propertyName,recommendedValue);
                  kerberosConfigurations.put(configType,properties);
                }
              }
 else {
                String value=kerberosConfigProperties.get(propertyName);
                if (value == null) {
                  if ((existingConfigProperties == null) || !existingConfigProperties.containsKey(propertyName)) {
                    LOG.debug("Adding Kerberos configuration based on StackAdvisor recommendation:" + "\n\tConfigType: {}\n\tProperty: {}\n\tValue: {}",configType,propertyName,recommendedValue);
                    kerberosConfigProperties.put(propertyName,recommendedValue);
                  }
                }
 else                 if (!value.equals(recommendedValue)) {
                  LOG.debug("Updating Kerberos configuration based on StackAdvisor recommendation:" + "\n\tConfigType: {}\n\tProperty: {}\n\tOld Value: {}\n\tNew Value: {}",configType,propertyName,value,recommendedValue);
                  kerberosConfigProperties.put(propertyName,recommendedValue);
                }
              }
            }
          }
        }
      }
    }
 catch (    Exception e) {
      throw new AmbariException(e.getMessage(),e);
    }
  }
  return kerberosConfigurations;
}
