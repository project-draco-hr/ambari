{
  boolean processAuthToLocalRules=true;
  Map<String,String> kerberosEnvProperties=existingConfigurations.get("kerberos-env");
  if (kerberosEnvProperties.containsKey("manage_auth_to_local")) {
    processAuthToLocalRules=Boolean.valueOf(kerberosEnvProperties.get("manage_auth_to_local"));
  }
  if (kerberosDescriptor != null && processAuthToLocalRules) {
    Set<String> authToLocalProperties;
    Set<String> authToLocalPropertiesToSet=new HashSet<String>();
    boolean caseInsensitiveUser=Boolean.valueOf(existingConfigurations.get("kerberos-env").get("case_insensitive_username_rules"));
    String additionalRealms=kerberosDescriptor.getProperty("additional_realms");
    Map<String,Object> filterContext=new HashMap<String,Object>();
    filterContext.put("configurations",existingConfigurations);
    filterContext.put("services",installedServices.keySet());
    AuthToLocalBuilder authToLocalBuilder=new AuthToLocalBuilder(realm,additionalRealms,caseInsensitiveUser);
    addIdentities(authToLocalBuilder,kerberosDescriptor.getIdentities(true,filterContext),null,existingConfigurations);
    authToLocalProperties=kerberosDescriptor.getAuthToLocalProperties();
    if (authToLocalProperties != null) {
      authToLocalPropertiesToSet.addAll(authToLocalProperties);
    }
    for (    Map.Entry<String,Set<String>> installedService : installedServices.entrySet()) {
      String serviceName=installedService.getKey();
      KerberosServiceDescriptor serviceDescriptor=kerberosDescriptor.getService(serviceName);
      if (serviceDescriptor != null) {
        LOG.info("Adding identities for service {} to auth to local mapping",installedService);
        addIdentities(authToLocalBuilder,serviceDescriptor.getIdentities(true,filterContext),null,existingConfigurations);
        authToLocalProperties=serviceDescriptor.getAuthToLocalProperties();
        if (authToLocalProperties != null) {
          authToLocalPropertiesToSet.addAll(authToLocalProperties);
        }
        Set<String> installedComponents=installedService.getValue();
        if (installedComponents != null) {
          for (          String installedComponent : installedComponents) {
            KerberosComponentDescriptor componentDescriptor=serviceDescriptor.getComponent(installedComponent);
            if (componentDescriptor != null) {
              LOG.info("Adding identities for component {} to auth to local mapping",installedComponent);
              addIdentities(authToLocalBuilder,componentDescriptor.getIdentities(true,filterContext),null,existingConfigurations);
              authToLocalProperties=componentDescriptor.getAuthToLocalProperties();
              if (authToLocalProperties != null) {
                authToLocalPropertiesToSet.addAll(authToLocalProperties);
              }
            }
          }
        }
      }
    }
    if (!authToLocalPropertiesToSet.isEmpty()) {
      for (      String authToLocalProperty : authToLocalPropertiesToSet) {
        Matcher m=KerberosDescriptor.AUTH_TO_LOCAL_PROPERTY_SPECIFICATION_PATTERN.matcher(authToLocalProperty);
        if (m.matches()) {
          AuthToLocalBuilder builder;
          try {
            builder=(AuthToLocalBuilder)authToLocalBuilder.clone();
          }
 catch (          CloneNotSupportedException e) {
            LOG.error("Failed to clone the AuthToLocalBuilder: " + e.getLocalizedMessage(),e);
            throw new AmbariException("Failed to clone the AuthToLocalBuilder: " + e.getLocalizedMessage(),e);
          }
          String configType=m.group(1);
          String propertyName=m.group(2);
          if (configType == null) {
            configType="";
          }
          Map<String,String> existingConfiguration=existingConfigurations.get(configType);
          if (existingConfiguration != null) {
            builder.addRules(existingConfiguration.get(propertyName));
          }
          Map<String,String> kerberosConfiguration=kerberosConfigurations.get(configType);
          if (kerberosConfiguration != null) {
            builder.addRules(kerberosConfiguration.get(propertyName));
          }
 else {
            kerberosConfiguration=new HashMap<String,String>();
            kerberosConfigurations.put(configType,kerberosConfiguration);
          }
          kerberosConfiguration.put(propertyName,builder.generate(AuthToLocalBuilder.ConcatenationType.translate(m.group(3))));
        }
      }
    }
  }
}
