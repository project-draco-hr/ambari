def reach_safemode_state(user, safemode_state, in_ha):
    '\n  Enter or leave safemode for the Namenode.\n  @param user: user to perform action as\n  @param safemode_state: Desired state of ON or OFF\n  @param in_ha: bool indicating if Namenode High Availability is enabled\n  @:return Returns a tuple of (transition success, original state). If no change is needed, the indicator of\n  success will be True\n  '
    Logger.info(('Prepare to transition into safemode state %s' % safemode_state))
    import params
    original_state = SafeMode.UNKNOWN
    hostname = params.hostname
    safemode_check = format("su - {user} -c 'hdfs dfsadmin -safemode get'")
    grep_pattern = (format('Safe mode is {safemode_state} in {hostname}') if in_ha else format('Safe mode is {safemode_state}'))
    safemode_check_with_grep = format('su - {user} -c \'hdfs dfsadmin -safemode get | grep "{grep_pattern}"\'')
    (code, out) = call(safemode_check)
    Logger.info(('Command: %s\nCode: %d.' % (safemode_check, code)))
    if ((code == 0) and (out is not None)):
        Logger.info(out)
        re_pattern = (('Safe mode is (\\S*) in ' + hostname.replace('.', '\\.')) if in_ha else 'Safe mode is (\\S*)')
        m = re.search(re_pattern, out, re.IGNORECASE)
        if (m and (len(m.groups()) >= 1)):
            original_state = m.group(1).upper()
            if (original_state == safemode_state):
                return (True, original_state)
            else:
                command = ('hdfs dfsadmin -safemode %s' % safemode_to_instruction[safemode_state])
                Execute(command, user=user, logoutput=True, path=[params.hadoop_bin_dir])
                (code, out) = call(safemode_check_with_grep)
                Logger.info(('Command: %s\nCode: %d. Out: %s' % (safemode_check_with_grep, code, out)))
                if (code == 0):
                    return (True, original_state)
    return (False, original_state)
