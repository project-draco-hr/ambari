def reach_safemode_state(user, safemode_state, in_ha, hdfs_binary):
    '\n  Enter or leave safemode for the Namenode.\n  :param user: user to perform action as\n  :param safemode_state: Desired state of ON or OFF\n  :param in_ha: bool indicating if Namenode High Availability is enabled\n  :param hdfs_binary: name/path of the HDFS binary to use\n  :return: Returns a tuple of (transition success, original state). If no change is needed, the indicator of\n  success will be True\n  '
    Logger.info(('Prepare to transition into safemode state %s' % safemode_state))
    import params
    original_state = SafeMode.UNKNOWN
    dfsadmin_base_command = get_dfsadmin_base_command(hdfs_binary)
    safemode_base_command = (dfsadmin_base_command + ' -safemode ')
    safemode_check_cmd = (safemode_base_command + ' get')
    grep_pattern = format('Safe mode is {safemode_state}')
    safemode_check_with_grep = format("{safemode_check_cmd} | grep '{grep_pattern}'")
    (code, out) = shell.call(safemode_check_cmd, user=user, logoutput=True)
    Logger.info(('Command: %s\nCode: %d.' % (safemode_check_cmd, code)))
    if ((code == 0) and (out is not None)):
        Logger.info(out)
        re_pattern = 'Safe mode is (\\S*)'
        Logger.info('Pattern to search: {0}'.format(re_pattern))
        m = re.search(re_pattern, out, re.IGNORECASE)
        if (m and (len(m.groups()) >= 1)):
            original_state = m.group(1).upper()
            if (original_state == safemode_state):
                return (True, original_state)
            else:
                command = (safemode_base_command + safemode_to_instruction[safemode_state])
                Execute(command, user=user, logoutput=True, path=[params.hadoop_bin_dir])
                (code, out) = shell.call(safemode_check_with_grep, user=user)
                Logger.info(('Command: %s\nCode: %d. Out: %s' % (safemode_check_with_grep, code, out)))
                if (code == 0):
                    return (True, original_state)
    return (False, original_state)
