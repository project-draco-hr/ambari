def prepare_rolling_upgrade(hdfs_binary):
    '\n  This can be called during either Rolling Upgrade or Express Upgrade (aka nonrolling)\n\n  Rolling Upgrade for HDFS Namenode requires the following.\n  0. Namenode must be up\n  1. If HA: leave safemode if the safemode status is not OFF\n  2. Execute a rolling upgrade "prepare"\n  3. Execute a rolling upgrade "query"\n  :param hdfs_binary: name/path of the HDFS binary to use\n  '
    import params
    if ((not params.upgrade_direction) or (params.upgrade_direction not in [Direction.UPGRADE, Direction.DOWNGRADE])):
        raise Fail(('Could not retrieve upgrade direction: %s' % str(params.upgrade_direction)))
    Logger.info(format('Performing a(n) {params.upgrade_direction} of HDFS'))
    if params.security_enabled:
        kinit_command = format('{params.kinit_path_local} -kt {params.hdfs_user_keytab} {params.hdfs_principal_name}')
        Execute(kinit_command, user=params.hdfs_user, logoutput=True)
    if (params.upgrade_direction == Direction.UPGRADE):
        if params.dfs_ha_enabled:
            Logger.info('High Availability is enabled, must leave safemode before calling "-rollingUpgrade prepare"')
            desired_state = SafeMode.OFF
            (safemode_transition_successful, original_state) = reach_safemode_state(params.hdfs_user, desired_state, True, hdfs_binary)
            if (not safemode_transition_successful):
                raise Fail(('Could not transition to safemode state %s. Please check logs to make sure namenode is up.' % str(desired_state)))
        dfsadmin_base_command = get_dfsadmin_base_command(hdfs_binary)
        prepare = (dfsadmin_base_command + ' -rollingUpgrade prepare')
        query = (dfsadmin_base_command + ' -rollingUpgrade query')
        Execute(prepare, user=params.hdfs_user, logoutput=True)
        Execute(query, user=params.hdfs_user, logoutput=True)
