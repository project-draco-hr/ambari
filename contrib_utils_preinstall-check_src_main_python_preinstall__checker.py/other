'\nLicensed to the Apache Software Foundation (ASF) under one\nor more contributor license agreements.  See the NOTICE file\ndistributed with this work for additional information\nregarding copyright ownership.  The ASF licenses this file\nto you under the Apache License, Version 2.0 (the\n"License"); you may not use this file except in compliance\nwith the License.  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n'
import uuid
import datetime
import time
import json
import logging
import optparse
import shutil
import sys
import subprocess
import os.path
import socket
logger = logging.getLogger('Precheck')
has_warnings = False
has_errors = False
HTTP_REQUEST_GET = 'GET'
HTTP_REQUEST_POST = 'POST'
HTTP_REQUEST_DELETE = 'DELETE'
HTTP_OK = 200
HTTP_CREATED = 201
HTTP_BAD_REQUEST = 400
HTTP_FORBIDDEN = 403
HTTP_CONFLICT = 409
EXIT_MESSAGE = 'Make sure to provide correct cluster information including port, admin user name and password. Default values will be used if you omit the command parameters.'
DEFAULT_HTTP_PORT = 8080
DEFAULT_ADMIN_USER = 'admin'
DEFAULT_LOG_DIR = '/tmp/preinstall_checks'
DEFAULT_LOG_FILE = 'preinstall_checks.log'
DEFAULT_HTTP_REQUEST_TYPE = HTTP_REQUEST_GET
DEFAULT_AMBARI_SERVER_PROPERTIES = '/etc/ambari-server/conf/ambari.properties'
DEFAULT_MAX_COUNTER = 4
DEFAULT_TIMER_LONG = 5
DEFAULT_POLLING_TIMER_REQUEST = 10
DEFAULT_MINDISKSPACE = 2.0
DEFAULT_MINDISKSPACEUSRLIB = 1.0
OPERATION_HOST_CHECK = 'host_check'
OPERATION_VALIDATE_BLUEPRINT = 'validate_blueprint'
OPERATIONS = [OPERATION_HOST_CHECK, OPERATION_VALIDATE_BLUEPRINT]
CODE_SUCCESS = 0
CODE_ERROR = 1
CODE_WARNING = 2
CODE_CONNECTION_REFUSED = 7
LABEL_OK = '[   OK  ]'
LABEL_WARNING = '[WARNING]'
LABEL_ERROR = '[ ERROR ]'
STATUS_ACCEPTED = 'Accepted'
STATUS_COMPLETED = 'COMPLETED'
STATUS_PASSED = 'PASSED'
STATUS_WARNING = 'FAILED'
STATUS_FAILED = 'WARNING'
STATUS_ABORTED = 'ABORTED'
STATUS_IN_PROGRESS = 'IN_PROGRESS'
STATUS_PENDING = 'PENDING'
LIST_FINISHED_REQUEST_STATUS = [STATUS_FAILED, STATUS_COMPLETED, STATUS_ABORTED]
'\nValidate parameters passed in from the command line.\nExit if there are validation errors.\n'
'\nBack up log directory if it already exists.\n'
'\nRetrieve property value from Ambari Server properties file.\n'
'\nSubmit REST API to Ambari Server\n'
'\nDetermine if Ambari Server responded with an error message for the REST API call\n'
'\nDetermine if Ambari Server has accepted the REST API call\n'
'\nDetermine if the request is finished\n'
'\nCheck request status based on the time interval\n'
'\nSummarize results of all the tasks executed in the request\n'
'\nCheck if the script can log in Ambari Server REST API via user and password provided\n'
'\nCheck if the script can log in Ambari Server REST API via user and password provided\n'
'\nObtain a list of Ambari Agents registered to the host via a REST API call\n'
'\nRun host checks\n'
'\nHost name resolution check\n'
'\nJava home path check\n'
'\nAgent last enviornment check\n'
'\nExecute the operation passed in from the command line\n'
if (__name__ == '__main__'):
    try:
        main()
    except (KeyboardInterrupt, EOFError):
        print 'Aborting ... Keyboard Interrupt.'
        sys.exit(1)
