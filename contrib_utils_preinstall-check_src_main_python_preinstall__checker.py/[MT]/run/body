def run(options):
    global has_warnings
    global has_errors
    server_url = get_server_url(options.port)
    label_check = 'Ambari server reachable by user credentials'
    step(label_check)
    (out, ec) = server_reachable_by_credentials_with_retry(server_url, options.user, options.password)
    if (CODE_SUCCESS == ec):
        print_check_result(label_check, ['Ambari server reachable via {0}'.format(server_url)], ec)
    elif (CODE_ERROR == ec):
        print_check_result(label_check, ['Failed to establish connection to {0}.'.format(server_url)], ec)
        return ec
    elif (HTTP_FORBIDDEN == ec):
        print_check_result(label_check, ['Wrong credentials provided.'], ec)
        return ec
    agents = get_ambari_agent_nodes(server_url, options.user, options.password)
    logger.info('Total number of agents {0}'.format(len(agents)))
    if (not agents):
        logger.error('No Ambari Agent registered to the Ambari Server. Install Ambari Agent first.')
        return CODE_ERROR
    if (OPERATION_HOST_CHECK == options.operation):
        run_host_checks(options, agents, server_url)
        run_java_home_checks(options, agents, server_url)
        run_agent_checks(options, agents, server_url)
    elif (OPERATION_VALIDATE_BLUEPRINT == options.operation):
        run_validate_blueprint(options, server_url)
    if has_errors:
        logger.info('')
        logger.error('Checks finished with errors')
        return CODE_ERROR
    elif has_warnings:
        logger.info('')
        logger.warning('Checks finished with warnings')
        return CODE_WARNING
    else:
        logger.info('')
        logger.info('Checks finished')
        return CODE_SUCCESS
