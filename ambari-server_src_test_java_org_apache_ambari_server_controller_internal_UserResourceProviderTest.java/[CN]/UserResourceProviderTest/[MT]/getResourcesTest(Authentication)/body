{
  Injector injector=createInjector();
  Users users=injector.getInstance(Users.class);
  if ("admin".equals(authentication.getName())) {
    List<User> allUsers=Arrays.asList(createMockUser("User1"),createMockUser("User10"),createMockUser("User100"),createMockUser("admin"));
    expect(users.getAllUsers()).andReturn(allUsers).atLeastOnce();
  }
 else {
    expect(users.getAnyUser("User1")).andReturn(createMockUser("User1")).atLeastOnce();
  }
  replayAll();
  AmbariMetaInfo ambariMetaInfo=injector.getInstance(AmbariMetaInfo.class);
  ambariMetaInfo.init();
  SecurityContextHolder.getContext().setAuthentication(authentication);
  AmbariManagementController managementController=injector.getInstance(AmbariManagementController.class);
  ResourceProvider provider=getResourceProvider(managementController);
  Set<String> propertyIds=new HashSet<String>();
  propertyIds.add(UserResourceProvider.USER_USERNAME_PROPERTY_ID);
  propertyIds.add(UserResourceProvider.USER_PASSWORD_PROPERTY_ID);
  Request request=PropertyHelper.getReadRequest(propertyIds);
  Set<Resource> resources=provider.getResources(request,null);
  if ("admin".equals(authentication.getName())) {
    List<String> expectedList=Arrays.asList("User1","User10","User100","admin");
    Assert.assertEquals(4,resources.size());
    for (    Resource resource : resources) {
      String userName=(String)resource.getPropertyValue(UserResourceProvider.USER_USERNAME_PROPERTY_ID);
      Assert.assertTrue(expectedList.contains(userName));
    }
  }
 else {
    Assert.assertEquals(1,resources.size());
    for (    Resource resource : resources) {
      Assert.assertEquals("User1",resource.getPropertyValue(UserResourceProvider.USER_USERNAME_PROPERTY_ID));
    }
  }
  verifyAll();
}
