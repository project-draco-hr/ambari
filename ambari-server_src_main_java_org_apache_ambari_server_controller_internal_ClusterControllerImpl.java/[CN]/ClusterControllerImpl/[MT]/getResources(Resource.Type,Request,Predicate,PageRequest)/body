{
  ResourceProvider provider=ensureResourceProvider(type);
  ensurePropertyProviders(type);
  Set<Resource> resources;
  ResourcePredicateEvaluator evaluator=provider instanceof ResourcePredicateEvaluator ? (ResourcePredicateEvaluator)provider : DEFAULT_RESOURCE_PREDICATE_EVALUATOR;
  if (provider == null) {
    resources=Collections.emptySet();
  }
 else {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Using resource provider " + provider.getClass().getName() + " for request type "+ type.toString());
    }
    checkProperties(type,request,predicate);
    Set<Resource> providerResources=provider.getResources(request,predicate);
    providerResources=populateResources(type,providerResources,request,predicate);
    Comparator<Resource> resourceComparator=pageRequest == null || pageRequest.getComparator() == null ? comparator : pageRequest.getComparator();
    TreeSet<Resource> sortedResources=new TreeSet<Resource>(resourceComparator);
    sortedResources.addAll(providerResources);
    if (pageRequest != null) {
switch (pageRequest.getStartingPoint()) {
case Beginning:
        return getPageFromOffset(pageRequest.getPageSize(),0,sortedResources,predicate,evaluator);
case End:
      return getPageToOffset(pageRequest.getPageSize(),-1,sortedResources,predicate,evaluator);
case OffsetStart:
    return getPageFromOffset(pageRequest.getPageSize(),pageRequest.getOffset(),sortedResources,predicate,evaluator);
case OffsetEnd:
  return getPageToOffset(pageRequest.getPageSize(),pageRequest.getOffset(),sortedResources,predicate,evaluator);
}
}
resources=sortedResources;
}
return new PageResponseImpl(new ResourceIterable(resources,predicate,evaluator),0,null,null);
}
