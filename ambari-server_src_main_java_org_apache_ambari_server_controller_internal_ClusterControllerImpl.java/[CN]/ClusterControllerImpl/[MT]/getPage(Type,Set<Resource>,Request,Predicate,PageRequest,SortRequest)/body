{
  Set<Resource> resources;
  ResourceProvider provider=ensureResourceProvider(type);
  ResourcePredicateEvaluator evaluator=provider instanceof ResourcePredicateEvaluator ? (ResourcePredicateEvaluator)provider : DEFAULT_RESOURCE_PREDICATE_EVALUATOR;
  int totalCount=0;
  if (!providerResources.isEmpty()) {
    Comparator<Resource> resourceComparator=comparator;
    if (sortRequest != null) {
      checkSortRequestProperties(sortRequest,type,provider);
      resourceComparator=new ResourceComparator(sortRequest);
    }
    TreeSet<Resource> sortedResources=new TreeSet<Resource>(resourceComparator);
    sortedResources.addAll(providerResources);
    totalCount=sortedResources.size();
    if (pageRequest != null) {
switch (pageRequest.getStartingPoint()) {
case Beginning:
        return getPageFromOffset(pageRequest.getPageSize(),0,sortedResources,predicate,evaluator);
case End:
      return getPageToOffset(pageRequest.getPageSize(),-1,sortedResources,predicate,evaluator);
case OffsetStart:
    return getPageFromOffset(pageRequest.getPageSize(),pageRequest.getOffset(),sortedResources,predicate,evaluator);
case OffsetEnd:
  return getPageToOffset(pageRequest.getPageSize(),pageRequest.getOffset(),sortedResources,predicate,evaluator);
}
}
resources=sortedResources;
}
 else {
resources=providerResources;
totalCount=providerResources.size();
}
return new PageResponseImpl(new ResourceIterable(resources,predicate,evaluator),0,null,null,totalCount);
}
