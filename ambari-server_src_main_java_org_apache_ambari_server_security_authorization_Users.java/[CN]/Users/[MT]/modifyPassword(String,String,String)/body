{
  SecurityContext securityContext=SecurityContextHolder.getContext();
  String currentUserName=securityContext.getAuthentication().getName();
  if (currentUserName == null) {
    throw new AmbariException("Authentication required. Please sign in.");
  }
  UserEntity currentUserEntity=userDAO.findLocalUserByName(currentUserName);
  boolean isLdapUser=false;
  if (currentUserEntity == null) {
    currentUserEntity=userDAO.findLdapUserByName(currentUserName);
    try {
      ldapAuthenticationProvider.authenticate(new UsernamePasswordAuthenticationToken(currentUserName,currentUserPassword));
      isLdapUser=true;
    }
 catch (    InvalidUsernamePasswordCombinationException ex) {
      throw new AmbariException(ex.getMessage());
    }
  }
  boolean isCurrentUserAdmin=false;
  for (  PrivilegeEntity privilegeEntity : currentUserEntity.getPrincipal().getPrivileges()) {
    if (privilegeEntity.getPermission().getPermissionName().equals(PermissionEntity.AMBARI_ADMINISTRATOR_PERMISSION_NAME)) {
      isCurrentUserAdmin=true;
      break;
    }
  }
  UserEntity userEntity=userDAO.findLocalUserByName(userName);
  if ((userEntity != null) && (currentUserEntity != null)) {
    if (!isCurrentUserAdmin && !userName.equals(currentUserName)) {
      throw new AmbariException("You can't change password of another user");
    }
    if ((isLdapUser && isCurrentUserAdmin) || (StringUtils.isNotEmpty(currentUserPassword) && passwordEncoder.matches(currentUserPassword,currentUserEntity.getUserPassword()))) {
      userEntity.setUserPassword(passwordEncoder.encode(newPassword));
      userDAO.merge(userEntity);
    }
 else {
      throw new AmbariException("Wrong current password provided");
    }
  }
 else {
    userEntity=userDAO.findLdapUserByName(userName);
    if (userEntity != null) {
      throw new AmbariException("Password of LDAP user cannot be modified");
    }
 else {
      throw new AmbariException("User " + userName + " not found");
    }
  }
}
