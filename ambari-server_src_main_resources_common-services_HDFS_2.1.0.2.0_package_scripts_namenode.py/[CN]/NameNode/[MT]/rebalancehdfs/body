def rebalancehdfs(self, env):
    import params
    env.set_params(params)
    name_node_parameters = json.loads(params.name_node_params)
    threshold = name_node_parameters['threshold']
    _print(('Starting balancer with threshold = %s\n' % threshold))

    def calculateCompletePercent(first, current):
        return (1.0 - (current.bytesLeftToMove / first.bytesLeftToMove))

    def startRebalancingProcess(threshold):
        rebalanceCommand = format('hdfs --config {hadoop_conf_dir} balancer -threshold {threshold}')
        return as_user(rebalanceCommand, params.hdfs_user, env={'PATH': params.hadoop_bin_dir, })
    command = startRebalancingProcess(threshold)
    basedir = os.path.join(env.config.basedir, 'scripts')
    if (threshold == 'DEBUG'):
        basedir = os.path.join(env.config.basedir, 'scripts', 'balancer-emulator')
        command = ['python', 'hdfs-command.py']
    _print(('Executing command %s\n' % command))
    parser = hdfs_rebalance.HdfsParser()
    proc = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True, close_fds=True, cwd=basedir)
    for line in iter(proc.stdout.readline, ''):
        _print(('[balancer] %s %s' % (str(datetime.now()), line)))
        pl = parser.parseLine(line)
        if pl:
            res = pl.toJson()
            res['completePercent'] = calculateCompletePercent(parser.initialLine, pl)
            self.put_structured_out(res)
        elif (parser.state == 'PROCESS_FINISED'):
            _print(('[balancer] %s %s' % (str(datetime.now()), 'Process is finished')))
            self.put_structured_out({'completePercent': 1, })
            break
    proc.stdout.close()
    proc.wait()
    if ((proc.returncode != None) and (proc.returncode != 0)):
        raise Fail('Hdfs rebalance process exited with error. See the log output')
