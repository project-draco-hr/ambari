def post_upgrade_check():
    '\n  Ensure all journal nodes are up and quorum is established during Rolling Upgrade.\n  :return:\n  '
    import params
    Logger.info('Ensuring Journalnode quorum is established')
    if params.security_enabled:
        Execute(params.jn_kinit_cmd, user=params.hdfs_user)
    time.sleep(5)
    hdfs_roll_edits()
    time.sleep(5)
    all_journal_node_hosts = default('/clusterHostInfo/journalnode_hosts', [])
    if (len(all_journal_node_hosts) < 3):
        raise Fail('Need at least 3 Journalnodes to maintain a quorum')
    try:
        namenode_ha = namenode_ha_state.NamenodeHAState()
    except ValueError as err:
        raise Fail(('Could not retrieve Namenode HA addresses. Error: ' + str(err)))
    Logger.info(str(namenode_ha))
    nn_address = namenode_ha.get_address(NAMENODE_STATE.ACTIVE)
    nn_data = utils.get_jmx_data(nn_address, 'org.apache.hadoop.hdfs.server.namenode.FSNamesystem', 'JournalTransactionInfo', namenode_ha.is_encrypted(), params.security_enabled)
    if (not nn_data):
        raise Fail('Could not retrieve JournalTransactionInfo from JMX')
    try:
        last_txn_id = int(nn_data['LastAppliedOrWrittenTxId'])
        success = ensure_jns_have_new_txn(all_journal_node_hosts, last_txn_id)
        if (not success):
            raise Fail('Could not ensure that all Journal nodes have a new log transaction id')
    except KeyError:
        raise Fail('JournalTransactionInfo does not have key LastAppliedOrWrittenTxId from JMX info')
