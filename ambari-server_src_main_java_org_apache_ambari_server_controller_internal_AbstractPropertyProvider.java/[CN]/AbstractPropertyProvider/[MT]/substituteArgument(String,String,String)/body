{
  int argStart=propertyId.indexOf(argName);
  String value=val == null ? "" : val;
  if (argStart > -1) {
    String argSegment=propertyId.substring(argStart);
    Matcher matcher=CHECK_FOR_METRIC_ARGUMENT_METHODS_REGEX.matcher(argSegment);
    if (matcher.find()) {
      argName=argSegment.substring(matcher.start(),matcher.end());
      matcher=FIND_ARGUMENT_METHOD_REGEX.matcher(argName);
      while (matcher.find()) {
        int openParenIndex=argName.indexOf('(',matcher.start());
        int closeParenIndex=indexOfClosingParenthesis(argName,openParenIndex);
        String methodName=argName.substring(matcher.start() + 1,openParenIndex);
        String args=argName.substring(openParenIndex + 1,closeParenIndex);
        List<Object> argList=new LinkedList<Object>();
        List<Class<?>> paramTypes=new LinkedList<Class<?>>();
        Matcher argMatcher=FIND_ARGUMENT_METHOD_ARGUMENTS_REGEX.matcher(args);
        while (argMatcher.find()) {
          addArgument(args,argMatcher.start(),argMatcher.end(),argList,paramTypes);
        }
        try {
          value=invokeArgumentMethod(value,methodName,argList,paramTypes);
        }
 catch (        Exception e) {
          throw new IllegalArgumentException("Can't apply method " + methodName + " for argument "+ argName+ " in "+ propertyId,e);
        }
      }
      if (value.equals(val)) {
        return propertyId;
      }
    }
    return propertyId.replace(argName,value);
  }
  throw new IllegalArgumentException("Can't substitute " + val + "  for argument "+ argName+ " in "+ propertyId);
}
