{
  String regexKey=null;
  Map.Entry<String,Pattern> regexEntry=getRegexEntry(propertyId);
  if (null != regexEntry) {
    regexKey=regexEntry.getKey();
  }
  if (!componentMetricMap.containsKey(propertyId) && regexKey != null && !regexKey.equals(propertyId)) {
    PropertyInfo propertyInfo=componentMetricMap.get(regexKey);
    if (propertyInfo != null) {
      List<String> regexGroups=getRegexGroups(regexKey,propertyId);
      String key=propertyInfo.getPropertyId();
      for (      String regexGroup : regexGroups) {
        regexGroup=regexGroup.replace("/",".");
        key=key.replaceFirst(FIND_REGEX_IN_METRIC_REGEX,regexGroup);
      }
      PropertyInfo compPropertyInfo=new PropertyInfo(key,propertyInfo.isTemporal(),propertyInfo.isPointInTime());
      compPropertyInfo.setAmsHostMetric(propertyInfo.isAmsHostMetric());
      compPropertyInfo.setAmsId(propertyInfo.getAmsId());
      componentMetricMap.put(propertyId,compPropertyInfo);
    }
  }
}
