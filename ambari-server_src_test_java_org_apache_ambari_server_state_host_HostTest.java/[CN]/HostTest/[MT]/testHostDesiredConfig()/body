{
  AmbariMetaInfo metaInfo=injector.getInstance(AmbariMetaInfo.class);
  metaInfo.init();
  clusters.addCluster("c1");
  Cluster c1=clusters.getCluster("c1");
  StackId stackId=new StackId("HDP-0.1");
  helper.getOrCreateRepositoryVersion(stackId.getStackName(),stackId.getStackVersion());
  c1.createClusterVersion(stackId.getStackName(),stackId.getStackVersion(),"admin",RepositoryVersionState.CURRENT);
  Assert.assertEquals("c1",c1.getClusterName());
  Assert.assertEquals(1,c1.getClusterId());
  clusters.addHost("h1");
  Host host=clusters.getHost("h1");
  host.setIPv4("ipv4");
  host.setIPv6("ipv6");
  Map<String,String> hostAttributes=new HashMap<String,String>();
  hostAttributes.put("os_family","redhat");
  hostAttributes.put("os_release_version","6.3");
  host.setHostAttributes(hostAttributes);
  host.persist();
  c1.setDesiredStackVersion(stackId);
  clusters.mapHostToCluster("h1","c1");
  ConfigFactory configFactory=injector.getInstance(ConfigFactory.class);
  Config config=configFactory.createNew(c1,"global",new HashMap<String,String>(){
{
      put("a","b");
      put("x","y");
    }
  }
,new HashMap<String,Map<String,String>>());
  try {
    host.addDesiredConfig(c1.getClusterId(),true,null,config);
    Assert.fail("Expect failure when user is not specified.");
  }
 catch (  Exception e) {
  }
  config.setTag("v1");
  host.addDesiredConfig(c1.getClusterId(),true,"_test",config);
  Map<String,DesiredConfig> map=host.getDesiredConfigs(c1.getClusterId());
  Assert.assertTrue("Expect desired config to contain global",map.containsKey("global"));
  Assert.assertEquals("Expect global user to be '_test'","_test",map.get("global").getUser());
  config=configFactory.createNew(c1,"global",new HashMap<String,String>(){
{
      put("c","d");
    }
  }
,new HashMap<String,Map<String,String>>());
  config.setTag("v2");
  host.addDesiredConfig(c1.getClusterId(),true,"_test1",config);
  map=host.getDesiredConfigs(c1.getClusterId());
  Assert.assertTrue("Expect desired config to contain global",map.containsKey("global"));
  Assert.assertEquals("Expect version to be 'v2'","v2",map.get("global").getTag());
  Assert.assertEquals("Expect user to be '_test1'","_test1",map.get("global").getUser());
  host.addDesiredConfig(c1.getClusterId(),false,"_test2",config);
  map=host.getDesiredConfigs(c1.getClusterId());
  Assert.assertEquals("Expect no mapping configs",0,map.size());
}
