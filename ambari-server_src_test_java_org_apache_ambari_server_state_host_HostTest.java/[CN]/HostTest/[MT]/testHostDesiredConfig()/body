{
  AmbariMetaInfo metaInfo=injector.getInstance(AmbariMetaInfo.class);
  metaInfo.init();
  clusters.addCluster("c1");
  Cluster c1=clusters.getCluster("c1");
  Assert.assertEquals("c1",c1.getClusterName());
  Assert.assertEquals(1,c1.getClusterId());
  clusters.addHost("h1");
  Host host=clusters.getHost("h1");
  host.setIPv4("ipv4");
  host.setIPv6("ipv6");
  host.setOsType("centos5");
  host.persist();
  c1.setDesiredStackVersion(new StackId("HDP-0.1"));
  clusters.mapHostToCluster("h1","c1");
  ConfigFactory configFactory=injector.getInstance(ConfigFactory.class);
  Config config=configFactory.createNew(c1,"global",new HashMap<String,String>(){
{
      put("a","b");
      put("x","y");
    }
  }
);
  try {
    host.addDesiredConfig(c1.getClusterId(),null,config);
    Assert.fail("Expect failure when version is not specified.");
  }
 catch (  Exception e) {
  }
  config.setVersionTag("v1");
  host.addDesiredConfig(c1.getClusterId(),null,config);
  Map<String,DesiredConfig> map=host.getDesiredConfigs(c1.getClusterId());
  Assert.assertTrue("Expect desired config to contain global",map.containsKey("global"));
  config=configFactory.createNew(c1,"global",new HashMap<String,String>(){
{
      put("c","d");
    }
  }
);
  config.setVersionTag("v2");
  host.addDesiredConfig(c1.getClusterId(),null,config);
  map=host.getDesiredConfigs(c1.getClusterId());
  Assert.assertTrue("Expect desired config to contain global",map.containsKey("global"));
  Assert.assertEquals("Expect version to be 'v2'","v2",map.get("global").getVersion());
}
