{
  String specWithParams=getSpec(clusterName,clusterSet,hostSet,metrics.keySet(),temporalInfo);
  String spec=null;
  String params=null;
  String[] tokens=questionMarkPattern.split(specWithParams,2);
  try {
    spec=tokens[0];
    params=tokens[1];
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    LOG.info(e.toString());
  }
  BufferedReader reader=null;
  try {
    if (!hostProvider.isCollectorHostLive(clusterName,GANGLIA)) {
      LOG.info("Ganglia host is not live");
      return Collections.emptySet();
    }
    if (!hostProvider.isCollectorComponentLive(clusterName,GANGLIA)) {
      LOG.info("Ganglia server component is not live");
      return Collections.emptySet();
    }
    reader=new BufferedReader(new InputStreamReader(getStreamProvider().readFrom(spec,"POST",params)));
    String feedStart=reader.readLine();
    if (feedStart == null || feedStart.isEmpty()) {
      LOG.info("Empty feed while getting ganglia metrics for spec => " + spec);
      return Collections.emptySet();
    }
    int startTime=convertToNumber(feedStart).intValue();
    String dsName=reader.readLine();
    if (dsName == null || dsName.isEmpty()) {
      LOG.info("Feed without body while reading ganglia metrics for spec " + "=> " + spec);
      return Collections.emptySet();
    }
    while (!"[~EOF]".equals(dsName)) {
      GangliaMetric metric=new GangliaMetric();
      List<GangliaMetric.TemporalMetric> listTemporalMetrics=new ArrayList<GangliaMetric.TemporalMetric>();
      metric.setDs_name(dsName);
      metric.setCluster_name(reader.readLine());
      metric.setHost_name(reader.readLine());
      metric.setMetric_name(reader.readLine());
      String timeStr=reader.readLine();
      String stepStr=reader.readLine();
      if (timeStr == null || timeStr.isEmpty() || stepStr == null || stepStr.isEmpty()) {
        LOG.info("Unexpected end of stream reached while getting ganglia " + "metrics for spec => " + spec);
        return Collections.emptySet();
      }
      int time=convertToNumber(timeStr).intValue();
      int step=convertToNumber(stepStr).intValue();
      String val=reader.readLine();
      String lastVal=null;
      while (val != null && !"[~EOM]".equals(val)) {
        if (val.startsWith("[~r]")) {
          Integer repeat=Integer.valueOf(val.substring(4)) - 1;
          for (int i=0; i < repeat; ++i) {
            if (!"[~n]".equals(lastVal)) {
              GangliaMetric.TemporalMetric tm=new GangliaMetric.TemporalMetric(lastVal,time);
              if (tm.isValid())               listTemporalMetrics.add(tm);
            }
            time+=step;
          }
        }
 else {
          if (!"[~n]".equals(val)) {
            GangliaMetric.TemporalMetric tm=new GangliaMetric.TemporalMetric(val,time);
            if (tm.isValid())             listTemporalMetrics.add(tm);
          }
          time+=step;
        }
        lastVal=val;
        val=reader.readLine();
      }
      metric.setDatapointsFromList(listTemporalMetrics);
      ResourceKey key=new ResourceKey(metric.getHost_name(),metric.getCluster_name());
      Set<Resource> resourceSet=resources.get(key);
      if (resourceSet != null) {
        for (        Resource resource : resourceSet) {
          populateResource(resource,metric);
        }
      }
      dsName=reader.readLine();
      if (dsName == null || dsName.isEmpty()) {
        LOG.info("Unexpected end of stream reached while getting ganglia " + "metrics for spec => " + spec);
        return Collections.emptySet();
      }
    }
    String feedEnd=reader.readLine();
    if (feedEnd == null || feedEnd.isEmpty()) {
      LOG.info("Error reading end of feed while getting ganglia metrics " + "for spec => " + spec);
    }
 else {
      int endTime=convertToNumber(feedEnd).intValue();
      int totalTime=endTime - startTime;
      if (LOG.isInfoEnabled() && totalTime > POPULATION_TIME_UPPER_LIMIT) {
        LOG.info("Ganglia resource population time: " + totalTime);
      }
    }
  }
 catch (  IOException e) {
    if (LOG.isErrorEnabled()) {
      LOG.error("Caught exception getting Ganglia metrics : spec=" + spec);
    }
  }
 finally {
    if (reader != null) {
      try {
        reader.close();
      }
 catch (      IOException e) {
        if (LOG.isWarnEnabled()) {
          LOG.warn("Unable to close http input steam : spec=" + spec,e);
        }
      }
    }
  }
  return Collections.emptySet();
}
