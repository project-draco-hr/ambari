{
  List<CustomCommandDefinition> commands=new ArrayList<CustomCommandDefinition>();
  CustomCommandDefinition command1=new CustomCommandDefinition();
  setPrivateField(command1,"name","one");
  CustomCommandDefinition command2=new CustomCommandDefinition();
  setPrivateField(command2,"name","two");
  commands.add(command1);
  commands.add(command2);
  ComponentInfo info=new ComponentInfo();
  ComponentInfo parentInfo=new ComponentInfo();
  parentInfo.setCustomCommands(commands);
  assertEquals(commands,resolveComponent(info,parentInfo).getModuleInfo().getCustomCommands());
  info.setCustomCommands(commands);
  parentInfo.setCustomCommands(null);
  assertEquals(commands,resolveComponent(info,parentInfo).getModuleInfo().getCustomCommands());
  List<CustomCommandDefinition> commands2=new ArrayList<CustomCommandDefinition>();
  CustomCommandDefinition command3=new CustomCommandDefinition();
  setPrivateField(command3,"name","two");
  CustomCommandDefinition command4=new CustomCommandDefinition();
  setPrivateField(command4,"name","four");
  commands2.add(command3);
  commands2.add(command4);
  info.setCustomCommands(commands2);
  parentInfo.setCustomCommands(commands);
  List<CustomCommandDefinition> resolvedCommands=resolveComponent(info,parentInfo).getModuleInfo().getCustomCommands();
  assertEquals(3,resolvedCommands.size());
  assertTrue(resolvedCommands.contains(command1));
  assertTrue(resolvedCommands.contains(command3));
  assertTrue(resolvedCommands.contains(command4));
}
