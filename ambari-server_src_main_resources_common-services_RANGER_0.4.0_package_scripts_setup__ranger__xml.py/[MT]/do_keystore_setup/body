def do_keystore_setup(rolling_upgrade=False):
    import params
    ranger_home = params.ranger_home
    cred_lib_path = params.cred_lib_path
    cred_setup_prefix = params.cred_setup_prefix
    if rolling_upgrade:
        ranger_home = format('/usr/hdp/{version}/ranger-admin')
        cred_lib_path = os.path.join(ranger_home, 'cred', 'lib', '*')
        cred_setup_prefix = (format('{ranger_home}/ranger_credential_helper.py'), '-l', cred_lib_path)
    if (not is_empty(params.ranger_credential_provider_path)):
        jceks_path = params.ranger_credential_provider_path
        cred_setup = (cred_setup_prefix + ('-f', jceks_path, '-k', params.ranger_jpa_jdbc_credential_alias, '-v', PasswordString(params.ranger_ambari_db_password), '-c', '1'))
        Execute(cred_setup, environment={'RANGER_ADMIN_HOME': ranger_home, 'JAVA_HOME': params.java_home, }, logoutput=True, sudo=True)
        File(params.ranger_credential_provider_path, owner=params.unix_user, group=params.unix_group)
    if ((not is_empty(params.ranger_credential_provider_path)) and (params.ranger_audit_source_type.lower() == 'db') and (not is_empty(params.ranger_ambari_audit_db_password))):
        jceks_path = params.ranger_credential_provider_path
        cred_setup = (cred_setup_prefix + ('-f', jceks_path, '-k', params.ranger_jpa_audit_jdbc_credential_alias, '-v', PasswordString(params.ranger_ambari_db_password), '-c', '1'))
        Execute(cred_setup, environment={'RANGER_ADMIN_HOME': ranger_home, 'JAVA_HOME': params.java_home, }, logoutput=True, sudo=True)
        File(params.ranger_credential_provider_path, owner=params.unix_user, group=params.unix_group)
