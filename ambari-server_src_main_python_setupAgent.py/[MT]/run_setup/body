def run_setup(argv=None):
    retcode = parseArguments(argv)
    if (retcode['exitstatus'] != 0):
        return retcode
    (expected_hostname, passPhrase, hostname, user_run_as, projectVersion, server_port) = retcode['parsed_args']
    retcode = checkServerReachability(hostname, server_port)
    if (retcode['exitstatus'] != 0):
        return retcode
    if ((projectVersion == 'null') or (projectVersion == '{ambariVersion}') or (projectVersion == '')):
        retcode = getOptimalVersion('')
    else:
        retcode = getOptimalVersion(projectVersion)
    if ((retcode['exitstatus'] == 0) and (retcode['log'] != None) and (retcode['log'] != '') and (retcode['log'][0].strip() != '')):
        availableProjectVersion = retcode['log'].strip()
        if (not isAgentPackageAlreadyInstalled(availableProjectVersion)):
            ambari_repo_file = get_ambari_repo_file_full_name()
            if os.path.exists(ambari_repo_file):
                retcode = installAgent(availableProjectVersion)
                if (not (retcode['exitstatus'] == 0)):
                    return retcode
            else:
                return {'exitstatus': 2, 'log': 'Ambari repo file not found: {0}'.format(ambari_repo_file), }
                pass
    elif (retcode['exitstatus'] == 1):
        if ((retcode['log'] != None) and (retcode['log'] != '') and (retcode['log'][0].strip() != '')):
            return {'exitstatus': 1, 'log': ((('Desired version (' + projectVersion) + ') of ambari-agent package is not available. Repository has following versions of ambari-agent:') + retcode['log'][0].strip()), }
        else:
            logmessage = (('Desired version (' + projectVersion) + ') of ambari-agent package is not available.')
            ambari_repo_file = get_ambari_repo_file_full_name()
            if (not os.path.exists(ambari_repo_file)):
                logmessage = ((logmessage + ' ') + 'Ambari repo file not found: {0}'.format(ambari_repo_file))
            return {'exitstatus': retcode['exitstatus'], 'log': logmessage, }
            pass
    else:
        return retcode
    retcode = configureAgent(hostname, user_run_as)
    if (retcode['exitstatus'] != 0):
        return retcode
    return runAgent(passPhrase, expected_hostname, user_run_as, verbose)
