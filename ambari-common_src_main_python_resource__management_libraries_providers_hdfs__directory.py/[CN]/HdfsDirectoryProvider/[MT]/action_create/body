def action_create(self):
    global delayed_directories
    global chmod_map
    global chown_map
    self.action_create_delayed()
    hdp_conf_dir = self.resource.conf_dir
    hdp_hdfs_user = self.resource.hdfs_user
    secured = self.resource.security_enabled
    keytab_file = self.resource.keytab
    kinit_path = self.resource.kinit_path_local
    bin_dir = self.resource.bin_dir
    chmod_commands = []
    chown_commands = []
    for (chmod_key, chmod_dirs) in chmod_map.items():
        mode = chmod_key[0]
        recursive = chmod_key[1]
        chmod_dirs_str = ' '.join(chmod_dirs)
        chmod_commands.append(format('hadoop --config {hdp_conf_dir} fs -chmod {recursive} {mode} {chmod_dirs_str}'))
    for (chown_key, chown_dirs) in chown_map.items():
        owner = chown_key[0]
        group = chown_key[1]
        recursive = chown_key[2]
        chown_dirs_str = ' '.join(chown_dirs)
        if owner:
            chown = owner
            if group:
                chown = format('{owner}:{group}')
            chown_commands.append(format('hadoop --config {hdp_conf_dir} fs -chown {recursive} {chown} {chown_dirs_str}'))
    if secured:
        Execute(format('{kinit_path} -kt {keytab_file} {hdfs_principal_name}'), user=hdp_hdfs_user)
    dir_list_str = ' '.join(directories_list)
    parent_flag = '`rpm -q hadoop | grep -q "hadoop-1" || echo "-p"`'
    Execute(format('hadoop --config {hdp_conf_dir} fs -mkdir {parent_flag} {dir_list_str} && {chmod_cmd} && {chown_cmd}', chmod_cmd=' && '.join(chmod_commands), chown_cmd=' && '.join(chown_commands)), user=hdp_hdfs_user, path=bin_dir, not_if=as_user(format('hadoop --config {hdp_conf_dir} fs -ls {dir_list_str}'), hdp_hdfs_user))
    directories_list[:] = []
    chmod_map.clear()
    chown_map.clear()
