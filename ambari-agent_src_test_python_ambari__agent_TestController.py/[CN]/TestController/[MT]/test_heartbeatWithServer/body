@patch.object(ExitHelper, 'exit')
@patch.object(threading._Event, 'wait')
@patch('time.sleep')
@patch('ambari_simplejson.dumps')
def test_heartbeatWithServer(self, dumpsMock, sleepMock, event_mock, exit_mock):
    out = StringIO.StringIO()
    sys.stdout = out
    hearbeat = MagicMock()
    self.controller.heartbeat = hearbeat
    event_mock.return_value = False
    dumpsMock.return_value = 'data'
    sendRequest = MagicMock(name='sendRequest')
    self.controller.sendRequest = sendRequest
    self.controller.responseId = 1
    response = {'responseId': '2', 'restartAgent': 'false', }
    sendRequest.return_value = response

    def one_heartbeat(*args, **kwargs):
        self.controller.DEBUG_STOP_HEARTBEATING = True
        return response
    sendRequest.side_effect = one_heartbeat
    actionQueue = MagicMock()
    actionQueue.isIdle.return_value = True
    self.controller.actionQueue = actionQueue
    self.controller.alert_scheduler_handler = MagicMock()
    self.controller.heartbeatWithServer()
    self.assertTrue(sendRequest.called)
    calls = []

    def retry(*args, **kwargs):
        if (len(calls) == 0):
            calls.append(1)
            response['responseId'] = '3'
            raise Exception()
        if (len(calls) > 0):
            self.controller.DEBUG_STOP_HEARTBEATING = True
        return response
    sendRequest.side_effect = retry
    self.controller.DEBUG_STOP_HEARTBEATING = False
    self.controller.heartbeatWithServer()
    self.assertEqual(1, self.controller.DEBUG_SUCCESSFULL_HEARTBEATS)
    self.controller.responseId = 2
    response['registrationCommand'] = 'true'
    sendRequest.side_effect = one_heartbeat
    self.controller.DEBUG_STOP_HEARTBEATING = False
    self.controller.heartbeatWithServer()
    self.assertTrue(self.controller.repeatRegistration)
    self.controller.responseId = 2
    response['registrationCommand'] = 'false'
    response['hasMappedComponents'] = False
    sendRequest.side_effect = one_heartbeat
    self.controller.DEBUG_STOP_HEARTBEATING = False
    self.controller.heartbeatWithServer()
    self.assertFalse(self.controller.hasMappedComponents)
    self.controller.responseId = 2
    response['hasMappedComponents'] = True
    sendRequest.side_effect = one_heartbeat
    self.controller.DEBUG_STOP_HEARTBEATING = False
    self.controller.heartbeatWithServer()
    self.assertTrue(self.controller.hasMappedComponents)
    self.controller.responseId = 2
    del response['hasMappedComponents']
    sendRequest.side_effect = one_heartbeat
    self.controller.DEBUG_STOP_HEARTBEATING = False
    self.controller.heartbeatWithServer()
    self.assertTrue(self.controller.hasMappedComponents)
    self.controller.responseId = 2
    response = {'responseId': '2', 'restartAgent': 'false', }
    restartAgent = MagicMock(name='restartAgent')
    self.controller.restartAgent = restartAgent
    self.controller.DEBUG_STOP_HEARTBEATING = False
    self.controller.heartbeatWithServer()
    restartAgent.assert_called_with()
    self.controller.responseId = 1
    addToQueue = MagicMock(name='addToQueue')
    self.controller.addToQueue = addToQueue
    response['executionCommands'] = 'executionCommands'
    self.controller.DEBUG_STOP_HEARTBEATING = False
    self.controller.heartbeatWithServer()
    addToQueue.assert_has_calls([call('executionCommands')])
    self.controller.responseId = 1
    addToStatusQueue = MagicMock(name='addToStatusQueue')
    self.controller.addToStatusQueue = addToStatusQueue
    response['statusCommands'] = 'statusCommands'
    self.controller.DEBUG_STOP_HEARTBEATING = False
    self.controller.heartbeatWithServer()
    addToStatusQueue.assert_has_calls([call('statusCommands')])
    self.controller.responseId = 1
    self.controller.DEBUG_STOP_HEARTBEATING = False
    response['restartAgent'] = 'true'
    restartAgent = MagicMock(name='restartAgent')
    self.controller.restartAgent = restartAgent
    self.controller.heartbeatWithServer()
    restartAgent.assert_called_with()
    self.controller.responseId = 1
    self.controller.DEBUG_STOP_HEARTBEATING = False
    actionQueue.isIdle.return_value = False
    response['restartAgent'] = 'false'
    self.controller.heartbeatWithServer()
    self.controller.responseId = 1
    self.controller.TEST_IOERROR_COUNTER = 1
    sendRequest.reset()

    def util_throw_IOErrors(*args, **kwargs):
        '\n      Throws IOErrors 100 times and then stops heartbeats/registrations\n      '
        if (self.controller.TEST_IOERROR_COUNTER == 10):
            self.controller.DEBUG_STOP_HEARTBEATING = True
        self.controller.TEST_IOERROR_COUNTER += 1
        raise IOError('Sample error')
    self.controller.DEBUG_STOP_HEARTBEATING = False
    actionQueue.isIdle.return_value = False
    sendRequest.side_effect = util_throw_IOErrors
    self.controller.heartbeatWithServer()
    self.assertTrue((sendRequest.call_count > 5))
    sys.stdout = sys.__stdout__
    self.controller.sendRequest = Controller.Controller.sendRequest
    self.controller.sendRequest = Controller.Controller.addToQueue
    self.controller.sendRequest = Controller.Controller.addToStatusQueue
