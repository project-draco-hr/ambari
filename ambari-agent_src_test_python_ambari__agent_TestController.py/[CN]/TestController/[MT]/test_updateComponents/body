@patch.object(Controller, 'LiveStatus')
def test_updateComponents(self, LiveStatus_mock):
    LiveStatus_mock.SERVICES = []
    LiveStatus_mock.CLIENT_COMPONENTS = []
    LiveStatus_mock.COMPONENTS = []
    self.controller.componentsUrl = 'foo_url/'
    sendRequest = Mock()
    self.controller.sendRequest = sendRequest
    self.controller.sendRequest.return_value = '{"clusterName":"dummy_cluster_name","stackName":"dummy_stack_name","stackVersion":"dummy_stack_version","components":{"PIG":{"PIG":"CLIENT"},"MAPREDUCE":{"MAPREDUCE_CLIENT":"CLIENT","JOBTRACKER":"MASTER","TASKTRACKER":"SLAVE"}}}'
    self.controller.updateComponents('dummy_cluster_name')
    sendRequest.assert_called_with('foo_url/dummy_cluster_name', None)
    services_expected = [u'MAPREDUCE', u'PIG']
    client_components_expected = [{'serviceName': u'MAPREDUCE', 'componentName': u'MAPREDUCE_CLIENT', }, {'serviceName': u'PIG', 'componentName': u'PIG', }]
    components_expected = [{'serviceName': u'MAPREDUCE', 'componentName': u'TASKTRACKER', }, {'serviceName': u'MAPREDUCE', 'componentName': u'JOBTRACKER', }]
    self.assertEquals(LiveStatus_mock.SERVICES, services_expected)
    self.assertEquals(LiveStatus_mock.CLIENT_COMPONENTS, client_components_expected)
    self.assertEquals(LiveStatus_mock.COMPONENTS, components_expected)
