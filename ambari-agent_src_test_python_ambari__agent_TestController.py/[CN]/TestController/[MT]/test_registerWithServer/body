@patch('json.dumps')
@patch('time.sleep')
@patch('pprint.pformat')
@patch.object(Controller, 'randint')
@patch.object(Controller, 'LiveStatus')
def test_registerWithServer(self, LiveStatus_mock, randintMock, pformatMock, sleepMock, dumpsMock):
    out = StringIO.StringIO()
    sys.stdout = out
    LiveStatus_mock.SERVICES = ['foo']
    LiveStatus_mock.CLIENT_COMPONENTS = ['foo']
    LiveStatus_mock.COMPONENTS = ['foo']
    register = MagicMock()
    self.controller.register = register
    self.controller.sendRequest = MagicMock()
    dumpsMock.return_value = 'request'
    self.controller.sendRequest.return_value = '{"log":"Error text", "exitstatus":"1"}'
    self.assertEqual({u'exitstatus': u'1', u'log': u'Error text', }, self.controller.registerWithServer())
    self.assertEqual(LiveStatus_mock.SERVICES, [])
    self.assertEqual(LiveStatus_mock.CLIENT_COMPONENTS, [])
    self.assertEqual(LiveStatus_mock.COMPONENTS, [])
    self.controller.sendRequest.return_value = '{"responseId":1}'
    self.assertEqual({'responseId': 1, }, self.controller.registerWithServer())
    self.controller.sendRequest.return_value = '{"responseId":1, "statusCommands": "commands", "log":"", "exitstatus":"0"}'
    self.controller.addToStatusQueue = MagicMock(name='addToStatusQueue')
    self.controller.isRegistered = False
    self.assertEqual({'exitstatus': '0', 'responseId': 1, 'log': '', 'statusCommands': 'commands', }, self.controller.registerWithServer())
    self.controller.addToStatusQueue.assert_called_with('commands')
    calls = []

    def side_effect(*args):
        if (len(calls) == 0):
            calls.append(1)
            raise Exception('test')
        return 'request'
    self.controller.sendRequest.return_value = '{"responseId":1}'
    dumpsMock.side_effect = side_effect
    self.controller.isRegistered = False
    self.assertEqual({'responseId': 1, }, self.controller.registerWithServer())
    self.assertTrue(randintMock.called)
    self.assertTrue(sleepMock.called)
    sys.stdout = sys.__stdout__
    self.controller.sendRequest = Controller.Controller.sendRequest
    self.controller.addToStatusQueue = Controller.Controller.addToStatusQueue
