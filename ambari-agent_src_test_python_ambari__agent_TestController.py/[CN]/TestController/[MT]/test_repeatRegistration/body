@patch('subprocess.Popen')
@patch.object(Hardware, '_chk_mount', new=MagicMock(return_value=True))
@patch.object(FacterLinux, 'facterInfo', new=MagicMock(return_value={}))
@patch.object(FacterLinux, '__init__', new=MagicMock(return_value=None))
@patch('urllib2.build_opener')
@patch('urllib2.install_opener')
@patch.object(ActionQueue.ActionQueue, 'run')
@patch.object(OSCheck, 'get_os_type')
@patch.object(OSCheck, 'get_os_version')
def test_repeatRegistration(self, get_os_version_mock, get_os_type_mock, run_mock, installMock, buildMock, Popen_mock):
    registerAndHeartbeat = MagicMock(name='registerAndHeartbeat')
    get_os_type_mock.return_value = 'suse'
    get_os_version_mock.return_value = '11'
    self.controller.registerAndHeartbeat = registerAndHeartbeat
    self.controller.run()
    self.assertTrue(installMock.called)
    self.assertTrue(buildMock.called)
    self.controller.registerAndHeartbeat.assert_called_once_with()
    calls = []

    def switchBool():
        if (len(calls) == 0):
            self.controller.repeatRegistration = True
            calls.append(1)
        self.controller.repeatRegistration = False
    registerAndHeartbeat.side_effect = switchBool
    self.controller.run()
    self.assertEqual(2, registerAndHeartbeat.call_count)
    self.controller.registerAndHeartbeat = Controller.Controller.registerAndHeartbeat
