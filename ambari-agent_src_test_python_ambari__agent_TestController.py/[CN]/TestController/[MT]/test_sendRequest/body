@patch('urllib2.Request')
@patch.object(Controller, 'security')
def test_sendRequest(self, security_mock, requestMock):
    conMock = MagicMock()
    security_mock.CachedHTTPSConnection.return_value = conMock
    url = 'http://ambari.apache.org:8081/agent'
    data = 'data'
    requestMock.return_value = 'request'
    self.controller.cachedconnect = None
    conMock.request.return_value = '{"valid_object": true}'
    actual = self.controller.sendRequest(url, data)
    expected = ambari_simplejson.loads('{"valid_object": true}')
    self.assertEqual(actual, expected)
    security_mock.CachedHTTPSConnection.assert_called_once_with(self.controller.config)
    requestMock.called_once_with(url, data, {'Content-Type': 'application/ambari_simplejson', })
    conMock.request.return_value = '{invalid_object}'
    try:
        self.controller.sendRequest(url, data)
        self.fail('Should throw exception!')
    except IOError as e:
        self.assertEquals((('Response parsing failed! Request data: ' + data) + '; Response: {invalid_object}'), str(e))
    exceptionMessage = 'Connection Refused'
    conMock.request.side_effect = Exception(exceptionMessage)
    try:
        self.controller.sendRequest(url, data)
        self.fail('Should throw exception!')
    except IOError as e:
        self.assertEquals(((('Request to ' + url) + ' failed due to ') + exceptionMessage), str(e))
