{
  SolrQuery solrQuery=new SolrQuery();
  String jsonHCNames=(String)searchCriteria.getParamValue("treeParams");
  String givenQuery=(String)searchCriteria.getParamValue("q");
  String level=(String)searchCriteria.getParamValue("level");
  String startTime=(String)searchCriteria.getParamValue("from");
  String endTime=(String)searchCriteria.getParamValue("to");
  String iMessage=(String)searchCriteria.getParamValue("iMessage");
  String eMessage=(String)searchCriteria.getParamValue("eMessage");
  String gEmessage=(String)searchCriteria.getParamValue("gEMessage");
  String selectedComp=(String)searchCriteria.getParamValue("selectComp");
  String bundleId=(String)searchCriteria.getParamValue(LogSearchConstants.BUNDLE_ID);
  String globalExcludeComp=(String)searchCriteria.getParamValue("gMustNot");
  String unselectedComp=(String)searchCriteria.getParamValue("unselectComp");
  String urlHostName=(String)searchCriteria.getParamValue("host_name");
  String urlComponents=(String)searchCriteria.getParamValue("components_name");
  String advQuery=(String)searchCriteria.getParamValue("advanceSearch");
  if (!stringUtil.isEmpty(advQuery)) {
    String advQueryParameters[]=advQuery.split(Pattern.quote("}{"));
    SolrQuery advSolrQuery=new SolrQuery();
    for (    String queryParam : advQueryParameters) {
      String params[]=queryParam.split(Pattern.quote("="));
      advSolrQuery.setParam(params[0],params[1]);
    }
    setFilterClauseWithFieldName(advSolrQuery,level,LogSearchConstants.SOLR_LEVEL,"","OR");
    setSingleRangeFilter(advSolrQuery,LogSearchConstants.LOGTIME,startTime,endTime);
    setFilterClauseWithFieldName(advSolrQuery,unselectedComp,LogSearchConstants.SOLR_COMPONENT,LogSearchConstants.MINUS_OPERATOR,"AND");
    setFilterClauseWithFieldName(advSolrQuery,selectedComp,LogSearchConstants.SOLR_COMPONENT,LogSearchConstants.NO_OPERATOR,"OR");
    setPagination(advSolrQuery,searchCriteria);
    return advSolrQuery;
  }
  setMainQuery(solrQuery,givenQuery);
  setSingleRangeFilter(solrQuery,LogSearchConstants.LOGTIME,startTime,endTime);
  String mainFilterQuery=buildQueryFromJSONCompHost(jsonHCNames,selectedComp);
  if (mainFilterQuery != null && !mainFilterQuery.equals(""))   solrQuery.addFilterQuery(mainFilterQuery);
  setFilterClauseWithFieldName(solrQuery,level,LogSearchConstants.SOLR_LEVEL,"","OR");
  setFilterClauseForSolrSearchableString(solrQuery,iMessage,"OR","",LogSearchConstants.SOLR_LOG_MESSAGE);
  setFilterClauseForSolrSearchableString(solrQuery,gEmessage,"AND",LogSearchConstants.MINUS_OPERATOR,LogSearchConstants.SOLR_LOG_MESSAGE);
  setFilterClauseForSolrSearchableString(solrQuery,eMessage,"AND",LogSearchConstants.MINUS_OPERATOR,LogSearchConstants.SOLR_LOG_MESSAGE);
  applyLogFileFilter(solrQuery,searchCriteria);
  setFilterClauseWithFieldName(solrQuery,globalExcludeComp,LogSearchConstants.SOLR_COMPONENT,LogSearchConstants.MINUS_OPERATOR,"AND");
  setFilterClauseWithFieldName(solrQuery,unselectedComp,LogSearchConstants.SOLR_COMPONENT,LogSearchConstants.MINUS_OPERATOR,"AND");
  setFilterClauseWithFieldName(solrQuery,urlHostName,LogSearchConstants.SOLR_HOST,"","OR");
  setFilterClauseWithFieldName(solrQuery,urlComponents,LogSearchConstants.SOLR_COMPONENT,"","OR");
  setPagination(solrQuery,searchCriteria);
  setSortOrderDefaultServiceLog(solrQuery,searchCriteria);
  setSingleIncludeFilter(solrQuery,LogSearchConstants.BUNDLE_ID,bundleId);
  this.setUserSpecificFilter(searchCriteria,solrQuery,LogSearchConstants.INCLUDE_QUERY,LogSearchConstants.INCLUDE_QUERY);
  this.setUserSpecificFilter(searchCriteria,solrQuery,LogSearchConstants.EXCLUDE_QUERY,LogSearchConstants.EXCLUDE_QUERY);
  return solrQuery;
}
