{
  String type;
switch (logType) {
case AUDIT:
    String auditSuffix=PropertiesUtil.getProperty("logsearch.solr.collection.audit.logs",LogSearchConstants.DEFAULT_AUDIT_COLUMN_SUFFIX);
  type=ConfigUtil.schemaFieldsName.get(key + auditSuffix);
break;
case SERVICE:
String serviceLogs=PropertiesUtil.getProperty("logsearch.solr.collection.service.logs",LogSearchConstants.DEFAULT_SERVICE_COLUMN_SUFFIX);
type=ConfigUtil.schemaFieldsName.get(key + serviceLogs);
break;
default :
type=null;
}
if (key.equalsIgnoreCase(LogSearchConstants.SOLR_LOG_MESSAGE)) {
return solrUtil.escapeForLogMessage(key,str);
}
if (type == null) {
return key + ":" + "*"+ str+ "*";
}
 else if ("text_std_token_lower_case".equalsIgnoreCase(type)) {
return key + ":" + solrUtil.escapeForStandardTokenizer(str);
}
 else if ("key_lower_case".equalsIgnoreCase(type) || "string".equalsIgnoreCase(type)) {
return key + ":" + solrUtil.makeSolrSearchStringWithoutAsterisk(str);
}
 else if ("ip_address".equalsIgnoreCase(type)) {
return key + ":" + str;
}
return key + ":" + putEscapeCharacterForNumber(str);
}
