{
  String fieldType;
  SolrDaoBase solrDaoBase=null;
switch (logType) {
case AUDIT:
    fieldType=auditSolrDao.schemaFieldsNameMap.get(key);
  solrDaoBase=auditSolrDao;
break;
case SERVICE:
fieldType=serviceLogsSolrDao.schemaFieldsNameMap.get(key);
solrDaoBase=serviceLogsSolrDao;
if (key.equalsIgnoreCase(LogSearchConstants.SOLR_LOG_MESSAGE)) {
return SolrUtil.escapeForLogMessage(key,str);
}
break;
default :
logger.error("Invalid logtype :" + logType);
fieldType=null;
}
if (!StringUtils.isBlank(fieldType)) {
if (SolrUtil.isSolrFieldNumber(fieldType,solrDaoBase)) {
String value=putEscapeCharacterForNumber(str,fieldType,solrDaoBase);
if (!StringUtils.isBlank(value)) {
return key + ":" + value;
}
 else {
return null;
}
}
 else if (checkTokenizer(fieldType,StandardTokenizerFactory.class,solrDaoBase)) {
return key + ":" + SolrUtil.escapeForStandardTokenizer(str);
}
 else if (checkTokenizer(fieldType,KeywordTokenizerFactory.class,solrDaoBase) || "string".equalsIgnoreCase(fieldType)) {
return key + ":" + SolrUtil.makeSolrSearchStringWithoutAsterisk(str);
}
 else if (checkTokenizer(fieldType,PathHierarchyTokenizerFactory.class,solrDaoBase)) {
return key + ":" + str;
}
}
return key + ":" + "*"+ str+ "*";
}
