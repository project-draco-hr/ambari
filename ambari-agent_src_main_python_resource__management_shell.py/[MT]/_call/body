def _call(command, logoutput=False, throw_on_failure=True, cwd=None, env=None, preexec_fn=None):
    "\n  Execute shell command\n  \n  @param command: list/tuple of arguments (recommended as more safe - don't need to escape) \n  or string of the command to execute\n  @param logoutput: boolean, whether command output should be logged of not\n  @param throw_on_failure: if true, when return code is not zero exception is thrown\n  \n  @return: retrun_code, stdout\n  "
    shell = (not isinstance(command, (list, tuple)))
    proc = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, cwd=cwd, env=env, shell=shell, preexec_fn=preexec_fn)
    out = proc.communicate()[0]
    code = proc.returncode
    if (logoutput and out and (out != '')):
        log.info(out)
    if (throw_on_failure and code):
        err_msg = ("Execution of '%s' returned %d. %s" % (command, code, out))
        raise Fail(err_msg)
    return (code, out)
