def __json_to_callable(self, clusterName, hostName, json_definition):
    '\n    converts the json that represents all aspects of a definition\n    and makes an object that extends BaseAlert that is used for individual\n    '
    alert = None
    try:
        source = json_definition['source']
        source_type = source.get('type', '')
        if logger.isEnabledFor(logging.DEBUG):
            logger.debug('[AlertScheduler] Creating job type {0} with {1}'.format(source_type, str(json_definition)))
        if (source_type == AlertSchedulerHandler.TYPE_METRIC):
            alert = MetricAlert(json_definition, source, self.config)
        elif (source_type == AlertSchedulerHandler.TYPE_PORT):
            alert = PortAlert(json_definition, source)
        elif (source_type == AlertSchedulerHandler.TYPE_SCRIPT):
            source['stacks_directory'] = self.stacks_dir
            source['common_services_directory'] = self.common_services_dir
            source['host_scripts_directory'] = self.host_scripts_dir
            alert = ScriptAlert(json_definition, source, self.config)
        elif (source_type == AlertSchedulerHandler.TYPE_WEB):
            alert = WebAlert(json_definition, source, self.config)
        if (alert is not None):
            alert.set_cluster(clusterName, hostName)
    except Exception as exception:
        logger.exception('[AlertScheduler] Unable to load an invalid alert definition. It will be skipped.')
    return alert
