def __update_definition_configs(self):
    ' updates the persisted configs and restarts the scheduler '
    definitions = []
    all_commands = None
    try:
        with open(os.path.join(self.cachedir, self.FILENAME), 'r') as fp:
            all_commands = json.load(fp)
    except IOError as ValueError:
        if logger.isEnabledFor(logging.DEBUG):
            logger.exception('Failed to load definitions. {0}'.format(traceback.format_exc()))
        return
    for command_json in all_commands:
        clusterName = ('' if (not ('clusterName' in command_json)) else command_json['clusterName'])
        hostName = ('' if (not ('hostName' in command_json)) else command_json['hostName'])
        self.__update_config_values(command_json['configurations'], self.__config_maps[clusterName])
    with open(os.path.join(self.cachedir, self.FILENAME), 'w') as f:
        json.dump(all_commands, f, indent=2)
    self.reschedule_all()
