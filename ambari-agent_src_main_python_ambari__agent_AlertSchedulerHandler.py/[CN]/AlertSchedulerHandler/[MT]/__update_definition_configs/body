def __update_definition_configs(self, newConfigurations, reschedule_jobs=False):
    '\n    Updates the definitions and configurations stored on disk. Optionally\n    can reschedule jobs. Job rescheduling is only necessary when data that\n    an existing job uses has changed. In many cases, configuration values\n    have changed, yet no jobs need rescheduling.\n\n    :param reschedule_jobs:\n    :return:\n    '
    if reschedule_jobs:
        logger.info('[AlertScheduler] Updating {0} with the latest configuration values and rescheduling alert jobs'.format(self.FILENAME))
    else:
        logger.info('[AlertScheduler] Updating {0} with the latest configuration values'.format(self.FILENAME))
    try:
        with open(os.path.join(self.cachedir, self.FILENAME), 'r') as fp:
            all_commands = json.load(fp)
    except IOError as ValueError:
        if logger.isEnabledFor(logging.DEBUG):
            logger.exception('[AlertScheduler] Failed to load definitions. {0}'.format(traceback.format_exc()))
        return
    for command_json in all_commands:
        if ('clusterName' in command_json):
            clusterName = command_json['clusterName']
        else:
            clusterName = ''
        self.__update_config_values(command_json['configurations'], self.__config_maps[clusterName])
        command_json['configurations'] = newConfigurations
    with open(os.path.join(self.cachedir, self.FILENAME), 'w') as f:
        json.dump(all_commands, f, indent=2)
    if reschedule_jobs:
        self.reschedule_all()
