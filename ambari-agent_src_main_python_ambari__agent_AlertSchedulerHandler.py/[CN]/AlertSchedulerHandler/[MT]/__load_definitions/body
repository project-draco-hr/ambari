def __load_definitions(self):
    '\n    Loads all alert definitions from a file. All clusters are stored in\n    a single file. This wil also populate the cluster-to-hash dictionary.\n    :return:\n    '
    definitions = []
    alerts_definitions_path = os.path.join(self.cachedir, self.FILENAME)
    try:
        with open(alerts_definitions_path) as fp:
            all_commands = json.load(fp)
    except:
        logger.warning('[AlertScheduler] {0} not found or invalid. No alerts will be scheduled until registration occurs.'.format(alerts_definitions_path))
        return definitions
    for command_json in all_commands:
        clusterName = ('' if (not ('clusterName' in command_json)) else command_json['clusterName'])
        hostName = ('' if (not ('hostName' in command_json)) else command_json['hostName'])
        clusterHash = (None if (not ('hash' in command_json)) else command_json['hash'])
        if ((clusterName != '') and (clusterHash is not None)):
            logger.info('[AlertScheduler] Caching cluster {0} with alert hash {1}'.format(clusterName, clusterHash))
            self._cluster_hashes[clusterName] = clusterHash
        for definition in command_json['alertDefinitions']:
            alert = self.__json_to_callable(clusterName, hostName, definition)
            if (alert is None):
                continue
            alert.set_helpers(self._collector, self._cluster_configuration)
            definitions.append(alert)
    return definitions
