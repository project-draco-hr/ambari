def __load_definitions(self):
    ' loads all alert commands from the file.  all clusters are stored in one file '
    definitions = []
    all_commands = None
    alerts_definitions_path = os.path.join(self.cachedir, self.FILENAME)
    try:
        with open(alerts_definitions_path) as fp:
            all_commands = json.load(fp)
    except:
        logger.warning('[AlertScheduler] {0} not found. No alerts will be scheduled.'.format(alerts_definitions_path))
        return definitions
    for command_json in all_commands:
        clusterName = ('' if (not ('clusterName' in command_json)) else command_json['clusterName'])
        hostName = ('' if (not ('hostName' in command_json)) else command_json['hostName'])
        configmap = None
        self.__config_maps[clusterName] = {}
        if ('configurations' in command_json):
            configmap = command_json['configurations']
        for definition in command_json['alertDefinitions']:
            alert = self.__json_to_callable(clusterName, hostName, definition)
            if (alert is None):
                continue
            vals = self.__find_config_values(configmap, alert.get_lookup_keys())
            self.__config_maps[clusterName].update(vals)
            alert.set_helpers(self._collector, self.__config_maps[clusterName])
            definitions.append(alert)
    return definitions
