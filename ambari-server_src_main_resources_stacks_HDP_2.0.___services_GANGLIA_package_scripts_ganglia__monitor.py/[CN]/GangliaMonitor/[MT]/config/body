def config(self, env):
    import params
    ganglia.groups_and_users()
    Directory(params.ganglia_conf_dir, owner='root', group=params.user_group, recursive=True)
    ganglia.config()
    if params.is_namenode_master:
        generate_daemon('gmond', name='HDPNameNode', role='monitor', owner='root', group=params.user_group)
    if params.is_jtnode_master:
        generate_daemon('gmond', name='HDPJobTracker', role='monitor', owner='root', group=params.user_group)
    if params.is_rmnode_master:
        generate_daemon('gmond', name='HDPResourceManager', role='monitor', owner='root', group=params.user_group)
    if params.is_hsnode_master:
        generate_daemon('gmond', name='HDPHistoryServer', role='monitor', owner='root', group=params.user_group)
    if params.is_hbase_master:
        generate_daemon('gmond', name='HDPHBaseMaster', role='monitor', owner='root', group=params.user_group)
    not_any_master = ((params.is_namenode_master == False) and (params.is_jtnode_master == False) and (params.is_rmnode_master == False) and (params.is_hsnode_master == False) and (params.is_hbase_master == False))
    if (params.is_slave or not_any_master):
        generate_daemon('gmond', name='HDPSlaves', role='monitor', owner='root', group=params.user_group)
    Directory(path.join(params.ganglia_dir, 'conf.d'), owner='root', group=params.user_group)
    File(path.join(params.ganglia_dir, 'conf.d/modgstatus.conf'), owner='root', group=params.user_group)
    File(path.join(params.ganglia_dir, 'conf.d/multicpu.conf'), owner='root', group=params.user_group)
    File(path.join(params.ganglia_dir, 'gmond.conf'), owner='root', group=params.user_group)
