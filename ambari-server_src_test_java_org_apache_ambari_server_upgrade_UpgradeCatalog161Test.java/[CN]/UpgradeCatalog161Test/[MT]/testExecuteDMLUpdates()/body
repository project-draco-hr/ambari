{
  Configuration configuration=createNiceMock(Configuration.class);
  DBAccessor dbAccessor=createNiceMock(DBAccessor.class);
  Injector injector=createStrictMock(Injector.class);
  Provider provider=createStrictMock(Provider.class);
  EntityManager em=createStrictMock(EntityManager.class);
  EntityTransaction et=createMock(EntityTransaction.class);
  TypedQuery query=createMock(TypedQuery.class);
  Method m=AbstractUpgradeCatalog.class.getDeclaredMethod("updateConfigurationProperties",String.class,Map.class,boolean.class);
  UpgradeCatalog161 upgradeCatalog=createMockBuilder(UpgradeCatalog161.class).addMockedMethod(m).createMock();
  expect(configuration.getDatabaseUrl()).andReturn(Configuration.JDBC_IN_MEMORY_URL).anyTimes();
  expect(injector.getProvider(EntityManager.class)).andReturn(provider).anyTimes();
  expect(provider.get()).andReturn(em).anyTimes();
  expect(em.getTransaction()).andReturn(et);
  expect(et.isActive()).andReturn(true);
  expect(em.createQuery("UPDATE ClusterEntity SET provisioningState = " + ":provisioningState",ClusterEntity.class)).andReturn(query);
  expect(query.setParameter("provisioningState",State.INSTALLED)).andReturn(null);
  expect(query.executeUpdate()).andReturn(0);
  upgradeCatalog.updateConfigurationProperties("hbase-site",Collections.singletonMap("hbase.regionserver.info.port","60030"),false,false);
  expectLastCall();
  upgradeCatalog.updateConfigurationProperties("hbase-site",Collections.singletonMap("hbase.master.info.port","60010"),false,false);
  expectLastCall();
  upgradeCatalog.updateConfigurationProperties("global",Collections.singletonMap("oozie_admin_port","11001"),false,false);
  expectLastCall();
  upgradeCatalog.updateConfigurationProperties("hive-site",Collections.singletonMap("hive.heapsize","1024"),false,false);
  expectLastCall();
  replay(upgradeCatalog,dbAccessor,configuration,injector,provider,em,et,query);
  Class<?> c=AbstractUpgradeCatalog.class;
  Field f=c.getDeclaredField("configuration");
  f.setAccessible(true);
  f.set(upgradeCatalog,configuration);
  f=c.getDeclaredField("dbAccessor");
  f.setAccessible(true);
  f.set(upgradeCatalog,dbAccessor);
  f=c.getDeclaredField("injector");
  f.setAccessible(true);
  f.set(upgradeCatalog,injector);
  upgradeCatalog.executeDMLUpdates();
  verify(upgradeCatalog,dbAccessor,configuration,injector,provider,em,et,query);
}
