def setup_conf_dir(name=None):
    import params
    Directory(params.conf_dir, mode=488, owner=params.accumulo_user, group=params.user_group, recursive=True)
    if (name == 'client'):
        dest_conf_dir = params.conf_dir
        configs = {}
        configs.update(params.config['configurations']['accumulo-site'])
        if ('instance.secret' in configs):
            configs.pop('instance.secret')
        if ('trace.token.property.password' in configs):
            configs.pop('trace.token.property.password')
        XmlConfig('accumulo-site.xml', conf_dir=dest_conf_dir, configurations=configs, configuration_attributes=params.config['configuration_attributes']['accumulo-site'], owner=params.accumulo_user, group=params.user_group, mode=420)
        File(format('{dest_conf_dir}/accumulo-env.sh'), mode=420, group=params.user_group, owner=params.accumulo_user, content=InlineTemplate(params.env_sh_template))
    else:
        dest_conf_dir = params.server_conf_dir
        Directory(params.server_conf_dir, mode=448, owner=params.accumulo_user, group=params.user_group, recursive=True)
        configs = {}
        configs.update(params.config['configurations']['accumulo-site'])
        configs['instance.secret'] = str(params.config['configurations']['accumulo-env']['instance_secret'])
        configs['trace.token.property.password'] = str(params.trace_password)
        XmlConfig('accumulo-site.xml', conf_dir=dest_conf_dir, configurations=configs, configuration_attributes=params.config['configuration_attributes']['accumulo-site'], owner=params.accumulo_user, group=params.user_group, mode=384)
        Directory(params.pid_dir, owner=params.accumulo_user, group=params.user_group, recursive=True)
        Directory(params.log_dir, owner=params.accumulo_user, group=params.user_group, recursive=True)
        File(format('{dest_conf_dir}/accumulo-env.sh'), mode=420, group=params.user_group, owner=params.accumulo_user, content=InlineTemplate(params.server_env_sh_template))
    configs = {}
    configs['instance.name'] = params.instance_name
    configs['instance.zookeeper.host'] = params.config['configurations']['accumulo-site']['instance.zookeeper.host']
    PropertiesFile(format('{dest_conf_dir}/client.conf'), properties=configs, owner=params.accumulo_user, group=params.user_group)
    if (params.log4j_props != None):
        File(format('{params.conf_dir}/log4j.properties'), mode=420, group=params.user_group, owner=params.accumulo_user, content=params.log4j_props)
    else:
        File(format('{params.conf_dir}/log4j.properties'), mode=420, group=params.user_group, owner=params.hbase_user)
    accumulo_TemplateConfig('auditLog.xml', dest_conf_dir)
    accumulo_TemplateConfig('generic_logger.xml', dest_conf_dir)
    accumulo_TemplateConfig('monitor_logger.xml', dest_conf_dir)
    accumulo_StaticFile('accumulo-metrics.xml', dest_conf_dir)
    accumulo_StaticFile('tracers', dest_conf_dir)
    accumulo_StaticFile('gc', dest_conf_dir)
    accumulo_StaticFile('monitor', dest_conf_dir)
    accumulo_StaticFile('slaves', dest_conf_dir)
    accumulo_StaticFile('masters', dest_conf_dir)
    if params.has_metric_collector:
        accumulo_TemplateConfig('hadoop-metrics2-accumulo.properties', dest_conf_dir)
    if (name == 'master'):
        params.HdfsDirectory(format('/user/{params.accumulo_user}'), action='create_delayed', owner=params.accumulo_user, mode=448)
        params.HdfsDirectory(format('{params.parent_dir}'), action='create_delayed', owner=params.accumulo_user, mode=448)
        params.HdfsDirectory(None, action='create')
        passfile = format('{params.exec_tmp_dir}/pass')
        try:
            File(passfile, mode=384, group=params.user_group, owner=params.accumulo_user, content=InlineTemplate('{{root_password}}\n{{root_password}}\n'))
            Execute(format('cat {passfile} | {params.daemon_script} init --instance-name {params.instance_name} --clear-instance-name >{params.log_dir}/accumulo-init.out 2>{params.log_dir}/accumulo-init.err'), not_if=as_user(format('{params.kinit_cmd} {params.hadoop_bin_dir}/hadoop --config {params.hadoop_conf_dir} fs -stat {params.instance_volumes}'), params.accumulo_user), user=params.accumulo_user)
        finally:
            os.remove(passfile)
    if (name == 'tracer'):
        create_user(params.trace_user, params.trace_password)
        create_user(params.smoke_test_user, params.smoke_test_password)
