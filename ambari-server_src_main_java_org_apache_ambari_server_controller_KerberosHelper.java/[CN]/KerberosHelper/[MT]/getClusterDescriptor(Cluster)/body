{
  KerberosDescriptor descriptor;
  PredicateBuilder pb=new PredicateBuilder();
  Predicate predicate=pb.begin().property("Artifacts/cluster_name").equals(cluster.getClusterName()).and().property(ArtifactResourceProvider.ARTIFACT_NAME_PROPERTY).equals("kerberos_descriptor").end().toPredicate();
synchronized (KerberosHelper.class) {
    if (clusterController == null) {
      clusterController=ClusterControllerHelper.getClusterController();
    }
  }
  ResourceProvider artifactProvider=clusterController.ensureResourceProvider(Resource.Type.Artifact);
  Request request=new RequestImpl(Collections.<String>emptySet(),Collections.<Map<String,Object>>emptySet(),Collections.<String,String>emptyMap(),null);
  Set<Resource> response=null;
  try {
    response=artifactProvider.getResources(request,predicate);
  }
 catch (  SystemException e) {
    e.printStackTrace();
    throw new AmbariException("An unknown error occurred while trying to obtain the cluster kerberos descriptor",e);
  }
catch (  UnsupportedPropertyException e) {
    e.printStackTrace();
    throw new AmbariException("An unknown error occurred while trying to obtain the cluster kerberos descriptor",e);
  }
catch (  NoSuchParentResourceException e) {
    e.printStackTrace();
    throw new AmbariException("An unknown error occurred while trying to obtain the cluster kerberos descriptor",e);
  }
catch (  NoSuchResourceException e) {
  }
  if (response != null && !response.isEmpty()) {
    Resource descriptorResource=response.iterator().next();
    String descriptor_data=(String)descriptorResource.getPropertyValue(ArtifactResourceProvider.ARTIFACT_DATA_PROPERTY);
    descriptor=KerberosDescriptor.fromJSON(descriptor_data);
  }
 else {
    StackId stackId=cluster.getCurrentStackVersion();
    descriptor=ambariMetaInfo.getKerberosDescriptor(stackId.getStackName(),stackId.getStackVersion());
  }
  return descriptor;
}
