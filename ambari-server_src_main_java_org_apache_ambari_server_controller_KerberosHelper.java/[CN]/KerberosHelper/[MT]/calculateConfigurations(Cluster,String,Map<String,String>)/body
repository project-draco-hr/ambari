{
  Map<String,Map<String,String>> configurations=new HashMap<String,Map<String,String>>();
  Map<String,Map<String,String>> configurationTags=ambariManagementController.findConfigurationTagsWithOverrides(cluster,hostname);
  if (configurationTags.get(Configuration.GLOBAL_CONFIG_TAG) != null) {
    configHelper.applyCustomConfig(configurations,Configuration.GLOBAL_CONFIG_TAG,Configuration.RCA_ENABLED_PROPERTY,"false",false);
  }
  Map<String,Map<String,String>> configProperties=configHelper.getEffectiveConfigProperties(cluster,configurationTags);
  for (  Map.Entry<String,Map<String,String>> entry : configProperties.entrySet()) {
    String type=entry.getKey();
    Map<String,String> allLevelMergedConfig=entry.getValue();
    Map<String,String> configuration=configurations.get(type);
    if (configuration == null) {
      configuration=new HashMap<String,String>(allLevelMergedConfig);
    }
 else {
      Map<String,String> mergedConfig=configHelper.getMergedConfig(allLevelMergedConfig,configuration);
      configuration.clear();
      configuration.putAll(mergedConfig);
    }
    configurations.put(type,configuration);
  }
  Map<String,String> generalProperties=configurations.get("");
  if (generalProperties == null) {
    generalProperties=new HashMap<String,String>();
    configurations.put("",generalProperties);
  }
  if (kerberosDescriptorProperties != null) {
    generalProperties.putAll(kerberosDescriptorProperties);
  }
  generalProperties.put("host",hostname);
  generalProperties.put("hostname",hostname);
  generalProperties.put("cluster_name",cluster.getClusterName());
  Map<String,String> componentHosts=new HashMap<String,String>();
  for (  Map.Entry<String,Service> service : cluster.getServices().entrySet()) {
    for (    Map.Entry<String,ServiceComponent> serviceComponent : service.getValue().getServiceComponents().entrySet()) {
      if (StageUtils.getComponentToClusterInfoKeyMap().keySet().contains(serviceComponent.getValue().getName())) {
        componentHosts.put(StageUtils.getComponentToClusterInfoKeyMap().get(serviceComponent.getValue().getName()),StringUtils.join(serviceComponent.getValue().getServiceComponentHosts().keySet(),","));
      }
    }
  }
  configurations.put("clusterHostInfo",componentHosts);
  return configurations;
}
