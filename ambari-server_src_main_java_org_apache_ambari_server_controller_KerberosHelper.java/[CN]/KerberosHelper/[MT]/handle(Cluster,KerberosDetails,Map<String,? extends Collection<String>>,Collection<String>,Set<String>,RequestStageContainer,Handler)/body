{
  Map<String,Service> services=cluster.getServices();
  if ((services != null) && !services.isEmpty()) {
    SecurityState desiredSecurityState=handler.getNewServiceSecurityState();
    String clusterName=cluster.getClusterName();
    Map<String,Host> hosts=clusters.getHostsForCluster(clusterName);
    if ((hosts != null) && !hosts.isEmpty()) {
      List<ServiceComponentHost> serviceComponentHostsToProcess=new ArrayList<ServiceComponentHost>();
      KerberosDescriptor kerberosDescriptor=getKerberosDescriptor(cluster);
      KerberosIdentityDataFileWriter kerberosIdentityDataFileWriter=null;
      Map<String,String> kerberosDescriptorProperties=kerberosDescriptor.getProperties();
      Map<String,Map<String,String>> kerberosConfigurations=new HashMap<String,Map<String,String>>();
      Set<String> hostsWithValidKerberosClient=new HashSet<String>();
      if (hostsToForceKerberosOperations != null) {
        hostsWithValidKerberosClient.addAll(hostsToForceKerberosOperations);
      }
      File dataDirectory=createTemporaryDirectory();
      File identityDataFile=new File(dataDirectory,KerberosIdentityDataFileWriter.DATA_FILE_NAME);
      try {
        for (        Host host : hosts.values()) {
          String hostname=host.getHostName();
          List<ServiceComponentHost> serviceComponentHosts=cluster.getServiceComponentHosts(hostname);
          if ((serviceComponentHosts != null) && !serviceComponentHosts.isEmpty()) {
            Map<String,Map<String,String>> configurations=calculateConfigurations(cluster,hostname,kerberosDescriptorProperties);
            for (            ServiceComponentHost sch : serviceComponentHosts) {
              String serviceName=sch.getServiceName();
              String componentName=sch.getServiceComponentName();
              if (Service.Type.KERBEROS.name().equals(serviceName) && Role.KERBEROS_CLIENT.name().equals(componentName) && (sch.getState() == State.INSTALLED)) {
                hostsWithValidKerberosClient.add(hostname);
              }
              if ((serviceComponentFilter == null) || serviceComponentFilter.containsKey(serviceName)) {
                Collection<String> componentFilter=(serviceComponentFilter == null) ? null : serviceComponentFilter.get(serviceName);
                KerberosServiceDescriptor serviceDescriptor=kerberosDescriptor.getService(serviceName);
                if (serviceDescriptor != null) {
                  int identitiesAdded=0;
                  List<KerberosIdentityDescriptor> serviceIdentities=serviceDescriptor.getIdentities(true);
                  if (kerberosIdentityDataFileWriter == null) {
                    kerberosIdentityDataFileWriter=kerberosIdentityDataFileWriterFactory.createKerberosIdentityDataFileWriter(identityDataFile);
                  }
                  identitiesAdded+=addIdentities(kerberosIdentityDataFileWriter,serviceIdentities,identityFilter,hostname,serviceName,componentName,kerberosConfigurations,configurations);
                  if (((componentFilter == null) || componentFilter.contains(componentName)) && handler.shouldProcess(desiredSecurityState,sch)) {
                    KerberosComponentDescriptor componentDescriptor=serviceDescriptor.getComponent(componentName);
                    if (componentDescriptor != null) {
                      List<KerberosIdentityDescriptor> componentIdentities=componentDescriptor.getIdentities(true);
                      mergeConfigurations(kerberosConfigurations,componentDescriptor.getConfigurations(true),configurations);
                      identitiesAdded+=addIdentities(kerberosIdentityDataFileWriter,componentIdentities,identityFilter,hostname,serviceName,componentName,kerberosConfigurations,configurations);
                    }
                  }
                  if (identitiesAdded > 0) {
                    serviceComponentHostsToProcess.add(sch);
                  }
                }
              }
            }
          }
        }
      }
 catch (      IOException e) {
        String message=String.format("Failed to write index file - %s",identityDataFile.getAbsolutePath());
        LOG.error(message);
        throw new AmbariException(message,e);
      }
 finally {
        if (kerberosIdentityDataFileWriter != null) {
          try {
            kerberosIdentityDataFileWriter.close();
          }
 catch (          IOException e) {
            LOG.warn("Failed to close the index file writer",e);
          }
        }
      }
      if (!serviceComponentHostsToProcess.isEmpty()) {
        try {
          validateKDCCredentials(cluster);
        }
 catch (        KerberosOperationException e) {
          try {
            FileUtils.deleteDirectory(dataDirectory);
          }
 catch (          Throwable t) {
            LOG.warn(String.format("The data directory (%s) was not deleted due to an error condition - {%s}",dataDirectory.getAbsolutePath(),t.getMessage()),t);
          }
          throw e;
        }
        setAuthToLocalRules(kerberosDescriptor,cluster,kerberosDetails.getDefaultRealm(),calculateConfigurations(cluster,null,kerberosDescriptorProperties),kerberosConfigurations);
      }
      Map<String,String> clusterEnvProperties=kerberosConfigurations.get(SECURITY_ENABLED_CONFIG_TYPE);
      if (clusterEnvProperties == null) {
        clusterEnvProperties=new HashMap<String,String>();
        kerberosConfigurations.put(SECURITY_ENABLED_CONFIG_TYPE,clusterEnvProperties);
      }
      clusterEnvProperties.put(SECURITY_ENABLED_PROPERTY_NAME,(kerberosDetails.getSecurityType() == SecurityType.KERBEROS) ? "true" : "false");
      Map<String,Set<String>> clusterHostInfo=StageUtils.getClusterHostInfo(hosts,cluster);
      String clusterHostInfoJson=StageUtils.getGson().toJson(clusterHostInfo);
      Map<String,String> hostParams=customCommandExecutionHelper.createDefaultHostParams(cluster);
      String hostParamsJson=StageUtils.getGson().toJson(hostParams);
      String ambariServerHostname=StageUtils.getHostName();
      ServiceComponentHostServerActionEvent event=new ServiceComponentHostServerActionEvent("AMBARI_SERVER",ambariServerHostname,System.currentTimeMillis());
      RoleCommandOrder roleCommandOrder=ambariManagementController.getRoleCommandOrder(cluster);
      if (requestStageContainer == null) {
        requestStageContainer=new RequestStageContainer(actionManager.getNextRequestId(),null,requestFactory,actionManager);
      }
      handler.createStages(cluster,hosts,kerberosConfigurations,clusterHostInfoJson,hostParamsJson,event,roleCommandOrder,kerberosDetails,dataDirectory,requestStageContainer,serviceComponentHostsToProcess,hostsWithValidKerberosClient);
      handler.addFinalizeOperationStage(cluster,clusterHostInfoJson,hostParamsJson,event,dataDirectory,roleCommandOrder,requestStageContainer);
      for (      ServiceComponentHost sch : serviceComponentHostsToProcess) {
        SecurityState newSecurityState;
        newSecurityState=handler.getNewDesiredSCHSecurityState();
        if (newSecurityState != null) {
          sch.setDesiredSecurityState(newSecurityState);
        }
        newSecurityState=handler.getNewSCHSecurityState();
        if (newSecurityState != null) {
          sch.setSecurityState(newSecurityState);
        }
      }
    }
    if (desiredSecurityState != null) {
      for (      Service service : services.values()) {
        if ((serviceComponentFilter == null) || serviceComponentFilter.containsKey(service.getName())) {
          service.setSecurityState(desiredSecurityState);
        }
      }
    }
  }
  return requestStageContainer;
}
