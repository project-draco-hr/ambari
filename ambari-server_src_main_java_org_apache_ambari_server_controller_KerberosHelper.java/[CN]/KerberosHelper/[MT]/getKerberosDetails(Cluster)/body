{
  KerberosDetails kerberosDetails=new KerberosDetails();
  if (cluster == null) {
    String message="The cluster object is not available";
    LOG.error(message);
    throw new AmbariException(message);
  }
  Config configKrb5Conf=cluster.getDesiredConfigByType("krb5-conf");
  if (configKrb5Conf == null) {
    String message="The 'krb5-conf' configuration is not available";
    LOG.error(message);
    throw new AmbariException(message);
  }
  Map<String,String> krb5ConfProperties=configKrb5Conf.getProperties();
  if (krb5ConfProperties == null) {
    String message="The 'krb5-conf' configuration properties are not available";
    LOG.error(message);
    throw new AmbariException(message);
  }
  Config configKerberosEnv=cluster.getDesiredConfigByType("kerberos-env");
  if (configKerberosEnv == null) {
    String message="The 'kerberos-env' configuration is not available";
    LOG.error(message);
    throw new AmbariException(message);
  }
  Map<String,String> kerberosEnvProperties=configKerberosEnv.getProperties();
  if (kerberosEnvProperties == null) {
    String message="The 'kerberos-env' configuration properties are not available";
    LOG.error(message);
    throw new AmbariException(message);
  }
  KDCType kdcType=null;
  String kdcTypeProperty=kerberosEnvProperties.get("kdc_type");
  if (kdcTypeProperty == null) {
    String message="The 'kerberos-env/kdc_type' value must be set to a valid KDC type";
    LOG.error(message);
    throw new IllegalArgumentException(message);
  }
  try {
    kdcType=KDCType.translate(kdcTypeProperty);
  }
 catch (  IllegalArgumentException e) {
    String message=String.format("Invalid 'kdc_type' value: %s",kdcTypeProperty);
    LOG.error(message);
    throw new AmbariException(message);
  }
  kerberosDetails.setSecurityType(cluster.getSecurityType());
  kerberosDetails.setDefaultRealm(krb5ConfProperties.get("realm"));
  kerberosDetails.setKdcType((kdcType == null) ? KDCType.MIT_KDC : kdcType);
  kerberosDetails.setKerberosEnvProperties(kerberosEnvProperties);
  return kerberosDetails;
}
