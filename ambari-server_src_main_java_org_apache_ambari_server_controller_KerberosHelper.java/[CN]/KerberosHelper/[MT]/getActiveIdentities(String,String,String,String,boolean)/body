{
  if ((clusterName == null) || clusterName.isEmpty()) {
    throw new IllegalArgumentException("Invalid argument, cluster name is required");
  }
  Cluster cluster=clusters.getCluster(clusterName);
  if (cluster == null) {
    throw new AmbariException(String.format("The cluster object for the cluster name %s is not available",clusterName));
  }
  Map<String,Collection<KerberosIdentityDescriptor>> activeIdentities=new HashMap<String,Collection<KerberosIdentityDescriptor>>();
  Collection<String> hosts;
  if (hostName == null) {
    Map<String,Host> hostMap=clusters.getHostsForCluster(clusterName);
    if (hostMap == null) {
      hosts=null;
    }
 else {
      hosts=hostMap.keySet();
    }
  }
 else {
    hosts=Collections.singleton(hostName);
  }
  if ((hosts != null) && !hosts.isEmpty()) {
    KerberosDescriptor kerberosDescriptor=getKerberosDescriptor(cluster);
    if (kerberosDescriptor != null) {
      Map<String,String> kerberosDescriptorProperties=kerberosDescriptor.getProperties();
      for (      String hostname : hosts) {
        Map<String,KerberosIdentityDescriptor> hostActiveIdentities=new HashMap<String,KerberosIdentityDescriptor>();
        List<KerberosIdentityDescriptor> identities=getActiveIdentities(cluster,hostname,serviceName,componentName,kerberosDescriptor);
        if (!identities.isEmpty()) {
          Map<String,Map<String,String>> configurations=calculateConfigurations(cluster,hostname,kerberosDescriptorProperties);
          for (          KerberosIdentityDescriptor identity : identities) {
            KerberosPrincipalDescriptor principalDescriptor=identity.getPrincipalDescriptor();
            String principal=null;
            if (principalDescriptor != null) {
              principal=variableReplacementHelper.replaceVariables(principalDescriptor.getValue(),configurations);
            }
            if (principal != null) {
              KerberosKeytabDescriptor keytabDescriptor=identity.getKeytabDescriptor();
              String keytabFile=null;
              if (keytabDescriptor != null) {
                keytabFile=variableReplacementHelper.replaceVariables(keytabDescriptor.getFile(),configurations);
              }
              if (replaceHostNames) {
                principal=principal.replace("_HOST",hostname);
              }
              String uniqueKey=String.format("%s|%s",principal,(keytabFile == null) ? "" : keytabFile);
              if (!hostActiveIdentities.containsKey(uniqueKey)) {
                KerberosPrincipalDescriptor resolvedPrincipalDescriptor=new KerberosPrincipalDescriptor(principal,principalDescriptor.getType(),variableReplacementHelper.replaceVariables(principalDescriptor.getConfiguration(),configurations),variableReplacementHelper.replaceVariables(principalDescriptor.getLocalUsername(),configurations));
                KerberosKeytabDescriptor resolvedKeytabDescriptor;
                if (keytabFile == null) {
                  resolvedKeytabDescriptor=null;
                }
 else {
                  resolvedKeytabDescriptor=new KerberosKeytabDescriptor(keytabFile,variableReplacementHelper.replaceVariables(keytabDescriptor.getOwnerName(),configurations),variableReplacementHelper.replaceVariables(keytabDescriptor.getOwnerAccess(),configurations),variableReplacementHelper.replaceVariables(keytabDescriptor.getGroupName(),configurations),variableReplacementHelper.replaceVariables(keytabDescriptor.getGroupAccess(),configurations),variableReplacementHelper.replaceVariables(keytabDescriptor.getConfiguration(),configurations),keytabDescriptor.isCachable());
                }
                hostActiveIdentities.put(uniqueKey,new KerberosIdentityDescriptor(identity.getName(),resolvedPrincipalDescriptor,resolvedKeytabDescriptor));
              }
            }
          }
        }
        activeIdentities.put(hostname,hostActiveIdentities.values());
      }
    }
  }
  return activeIdentities;
}
