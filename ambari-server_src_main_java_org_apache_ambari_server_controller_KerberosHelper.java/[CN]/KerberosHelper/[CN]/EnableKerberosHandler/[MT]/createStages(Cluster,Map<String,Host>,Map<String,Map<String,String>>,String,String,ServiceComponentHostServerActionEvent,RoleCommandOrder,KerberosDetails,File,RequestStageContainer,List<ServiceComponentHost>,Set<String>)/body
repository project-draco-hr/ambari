{
  if (requestStageContainer == null) {
    requestStageContainer=new RequestStageContainer(actionManager.getNextRequestId(),null,requestFactory,actionManager);
  }
  if (!kerberosConfigurations.isEmpty()) {
    File configFile=new File(dataDirectory,KerberosConfigDataFileWriter.DATA_FILE_NAME);
    KerberosConfigDataFileWriter kerberosConfDataFileWriter=null;
    try {
      kerberosConfDataFileWriter=kerberosConfigDataFileWriterFactory.createKerberosConfigDataFileWriter(configFile);
      for (      Map.Entry<String,Map<String,String>> entry : kerberosConfigurations.entrySet()) {
        String type=entry.getKey();
        Map<String,String> properties=entry.getValue();
        if (properties != null) {
          for (          Map.Entry<String,String> configTypeEntry : properties.entrySet()) {
            kerberosConfDataFileWriter.addRecord(type,configTypeEntry.getKey(),configTypeEntry.getValue(),KerberosConfigDataFileWriter.OPERATION_TYPE_SET);
          }
        }
      }
    }
 catch (    IOException e) {
      String message=String.format("Failed to write kerberos configurations file - %s",configFile.getAbsolutePath());
      LOG.error(message);
      throw new AmbariException(message,e);
    }
 finally {
      if (kerberosConfDataFileWriter != null) {
        try {
          kerberosConfDataFileWriter.close();
        }
 catch (        IOException e) {
          LOG.warn("Failed to close the kerberos configurations file writer",e);
        }
      }
    }
  }
  Map<String,String> commandParameters=new HashMap<String,String>();
  commandParameters.put(KerberosServerAction.AUTHENTICATED_USER_NAME,ambariManagementController.getAuthName());
  commandParameters.put(KerberosServerAction.DATA_DIRECTORY,dataDirectory.getAbsolutePath());
  commandParameters.put(KerberosServerAction.DEFAULT_REALM,kerberosDetails.getDefaultRealm());
  if (kerberosDetails.manageIdentities()) {
    commandParameters.put(KerberosServerAction.KDC_TYPE,kerberosDetails.getKdcType().name());
    commandParameters.put(KerberosServerAction.ADMINISTRATOR_CREDENTIAL,getEncryptedAdministratorCredentials(cluster));
    addCreatePrincipalsStage(cluster,clusterHostInfoJson,hostParamsJson,event,commandParameters,roleCommandOrder,requestStageContainer);
    addCreateKeytabFilesStage(cluster,clusterHostInfoJson,hostParamsJson,event,commandParameters,roleCommandOrder,requestStageContainer);
    addDistributeKeytabFilesStage(cluster,serviceComponentHosts,clusterHostInfoJson,hostParamsJson,commandParameters,roleCommandOrder,requestStageContainer,hostsWithValidKerberosClient);
  }
  addUpdateConfigurationsStage(cluster,clusterHostInfoJson,hostParamsJson,event,commandParameters,roleCommandOrder,requestStageContainer);
  return requestStageContainer.getLastStageId();
}
