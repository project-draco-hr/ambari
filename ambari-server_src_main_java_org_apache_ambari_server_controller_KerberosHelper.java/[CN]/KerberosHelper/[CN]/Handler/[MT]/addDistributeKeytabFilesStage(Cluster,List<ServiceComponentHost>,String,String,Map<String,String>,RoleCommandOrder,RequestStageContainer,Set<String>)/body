{
  Iterator<ServiceComponentHost> iterator=new HashSet<ServiceComponentHost>(serviceComponentHosts).iterator();
  while (iterator.hasNext()) {
    ServiceComponentHost sch=iterator.next();
    if (!hostsWithValidKerberosClient.contains(sch.getHostName())) {
      iterator.remove();
    }
  }
  Stage stage=createNewStage(requestStageContainer.getLastStageId(),cluster,requestStageContainer.getId(),"Distribute Keytabs",clusterHostInfoJson,StageUtils.getGson().toJson(commandParameters),hostParamsJson);
  if (!serviceComponentHosts.isEmpty()) {
    List<String> hostsToUpdate=createUniqueHostList(serviceComponentHosts,Collections.singleton(HostState.HEALTHY));
    Map<String,String> requestParams=new HashMap<String,String>();
    List<RequestResourceFilter> requestResourceFilters=new ArrayList<RequestResourceFilter>();
    RequestResourceFilter reqResFilter=new RequestResourceFilter(Service.Type.KERBEROS.name(),Role.KERBEROS_CLIENT.name(),hostsToUpdate);
    requestResourceFilters.add(reqResFilter);
    ActionExecutionContext actionExecContext=new ActionExecutionContext(cluster.getClusterName(),"SET_KEYTAB",requestResourceFilters,requestParams);
    customCommandExecutionHelper.addExecutionCommandsToStage(actionExecContext,stage,requestParams,false);
  }
  RoleGraph roleGraph=new RoleGraph(roleCommandOrder);
  roleGraph.build(stage);
  requestStageContainer.addStages(roleGraph.getStages());
}
