{
  if (requestStageContainer == null) {
    requestStageContainer=new RequestStageContainer(actionManager.getNextRequestId(),null,requestFactory,actionManager);
  }
  Map<String,String> commandParameters=new HashMap<String,String>();
  commandParameters.put(KerberosServerAction.AUTHENTICATED_USER_NAME,ambariManagementController.getAuthName());
  commandParameters.put(KerberosServerAction.DATA_DIRECTORY,dataDirectory.getAbsolutePath());
  commandParameters.put(KerberosServerAction.DEFAULT_REALM,kerberosDetails.getDefaultRealm());
  commandParameters.put(KerberosServerAction.KDC_TYPE,kerberosDetails.getKdcType().name());
  commandParameters.put(KerberosServerAction.ADMINISTRATOR_CREDENTIAL,getEncryptedAdministratorCredentials(cluster));
  if (!kerberosConfigurations.isEmpty()) {
    Map<String,Collection<String>> configurationsToRemove=new HashMap<String,Collection<String>>();
    File configFile=new File(dataDirectory,KerberosConfigDataFileWriter.DATA_FILE_NAME);
    KerberosConfigDataFileWriter kerberosConfDataFileWriter=null;
    for (    Map.Entry<String,Map<String,String>> entry : kerberosConfigurations.entrySet()) {
      configurationsToRemove.put(entry.getKey(),new HashSet<String>(entry.getValue().keySet()));
    }
    configurationsToRemove.remove("cluster-env");
    if (serviceComponentHosts != null) {
      Set<String> visitedServices=new HashSet<String>();
      for (      ServiceComponentHost sch : serviceComponentHosts) {
        String serviceName=sch.getServiceName();
        if (!visitedServices.contains(serviceName)) {
          StackId stackVersion=sch.getStackVersion();
          visitedServices.add(serviceName);
          if (stackVersion != null) {
            Set<PropertyInfo> serviceProperties=configHelper.getServiceProperties(stackVersion,serviceName,true);
            if (serviceProperties != null) {
              for (              PropertyInfo propertyInfo : serviceProperties) {
                String filename=propertyInfo.getFilename();
                if (filename != null) {
                  String type=ConfigHelper.fileNameToConfigType(filename);
                  String propertyName=propertyInfo.getName();
                  Map<String,String> kerberosConfiguration=kerberosConfigurations.get(type);
                  if ((kerberosConfiguration != null) && (kerberosConfiguration.containsKey(propertyName))) {
                    kerberosConfiguration.put(propertyName,propertyInfo.getValue());
                  }
                  Collection<String> propertiesToRemove=configurationsToRemove.get(type);
                  if (propertiesToRemove != null) {
                    propertiesToRemove.remove(propertyName);
                  }
                }
              }
            }
          }
        }
      }
    }
    try {
      kerberosConfDataFileWriter=kerberosConfigDataFileWriterFactory.createKerberosConfigDataFileWriter(configFile);
      for (      Map.Entry<String,Map<String,String>> entry : kerberosConfigurations.entrySet()) {
        String type=entry.getKey();
        Map<String,String> properties=entry.getValue();
        Collection<String> propertiesToRemove=configurationsToRemove.get(type);
        if (properties != null) {
          for (          Map.Entry<String,String> configTypeEntry : properties.entrySet()) {
            String propertyName=configTypeEntry.getKey();
            if ((propertiesToRemove == null) || !propertiesToRemove.contains(propertyName)) {
              String value=configTypeEntry.getValue();
              String operation=(value == null) ? KerberosConfigDataFileWriter.OPERATION_TYPE_REMOVE : KerberosConfigDataFileWriter.OPERATION_TYPE_SET;
              kerberosConfDataFileWriter.addRecord(type,propertyName,value,operation);
            }
          }
        }
      }
      for (      Map.Entry<String,Collection<String>> entry : configurationsToRemove.entrySet()) {
        String type=entry.getKey();
        Collection<String> properties=entry.getValue();
        if (properties != null) {
          for (          String propertyName : properties) {
            kerberosConfDataFileWriter.addRecord(type,propertyName,null,KerberosConfigDataFileWriter.OPERATION_TYPE_REMOVE);
          }
        }
      }
    }
 catch (    IOException e) {
      String message=String.format("Failed to write kerberos configurations file - %s",configFile.getAbsolutePath());
      LOG.error(message);
      throw new AmbariException(message,e);
    }
 finally {
      if (kerberosConfDataFileWriter != null) {
        try {
          kerberosConfDataFileWriter.close();
        }
 catch (        IOException e) {
          LOG.warn("Failed to close the kerberos configurations file writer",e);
        }
      }
    }
  }
  addUpdateConfigurationsStage(cluster,clusterHostInfoJson,hostParamsJson,event,commandParameters,roleCommandOrder,requestStageContainer);
  if (kerberosDetails.manageIdentities()) {
    addDestroyPrincipalsStage(cluster,clusterHostInfoJson,hostParamsJson,event,commandParameters,roleCommandOrder,requestStageContainer);
    addDeleteKeytabFilesStage(cluster,serviceComponentHosts,clusterHostInfoJson,hostParamsJson,commandParameters,roleCommandOrder,requestStageContainer,hostsWithValidKerberosClient);
  }
  return requestStageContainer.getLastStageId();
}
