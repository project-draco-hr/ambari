{
  AmbariLdapAuthoritiesPopulator populator=createMockBuilder(AmbariLdapAuthoritiesPopulator.class).addMockedMethod("createLdapUser").addMockedMethod("addRole").addMockedMethod("removeRole").withConstructor(configuration,helper,userDAO,roleDAO,principalDAO,principalTypeDAO,memberDAO,privilegeDAO).createMock();
  expect(userData.getObjectAttribute("ambari_admin")).andReturn(Boolean.TRUE).andReturn(Boolean.FALSE);
  expect(ldapServerProperties.isGroupMappingEnabled()).andReturn(true).atLeastOnce();
  expect(configuration.getLdapServerProperties()).andReturn(ldapServerProperties).atLeastOnce();
  expect(userEntity.getPrincipal()).andReturn(principalEntity).anyTimes();
  expect(memberDAO.findAllMembersByUser(userEntity)).andReturn(Collections.singletonList(memberEntity)).anyTimes();
  expect(memberEntity.getGroup()).andReturn(groupEntity).anyTimes();
  expect(groupEntity.getPrincipal()).andReturn(groupPrincipalEntity).anyTimes();
  List<PrincipalEntity> principalEntityList=new LinkedList<PrincipalEntity>();
  principalEntityList.add(principalEntity);
  principalEntityList.add(groupPrincipalEntity);
  expect(privilegeDAO.findAllByPrincipal(principalEntityList)).andReturn(Collections.singletonList(privilegeEntity)).anyTimes();
  expect(userDAO.findLdapUserByName(username)).andReturn(null).andReturn(userEntity).times(2);
  populator.createLdapUser(username);
  expectLastCall();
  populator.addRole(userEntity,adminRole);
  expectLastCall();
  populator.removeRole(userEntity,adminRole);
  expectLastCall();
  replayAll();
  populator.getGrantedAuthorities(userData,username);
  populator.getGrantedAuthorities(userData,username);
  verifyAll();
}
