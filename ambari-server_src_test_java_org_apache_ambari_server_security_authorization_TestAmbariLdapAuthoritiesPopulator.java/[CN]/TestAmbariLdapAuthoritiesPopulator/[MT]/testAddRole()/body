{
  AmbariLdapAuthoritiesPopulator populator=new AmbariLdapAuthoritiesPopulator(configuration,helper,userDAO,roleDAO,principalDAO,principalTypeDAO,memberDAO,privilegeDAO);
  RoleEntity roleEntity=createMock(RoleEntity.class);
  Set<UserEntity> userEntities=createMock(Set.class);
  Set<RoleEntity> roleEntities=createMock(Set.class);
  Capture<RoleEntity> createdRole=new Capture<RoleEntity>();
  expect(roleDAO.findByName(adminRole)).andReturn(null).andReturn(roleEntity);
  expect(roleDAO.findByName(adminRole)).andReturn(roleEntity);
  roleDAO.create(capture(createdRole));
  expectLastCall();
  expect(userEntity.getUserName()).andReturn(username).anyTimes();
  expect(userEntity.getRoleEntities()).andReturn(roleEntities).anyTimes();
  expect(roleEntity.getUserEntities()).andReturn(userEntities).anyTimes();
  expect(roleEntities.contains(roleEntity)).andReturn(false);
  expect(roleEntities.contains(roleEntity)).andReturn(true);
  expect(userEntities.add(userEntity)).andReturn(true);
  expect(roleEntities.add(roleEntity)).andReturn(true);
  userDAO.merge(userEntity);
  expectLastCall().andReturn(userEntity);
  roleDAO.merge(roleEntity);
  expectLastCall().andReturn(roleEntity);
  expect(userDAO.findLdapUserByName(username)).andReturn(null).andReturn(userEntity);
  expect(userDAO.findLdapUserByName(username)).andReturn(userEntity);
  userDAO.create(userEntity);
  expectLastCall();
  replayAll();
  populator.addRole(userEntity,adminRole);
  populator.addRole(userEntity,adminRole);
  verifyAll();
  assertEquals(adminRole,createdRole.getValue().getRoleName());
}
