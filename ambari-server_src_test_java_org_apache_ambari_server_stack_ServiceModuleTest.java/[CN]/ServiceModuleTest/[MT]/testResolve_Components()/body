{
  ComponentInfo info1=new ComponentInfo();
  info1.setName("1");
  info1.setCardinality("ALL");
  ComponentInfo info2=new ComponentInfo();
  info2.setName("2");
  ComponentInfo XX=new ComponentInfo();
  XX.setName("XX");
  ComponentInfo info3=new ComponentInfo();
  info3.setName("1");
  info3.setCategory("category");
  ComponentInfo info4=new ComponentInfo();
  info4.setName("4");
  ComponentInfo info5=new ComponentInfo();
  info5.setName("XX");
  info5.setDeleted(true);
  ServiceInfo info=new ServiceInfo();
  ServiceInfo parentInfo=new ServiceInfo();
  List<ComponentInfo> childComponents=info.getComponents();
  childComponents.add(info3);
  childComponents.add(info4);
  childComponents.add(info5);
  List<ComponentInfo> parentComponents=parentInfo.getComponents();
  parentComponents.add(info1);
  parentComponents.add(info2);
  ServiceModule child=createServiceModule(info);
  ServiceModule parent=createServiceModule(parentInfo);
  resolveService(child,parent);
  List<ComponentInfo> components=child.getModuleInfo().getComponents();
  assertEquals(3,components.size());
  Map<String,ComponentInfo> mergedComponents=new HashMap<String,ComponentInfo>();
  for (  ComponentInfo component : components) {
    mergedComponents.put(component.getName(),component);
  }
  assertTrue(mergedComponents.containsKey("1"));
  assertTrue(mergedComponents.containsKey("2"));
  assertTrue(mergedComponents.containsKey("4"));
  assertEquals("ALL",mergedComponents.get("1").getCardinality());
  assertEquals("category",mergedComponents.get("1").getCategory());
}
