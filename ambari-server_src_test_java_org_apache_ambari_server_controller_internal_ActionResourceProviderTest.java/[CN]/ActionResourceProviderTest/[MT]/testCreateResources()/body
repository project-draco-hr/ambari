{
  Resource.Type type=Resource.Type.Action;
  AmbariManagementController managementController=createNiceMock(AmbariManagementController.class);
  ActionManager am=createMock(ActionManager.class);
  RequestStatusResponse response=createNiceMock(RequestStatusResponse.class);
  expect(managementController.getActionManager()).andReturn(am).anyTimes();
  am.createActionDefinition(eq("a1"),eq(ActionType.SYSTEM),eq("fileName"),eq("desc"),eq((String)null),eq((String)null),eq(TargetHostType.ANY),eq(Short.valueOf("60")));
  replay(managementController,am,response);
  ResourceProvider provider=AbstractControllerResourceProvider.getResourceProvider(type,PropertyHelper.getPropertyIds(type),PropertyHelper.getKeyPropertyIds(type),managementController);
  ((ActionResourceProvider)provider).setEnableExperimental(true);
  AbstractResourceProviderTest.TestObserver observer=new AbstractResourceProviderTest.TestObserver();
  ((ObservableResourceProvider)provider).addObserver(observer);
  Set<Map<String,Object>> propertySet=new LinkedHashSet<Map<String,Object>>();
  Map<String,Object> properties=new LinkedHashMap<String,Object>();
  properties.put(ActionResourceProvider.ACTION_NAME_PROPERTY_ID,"a1");
  properties.put(ActionResourceProvider.ACTION_TYPE_PROPERTY_ID,"SYSTEM");
  properties.put(ActionResourceProvider.TARGET_HOST_PROPERTY_ID,"ANY");
  properties.put(ActionResourceProvider.DESCRIPTION_PROPERTY_ID,"desc");
  properties.put(ActionResourceProvider.INPUTS_PROPERTY_ID,"fileName");
  propertySet.add(properties);
  Request request=PropertyHelper.getCreateRequest(propertySet,null);
  provider.createResources(request);
  ResourceProviderEvent lastEvent=observer.getLastEvent();
  Assert.assertNotNull(lastEvent);
  Assert.assertEquals(Resource.Type.Action,lastEvent.getResourceType());
  Assert.assertEquals(ResourceProviderEvent.Type.Create,lastEvent.getType());
  Assert.assertEquals(request,lastEvent.getRequest());
  Assert.assertNull(lastEvent.getPredicate());
  verify(managementController,response);
}
