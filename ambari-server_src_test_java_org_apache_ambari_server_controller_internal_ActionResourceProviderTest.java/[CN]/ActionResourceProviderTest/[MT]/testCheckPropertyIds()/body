{
  Set<String> propertyIds=new HashSet<String>();
  propertyIds.add("foo");
  propertyIds.add("cat1/foo");
  propertyIds.add("cat2/bar");
  propertyIds.add("cat2/baz");
  propertyIds.add("cat3/sub1/bam");
  propertyIds.add("cat4/sub2/sub3/bat");
  propertyIds.add("cat5/subcat5/map");
  Map<Resource.Type,String> keyPropertyIds=new HashMap<Resource.Type,String>();
  AmbariManagementController managementController=createMock(AmbariManagementController.class);
  AbstractResourceProvider provider=(AbstractResourceProvider)AbstractResourceProvider.getResourceProvider(Resource.Type.Action,propertyIds,keyPropertyIds,managementController);
  Set<String> unsupported=provider.checkPropertyIds(Collections.singleton("foo"));
  Assert.assertTrue(unsupported.isEmpty());
  Assert.assertTrue(provider.checkPropertyIds(Collections.singleton("cat5/subcat5/map/key")).isEmpty());
  unsupported=provider.checkPropertyIds(Collections.singleton("bar"));
  Assert.assertEquals(1,unsupported.size());
  Assert.assertTrue(unsupported.contains("bar"));
  unsupported=provider.checkPropertyIds(Collections.singleton("cat1/foo"));
  Assert.assertTrue(unsupported.isEmpty());
  unsupported=provider.checkPropertyIds(Collections.singleton("cat1"));
  Assert.assertTrue(unsupported.isEmpty());
  unsupported=provider.checkPropertyIds(Collections.singleton("parameters/unknown_property"));
  Assert.assertTrue(unsupported.isEmpty());
}
