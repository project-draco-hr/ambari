{
  m_dao=createStrictMock(AlertDispatchDAO.class);
  m_dispatchFactory=createStrictMock(DispatchFactory.class);
  m_metaInfo=createNiceMock(AmbariMetaInfo.class);
  m_injector=Guice.createInjector(Modules.override(new InMemoryDefaultTestModule()).with(new MockModule()));
  Assert.assertNotNull(m_injector);
  for (int i=0; i < 5; i++) {
    AlertDefinitionEntity definition=new AlertDefinitionEntity();
    definition.setDefinitionName("Alert Definition " + i);
    definition.setServiceName("Service " + i);
    definition.setComponentName(null);
    definition.setClusterId(1L);
    definition.setHash(UUID.randomUUID().toString());
    definition.setScheduleInterval(Integer.valueOf(60));
    definition.setScope(Scope.SERVICE);
    definition.setSource("{\"type\" : \"SCRIPT\"}");
    definition.setSourceType(SourceType.SCRIPT);
    m_definitions.add(definition);
  }
  calendar.clear();
  calendar.set(2014,Calendar.JANUARY,1);
  for (  AlertDefinitionEntity definition : m_definitions) {
    for (int i=0; i < 10; i++) {
      AlertHistoryEntity history=new AlertHistoryEntity();
      history.setServiceName(definition.getServiceName());
      history.setClusterId(1L);
      history.setAlertDefinition(definition);
      history.setAlertLabel(definition.getDefinitionName() + " " + i);
      history.setAlertText(definition.getDefinitionName() + " " + i);
      history.setAlertTimestamp(calendar.getTimeInMillis());
      history.setHostName(HOSTNAME);
      history.setAlertState(AlertState.OK);
      if (i == 0 || i == 5) {
        history.setAlertState(AlertState.CRITICAL);
      }
      calendar.add(Calendar.DATE,1);
      m_histories.add(history);
    }
  }
}
