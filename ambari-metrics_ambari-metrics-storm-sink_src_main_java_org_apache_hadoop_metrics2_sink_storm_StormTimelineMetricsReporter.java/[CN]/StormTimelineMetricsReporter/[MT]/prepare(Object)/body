{
  LOG.info("Preparing Storm Metrics Reporter");
  try {
    try {
      hostname=InetAddress.getLocalHost().getHostName();
      if ((hostname == null) || (!hostname.contains("."))) {
        hostname=InetAddress.getLocalHost().getCanonicalHostName();
      }
    }
 catch (    UnknownHostException e) {
      LOG.error("Could not identify hostname.");
      throw new RuntimeException("Could not identify hostname.",e);
    }
    Configuration configuration=new Configuration("/storm-metrics2.properties");
    collectorHosts=parseHostsStringIntoCollection(configuration.getProperty(COLLECTOR_HOSTS_PROPERTY));
    protocol=configuration.getProperty(COLLECTOR_PROTOCOL,"http");
    port=configuration.getProperty(COLLECTOR_PORT,"6188");
    zkQuorum=configuration.getProperty(ZOOKEEPER_QUORUM);
    timeoutSeconds=configuration.getProperty(METRICS_POST_TIMEOUT_SECONDS) != null ? Integer.parseInt(configuration.getProperty(METRICS_POST_TIMEOUT_SECONDS)) : DEFAULT_POST_TIMEOUT_SECONDS;
    applicationId=configuration.getProperty(CLUSTER_REPORTER_APP_ID,DEFAULT_CLUSTER_REPORTER_APP_ID);
    if (protocol.contains("https")) {
      String trustStorePath=configuration.getProperty(SSL_KEYSTORE_PATH_PROPERTY).trim();
      String trustStoreType=configuration.getProperty(SSL_KEYSTORE_TYPE_PROPERTY).trim();
      String trustStorePwd=configuration.getProperty(SSL_KEYSTORE_PASSWORD_PROPERTY).trim();
      loadTruststore(trustStorePath,trustStoreType,trustStorePwd);
    }
  }
 catch (  Exception e) {
    LOG.warn("Could not initialize metrics collector, please specify " + "protocol, host, port, appId, zkQuorum under $STORM_HOME/conf/storm-metrics2.properties ",e);
  }
  super.init();
}
