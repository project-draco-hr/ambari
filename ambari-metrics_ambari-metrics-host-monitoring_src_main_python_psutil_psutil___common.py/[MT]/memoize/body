def memoize(fun):
    'A simple memoize decorator for functions supporting (hashable)\n    positional arguments.\n    It also provides a cache_clear() function for clearing the cache:\n\n    >>> @memoize\n    ... def foo()\n    ...     return 1\n    ...\n    >>> foo()\n    1\n    >>> foo.cache_clear()\n    >>>\n    '

    @wraps(fun)
    def wrapper(*args, **kwargs):
        key = (args, frozenset(sorted(kwargs.items())))
        lock.acquire()
        try:
            try:
                return cache[key]
            except KeyError:
                ret = cache[key] = fun(*args, **kwargs)
        finally:
            lock.release()
        return ret

    def cache_clear():
        'Clear cache.'
        lock.acquire()
        try:
            cache.clear()
        finally:
            lock.release()
    lock = threading.RLock()
    cache = {}
    wrapper.cache_clear = cache_clear
    return wrapper
