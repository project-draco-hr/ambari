{
  List<StageEntity> stageEntities=stageDAO.findByCommandStatuses(HostRoleStatus.IN_PROGRESS_STATUSES);
  @Experimental boolean useConcurrentStageProcessing=configuration.isExperimentalConcurrentStageProcessingEnabled();
  if (useConcurrentStageProcessing) {
    ParallelLoopResult<Stage> loopResult=Parallel.forLoop(stageEntities,new LoopBody<StageEntity,Stage>(){
      @Override public Stage run(      StageEntity stageEntity){
        return stageFactory.createExisting(stageEntity);
      }
    }
);
    if (loopResult.getIsCompleted()) {
      return loopResult.getResult();
    }
 else {
      List<Stage> stages=loopResult.getResult();
      for (int i=0; i < stages.size(); i++) {
        if (stages.get(i) == null) {
          stages.set(i,stageFactory.createExisting(stageEntities.get(i)));
        }
      }
      return stages;
    }
  }
 else {
    List<Stage> stages=new ArrayList<>(stageEntities.size());
    for (    StageEntity stageEntity : stageEntities) {
      stages.add(stageFactory.createExisting(stageEntity));
    }
    return stages;
  }
}
