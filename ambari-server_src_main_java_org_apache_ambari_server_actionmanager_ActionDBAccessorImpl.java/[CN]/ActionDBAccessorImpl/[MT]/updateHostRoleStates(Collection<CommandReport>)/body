{
  Map<Long,CommandReport> taskReports=new HashMap<Long,CommandReport>();
  for (  CommandReport report : reports) {
    taskReports.put(report.getTaskId(),report);
  }
  long now=System.currentTimeMillis();
  List<Long> requestsToCheck=new ArrayList<Long>();
  List<Long> abortedCommandUpdates=new ArrayList<Long>();
  List<HostRoleCommandEntity> commandEntities=hostRoleCommandDAO.findByPKs(taskReports.keySet());
  for (  HostRoleCommandEntity commandEntity : commandEntities) {
    CommandReport report=taskReports.get(commandEntity.getTaskId());
    boolean statusChanged=false;
switch (commandEntity.getStatus()) {
case ABORTED:
      abortedCommandUpdates.add(commandEntity.getTaskId());
    break;
default :
  HostRoleStatus status=HostRoleStatus.valueOf(report.getStatus());
if (status == HostRoleStatus.FAILED && commandEntity.isRetryAllowed()) {
  status=HostRoleStatus.HOLDING_FAILED;
  if (commandEntity.isFailureAutoSkipped()) {
    status=HostRoleStatus.SKIPPED_FAILED;
  }
}
commandEntity.setStatus(status);
statusChanged=true;
break;
}
commandEntity.setStdOut(report.getStdOut().getBytes());
commandEntity.setStdError(report.getStdErr().getBytes());
commandEntity.setStructuredOut(report.getStructuredOut() == null ? null : report.getStructuredOut().getBytes());
commandEntity.setExitcode(report.getExitCode());
if (HostRoleStatus.getCompletedStates().contains(commandEntity.getStatus())) {
commandEntity.setEndTime(now);
String actionId=report.getActionId();
long[] requestStageIds=StageUtils.getRequestStage(actionId);
long requestId=requestStageIds[0];
long stageId=requestStageIds[1];
if (statusChanged) {
auditLog(commandEntity,requestId);
}
if (requestDAO.getLastStageId(requestId).equals(stageId)) {
requestsToCheck.add(requestId);
}
}
}
if (!commandEntities.isEmpty()) {
hostRoleCommandDAO.mergeAll(commandEntities);
}
hostRoleCommandCache.invalidateAll(abortedCommandUpdates);
for (Long requestId : requestsToCheck) {
endRequestIfCompleted(requestId);
}
}
