def execute(parameters=None, host_name=None):
    '\n  Returns a tuple containing the result code and a pre-formatted result label\n\n  Keyword arguments:\n  parameters (dictionary): a mapping of parameter key to value\n  host_name (string): the name of this host where the alert is running\n  '
    if (parameters is None):
        return ('UNKNOWN', ['There were no parameters supplied to the script.'])
    thrift_port = THRIFT_PORT_DEFAULT
    if (HIVE_SERVER_THRIFT_PORT_KEY in parameters):
        thrift_port = int(parameters[HIVE_SERVER_THRIFT_PORT_KEY])
    security_enabled = False
    if (SECURITY_ENABLED_KEY in parameters):
        security_enabled = (str(parameters[SECURITY_ENABLED_KEY]).upper() == 'TRUE')
    hive_server2_authentication = HIVE_SERVER2_AUTHENTICATION_DEFAULT
    if (HIVE_SERVER2_AUTHENTICATION_KEY in parameters):
        hive_server2_authentication = parameters[HIVE_SERVER2_AUTHENTICATION_KEY]
    smokeuser = SMOKEUSER_DEFAULT
    if (SMOKEUSER_KEY in parameters):
        smokeuser = parameters[SMOKEUSER_KEY]
    result_code = None
    if security_enabled:
        hive_server_principal = HIVE_SERVER_PRINCIPAL_DEFAULT
        if (HIVE_SERVER_PRINCIPAL_KEY in parameters):
            hive_server_principal = parameters[HIVE_SERVER_PRINCIPAL_KEY]
        smokeuser_keytab = SMOKEUSER_KEYTAB_DEFAULT
        if (SMOKEUSER_KEYTAB_KEY in parameters):
            smokeuser_keytab = parameters[SMOKEUSER_KEYTAB_KEY]
        with Environment() as env:
            kinit_path_local = get_kinit_path(['/usr/bin', '/usr/kerberos/bin', '/usr/sbin'])
            kinitcmd = format('{kinit_path_local} -kt {smokeuser_keytab} {smokeuser}; ')
    else:
        hive_server_principal = None
        kinitcmd = None
    try:
        if (host_name is None):
            host_name = socket.getfqdn()
        start_time = time.time()
        try:
            with Environment() as env:
                hive_check.check_thrift_port_sasl(host_name, thrift_port, hive_server2_authentication, hive_server_principal, kinitcmd, smokeuser)
            is_thrift_port_ok = True
        except:
            is_thrift_port_ok = False
        if (is_thrift_port_ok == True):
            result_code = 'OK'
            total_time = (time.time() - start_time)
            label = (OK_MESSAGE % (total_time, thrift_port))
        else:
            result_code = 'CRITICAL'
            label = CRITICAL_MESSAGE.format(host_name, thrift_port)
    except Exception as e:
        label = str(e)
        result_code = 'UNKNOWN'
    return (result_code, [label])
