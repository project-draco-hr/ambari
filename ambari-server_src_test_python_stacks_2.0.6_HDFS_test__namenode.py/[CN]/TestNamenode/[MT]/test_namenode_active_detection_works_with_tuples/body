@patch.object(time, 'sleep')
@patch('resource_management.libraries.functions.namenode_ha_utils.get_namenode_states')
def test_namenode_active_detection_works_with_tuples(self, get_namenode_states_mock, sleep_mock):
    '\n    Checks to ensure that when detecting the NN state, we take into account that both NNs could\n    be returned with the same state forcing us to iterate over the tuple to find the right one\n    '
    import params
    from hdfs_namenode import is_this_namenode_active
    params.namenode_id = 'nn1'
    active_namenodes = [('nn1', 'c6401.ambari.apache.org:50070')]
    standby_namenodes = [('nn2', 'c6402.ambari.apache.org:50070')]
    unknown_namenodes = []
    get_namenode_states_mock.return_value = (active_namenodes, standby_namenodes, unknown_namenodes)
    self.assertTrue(is_this_namenode_active())
    active_namenodes = [('nn1', 'c6401.ambari.apache.org:50070'), ('nn2', 'c6402.ambari.apache.org:50070')]
    standby_namenodes = []
    unknown_namenodes = []
    get_namenode_states_mock.return_value = (active_namenodes, standby_namenodes, unknown_namenodes)
    self.assertTrue(is_this_namenode_active())
    active_namenodes = []
    standby_namenodes = [('nn1', 'c6401.ambari.apache.org:50070'), ('nn2', 'c6402.ambari.apache.org:50070')]
    unknown_namenodes = []
    get_namenode_states_mock.return_value = (active_namenodes, standby_namenodes, unknown_namenodes)
    self.assertFalse(is_this_namenode_active())
