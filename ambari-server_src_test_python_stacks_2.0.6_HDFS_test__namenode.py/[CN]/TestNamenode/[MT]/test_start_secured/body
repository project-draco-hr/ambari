def test_start_secured(self):
    self.executeScript((self.COMMON_SERVICES_PACKAGE_DIR + '/scripts/namenode.py'), classname='NameNode', command='start', config_file='secured.json', stack_version=self.STACK_VERSION, target=RMFTestCase.TARGET_COMMON_SERVICES, call_mocks=[(0, '')])
    self.assert_configure_secured()
    self.assertResourceCalled('Execute', 'ls /hadoop/hdfs/namenode | wc -l  | grep -q ^0$')
    self.assertResourceCalled('Execute', 'hdfs --config /etc/hadoop/conf namenode -format -nonInteractive', path=['/usr/bin'], user='hdfs')
    self.assertResourceCalled('Directory', '/hadoop/hdfs/namenode/namenode-formatted/', create_parents=True)
    self.assertResourceCalled('File', '/etc/hadoop/conf/dfs.exclude', owner='hdfs', content=Template('exclude_hosts_list.j2'), group='hadoop')
    self.assertResourceCalled('Directory', '/var/run/hadoop', owner='hdfs', group='hadoop', mode=493)
    self.assertResourceCalled('Directory', '/var/run/hadoop/hdfs', owner='hdfs', group='hadoop', create_parents=True)
    self.assertResourceCalled('Directory', '/var/log/hadoop/hdfs', owner='hdfs', group='hadoop', create_parents=True)
    self.assertResourceCalled('File', '/var/run/hadoop/hdfs/hadoop-hdfs-namenode.pid', action=['delete'], not_if='ambari-sudo.sh [RMF_ENV_PLACEHOLDER] -H -E test -f /var/run/hadoop/hdfs/hadoop-hdfs-namenode.pid && ambari-sudo.sh [RMF_ENV_PLACEHOLDER] -H -E pgrep -F /var/run/hadoop/hdfs/hadoop-hdfs-namenode.pid')
    self.assertResourceCalled('Execute', "ambari-sudo.sh su hdfs -l -s /bin/bash -c '[RMF_EXPORT_PLACEHOLDER]ulimit -c unlimited ;  /usr/lib/hadoop/sbin/hadoop-daemon.sh --config /etc/hadoop/conf start namenode'", environment={'HADOOP_LIBEXEC_DIR': '/usr/lib/hadoop/libexec', }, not_if='ambari-sudo.sh [RMF_ENV_PLACEHOLDER] -H -E test -f /var/run/hadoop/hdfs/hadoop-hdfs-namenode.pid && ambari-sudo.sh [RMF_ENV_PLACEHOLDER] -H -E pgrep -F /var/run/hadoop/hdfs/hadoop-hdfs-namenode.pid')
    self.assertResourceCalled('Execute', '/usr/bin/kinit -kt /etc/security/keytabs/hdfs.headless.keytab hdfs', user='hdfs')
    self.assertResourceCalled('Execute', "hdfs dfsadmin -fs hdfs://c6401.ambari.apache.org:8020 -safemode get | grep 'Safe mode is OFF'", tries=115, try_sleep=10, user='hdfs', logoutput=True)
    self.assertResourceCalled('HdfsResource', '/tmp', immutable_paths=self.DEFAULT_IMMUTABLE_PATHS, security_enabled=True, hadoop_bin_dir='/usr/bin', keytab='/etc/security/keytabs/hdfs.headless.keytab', kinit_path_local='/usr/bin/kinit', user='hdfs', owner='hdfs', dfs_type='', hadoop_conf_dir='/etc/hadoop/conf', type='directory', action=['create_on_execute'], hdfs_resource_ignore_file='/var/lib/ambari-agent/data/.hdfs_resource_ignore', hdfs_site=self.getConfig()['configurations']['hdfs-site'], principal_name='hdfs', default_fs='hdfs://c6401.ambari.apache.org:8020', mode=511)
    self.assertResourceCalled('HdfsResource', '/user/ambari-qa', immutable_paths=self.DEFAULT_IMMUTABLE_PATHS, security_enabled=True, hadoop_bin_dir='/usr/bin', keytab='/etc/security/keytabs/hdfs.headless.keytab', kinit_path_local='/usr/bin/kinit', user='hdfs', dfs_type='', owner='ambari-qa', hadoop_conf_dir='/etc/hadoop/conf', type='directory', action=['create_on_execute'], hdfs_resource_ignore_file='/var/lib/ambari-agent/data/.hdfs_resource_ignore', hdfs_site=self.getConfig()['configurations']['hdfs-site'], principal_name='hdfs', default_fs='hdfs://c6401.ambari.apache.org:8020', mode=504)
    self.assertResourceCalled('HdfsResource', None, immutable_paths=self.DEFAULT_IMMUTABLE_PATHS, security_enabled=True, keytab='/etc/security/keytabs/hdfs.headless.keytab', hadoop_bin_dir='/usr/bin', kinit_path_local='/usr/bin/kinit', user='hdfs', dfs_type='', action=['execute'], hdfs_resource_ignore_file='/var/lib/ambari-agent/data/.hdfs_resource_ignore', hdfs_site=self.getConfig()['configurations']['hdfs-site'], principal_name='hdfs', default_fs='hdfs://c6401.ambari.apache.org:8020', hadoop_conf_dir='/etc/hadoop/conf')
    self.assertNoMoreResources()
