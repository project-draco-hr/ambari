@patch('utils.get_namenode_states')
def test_upgrade_restart(self, get_namenode_states_mock):
    active_namenodes = [('nn1', 'c6401.ambari.apache.org:50070')]
    standby_namenodes = [('nn2', 'c6402.ambari.apache.org:50070')]
    unknown_namenodes = []
    get_namenode_states_mock.return_value = (active_namenodes, standby_namenodes, unknown_namenodes)
    self.executeScript((self.COMMON_SERVICES_PACKAGE_DIR + '/scripts/namenode.py'), classname='NameNode', command='restart', config_file='nn_ru_lzo.json', hdp_stack_version=self.STACK_VERSION, target=RMFTestCase.TARGET_COMMON_SERVICES)
    unknown_namenodes = active_namenodes
    active_namenodes = []
    get_namenode_states_mock.return_value = (active_namenodes, standby_namenodes, unknown_namenodes)
    self.executeScript((self.COMMON_SERVICES_PACKAGE_DIR + '/scripts/namenode.py'), classname='NameNode', command='restart', config_file='nn_ru_lzo.json', hdp_stack_version=self.STACK_VERSION, target=RMFTestCase.TARGET_COMMON_SERVICES)
    self.assertFalse((0 == len(Script.structuredOut)))
    self.assertTrue(Script.structuredOut.has_key('upgrade_type'))
    self.assertTrue(Script.structuredOut.has_key('direction'))
    self.assertEquals('rolling_upgrade', Script.structuredOut['upgrade_type'])
    self.assertEquals('UPGRADE', Script.structuredOut['direction'])
