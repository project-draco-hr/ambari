def test_start_ha_secured(self):
    self.executeScript((self.COMMON_SERVICES_PACKAGE_DIR + '/scripts/namenode.py'), classname='NameNode', command='start', config_file='ha_secured.json', hdp_stack_version=self.STACK_VERSION, target=RMFTestCase.TARGET_COMMON_SERVICES)
    self.assert_configure_secured()
    self.assertResourceCalled('File', '/etc/hadoop/conf/dfs.exclude', owner='hdfs', content=Template('exclude_hosts_list.j2'), group='hadoop')
    self.assertResourceCalled('Directory', '/var/run/hadoop', owner='hdfs', group='hadoop', mode=493)
    self.assertResourceCalled('Directory', '/var/run/hadoop/hdfs', owner='hdfs', recursive=True)
    self.assertResourceCalled('Directory', '/var/log/hadoop/hdfs', owner='hdfs', recursive=True)
    self.assertResourceCalled('File', '/var/run/hadoop/hdfs/hadoop-hdfs-namenode.pid', action=['delete'], not_if='ambari-sudo.sh [RMF_ENV_PLACEHOLDER] -H -E test -f /var/run/hadoop/hdfs/hadoop-hdfs-namenode.pid && ambari-sudo.sh [RMF_ENV_PLACEHOLDER] -H -E pgrep --pidfile /var/run/hadoop/hdfs/hadoop-hdfs-namenode.pid')
    self.assertResourceCalled('Execute', "ambari-sudo.sh su hdfs -l -s /bin/bash -c '[RMF_EXPORT_PLACEHOLDER]ulimit -c unlimited ;  /usr/lib/hadoop/sbin/hadoop-daemon.sh --config /etc/hadoop/conf start namenode'", environment={'HADOOP_LIBEXEC_DIR': '/usr/lib/hadoop/libexec', }, not_if='ambari-sudo.sh [RMF_ENV_PLACEHOLDER] -H -E test -f /var/run/hadoop/hdfs/hadoop-hdfs-namenode.pid && ambari-sudo.sh [RMF_ENV_PLACEHOLDER] -H -E pgrep --pidfile /var/run/hadoop/hdfs/hadoop-hdfs-namenode.pid')
    self.assertResourceCalled('Execute', '/usr/bin/kinit -kt /etc/security/keytabs/hdfs.headless.keytab hdfs', user='hdfs')
    self.assertResourceCalled('Execute', "hdfs dfsadmin -fs hdfs://ns1 -safemode get | grep 'Safe mode is OFF'", tries=180, try_sleep=10, user='hdfs', logoutput=True)
    self.assertResourceCalled('HdfsResource', '/tmp', security_enabled=True, only_if="ambari-sudo.sh su hdfs -l -s /bin/bash -c 'export  PATH=/bin:/usr/bin ; hdfs --config /etc/hadoop/conf haadmin -getServiceState nn1 | grep active'", keytab='/etc/security/keytabs/hdfs.headless.keytab', hadoop_bin_dir='/usr/bin', default_fs='hdfs://ns1', hdfs_site=self.getConfig()['configurations']['hdfs-site'], kinit_path_local='/usr/bin/kinit', principal_name='hdfs', user='hdfs', owner='hdfs', hadoop_conf_dir='/etc/hadoop/conf', type='directory', action=['create_on_execute'], mode=511)
    self.assertResourceCalled('HdfsResource', '/user/ambari-qa', security_enabled=True, only_if="ambari-sudo.sh su hdfs -l -s /bin/bash -c 'export  PATH=/bin:/usr/bin ; hdfs --config /etc/hadoop/conf haadmin -getServiceState nn1 | grep active'", keytab='/etc/security/keytabs/hdfs.headless.keytab', hadoop_bin_dir='/usr/bin', default_fs='hdfs://ns1', hdfs_site=self.getConfig()['configurations']['hdfs-site'], kinit_path_local='/usr/bin/kinit', principal_name='hdfs', user='hdfs', owner='ambari-qa', hadoop_conf_dir='/etc/hadoop/conf', type='directory', action=['create_on_execute'], mode=504)
    self.assertResourceCalled('HdfsResource', None, security_enabled=True, only_if="ambari-sudo.sh su hdfs -l -s /bin/bash -c 'export  PATH=/bin:/usr/bin ; hdfs --config /etc/hadoop/conf haadmin -getServiceState nn1 | grep active'", keytab='/etc/security/keytabs/hdfs.headless.keytab', hadoop_bin_dir='/usr/bin', default_fs='hdfs://ns1', hdfs_site=self.getConfig()['configurations']['hdfs-site'], kinit_path_local='/usr/bin/kinit', principal_name='hdfs', user='hdfs', action=['execute'], hadoop_conf_dir='/etc/hadoop/conf')
    self.assertNoMoreResources()
