{
  Cluster cluster=context.getCluster();
  Map<String,String> commandParams=new HashMap<String,String>();
  commandParams.put(COMMAND_PARAM_CLUSTER_NAME,cluster.getClusterName());
  commandParams.put(COMMAND_PARAM_VERSION,context.getVersion());
  commandParams.put(COMMAND_PARAM_DIRECTION,context.getDirection().name().toLowerCase());
  String itemDetail=entity.getText();
  String stageText=StringUtils.abbreviate(entity.getText(),255);
switch (task.getType()) {
case MANUAL:
{
      ManualTask mt=(ManualTask)task;
      itemDetail=mt.message;
      if (null != mt.summary) {
        stageText=mt.summary;
      }
      entity.setText(itemDetail);
      if (null != mt.structuredOut) {
        commandParams.put(COMMAND_PARAM_STRUCT_OUT,mt.structuredOut);
      }
      break;
    }
case CONFIGURE:
{
    ConfigureTask ct=(ConfigureTask)task;
    Map<String,String> configProperties=ct.getConfigurationProperties(cluster);
    if (configProperties.isEmpty()) {
      stageText="No conditions were met for this configuration task.";
      itemDetail=stageText;
    }
 else {
      commandParams.putAll(configProperties);
      String configType=configProperties.get(ConfigureTask.PARAMETER_CONFIG_TYPE);
      String key=configProperties.get(ConfigureTask.PARAMETER_KEY);
      String value=configProperties.get(ConfigureTask.PARAMETER_VALUE);
      itemDetail=String.format("Updating config %s/%s to %s",configType,key,value);
      if (null != ct.summary) {
        stageText=ct.summary;
      }
 else {
        stageText=String.format("Updating Config %s",configType);
      }
    }
    entity.setText(itemDetail);
    break;
  }
default :
break;
}
ActionExecutionContext actionContext=new ActionExecutionContext(cluster.getClusterName(),Role.AMBARI_SERVER_ACTION.toString(),Collections.<RequestResourceFilter>emptyList(),commandParams);
actionContext.setTimeout(Short.valueOf((short)-1));
actionContext.setIgnoreMaintenance(true);
ExecuteCommandJson jsons=s_commandExecutionHelper.get().getCommandJson(actionContext,cluster);
Stage stage=s_stageFactory.get().createNew(request.getId().longValue(),"/tmp/ambari",cluster.getClusterName(),cluster.getClusterId(),stageText,jsons.getClusterHostInfo(),jsons.getCommandParamsForStage(),jsons.getHostParamsForStage());
stage.setSkippable(skippable);
long stageId=request.getLastStageId() + 1;
if (0L == stageId) {
stageId=1L;
}
stage.setStageId(stageId);
entity.setStageId(Long.valueOf(stageId));
String host=cluster.getAllHostsDesiredConfigs().keySet().iterator().next();
stage.addServerActionCommand(task.getImplementationClass(),getManagementController().getAuthName(),Role.AMBARI_SERVER_ACTION,RoleCommand.EXECUTE,cluster.getClusterName(),host,new ServiceComponentHostServerActionEvent(StageUtils.getHostName(),System.currentTimeMillis()),commandParams,itemDetail,null,Integer.valueOf(1200),allowRetry);
request.addStages(Collections.singletonList(stage));
}
