{
  RepositoryVersionEntity targetRve=s_repoVersionDAO.findMaxByVersion(version);
  if (null == targetRve) {
    LOG.info("Could not find version entity for {}; not setting new configs",version);
    return;
  }
  StackEntity oldStack=cluster.getCurrentClusterVersion().getRepositoryVersion().getStack();
  StackEntity newStack=targetRve.getStack();
  if (oldStack.equals(newStack)) {
    return;
  }
  ConfigHelper configHelper=getManagementController().getConfigHelper();
  Map<String,Map<String,String>> clusterConfigs=null;
  if (direction == Direction.UPGRADE) {
    clusterConfigs=new HashMap<String,Map<String,String>>();
    Set<org.apache.ambari.server.state.PropertyInfo> pi=s_metaProvider.get().getStackProperties(newStack.getStackName(),newStack.getStackVersion());
    for (    PropertyInfo stackProperty : pi) {
      String type=ConfigHelper.fileNameToConfigType(stackProperty.getFilename());
      if (!clusterConfigs.containsKey(type)) {
        clusterConfigs.put(type,new HashMap<String,String>());
      }
      clusterConfigs.get(type).put(stackProperty.getName(),stackProperty.getValue());
    }
    for (    String serviceName : cluster.getServices().keySet()) {
      pi=s_metaProvider.get().getServiceProperties(newStack.getStackName(),newStack.getStackVersion(),serviceName);
      for (      PropertyInfo stackProperty : pi) {
        String type=ConfigHelper.fileNameToConfigType(stackProperty.getFilename());
        if (!clusterConfigs.containsKey(type)) {
          clusterConfigs.put(type,new HashMap<String,String>());
        }
        clusterConfigs.get(type).put(stackProperty.getName(),stackProperty.getValue());
      }
    }
    for (    Map.Entry<String,Map<String,String>> entry : clusterConfigs.entrySet()) {
      Config config=cluster.getDesiredConfigByType(entry.getKey());
      if (null != config) {
        entry.getValue().putAll(config.getProperties());
      }
    }
  }
 else {
  }
  cluster.setDesiredStackVersion(new StackId(newStack.getStackName(),newStack.getStackVersion()),true);
  if (null != clusterConfigs) {
    configHelper.createConfigTypes(cluster,getManagementController(),clusterConfigs,getManagementController().getAuthName(),"Configuration created for Upgrade");
  }
}
