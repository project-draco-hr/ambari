{
  List<RequestResourceFilter> filters=new ArrayList<RequestResourceFilter>();
  for (  TaskWrapper tw : wrapper.getTasks()) {
    filters.add(new RequestResourceFilter(tw.getService(),"",Collections.<String>emptyList()));
  }
  Cluster cluster=context.getCluster();
  Map<String,String> commandParams=getNewParameterMap(request);
  commandParams.put(COMMAND_PARAM_VERSION,context.getVersion());
  commandParams.put(COMMAND_PARAM_DIRECTION,context.getDirection().name().toLowerCase());
  commandParams.put(COMMAND_PARAM_ORIGINAL_STACK,context.getOriginalStackId().getStackId());
  commandParams.put(COMMAND_PARAM_TARGET_STACK,context.getTargetStackId().getStackId());
  commandParams.put(COMMAND_DOWNGRADE_FROM_VERSION,context.getDowngradeFromVersion());
  applyAdditionalParameters(wrapper,commandParams);
  ActionExecutionContext actionContext=new ActionExecutionContext(cluster.getClusterName(),"SERVICE_CHECK",filters,commandParams);
  actionContext.setTimeout(Short.valueOf(s_configuration.getDefaultAgentTaskTimeout(false)));
  actionContext.setRetryAllowed(allowRetry);
  actionContext.setAutoSkipFailures(context.isServiceCheckFailureAutoSkipped());
  actionContext.setMaintenanceModeHostExcluded(true);
  ExecuteCommandJson jsons=s_commandExecutionHelper.get().getCommandJson(actionContext,cluster,context.getEffectiveStackId());
  Stage stage=s_stageFactory.get().createNew(request.getId().longValue(),"/tmp/ambari",cluster.getClusterName(),cluster.getClusterId(),entity.getText(),jsons.getClusterHostInfo(),jsons.getCommandParamsForStage(),jsons.getHostParamsForStage());
  stage.setSkippable(skippable);
  stage.setAutoSkipFailureSupported(supportsAutoSkipOnFailure);
  long stageId=request.getLastStageId() + 1;
  if (0L == stageId) {
    stageId=1L;
  }
  stage.setStageId(stageId);
  entity.setStageId(Long.valueOf(stageId));
  Map<String,String> requestParams=getNewParameterMap(request);
  s_commandExecutionHelper.get().addExecutionCommandsToStage(actionContext,stage,requestParams);
  request.addStages(Collections.singletonList(stage));
}
