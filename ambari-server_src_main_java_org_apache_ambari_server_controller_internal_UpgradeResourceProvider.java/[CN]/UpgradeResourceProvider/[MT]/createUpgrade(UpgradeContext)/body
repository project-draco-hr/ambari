{
  UpgradePack pack=upgradeContext.getUpgradePack();
  Cluster cluster=upgradeContext.getCluster();
  Direction direction=upgradeContext.getDirection();
  Map<String,Object> requestMap=upgradeContext.getUpgradeRequest();
  UpgradeType upgradeType=upgradeContext.getType();
  ConfigHelper configHelper=getManagementController().getConfigHelper();
  String userName=getManagementController().getAuthName();
  final String version=(String)requestMap.get(UPGRADE_VERSION);
  MasterHostResolver resolver=null;
  if (direction.isUpgrade()) {
    resolver=new MasterHostResolver(configHelper,cluster);
  }
 else {
    resolver=new MasterHostResolver(configHelper,cluster,version);
  }
  StackId sourceStackId=null;
  StackId targetStackId=null;
  Set<String> supportedServices=new HashSet<>();
  UpgradeScope scope=UpgradeScope.COMPLETE;
switch (direction) {
case UPGRADE:
    sourceStackId=cluster.getCurrentStackVersion();
  RepositoryVersionEntity targetRepositoryVersion=s_repoVersionDAO.findByStackNameAndVersion(sourceStackId.getStackName(),version);
targetStackId=targetRepositoryVersion.getStackId();
break;
case DOWNGRADE:
sourceStackId=cluster.getCurrentStackVersion();
targetStackId=cluster.getDesiredStackVersion();
break;
}
upgradeContext.setResolver(resolver);
upgradeContext.setSourceAndTargetStacks(sourceStackId,targetStackId);
upgradeContext.setVersion(version);
upgradeContext.setSupportedServices(supportedServices);
upgradeContext.setScope(scope);
if (direction.isDowngrade()) {
if (requestMap.containsKey(UPGRADE_FROM_VERSION)) {
upgradeContext.setDowngradeFromVersion((String)requestMap.get(UPGRADE_FROM_VERSION));
}
 else {
UpgradeEntity lastUpgradeItemForCluster=s_upgradeDAO.findLastUpgradeForCluster(cluster.getClusterId());
upgradeContext.setDowngradeFromVersion(lastUpgradeItemForCluster.getToVersion());
}
}
boolean skipComponentFailures=pack.isComponentFailureAutoSkipped();
boolean skipServiceCheckFailures=pack.isServiceCheckFailureAutoSkipped();
if (requestMap.containsKey(UPGRADE_SKIP_FAILURES)) {
skipComponentFailures=Boolean.parseBoolean((String)requestMap.get(UPGRADE_SKIP_FAILURES));
}
if (requestMap.containsKey(UPGRADE_SKIP_SC_FAILURES)) {
skipServiceCheckFailures=Boolean.parseBoolean((String)requestMap.get(UPGRADE_SKIP_SC_FAILURES));
}
boolean skipManualVerification=false;
if (requestMap.containsKey(UPGRADE_SKIP_MANUAL_VERIFICATION)) {
skipManualVerification=Boolean.parseBoolean((String)requestMap.get(UPGRADE_SKIP_MANUAL_VERIFICATION));
}
upgradeContext.setAutoSkipComponentFailures(skipComponentFailures);
upgradeContext.setAutoSkipServiceCheckFailures(skipServiceCheckFailures);
upgradeContext.setAutoSkipManualVerification(skipManualVerification);
List<UpgradeGroupHolder> groups=s_upgradeHelper.createSequence(pack,upgradeContext);
if (groups.isEmpty()) {
throw new AmbariException("There are no groupings available");
}
if (pack.getType() == UpgradeType.NON_ROLLING) {
boolean foundGroupWithNameUPDATE_DESIRED_STACK_ID=false;
for (UpgradeGroupHolder group : groups) {
if (group.name.equalsIgnoreCase(CONST_UPGRADE_GROUP_NAME)) {
foundGroupWithNameUPDATE_DESIRED_STACK_ID=true;
break;
}
}
if (foundGroupWithNameUPDATE_DESIRED_STACK_ID == false) {
throw new AmbariException(String.format("NonRolling Upgrade Pack %s requires a Group with name %s",pack.getName(),CONST_UPGRADE_GROUP_NAME));
}
}
List<UpgradeGroupEntity> groupEntities=new ArrayList<>();
RequestStageContainer req=createRequest(direction,version);
if (pack.getType() == UpgradeType.ROLLING) {
applyStackAndProcessConfigurations(targetStackId.getStackName(),cluster,version,direction,pack,userName);
}
ConfigUpgradePack configUpgradePack=ConfigurationPackBuilder.build(pack,sourceStackId);
Set<Service> services=new HashSet<>(cluster.getServices().values());
Map<Service,Set<ServiceComponent>> targetComponents=new HashMap<>();
for (Service service : services) {
Set<ServiceComponent> serviceComponents=new HashSet<>(service.getServiceComponents().values());
targetComponents.put(service,serviceComponents);
}
s_upgradeHelper.putComponentsToUpgradingState(version,targetComponents);
for (UpgradeGroupHolder group : groups) {
boolean skippable=group.skippable;
boolean supportsAutoSkipOnFailure=group.supportsAutoSkipOnFailure;
boolean allowRetry=group.allowRetry;
List<UpgradeItemEntity> itemEntities=new ArrayList<>();
for (StageWrapper wrapper : group.items) {
if (wrapper.getType() == StageWrapper.Type.SERVER_SIDE_ACTION) {
for (TaskWrapper taskWrapper : wrapper.getTasks()) {
for (Task task : taskWrapper.getTasks()) {
if (upgradeContext.isManualVerificationAutoSkipped() && task.getType() == Task.Type.MANUAL) {
continue;
}
UpgradeItemEntity itemEntity=new UpgradeItemEntity();
itemEntity.setText(wrapper.getText());
itemEntity.setTasks(wrapper.getTasksJson());
itemEntity.setHosts(wrapper.getHostsJson());
itemEntities.add(itemEntity);
if (upgradeType == UpgradeType.NON_ROLLING && UpdateStackGrouping.class.equals(group.groupClass)) {
if (direction.isUpgrade()) {
  upgradeContext.setEffectiveStackId(upgradeContext.getTargetStackId());
}
 else {
  upgradeContext.setEffectiveStackId(upgradeContext.getOriginalStackId());
}
}
 else if (UpdateStackGrouping.class.equals(group.groupClass)) {
upgradeContext.setEffectiveStackId(upgradeContext.getTargetStackId());
}
injectVariables(configHelper,cluster,itemEntity);
makeServerSideStage(upgradeContext,req,itemEntity,(ServerSideActionTask)task,skippable,supportsAutoSkipOnFailure,allowRetry,pack,configUpgradePack);
}
}
}
 else {
UpgradeItemEntity itemEntity=new UpgradeItemEntity();
itemEntity.setText(wrapper.getText());
itemEntity.setTasks(wrapper.getTasksJson());
itemEntity.setHosts(wrapper.getHostsJson());
itemEntities.add(itemEntity);
injectVariables(configHelper,cluster,itemEntity);
createStage(upgradeContext,req,itemEntity,wrapper,skippable,supportsAutoSkipOnFailure,allowRetry);
}
}
if (!itemEntities.isEmpty()) {
UpgradeGroupEntity groupEntity=new UpgradeGroupEntity();
groupEntity.setName(group.name);
groupEntity.setTitle(group.title);
groupEntity.setItems(itemEntities);
groupEntities.add(groupEntity);
}
}
UpgradeEntity entity=new UpgradeEntity();
entity.setFromVersion(cluster.getCurrentClusterVersion().getRepositoryVersion().getVersion());
entity.setToVersion(version);
entity.setUpgradeGroups(groupEntities);
entity.setClusterId(cluster.getClusterId());
entity.setDirection(direction);
entity.setUpgradePackage(pack.getName());
entity.setUpgradeType(pack.getType());
entity.setAutoSkipComponentFailures(skipComponentFailures);
entity.setAutoSkipServiceCheckFailures(skipServiceCheckFailures);
entity.setDowngradeAllowed(pack.isDowngradeAllowed());
req.getRequestStatusResponse();
return createUpgradeInsideTransaction(cluster,req,entity);
}
