{
  List<RequestResourceFilter> filters=new ArrayList<RequestResourceFilter>();
  for (  TaskWrapper tw : wrapper.getTasks()) {
    filters.add(new RequestResourceFilter(tw.getService(),tw.getComponent(),new ArrayList<String>(tw.getHosts())));
  }
  Map<String,String> restartCommandParams=new HashMap<String,String>();
  restartCommandParams.put("restart_type","rolling_upgrade");
  restartCommandParams.put("version",version);
  ActionExecutionContext actionContext=new ActionExecutionContext(cluster.getClusterName(),"RESTART",filters,restartCommandParams);
  actionContext.setTimeout(Short.valueOf((short)-1));
  ExecuteCommandJson jsons=commandExecutionHelper.get().getCommandJson(actionContext,cluster);
  Stage stage=stageFactory.get().createNew(request.getId().longValue(),"/tmp/ambari",cluster.getClusterName(),cluster.getClusterId(),entity.getText(),jsons.getClusterHostInfo(),jsons.getCommandParamsForStage(),jsons.getHostParamsForStage());
  stage.setSkippable(UPGRADE_DEFAULT_SKIPPABLE);
  long stageId=request.getLastStageId() + 1;
  if (0L == stageId) {
    stageId=1L;
  }
  stage.setStageId(stageId);
  entity.setStageId(Long.valueOf(stageId));
  Map<String,String> requestParams=new HashMap<String,String>();
  requestParams.put("command","RESTART");
  commandExecutionHelper.get().addExecutionCommandsToStage(actionContext,stage,requestParams,UPGRADE_DEFAULT_ALLOW_RETRY);
  request.addStages(Collections.singletonList(stage));
}
