{
  if (0 == wrapper.getHosts().size()) {
    throw new AmbariException(String.format("Cannot create action for '%s' with no hosts",wrapper.getText()));
  }
  Cluster cluster=context.getCluster();
  RequestResourceFilter filter=new RequestResourceFilter("","",new ArrayList<String>(wrapper.getHosts()));
  Map<String,String> params=new HashMap<String,String>();
  params.put(COMMAND_PARAM_TASKS,entity.getTasks());
  params.put(COMMAND_PARAM_VERSION,context.getVersion());
  params.put(COMMAND_PARAM_DIRECTION,context.getDirection().name().toLowerCase());
  params.put(COMMAND_PARAM_ORIGINAL_STACK,context.getOriginalStackId().getStackId());
  params.put(COMMAND_PARAM_TARGET_STACK,context.getTargetStackId().getStackId());
  AmbariMetaInfo ambariMetaInfo=s_metaProvider.get();
  StackId stackId=cluster.getDesiredStackVersion();
  StackInfo stackInfo=ambariMetaInfo.getStack(stackId.getStackName(),stackId.getStackVersion());
  if (wrapper.getTasks() != null && wrapper.getTasks().size() > 0) {
    String serviceName=wrapper.getTasks().get(0).getService();
    ServiceInfo serviceInfo=ambariMetaInfo.getService(stackId.getStackName(),stackId.getStackVersion(),serviceName);
    params.put(SERVICE_PACKAGE_FOLDER,serviceInfo.getServicePackageFolder());
    params.put(HOOKS_FOLDER,stackInfo.getStackHooksFolder());
  }
  ActionExecutionContext actionContext=new ActionExecutionContext(cluster.getClusterName(),"ru_execute_tasks",Collections.singletonList(filter),params);
  actionContext.setIgnoreMaintenance(true);
  actionContext.setTimeout(Short.valueOf(s_configuration.getDefaultAgentTaskTimeout(false)));
  ExecuteCommandJson jsons=s_commandExecutionHelper.get().getCommandJson(actionContext,cluster);
  Stage stage=s_stageFactory.get().createNew(request.getId().longValue(),"/tmp/ambari",cluster.getClusterName(),cluster.getClusterId(),entity.getText(),jsons.getClusterHostInfo(),jsons.getCommandParamsForStage(),jsons.getHostParamsForStage());
  stage.setSkippable(skippable);
  long stageId=request.getLastStageId() + 1;
  if (0L == stageId) {
    stageId=1L;
  }
  stage.setStageId(stageId);
  entity.setStageId(Long.valueOf(stageId));
  s_actionExecutionHelper.get().addExecutionCommandsToStage(actionContext,stage,allowRetry);
  for (  Map<String,HostRoleCommand> map : stage.getHostRoleCommands().values()) {
    for (    HostRoleCommand hrc : map.values()) {
      hrc.setCommandDetail(entity.getText());
    }
  }
  request.addStages(Collections.singletonList(stage));
}
