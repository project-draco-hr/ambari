{
  String clusterName=(String)requestMap.get(UPGRADE_CLUSTER_NAME);
  if (null == clusterName) {
    throw new AmbariException(String.format("%s is required",UPGRADE_CLUSTER_NAME));
  }
  Cluster cluster=getManagementController().getClusters().getCluster(clusterName);
  ConfigHelper configHelper=getManagementController().getConfigHelper();
  final String version=(String)requestMap.get(UPGRADE_VERSION);
  MasterHostResolver resolver=direction.isUpgrade() ? new MasterHostResolver(configHelper,cluster) : new MasterHostResolver(configHelper,cluster,version);
  StackId sourceStackId=null;
  StackId targetStackId=null;
switch (direction) {
case UPGRADE:
    sourceStackId=cluster.getCurrentStackVersion();
  RepositoryVersionEntity targetRepositoryVersion=s_repoVersionDAO.findByStackNameAndVersion(sourceStackId.getStackName(),version);
targetStackId=targetRepositoryVersion.getStackId();
break;
case DOWNGRADE:
sourceStackId=cluster.getCurrentStackVersion();
targetStackId=cluster.getDesiredStackVersion();
break;
}
UpgradeContext ctx=new UpgradeContext(resolver,sourceStackId,targetStackId,version,direction);
if (direction.isDowngrade()) {
if (requestMap.containsKey(UPGRADE_FROM_VERSION)) {
ctx.setDowngradeFromVersion((String)requestMap.get(UPGRADE_FROM_VERSION));
}
 else {
UpgradeEntity lastUpgradeItemForCluster=s_upgradeDAO.findLastUpgradeForCluster(cluster.getClusterId());
ctx.setDowngradeFromVersion(lastUpgradeItemForCluster.getToVersion());
}
}
boolean skipComponentFailures=false;
boolean skipServiceCheckFailures=false;
if (requestMap.containsKey(UPGRADE_SKIP_FAILURES)) {
skipComponentFailures=Boolean.parseBoolean((String)requestMap.get(UPGRADE_SKIP_FAILURES));
}
if (requestMap.containsKey(UPGRADE_SKIP_SC_FAILURES)) {
skipServiceCheckFailures=Boolean.parseBoolean((String)requestMap.get(UPGRADE_SKIP_SC_FAILURES));
}
ctx.setAutoSkipComponentFailures(skipComponentFailures);
ctx.setAutoSkipServiceCheckFailures(skipServiceCheckFailures);
List<UpgradeGroupHolder> groups=s_upgradeHelper.createSequence(pack,ctx);
if (groups.isEmpty()) {
throw new AmbariException("There are no groupings available");
}
List<UpgradeGroupEntity> groupEntities=new ArrayList<UpgradeGroupEntity>();
RequestStageContainer req=createRequest(direction,version);
processConfigurations(targetStackId.getStackName(),cluster,version,direction,pack);
for (UpgradeGroupHolder group : groups) {
UpgradeGroupEntity groupEntity=new UpgradeGroupEntity();
groupEntity.setName(group.name);
groupEntity.setTitle(group.title);
boolean skippable=group.skippable;
boolean allowRetry=group.allowRetry;
List<UpgradeItemEntity> itemEntities=new ArrayList<UpgradeItemEntity>();
for (StageWrapper wrapper : group.items) {
if (wrapper.getType() == StageWrapper.Type.SERVER_SIDE_ACTION) {
for (TaskWrapper taskWrapper : wrapper.getTasks()) {
for (Task task : taskWrapper.getTasks()) {
UpgradeItemEntity itemEntity=new UpgradeItemEntity();
itemEntity.setText(wrapper.getText());
itemEntity.setTasks(wrapper.getTasksJson());
itemEntity.setHosts(wrapper.getHostsJson());
itemEntities.add(itemEntity);
injectVariables(configHelper,cluster,itemEntity);
makeServerSideStage(ctx,req,itemEntity,(ServerSideActionTask)task,skippable,allowRetry);
}
}
}
 else {
UpgradeItemEntity itemEntity=new UpgradeItemEntity();
itemEntity.setText(wrapper.getText());
itemEntity.setTasks(wrapper.getTasksJson());
itemEntity.setHosts(wrapper.getHostsJson());
itemEntities.add(itemEntity);
injectVariables(configHelper,cluster,itemEntity);
createStage(ctx,req,itemEntity,wrapper,skippable,allowRetry);
}
}
groupEntity.setItems(itemEntities);
groupEntities.add(groupEntity);
}
UpgradeEntity entity=new UpgradeEntity();
entity.setFromVersion(cluster.getCurrentClusterVersion().getRepositoryVersion().getVersion());
entity.setToVersion(version);
entity.setUpgradeGroups(groupEntities);
entity.setClusterId(Long.valueOf(cluster.getClusterId()));
entity.setDirection(direction);
req.getRequestStatusResponse();
entity.setRequestId(req.getId());
req.persist();
s_upgradeDAO.create(entity);
return entity;
}
