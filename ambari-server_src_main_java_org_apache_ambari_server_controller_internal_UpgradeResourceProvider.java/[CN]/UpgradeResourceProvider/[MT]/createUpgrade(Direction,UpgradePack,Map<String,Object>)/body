{
  String clusterName=(String)requestMap.get(UPGRADE_CLUSTER_NAME);
  if (null == clusterName) {
    throw new AmbariException(String.format("%s is required",UPGRADE_CLUSTER_NAME));
  }
  UpgradeType upgradeType=UpgradeType.ROLLING;
  if (requestMap.containsKey(UPGRADE_TYPE)) {
    try {
      upgradeType=UpgradeType.valueOf(requestMap.get(UPGRADE_TYPE).toString());
    }
 catch (    Exception e) {
      throw new AmbariException(String.format("Property %s has an incorrect value of %s.",UPGRADE_TYPE,requestMap.get(UPGRADE_TYPE)));
    }
  }
  Cluster cluster=getManagementController().getClusters().getCluster(clusterName);
  ConfigHelper configHelper=getManagementController().getConfigHelper();
  String userName=getManagementController().getAuthName();
  final String version=(String)requestMap.get(UPGRADE_VERSION);
  MasterHostResolver resolver=null;
  if (direction.isUpgrade()) {
    resolver=new MasterHostResolver(configHelper,cluster);
  }
 else {
    if (upgradeType == UpgradeType.ROLLING) {
      resolver=new MasterHostResolver(configHelper,cluster,version);
    }
 else {
      resolver=new MasterHostResolver(configHelper,cluster);
    }
  }
  StackId sourceStackId=null;
  StackId targetStackId=null;
switch (direction) {
case UPGRADE:
    sourceStackId=cluster.getCurrentStackVersion();
  RepositoryVersionEntity targetRepositoryVersion=s_repoVersionDAO.findByStackNameAndVersion(sourceStackId.getStackName(),version);
targetStackId=targetRepositoryVersion.getStackId();
break;
case DOWNGRADE:
sourceStackId=cluster.getCurrentStackVersion();
targetStackId=cluster.getDesiredStackVersion();
break;
}
UpgradeContext ctx=new UpgradeContext(resolver,sourceStackId,targetStackId,version,direction,pack.getType());
if (direction.isDowngrade()) {
if (requestMap.containsKey(UPGRADE_FROM_VERSION)) {
ctx.setDowngradeFromVersion((String)requestMap.get(UPGRADE_FROM_VERSION));
}
 else {
UpgradeEntity lastUpgradeItemForCluster=s_upgradeDAO.findLastUpgradeForCluster(cluster.getClusterId());
ctx.setDowngradeFromVersion(lastUpgradeItemForCluster.getToVersion());
}
}
boolean skipComponentFailures=pack.isComponentFailureAutoSkipped();
boolean skipServiceCheckFailures=pack.isServiceCheckFailureAutoSkipped();
if (requestMap.containsKey(UPGRADE_SKIP_FAILURES)) {
skipComponentFailures=Boolean.parseBoolean((String)requestMap.get(UPGRADE_SKIP_FAILURES));
}
if (requestMap.containsKey(UPGRADE_SKIP_SC_FAILURES)) {
skipServiceCheckFailures=Boolean.parseBoolean((String)requestMap.get(UPGRADE_SKIP_SC_FAILURES));
}
boolean skipManualVerification=false;
if (requestMap.containsKey(UPGRADE_SKIP_MANUAL_VERIFICATION)) {
skipManualVerification=Boolean.parseBoolean((String)requestMap.get(UPGRADE_SKIP_MANUAL_VERIFICATION));
}
ctx.setAutoSkipComponentFailures(skipComponentFailures);
ctx.setAutoSkipServiceCheckFailures(skipServiceCheckFailures);
ctx.setAutoSkipManualVerification(skipManualVerification);
List<UpgradeGroupHolder> groups=s_upgradeHelper.createSequence(pack,ctx);
if (groups.isEmpty()) {
throw new AmbariException("There are no groupings available");
}
List<UpgradeGroupEntity> groupEntities=new ArrayList<UpgradeGroupEntity>();
RequestStageContainer req=createRequest(direction,version);
if (pack.getType() == UpgradeType.ROLLING) {
applyStackAndProcessConfigurations(targetStackId.getStackName(),cluster,version,direction,pack,userName);
}
List<UpgradePack.IntermediateStack> intermediateStacks=pack.getIntermediateStacks();
ConfigUpgradePack configUpgradePack;
if (intermediateStacks == null || intermediateStacks.isEmpty()) {
configUpgradePack=s_metaProvider.get().getConfigUpgradePack(targetStackId.getStackName(),targetStackId.getStackVersion());
}
 else {
ArrayList<ConfigUpgradePack> intermediateConfigUpgradePacks=new ArrayList<>();
for (UpgradePack.IntermediateStack intermediateStack : intermediateStacks) {
ConfigUpgradePack intermediateConfigUpgradePack=s_metaProvider.get().getConfigUpgradePack(targetStackId.getStackName(),intermediateStack.version);
intermediateConfigUpgradePacks.add(intermediateConfigUpgradePack);
}
configUpgradePack=ConfigUpgradePack.merge(intermediateConfigUpgradePacks);
}
for (UpgradeGroupHolder group : groups) {
boolean skippable=group.skippable;
boolean supportsAutoSkipOnFailure=group.supportsAutoSkipOnFailure;
boolean allowRetry=group.allowRetry;
List<UpgradeItemEntity> itemEntities=new ArrayList<UpgradeItemEntity>();
for (StageWrapper wrapper : group.items) {
if (wrapper.getType() == StageWrapper.Type.SERVER_SIDE_ACTION) {
for (TaskWrapper taskWrapper : wrapper.getTasks()) {
for (Task task : taskWrapper.getTasks()) {
if (ctx.isManualVerificationAutoSkipped() && task.getType() == Task.Type.MANUAL) {
continue;
}
UpgradeItemEntity itemEntity=new UpgradeItemEntity();
itemEntity.setText(wrapper.getText());
itemEntity.setTasks(wrapper.getTasksJson());
itemEntity.setHosts(wrapper.getHostsJson());
itemEntities.add(itemEntity);
if (upgradeType == UpgradeType.NON_ROLLING && UpdateStackGrouping.class.equals(group.groupClass)) {
if (direction.isUpgrade()) {
  ctx.setEffectiveStackId(ctx.getTargetStackId());
}
 else {
  ctx.setEffectiveStackId(ctx.getOriginalStackId());
}
}
 else if (UpdateStackGrouping.class.equals(group.groupClass)) {
ctx.setEffectiveStackId(ctx.getTargetStackId());
}
injectVariables(configHelper,cluster,itemEntity);
makeServerSideStage(ctx,req,itemEntity,(ServerSideActionTask)task,skippable,supportsAutoSkipOnFailure,allowRetry,pack,configUpgradePack);
}
}
}
 else {
UpgradeItemEntity itemEntity=new UpgradeItemEntity();
itemEntity.setText(wrapper.getText());
itemEntity.setTasks(wrapper.getTasksJson());
itemEntity.setHosts(wrapper.getHostsJson());
itemEntities.add(itemEntity);
injectVariables(configHelper,cluster,itemEntity);
createStage(ctx,req,itemEntity,wrapper,skippable,supportsAutoSkipOnFailure,allowRetry);
}
}
if (!itemEntities.isEmpty()) {
UpgradeGroupEntity groupEntity=new UpgradeGroupEntity();
groupEntity.setName(group.name);
groupEntity.setTitle(group.title);
groupEntity.setItems(itemEntities);
groupEntities.add(groupEntity);
}
}
UpgradeEntity entity=new UpgradeEntity();
entity.setFromVersion(cluster.getCurrentClusterVersion().getRepositoryVersion().getVersion());
entity.setToVersion(version);
entity.setUpgradeGroups(groupEntities);
entity.setClusterId(cluster.getClusterId());
entity.setDirection(direction);
entity.setUpgradePackage(pack.getName());
entity.setUpgradeType(pack.getType());
entity.setAutoSkipComponentFailures(skipComponentFailures);
entity.setAutoSkipServiceCheckFailures(skipServiceCheckFailures);
entity.setDowngradeAllowed(pack.isDowngradeAllowed());
req.getRequestStatusResponse();
entity.setRequestId(req.getId());
req.persist();
s_upgradeDAO.create(entity);
return entity;
}
