{
  Set<Map<String,Object>> requestMaps=request.getProperties();
  if (requestMaps.size() > 1) {
    throw new SystemException("Can only initiate one upgrade per request.");
  }
  final Map<String,Object> requestMap=requestMaps.iterator().next();
  final String clusterName=(String)requestMap.get(UPGRADE_CLUSTER_NAME);
  final Cluster cluster;
  try {
    cluster=getManagementController().getClusters().getCluster(clusterName);
  }
 catch (  AmbariException e) {
    throw new NoSuchParentResourceException(String.format("Cluster %s could not be loaded",clusterName));
  }
  if (!AuthorizationHelper.isAuthorized(ResourceType.CLUSTER,cluster.getResourceId(),EnumSet.of(RoleAuthorization.CLUSTER_UPGRADE_DOWNGRADE_STACK))) {
    throw new AuthorizationException("The authenticated user does not have authorization to " + "manage upgrade and downgrade");
  }
  final Map<String,String> requestInfoProps=request.getRequestInfoProperties();
  final String forceDowngrade=requestInfoProps.get(UpgradeResourceDefinition.DOWNGRADE_DIRECTIVE);
  final Direction direction=Boolean.parseBoolean(forceDowngrade) ? Direction.DOWNGRADE : Direction.UPGRADE;
  UpgradeEntity entity=createResources(new Command<UpgradeEntity>(){
    @Override public UpgradeEntity invoke() throws AmbariException, AuthorizationException {
      UpgradeType upgradeType=UpgradeType.ROLLING;
      if (requestMap.containsKey(UPGRADE_TYPE)) {
        try {
          upgradeType=UpgradeType.valueOf(requestMap.get(UPGRADE_TYPE).toString());
        }
 catch (        Exception e) {
          throw new AmbariException(String.format("Property %s has an incorrect value of %s.",UPGRADE_TYPE,requestMap.get(UPGRADE_TYPE)));
        }
      }
      final UpgradeContext upgradeContext=new UpgradeContext(cluster,upgradeType,direction,requestMap);
      UpgradePack upgradePack=validateRequest(upgradeContext);
      upgradeContext.setUpgradePack(upgradePack);
      try {
        return createUpgrade(upgradeContext);
      }
 catch (      Exception e) {
        LOG.error("Error appears during upgrade task submitting",e);
        clusters.get().invalidate(cluster);
        throw e;
      }
    }
  }
);
  if (null == entity) {
    throw new SystemException("Could not load upgrade");
  }
  notifyCreate(Resource.Type.Upgrade,request);
  Resource res=new ResourceImpl(Resource.Type.Upgrade);
  res.setProperty(UPGRADE_REQUEST_ID,entity.getRequestId());
  return new RequestStatusImpl(null,Collections.singleton(res));
}
