{
  String clusterName=(String)requestMap.get(UPGRADE_CLUSTER_NAME);
  String version=(String)requestMap.get(UPGRADE_VERSION);
  String versionForUpgradePack=(String)requestMap.get(UPGRADE_FROM_VERSION);
  boolean skipPrereqChecks=Boolean.parseBoolean((String)requestMap.get(UPGRADE_SKIP_PREREQUISITE_CHECKS));
  boolean failOnCheckWarnings=Boolean.parseBoolean((String)requestMap.get(UPGRADE_FAIL_ON_CHECK_WARNINGS));
  if (null == clusterName) {
    throw new AmbariException(String.format("%s is required",UPGRADE_CLUSTER_NAME));
  }
  if (null == version) {
    throw new AmbariException(String.format("%s is required",UPGRADE_VERSION));
  }
  Cluster cluster=getManagementController().getClusters().getCluster(clusterName);
  StackId stack=cluster.getCurrentStackVersion();
  String repoVersion=version;
  if (direction.isDowngrade() && null != versionForUpgradePack) {
    repoVersion=versionForUpgradePack;
  }
  RepositoryVersionEntity versionEntity=s_repoVersionDAO.findByStackNameAndVersion(stack.getStackName(),repoVersion);
  if (null == versionEntity) {
    throw new AmbariException(String.format("Repository version %s was not found",repoVersion));
  }
  Map<String,UpgradePack> packs=s_metaProvider.get().getUpgradePacks(stack.getStackName(),stack.getStackVersion());
  UpgradePack up=packs.get(versionEntity.getUpgradePackage());
  if (null == up) {
    String repoStackId=versionEntity.getStackId().getStackId();
    for (    UpgradePack upgradePack : packs.values()) {
      if (null != upgradePack.getTargetStack() && upgradePack.getTargetStack().equals(repoStackId)) {
        up=upgradePack;
        break;
      }
    }
  }
  if (null == up) {
    throw new AmbariException(String.format("Unable to perform %s.  Could not locate upgrade pack %s for version %s",direction.getText(false),versionEntity.getUpgradePackage(),repoVersion));
  }
  List<UpgradeEntity> upgrades=s_upgradeDAO.findUpgrades(cluster.getClusterId());
  for (  UpgradeEntity entity : upgrades) {
    if (entity.getDirection() == direction) {
      Map<Long,HostRoleCommandStatusSummaryDTO> summary=s_hostRoleCommandDAO.findAggregateCounts(entity.getRequestId());
      CalculatedStatus calc=CalculatedStatus.statusFromStageSummary(summary,summary.keySet());
      HostRoleStatus status=calc.getStatus();
      if (!HostRoleStatus.getCompletedStates().contains(status)) {
        throw new AmbariException(String.format("Unable to perform %s as another %s is in progress. %s %d is in %s",direction.getText(false),direction.getText(false),direction.getText(true),entity.getRequestId().longValue(),status));
      }
    }
  }
  if (direction.isUpgrade() && !skipPrereqChecks) {
    PreUpgradeCheckResourceProvider preUpgradeCheckResourceProvider=(PreUpgradeCheckResourceProvider)getResourceProvider(Resource.Type.PreUpgradeCheck);
    Predicate preUpgradeCheckPredicate=new PredicateBuilder().property(PreUpgradeCheckResourceProvider.UPGRADE_CHECK_CLUSTER_NAME_PROPERTY_ID).equals(clusterName).and().property(PreUpgradeCheckResourceProvider.UPGRADE_CHECK_REPOSITORY_VERSION_PROPERTY_ID).equals(repoVersion).toPredicate();
    Request preUpgradeCheckRequest=PropertyHelper.getReadRequest();
    Set<Resource> preUpgradeCheckResources;
    try {
      preUpgradeCheckResources=preUpgradeCheckResourceProvider.getResources(preUpgradeCheckRequest,preUpgradeCheckPredicate);
    }
 catch (    NoSuchResourceException e) {
      throw new AmbariException(String.format("Unable to perform %s. Prerequisite checks could not be run",direction.getText(false)));
    }
    List<Resource> failedResources=new LinkedList<Resource>();
    if (preUpgradeCheckResources != null) {
      for (      Resource res : preUpgradeCheckResources) {
        String id=(String)res.getPropertyValue((PreUpgradeCheckResourceProvider.UPGRADE_CHECK_ID_PROPERTY_ID));
        PrereqCheckStatus prereqCheckStatus=(PrereqCheckStatus)res.getPropertyValue(PreUpgradeCheckResourceProvider.UPGRADE_CHECK_STATUS_PROPERTY_ID);
        if (prereqCheckStatus == PrereqCheckStatus.FAIL || (failOnCheckWarnings && prereqCheckStatus == PrereqCheckStatus.WARNING)) {
          failedResources.add(res);
        }
      }
    }
    if (!failedResources.isEmpty()) {
      Gson gson=new Gson();
      throw new AmbariException(String.format("Unable to perform %s. Prerequisite checks failed %s",direction.getText(false),gson.toJson(failedResources)));
    }
  }
  return up;
}
