{
  String clusterName=(String)requestMap.get(UPGRADE_CLUSTER_NAME);
  if (null == clusterName) {
    throw new AmbariException(String.format("%s is required",UPGRADE_CLUSTER_NAME));
  }
  Cluster cluster=getManagementController().getClusters().getCluster(clusterName);
  ConfigHelper configHelper=getManagementController().getConfigHelper();
  String forceDowngrade=requestInfoProps.get(UpgradeResourceDefinition.DOWNGRADE_DIRECTIVE);
  if (forceDowngrade == null) {
    forceDowngrade=(String)requestMap.get(UPGRADE_FORCE_DOWNGRADE);
  }
  List<UpgradeGroupHolder> groups=null;
  final String version=(String)requestMap.get(UPGRADE_VERSION);
  if (Boolean.valueOf(forceDowngrade)) {
    MasterHostResolver mhr=new MasterHostResolver(cluster,version);
    groups=s_upgradeHelper.createDowngrade(mhr,pack,version);
  }
 else {
    MasterHostResolver mhr=new MasterHostResolver(cluster);
    groups=s_upgradeHelper.createUpgrade(mhr,pack,version);
  }
  if (groups.isEmpty()) {
    throw new AmbariException("There are no upgrade groupings available");
  }
  List<UpgradeGroupEntity> groupEntities=new ArrayList<UpgradeGroupEntity>();
  RequestStageContainer req=createRequest(version);
  for (  UpgradeGroupHolder group : groups) {
    UpgradeGroupEntity groupEntity=new UpgradeGroupEntity();
    groupEntity.setName(group.name);
    groupEntity.setTitle(group.title);
    boolean skippable=group.skippable;
    boolean allowRetry=group.allowRetry;
    List<UpgradeItemEntity> itemEntities=new ArrayList<UpgradeItemEntity>();
    for (    StageWrapper wrapper : group.items) {
      if (wrapper.getType() == StageWrapper.Type.SERVER_SIDE_ACTION) {
        for (        TaskWrapper taskWrapper : wrapper.getTasks()) {
          for (          Task task : taskWrapper.getTasks()) {
            UpgradeItemEntity itemEntity=new UpgradeItemEntity();
            itemEntity.setText(wrapper.getText());
            itemEntity.setTasks(wrapper.getTasksJson());
            itemEntity.setHosts(wrapper.getHostsJson());
            itemEntities.add(itemEntity);
            injectVariables(configHelper,cluster,itemEntity);
            makeServerSideStage(cluster,req,version,itemEntity,(ServerSideActionTask)task,skippable,allowRetry);
          }
        }
      }
 else {
        UpgradeItemEntity itemEntity=new UpgradeItemEntity();
        itemEntity.setText(wrapper.getText());
        itemEntity.setTasks(wrapper.getTasksJson());
        itemEntity.setHosts(wrapper.getHostsJson());
        itemEntities.add(itemEntity);
        injectVariables(configHelper,cluster,itemEntity);
        createStage(cluster,req,version,itemEntity,wrapper,skippable,allowRetry);
      }
    }
    groupEntity.setItems(itemEntities);
    groupEntities.add(groupEntity);
  }
  UpgradeEntity entity=new UpgradeEntity();
  entity.setFromVersion(cluster.getCurrentClusterVersion().getRepositoryVersion().getVersion());
  entity.setToVersion(version);
  entity.setUpgradeGroups(groupEntities);
  entity.setClusterId(Long.valueOf(cluster.getClusterId()));
  req.getRequestStatusResponse();
  entity.setRequestId(req.getId());
  req.persist();
  m_upgradeDAO.create(entity);
  return entity;
}
