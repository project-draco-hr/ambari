{
  Set<Map<String,Object>> requestMaps=request.getProperties();
  if (requestMaps.size() > 1) {
    throw new SystemException("Can only update one upgrade per request.");
  }
  final Map<String,Object> propertyMap=requestMaps.iterator().next();
  String requestIdProperty=(String)propertyMap.get(UPGRADE_REQUEST_ID);
  if (null == requestIdProperty) {
    throw new IllegalArgumentException(String.format("%s is required",UPGRADE_REQUEST_ID));
  }
  long requestId=Long.parseLong(requestIdProperty);
  UpgradeEntity upgradeEntity=s_upgradeDAO.findUpgradeByRequestId(requestId);
  if (null == upgradeEntity) {
    String exceptionMessage=MessageFormat.format("The upgrade with request ID {0} was not found",requestIdProperty);
    throw new NoSuchParentResourceException(exceptionMessage);
  }
  List<String> updatableProperties=Lists.newArrayList(UPGRADE_REQUEST_STATUS,UPGRADE_SKIP_FAILURES,UPGRADE_SKIP_SC_FAILURES);
  boolean isRequiredPropertyInRequest=CollectionUtils.containsAny(updatableProperties,propertyMap.keySet());
  if (!isRequiredPropertyInRequest) {
    String exceptionMessage=MessageFormat.format("At least one of the following properties is required in the request: {0}",StringUtils.join(updatableProperties,", "));
    throw new IllegalArgumentException(exceptionMessage);
  }
  String requestStatus=(String)propertyMap.get(UPGRADE_REQUEST_STATUS);
  String skipFailuresRequestProperty=(String)propertyMap.get(UPGRADE_SKIP_FAILURES);
  String skipServiceCheckFailuresRequestProperty=(String)propertyMap.get(UPGRADE_SKIP_SC_FAILURES);
  if (null != requestStatus) {
    HostRoleStatus status=HostRoleStatus.valueOf(requestStatus);
    setUpgradeRequestStatus(requestIdProperty,status,propertyMap);
  }
  if (StringUtils.isNotEmpty(skipFailuresRequestProperty) || StringUtils.isNotEmpty(skipServiceCheckFailuresRequestProperty)) {
    boolean skipFailures=upgradeEntity.isComponentFailureAutoSkipped();
    boolean skipServiceCheckFailures=upgradeEntity.isServiceCheckFailureAutoSkipped();
    if (null != skipFailuresRequestProperty) {
      skipFailures=Boolean.parseBoolean(skipFailuresRequestProperty);
      s_hostRoleCommandDAO.updateAutomaticSkipOnFailure(requestId,skipFailures);
    }
    if (null != skipServiceCheckFailuresRequestProperty) {
      skipServiceCheckFailures=Boolean.parseBoolean(skipServiceCheckFailuresRequestProperty);
      s_hostRoleCommandDAO.updateAutomaticSkipServiceCheckFailure(requestId,skipServiceCheckFailures);
    }
    upgradeEntity.setAutoSkipComponentFailures(skipFailures);
    upgradeEntity.setAutoSkipServiceCheckFailures(skipServiceCheckFailures);
    upgradeEntity=s_upgradeDAO.merge(upgradeEntity);
  }
  return getRequestStatus(null);
}
