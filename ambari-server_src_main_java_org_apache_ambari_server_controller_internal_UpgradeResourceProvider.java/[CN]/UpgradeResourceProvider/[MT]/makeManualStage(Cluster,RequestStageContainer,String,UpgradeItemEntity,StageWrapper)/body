{
  Map<String,String> restartCommandParams=new HashMap<String,String>();
  restartCommandParams.put("version",version);
  ActionExecutionContext actionContext=new ActionExecutionContext(cluster.getClusterName(),Role.AMBARI_SERVER_ACTION.toString(),Collections.<RequestResourceFilter>emptyList(),restartCommandParams);
  actionContext.setTimeout(Short.valueOf((short)-1));
  ExecuteCommandJson jsons=commandExecutionHelper.get().getCommandJson(actionContext,cluster);
  Stage stage=stageFactory.get().createNew(request.getId().longValue(),"/tmp/ambari",cluster.getClusterName(),cluster.getClusterId(),entity.getText(),jsons.getClusterHostInfo(),jsons.getCommandParamsForStage(),jsons.getHostParamsForStage());
  long stageId=request.getLastStageId() + 1;
  if (0L == stageId) {
    stageId=1L;
  }
  stage.setStageId(stageId);
  entity.setStageId(Long.valueOf(stageId));
  String host=cluster.getAllHostsDesiredConfigs().keySet().iterator().next();
  stage.addServerActionCommand(ManualStageAction.class.getName(),Role.AMBARI_SERVER_ACTION,RoleCommand.EXECUTE,cluster.getClusterName(),host,new ServiceComponentHostServerActionEvent(StageUtils.getHostName(),System.currentTimeMillis()),Collections.<String,String>emptyMap(),15);
  request.addStages(Collections.singletonList(stage));
}
