{
  RepositoryVersionEntity targetRve=s_repoVersionDAO.findByStackNameAndVersion(stackName,version);
  if (null == targetRve) {
    LOG.info("Could not find version entity for {}; not setting new configs",version);
    return;
  }
  if (null == userName) {
    userName=getManagementController().getAuthName();
  }
  StackEntity targetStack=targetRve.getStack();
  StackId currentStackId=cluster.getCurrentStackVersion();
  StackId desiredStackId=cluster.getDesiredStackVersion();
  StackId targetStackId=new StackId(targetStack);
switch (direction) {
case UPGRADE:
    if (currentStackId.equals(targetStackId)) {
      return;
    }
  break;
case DOWNGRADE:
if (desiredStackId.equals(targetStackId)) {
  return;
}
break;
}
Map<String,Map<String,String>> newConfigurationsByType=null;
ConfigHelper configHelper=getManagementController().getConfigHelper();
if (direction == Direction.UPGRADE) {
Map<String,Map<String,String>> oldStackDefaultConfigurationsByType=configHelper.getDefaultProperties(currentStackId,cluster);
newConfigurationsByType=configHelper.getDefaultProperties(targetStackId,cluster);
Set<String> skipConfigTypes=new HashSet<String>();
Set<String> upgradePackServices=new HashSet<String>();
Set<String> upgradePackConfigTypes=new HashSet<String>();
AmbariMetaInfo ambariMetaInfo=s_metaProvider.get();
Map<String,ServiceInfo> stackServicesMap=ambariMetaInfo.getServices(targetStack.getStackName(),targetStack.getStackVersion());
for (Grouping group : upgradePack.getGroups(direction)) {
for (UpgradePack.OrderService service : group.services) {
if (service.serviceName == null || upgradePackServices.contains(service.serviceName)) {
  continue;
}
upgradePackServices.add(service.serviceName);
ServiceInfo serviceInfo=stackServicesMap.get(service.serviceName);
if (serviceInfo == null) {
  continue;
}
Set<String> serviceConfigTypes=serviceInfo.getConfigTypeAttributes().keySet();
for (String serviceConfigType : serviceConfigTypes) {
  if (!upgradePackConfigTypes.contains(serviceConfigType)) {
    upgradePackConfigTypes.add(serviceConfigType);
  }
}
}
}
Set<String> servicesNotInUpgradePack=new HashSet<String>(stackServicesMap.keySet());
servicesNotInUpgradePack.removeAll(upgradePackServices);
for (String serviceNotInUpgradePack : servicesNotInUpgradePack) {
ServiceInfo serviceInfo=stackServicesMap.get(serviceNotInUpgradePack);
Set<String> configTypesOfServiceNotInUpgradePack=serviceInfo.getConfigTypeAttributes().keySet();
for (String configType : configTypesOfServiceNotInUpgradePack) {
if (!upgradePackConfigTypes.contains(configType) && !skipConfigTypes.contains(configType)) {
  skipConfigTypes.add(configType);
}
}
}
Iterator<String> iterator=newConfigurationsByType.keySet().iterator();
while (iterator.hasNext()) {
String configType=iterator.next();
if (skipConfigTypes.contains(configType)) {
LOG.info("Stack Upgrade: Removing configs for config-type {}",configType);
iterator.remove();
}
}
Map<String,DesiredConfig> existingDesiredConfigurationsByType=cluster.getDesiredConfigs();
for (Map.Entry<String,DesiredConfig> existingEntry : existingDesiredConfigurationsByType.entrySet()) {
String configurationType=existingEntry.getKey();
if (skipConfigTypes.contains(configurationType)) {
LOG.info("Stack Upgrade: Skipping config-type {} as upgrade-pack contains no updates to its service",configurationType);
continue;
}
Config currentClusterConfig=cluster.getDesiredConfigByType(configurationType);
if (null == currentClusterConfig) {
continue;
}
Map<String,String> existingConfigurations=currentClusterConfig.getProperties();
Map<String,String> newDefaultConfigurations=newConfigurationsByType.get(configurationType);
if (null == newDefaultConfigurations) {
newConfigurationsByType.put(configurationType,existingConfigurations);
continue;
}
 else {
Iterator<Map.Entry<String,String>> iter=newDefaultConfigurations.entrySet().iterator();
while (iter.hasNext()) {
  Map.Entry<String,String> entry=iter.next();
  if (entry.getValue() == null) {
    iter.remove();
  }
}
}
for (Map.Entry<String,String> existingConfigurationEntry : existingConfigurations.entrySet()) {
String existingConfigurationKey=existingConfigurationEntry.getKey();
String existingConfigurationValue=existingConfigurationEntry.getValue();
if (newDefaultConfigurations.containsKey(existingConfigurationKey)) {
  String newDefaultConfigurationValue=newDefaultConfigurations.get(existingConfigurationKey);
  if (!StringUtils.equals(existingConfigurationValue,newDefaultConfigurationValue)) {
    Map<String,String> configurationTypeDefaultConfigurations=oldStackDefaultConfigurationsByType.get(configurationType);
    if (null != configurationTypeDefaultConfigurations) {
      String oldDefaultValue=configurationTypeDefaultConfigurations.get(existingConfigurationKey);
      if (!StringUtils.equals(existingConfigurationValue,oldDefaultValue)) {
        newDefaultConfigurations.put(existingConfigurationKey,existingConfigurationValue);
      }
    }
  }
}
 else {
  newDefaultConfigurations.put(existingConfigurationKey,existingConfigurationValue);
}
}
}
}
 else {
cluster.applyLatestConfigurations(cluster.getCurrentStackVersion());
}
cluster.setDesiredStackVersion(new StackId(targetStack.getStackName(),targetStack.getStackVersion()),true);
if (null != newConfigurationsByType) {
configHelper.createConfigTypes(cluster,getManagementController(),newConfigurationsByType,userName,"Configuration created for Upgrade");
}
}
