{
  if (status != HostRoleStatus.ABORTED && status != HostRoleStatus.PENDING) {
    throw new IllegalArgumentException(String.format("Cannot set status %s, only %s is allowed",status,EnumSet.of(HostRoleStatus.ABORTED,HostRoleStatus.PENDING)));
  }
  String reason=(String)propertyMap.get(UPGRADE_ABORT_REASON);
  if (null == reason) {
    reason=String.format(DEFAULT_REASON_TEMPLATE,requestId);
  }
  ActionManager actionManager=getManagementController().getActionManager();
  List<org.apache.ambari.server.actionmanager.Request> requests=actionManager.getRequests(Collections.singletonList(Long.valueOf(requestId)));
  org.apache.ambari.server.actionmanager.Request internalRequest=requests.get(0);
  HostRoleStatus internalStatus=CalculatedStatus.statusFromStages(internalRequest.getStages()).getStatus();
  if (HostRoleStatus.PENDING == status && internalStatus != HostRoleStatus.ABORTED) {
    throw new IllegalArgumentException(String.format("Can only set status to %s when the upgrade is %s (currently %s)",status,HostRoleStatus.ABORTED,internalStatus));
  }
  Long clusterId=internalRequest.getClusterId();
  if (HostRoleStatus.ABORTED == status) {
    if (!internalStatus.isCompletedState()) {
      actionManager.cancelRequest(internalRequest.getRequestId(),reason);
      try {
        Cluster cluster=clusters.get().getClusterById(clusterId);
        cluster.setUpgradeEntity(null);
      }
 catch (      AmbariException e) {
        LOG.warn("Could not clear upgrade entity for cluster with id {}",clusterId,e);
      }
    }
  }
 else {
    List<Long> taskIds=new ArrayList<Long>();
    for (    HostRoleCommand hrc : internalRequest.getCommands()) {
      if (HostRoleStatus.ABORTED == hrc.getStatus() || HostRoleStatus.TIMEDOUT == hrc.getStatus()) {
        taskIds.add(hrc.getTaskId());
      }
    }
    actionManager.resubmitTasks(taskIds);
    try {
      Cluster cluster=clusters.get().getClusterById(clusterId);
      UpgradeEntity lastUpgradeItemForCluster=s_upgradeDAO.findLastUpgradeForCluster(cluster.getClusterId());
      cluster.setUpgradeEntity(lastUpgradeItemForCluster);
    }
 catch (    AmbariException e) {
      LOG.warn("Could not clear upgrade entity for cluster with id {}",clusterId,e);
    }
  }
}
