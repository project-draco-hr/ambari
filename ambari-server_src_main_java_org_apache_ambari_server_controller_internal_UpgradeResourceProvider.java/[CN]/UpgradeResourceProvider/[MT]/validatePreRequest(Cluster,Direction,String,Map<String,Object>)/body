{
  boolean skipPrereqChecks=Boolean.parseBoolean((String)requestMap.get(UPGRADE_SKIP_PREREQUISITE_CHECKS));
  boolean failOnCheckWarnings=Boolean.parseBoolean((String)requestMap.get(UPGRADE_FAIL_ON_CHECK_WARNINGS));
  String preferredUpgradePack=requestMap.containsKey(UPGRADE_PACK) ? (String)requestMap.get(UPGRADE_PACK) : null;
  UpgradeType upgradeType=requestMap.containsKey(UPGRADE_TYPE) ? UpgradeType.valueOf(requestMap.get(UPGRADE_TYPE).toString()) : UpgradeType.ROLLING;
  List<UpgradeEntity> upgrades=s_upgradeDAO.findUpgrades(cluster.getClusterId());
  for (  UpgradeEntity entity : upgrades) {
    if (entity.getDirection() == direction) {
      Map<Long,HostRoleCommandStatusSummaryDTO> summary=s_hostRoleCommandDAO.findAggregateCounts(entity.getRequestId());
      CalculatedStatus calc=CalculatedStatus.statusFromStageSummary(summary,summary.keySet());
      HostRoleStatus status=calc.getStatus();
      if (!HostRoleStatus.getCompletedStates().contains(status)) {
        throw new AmbariException(String.format("Unable to perform %s as another %s is in progress. %s request %d is in %s",direction.getText(false),direction.getText(false),direction.getText(true),entity.getRequestId().longValue(),status));
      }
    }
  }
  if (direction.isUpgrade() && !skipPrereqChecks) {
    PreUpgradeCheckResourceProvider preUpgradeCheckResourceProvider=(PreUpgradeCheckResourceProvider)getResourceProvider(Resource.Type.PreUpgradeCheck);
    Predicate preUpgradeCheckPredicate=new PredicateBuilder().property(PreUpgradeCheckResourceProvider.UPGRADE_CHECK_CLUSTER_NAME_PROPERTY_ID).equals(cluster.getClusterName()).and().property(PreUpgradeCheckResourceProvider.UPGRADE_CHECK_REPOSITORY_VERSION_PROPERTY_ID).equals(repoVersion).and().property(PreUpgradeCheckResourceProvider.UPGRADE_CHECK_UPGRADE_TYPE_PROPERTY_ID).equals(upgradeType).and().property(PreUpgradeCheckResourceProvider.UPGRADE_CHECK_UPGRADE_PACK_PROPERTY_ID).equals(preferredUpgradePack).toPredicate();
    Request preUpgradeCheckRequest=PropertyHelper.getReadRequest();
    Set<Resource> preUpgradeCheckResources;
    try {
      preUpgradeCheckResources=preUpgradeCheckResourceProvider.getResources(preUpgradeCheckRequest,preUpgradeCheckPredicate);
    }
 catch (    NoSuchResourceException|SystemException|UnsupportedPropertyException|NoSuchParentResourceException e) {
      throw new AmbariException(String.format("Unable to perform %s. Prerequisite checks could not be run",direction.getText(false)));
    }
    List<Resource> failedResources=new LinkedList<Resource>();
    if (preUpgradeCheckResources != null) {
      for (      Resource res : preUpgradeCheckResources) {
        String id=(String)res.getPropertyValue((PreUpgradeCheckResourceProvider.UPGRADE_CHECK_ID_PROPERTY_ID));
        PrereqCheckStatus prereqCheckStatus=(PrereqCheckStatus)res.getPropertyValue(PreUpgradeCheckResourceProvider.UPGRADE_CHECK_STATUS_PROPERTY_ID);
        if (prereqCheckStatus == PrereqCheckStatus.FAIL || (failOnCheckWarnings && prereqCheckStatus == PrereqCheckStatus.WARNING)) {
          failedResources.add(res);
        }
      }
    }
    if (!failedResources.isEmpty()) {
      Gson gson=new Gson();
      throw new AmbariException(String.format("Unable to perform %s. Prerequisite checks failed %s",direction.getText(false),gson.toJson(failedResources)));
    }
  }
}
