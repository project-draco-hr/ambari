{
  List<RequestResourceFilter> filters=new ArrayList<RequestResourceFilter>();
  for (  TaskWrapper tw : wrapper.getTasks()) {
    filters.add(new RequestResourceFilter(tw.getService(),"",Collections.<String>emptyList()));
  }
  Cluster cluster=context.getCluster();
  Map<String,String> commandParams=new HashMap<String,String>();
  commandParams.put(COMMAND_PARAM_VERSION,context.getVersion());
  commandParams.put(COMMAND_PARAM_DIRECTION,context.getDirection().name().toLowerCase());
  ActionExecutionContext actionContext=new ActionExecutionContext(cluster.getClusterName(),"SERVICE_CHECK",filters,commandParams);
  actionContext.setTimeout(Short.valueOf((short)-1));
  actionContext.setIgnoreMaintenance(true);
  ExecuteCommandJson jsons=commandExecutionHelper.get().getCommandJson(actionContext,cluster);
  Stage stage=stageFactory.get().createNew(request.getId().longValue(),"/tmp/ambari",cluster.getClusterName(),cluster.getClusterId(),entity.getText(),jsons.getClusterHostInfo(),jsons.getCommandParamsForStage(),jsons.getHostParamsForStage());
  stage.setSkippable(skippable);
  long stageId=request.getLastStageId() + 1;
  if (0L == stageId) {
    stageId=1L;
  }
  stage.setStageId(stageId);
  entity.setStageId(Long.valueOf(stageId));
  Map<String,String> requestParams=new HashMap<String,String>();
  commandExecutionHelper.get().addExecutionCommandsToStage(actionContext,stage,requestParams,allowRetry);
  request.addStages(Collections.singletonList(stage));
}
