{
  Cluster cluster=context.getCluster();
  Map<String,String> commandParams=getNewParameterMap(request);
  commandParams.put(COMMAND_PARAM_CLUSTER_NAME,cluster.getClusterName());
  commandParams.put(COMMAND_PARAM_VERSION,context.getVersion());
  commandParams.put(COMMAND_PARAM_DIRECTION,context.getDirection().name().toLowerCase());
  commandParams.put(COMMAND_PARAM_ORIGINAL_STACK,context.getOriginalStackId().getStackId());
  commandParams.put(COMMAND_PARAM_TARGET_STACK,context.getTargetStackId().getStackId());
  commandParams.put(COMMAND_DOWNGRADE_FROM_VERSION,context.getDowngradeFromVersion());
  commandParams.put(COMMAND_PARAM_UPGRADE_PACK,upgradePack.getName());
  String itemDetail=entity.getText();
  String stageText=StringUtils.abbreviate(entity.getText(),255);
switch (task.getType()) {
case SERVER_ACTION:
case MANUAL:
{
      ServerSideActionTask serverTask=task;
      if (null != serverTask.summary) {
        stageText=serverTask.summary;
      }
      if (task.getType() == Task.Type.MANUAL) {
        ManualTask mt=(ManualTask)task;
        if (StringUtils.isNotBlank(mt.structuredOut)) {
          commandParams.put(COMMAND_PARAM_STRUCT_OUT,mt.structuredOut);
        }
      }
      if (!serverTask.messages.isEmpty()) {
        JsonArray messageArray=new JsonArray();
        for (        String message : serverTask.messages) {
          JsonObject messageObj=new JsonObject();
          messageObj.addProperty("message",message);
          messageArray.add(messageObj);
        }
        itemDetail=messageArray.toString();
        entity.setText(itemDetail);
        itemDetail=StringUtils.join(serverTask.messages," ");
      }
      break;
    }
case CONFIGURE:
{
    ConfigureTask ct=(ConfigureTask)task;
    Map<String,String> configurationChanges=ct.getConfigurationChanges(cluster,configUpgradePack);
    commandParams.putAll(configurationChanges);
    String configType=configurationChanges.get(ConfigureTask.PARAMETER_CONFIG_TYPE);
    if (null != configType) {
      itemDetail=String.format("Updating configuration %s",configType);
    }
 else {
      itemDetail="Skipping Configuration Task " + StringUtils.defaultString(ct.id,"(missing id)");
    }
    entity.setText(itemDetail);
    String configureTaskSummary=ct.getSummary(configUpgradePack);
    if (null != configureTaskSummary) {
      stageText=configureTaskSummary;
    }
 else {
      stageText=itemDetail;
    }
    break;
  }
default :
break;
}
ActionExecutionContext actionContext=new ActionExecutionContext(cluster.getClusterName(),Role.AMBARI_SERVER_ACTION.toString(),Collections.<RequestResourceFilter>emptyList(),commandParams);
actionContext.setTimeout(Short.valueOf((short)-1));
actionContext.setRetryAllowed(allowRetry);
actionContext.setAutoSkipFailures(context.isComponentFailureAutoSkipped());
actionContext.setMaintenanceModeHostExcluded(true);
ExecuteCommandJson jsons=s_commandExecutionHelper.get().getCommandJson(actionContext,cluster,context.getEffectiveStackId());
Stage stage=s_stageFactory.get().createNew(request.getId().longValue(),"/tmp/ambari",cluster.getClusterName(),cluster.getClusterId(),stageText,jsons.getClusterHostInfo(),jsons.getCommandParamsForStage(),jsons.getHostParamsForStage());
stage.setSkippable(skippable);
stage.setAutoSkipFailureSupported(supportsAutoSkipOnFailure);
long stageId=request.getLastStageId() + 1;
if (0L == stageId) {
stageId=1L;
}
stage.setStageId(stageId);
entity.setStageId(Long.valueOf(stageId));
stage.addServerActionCommand(task.getImplementationClass(),getManagementController().getAuthName(),Role.AMBARI_SERVER_ACTION,RoleCommand.EXECUTE,cluster.getClusterName(),new ServiceComponentHostServerActionEvent(null,System.currentTimeMillis()),commandParams,itemDetail,null,s_configuration.getDefaultServerTaskTimeout(),allowRetry,context.isComponentFailureAutoSkipped());
request.addStages(Collections.singletonList(stage));
}
