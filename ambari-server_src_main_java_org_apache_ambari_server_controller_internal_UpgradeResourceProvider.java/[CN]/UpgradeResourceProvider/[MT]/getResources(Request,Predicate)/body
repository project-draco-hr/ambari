{
  Set<Resource> results=new HashSet<Resource>();
  Set<String> requestPropertyIds=getRequestPropertyIds(request,predicate);
  for (  Map<String,Object> propertyMap : getPropertyMaps(predicate)) {
    String clusterName=(String)propertyMap.get(UPGRADE_CLUSTER_NAME);
    if (null == clusterName || clusterName.isEmpty()) {
      throw new IllegalArgumentException("The cluster name is required when querying for upgrades");
    }
    Cluster cluster;
    try {
      cluster=getManagementController().getClusters().getCluster(clusterName);
    }
 catch (    AmbariException e) {
      throw new NoSuchResourceException(String.format("Cluster %s could not be loaded",clusterName));
    }
    List<UpgradeEntity> upgrades=new ArrayList<UpgradeEntity>();
    String upgradeIdStr=(String)propertyMap.get(UPGRADE_REQUEST_ID);
    if (null != upgradeIdStr) {
      UpgradeEntity upgrade=s_upgradeDAO.findUpgradeByRequestId(Long.valueOf(upgradeIdStr));
      if (null != upgrade) {
        upgrades.add(upgrade);
      }
    }
 else {
      upgrades=s_upgradeDAO.findUpgrades(cluster.getClusterId());
    }
    for (    UpgradeEntity entity : upgrades) {
      Resource r=toResource(entity,clusterName,requestPropertyIds);
      results.add(r);
      RequestEntity rentity=s_requestDAO.findByPK(entity.getRequestId());
      setResourceProperty(r,REQUEST_CONTEXT_ID,rentity.getRequestContext(),requestPropertyIds);
      setResourceProperty(r,REQUEST_TYPE_ID,rentity.getRequestType(),requestPropertyIds);
      setResourceProperty(r,REQUEST_CREATE_TIME_ID,rentity.getCreateTime(),requestPropertyIds);
      setResourceProperty(r,REQUEST_START_TIME_ID,rentity.getStartTime(),requestPropertyIds);
      setResourceProperty(r,REQUEST_END_TIME_ID,rentity.getEndTime(),requestPropertyIds);
      setResourceProperty(r,REQUEST_EXCLUSIVE_ID,rentity.isExclusive(),requestPropertyIds);
      Map<Long,HostRoleCommandStatusSummaryDTO> summary=s_hostRoleCommandDAO.findAggregateCounts(entity.getRequestId());
      CalculatedStatus calc=CalculatedStatus.statusFromStageSummary(summary,summary.keySet());
      setResourceProperty(r,REQUEST_STATUS_PROPERTY_ID,calc.getStatus(),requestPropertyIds);
      setResourceProperty(r,REQUEST_PROGRESS_PERCENT_ID,calc.getPercent(),requestPropertyIds);
    }
  }
  return results;
}
