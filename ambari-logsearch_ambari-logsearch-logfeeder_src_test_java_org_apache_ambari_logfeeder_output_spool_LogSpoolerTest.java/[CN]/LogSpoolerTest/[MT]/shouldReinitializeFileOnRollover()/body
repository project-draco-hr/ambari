{
  final PrintWriter spoolWriter1=mock(PrintWriter.class);
  final PrintWriter spoolWriter2=mock(PrintWriter.class);
  spoolWriter1.println("log event1");
  spoolWriter2.println("log event2");
  spoolWriter1.flush();
  spoolWriter1.close();
  final File mockFile1=setupInputFileExpectations();
  final File mockFile2=setupInputFileExpectations();
  LogSpoolerContext logSpoolerContext1=new LogSpoolerContext(mockFile1);
  expect(rolloverCondition.shouldRollover(cmp(logSpoolerContext1,new LogSpoolerFileComparator(),LogicalOperator.EQUAL))).andReturn(true);
  LogSpoolerContext logSpoolerContext2=new LogSpoolerContext(mockFile2);
  expect(rolloverCondition.shouldRollover(cmp(logSpoolerContext2,new LogSpoolerFileComparator(),LogicalOperator.EQUAL))).andReturn(false);
  rolloverHandler.handleRollover(mockFile1);
  replay(spoolWriter1,spoolWriter2,rolloverCondition,rolloverHandler,mockFile1,mockFile2);
  LogSpooler logSpooler=new LogSpooler(spoolDirectory,SOURCE_FILENAME_PREFIX,rolloverCondition,rolloverHandler){
    private boolean wasRolledOver;
    @Override protected PrintWriter initializeSpoolWriter(    File spoolFile) throws IOException {
      if (!wasRolledOver) {
        wasRolledOver=true;
        return spoolWriter1;
      }
 else {
        return spoolWriter2;
      }
    }
    @Override protected File initializeSpoolFile(){
      if (!wasRolledOver) {
        return mockFile1;
      }
 else {
        return mockFile2;
      }
    }
  }
;
  logSpooler.add("log event1");
  logSpooler.add("log event2");
  verify(spoolWriter1,spoolWriter2,rolloverCondition);
}
