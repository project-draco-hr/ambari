{
  final PrintWriter spoolWriter1=mock(PrintWriter.class);
  final PrintWriter spoolWriter2=mock(PrintWriter.class);
  spoolWriter1.println("log event1");
  spoolWriter2.println("log event2");
  spoolWriter1.flush();
  spoolWriter1.close();
  File spoolFile1=new File(spoolDirectory,SOURCE_FILENAME_PREFIX + FILE_SUFFIX + "_1");
  File spoolFile2=new File(spoolDirectory,SOURCE_FILENAME_PREFIX + FILE_SUFFIX + "_2");
  LogSpoolerContext logSpoolerContext1=new LogSpoolerContext(spoolFile1);
  expect(rolloverCondition.shouldRollover(cmp(logSpoolerContext1,new LogSpoolerFileComparator(),LogicalOperator.EQUAL))).andReturn(true);
  LogSpoolerContext logSpoolerContext2=new LogSpoolerContext(spoolFile2);
  expect(rolloverCondition.shouldRollover(cmp(logSpoolerContext2,new LogSpoolerFileComparator(),LogicalOperator.EQUAL))).andReturn(false);
  rolloverHandler.handleRollover(spoolFile1);
  replay(spoolWriter1,spoolWriter2,rolloverCondition,rolloverHandler);
  LogSpooler logSpooler=new LogSpooler(spoolDirectory,SOURCE_FILENAME_PREFIX,rolloverCondition,rolloverHandler){
    private boolean wasRolledOver;
    @Override protected PrintWriter initializeSpoolWriter(    File spoolFile) throws IOException {
      if (!wasRolledOver) {
        wasRolledOver=true;
        return spoolWriter1;
      }
 else {
        return spoolWriter2;
      }
    }
    @Override protected String getCurrentFileName(){
      if (!wasRolledOver) {
        return SOURCE_FILENAME_PREFIX + FILE_SUFFIX + "_1";
      }
 else {
        return SOURCE_FILENAME_PREFIX + FILE_SUFFIX + "_2";
      }
    }
  }
;
  logSpooler.add("log event1");
  logSpooler.add("log event2");
  verify(spoolWriter1,spoolWriter2,rolloverCondition);
}
