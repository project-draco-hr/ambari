{
  final PrintWriter spoolWriter1=mock(PrintWriter.class);
  final PrintWriter spoolWriter2=mock(PrintWriter.class);
  final PrintWriter spoolWriter3=mock(PrintWriter.class);
  spoolWriter1.println("log event1");
  spoolWriter2.println("log event2");
  spoolWriter1.flush();
  spoolWriter1.close();
  spoolWriter2.flush();
  spoolWriter2.close();
  final File mockFile1=setupInputFileExpectations();
  final File mockFile2=setupInputFileExpectations();
  final File mockFile3=setupInputFileExpectations();
  LogSpoolerContext logSpoolerContext1=new LogSpoolerContext(mockFile1);
  expect(rolloverCondition.shouldRollover(cmp(logSpoolerContext1,new LogSpoolerFileComparator(),LogicalOperator.EQUAL))).andReturn(true);
  LogSpoolerContext logSpoolerContext2=new LogSpoolerContext(mockFile2);
  expect(rolloverCondition.shouldRollover(cmp(logSpoolerContext2,new LogSpoolerFileComparator(),LogicalOperator.EQUAL))).andReturn(true);
  rolloverHandler.handleRollover(mockFile1);
  rolloverHandler.handleRollover(mockFile2);
  replay(spoolWriter1,spoolWriter2,rolloverCondition,rolloverHandler,mockFile1,mockFile2,mockFile3);
  LogSpooler logSpooler=new LogSpooler(spoolDirectory,SOURCE_FILENAME_PREFIX,rolloverCondition,rolloverHandler){
    private int currentFileNum;
    @Override protected PrintWriter initializeSpoolWriter(    File spoolFile) throws IOException {
      PrintWriter spoolWriter=null;
switch (currentFileNum) {
case 0:
        spoolWriter=spoolWriter1;
      break;
case 1:
    spoolWriter=spoolWriter2;
  break;
case 2:
spoolWriter=spoolWriter3;
break;
}
currentFileNum++;
return spoolWriter;
}
@Override protected File initializeSpoolFile(){
switch (currentFileNum) {
case 0:
return mockFile1;
case 1:
return mockFile2;
case 2:
return mockFile3;
default :
return null;
}
}
}
;
logSpooler.add("log event1");
logSpooler.add("log event2");
verify(spoolWriter1,spoolWriter2,rolloverCondition);
}
