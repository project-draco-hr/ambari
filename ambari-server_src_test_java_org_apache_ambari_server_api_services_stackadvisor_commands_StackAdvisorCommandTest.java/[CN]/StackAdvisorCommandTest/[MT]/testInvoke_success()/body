{
  String expected="success";
  final String testResourceString=String.format("{\"type\": \"%s\"}",expected);
  final File recommendationsDir=temp.newFolder("recommendationDir");
  String stackAdvisorScript="echo";
  String recommendationsArtifactsLifetime="1w";
  final int requestId=2;
  StackAdvisorRunner saRunner=mock(StackAdvisorRunner.class);
  AmbariMetaInfo metaInfo=mock(AmbariMetaInfo.class);
  doReturn(Collections.emptyList()).when(metaInfo).getStackParentVersions(anyString(),anyString());
  final StackAdvisorCommand<TestResource> command=spy(new TestStackAdvisorCommand(recommendationsDir,recommendationsArtifactsLifetime,stackAdvisorScript,requestId,saRunner,metaInfo));
  StackAdvisorRequest request=StackAdvisorRequestBuilder.forStack("stackName","stackVersion").build();
  String hostsJSON="{\"hosts\" : \"localhost\"";
  String servicesJSON="{\"services\" : \"HDFS\"";
  StackAdvisorData data=new StackAdvisorData(hostsJSON,servicesJSON);
  doReturn(hostsJSON).when(command).getHostsInformation(request);
  doReturn(servicesJSON).when(command).getServicesInformation(request);
  doReturn(data).when(command).adjust(any(StackAdvisorData.class),any(StackAdvisorRequest.class));
  doAnswer(new Answer(){
    public Object answer(    InvocationOnMock invocation) throws Throwable {
      String resultFilePath=String.format("%s/%s",requestId,command.getResultFileName());
      File resultFile=new File(recommendationsDir,resultFilePath);
      resultFile.getParentFile().mkdirs();
      FileUtils.writeStringToFile(resultFile,testResourceString);
      return null;
    }
  }
).when(saRunner).runScript(any(String.class),any(StackAdvisorCommandType.class),any(File.class));
  TestResource result=command.invoke(request);
  assertEquals(expected,result.getType());
  assertEquals(requestId,result.getId());
}
