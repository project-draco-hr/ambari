{
  ClusterDAO clusterDAO=injector.getInstance(ClusterDAO.class);
  StageDAO stageDAO=injector.getInstance(StageDAO.class);
  HostRoleCommandDAO hostRoleCommandDAO=injector.getInstance(HostRoleCommandDAO.class);
  HostDAO hostDAO=injector.getInstance(HostDAO.class);
  RequestDAO requestDAO=injector.getInstance(RequestDAO.class);
  RequestEntity requestEntity=new RequestEntity();
  requestEntity.setRequestId(1L);
  requestEntity.setClusterId(clusterDAO.findByName("test_cluster1").getClusterId());
  StageEntity stageEntity=new StageEntity();
  stageEntity.setRequest(requestEntity);
  stageEntity.setClusterId(clusterDAO.findByName("test_cluster1").getClusterId());
  stageEntity.setRequestId(1L);
  stageEntity.setStageId(1L);
  requestEntity.setStages(Collections.singletonList(stageEntity));
  HostRoleCommandEntity commandEntity=new HostRoleCommandEntity();
  HostRoleCommandEntity commandEntity2=new HostRoleCommandEntity();
  HostRoleCommandEntity commandEntity3=new HostRoleCommandEntity();
  HostEntity host1=hostDAO.findByName("test_host1");
  HostEntity host2=hostDAO.findByName("test_host2");
  commandEntity.setHostEntity(host1);
  host1.getHostRoleCommandEntities().add(commandEntity);
  commandEntity.setRoleCommand(RoleCommand.INSTALL);
  commandEntity.setStatus(HostRoleStatus.QUEUED);
  commandEntity.setRole(Role.DATANODE);
  commandEntity2.setHostEntity(host2);
  host2.getHostRoleCommandEntities().add(commandEntity2);
  commandEntity2.setRoleCommand(RoleCommand.EXECUTE);
  commandEntity2.setRole(Role.NAMENODE);
  commandEntity2.setStatus(HostRoleStatus.COMPLETED);
  commandEntity3.setHostEntity(host1);
  host1.getHostRoleCommandEntities().add(commandEntity3);
  commandEntity3.setRoleCommand(RoleCommand.START);
  commandEntity3.setRole(Role.SECONDARY_NAMENODE);
  commandEntity3.setStatus(HostRoleStatus.IN_PROGRESS);
  commandEntity.setStage(stageEntity);
  commandEntity2.setStage(stageEntity);
  commandEntity3.setStage(stageEntity);
  stageEntity.setHostRoleCommands(new ArrayList<HostRoleCommandEntity>());
  stageEntity.getHostRoleCommands().add(commandEntity);
  stageEntity.getHostRoleCommands().add(commandEntity2);
  stageEntity.getHostRoleCommands().add(commandEntity3);
  requestDAO.create(requestEntity);
  stageDAO.create(stageEntity);
  hostRoleCommandDAO.create(commandEntity3);
  hostRoleCommandDAO.create(commandEntity);
  hostRoleCommandDAO.create(commandEntity2);
  hostDAO.merge(host1);
  hostDAO.merge(host2);
}
