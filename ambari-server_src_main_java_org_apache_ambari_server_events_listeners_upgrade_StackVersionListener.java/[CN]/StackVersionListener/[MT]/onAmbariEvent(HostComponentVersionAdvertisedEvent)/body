{
  LOG.debug("Received event {}",event);
  Cluster cluster=event.getCluster();
  ServiceComponentHost sch=event.getServiceComponentHost();
  String newVersion=event.getVersion();
  if (StringUtils.isEmpty(newVersion)) {
    return;
  }
  m_stackVersionLock.lock();
  if (null != event.getRepositoryVersionId() && null == cluster.getUpgradeInProgress()) {
    RepositoryVersionEntity rve=repositoryVersionDAO.findByPK(event.getRepositoryVersionId());
    if (null != rve) {
      String currentRepoVersion=rve.getVersion();
      if (!StringUtils.equals(currentRepoVersion,newVersion)) {
        rve.setVersion(newVersion);
        repositoryVersionDAO.merge(rve);
      }
    }
  }
  try {
    AmbariMetaInfo metaInfo=ambariMetaInfo.get();
    ComponentInfo componentInfo=metaInfo.getComponent(cluster.getDesiredStackVersion().getStackName(),cluster.getDesiredStackVersion().getStackVersion(),sch.getServiceName(),sch.getServiceComponentName());
    ServiceComponent sc=cluster.getService(sch.getServiceName()).getServiceComponent(sch.getServiceComponentName());
    if (componentInfo.isVersionAdvertised() && StringUtils.isNotBlank(newVersion) && !UNKNOWN_VERSION.equalsIgnoreCase(newVersion)) {
      processComponentAdvertisedVersion(cluster,sch,newVersion,sc);
    }
 else     if (!sc.isVersionAdvertised() && StringUtils.isNotBlank(newVersion) && !UNKNOWN_VERSION.equalsIgnoreCase(newVersion)) {
      LOG.error("ServiceComponent {0} doesn't advertise version, " + "however ServiceHostComponent {} on host {} advertised version as {}. Skipping version update",sc.getName(),sch.getServiceComponentName(),sch.getHostName(),newVersion);
    }
 else {
      if (UNKNOWN_VERSION.equals(sc.getDesiredVersion())) {
        processUnknownDesiredVersion(cluster,sc,sch,newVersion);
      }
 else {
        processComponentAdvertisedVersion(cluster,sch,newVersion,sc);
      }
    }
  }
 catch (  Exception e) {
    LOG.error("Unable to propagate version for ServiceHostComponent on component: {}, host: {}. Error: {}",sch.getServiceComponentName(),sch.getHostName(),e.getMessage());
  }
 finally {
    m_stackVersionLock.unlock();
  }
}
