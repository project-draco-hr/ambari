def configureResourcesCalled(self):
    self.assertResourceCalled('Directory', '/var/log/ambari-logsearch-logfeeder', owner='logfeeder', group='logfeeder', create_parents=True, cd_access='a', mode=493)
    self.assertResourceCalled('Directory', '/var/run/ambari-logsearch-logfeeder', owner='logfeeder', group='logfeeder', create_parents=True, cd_access='a', mode=493)
    self.assertResourceCalled('Directory', '/usr/lib/ambari-logsearch-logfeeder', owner='logfeeder', group='logfeeder', create_parents=True, cd_access='a', mode=493)
    self.assertResourceCalled('Directory', '/etc/ambari-logsearch-logfeeder/conf', owner='logfeeder', group='logfeeder', create_parents=True, cd_access='a', mode=493)
    self.assertResourceCalled('Directory', '/etc/ambari-logsearch-logfeeder/conf/checkpoints', owner='logfeeder', group='logfeeder', create_parents=True, cd_access='a', mode=493)
    self.assertResourceCalled('File', '/var/log/ambari-logsearch-logfeeder/logfeeder.out', owner='logfeeder', group='logfeeder', mode=420, content='')
    self.assertResourceCalled('File', '/etc/ambari-logsearch-logfeeder/conf/logfeeder.properties', owner='logfeeder', content=Template('logfeeder.properties.j2'))
    self.assertResourceCalled('File', '/etc/ambari-logsearch-logfeeder/conf/logfeeder-env.sh', owner='logfeeder', content=InlineTemplate(self.getConfig()['configurations']['logfeeder-env']['content']))
    self.assertResourceCalled('File', '/etc/ambari-logsearch-logfeeder/conf/log4j.xml', owner='logfeeder', content=InlineTemplate(self.getConfig()['configurations']['logfeeder-log4j']['content']))
    self.assertResourceCalled('File', '/etc/ambari-logsearch-logfeeder/conf/grok-patterns', owner='logfeeder', content=Template('grok-patterns.j2'), encoding='utf-8')
    logfeeder_supported_services = ['accumulo', 'ambari', 'ams', 'atlas', 'falcon', 'hbase', 'hdfs', 'hive', 'kafka', 'knox', 'logsearch', 'oozie', 'ranger', 'storm', 'yarn', 'zookeeper']
    logfeeder_config_file_names = (['global.config.json', 'output.config.json'] + [('input.config-%s.json' % tag) for tag in logfeeder_supported_services])
    for file_name in logfeeder_config_file_names:
        self.assertResourceCalled('File', ('/etc/ambari-logsearch-logfeeder/conf/' + file_name), owner='logfeeder', content=Template((file_name + '.j2')))
