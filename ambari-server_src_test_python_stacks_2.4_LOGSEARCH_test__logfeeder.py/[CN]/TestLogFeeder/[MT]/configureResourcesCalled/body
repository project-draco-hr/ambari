def configureResourcesCalled(self):
    self.assertResourceCalled('Directory', '/var/log/ambari-logsearch-logfeeder', create_parents=True, cd_access='a', mode=493)
    self.assertResourceCalled('Directory', '/var/run/ambari-logsearch-logfeeder', create_parents=True, cd_access='a', mode=493)
    self.assertResourceCalled('Directory', '/etc/ambari-logsearch-logfeeder/conf/checkpoints', create_parents=True, cd_access='a', mode=493)
    self.assertResourceCalled('Directory', '/usr/lib/ambari-logsearch-logfeeder', create_parents=True, recursive_ownership=True, cd_access='a', mode=493)
    self.assertResourceCalled('Directory', '/etc/ambari-logsearch-logfeeder/conf', create_parents=True, recursive_ownership=True, cd_access='a', mode=493)
    self.assertResourceCalled('File', '/var/log/ambari-logsearch-logfeeder/logfeeder.out', mode=420, content='')
    self.assertResourceCalled('PropertiesFile', '/etc/ambari-logsearch-logfeeder/conf/logfeeder.properties', properties={'logfeeder.checkpoint.folder': '/etc/ambari-logsearch-logfeeder/conf/checkpoints', 'logfeeder.config.files': 'global.config.json,output.config.json,input.config-ambari.json,input.config-logsearch.json,input.config-zookeeper.json', 'logfeeder.metrics.collector.hosts': '', 'logfeeder.solr.core.config.name': 'history', 'logfeeder.solr.zk_connect_string': 'c6401.ambari.apache.org:2181/infra-solr', })
    self.assertResourceCalled('File', '/etc/ambari-logsearch-logfeeder/conf/logfeeder-env.sh', mode=493, content=InlineTemplate(self.getConfig()['configurations']['logfeeder-env']['content']))
    self.assertResourceCalled('File', '/etc/ambari-logsearch-logfeeder/conf/log4j.xml', content=InlineTemplate(self.getConfig()['configurations']['logfeeder-log4j']['content']))
    self.assertResourceCalled('File', '/etc/ambari-logsearch-logfeeder/conf/grok-patterns', content=InlineTemplate('GP'), encoding='utf-8')
    logfeeder_supported_services = ['ambari', 'logsearch']
    logfeeder_config_file_names = (['global.config.json', 'output.config.json'] + [('input.config-%s.json' % tag) for tag in logfeeder_supported_services])
    for file_name in logfeeder_config_file_names:
        self.assertResourceCalled('File', ('/etc/ambari-logsearch-logfeeder/conf/' + file_name), content=Template((file_name + '.j2')))
    self.assertResourceCalled('File', '/etc/ambari-logsearch-logfeeder/conf/input.config-zookeeper.json', content=InlineTemplate('pattern content'))
