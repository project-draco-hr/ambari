def createComponentLayoutRecommendations(self, services, hosts):
    self.services = services
    recommendations = {'blueprint': {'host_groups': [], }, 'blueprint_cluster_binding': {'host_groups': [], }, }
    hostsList = self.getActiveHosts([host['Hosts'] for host in hosts['items']])
    hostsSet = set(hostsList)
    hostsComponentsMap = {}
    for hostName in hostsList:
        if (hostName not in hostsComponentsMap):
            hostsComponentsMap[hostName] = []
    for service in services['services']:
        masterComponents = [component for component in service['components'] if self.isMasterComponent(component)]
        serviceName = service['StackServices']['service_name']
        serviceAdvisor = self.getServiceAdvisor(serviceName)
        for component in masterComponents:
            componentName = component['StackServiceComponents']['component_name']
            advisor = (serviceAdvisor if (serviceAdvisor is not None) else self)
            hostsForComponent = advisor.getHostsForMasterComponent(services, hosts, component, hostsList)
            for hostName in hostsForComponent:
                if (hostName in hostsSet):
                    hostsComponentsMap[hostName].append({'name': componentName, })
    componentsListList = [service['components'] for service in services['services']]
    componentsList = [item for sublist in componentsListList for item in sublist]
    usedHostsListList = [component['StackServiceComponents']['hostnames'] for component in componentsList if (not self.isComponentNotValuable(component))]
    utilizedHosts = [item for sublist in usedHostsListList for item in sublist]
    freeHosts = [hostName for hostName in hostsList if (hostName not in utilizedHosts)]
    for service in services['services']:
        slaveClientComponents = [component for component in service['components'] if (self.isSlaveComponent(component) or self.isClientComponent(component))]
        serviceName = service['StackServices']['service_name']
        serviceAdvisor = self.getServiceAdvisor(serviceName)
        for component in slaveClientComponents:
            componentName = component['StackServiceComponents']['component_name']
            advisor = (serviceAdvisor if (serviceAdvisor is not None) else self)
            hostsForComponent = advisor.getHostsForSlaveComponent(services, hosts, component, hostsList, freeHosts)
            for hostName in hostsForComponent:
                if ((hostName not in hostsComponentsMap) and (hostName in hostsSet)):
                    hostsComponentsMap[hostName] = []
                if (hostName in hostsSet):
                    hostsComponentsMap[hostName].append({'name': componentName, })
    for service in services['services']:
        serviceName = service['StackServices']['service_name']
        serviceAdvisor = self.getServiceAdvisor(serviceName)
        if (serviceAdvisor is not None):
            serviceComponents = [component for component in service['components']]
            serviceAdvisor.colocateService(hostsComponentsMap, serviceComponents)
    host_groups = recommendations['blueprint']['host_groups']
    bindings = recommendations['blueprint_cluster_binding']['host_groups']
    index = 0
    for key in hostsComponentsMap.keys():
        index += 1
        host_group_name = 'host-group-{0}'.format(index)
        host_groups.append({'name': host_group_name, 'components': hostsComponentsMap[key], })
        bindings.append({'name': host_group_name, 'hosts': [{'fqdn': key, }], })
    return recommendations
