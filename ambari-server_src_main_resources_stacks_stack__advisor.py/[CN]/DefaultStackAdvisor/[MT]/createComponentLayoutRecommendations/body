def createComponentLayoutRecommendations(self, services, hosts):
    recommendations = {'blueprint': {'host_groups': [], }, 'blueprint_cluster_binding': {'host_groups': [], }, }
    hostsList = [host['Hosts']['host_name'] for host in hosts['items']]
    hostsComponentsMap = {}
    for hostName in hostsList:
        if (hostName not in hostsComponentsMap):
            hostsComponentsMap[hostName] = []
    for service in services['services']:
        masterComponents = [component for component in service['components'] if self.isMasterComponent(component)]
        for component in masterComponents:
            componentName = component['StackServiceComponents']['component_name']
            if self.isComponentHostsPopulated(component):
                hostsForComponent = component['StackServiceComponents']['hostnames']
            elif ((len(hostsList) > 1) and self.isMasterComponentWithMultipleInstances(component)):
                hostsCount = self.getMinComponentCount(component)
                if (hostsCount > 1):
                    hostsForComponent = []
                    hostIndex = 0
                    while ((hostsCount > len(hostsForComponent)) and (hostIndex < len(hostsList))):
                        currentHost = hostsList[hostIndex]
                        if self.isHostSuitableForComponent(currentHost, component):
                            hostsForComponent.append(currentHost)
                        hostIndex += 1
                else:
                    hostsForComponent = [self.getHostForComponent(component, hostsList)]
            else:
                hostsForComponent = [self.getHostForComponent(component, hostsList)]
            for hostName in hostsForComponent:
                hostsComponentsMap[hostName].append({'name': componentName, })
    componentsListList = [service['components'] for service in services['services']]
    componentsList = [item for sublist in componentsListList for item in sublist]
    usedHostsListList = [component['StackServiceComponents']['hostnames'] for component in componentsList if (not self.isComponentNotValuable(component))]
    utilizedHosts = [item for sublist in usedHostsListList for item in sublist]
    freeHosts = [hostName for hostName in hostsList if (hostName not in utilizedHosts)]
    for service in services['services']:
        slaveClientComponents = [component for component in service['components'] if (self.isSlaveComponent(component) or self.isClientComponent(component))]
        for component in slaveClientComponents:
            componentName = component['StackServiceComponents']['component_name']
            if (component['StackServiceComponents']['cardinality'] == 'ALL'):
                hostsForComponent = hostsList
            else:
                componentIsPopulated = self.isComponentHostsPopulated(component)
                if componentIsPopulated:
                    hostsForComponent = component['StackServiceComponents']['hostnames']
                else:
                    hostsForComponent = []
                if self.isSlaveComponent(component):
                    hostsForComponent.extend(freeHosts)
                    hostsForComponent = list(set(hostsForComponent))
                elif (self.isClientComponent(component) and (not componentIsPopulated)):
                    hostsForComponent = freeHosts[0:1]
                if (not hostsForComponent):
                    hostsForComponent = hostsList[(-1):]
            for hostName in hostsForComponent:
                if (hostName not in hostsComponentsMap):
                    hostsComponentsMap[hostName] = []
                hostsComponentsMap[hostName].append({'name': componentName, })
    host_groups = recommendations['blueprint']['host_groups']
    bindings = recommendations['blueprint_cluster_binding']['host_groups']
    index = 0
    for key in hostsComponentsMap.keys():
        index += 1
        host_group_name = 'host-group-{0}'.format(index)
        host_groups.append({'name': host_group_name, 'components': hostsComponentsMap[key], })
        bindings.append({'name': host_group_name, 'hosts': [{'fqdn': key, }], })
    return recommendations
