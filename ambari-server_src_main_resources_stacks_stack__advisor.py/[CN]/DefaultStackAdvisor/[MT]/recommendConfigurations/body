def recommendConfigurations(self, services, hosts):
    self.services = services
    stackName = services['Versions']['stack_name']
    stackVersion = services['Versions']['stack_version']
    hostsList = [host['Hosts']['host_name'] for host in hosts['items']]
    servicesList = [service['StackServices']['service_name'] for service in services['services']]
    components = [component['StackServiceComponents']['component_name'] for service in services['services'] for component in service['components']]
    clusterSummary = self.getConfigurationClusterSummary(servicesList, hosts, components, services)
    recommendations = {'Versions': {'stack_name': stackName, 'stack_version': stackVersion, }, 'hosts': hostsList, 'services': servicesList, 'recommendations': {'blueprint': {'configurations': {}, 'host_groups': [], }, 'blueprint_cluster_binding': {'host_groups': [], }, }, }
    if ('config-groups' in services):
        self.recommendConfigGroupsConfigurations(recommendations, services, components, hosts, servicesList)
    else:
        configurations = recommendations['recommendations']['blueprint']['configurations']
        for service in services['services']:
            serviceName = service['StackServices']['service_name']
            calculation = self.getServiceConfigurationRecommender(serviceName)
            if (calculation is not None):
                calculation(configurations, clusterSummary, services, hosts)
            else:
                advisor = self.instantiateServiceAdvisor(service)
                if (advisor is not None):
                    advisor.getServiceConfigurationRecommendations(self, configurations, clusterSummary, services, hosts)
    return recommendations
