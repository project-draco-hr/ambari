def instantiateServiceAdvisor(self, service):
    import imp
    import os
    import traceback
    serviceName = service['StackServices']['service_name']
    className = (service['StackServices']['advisor_name'] if ('advisor_name' in service['StackServices']) else None)
    path = (service['StackServices']['advisor_path'] if ('advisor_path' in service['StackServices']) else None)
    if ((path is None) or (className is None)):
        return None
    if (not os.path.exists(path)):
        return None
    try:
        serviceAdvisor = None
        with open(path, 'rb') as fp:
            serviceAdvisor = imp.load_module('service_advisor_impl', fp, path, ('.py', 'rb', imp.PY_SOURCE))
        if hasattr(serviceAdvisor, className):
            print 'ServiceAdvisor implementation for service {0} was loaded'.format(serviceName)
            clazz = getattr(serviceAdvisor, className)
            return clazz()
    except Exception as e:
        traceback.print_exc()
        print 'Failed to load or create ServiceAdvisor implementation for service {0}'.format(serviceName)
    return None
