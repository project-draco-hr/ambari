def getAffectedConfigs(self, services):
    'returns properties dict including changed-configurations and depended-by configs'
    changedConfigs = services['changed-configurations']
    changedConfigs = [{'type': entry['type'], 'name': entry['name'], } for entry in changedConfigs]
    allDependencies = []
    for item in services['services']:
        allDependencies.extend(item['configurations'])
    dependencies = []
    size = (-1)
    while (size != len(dependencies)):
        size = len(dependencies)
        for config in allDependencies:
            property = {'type': re.sub('\\.xml$', '', config['StackConfigurations']['type']), 'name': config['StackConfigurations']['property_name'], }
            if ((property in dependencies) or (property in changedConfigs)):
                for dependedConfig in config['dependencies']:
                    dependency = {'name': dependedConfig['StackConfigurationDependency']['dependency_name'], 'type': dependedConfig['StackConfigurationDependency']['dependency_type'], }
                    if (dependency not in dependencies):
                        dependencies.append(dependency)
    if (('forced-configurations' in services) and (services['forced-configurations'] is not None)):
        dependencies.extend(services['forced-configurations'])
    return dependencies
