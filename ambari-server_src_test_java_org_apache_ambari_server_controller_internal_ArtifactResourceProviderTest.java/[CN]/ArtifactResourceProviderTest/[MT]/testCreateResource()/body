{
  Capture<ArtifactEntity> createEntityCapture=new Capture<ArtifactEntity>();
  Map<String,Object> artifact_data=Collections.<String,Object>singletonMap("foo","bar");
  TreeMap<String,String> foreignKeys=new TreeMap<String,String>();
  foreignKeys.put("cluster","500");
  Map<String,Object> properties=new HashMap<String,Object>();
  properties.put("Artifacts/artifact_name","test-artifact");
  properties.put("Artifacts/cluster_name","test-cluster");
  properties.put("artifact_data/foo","bar");
  Set<Map<String,Object>> requestProperties=Collections.singleton(properties);
  expect(request.getProperties()).andReturn(requestProperties).anyTimes();
  expect(controller.getClusters()).andReturn(clusters).anyTimes();
  expect(clusters.getCluster("test-cluster")).andReturn(cluster).anyTimes();
  expect(clusters.getClusterById(500L)).andReturn(cluster).anyTimes();
  expect(cluster.getClusterId()).andReturn(500L).anyTimes();
  expect(cluster.getClusterName()).andReturn("test-cluster").anyTimes();
  expect(dao.findByNameAndForeignKeys(eq("test-artifact"),eq(foreignKeys))).andReturn(null).once();
  dao.create(capture(createEntityCapture));
  replay(dao,em,controller,request,clusters,cluster,entity,entity2);
  resourceProvider.createResources(request);
  ArtifactEntity createEntity=createEntityCapture.getValue();
  assertEquals("test-artifact",createEntity.getArtifactName());
  assertEquals(createEntity.getArtifactData(),artifact_data);
  assertEquals(foreignKeys,createEntity.getForeignKeys());
}
