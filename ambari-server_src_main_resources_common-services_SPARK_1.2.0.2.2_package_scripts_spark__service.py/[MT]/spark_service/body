def spark_service(name, action):
    import params
    if (action == 'start'):
        if params.security_enabled:
            spark_kinit_cmd = format('{kinit_path_local} -kt {spark_kerberos_keytab} {spark_principal}; ')
            Execute(spark_kinit_cmd, user=params.spark_user)
        if (params.hdp_stack_version and (compare_versions(params.hdp_stack_version, '2.3.0.0') < 0)):
            resource_created = copy_to_hdfs('tez', params.user_group, params.hdfs_user, host_sys_prepped=params.host_sys_prepped)
            if resource_created:
                params.HdfsResource(None, action='execute')
        if (name == 'jobhistoryserver'):
            historyserver_no_op_test = format('ls {spark_history_server_pid_file} >/dev/null 2>&1 && ps -p `cat {spark_history_server_pid_file}` >/dev/null 2>&1')
            Execute(format('{spark_history_server_start}'), user=params.spark_user, environment={'JAVA_HOME': params.java_home, }, not_if=historyserver_no_op_test)
        elif (name == 'sparkthriftserver'):
            thriftserver_no_op_test = format('ls {spark_thrift_server_pid_file} >/dev/null 2>&1 && ps -p `cat {spark_thrift_server_pid_file}` >/dev/null 2>&1')
            Execute(format('{spark_thrift_server_start} --properties-file {spark_thrift_server_conf_file}'), user=params.spark_user, environment={'JAVA_HOME': params.java_home, }, not_if=thriftserver_no_op_test)
    elif (action == 'stop'):
        if (name == 'jobhistoryserver'):
            Execute(format('{spark_history_server_stop}'), user=params.spark_user, environment={'JAVA_HOME': params.java_home, })
            File(params.spark_history_server_pid_file, action='delete')
        elif (name == 'sparkthriftserver'):
            Execute(format('{spark_thrift_server_stop}'), user=params.spark_user, environment={'JAVA_HOME': params.java_home, })
            File(params.spark_thrift_server_pid_file, action='delete')
