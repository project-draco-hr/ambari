def spark_service(action):
    import params
    if (action == 'start'):
        if params.security_enabled:
            spark_kinit_cmd = format('{kinit_path_local} -kt {spark_kerberos_keytab} {spark_principal}; ')
            Execute(spark_kinit_cmd, user=params.spark_user)
            params.HdfsResource(InlineTemplate(params.tez_tar_destination).get_content(), type='file', action='create_on_execute', source=params.tez_tar_source, group=params.user_group, owner=params.hdfs_user)
            params.HdfsResource(None, action='execute')
        no_op_test = format('ls {spark_history_server_pid_file} >/dev/null 2>&1 && ps -p `cat {spark_history_server_pid_file}` >/dev/null 2>&1')
        Execute(format('{spark_history_server_start}'), user=params.spark_user, environment={'JAVA_HOME': params.java_home, }, not_if=no_op_test)
    elif (action == 'stop'):
        Execute(format('{spark_history_server_stop}'), user=params.spark_user, environment={'JAVA_HOME': params.java_home, })
        File(params.spark_history_server_pid_file, action='delete')
