def install_package(self, name, use_repos=[], skip_repos=[], is_upgrade=False):
    if (is_upgrade or use_repos or (not self._check_existence(name))):
        cmd = INSTALL_CMD[self.get_logoutput()]
        if use_repos:
            active_base_repos = self.get_active_base_repos()
            if ('base' in use_repos):
                use_repos = filter((lambda x: (x != 'base')), use_repos)
                use_repos.extend(active_base_repos)
            use_repos_options = []
            for repo in use_repos:
                use_repos_options = (use_repos_options + ['--repo', repo])
            cmd = (cmd + use_repos_options)
        cmd = (cmd + [name])
        Logger.info(("Installing package %s ('%s')" % (name, string_cmd_from_args_list(cmd))))
        self.checked_call_until_not_locked(cmd, sudo=True, logoutput=self.get_logoutput())
    else:
        Logger.info(('Skipping installation of existing package %s' % name))
