@patch.object(StackVersionsFileHandler, 'read_stack_version')
@patch.object(FileCache, '__init__')
def test_cancel_backgound_command(self, read_stack_version_mock, FileCache_mock):
    FileCache_mock.return_value = None
    dummy_controller = MagicMock()
    cfg = AmbariConfig().getConfig()
    cfg.set('agent', 'tolerate_download_failures', 'true')
    cfg.set('agent', 'prefix', '.')
    cfg.set('agent', 'cache_dir', 'background_tasks')
    actionQueue = ActionQueue(cfg, dummy_controller)
    patch_output_file(actionQueue.customServiceOrchestrator.python_executor)
    actionQueue.customServiceOrchestrator.python_executor.prepare_process_result = MagicMock()
    actionQueue.customServiceOrchestrator.dump_command_to_json = MagicMock()
    lock = threading.RLock()
    complete_done = threading.Condition(lock)

    def command_complete_w(process_condenced_result, handle):
        with lock:
            complete_done.wait(4)
    actionQueue.on_background_command_complete_callback = wraped(actionQueue.on_background_command_complete_callback, None, command_complete_w)
    execute_command = copy.deepcopy(self.background_command)
    actionQueue.put([execute_command])
    actionQueue.processBackgroundQueueSafeEmpty()
    time.sleep(1)
    actionQueue.process_command(self.cancel_background_command)
    with lock:
        complete_done.notifyAll()
