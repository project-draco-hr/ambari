@patch.object(OSCheck, 'os_distribution', new=MagicMock(return_value=os_distro_value))
@patch('__builtin__.open')
@patch.object(ActionQueue, 'status_update_callback')
def test_auto_execute_command(self, status_update_callback_mock, open_mock):

    def open_side_effect(file, mode):
        if (mode == 'r'):
            file_mock = MagicMock()
            file_mock.read.return_value = ('Read from ' + str(file))
            return file_mock
        else:
            return self.original_open(file, mode)
    open_mock.side_effect = open_side_effect
    config = AmbariConfig()
    tempdir = tempfile.gettempdir()
    config.set('agent', 'prefix', tempdir)
    config.set('agent', 'cache_dir', '/var/lib/ambari-agent/cache')
    config.set('agent', 'tolerate_download_failures', 'true')
    dummy_controller = MagicMock()
    dummy_controller.recovery_manager = RecoveryManager(tempfile.mktemp())
    dummy_controller.recovery_manager.update_config(5, 5, 1, 11, True, False, '', '')
    actionQueue = ActionQueue(config, dummy_controller)
    unfreeze_flag = threading.Event()
    python_execution_result_dict = {'stdout': 'out', 'stderr': 'stderr', 'structuredOut': '', }

    def side_effect(command, tmpoutfile, tmperrfile, override_output_files=True, retry=False):
        unfreeze_flag.wait()
        return python_execution_result_dict

    def patched_aq_execute_command(command):
        with patch.object(CustomServiceOrchestrator, 'runCommand') as runCommand_mock:
            runCommand_mock.side_effect = side_effect
            actionQueue.process_command(command)
    python_execution_result_dict['status'] = 'COMPLETE'
    python_execution_result_dict['exitcode'] = 0
    self.assertFalse(actionQueue.tasks_in_progress_or_pending())
    execution_thread = Thread(target=patched_aq_execute_command, args=(self.datanode_auto_start_command,))
    execution_thread.start()
    while True:
        time.sleep(0.1)
        if actionQueue.tasks_in_progress_or_pending():
            break
    unfreeze_flag.set()
    check_queue = True
    while check_queue:
        report = actionQueue.result()
        if (not actionQueue.tasks_in_progress_or_pending()):
            break
        time.sleep(0.1)
    self.assertEqual(len(report['reports']), 0)
    python_execution_result_dict['status'] = 'FAILED'
    python_execution_result_dict['exitcode'] = 13
    execution_thread = Thread(target=patched_aq_execute_command, args=(self.datanode_auto_start_command,))
    execution_thread.start()
    unfreeze_flag.set()
    while check_queue:
        report = actionQueue.result()
        if (not actionQueue.tasks_in_progress_or_pending()):
            break
        time.sleep(0.1)
    self.assertEqual(len(report['reports']), 0)
