@patch('time.sleep')
@patch.object(OSCheck, 'os_distribution', new=MagicMock(return_value=os_distro_value))
@patch.object(StackVersionsFileHandler, 'read_stack_version')
@patch.object(CustomServiceOrchestrator, '__init__')
def test_execute_retryable_command_succeed(self, CustomServiceOrchestrator_mock, read_stack_version_mock, sleep_mock):
    CustomServiceOrchestrator_mock.return_value = None
    dummy_controller = MagicMock()
    actionQueue = ActionQueue(AmbariConfig(), dummy_controller)
    execution_result_succ_dict = {'exitcode': 0, 'stdout': 'out', 'stderr': 'stderr', 'structuredOut': '', 'status': 'COMPLETED', }
    command = copy.deepcopy(self.retryable_command)
    with patch.object(CustomServiceOrchestrator, 'runCommand') as runCommand_mock:
        runCommand_mock.side_effect = [execution_result_succ_dict]
        actionQueue.execute_command(command)
    self.assertTrue(runCommand_mock.called)
    self.assertFalse(sleep_mock.called)
    self.assertEqual(1, runCommand_mock.call_count)
