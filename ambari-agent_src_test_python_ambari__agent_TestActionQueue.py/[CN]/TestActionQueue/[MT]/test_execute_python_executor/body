@patch.object(CustomServiceOrchestrator, 'get_py_executor')
@patch.object(CustomServiceOrchestrator, 'resolve_script_path')
def test_execute_python_executor(self, resolve_script_path_mock, get_py_executor_mock):
    dummy_controller = MagicMock()
    cfg = AmbariConfig()
    cfg.set('agent', 'tolerate_download_failures', 'true')
    cfg.set('agent', 'prefix', '.')
    cfg.set('agent', 'cache_dir', 'background_tasks')
    actionQueue = ActionQueue(cfg, dummy_controller)
    pyex = PythonExecutor(actionQueue.customServiceOrchestrator.tmp_dir, actionQueue.customServiceOrchestrator.config)
    patch_output_file(pyex)
    get_py_executor_mock.return_value = pyex
    actionQueue.customServiceOrchestrator.dump_command_to_json = MagicMock()
    result = {}
    lock = threading.RLock()
    complete_done = threading.Condition(lock)

    def command_complete_w(process_condensed_result, handle):
        with lock:
            result['command_complete'] = {'condensed_result': copy.copy(process_condensed_result), 'handle': copy.copy(handle), 'command_status': actionQueue.commandStatuses.get_command_status(handle.command['taskId']), }
            complete_done.notifyAll()
    actionQueue.on_background_command_complete_callback = wraped(actionQueue.on_background_command_complete_callback, None, command_complete_w)
    actionQueue.put([self.background_command])
    actionQueue.processBackgroundQueueSafeEmpty()
    actionQueue.processStatusCommandQueueSafeEmpty()
    with lock:
        complete_done.wait(0.1)
        finished_status = result['command_complete']['command_status']
        self.assertEqual(finished_status['status'], ActionQueue.COMPLETED_STATUS)
        self.assertEqual(finished_status['stdout'], 'process_out')
        self.assertEqual(finished_status['stderr'], 'process_err')
        self.assertEqual(finished_status['exitCode'], 0)
    runningCommand = actionQueue.commandStatuses.current_state.get(self.background_command['taskId'])
    self.assertTrue((runningCommand is not None))
    report = actionQueue.result()
    self.assertEqual(len(report['reports']), 1)
    self.assertEqual(report['reports'][0]['stdout'], 'process_out')
