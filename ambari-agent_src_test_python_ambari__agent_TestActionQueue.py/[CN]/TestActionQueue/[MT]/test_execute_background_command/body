@patch.object(OSCheck, 'os_distribution', new=MagicMock(return_value=os_distro_value))
@patch.object(CustomServiceOrchestrator, 'runCommand')
@patch.object(CustomServiceOrchestrator, '__init__')
def test_execute_background_command(self, CustomServiceOrchestrator_mock, runCommand_mock):
    CustomServiceOrchestrator_mock.return_value = None
    CustomServiceOrchestrator.runCommand.return_value = {'exitcode': 0, 'stdout': 'out-11', 'stderr': 'err-13', }
    dummy_controller = MagicMock()
    actionQueue = ActionQueue(AmbariConfig(), dummy_controller)
    execute_command = copy.deepcopy(self.background_command)
    actionQueue.put([execute_command])
    actionQueue.processBackgroundQueueSafeEmpty()
    actionQueue.processStatusCommandResultQueueSafeEmpty()
    self.assertTrue(runCommand_mock.called)
    runningCommand = actionQueue.commandStatuses.current_state.get(execute_command['taskId'])
    self.assertTrue((runningCommand is not None))
    self.assertEqual(runningCommand[1]['status'], ActionQueue.IN_PROGRESS_STATUS)
    report = actionQueue.result()
    self.assertEqual(len(report['reports']), 1)
