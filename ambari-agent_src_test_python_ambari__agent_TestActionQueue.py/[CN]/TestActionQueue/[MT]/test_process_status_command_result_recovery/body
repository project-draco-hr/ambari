@patch.object(RecoveryManager, 'command_exists')
@patch.object(RecoveryManager, 'requires_recovery')
@patch.object(OSCheck, 'os_distribution', new=MagicMock(return_value=os_distro_value))
@patch.object(ActionQueue, 'status_update_callback')
@patch.object(ActionQueue, 'execute_command')
@patch.object(LiveStatus, 'build')
@patch.object(CustomServiceOrchestrator, '__init__')
def test_process_status_command_result_recovery(self, CustomServiceOrchestrator_mock, build_mock, execute_command_mock, status_update_callback, requires_recovery_mock, command_exists_mock):
    CustomServiceOrchestrator_mock.return_value = None
    dummy_controller = MagicMock()
    actionQueue = ActionQueue(AmbariConfig(), dummy_controller)
    build_mock.return_value = {'dummy report': '', }
    requires_recovery_mock.return_value = True
    command_exists_mock.return_value = False
    dummy_controller.recovery_manager = RecoveryManager(tempfile.mktemp(), True, False)
    result = (self.status_command, {'exitcode': 0, }, 'UNKNOWN')
    actionQueue.process_status_command_result(result)
    report = actionQueue.result()
    expected = {'dummy report': '', 'securityState': 'UNKNOWN', 'sendExecCmdDet': 'True', }
    self.assertEqual(len(report['componentStatus']), 1)
    self.assertEqual(report['componentStatus'][0], expected)
    requires_recovery_mock.return_value = True
    command_exists_mock.return_value = True
    result = (self.status_command, {'exitcode': 0, }, 'UNKNOWN')
    actionQueue.process_status_command_result(result)
    report = actionQueue.result()
    expected = {'dummy report': '', 'securityState': 'UNKNOWN', 'sendExecCmdDet': 'False', }
    self.assertEqual(len(report['componentStatus']), 1)
    self.assertEqual(report['componentStatus'][0], expected)
