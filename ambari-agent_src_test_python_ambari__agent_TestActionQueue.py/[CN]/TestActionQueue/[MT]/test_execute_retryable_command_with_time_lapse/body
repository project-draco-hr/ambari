@patch('time.time')
@patch('time.sleep')
@patch.object(OSCheck, 'os_distribution', new=MagicMock(return_value=os_distro_value))
@patch.object(CustomServiceOrchestrator, '__init__')
def test_execute_retryable_command_with_time_lapse(self, CustomServiceOrchestrator_mock, sleep_mock, time_mock):
    CustomServiceOrchestrator_mock.return_value = None
    dummy_controller = MagicMock()
    dummy_controller.recovery_manager = RecoveryManager(tempfile.mktemp())
    actionQueue = ActionQueue(AmbariConfig(), dummy_controller)
    python_execution_result_dict = {'exitcode': 1, 'stdout': 'out', 'stderr': 'stderr', 'structuredOut': '', 'status': 'FAILED', }
    times_arr = [8, 10, 14, 18, 22, 26, 30, 34]
    if self.logger.isEnabledFor(logging.INFO):
        times_arr.insert(0, 4)
    time_mock.side_effect = times_arr

    def side_effect(command, tmpoutfile, tmperrfile, override_output_files=True, retry=False):
        return python_execution_result_dict
    command = copy.deepcopy(self.retryable_command)
    with patch.object(CustomServiceOrchestrator, 'runCommand') as runCommand_mock:
        runCommand_mock.side_effect = side_effect
        actionQueue.execute_command(command)
    self.assertTrue(runCommand_mock.called)
    self.assertEqual(2, runCommand_mock.call_count)
    self.assertEqual(1, sleep_mock.call_count)
    sleep_mock.assert_has_calls([call(1)], False)
    runCommand_mock.assert_has_calls([call(command, (((((os.sep + 'tmp') + os.sep) + 'ambari-agent') + os.sep) + 'output-19.txt'), (((((os.sep + 'tmp') + os.sep) + 'ambari-agent') + os.sep) + 'errors-19.txt'), override_output_files=True, retry=False), call(command, (((((os.sep + 'tmp') + os.sep) + 'ambari-agent') + os.sep) + 'output-19.txt'), (((((os.sep + 'tmp') + os.sep) + 'ambari-agent') + os.sep) + 'errors-19.txt'), override_output_files=False, retry=True)])
