@patch.object(CustomServiceOrchestrator, 'runCommand')
@patch('CommandStatusDict.CommandStatusDict')
@patch.object(ActionQueue, 'status_update_callback')
@patch.object(ActionQueue, 'determine_command_format_version')
def test_store_configuration_tags(self, determine_command_format_version_mock, status_update_callback_mock, command_status_dict_mock, cso_runCommand_mock):
    determine_command_format_version_mock.return_value = 2
    custom_service_orchestrator_execution_result_dict = {'stdout': 'out', 'stderr': 'stderr', 'structuredOut': '', 'exitcode': 0, }
    cso_runCommand_mock.return_value = custom_service_orchestrator_execution_result_dict
    config = AmbariConfig().getConfig()
    tempdir = tempfile.gettempdir()
    config.set('agent', 'prefix', tempdir)
    config.set('agent', 'cache_dir', '/var/lib/ambari-agent/cache')
    config.set('agent', 'tolerate_download_failures', 'true')
    dummy_controller = MagicMock()
    actionQueue = ActionQueue(config, dummy_controller)
    actionQueue.execute_command(self.datanode_restart_command)
    report = actionQueue.result()
    expected = {'actionId': '1-1', 'clusterName': u'cc', 'configurationTags': {'global': {'tag': 'v123', }, }, 'exitCode': 0, 'role': u'DATANODE', 'roleCommand': u'CUSTOM_COMMAND', 'serviceName': u'HDFS', 'status': 'COMPLETED', 'customCommand': 'RESTART', 'stderr': 'stderr', 'stdout': 'out', 'structuredOut': '', 'taskId': 9, }
    self.assertEqual(len(report['reports']), 1)
    self.assertEqual(expected, report['reports'][0])
