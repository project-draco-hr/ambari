@patch.object(ActionQueue, 'determine_command_format_version')
@patch('__builtin__.open')
@patch.object(PuppetExecutor, 'runCommand')
@patch.object(CustomServiceOrchestrator, 'runCommand')
@patch.object(ActionQueue, 'status_update_callback')
@patch.object(CustomServiceOrchestrator, '__init__')
def test_command_execution_depending_on_command_format(self, CustomServiceOrchestrator_mock, status_update_callback_mock, custom_ex_runCommand_mock, puppet_runCommand_mock, open_mock, determine_command_format_version_mock):
    CustomServiceOrchestrator_mock.return_value = None
    dummy_controller = MagicMock()
    actionQueue = ActionQueue(AmbariConfig().getConfig(), dummy_controller)
    ret = {'stdout': '', 'stderr': '', 'exitcode': 1, }
    puppet_runCommand_mock.return_value = ret
    determine_command_format_version_mock.return_value = ActionQueue.COMMAND_FORMAT_V1
    actionQueue.execute_command(self.datanode_install_command)
    self.assertTrue(puppet_runCommand_mock.called)
    self.assertFalse(custom_ex_runCommand_mock.called)
    puppet_runCommand_mock.reset_mock()
    custom_ex_runCommand_mock.return_value = ret
    determine_command_format_version_mock.return_value = ActionQueue.COMMAND_FORMAT_V2
    actionQueue.execute_command(self.datanode_install_command)
    self.assertFalse(puppet_runCommand_mock.called)
    self.assertTrue(custom_ex_runCommand_mock.called)
