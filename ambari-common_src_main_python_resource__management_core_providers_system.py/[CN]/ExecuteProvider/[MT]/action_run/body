def action_run(self):
    if self.resource.creates:
        if os.path.exists(self.resource.creates):
            return
    Logger.debug(('Executing %s' % self.resource))
    env = self.resource.environment
    if ('PATH' in env):
        env['PATH'] = os.pathsep.join([os.environ['PATH'], env['PATH']])
    if self.resource.path:
        if (not ('PATH' in env)):
            env['PATH'] = ''
        path = (os.pathsep.join(self.resource.path) if isinstance(self.resource.path, (list, tuple)) else self.resource.path)
        env['PATH'] = os.pathsep.join([os.environ['PATH'], path])
    for i in range(0, self.resource.tries):
        try:
            shell.checked_call(self.resource.command, logoutput=self.resource.logoutput, cwd=self.resource.cwd, env=env, preexec_fn=_preexec_fn(self.resource), user=self.resource.user, wait_for_finish=self.resource.wait_for_finish, timeout=self.resource.timeout, path=self.resource.path, sudo=self.resource.sudo)
            break
        except Fail as ex:
            if (i == (self.resource.tries - 1)):
                raise ex
            else:
                Logger.info(('Retrying after %d seconds. Reason: %s' % (self.resource.try_sleep, str(ex))))
                time.sleep(self.resource.try_sleep)
        except ExecuteTimeoutException:
            err_msg = ("Execution of '%s' was killed due timeout after %d seconds" % (self.resource.command, self.resource.timeout))
            if self.resource.on_timeout:
                Logger.info(("Executing '%s'. Reason: %s" % (self.resource.on_timeout, err_msg)))
                shell.checked_call(self.resource.on_timeout)
            else:
                raise Fail(err_msg)
