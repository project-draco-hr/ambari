@patch('mm_wrapper.print_usage')
def test_parse_args(self, print_usage_mock):
    args = ['or', 'h1', 'h2', '--', 'prog', '-h', '^^', '-opt', 'yet', 'another', 'opt']
    (mode, hostnames, command_line) = mm_wrapper.parse_args(args)
    self.assertEquals(mode, mm_wrapper.OR)
    self.assertEquals(hostnames, ['h1', 'h2'])
    self.assertEquals(command_line, ['prog', '-h', '^^', '-opt', 'yet', 'another', 'opt'])
    args = ['and', 'h1', 'h2', '--', 'prog', '-h', '^^', '-opt', 'yet', 'another', 'opt']
    (mode, hostnames, command_line) = mm_wrapper.parse_args(args)
    self.assertEquals(mode, mm_wrapper.AND)
    self.assertEquals(hostnames, ['h1', 'h2'])
    self.assertEquals(command_line, ['prog', '-h', '^^', '-opt', 'yet', 'another', 'opt'])
    args = ['env_only', 'h1', 'h2', '--', 'prog', '-h', '^^', '-opt', 'yet', 'another', 'opt']
    (mode, hostnames, command_line) = mm_wrapper.parse_args(args)
    self.assertEquals(mode, mm_wrapper.ENV_ONLY)
    self.assertEquals(hostnames, ['h1', 'h2'])
    self.assertEquals(command_line, ['prog', '-h', '^^', '-opt', 'yet', 'another', 'opt'])
    args = []
    mm_wrapper.parse_args(args)
    self.assertTrue(print_usage_mock.called)
