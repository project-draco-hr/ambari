{
  final File httpPassFile=temporaryFolder.newFile();
  Injector injector=Guice.createInjector(new AbstractModule(){
    @Override protected void configure(){
      Properties properties=new Properties();
      properties.setProperty(Configuration.API_USE_SSL.getKey(),"true");
      properties.setProperty(Configuration.CLIENT_API_SSL_KSTR_DIR_NAME.getKey(),httpPassFile.getParent());
      properties.setProperty(Configuration.CLIENT_API_SSL_CRT_PASS_FILE_NAME.getKey(),httpPassFile.getName());
      properties.setProperty(propertyNameMap.get(AbstractSecurityHeaderFilter.STRICT_TRANSPORT_HEADER),"custom1");
      properties.setProperty(propertyNameMap.get(AbstractSecurityHeaderFilter.X_FRAME_OPTIONS_HEADER),"custom2");
      properties.setProperty(propertyNameMap.get(AbstractSecurityHeaderFilter.X_XSS_PROTECTION_HEADER),"custom3");
      properties.setProperty(propertyNameMap.get(AbstractSecurityHeaderFilter.X_CONTENT_TYPE_HEADER),"custom4");
      properties.setProperty(propertyNameMap.get(AbstractSecurityHeaderFilter.CACHE_CONTROL_HEADER),"custom5");
      properties.setProperty(propertyNameMap.get(AbstractSecurityHeaderFilter.PRAGMA_HEADER),"custom6");
      bind(OsFamily.class).toInstance(createNiceMock(OsFamily.class));
      bind(Configuration.class).toInstance(new Configuration(properties));
    }
  }
);
  FilterConfig filterConfig=createNiceMock(FilterConfig.class);
  HttpServletRequest servletRequest=createStrictMock(HttpServletRequest.class);
  expectHttpServletRequestMock(servletRequest);
  HttpServletResponse servletResponse=createStrictMock(HttpServletResponse.class);
  servletResponse.setHeader(AbstractSecurityHeaderFilter.STRICT_TRANSPORT_HEADER,"custom1");
  expectLastCall().once();
  servletResponse.setHeader(AbstractSecurityHeaderFilter.X_FRAME_OPTIONS_HEADER,"custom2");
  expectLastCall().once();
  servletResponse.setHeader(AbstractSecurityHeaderFilter.X_XSS_PROTECTION_HEADER,"custom3");
  expectLastCall().once();
  servletResponse.setHeader(AbstractSecurityHeaderFilter.X_CONTENT_TYPE_HEADER,"custom4");
  expectLastCall().once();
  servletResponse.setHeader(AbstractSecurityHeaderFilter.CACHE_CONTROL_HEADER,"custom5");
  expectLastCall().once();
  servletResponse.setHeader(AbstractSecurityHeaderFilter.PRAGMA_HEADER,"custom6");
  expectLastCall().once();
  FilterChain filterChain=createStrictMock(FilterChain.class);
  filterChain.doFilter(servletRequest,servletResponse);
  expectLastCall().once();
  replayAll();
  AbstractSecurityHeaderFilter securityFilter=injector.getInstance(filterClass);
  Assert.assertNotNull(securityFilter);
  securityFilter.init(filterConfig);
  securityFilter.doFilter(servletRequest,servletResponse,filterChain);
  verifyAll();
}
