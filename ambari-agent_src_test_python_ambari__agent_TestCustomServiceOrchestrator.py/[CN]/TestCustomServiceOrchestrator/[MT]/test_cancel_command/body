@patch('ambari_commons.shell.kill_process_with_children')
@patch.object(CustomServiceOrchestrator, 'resolve_script_path')
@patch.object(CustomServiceOrchestrator, 'resolve_hook_script_path')
@patch.object(FileCache, 'get_host_scripts_base_dir')
@patch.object(FileCache, 'get_service_base_dir')
@patch.object(FileCache, 'get_hook_base_dir')
@patch.object(CustomServiceOrchestrator, 'dump_command_to_json')
@patch.object(PythonExecutor, 'run_file')
@patch.object(FileCache, '__init__')
def test_cancel_command(self, FileCache_mock, run_file_mock, dump_command_to_json_mock, get_hook_base_dir_mock, get_service_base_dir_mock, get_host_scripts_base_dir_mock, resolve_hook_script_path_mock, resolve_script_path_mock, kill_process_with_children_mock):
    FileCache_mock.return_value = None
    command = {'role': 'REGION_SERVER', 'hostLevelParams': {'stack_name': 'HDP', 'stack_version': '2.0.7', 'jdk_location': 'some_location', }, 'commandParams': {'script_type': 'PYTHON', 'script': 'scripts/hbase_regionserver.py', 'command_timeout': '600', 'service_package_folder': 'HBASE', }, 'taskId': '3', 'roleCommand': 'INSTALL', }
    get_host_scripts_base_dir_mock.return_value = '/host_scripts'
    get_service_base_dir_mock.return_value = '/basedir/'
    resolve_script_path_mock.return_value = '/basedir/scriptpath'
    resolve_hook_script_path_mock.return_value = ('/hooks_dir/prefix-command/scripts/hook.py', '/hooks_dir/prefix-command')
    dummy_controller = MagicMock()
    orchestrator = CustomServiceOrchestrator(self.config, dummy_controller)
    unix_process_id = 111
    orchestrator.commands_in_progress = {command['taskId']: unix_process_id, }
    get_hook_base_dir_mock.return_value = '/hooks/'
    run_file_mock_return_value = {'stdout': 'killed', 'stderr': 'killed', 'exitcode': 1, }

    def side_effect(*args, **kwargs):
        time.sleep(0.2)
        return run_file_mock_return_value
    run_file_mock.side_effect = side_effect
    (_, out) = tempfile.mkstemp()
    (_, err) = tempfile.mkstemp()
    pool = ThreadPool(processes=1)
    async_result = pool.apply_async(orchestrator.runCommand, (command, out, err))
    time.sleep(0.1)
    orchestrator.cancel_command(command['taskId'], 'reason')
    ret = async_result.get()
    self.assertEqual(ret['exitcode'], 1)
    self.assertEquals(ret['stdout'], 'killed\nCommand aborted. reason')
    self.assertEquals(ret['stderr'], 'killed\nCommand aborted. reason')
    self.assertTrue(kill_process_with_children_mock.called)
    self.assertFalse((command['taskId'] in orchestrator.commands_in_progress.keys()))
    self.assertTrue(os.path.exists(out))
    self.assertTrue(os.path.exists(err))
    try:
        os.remove(out)
        os.remove(err)
    except:
        pass
