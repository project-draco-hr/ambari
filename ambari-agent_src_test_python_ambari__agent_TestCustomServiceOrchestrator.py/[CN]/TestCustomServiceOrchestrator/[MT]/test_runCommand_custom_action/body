@patch.object(AmbariConfig, 'get')
@patch.object(CustomServiceOrchestrator, 'dump_command_to_json')
@patch.object(PythonExecutor, 'run_file')
@patch.object(FileCache, '__init__')
@patch.object(FileCache, 'get_custom_actions_base_dir')
def test_runCommand_custom_action(self, get_custom_actions_base_dir_mock, FileCache_mock, run_file_mock, dump_command_to_json_mock, ambari_config_get):
    ambari_config_get.return_value = '0'
    FileCache_mock.return_value = None
    get_custom_actions_base_dir_mock.return_value = 'some path'
    (_, script) = tempfile.mkstemp()
    command = {'role': 'any', 'commandParams': {'script_type': 'PYTHON', 'script': 'some_custom_action.py', 'command_timeout': '600', 'jdk_location': 'some_location', }, 'taskId': '3', 'roleCommand': 'ACTIONEXECUTE', }
    dummy_controller = MagicMock()
    orchestrator = CustomServiceOrchestrator(self.config, dummy_controller)
    unix_process_id = 111
    orchestrator.commands_in_progress = {command['taskId']: unix_process_id, }
    run_file_mock.return_value = {'stdout': 'sss', 'stderr': 'eee', 'exitcode': 0, }
    ret = orchestrator.runCommand(command, 'out.txt', 'err.txt')
    self.assertEqual(ret['exitcode'], 0)
    self.assertTrue(run_file_mock.called)
    self.assertEqual(run_file_mock.call_count, 1)
