@patch.object(CustomServiceOrchestrator, 'resolve_script_path')
@patch.object(CustomServiceOrchestrator, 'resolve_hook_script_path')
@patch.object(FileCache, 'get_host_scripts_base_dir')
@patch.object(FileCache, 'get_service_base_dir')
@patch.object(FileCache, 'get_hook_base_dir')
@patch.object(CustomServiceOrchestrator, 'dump_command_to_json')
@patch.object(PythonExecutor, 'run_file')
@patch.object(FileCache, '__init__')
def test_runCommand(self, FileCache_mock, run_file_mock, dump_command_to_json_mock, get_hook_base_dir_mock, get_service_base_dir_mock, get_host_scripts_base_dir_mock, resolve_hook_script_path_mock, resolve_script_path_mock):
    FileCache_mock.return_value = None
    command = {'role': 'REGION_SERVER', 'hostLevelParams': {'stack_name': 'HDP', 'stack_version': '2.0.7', 'jdk_location': 'some_location', }, 'commandParams': {'script_type': 'PYTHON', 'script': 'scripts/hbase_regionserver.py', 'command_timeout': '600', 'service_package_folder': 'HBASE', }, 'taskId': '3', 'roleCommand': 'INSTALL', }
    get_host_scripts_base_dir_mock.return_value = '/host_scripts'
    get_service_base_dir_mock.return_value = '/basedir/'
    resolve_script_path_mock.return_value = '/basedir/scriptpath'
    resolve_hook_script_path_mock.return_value = ('/hooks_dir/prefix-command/scripts/hook.py', '/hooks_dir/prefix-command')
    dummy_controller = MagicMock()
    orchestrator = CustomServiceOrchestrator(self.config, dummy_controller)
    unix_process_id = 111
    orchestrator.commands_in_progress = {command['taskId']: unix_process_id, }
    get_hook_base_dir_mock.return_value = '/hooks/'
    run_file_mock.return_value = {'stdout': 'sss', 'stderr': 'eee', 'exitcode': 0, }
    ret = orchestrator.runCommand(command, 'out.txt', 'err.txt')
    self.assertEqual(ret['exitcode'], 0)
    self.assertTrue(run_file_mock.called)
    self.assertEqual(run_file_mock.call_count, 3)
    run_file_mock.reset_mock()
    run_file_mock.return_value = {'stdout': 'sss', 'stderr': 'eee', 'exitcode': 0, }
    ret = orchestrator.runCommand(command, 'out.txt', 'err.txt', forced_command_name=CustomServiceOrchestrator.COMMAND_NAME_STATUS)
    self.assertEquals(run_file_mock.call_args_list[0][0][10], True)
    self.assertEquals(run_file_mock.call_args_list[1][0][10], False)
    self.assertEquals(run_file_mock.call_args_list[2][0][10], False)
    self.assertEqual(run_file_mock.call_args_list[0][0][1][0], CustomServiceOrchestrator.COMMAND_NAME_STATUS)
    run_file_mock.reset_mock()
    command['commandParams']['script_type'] = 'SOME_TYPE'
    ret = orchestrator.runCommand(command, 'out.txt', 'err.txt')
    self.assertEqual(ret['exitcode'], 1)
    self.assertFalse(run_file_mock.called)
    self.assertTrue(('Unknown script type' in ret['stdout']))
    self.assertEqual(ret['structuredOut'], '{}')
    pass
