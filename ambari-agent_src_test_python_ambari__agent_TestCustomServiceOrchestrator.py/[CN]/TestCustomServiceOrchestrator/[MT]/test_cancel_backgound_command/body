@patch.object(OSCheck, 'os_distribution', new=MagicMock(return_value=os_distro_value))
@patch.object(CustomServiceOrchestrator, 'get_py_executor')
@patch('ambari_commons.shell.kill_process_with_children')
@patch.object(FileCache, '__init__')
@patch.object(CustomServiceOrchestrator, 'resolve_script_path')
@patch.object(CustomServiceOrchestrator, 'resolve_hook_script_path')
def test_cancel_backgound_command(self, resolve_hook_script_path_mock, resolve_script_path_mock, FileCache_mock, kill_process_with_children_mock, get_py_executor_mock):
    FileCache_mock.return_value = None
    FileCache_mock.cache_dir = MagicMock()
    resolve_hook_script_path_mock.return_value = None
    dummy_controller = MagicMock()
    cfg = AmbariConfig()
    cfg.set('agent', 'tolerate_download_failures', 'true')
    cfg.set('agent', 'prefix', '.')
    cfg.set('agent', 'cache_dir', 'background_tasks')
    actionQueue = ActionQueue(cfg, dummy_controller)
    dummy_controller.actionQueue = actionQueue
    orchestrator = CustomServiceOrchestrator(cfg, dummy_controller)
    orchestrator.file_cache = MagicMock()

    def f(a, b):
        return ''
    orchestrator.file_cache.get_service_base_dir = f
    actionQueue.customServiceOrchestrator = orchestrator
    import TestActionQueue
    import copy
    pyex = PythonExecutor(actionQueue.customServiceOrchestrator.tmp_dir, actionQueue.customServiceOrchestrator.config)
    TestActionQueue.patch_output_file(pyex)
    pyex.prepare_process_result = MagicMock()
    get_py_executor_mock.return_value = pyex
    orchestrator.dump_command_to_json = MagicMock()
    lock = threading.RLock()
    complete_done = threading.Condition(lock)
    complete_was_called = {}

    def command_complete_w(process_condenced_result, handle):
        with lock:
            complete_was_called['visited'] = ''
            complete_done.wait(3)
    actionQueue.on_background_command_complete_callback = TestActionQueue.wraped(actionQueue.on_background_command_complete_callback, command_complete_w, None)
    execute_command = copy.deepcopy(TestActionQueue.TestActionQueue.background_command)
    actionQueue.put([execute_command])
    actionQueue.processBackgroundQueueSafeEmpty()
    time.sleep(0.1)
    orchestrator.cancel_command(19, '')
    self.assertTrue(kill_process_with_children_mock.called)
    kill_process_with_children_mock.assert_called_with(33)
    with lock:
        complete_done.notifyAll()
    with lock:
        self.assertTrue(complete_was_called.has_key('visited'))
    time.sleep(0.1)
    runningCommand = actionQueue.commandStatuses.get_command_status(19)
    self.assertTrue((runningCommand is not None))
    self.assertEqual(runningCommand['status'], ActionQueue.FAILED_STATUS)
