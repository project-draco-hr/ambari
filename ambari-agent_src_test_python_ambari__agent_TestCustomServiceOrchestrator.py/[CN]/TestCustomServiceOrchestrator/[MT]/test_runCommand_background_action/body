@patch.object(CustomServiceOrchestrator, 'get_py_executor')
@patch.object(CustomServiceOrchestrator, 'dump_command_to_json')
@patch.object(FileCache, '__init__')
@patch.object(FileCache, 'get_custom_actions_base_dir')
def test_runCommand_background_action(self, get_custom_actions_base_dir_mock, FileCache_mock, dump_command_to_json_mock, get_py_executor_mock):
    FileCache_mock.return_value = None
    get_custom_actions_base_dir_mock.return_value = 'some path'
    (_, script) = tempfile.mkstemp()
    command = {'role': 'any', 'commandParams': {'script_type': 'PYTHON', 'script': 'some_custom_action.py', 'command_timeout': '600', 'jdk_location': 'some_location', }, 'taskId': '13', 'roleCommand': 'ACTIONEXECUTE', 'commandType': 'BACKGROUND_EXECUTION_COMMAND', '__handle': BackgroundCommandExecutionHandle({'taskId': '13', }, 13, MagicMock(), MagicMock()), }
    dummy_controller = MagicMock()
    orchestrator = CustomServiceOrchestrator(self.config, dummy_controller)
    import TestActionQueue
    pyex = PythonExecutor(orchestrator.tmp_dir, orchestrator.config)
    TestActionQueue.patch_output_file(pyex)
    pyex.condenseOutput = MagicMock()
    get_py_executor_mock.return_value = pyex
    orchestrator.dump_command_to_json = MagicMock()
    ret = orchestrator.runCommand(command, 'out.txt', 'err.txt')
    self.assertEqual(ret['exitcode'], 777)
