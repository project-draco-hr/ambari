def initialize_region_counts(self):
    try:
        xmx_master_bytes = format_Xmx_size_to_bytes(self.ams_hbase_env['hbase_master_heapsize'], 'm')
        xmx_region_bytes = 0
        if ('hbase_regionserver_heapsize' in self.ams_hbase_env):
            xmx_region_bytes = format_Xmx_size_to_bytes(self.ams_hbase_env['hbase_regionserver_heapsize'], 'm')
        xmx_bytes = (xmx_master_bytes + xmx_region_bytes)
        if (self.mode == 'distributed'):
            xmx_bytes = xmx_region_bytes
        memstore_max_mem = (float(self.ams_hbase_site['hbase.regionserver.global.memstore.upperLimit']) * xmx_bytes)
        memstore_flush_size = format_Xmx_size_to_bytes(self.ams_hbase_site['hbase.hregion.memstore.flush.size'])
        max_inmemory_regions = ((memstore_max_mem / memstore_flush_size) - other_region_static_count)
        print ('max_inmemory_regions: %s' % max_inmemory_regions)
        if (max_inmemory_regions > 2):
            self.desired_precision_region_count = max(2, int(math.floor((0.7 * max_inmemory_regions))))
            self.desired_aggregate_region_count = max(2, int(math.floor((0.15 * max_inmemory_regions))))
        else:
            self.desired_precision_region_count = 2
            self.desired_aggregate_region_count = 2
    except:
        print 'Bad config settings, could not calculate max regions available.'
    pass
