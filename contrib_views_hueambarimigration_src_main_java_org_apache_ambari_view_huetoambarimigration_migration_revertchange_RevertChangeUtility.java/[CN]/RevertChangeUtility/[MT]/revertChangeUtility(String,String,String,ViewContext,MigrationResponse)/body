{
  long startTime=System.currentTimeMillis();
  final Logger logger=Logger.getLogger(RevertChangeUtility.class);
  logger.info("------------------------------");
  logger.info("Reverting the changes Start:");
  logger.info("------------------------------");
  logger.info("Revert Date " + revertDate);
  logger.info("instance name " + instance);
  int i=0;
  BufferedReader br=null;
  Connection connectionAmbariDatabase=null;
  try {
    connectionAmbariDatabase=DataSourceAmbariDatabase.getInstance(view.getProperties().get("ambaridrivername"),view.getProperties().get("ambarijdbcurl"),view.getProperties().get("ambaridbusername"),view.getProperties().get("ambaridbpassword")).getConnection();
    connectionAmbariDatabase.setAutoCommit(false);
    Statement stmt=null;
    stmt=connectionAmbariDatabase.createStatement();
    SAXBuilder builder=new SAXBuilder();
    File xmlFile=new File(ConfigurationCheckImplementation.getHomeDir() + "RevertChangesService.xml");
    try {
      Document document=(Document)builder.build(xmlFile);
      Element rootNode=document.getRootElement();
      List list=rootNode.getChildren("RevertRecord");
      logger.info("list size is = " + list.size());
      for (i=0; i < list.size(); i++) {
        float calc=((float)(i + 1)) / list.size() * 100;
        int progressPercentage=Math.round(calc);
        migrationresult.setIsNoQuerySelected("yes");
        migrationresult.setProgressPercentage(progressPercentage);
        migrationresult.setNumberOfQueryTransfered(i + 1);
        migrationresult.setTotalNoQuery(list.size());
        getResourceManager(view).update(migrationresult,jobid);
        Element node=(Element)list.get(i);
        if (node.getChildText("instance").equals(instance)) {
          logger.info("instance matched");
          if (stringtoDatecompare(revertDate,node.getChildText("datetime").toString())) {
            logger.info("date is less query is sucess");
            String sql=node.getChildText("query");
            logger.info(sql);
            stmt.executeUpdate(sql);
            removedir(node.getChildText("dirname").toString(),view.getProperties().get("namenode_URI_Ambari"));
            logger.info(node.getChildText("dirname").toString() + " deleted");
          }
 else {
            logger.info("date is big query is failed");
          }
        }
      }
      connectionAmbariDatabase.commit();
      logger.info("------------------------------");
      logger.info("Reverting the changes End");
      logger.info("------------------------------");
    }
 catch (    IOException e) {
      logger.error("IOException: ",e);
    }
catch (    ParseException e) {
      logger.error("ParseException: ",e);
    }
catch (    JDOMException e) {
      logger.error("JDOMException: ",e);
    }
catch (    URISyntaxException e) {
      logger.error("URISyntaxException:  ",e);
    }
  }
 catch (  SQLException e1) {
    logger.error("SqlException  ",e1);
    try {
      connectionAmbariDatabase.rollback();
      logger.info("Rollback done");
    }
 catch (    SQLException e2) {
      logger.error("SqlException in Rollback  ",e2);
    }
  }
catch (  PropertyVetoException e) {
    logger.error("PropertyVetoException: ",e);
  }
  long stopTime=System.currentTimeMillis();
  long elapsedTime=stopTime - startTime;
  MigrationModel model=new MigrationModel();
  return model;
}
