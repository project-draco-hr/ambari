def download_and_install_jdk(args):
    properties = get_ambari_properties()
    if (properties == (-1)):
        err = 'Error getting ambari properties'
        raise FatalException((-1), err)
    conf_file = properties.fileName
    ok = False
    jcePolicyWarn = 'JCE Policy files are required for configuring Kerberos security. If you plan to use Kerberos,please make sure JCE Unlimited Strength Jurisdiction Policy Files are valid on all hosts.'
    if args.java_home:
        if ((not os.path.exists(args.java_home)) or (not os.path.isfile(os.path.join(args.java_home, JAVA_EXE_SUBPATH)))):
            err = (('Path to java home ' + args.java_home) + ' or java binary file does not exists')
            raise FatalException(1, err)
        print_warning_msg((('JAVA_HOME ' + args.java_home) + ' must be valid on ALL hosts'))
        print_warning_msg(jcePolicyWarn)
        properties.process_pair(JAVA_HOME_PROPERTY, args.java_home)
        properties.removeOldProp(JDK_NAME_PROPERTY)
        properties.removeOldProp(JCE_NAME_PROPERTY)
        update_properties(properties)
        os_ensure_java_home_env_var_is_set(args.java_home)
        return 0
    else:
        global JDK_INDEX
        java_home_var = get_JAVA_HOME()
        if java_home_var:
            if args.silent:
                change_jdk = False
            else:
                change_jdk = get_YN_input('Do you want to change Oracle JDK [y/n] (n)? ', False)
            if (not change_jdk):
                os_ensure_java_home_env_var_is_set(java_home_var)
                return 0
        elif args.silent:
            if os.environ.has_key(JAVA_HOME):
                args.java_home = os.environ[JAVA_HOME]
                properties.process_pair(JAVA_HOME_PROPERTY, args.java_home)
                properties.removeOldProp(JDK_NAME_PROPERTY)
                properties.removeOldProp(JCE_NAME_PROPERTY)
                update_properties(properties)
                os_ensure_java_home_env_var_is_set(args.java_home)
                return 0
            else:
                jdk_num = '1'
                (jdks, jdk_choice_prompt, jdk_valid_choices, custom_jdk_number) = populate_jdk_configs(properties, jdk_num)
        else:
            jdk_num = str((JDK_INDEX + 1))
            (jdks, jdk_choice_prompt, jdk_valid_choices, custom_jdk_number) = populate_jdk_configs(properties, jdk_num)
            jdk_num = get_validated_string_input(jdk_choice_prompt, jdk_num, jdk_valid_choices, 'Invalid number.', False)
            java_bin = 'java'
            if OSCheck.is_windows_family():
                java_bin = 'java.exe'
            if (jdk_num == str(custom_jdk_number)):
                print_warning_msg('JDK must be installed on all hosts and JAVA_HOME must be valid on all hosts.')
                print_warning_msg(jcePolicyWarn)
                args.java_home = get_validated_string_input('Path to JAVA_HOME: ', None, None, None, False, False)
                if ((not os.path.exists(args.java_home)) or (not os.path.isfile(os.path.join(args.java_home, 'bin', java_bin)))):
                    err = 'Java home path or java binary file is unavailable. Please put correct path to java home.'
                    raise FatalException(1, err)
                print 'Validating JDK on Ambari Server...done.'
                properties.process_pair(JAVA_HOME_PROPERTY, args.java_home)
                properties.removeOldProp(JDK_NAME_PROPERTY)
                properties.removeOldProp(JCE_NAME_PROPERTY)
                update_properties(properties)
                os_ensure_java_home_env_var_is_set(args.java_home)
                return 0
        JDK_INDEX = (int(jdk_num) - 1)
        jdk_cfg = jdks[JDK_INDEX]
        try:
            resources_dir = properties[RESOURCES_DIR_PROPERTY]
        except KeyError as e:
            err = ((('Property ' + str(e)) + ' is not defined at ') + conf_file)
            raise FatalException(1, err)
        dest_file = os.path.abspath(os.path.join(resources_dir, jdk_cfg.dest_file))
        if os.path.exists(dest_file):
            print ('JDK already exists, using ' + dest_file)
        else:
            if args.silent:
                print 'Accepting the JDK license terms by default...'
            else:
                ok = get_YN_input('To download the Oracle JDK you must accept the license terms found at http://www.oracle.com/technetwork/java/javase/terms/license/index.html and not accepting will cancel the Ambari Server setup.\nDo you accept the Oracle Binary Code License Agreement [y/n] (y)? ', True)
                if (not ok):
                    print 'Exiting...'
                    sys.exit(1)
            jdk_url = jdk_cfg.url
            print ((('Downloading JDK from ' + jdk_url) + ' to ') + dest_file)
            _dowload_jdk(jdk_url, dest_file)
        try:
            (retcode, out) = install_jdk(dest_file, jdk_cfg.inst_dir)
        except Exception as e:
            print ('Installation of JDK has failed: %s\n' % e.message)
            file_exists = os.path.isfile(dest_file)
            if file_exists:
                if args.silent:
                    ok = False
                else:
                    ok = get_YN_input((('JDK found at ' + dest_file) + '. Would you like to re-download the JDK [y/n] (y)? '), True)
                if (not ok):
                    err = (('Unable to install JDK. Please remove JDK file found at ' + dest_file) + ' and re-run Ambari Server setup')
                    raise FatalException(1, err)
                else:
                    jdk_url = jdk_cfg.url
                    print ((('Re-downloading JDK from ' + jdk_url) + ' to ') + dest_file)
                    _dowload_jdk(jdk_url, dest_file)
                    print ('Successfully re-downloaded JDK distribution to ' + dest_file)
                    try:
                        (retcode, out) = install_jdk(dest_file, jdk_cfg.inst_dir)
                    except Exception as e:
                        print ('Installation of JDK was failed: %s\n' % e.message)
                        err = (('Unable to install JDK. Please remove JDK, file found at ' + dest_file) + ' and re-run Ambari Server setup')
                        raise FatalException(1, err)
            else:
                err = (('Unable to install JDK. File ' + dest_file) + ' does not exist, please re-run Ambari Server setup')
                raise FatalException(1, err)
        properties.process_pair(JDK_NAME_PROPERTY, jdk_cfg.dest_file)
        properties.process_pair(JAVA_HOME_PROPERTY, jdk_cfg.inst_dir)
    try:
        download_jce_policy(jdk_cfg, resources_dir, properties)
    except FatalException as e:
        print 'JCE Policy files are required for secure HDP setup. Please ensure  all hosts have the JCE unlimited strength policy 6, files.'
        print_error_msg('Failed to download JCE policy files:')
        if (e.reason is not None):
            print_error_msg('\nREASON: {0}'.format(e.reason))
    update_properties(properties)
    os_ensure_java_home_env_var_is_set(jdk_cfg.inst_dir)
    return 0
