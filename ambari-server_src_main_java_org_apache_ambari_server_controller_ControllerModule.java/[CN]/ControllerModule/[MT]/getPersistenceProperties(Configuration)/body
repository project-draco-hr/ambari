{
  Properties properties=new Properties();
  DatabaseType databaseType=configuration.getDatabaseType();
  LOG.info("Detected {} as the database type from the JDBC URL",databaseType);
  Map<String,String> customProperties=configuration.getDatabaseCustomProperties();
  if (0 != customProperties.size()) {
    for (    Entry<String,String> entry : customProperties.entrySet()) {
      properties.setProperty("eclipselink.jdbc.property." + entry.getKey(),entry.getValue());
    }
  }
switch (configuration.getPersistenceType()) {
case IN_MEMORY:
    properties.setProperty(JDBC_URL,Configuration.JDBC_IN_MEMORY_URL);
  properties.setProperty(JDBC_DRIVER,Configuration.JDBC_IN_MEMROY_DRIVER);
properties.setProperty(DDL_GENERATION,DROP_AND_CREATE);
properties.setProperty(THROW_EXCEPTIONS,"true");
case REMOTE:
properties.setProperty(JDBC_URL,configuration.getDatabaseUrl());
properties.setProperty(JDBC_DRIVER,configuration.getDatabaseDriver());
break;
case LOCAL:
properties.setProperty(JDBC_URL,configuration.getLocalDatabaseUrl());
properties.setProperty(JDBC_DRIVER,Configuration.JDBC_LOCAL_DRIVER);
break;
}
boolean isConnectionPoolingExternal=false;
ConnectionPoolType connectionPoolType=configuration.getConnectionPoolType();
if (connectionPoolType == ConnectionPoolType.C3P0) {
isConnectionPoolingExternal=true;
}
if (databaseType == DatabaseType.MYSQL) {
isConnectionPoolingExternal=true;
}
if (isConnectionPoolingExternal) {
LOG.info("Using c3p0 {} as the EclipsLink DataSource",ComboPooledDataSource.class.getSimpleName());
String testQuery="SELECT 1";
if (databaseType == DatabaseType.ORACLE) {
testQuery="SELECT 1 FROM DUAL";
}
ComboPooledDataSource dataSource=new ComboPooledDataSource();
try {
dataSource.setDriverClass(configuration.getDatabaseDriver());
}
 catch (PropertyVetoException pve) {
LOG.warn("Unable to initialize c3p0",pve);
return properties;
}
dataSource.setJdbcUrl(configuration.getDatabaseUrl());
dataSource.setUser(configuration.getDatabaseUser());
dataSource.setPassword(configuration.getDatabasePassword());
dataSource.setMinPoolSize(configuration.getConnectionPoolMinimumSize());
dataSource.setInitialPoolSize(configuration.getConnectionPoolMinimumSize());
dataSource.setMaxPoolSize(configuration.getConnectionPoolMaximumSize());
dataSource.setAcquireIncrement(configuration.getConnectionPoolAcquisitionSize());
dataSource.setMaxConnectionAge(configuration.getConnectionPoolMaximumAge());
dataSource.setMaxIdleTime(configuration.getConnectionPoolMaximumIdle());
dataSource.setMaxIdleTimeExcessConnections(configuration.getConnectionPoolMaximumExcessIdle());
dataSource.setPreferredTestQuery(testQuery);
dataSource.setIdleConnectionTestPeriod(configuration.getConnectionPoolIdleTestInternval());
properties.put(NON_JTA_DATASOURCE,dataSource);
}
return properties;
}
