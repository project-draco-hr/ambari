{
  List<Class<? extends Annotation>> classes=Arrays.asList(EagerSingleton.class,StaticallyInject.class,AmbariService.class);
  if (null == beanDefinitions || beanDefinitions.size() == 0) {
    ClassPathScanningCandidateComponentProvider scanner=new ClassPathScanningCandidateComponentProvider(false);
    for (    Class<? extends Annotation> cls : classes) {
      scanner.addIncludeFilter(new AnnotationTypeFilter(cls));
    }
    beanDefinitions=scanner.findCandidateComponents(AMBARI_PACKAGE);
  }
  if (null == beanDefinitions || beanDefinitions.size() == 0) {
    LOG.warn("No instances of {} found to register",classes);
    return beanDefinitions;
  }
  Set<com.google.common.util.concurrent.Service> services=new HashSet<com.google.common.util.concurrent.Service>();
  for (  BeanDefinition beanDefinition : beanDefinitions) {
    String className=beanDefinition.getBeanClassName();
    Class<?> clazz=ClassUtils.resolveClassName(className,ClassUtils.getDefaultClassLoader());
    if (null != clazz.getAnnotation(EagerSingleton.class)) {
      bind(clazz).asEagerSingleton();
      LOG.debug("Binding singleton {} eagerly",clazz);
    }
    if (null != clazz.getAnnotation(StaticallyInject.class)) {
      requestStaticInjection(clazz);
      LOG.debug("Statically injecting {} ",clazz);
    }
    if (null != clazz.getAnnotation(AmbariService.class)) {
      if (!AbstractScheduledService.class.isAssignableFrom(clazz)) {
        String message=MessageFormat.format("Unable to register service {0} because it is not an AbstractScheduledService",clazz);
        LOG.warn(message);
        throw new RuntimeException(message);
      }
      AbstractScheduledService service=null;
      try {
        service=(AbstractScheduledService)clazz.newInstance();
        bind((Class<AbstractScheduledService>)clazz).toInstance(service);
        services.add(service);
        LOG.debug("Registering service {} ",clazz);
      }
 catch (      Exception exception) {
        LOG.error("Unable to register {} as a service",clazz,exception);
        throw new RuntimeException(exception);
      }
    }
  }
  ServiceManager manager=new ServiceManager(services);
  bind(ServiceManager.class).toInstance(manager);
  return beanDefinitions;
}
