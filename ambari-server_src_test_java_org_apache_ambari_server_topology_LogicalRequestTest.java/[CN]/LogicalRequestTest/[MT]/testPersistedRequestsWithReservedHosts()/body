{
  Long requestId=1L;
  TopologyHostInfoEntity host1=new TopologyHostInfoEntity();
  host1.setId(100L);
  host1.setFqdn("host1");
  TopologyHostInfoEntity host2=new TopologyHostInfoEntity();
  host2.setId(101L);
  host2.setFqdn("host2");
  TopologyHostInfoEntity host3=new TopologyHostInfoEntity();
  host3.setId(103L);
  host3.setFqdn("host3");
  TopologyHostInfoEntity host4=new TopologyHostInfoEntity();
  host4.setId(104L);
  host4.setFqdn("host4");
  TopologyHostGroupEntity hostGroupEntity1=new TopologyHostGroupEntity();
  hostGroupEntity1.setTopologyHostInfoEntities(ImmutableSet.of(host1,host2,host3,host4));
  hostGroupEntity1.setName("host_group_1");
  TopologyHostRequestEntity hostRequestEntityHost1Matched=new TopologyHostRequestEntity();
  hostRequestEntityHost1Matched.setId(1L);
  hostRequestEntityHost1Matched.setHostName(host1.getFqdn());
  hostRequestEntityHost1Matched.setTopologyHostGroupEntity(hostGroupEntity1);
  hostRequestEntityHost1Matched.setTopologyHostTaskEntities(Collections.<TopologyHostTaskEntity>emptySet());
  expect(ambariContext.isHostRegisteredWithCluster(eq(clusterId),eq(host1.getFqdn()))).andReturn(true).anyTimes();
  TopologyHostRequestEntity hostRequestEntityHost2Matched=new TopologyHostRequestEntity();
  hostRequestEntityHost2Matched.setId(2L);
  hostRequestEntityHost2Matched.setHostName(host2.getFqdn());
  hostRequestEntityHost2Matched.setTopologyHostGroupEntity(hostGroupEntity1);
  hostRequestEntityHost2Matched.setTopologyHostTaskEntities(Collections.<TopologyHostTaskEntity>emptySet());
  expect(ambariContext.isHostRegisteredWithCluster(eq(clusterId),eq(host2.getFqdn()))).andReturn(true).anyTimes();
  TopologyHostRequestEntity hostRequestEntityHost3NotMatched=new TopologyHostRequestEntity();
  hostRequestEntityHost3NotMatched.setId(3L);
  hostRequestEntityHost3NotMatched.setTopologyHostGroupEntity(hostGroupEntity1);
  hostRequestEntityHost3NotMatched.setTopologyHostTaskEntities(Collections.<TopologyHostTaskEntity>emptySet());
  expect(ambariContext.isHostRegisteredWithCluster(eq(clusterId),eq(host3.getFqdn()))).andReturn(false).anyTimes();
  TopologyHostRequestEntity hostRequestEntityHost4NotMatched=new TopologyHostRequestEntity();
  hostRequestEntityHost4NotMatched.setId(4L);
  hostRequestEntityHost4NotMatched.setTopologyHostGroupEntity(hostGroupEntity1);
  hostRequestEntityHost4NotMatched.setTopologyHostTaskEntities(Collections.<TopologyHostTaskEntity>emptySet());
  expect(ambariContext.isHostRegisteredWithCluster(eq(clusterId),eq(host4.getFqdn()))).andReturn(false).anyTimes();
  Collection<TopologyHostRequestEntity> reservedHostRequestEntities=ImmutableSet.of(hostRequestEntityHost1Matched,hostRequestEntityHost2Matched,hostRequestEntityHost3NotMatched,hostRequestEntityHost4NotMatched);
  hostGroupEntity1.setTopologyHostRequestEntities(reservedHostRequestEntities);
  TopologyRequestEntity topologyRequestEntity=new TopologyRequestEntity();
  topologyRequestEntity.setTopologyHostGroupEntities(Collections.singleton(hostGroupEntity1));
  expect(logicalRequestEntity.getTopologyHostRequestEntities()).andReturn(reservedHostRequestEntities).atLeastOnce();
  expect(logicalRequestEntity.getTopologyRequestEntity()).andReturn(topologyRequestEntity).atLeastOnce();
  expect(blueprint.getHostGroup(eq("host_group_1"))).andReturn(hostGroup1).atLeastOnce();
  expect(hostGroup1.containsMasterComponent()).andReturn(false).atLeastOnce();
  replayAll();
  LogicalRequest req=new LogicalRequest(requestId,replayedTopologyRequest,clusterTopology,logicalRequestEntity);
  verifyAll();
  Collection<String> actualReservedHosts=req.getReservedHosts();
  Collection<String> expectedReservedHosts=ImmutableSet.of(host3.getFqdn(),host4.getFqdn());
  assertEquals(expectedReservedHosts,actualReservedHosts);
  Collection<HostRequest> actualCompletedHostReqs=req.getCompletedHostRequests();
  assertEquals(2,actualCompletedHostReqs.size());
  Optional<HostRequest> completedHostReq1=Iterables.tryFind(actualCompletedHostReqs,new Predicate<HostRequest>(){
    @Override public boolean apply(    @Nullable HostRequest input){
      return "host1".equals(input.getHostName());
    }
  }
);
  Optional<HostRequest> completedHostReq2=Iterables.tryFind(actualCompletedHostReqs,new Predicate<HostRequest>(){
    @Override public boolean apply(    @Nullable HostRequest input){
      return "host2".equals(input.getHostName());
    }
  }
);
  assertTrue(completedHostReq1.isPresent() && completedHostReq2.isPresent());
}
