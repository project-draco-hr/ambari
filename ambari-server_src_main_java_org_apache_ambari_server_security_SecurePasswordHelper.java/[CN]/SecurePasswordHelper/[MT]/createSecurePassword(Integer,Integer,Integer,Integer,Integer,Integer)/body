{
  if ((length == null) || (length < 1)) {
    length=SecurePasswordHelper.DEFAULT_SECURE_PASSWORD_LENGTH;
  }
  if (minLowercaseLetters == null) {
    minLowercaseLetters=SecurePasswordHelper.DEFAULT_SECURE_PASSWORD_MIN_LOWERCASE_LETTERS;
  }
  if (minUppercaseLetters == null) {
    minUppercaseLetters=SecurePasswordHelper.DEFAULT_SECURE_PASSWORD_MIN_UPPERCASE_LETTERS;
  }
  if (minDigits == null) {
    minDigits=SecurePasswordHelper.DEFAULT_SECURE_PASSWORD_MIN_DIGITS;
  }
  if (minPunctuation == null) {
    minPunctuation=SecurePasswordHelper.DEFAULT_SECURE_PASSWORD_MIN_PUNCTUATION;
  }
  if (minWhitespace == null) {
    minWhitespace=SecurePasswordHelper.DEFAULT_SECURE_PASSWORD_MIN_WHITESPACE;
  }
  List<Character> characters=new ArrayList<Character>(length);
  for (int i=0; i < minLowercaseLetters; i++) {
    characters.add(SecurePasswordHelper.SECURE_PASSWORD_CHARACTER_CLASS_LOWERCASE_LETTERS[secureRandom.nextInt(SecurePasswordHelper.SECURE_PASSWORD_CHARACTER_CLASS_LOWERCASE_LETTERS.length)]);
  }
  for (int i=0; i < minUppercaseLetters; i++) {
    characters.add(SecurePasswordHelper.SECURE_PASSWORD_CHARACTER_CLASS_UPPERCASE_LETTERS[secureRandom.nextInt(SecurePasswordHelper.SECURE_PASSWORD_CHARACTER_CLASS_UPPERCASE_LETTERS.length)]);
  }
  for (int i=0; i < minDigits; i++) {
    characters.add(SecurePasswordHelper.SECURE_PASSWORD_CHARACTER_CLASS_DIGITS[secureRandom.nextInt(SecurePasswordHelper.SECURE_PASSWORD_CHARACTER_CLASS_DIGITS.length)]);
  }
  for (int i=0; i < minPunctuation; i++) {
    characters.add(SecurePasswordHelper.SECURE_PASSWORD_CHARACTER_CLASS_PUNCTUATION[secureRandom.nextInt(SecurePasswordHelper.SECURE_PASSWORD_CHARACTER_CLASS_PUNCTUATION.length)]);
  }
  for (int i=0; i < minWhitespace; i++) {
    characters.add(SecurePasswordHelper.SECURE_PASSWORD_CHARACTER_CLASS_WHITESPACE[secureRandom.nextInt(SecurePasswordHelper.SECURE_PASSWORD_CHARACTER_CLASS_WHITESPACE.length)]);
  }
  if (characters.size() < length) {
    int difference=length - characters.size();
    for (int i=0; i < difference; i++) {
      char[] characterClass=SecurePasswordHelper.SECURE_PASSWORD_CHARACTER_CLASSES[secureRandom.nextInt(SecurePasswordHelper.SECURE_PASSWORD_CHARACTER_CLASSES.length - 1)];
      characters.add(characterClass[secureRandom.nextInt(characterClass.length)]);
    }
  }
  StringBuilder passwordBuilder=new StringBuilder(characters.size());
  while (!characters.isEmpty()) {
    passwordBuilder.append(characters.remove(secureRandom.nextInt(characters.size())));
  }
  return passwordBuilder.toString();
}
