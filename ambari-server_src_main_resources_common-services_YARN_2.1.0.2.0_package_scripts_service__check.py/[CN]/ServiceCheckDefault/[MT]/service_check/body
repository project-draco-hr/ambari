def service_check(self, env):
    import params
    env.set_params(params)
    params.HdfsResource(format('/user/{smokeuser}'), type='directory', action='create_on_execute', owner=params.smokeuser, mode=params.smoke_hdfs_user_mode)
    if (params.stack_version_formatted_major and check_stack_feature(StackFeature.ROLLING_UPGRADE, params.stack_version_formatted_major)):
        path_to_distributed_shell_jar = format('{stack_root}/current/hadoop-yarn-client/hadoop-yarn-applications-distributedshell.jar')
    else:
        path_to_distributed_shell_jar = '/usr/lib/hadoop-yarn/hadoop-yarn-applications-distributedshell*.jar'
    yarn_distrubuted_shell_check_params = ['yarn org.apache.hadoop.yarn.applications.distributedshell.Client', '-shell_command', 'ls', '-num_containers', '{number_of_nm}', '-jar', '{path_to_distributed_shell_jar}', '-timeout', '300000', '--queue', '{service_check_queue_name}']
    yarn_distrubuted_shell_check_cmd = format(' '.join(yarn_distrubuted_shell_check_params))
    if params.security_enabled:
        kinit_cmd = format('{kinit_path_local} -kt {smoke_user_keytab} {smokeuser_principal};')
        smoke_cmd = format('{kinit_cmd} {yarn_distrubuted_shell_check_cmd}')
    else:
        smoke_cmd = yarn_distrubuted_shell_check_cmd
    (return_code, out) = shell.checked_call(smoke_cmd, path='/usr/sbin:/sbin:/usr/local/bin:/bin:/usr/bin', user=params.smokeuser)
    m = re.search('appTrackingUrl=(.*),\\s', out)
    app_url = m.group(1)
    splitted_app_url = str(app_url).split('/')
    for item in splitted_app_url:
        if ('application' in item):
            application_name = item
    for rm_webapp_address in params.rm_webapp_addresses_list:
        info_app_url = ((((params.scheme + '://') + rm_webapp_address) + '/ws/v1/cluster/apps/') + application_name)
        get_app_info_cmd = ((('curl --negotiate -u : -ksL --connect-timeout ' + CURL_CONNECTION_TIMEOUT) + ' ') + info_app_url)
        (return_code, stdout, _) = get_user_call_output(get_app_info_cmd, user=params.smokeuser, path='/usr/sbin:/sbin:/usr/local/bin:/bin:/usr/bin')
        try:
            json_response = json.loads(stdout)
        except Exception as e:
            raise Exception('Could not get json response from YARN API')
        if ((json_response is None) or ('app' not in json_response) or ('state' not in json_response['app']) or ('finalStatus' not in json_response['app'])):
            raise Exception((('Application ' + app_url) + ' returns invalid data.'))
        if ((json_response['app']['state'] != 'FINISHED') or (json_response['app']['finalStatus'] != 'SUCCEEDED')):
            raise Exception((('Application ' + app_url) + ' state/status is not valid. Should be FINISHED/SUCCEEDED.'))
