{
  String serviceName="HDFS";
  Service s=serviceFactory.createNew(cluster,serviceName);
  cluster.addService(s);
  s.persist();
  Service service=cluster.getService(serviceName);
  Assert.assertNotNull(service);
  ClusterServiceDAO dao=injector.getInstance(ClusterServiceDAO.class);
  ClusterServiceEntity entity=dao.findByClusterAndServiceNames(clusterName,serviceName);
  Assert.assertNotNull(entity);
  Assert.assertEquals(SecurityState.UNSECURED,entity.getServiceDesiredStateEntity().getSecurityState());
  Assert.assertEquals(SecurityState.UNSECURED,service.getSecurityState());
  service.setSecurityState(SecurityState.SECURED_KERBEROS);
  Assert.assertEquals(SecurityState.SECURED_KERBEROS,service.getSecurityState());
  entity=dao.findByClusterAndServiceNames(clusterName,serviceName);
  Assert.assertNotNull(entity);
  Assert.assertEquals(SecurityState.SECURED_KERBEROS,entity.getServiceDesiredStateEntity().getSecurityState());
  for (  SecurityState state : SecurityState.ENDPOINT_STATES) {
    service.setSecurityState(state);
    Assert.assertEquals(state,service.getSecurityState());
  }
  for (  SecurityState state : SecurityState.TRANSITIONAL_STATES) {
    try {
      service.setSecurityState(state);
      Assert.fail(String.format("SecurityState %s is not a valid desired service state",state.toString()));
    }
 catch (    AmbariException e) {
    }
  }
}
