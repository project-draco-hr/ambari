{
  final Set<Resource> resources=new HashSet<Resource>();
  final Set<String> requestedIds=getRequestPropertyIds(request,predicate);
  final Set<Map<String,Object>> propertyMaps=getPropertyMaps(predicate);
  List<CompatibleRepositoryVersion> requestedEntities=new ArrayList<CompatibleRepositoryVersion>();
  String currentStackUniqueId=null;
  Map<String,CompatibleRepositoryVersion> compatibleRepositoryVersionsMap=new HashMap<String,CompatibleRepositoryVersion>();
  for (  Map<String,Object> propertyMap : propertyMaps) {
    final StackId stackId=getStackInformationFromUrl(propertyMap);
    if (stackId != null) {
      if (propertyMaps.size() == 1) {
        if (LOG.isDebugEnabled()) {
          LOG.debug("Stack Name : " + stackId.getStackName() + ", Stack Version : "+ stackId.getStackVersion());
        }
        for (        RepositoryVersionEntity repositoryVersionEntity : s_repositoryVersionDAO.findByStack(stackId)) {
          currentStackUniqueId=Long.toString(repositoryVersionEntity.getId());
          compatibleRepositoryVersionsMap.put(currentStackUniqueId,new CompatibleRepositoryVersion(repositoryVersionEntity));
          if (LOG.isDebugEnabled()) {
            LOG.debug("Added current stack id : " + currentStackUniqueId + " to Map.");
          }
        }
        Map<String,UpgradePack> packs=s_ambariMetaInfo.get().getUpgradePacks(stackId.getStackName(),stackId.getStackVersion());
        for (        UpgradePack up : packs.values()) {
          if (null != up.getTargetStack()) {
            StackId targetStackId=new StackId(up.getTargetStack());
            List<RepositoryVersionEntity> repositoryVersionEntities=s_repositoryVersionDAO.findByStack(targetStackId);
            for (            RepositoryVersionEntity repositoryVersionEntity : repositoryVersionEntities) {
              if (compatibleRepositoryVersionsMap.containsKey(Long.toString(repositoryVersionEntity.getId()))) {
                compatibleRepositoryVersionsMap.get(Long.toString(repositoryVersionEntity.getId())).addUpgradePackType(up.getType().toString());
                if (LOG.isDebugEnabled()) {
                  LOG.debug("Stack id : " + repositoryVersionEntity.getId() + " exists in Map. "+ "Appended new Upgrade type : "+ up.getType());
                }
              }
 else {
                CompatibleRepositoryVersion compatibleRepositoryVersionEntity=new CompatibleRepositoryVersion(repositoryVersionEntity);
                compatibleRepositoryVersionEntity.addUpgradePackType(up.getType().toString());
                compatibleRepositoryVersionsMap.put(Long.toString(repositoryVersionEntity.getId()),compatibleRepositoryVersionEntity);
                if (LOG.isDebugEnabled()) {
                  LOG.debug("Added Stack id : " + repositoryVersionEntity.getId() + " to Map with Upgrade type : "+ up.getType());
                }
              }
            }
          }
 else {
            if (currentStackUniqueId != null) {
              compatibleRepositoryVersionsMap.get(currentStackUniqueId).addUpgradePackType(up.getType().toString());
              if (LOG.isDebugEnabled()) {
                LOG.debug("Current Stack id : " + currentStackUniqueId + " retrieved from Map. Added Upgrade type : "+ up.getType());
              }
            }
 else {
              LOG.error("Couldn't retrieve Current stack entry from Map.");
            }
          }
        }
      }
 else {
        LOG.error("Property Maps size NOT equal to 1. Current 'propertyMaps' size = " + propertyMaps.size());
      }
    }
 else {
      LOG.error("StackId is NULL.");
    }
  }
  for (  String stackId : compatibleRepositoryVersionsMap.keySet()) {
    CompatibleRepositoryVersion entity=compatibleRepositoryVersionsMap.get(stackId);
    RepositoryVersionEntity repositoryVersionEntity=entity.getRepositoryVersionEntity();
    final Resource resource=new ResourceImpl(Resource.Type.CompatibleRepositoryVersion);
    setResourceProperty(resource,REPOSITORY_VERSION_ID_PROPERTY_ID,repositoryVersionEntity.getId(),requestedIds);
    setResourceProperty(resource,REPOSITORY_VERSION_STACK_NAME_PROPERTY_ID,repositoryVersionEntity.getStackName(),requestedIds);
    setResourceProperty(resource,REPOSITORY_VERSION_STACK_VERSION_PROPERTY_ID,repositoryVersionEntity.getStackVersion(),requestedIds);
    setResourceProperty(resource,REPOSITORY_VERSION_DISPLAY_NAME_PROPERTY_ID,repositoryVersionEntity.getDisplayName(),requestedIds);
    setResourceProperty(resource,REPOSITORY_VERSION_REPOSITORY_VERSION_PROPERTY_ID,repositoryVersionEntity.getVersion(),requestedIds);
    setResourceProperty(resource,REPOSITORY_UPGRADES_SUPPORTED_TYPES_ID,entity.getSupportedTypes(),requestedIds);
    resources.add(resource);
  }
  return resources;
}
