{
  for (  RepositoryRequest rr : requests) {
    if (null == rr.getStackName() || rr.getStackName().isEmpty()) {
      throw new AmbariException("Stack name must be specified.");
    }
    if (null == rr.getStackVersion() || rr.getStackVersion().isEmpty()) {
      throw new AmbariException("Stack version must be specified.");
    }
    if (null == rr.getOsType() || rr.getOsType().isEmpty()) {
      throw new AmbariException("OS type must be specified.");
    }
    if (null == rr.getRepoId() || rr.getRepoId().isEmpty()) {
      throw new AmbariException("Repo ID must be specified.");
    }
    if (null != rr.getBaseUrl()) {
      if (!rr.isVerifyBaseUrl()) {
        if (rr.getRepositoryVersionId() != null) {
          throw new AmbariException("Can't directly update repositories in repository_version, update the repository_version instead");
        }
        ambariMetaInfo.updateRepoBaseURL(rr.getStackName(),rr.getStackVersion(),rr.getOsType(),rr.getRepoId(),rr.getBaseUrl());
      }
 else {
        URLStreamProvider usp=new URLStreamProvider(REPO_URL_CONNECT_TIMEOUT,REPO_URL_READ_TIMEOUT,null,null,null);
        RepositoryInfo repositoryInfo=ambariMetaInfo.getRepository(rr.getStackName(),rr.getStackVersion(),rr.getOsType(),rr.getRepoId());
        String repoName=repositoryInfo.getRepoName();
        boolean bFound=true;
        String errorMessage=null;
        String[] suffixes=configs.getRepoValidationSuffixes(rr.getOsType());
        for (        String suffix : suffixes) {
          String formatted_suffix=String.format(suffix,repoName);
          String spec=rr.getBaseUrl();
          if (spec.charAt(spec.length() - 1) != '/' && formatted_suffix.charAt(0) != '/') {
            spec=rr.getBaseUrl() + "/" + formatted_suffix;
          }
 else           if (spec.charAt(spec.length() - 1) == '/' && formatted_suffix.charAt(0) == '/') {
            spec=rr.getBaseUrl() + formatted_suffix.substring(1);
          }
 else {
            spec=rr.getBaseUrl() + formatted_suffix;
          }
          try {
            IOUtils.readLines(usp.readFrom(spec));
          }
 catch (          IOException ioe) {
            errorMessage="Could not access base url . " + rr.getBaseUrl() + " . ";
            if (LOG.isDebugEnabled()) {
              errorMessage+=ioe;
            }
 else {
              errorMessage+=ioe.getMessage();
            }
            bFound=false;
            break;
          }
        }
        if (bFound) {
          ambariMetaInfo.updateRepoBaseURL(rr.getStackName(),rr.getStackVersion(),rr.getOsType(),rr.getRepoId(),rr.getBaseUrl());
        }
 else {
          LOG.error(errorMessage);
          throw new IllegalArgumentException(errorMessage);
        }
      }
    }
  }
}
