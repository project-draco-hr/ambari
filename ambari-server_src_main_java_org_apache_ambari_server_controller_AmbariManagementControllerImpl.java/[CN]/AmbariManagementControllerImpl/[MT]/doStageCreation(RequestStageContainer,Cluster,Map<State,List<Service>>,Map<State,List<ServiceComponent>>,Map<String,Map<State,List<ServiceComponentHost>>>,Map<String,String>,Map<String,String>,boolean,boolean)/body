{
  if ((changedServices == null || changedServices.isEmpty()) && (changedComps == null || changedComps.isEmpty()) && (changedScHosts == null || changedScHosts.isEmpty())) {
    LOG.debug("Created 0 stages");
    return requestStages;
  }
  Set<String> smokeTestServices=getServicesForSmokeTests(cluster,changedServices,changedScHosts,runSmokeTest);
  if (reconfigureClients) {
    addClientSchForReinstall(cluster,changedServices,changedScHosts);
  }
  if (!changedScHosts.isEmpty() || !smokeTestServices.isEmpty()) {
    long nowTimestamp=System.currentTimeMillis();
    Map<String,Set<String>> clusterHostInfo=StageUtils.getClusterHostInfo(cluster);
    String clusterHostInfoJson=StageUtils.getGson().toJson(clusterHostInfo);
    String hostParamsJson=StageUtils.getGson().toJson(customCommandExecutionHelper.createDefaultHostParams(cluster));
    Stage stage=createNewStage(requestStages.getLastStageId(),cluster,requestStages.getId(),requestProperties.get(REQUEST_CONTEXT_PROPERTY),clusterHostInfoJson,"{}",hostParamsJson);
    Collection<ServiceComponentHost> componentsToEnableKerberos=new ArrayList<ServiceComponentHost>();
    Set<String> hostsToForceKerberosOperations=new HashSet<String>();
    for (    String compName : changedScHosts.keySet()) {
      for (      State newState : changedScHosts.get(compName).keySet()) {
        for (        ServiceComponentHost scHost : changedScHosts.get(compName).get(newState)) {
          if (scHost.getHostState().equals(HostState.HEARTBEAT_LOST)) {
            LOG.info("Command is not created for servicecomponenthost " + ", clusterName=" + cluster.getClusterName() + ", clusterId="+ cluster.getClusterId()+ ", serviceName="+ scHost.getServiceName()+ ", componentName="+ scHost.getServiceComponentName()+ ", hostname="+ scHost.getHostName()+ ", hostState="+ scHost.getHostState()+ ", targetNewState="+ newState);
            continue;
          }
          RoleCommand roleCommand;
          State oldSchState=scHost.getState();
          ServiceComponentHostEvent event;
switch (newState) {
case INSTALLED:
            if (oldSchState == State.INIT || oldSchState == State.UNINSTALLED || oldSchState == State.INSTALLED || oldSchState == State.INSTALLING || oldSchState == State.UNKNOWN || oldSchState == State.INSTALL_FAILED) {
              roleCommand=RoleCommand.INSTALL;
              event=new ServiceComponentHostInstallEvent(scHost.getServiceComponentName(),scHost.getHostName(),nowTimestamp,scHost.getDesiredStackVersion().getStackId());
              if ((oldSchState == State.INIT || oldSchState == State.INSTALL_FAILED) && kerberosHelper.isClusterKerberosEnabled(cluster)) {
                if (!hostComponentAlreadyExists(cluster,scHost)) {
                  try {
                    kerberosHelper.configureService(cluster,scHost);
                  }
 catch (                  KerberosInvalidConfigurationException e) {
                    throw new AmbariException(e.getMessage(),e);
                  }
                }
                componentsToEnableKerberos.add(scHost);
                if (Service.Type.KERBEROS.name().equalsIgnoreCase(scHost.getServiceName()) && Role.KERBEROS_CLIENT.name().equalsIgnoreCase(scHost.getServiceComponentName())) {
                  hostsToForceKerberosOperations.add(scHost.getHostName());
                }
              }
            }
 else             if (oldSchState == State.STARTED || oldSchState == State.STOPPING) {
              roleCommand=RoleCommand.STOP;
              event=new ServiceComponentHostStopEvent(scHost.getServiceComponentName(),scHost.getHostName(),nowTimestamp);
            }
 else             if (oldSchState == State.UPGRADING) {
              roleCommand=RoleCommand.UPGRADE;
              event=new ServiceComponentHostUpgradeEvent(scHost.getServiceComponentName(),scHost.getHostName(),nowTimestamp,scHost.getDesiredStackVersion().getStackId());
            }
 else {
              throw new AmbariException("Invalid transition for" + " servicecomponenthost" + ", clusterName=" + cluster.getClusterName() + ", clusterId="+ cluster.getClusterId()+ ", serviceName="+ scHost.getServiceName()+ ", componentName="+ scHost.getServiceComponentName()+ ", hostname="+ scHost.getHostName()+ ", currentState="+ oldSchState+ ", newDesiredState="+ newState);
            }
          break;
case STARTED:
        StackId stackId=scHost.getDesiredStackVersion();
      ComponentInfo compInfo=ambariMetaInfo.getComponent(stackId.getStackName(),stackId.getStackVersion(),scHost.getServiceName(),scHost.getServiceComponentName());
    if (oldSchState == State.INSTALLED || oldSchState == State.STARTING || true) {
      roleCommand=RoleCommand.START;
      event=new ServiceComponentHostStartEvent(scHost.getServiceComponentName(),scHost.getHostName(),nowTimestamp);
    }
 else {
      String error="Invalid transition for" + " servicecomponenthost" + ", clusterName=" + cluster.getClusterName() + ", clusterId="+ cluster.getClusterId()+ ", serviceName="+ scHost.getServiceName()+ ", componentName="+ scHost.getServiceComponentName()+ ", hostname="+ scHost.getHostName()+ ", currentState="+ oldSchState+ ", newDesiredState="+ newState;
      if (compInfo.isMaster()) {
        throw new AmbariException(error);
      }
 else {
        LOG.info("Ignoring: " + error);
        continue;
      }
    }
  break;
case UNINSTALLED:
if (oldSchState == State.INSTALLED || oldSchState == State.UNINSTALLING) {
  roleCommand=RoleCommand.UNINSTALL;
  event=new ServiceComponentHostStartEvent(scHost.getServiceComponentName(),scHost.getHostName(),nowTimestamp);
}
 else {
  throw new AmbariException("Invalid transition for" + " servicecomponenthost" + ", clusterName=" + cluster.getClusterName() + ", clusterId="+ cluster.getClusterId()+ ", serviceName="+ scHost.getServiceName()+ ", componentName="+ scHost.getServiceComponentName()+ ", hostname="+ scHost.getHostName()+ ", currentState="+ oldSchState+ ", newDesiredState="+ newState);
}
break;
case INIT:
throw new AmbariException("Unsupported transition to INIT for" + " servicecomponenthost" + ", clusterName=" + cluster.getClusterName() + ", clusterId="+ cluster.getClusterId()+ ", serviceName="+ scHost.getServiceName()+ ", componentName="+ scHost.getServiceComponentName()+ ", hostname="+ scHost.getHostName()+ ", currentState="+ oldSchState+ ", newDesiredState="+ newState);
default :
throw new AmbariException("Unsupported state change operation" + ", newState=" + newState.toString());
}
if (LOG.isDebugEnabled()) {
LOG.debug("Create a new host action" + ", requestId=" + requestStages.getId() + ", componentName="+ scHost.getServiceComponentName()+ ", hostname="+ scHost.getHostName()+ ", roleCommand="+ roleCommand.name());
}
String keyName=scHost.getServiceComponentName().toLowerCase();
if (requestProperties.containsKey(keyName)) {
if (oldSchState == newState) {
switch (oldSchState) {
case INSTALLED:
roleCommand=RoleCommand.STOP;
event=new ServiceComponentHostStopEvent(scHost.getServiceComponentName(),scHost.getHostName(),nowTimestamp);
break;
case STARTED:
roleCommand=RoleCommand.START;
event=new ServiceComponentHostStartEvent(scHost.getServiceComponentName(),scHost.getHostName(),nowTimestamp);
break;
default :
break;
}
}
if (null == requestParameters) {
requestParameters=new HashMap<String,String>();
}
requestParameters.put(keyName,requestProperties.get(keyName));
}
if (requestProperties.containsKey(CLUSTER_PHASE_PROPERTY)) {
if (null == requestParameters) {
requestParameters=new HashMap<String,String>();
}
requestParameters.put(CLUSTER_PHASE_PROPERTY,requestProperties.get(CLUSTER_PHASE_PROPERTY));
}
Map<String,Map<String,String>> configurations=new TreeMap<String,Map<String,String>>();
Map<String,Map<String,Map<String,String>>> configurationAttributes=new TreeMap<String,Map<String,Map<String,String>>>();
Host host=clusters.getHost(scHost.getHostName());
Map<String,Map<String,String>> configTags=findConfigurationTagsWithOverrides(cluster,host.getHostName());
createHostAction(cluster,stage,scHost,configurations,configurationAttributes,configTags,roleCommand,requestParameters,event);
}
}
}
for (String serviceName : smokeTestServices) {
Service s=cluster.getService(serviceName);
ServiceComponent component=getClientComponentForRunningAction(cluster,s);
String componentName=component != null ? component.getName() : null;
String clientHost=getClientHostForRunningAction(cluster,s,component);
String smokeTestRole=actionMetadata.getServiceCheckAction(serviceName);
if (clientHost == null || smokeTestRole == null) {
LOG.info("Nothing to do for service check as could not find role or" + " or host to run check on" + ", clusterName=" + cluster.getClusterName() + ", serviceName="+ serviceName+ ", clientHost="+ clientHost+ ", serviceCheckRole="+ smokeTestRole);
continue;
}
customCommandExecutionHelper.addServiceCheckAction(stage,clientHost,smokeTestRole,nowTimestamp,serviceName,componentName,null,false,false);
}
RoleCommandOrder rco=getRoleCommandOrder(cluster);
RoleGraph rg=roleGraphFactory.createNew(rco);
rg.build(stage);
requestStages.addStages(rg.getStages());
if (!componentsToEnableKerberos.isEmpty()) {
Map<String,Collection<String>> serviceFilter=new HashMap<String,Collection<String>>();
Set<String> hostFilter=new HashSet<String>();
for (ServiceComponentHost scHost : componentsToEnableKerberos) {
String serviceName=scHost.getServiceName();
Collection<String> componentFilter=serviceFilter.get(serviceName);
if (componentFilter == null) {
componentFilter=new HashSet<String>();
serviceFilter.put(serviceName,componentFilter);
}
componentFilter.add(scHost.getServiceComponentName());
hostFilter.add(scHost.getHostName());
}
try {
kerberosHelper.ensureIdentities(cluster,serviceFilter,hostFilter,null,hostsToForceKerberosOperations,requestStages,kerberosHelper.getManageIdentitiesDirective(requestProperties));
}
 catch (KerberosOperationException e) {
throw new IllegalArgumentException(e.getMessage(),e);
}
}
List<Stage> stages=requestStages.getStages();
LOG.debug("Created {} stages",((stages != null) ? stages.size() : 0));
}
 else {
LOG.debug("Created 0 stages");
}
return requestStages;
}
