{
  if (request.getClusterName() == null || request.getClusterName().isEmpty() || request.getServiceName() == null || request.getServiceName().isEmpty()) {
    throw new AmbariException("Invalid arguments");
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Received a updateService request" + ", clusterName=" + request.getClusterName() + ", serviceName="+ request.getServiceName()+ ", request="+ request);
  }
  final Cluster cluster=clusters.getCluster(request.getClusterName());
  final Service s=cluster.getService(request.getServiceName());
  if (request.getConfigVersions() != null) {
    throw new AmbariException("Unsupported operation - config updates not" + " allowed");
  }
  if (request.getDesiredState() == null) {
    return null;
  }
  State newState=State.valueOf(request.getDesiredState());
  if (!newState.isValidDesiredState()) {
    throw new AmbariException("Invalid desired state");
  }
  State oldState=s.getDesiredState();
  if (newState == oldState) {
    return null;
  }
  List<ServiceComponent> changedComps=new ArrayList<ServiceComponent>();
  Map<String,List<ServiceComponentHost>> changedScHosts=new HashMap<String,List<ServiceComponentHost>>();
  for (  ServiceComponent sc : s.getServiceComponents().values()) {
    State oldScState=sc.getDesiredState();
    if (newState == oldScState) {
      continue;
    }
    changedComps.add(sc);
    for (    ServiceComponentHost sch : sc.getServiceComponentHosts().values()) {
      if (newState == sch.getDesiredState()) {
        continue;
      }
      if (!changedScHosts.containsKey(sc.getName())) {
        changedScHosts.put(sc.getName(),new ArrayList<ServiceComponentHost>());
      }
      changedScHosts.get(sc.getName()).add(sch);
    }
  }
  List<String> orderedCompNames=new ArrayList<String>();
  orderedCompNames.add("NAMENODE");
  orderedCompNames.add("SECONDARY_NAMENODE");
  orderedCompNames.add("DATANODE");
  orderedCompNames.add("HDFS_CLIENT");
  long nowTimestamp=System.currentTimeMillis();
  long requestId=requestCounter.incrementAndGet();
  List<Stage> stages=new ArrayList<Stage>();
  for (  String compName : orderedCompNames) {
    if (!changedScHosts.containsKey(compName) || changedScHosts.get(compName).isEmpty()) {
      continue;
    }
    Stage stage=createNewStage(cluster,requestId);
    for (    ServiceComponentHost scHost : changedScHosts.get(compName)) {
      Map<String,Config> configs=null;
      ServiceComponentHostEvent event;
      State oldSchState=scHost.getDesiredState();
switch (newState) {
case INSTALLED:
        if (oldSchState == State.INIT || oldSchState == State.UNINSTALLED || oldSchState == State.INSTALLED) {
          event=new ServiceComponentHostInstallEvent(scHost.getServiceComponentName(),scHost.getHostName(),nowTimestamp);
        }
 else         if (oldSchState == State.STARTED) {
          event=new ServiceComponentHostStopEvent(scHost.getServiceComponentName(),scHost.getHostName(),nowTimestamp);
        }
 else {
          throw new AmbariException("Invalid transition" + ", oldDesiredState=" + oldSchState + ", newDesiredState"+ newState);
        }
      break;
case STARTED:
    if (oldSchState == State.INSTALLED) {
      event=new ServiceComponentHostStartEvent(scHost.getServiceComponentName(),scHost.getHostName(),nowTimestamp);
    }
 else {
      throw new AmbariException("Invalid transition" + ", oldDesiredState=" + oldSchState + ", newDesiredState"+ newState);
    }
  break;
default :
throw new AmbariException("Unsupported state change operation");
}
HostAction ha=createHostAction(stage,scHost,configs,event,nowTimestamp);
stage.addHostAction(scHost.getHostName(),ha);
}
}
for (ServiceComponent sc : changedComps) {
sc.setDesiredState(newState);
}
for (List<ServiceComponentHost> schosts : changedScHosts.values()) {
for (ServiceComponentHost sch : schosts) {
sch.setDesiredState(newState);
}
}
actionManager.sendActions(stages);
return new TrackActionResponse(requestId);
}
