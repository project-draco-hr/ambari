{
  String stackName=request.getStackName();
  String stackVersion=request.getStackVersion();
  String osType=request.getOsType();
  String repoId=request.getRepoId();
  Long repositoryVersionId=request.getRepositoryVersionId();
  Set<RepositoryResponse> responses=new HashSet<RepositoryResponse>();
  if (repositoryVersionId != null) {
    final RepositoryVersionEntity repositoryVersion=repositoryVersionDAO.findByPK(repositoryVersionId);
    if (repositoryVersion != null) {
      for (      OperatingSystemEntity operatingSystem : repositoryVersion.getOperatingSystems()) {
        if (operatingSystem.getOsType().equals(osType)) {
          for (          RepositoryEntity repository : operatingSystem.getRepositories()) {
            final RepositoryResponse response=new RepositoryResponse(repository.getBaseUrl(),osType,repository.getRepositoryId(),repository.getName(),"","","");
            response.setRepositoryVersionId(repositoryVersionId);
            response.setStackName(repositoryVersion.getStackName());
            response.setStackVersion(repositoryVersion.getStackVersion());
            responses.add(response);
          }
          break;
        }
      }
    }
  }
 else {
    if (repoId == null) {
      List<RepositoryInfo> repositories=ambariMetaInfo.getRepositories(stackName,stackVersion,osType);
      for (      RepositoryInfo repository : repositories) {
        responses.add(repository.convertToResponse());
      }
    }
 else {
      RepositoryInfo repository=ambariMetaInfo.getRepository(stackName,stackVersion,osType,repoId);
      responses=Collections.singleton(repository.convertToResponse());
    }
  }
  return responses;
}
