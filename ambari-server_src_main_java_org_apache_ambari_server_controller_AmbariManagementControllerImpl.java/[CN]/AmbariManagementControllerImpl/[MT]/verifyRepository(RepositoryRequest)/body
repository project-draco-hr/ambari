{
  URLStreamProvider usp=new URLStreamProvider(REPO_URL_CONNECT_TIMEOUT,REPO_URL_READ_TIMEOUT,null,null,null);
  RepositoryInfo repositoryInfo=ambariMetaInfo.getRepository(request.getStackName(),request.getStackVersion(),request.getOsType(),request.getRepoId());
  String repoName=repositoryInfo.getRepoName();
  String errorMessage=null;
  String[] suffixes=configs.getRepoValidationSuffixes(request.getOsType());
  for (  String suffix : suffixes) {
    String formatted_suffix=String.format(suffix,repoName);
    String spec=request.getBaseUrl().trim();
    if (spec.charAt(spec.length() - 1) != '/' && formatted_suffix.charAt(0) != '/') {
      spec=spec + "/" + formatted_suffix;
    }
 else     if (spec.charAt(spec.length() - 1) == '/' && formatted_suffix.charAt(0) == '/') {
      spec=spec + formatted_suffix.substring(1);
    }
 else {
      spec=spec + formatted_suffix;
    }
    final String FILE_SCHEME="file://";
    if (spec.toLowerCase().startsWith(FILE_SCHEME)) {
      String filePath=spec.substring(FILE_SCHEME.length());
      File f=new File(filePath);
      if (!f.exists()) {
        errorMessage="Could not access base url . " + spec + " . ";
        break;
      }
    }
 else {
      try {
        IOUtils.readLines(usp.readFrom(spec));
      }
 catch (      IOException ioe) {
        errorMessage="Could not access base url . " + request.getBaseUrl() + " . ";
        if (LOG.isDebugEnabled()) {
          errorMessage+=ioe;
        }
 else {
          errorMessage+=ioe.getMessage();
        }
        break;
      }
    }
  }
  if (errorMessage != null) {
    LOG.error(errorMessage);
    throw new IllegalArgumentException(errorMessage);
  }
}
