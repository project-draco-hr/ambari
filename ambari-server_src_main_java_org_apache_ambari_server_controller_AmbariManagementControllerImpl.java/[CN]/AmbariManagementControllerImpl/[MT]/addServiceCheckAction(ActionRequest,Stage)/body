{
  String clusterName=actionRequest.getClusterName();
  String componentName=actionMetadata.getClient(actionRequest.getServiceName());
  String hostName;
  if (componentName != null) {
    Map<String,ServiceComponentHost> components=clusters.getCluster(clusterName).getService(actionRequest.getServiceName()).getServiceComponent(componentName).getServiceComponentHosts();
    if (components.isEmpty()) {
      throw new AmbariException("Hosts not found, component=" + componentName + ", service="+ actionRequest.getServiceName()+ ", cluster="+ clusterName);
    }
    hostName=components.keySet().iterator().next();
  }
 else {
    Map<String,ServiceComponent> components=clusters.getCluster(clusterName).getService(actionRequest.getServiceName()).getServiceComponents();
    if (components.isEmpty()) {
      throw new AmbariException("Components not found, service=" + actionRequest.getServiceName() + ", cluster="+ clusterName);
    }
    ServiceComponent serviceComponent=components.values().iterator().next();
    if (serviceComponent.getServiceComponentHosts().isEmpty()) {
      throw new AmbariException("Hosts not found, component=" + serviceComponent.getName() + ", service="+ actionRequest.getServiceName()+ ", cluster="+ clusterName);
    }
    hostName=serviceComponent.getServiceComponentHosts().keySet().iterator().next();
  }
  stage.addHostRoleExecutionCommand(hostName,Role.valueOf(actionRequest.getActionName()),RoleCommand.EXECUTE,new ServiceComponentHostOpInProgressEvent(componentName,hostName,System.currentTimeMillis()),clusterName,actionRequest.getServiceName());
  stage.getExecutionCommandWrapper(hostName,actionRequest.getActionName()).getExecutionCommand().setRoleParams(actionRequest.getParameters());
  Cluster cluster=clusters.getCluster(clusterName);
  Map<String,Map<String,String>> configurations=new TreeMap<String,Map<String,String>>();
  for (  Entry<String,DesiredConfig> entry : cluster.getDesiredConfigs().entrySet()) {
    String type=entry.getKey();
    String tag=entry.getValue().getVersion();
    Config config=cluster.getConfig(type,tag);
    if (null == config)     continue;
    Map<String,String> props=new HashMap<String,String>(config.getProperties());
    Service service=cluster.getService(actionRequest.getServiceName());
    Config svcConfig=service.getDesiredConfigs().get(type);
    if (null != svcConfig && !svcConfig.getVersionTag().equals(tag)) {
      props.putAll(svcConfig.getProperties());
    }
    Host host=clusters.getHost(hostName);
    DesiredConfig dc=host.getDesiredConfigs(cluster.getClusterId()).get(type);
    if (null != dc) {
      Config hostConfig=cluster.getConfig(type,dc.getVersion());
      if (null != hostConfig) {
        props.putAll(hostConfig.getProperties());
      }
    }
    configurations.put(type,props);
  }
  ExecutionCommand execCmd=stage.getExecutionCommandWrapper(hostName,actionRequest.getActionName()).getExecutionCommand();
  execCmd.setConfigurations(configurations);
  Map<String,String> params=new TreeMap<String,String>();
  params.put("jdk_location",this.jdkResourceUrl);
  execCmd.setHostLevelParams(params);
  execCmd.setClusterHostInfo(StageUtils.getClusterHostInfo(clusters.getCluster(clusterName),hostsMap));
}
