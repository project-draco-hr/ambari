{
  RequestStageContainer requestStageContainer=null;
  if (request.getClusterId() == null && (request.getClusterName() == null || request.getClusterName().isEmpty())) {
    throw new IllegalArgumentException("Invalid arguments, cluster id or cluster name should not be null");
  }
  LOG.info("Received a updateCluster request" + ", clusterId=" + request.getClusterId() + ", clusterName="+ request.getClusterName()+ ", securityType="+ request.getSecurityType()+ ", request="+ request);
  final Cluster cluster;
  if (request.getClusterId() == null) {
    cluster=clusters.getCluster(request.getClusterName());
  }
 else {
    cluster=clusters.getClusterById(request.getClusterId());
  }
  List<ConfigurationResponse> configurationResponses=new LinkedList<ConfigurationResponse>();
  ServiceConfigVersionResponse serviceConfigVersionResponse=null;
  if (request.getDesiredConfig() != null && request.getServiceConfigVersionRequest() != null) {
    String msg="Unable to set desired configs and rollback at same time, request = " + request.toString();
    LOG.error(msg);
    throw new IllegalArgumentException(msg);
  }
  if (!cluster.getClusterName().equals(request.getClusterName())) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Received cluster name change request from " + cluster.getClusterName() + " to "+ request.getClusterName());
    }
    cluster.setClusterName(request.getClusterName());
  }
  if (null != request.getDesiredConfig()) {
    Set<Config> configs=new HashSet<Config>();
    String note=null;
    for (    ConfigurationRequest cr : request.getDesiredConfig()) {
      if (null != cr.getProperties()) {
        Map<String,Config> all=cluster.getConfigsByType(cr.getType());
        if (null == all || !all.containsKey(cr.getVersionTag()) || cr.getProperties().size() > 0) {
          LOG.info(MessageFormat.format("Applying configuration with tag ''{0}'' to cluster ''{1}''",cr.getVersionTag(),request.getClusterName()));
          cr.setClusterName(cluster.getClusterName());
          configurationResponses.add(createConfiguration(cr));
        }
      }
      note=cr.getServiceConfigVersionNote();
      configs.add(cluster.getConfig(cr.getType(),cr.getVersionTag()));
    }
    if (!configs.isEmpty()) {
      String authName=getAuthName();
      serviceConfigVersionResponse=cluster.addDesiredConfig(authName,configs,note);
      if (serviceConfigVersionResponse != null) {
        Logger logger=LoggerFactory.getLogger("configchange");
        for (        Config config : configs) {
          logger.info("cluster '" + request.getClusterName() + "' "+ "changed by: '"+ authName+ "'; "+ "type='"+ config.getType()+ "' "+ "tag='"+ config.getTag()+ "'");
        }
      }
    }
  }
  StackId currentVersion=cluster.getCurrentStackVersion();
  StackId desiredVersion=cluster.getDesiredStackVersion();
  if (currentVersion == null) {
    cluster.setCurrentStackVersion(desiredVersion);
  }
  boolean requiresHostListUpdate=request.getHostNames() != null && !request.getHostNames().isEmpty();
  if (requiresHostListUpdate) {
    clusters.mapHostsToCluster(request.getHostNames(),request.getClusterName());
  }
  if (null != request.getProvisioningState()) {
    State oldProvisioningState=cluster.getProvisioningState();
    State provisioningState=State.valueOf(request.getProvisioningState());
    if (provisioningState != State.INIT && provisioningState != State.INSTALLED) {
      LOG.warn("Invalid cluster provisioning state {} cannot be set on the cluster {}",provisioningState,request.getClusterName());
      throw new IllegalArgumentException("Invalid cluster provisioning state " + provisioningState + " cannot be set on cluster "+ request.getClusterName());
    }
    if (provisioningState != oldProvisioningState) {
      boolean isStateTransitionValid=State.isValidDesiredStateTransition(oldProvisioningState,provisioningState);
      if (!isStateTransitionValid) {
        LOG.warn("Invalid cluster provisioning state {} cannot be set on the cluster {} because the current state is {}",provisioningState,request.getClusterName(),oldProvisioningState);
        throw new AmbariException("Invalid transition for" + " cluster provisioning state" + ", clusterName=" + cluster.getClusterName() + ", clusterId="+ cluster.getClusterId()+ ", currentProvisioningState="+ oldProvisioningState+ ", newProvisioningState="+ provisioningState);
      }
    }
    cluster.setProvisioningState(provisioningState);
  }
  if (null != request.getServiceConfigVersionRequest()) {
    ServiceConfigVersionRequest serviceConfigVersionRequest=request.getServiceConfigVersionRequest();
    if (StringUtils.isEmpty(serviceConfigVersionRequest.getServiceName()) || null == serviceConfigVersionRequest.getVersion()) {
      String msg="Service name and version should be specified in service config version";
      LOG.error(msg);
      throw new IllegalArgumentException(msg);
    }
    serviceConfigVersionResponse=cluster.setServiceConfigVersion(serviceConfigVersionRequest.getServiceName(),serviceConfigVersionRequest.getVersion(),getAuthName(),serviceConfigVersionRequest.getNote());
  }
  if (serviceConfigVersionResponse != null) {
    if (!configurationResponses.isEmpty()) {
      serviceConfigVersionResponse.setConfigurations(configurationResponses);
    }
    ClusterResponse clusterResponse=new ClusterResponse(cluster.getClusterId(),cluster.getClusterName(),null,null,null,null,null,null);
    Map<String,Collection<ServiceConfigVersionResponse>> map=new HashMap<String,Collection<ServiceConfigVersionResponse>>();
    map.put(serviceConfigVersionResponse.getServiceName(),Collections.singletonList(serviceConfigVersionResponse));
    clusterResponse.setDesiredServiceConfigVersions(map);
    saveClusterUpdate(request,clusterResponse);
  }
  SecurityType securityType=request.getSecurityType();
  if ((securityType != null) && (cluster.getSecurityType() != securityType)) {
    LOG.info("Received cluster security type change request from {} to {}",cluster.getSecurityType().name(),securityType.name());
    if ((securityType == SecurityType.KERBEROS) || (securityType == SecurityType.NONE)) {
      requestStageContainer=kerberosHelper.toggleKerberos(cluster,securityType,request.getKerberosDescriptor(),requestStageContainer);
    }
 else {
      throw new IllegalArgumentException(String.format("Unexpected security type encountered: %s",securityType.name()));
    }
    cluster.setSecurityType(securityType);
  }
  if (requestStageContainer != null) {
    requestStageContainer.persist();
    return requestStageContainer.getRequestStatusResponse();
  }
 else {
    return null;
  }
}
