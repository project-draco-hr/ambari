{
  if (request.getClusterName() == null || request.getClusterName().isEmpty()) {
    throw new IllegalArgumentException("Invalid arguments, cluster name" + " should not be null");
  }
  LOG.info("Received a updateCluster request" + ", clusterName=" + request.getClusterName() + ", request="+ request);
  final Cluster cluster=clusters.getCluster(request.getClusterName());
  if (null != request.getDesiredConfig()) {
    ConfigurationRequest cr=request.getDesiredConfig();
    Config oldConfig=cluster.getDesiredConfigByType(cr.getType());
    if (null != cr.getProperties()) {
      Map<String,Config> all=cluster.getConfigsByType(cr.getType());
      if (null == all || !all.containsKey(cr.getVersionTag()) || cr.getProperties().size() > 0) {
        LOG.info(MessageFormat.format("Applying configuration with tag ''{0}'' to cluster ''{1}''",cr.getVersionTag(),request.getClusterName()));
        cr.setClusterName(cluster.getClusterName());
        createConfiguration(cr);
      }
    }
    Config baseConfig=cluster.getConfig(cr.getType(),cr.getVersionTag());
    if (null != baseConfig) {
      String authName=getAuthName();
      if (cluster.addDesiredConfig(authName,baseConfig)) {
        Logger logger=LoggerFactory.getLogger("configchange");
        logger.info("cluster '" + request.getClusterName() + "' "+ "changed by: '"+ authName+ "'; "+ "type='"+ baseConfig.getType()+ "' "+ "tag='"+ baseConfig.getVersionTag()+ "'"+ (null == oldConfig ? "" : " from='" + oldConfig.getVersionTag() + "'"));
      }
    }
  }
  StackId currentVersion=cluster.getCurrentStackVersion();
  StackId desiredVersion=cluster.getDesiredStackVersion();
  if (currentVersion == null) {
    cluster.setCurrentStackVersion(desiredVersion);
  }
  boolean requiresHostListUpdate=request.getHostNames() != null && !request.getHostNames().isEmpty();
  if (requiresHostListUpdate) {
    clusters.mapHostsToCluster(request.getHostNames(),request.getClusterName());
  }
  if (null != request.getProvisioningState()) {
    State provisioningState;
    State oldProvisioningState=cluster.getProvisioningState();
    provisioningState=State.valueOf(request.getProvisioningState());
    if (provisioningState != State.INIT && provisioningState != State.INSTALLED) {
      LOG.warn("Invalid cluster provisioning state {} cannot be set on the cluster {}",provisioningState,request.getClusterName());
      throw new IllegalArgumentException("Invalid cluster provisioning state " + provisioningState + " cannot be set on cluster "+ request.getClusterName());
    }
    if (provisioningState != oldProvisioningState) {
      boolean isStateTransitionValid=State.isValidDesiredStateTransition(oldProvisioningState,provisioningState);
      if (!isStateTransitionValid) {
        LOG.warn("Invalid cluster provisioning state {} cannot be set on the cluster {} because the current state is {}",provisioningState,request.getClusterName(),oldProvisioningState);
        throw new AmbariException("Invalid transition for" + " cluster provisioning state" + ", clusterName=" + cluster.getClusterName() + ", clusterId="+ cluster.getClusterId()+ ", currentProvisioningState="+ oldProvisioningState+ ", newProvisioningState="+ provisioningState);
      }
    }
    cluster.setProvisioningState(provisioningState);
  }
  return null;
}
