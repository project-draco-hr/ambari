{
  String clusterName=decommissionRequest.getClusterName();
  String serviceName=decommissionRequest.getServiceName();
  String namenodeHost=clusters.getCluster(clusterName).getService(serviceName).getServiceComponent(Role.NAMENODE.toString()).getServiceComponentHosts().keySet().iterator().next();
  String excludeFileTag=null;
  if (decommissionRequest.getParameters() != null && (decommissionRequest.getParameters().get("excludeFileTag") != null)) {
    excludeFileTag=decommissionRequest.getParameters().get("excludeFileTag");
  }
  if (excludeFileTag == null) {
    throw new IllegalArgumentException("No exclude file specified" + " when decommissioning datanodes");
  }
  Config config=clusters.getCluster(clusterName).getDesiredConfig("hdfs-exclude-file",excludeFileTag);
  Map<String,Map<String,String>> configurations=new TreeMap<String,Map<String,String>>();
  configurations.put(config.getType(),config.getProperties());
  Map<String,Config> hdfsSiteConfig=clusters.getCluster(clusterName).getService("HDFS").getDesiredConfigs();
  if (hdfsSiteConfig != null) {
    for (    Map.Entry<String,Config> entry : hdfsSiteConfig.entrySet()) {
      configurations.put(entry.getValue().getType(),entry.getValue().getProperties());
    }
  }
  stage.addHostRoleExecutionCommand(namenodeHost,Role.DECOMMISSION_DATANODE,RoleCommand.EXECUTE,new ServiceComponentHostOpInProgressEvent(Role.DECOMMISSION_DATANODE.toString(),namenodeHost,System.currentTimeMillis()),clusterName,serviceName);
  ExecutionCommand execCmd=stage.getExecutionCommandWrapper(namenodeHost,Role.DECOMMISSION_DATANODE.toString()).getExecutionCommand();
  execCmd.setConfigurations(configurations);
  Map<String,String> params=new TreeMap<String,String>();
  params.put("jdk_location",this.jdkResourceUrl);
  execCmd.setHostLevelParams(params);
}
