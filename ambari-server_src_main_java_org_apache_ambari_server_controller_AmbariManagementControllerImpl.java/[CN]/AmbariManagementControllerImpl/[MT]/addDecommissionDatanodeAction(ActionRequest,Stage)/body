{
  String clusterName=decommissionRequest.getClusterName();
  String serviceName=decommissionRequest.getServiceName();
  String namenodeHost=clusters.getCluster(clusterName).getService(serviceName).getServiceComponent(Role.NAMENODE.toString()).getServiceComponentHosts().keySet().iterator().next();
  Map<String,ServiceComponentHost> datanodeHostMap=clusters.getCluster(clusterName).getService(serviceName).getServiceComponent(Role.DATANODE.toString()).getServiceComponentHosts();
  String excludeFileTag=null;
  if (decommissionRequest.getParameters() != null && (decommissionRequest.getParameters().get("excludeFileTag") != null)) {
    excludeFileTag=decommissionRequest.getParameters().get("excludeFileTag");
  }
  if (excludeFileTag == null) {
    throw new AmbariException("No exclude file specified");
  }
  Config config=clusters.getCluster(clusterName).getDesiredConfig("hdfs-exclude-file",excludeFileTag);
  Map<String,Map<String,String>> configurations=new TreeMap<String,Map<String,String>>();
  configurations.put(config.getType(),config.getProperties());
  Config hdfsSiteConfig=clusters.getCluster(clusterName).getService("HDFS").getDesiredConfigs().get("hdfs-site");
  configurations.put(hdfsSiteConfig.getType(),hdfsSiteConfig.getProperties());
  stage.addHostRoleExecutionCommand(namenodeHost,Role.DECOMMISSION_DATANODE,RoleCommand.EXECUTE,new ServiceComponentHostOpInProgressEvent(Role.DECOMMISSION_DATANODE.toString(),namenodeHost,System.currentTimeMillis()),clusterName,serviceName);
  stage.getExecutionCommand(namenodeHost,Role.DECOMMISSION_DATANODE.toString()).setConfigurations(configurations);
}
