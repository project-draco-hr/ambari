{
  if (null == request.getClusterName() || request.getClusterName().isEmpty() || null == request.getType() || request.getType().isEmpty() || null == request.getProperties()) {
    throw new IllegalArgumentException("Invalid Arguments," + " clustername, config type and configs should not" + " be null or empty");
  }
  Cluster cluster=clusters.getCluster(request.getClusterName());
  String configType=request.getType();
  String service=null;
  try {
    service=cluster.getServiceForConfigTypes(Collections.singleton(configType));
  }
 catch (  IllegalArgumentException e) {
  }
  if (StringUtils.isEmpty(service)) {
    if (!AuthorizationHelper.isAuthorized(ResourceType.CLUSTER,cluster.getResourceId(),EnumSet.of(RoleAuthorization.CLUSTER_MODIFY_CONFIGS))) {
      throw new AuthorizationException("The authenticated user does not have authorization " + "to create cluster configurations");
    }
  }
 else {
    if (!AuthorizationHelper.isAuthorized(ResourceType.CLUSTER,cluster.getResourceId(),EnumSet.of(RoleAuthorization.SERVICE_MODIFY_CONFIGS))) {
      throw new AuthorizationException("The authenticated user does not have authorization " + "to create service configurations");
    }
  }
  Map<String,String> requestProperties=request.getProperties();
  Map<PropertyInfo.PropertyType,Set<String>> propertiesTypes=cluster.getConfigPropertiesTypes(request.getType());
  if (propertiesTypes.containsKey(PropertyType.PASSWORD)) {
    for (    String passwordProperty : propertiesTypes.get(PropertyType.PASSWORD)) {
      if (requestProperties.containsKey(passwordProperty)) {
        String passwordPropertyValue=requestProperties.get(passwordProperty);
        if (!SecretReference.isSecret(passwordPropertyValue)) {
          continue;
        }
        SecretReference ref=new SecretReference(passwordPropertyValue,cluster);
        String refValue=ref.getValue();
        requestProperties.put(passwordProperty,refValue);
      }
    }
  }
  Map<String,Config> configs=cluster.getConfigsByType(request.getType());
  if (null == configs) {
    configs=new HashMap<String,Config>();
  }
  Map<String,Map<String,String>> requestPropertiesAttributes=request.getPropertiesAttributes();
  Map<String,Map<String,String>> propertiesAttributes=new HashMap<String,Map<String,String>>();
  StackId currentStackId=cluster.getCurrentStackVersion();
  StackInfo currentStackInfo=ambariMetaInfo.getStack(currentStackId.getStackName(),currentStackId.getStackVersion());
  Map<String,Map<String,String>> defaultConfigAttributes=currentStackInfo.getDefaultConfigAttributesForConfigType(configType);
  if (defaultConfigAttributes != null) {
    ConfigHelper.mergeConfigAttributes(propertiesAttributes,defaultConfigAttributes);
  }
  if (requestPropertiesAttributes != null) {
    ConfigHelper.mergeConfigAttributes(propertiesAttributes,requestPropertiesAttributes);
  }
  if (configs.containsKey(request.getVersionTag())) {
    throw new AmbariException(MessageFormat.format("Configuration with tag ''{0}'' exists for ''{1}''",request.getVersionTag(),request.getType()));
  }
  handleGlobalsBackwardsCompability(request,propertiesAttributes);
  Config config=createConfig(cluster,request.getType(),requestProperties,request.getVersionTag(),propertiesAttributes);
  return new ConfigurationResponse(cluster.getClusterName(),config);
}
