{
  if (request.getClusterName() == null || request.getClusterName().isEmpty()) {
    throw new AmbariException("Invalid arguments");
  }
  final Cluster cluster=clusters.getCluster(request.getClusterName());
  if (request.getComponentName() != null) {
    if (request.getServiceName() == null) {
    }
  }
  Set<Service> services=new HashSet<Service>();
  if (request.getServiceName() != null && !request.getServiceName().isEmpty()) {
    services.add(cluster.getService(request.getServiceName()));
  }
 else {
    services.addAll(cluster.getServices().values());
  }
  Set<ServiceComponentHostResponse> response=new HashSet<ServiceComponentHostResponse>();
  boolean checkDesiredState=false;
  State desiredStateToCheck=null;
  if (request.getDesiredState() != null && !request.getDesiredState().isEmpty()) {
    desiredStateToCheck=State.valueOf(request.getDesiredState());
    if (!desiredStateToCheck.isValidDesiredState()) {
      throw new AmbariException("Invalid arguments");
    }
    checkDesiredState=true;
  }
  for (  Service s : services) {
    Set<ServiceComponent> components=new HashSet<ServiceComponent>();
    components.addAll(s.getServiceComponents().values());
    for (    ServiceComponent sc : components) {
      if (request.getComponentName() != null) {
        if (!sc.getName().equals(request.getComponentName())) {
          continue;
        }
      }
      if (request.getHostname() != null) {
        try {
          ServiceComponentHost sch=sc.getServiceComponentHost(request.getHostname());
          if (checkDesiredState && (desiredStateToCheck != sch.getDesiredState())) {
            continue;
          }
          ServiceComponentHostResponse r=sch.convertToResponse();
          response.add(r);
        }
 catch (        ServiceComponentHostNotFoundException e) {
        }
      }
 else {
        for (        ServiceComponentHost sch : sc.getServiceComponentHosts().values()) {
          if (checkDesiredState && (desiredStateToCheck != sch.getDesiredState())) {
            continue;
          }
          ServiceComponentHostResponse r=sch.convertToResponse();
          response.add(r);
        }
      }
    }
  }
  return response;
}
