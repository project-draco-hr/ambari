{
  stage.addHostRoleExecutionCommand(scHost.getHostName(),Role.valueOf(scHost.getServiceComponentName()),roleCommand,event,scHost.getClusterName(),scHost.getServiceName());
  String serviceName=scHost.getServiceName();
  String componentName=event.getServiceComponentName();
  String hostname=scHost.getHostName();
  String osFamily=clusters.getHost(hostname).getOsFamily();
  StackId stackId=cluster.getDesiredStackVersion();
  ServiceInfo serviceInfo=ambariMetaInfo.getService(stackId.getStackName(),stackId.getStackVersion(),serviceName);
  ComponentInfo componentInfo=ambariMetaInfo.getComponent(stackId.getStackName(),stackId.getStackVersion(),serviceName,componentName);
  StackInfo stackInfo=ambariMetaInfo.getStack(stackId.getStackName(),stackId.getStackVersion());
  ExecutionCommand execCmd=stage.getExecutionCommandWrapper(scHost.getHostName(),scHost.getServiceComponentName()).getExecutionCommand();
  Host host=clusters.getHost(scHost.getHostName());
  if (event.getServiceComponentName().equals(Role.HIVE_CLIENT.toString())) {
    configHelper.applyCustomConfig(configurations,Configuration.HIVE_CONFIG_TAG,Configuration.HIVE_METASTORE_PASSWORD_PROPERTY,"",true);
  }
  String jobtrackerHost=getJobTrackerHost(cluster);
  if (!scHost.getHostName().equals(jobtrackerHost)) {
    if (configTags.get(Configuration.GLOBAL_CONFIG_TAG) != null) {
      configHelper.applyCustomConfig(configurations,Configuration.GLOBAL_CONFIG_TAG,Configuration.RCA_ENABLED_PROPERTY,"false",false);
    }
  }
  execCmd.setConfigurations(configurations);
  execCmd.setConfigurationAttributes(configurationAttributes);
  execCmd.setConfigurationTags(configTags);
  if (commandParams == null) {
    commandParams=new TreeMap<String,String>();
  }
  String agentDefaultCommandTimeout=configs.getDefaultAgentTaskTimeout();
  String scriptCommandTimeout="";
  CommandScriptDefinition script=componentInfo.getCommandScript();
  if (serviceInfo.getSchemaVersion().equals(AmbariMetaInfo.SCHEMA_VERSION_2)) {
    if (script != null) {
      commandParams.put(SCRIPT,script.getScript());
      commandParams.put(SCRIPT_TYPE,script.getScriptType().toString());
      if (script.getTimeout() > 0) {
        scriptCommandTimeout=String.valueOf(script.getTimeout());
      }
    }
 else {
      String message=String.format("Component %s of service %s has no " + "command script defined",componentName,serviceName);
      throw new AmbariException(message);
    }
  }
  String actualTimeout=(!scriptCommandTimeout.equals("") ? scriptCommandTimeout : agentDefaultCommandTimeout);
  if (roleCommand.equals(RoleCommand.INSTALL) && !agentDefaultCommandTimeout.equals("") && Integer.parseInt(actualTimeout) < Integer.parseInt(agentDefaultCommandTimeout)) {
    actualTimeout=agentDefaultCommandTimeout;
  }
  commandParams.put(COMMAND_TIMEOUT,actualTimeout);
  commandParams.put(SERVICE_PACKAGE_FOLDER,serviceInfo.getServicePackageFolder());
  commandParams.put(HOOKS_FOLDER,stackInfo.getStackHooksFolder());
  execCmd.setCommandParams(commandParams);
  String repoInfo=customCommandExecutionHelper.getRepoInfo(cluster,host);
  if (LOG.isDebugEnabled()) {
    LOG.debug("Sending repo information to agent" + ", hostname=" + scHost.getHostName() + ", clusterName="+ cluster.getClusterName()+ ", stackInfo="+ stackId.getStackId()+ ", repoInfo="+ repoInfo);
  }
  Map<String,String> hostParams=new TreeMap<String,String>();
  hostParams.put(REPO_INFO,repoInfo);
  hostParams.putAll(getRcaParameters());
  ServiceOsSpecific anyOs=null;
  if (serviceInfo.getOsSpecifics().containsKey(AmbariMetaInfo.ANY_OS)) {
    anyOs=serviceInfo.getOsSpecifics().get(AmbariMetaInfo.ANY_OS);
  }
  ServiceOsSpecific hostOs=populateServicePackagesInfo(serviceInfo,hostParams,osFamily);
  List<ServiceOsSpecific.Package> packages=new ArrayList<ServiceOsSpecific.Package>();
  if (anyOs != null) {
    packages.addAll(anyOs.getPackages());
  }
  if (hostOs != null) {
    packages.addAll(hostOs.getPackages());
  }
  String packageList=gson.toJson(packages);
  hostParams.put(PACKAGE_LIST,packageList);
  Set<String> userSet=configHelper.getPropertyValuesWithPropertyType(stackId,PropertyType.USER,cluster);
  String userList=gson.toJson(userSet);
  hostParams.put(USER_LIST,userList);
  Set<String> groupSet=configHelper.getPropertyValuesWithPropertyType(stackId,PropertyType.GROUP,cluster);
  String groupList=gson.toJson(groupSet);
  hostParams.put(GROUP_LIST,groupList);
  if (configs.getServerDBName().equalsIgnoreCase(Configuration.ORACLE_DB_NAME)) {
    hostParams.put(DB_DRIVER_FILENAME,configs.getOjdbcJarName());
  }
 else   if (configs.getServerDBName().equalsIgnoreCase(Configuration.MYSQL_DB_NAME)) {
    hostParams.put(DB_DRIVER_FILENAME,configs.getMySQLJarName());
  }
  List<String> clientsToUpdateConfigsList=componentInfo.getClientsToUpdateConfigs();
  if (clientsToUpdateConfigsList == null) {
    clientsToUpdateConfigsList=new ArrayList<String>();
    clientsToUpdateConfigsList.add("*");
  }
  String clientsToUpdateConfigs=gson.toJson(clientsToUpdateConfigsList);
  hostParams.put(CLIENTS_TO_UPDATE_CONFIGS,clientsToUpdateConfigs);
  execCmd.setHostLevelParams(hostParams);
  Map<String,String> roleParams=new TreeMap<String,String>();
  execCmd.setRoleParams(roleParams);
}
