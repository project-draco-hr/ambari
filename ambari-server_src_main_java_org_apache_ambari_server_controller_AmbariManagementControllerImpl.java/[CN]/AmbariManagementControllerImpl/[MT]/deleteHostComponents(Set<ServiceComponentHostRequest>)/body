{
  Set<ServiceComponentHostRequest> expanded=new HashSet<ServiceComponentHostRequest>();
  for (  ServiceComponentHostRequest request : requests) {
    if (null == request.getComponentName()) {
      if (null == request.getClusterName() || request.getClusterName().isEmpty() || null == request.getHostname() || request.getHostname().isEmpty()) {
        throw new IllegalArgumentException("Cluster name and hostname must be specified.");
      }
      Cluster cluster=clusters.getCluster(request.getClusterName());
      for (      ServiceComponentHost sch : cluster.getServiceComponentHosts(request.getHostname())) {
        ServiceComponentHostRequest schr=new ServiceComponentHostRequest(request.getClusterName(),sch.getServiceName(),sch.getServiceComponentName(),sch.getHostName(),null);
        expanded.add(schr);
      }
    }
 else {
      expanded.add(request);
    }
  }
  Map<ServiceComponent,Set<ServiceComponentHost>> safeToRemoveSCHs=new HashMap<ServiceComponent,Set<ServiceComponentHost>>();
  for (  ServiceComponentHostRequest request : expanded) {
    validateServiceComponentHostRequestDelete(request);
    Cluster cluster=clusters.getCluster(request.getClusterName());
    if (StringUtils.isEmpty(request.getServiceName())) {
      request.setServiceName(findServiceName(cluster,request.getComponentName()));
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug("Received a hostComponent DELETE request" + ", clusterName=" + request.getClusterName() + ", serviceName="+ request.getServiceName()+ ", componentName="+ request.getComponentName()+ ", hostname="+ request.getHostname()+ ", request="+ request);
    }
    Service service=cluster.getService(request.getServiceName());
    ServiceComponent component=service.getServiceComponent(request.getComponentName());
    ServiceComponentHost componentHost=component.getServiceComponentHost(request.getHostname());
    if (!componentHost.canBeRemoved()) {
      throw new AmbariException("Host Component cannot be removed" + ", clusterName=" + request.getClusterName() + ", serviceName="+ request.getServiceName()+ ", componentName="+ request.getComponentName()+ ", hostname="+ request.getHostname()+ ", request="+ request);
    }
    if (!component.isClientComponent() && !componentHost.getState().isRemovableState()) {
      throw new AmbariException("To remove master or slave components they must be in " + "DISABLED/INIT/INSTALLED/INSTALL_FAILED/UNKNOWN state. Current=" + componentHost.getState() + ".");
    }
    setRestartRequiredServices(service,request.getHostname());
    if (!safeToRemoveSCHs.containsKey(component)) {
      safeToRemoveSCHs.put(component,new HashSet<ServiceComponentHost>());
    }
    safeToRemoveSCHs.get(component).add(componentHost);
  }
  for (  Entry<ServiceComponent,Set<ServiceComponentHost>> entry : safeToRemoveSCHs.entrySet()) {
    for (    ServiceComponentHost componentHost : entry.getValue()) {
      String included_hostname=componentHost.getHostName();
      String serviceName=entry.getKey().getServiceName();
      String master_component_name=null;
      String slave_component_name=componentHost.getServiceComponentName();
      HostComponentAdminState desiredAdminState=componentHost.getComponentAdminState();
      State slaveState=componentHost.getState();
      entry.getKey().deleteServiceComponentHosts(componentHost.getHostName());
      if (AmbariCustomCommandExecutionHelper.masterToSlaveMappingForDecom.containsValue(slave_component_name) && desiredAdminState.equals(HostComponentAdminState.DECOMMISSIONED) && slaveState.equals(State.INSTALLED)) {
        for (        Entry<String,String> entrySet : AmbariCustomCommandExecutionHelper.masterToSlaveMappingForDecom.entrySet()) {
          if (entrySet.getValue().equals(slave_component_name)) {
            master_component_name=entrySet.getKey();
          }
        }
        if (!serviceName.equals(Service.Type.HBASE.toString())) {
          HashMap<String,String> requestProperties=new HashMap<String,String>();
          requestProperties.put("context","Remove host " + included_hostname + " from exclude file");
          requestProperties.put("exclusive","true");
          HashMap<String,String> params=new HashMap<String,String>();
          params.put("included_hosts",included_hostname);
          params.put("slave_type",slave_component_name);
          params.put(AmbariCustomCommandExecutionHelper.UPDATE_EXCLUDE_FILE_ONLY,"true");
          RequestResourceFilter resourceFilter=new RequestResourceFilter(serviceName,master_component_name,null);
          ExecuteActionRequest actionRequest=new ExecuteActionRequest(entry.getKey().getClusterName(),AmbariCustomCommandExecutionHelper.DECOMMISSION_COMMAND_NAME,null,Collections.singletonList(resourceFilter),null,params,true);
          createAction(actionRequest,requestProperties);
        }
        Cluster cluster=clusters.getCluster(entry.getKey().getClusterName());
        Service service=cluster.getService(serviceName);
        ServiceComponent sc=service.getServiceComponent(master_component_name);
        if (sc != null && sc.isMasterComponent()) {
          for (          ServiceComponentHost sch : sc.getServiceComponentHosts().values()) {
            sch.setRestartRequired(true);
          }
        }
      }
    }
  }
  if (!safeToRemoveSCHs.isEmpty()) {
    setMonitoringServicesRestartRequired(requests);
  }
  return null;
}
