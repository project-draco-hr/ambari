{
  Set<ServiceComponentHostRequest> expanded=new HashSet<>();
  for (  ServiceComponentHostRequest request : requests) {
    if (null == request.getComponentName()) {
      if (null == request.getClusterName() || request.getClusterName().isEmpty() || null == request.getHostname() || request.getHostname().isEmpty()) {
        throw new IllegalArgumentException("Cluster name and hostname must be specified.");
      }
      Cluster cluster=clusters.getCluster(request.getClusterName());
      if (!AuthorizationHelper.isAuthorized(ResourceType.CLUSTER,cluster.getResourceId(),EnumSet.of(RoleAuthorization.SERVICE_ADD_DELETE_SERVICES,RoleAuthorization.HOST_ADD_DELETE_COMPONENTS))) {
        throw new AuthorizationException("The authenticated user is not authorized to delete service components from hosts");
      }
      for (      ServiceComponentHost sch : cluster.getServiceComponentHosts(request.getHostname())) {
        ServiceComponentHostRequest schr=new ServiceComponentHostRequest(request.getClusterName(),sch.getServiceName(),sch.getServiceComponentName(),sch.getHostName(),null);
        expanded.add(schr);
      }
    }
 else {
      expanded.add(request);
    }
  }
  Map<ServiceComponent,Set<ServiceComponentHost>> safeToRemoveSCHs=new HashMap<>();
  DeleteStatusMetaData deleteStatusMetaData=new DeleteStatusMetaData();
  for (  ServiceComponentHostRequest request : expanded) {
    validateServiceComponentHostRequest(request);
    Cluster cluster=clusters.getCluster(request.getClusterName());
    if (StringUtils.isEmpty(request.getServiceName())) {
      request.setServiceName(findServiceName(cluster,request.getComponentName()));
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug("Received a hostComponent DELETE request" + ", clusterName=" + request.getClusterName() + ", serviceName="+ request.getServiceName()+ ", componentName="+ request.getComponentName()+ ", hostname="+ request.getHostname()+ ", request="+ request);
    }
    Service service=cluster.getService(request.getServiceName());
    ServiceComponent component=service.getServiceComponent(request.getComponentName());
    ServiceComponentHost componentHost=component.getServiceComponentHost(request.getHostname());
    setRestartRequiredServices(service,request.getComponentName());
    try {
      checkIfHostComponentsInDeleteFriendlyState(request,cluster);
      if (!safeToRemoveSCHs.containsKey(component)) {
        safeToRemoveSCHs.put(component,new HashSet<ServiceComponentHost>());
      }
      safeToRemoveSCHs.get(component).add(componentHost);
    }
 catch (    Exception ex) {
      deleteStatusMetaData.addException(request.getHostname() + "/" + request.getComponentName(),ex);
    }
  }
  for (  Entry<ServiceComponent,Set<ServiceComponentHost>> entry : safeToRemoveSCHs.entrySet()) {
    for (    ServiceComponentHost componentHost : entry.getValue()) {
      try {
        deleteHostComponent(entry.getKey(),componentHost);
        deleteStatusMetaData.addDeletedKey(componentHost.getHostName() + "/" + componentHost.getServiceComponentName());
      }
 catch (      Exception ex) {
        deleteStatusMetaData.addException(componentHost.getHostName() + "/" + componentHost.getServiceComponentName(),ex);
      }
    }
  }
  if (deleteStatusMetaData.getDeletedKeys().size() + deleteStatusMetaData.getExceptionForKeys().size() == 1) {
    if (deleteStatusMetaData.getDeletedKeys().size() == 1) {
      return null;
    }
    Exception ex=deleteStatusMetaData.getExceptionForKeys().values().iterator().next();
    if (ex instanceof AmbariException) {
      throw (AmbariException)ex;
    }
 else {
      throw new AmbariException(ex.getMessage(),ex);
    }
  }
  if (!safeToRemoveSCHs.isEmpty()) {
    setMonitoringServicesRestartRequired(requests);
  }
  return deleteStatusMetaData;
}
