{
  stage.addHostRoleExecutionCommand(scHost.getHostName(),Role.valueOf(scHost.getServiceComponentName()),command,event,scHost.getClusterName(),scHost.getServiceName());
  ExecutionCommand execCmd=stage.getExecutionCommand(scHost.getHostName(),scHost.getServiceComponentName());
  Map<String,List<String>> clusterHostInfo=new TreeMap<String,List<String>>();
  List<String> slaveHostList=new ArrayList<String>();
  slaveHostList.add("localhost");
  clusterHostInfo.put("slave_hosts",slaveHostList);
  execCmd.setClusterHostInfo(clusterHostInfo);
  Map<String,Map<String,String>> configurations=new TreeMap<String,Map<String,String>>();
  for (  Config config : configs.values()) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Attaching configs to execution command" + ", configType=" + config.getType() + ", configVersionTag="+ config.getVersionTag()+ ", clusterName="+ scHost.getClusterName()+ ", serviceName="+ scHost.getServiceName()+ ", componentName="+ scHost.getServiceComponentName()+ ", hostname="+ scHost.getHostName());
    }
    configurations.put(config.getType(),config.getProperties());
  }
  execCmd.setConfigurations(configurations);
  Map<String,String> params=new TreeMap<String,String>();
  params.put("magic_param","/x/y/z");
  execCmd.setHostLevelParams(params);
  Map<String,String> roleParams=new TreeMap<String,String>();
  roleParams.put("magic_role_param","false");
  execCmd.setRoleParams(roleParams);
  return;
}
