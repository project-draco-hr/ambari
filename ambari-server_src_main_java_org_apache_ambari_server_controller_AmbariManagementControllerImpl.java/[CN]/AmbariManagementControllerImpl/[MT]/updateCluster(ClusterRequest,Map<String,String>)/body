{
  RequestStageContainer requestStageContainer=null;
  if (request.getClusterId() == null && (request.getClusterName() == null || request.getClusterName().isEmpty())) {
    throw new IllegalArgumentException("Invalid arguments, cluster id or cluster name should not be null");
  }
  LOG.info("Received a updateCluster request" + ", clusterId=" + request.getClusterId() + ", clusterName="+ request.getClusterName()+ ", securityType="+ request.getSecurityType()+ ", request="+ request);
  final Cluster cluster;
  if (request.getClusterId() == null) {
    cluster=clusters.getCluster(request.getClusterName());
  }
 else {
    cluster=clusters.getClusterById(request.getClusterId());
  }
  AuthorizationHelper.verifyAuthorization(ResourceType.CLUSTER,cluster.getResourceId(),RoleAuthorization.AUTHORIZATIONS_UPDATE_CLUSTER);
  List<ConfigurationResponse> configurationResponses=new LinkedList<ConfigurationResponse>();
  ServiceConfigVersionResponse serviceConfigVersionResponse=null;
  if (request.getDesiredConfig() != null && request.getServiceConfigVersionRequest() != null) {
    String msg="Unable to set desired configs and rollback at same time, request = " + request.toString();
    LOG.error(msg);
    throw new IllegalArgumentException(msg);
  }
  if (!cluster.getClusterName().equals(request.getClusterName())) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Received cluster name change request from " + cluster.getClusterName() + " to "+ request.getClusterName());
    }
    if (!AuthorizationHelper.isAuthorized(ResourceType.AMBARI,null,EnumSet.of(RoleAuthorization.AMBARI_RENAME_CLUSTER))) {
      throw new AuthorizationException("The authenticated user does not have authorization to rename the cluster");
    }
    cluster.setClusterName(request.getClusterName());
  }
  boolean isConfigurationCreationNeeded=false;
  if (request.getDesiredConfig() != null) {
    for (    ConfigurationRequest desiredConfig : request.getDesiredConfig()) {
      Map<String,String> requestConfigProperties=desiredConfig.getProperties();
      if (requestConfigProperties != null && !requestConfigProperties.isEmpty()) {
        Map<PropertyInfo.PropertyType,Set<String>> propertiesTypes=cluster.getConfigPropertiesTypes(desiredConfig.getType());
        for (        Entry<String,String> property : requestConfigProperties.entrySet()) {
          String propertyName=property.getKey();
          String propertyValue=property.getValue();
          if (propertiesTypes.containsKey(PropertyType.PASSWORD) && propertiesTypes.get(PropertyType.PASSWORD).contains(propertyName)) {
            if (SecretReference.isSecret(propertyValue)) {
              SecretReference ref=new SecretReference(propertyValue,cluster);
              requestConfigProperties.put(propertyName,ref.getValue());
            }
          }
        }
      }
      Map<String,Map<String,String>> requestConfigAttributes=desiredConfig.getPropertiesAttributes();
      Config clusterConfig=cluster.getDesiredConfigByType(desiredConfig.getType());
      Map<String,String> clusterConfigProperties=null;
      Map<String,Map<String,String>> clusterConfigAttributes=null;
      if (clusterConfig != null) {
        clusterConfigProperties=clusterConfig.getProperties();
        clusterConfigAttributes=clusterConfig.getPropertiesAttributes();
        if (!isAttributeMapsEqual(requestConfigAttributes,clusterConfigAttributes)) {
          isConfigurationCreationNeeded=true;
          break;
        }
      }
 else {
        isConfigurationCreationNeeded=true;
        break;
      }
      if (requestConfigProperties == null || requestConfigProperties.isEmpty()) {
        Config existingConfig=cluster.getConfig(desiredConfig.getType(),desiredConfig.getVersionTag());
        if (existingConfig != null) {
          if (!StringUtils.equals(existingConfig.getTag(),clusterConfig.getTag())) {
            isConfigurationCreationNeeded=true;
            break;
          }
        }
      }
      if (requestConfigProperties != null && clusterConfigProperties != null) {
        if (requestConfigProperties.size() != clusterConfigProperties.size()) {
          isConfigurationCreationNeeded=true;
          break;
        }
 else {
          for (          Entry<String,String> property : requestConfigProperties.entrySet()) {
            if (!StringUtils.equals(property.getValue(),clusterConfigProperties.get(property.getKey()))) {
              isConfigurationCreationNeeded=true;
              break;
            }
          }
        }
      }
    }
  }
  if (isConfigurationCreationNeeded) {
    List<ConfigurationRequest> desiredConfigs=request.getDesiredConfig();
    if (!desiredConfigs.isEmpty()) {
      Set<Config> configs=new HashSet<Config>();
      String note=null;
      for (      ConfigurationRequest cr : desiredConfigs) {
        String configType=cr.getType();
        String service=null;
        try {
          service=cluster.getServiceForConfigTypes(Collections.singleton(configType));
        }
 catch (        IllegalArgumentException e) {
        }
        if (StringUtils.isEmpty(service)) {
          if (!AuthorizationHelper.isAuthorized(ResourceType.CLUSTER,cluster.getResourceId(),EnumSet.of(RoleAuthorization.CLUSTER_MODIFY_CONFIGS))) {
            throw new AuthorizationException("The authenticated user does not have authorization to modify cluster configurations");
          }
        }
 else {
          if (!AuthorizationHelper.isAuthorized(ResourceType.CLUSTER,cluster.getResourceId(),EnumSet.of(RoleAuthorization.SERVICE_MODIFY_CONFIGS))) {
            throw new AuthorizationException("The authenticated user does not have authorization to modify service configurations");
          }
        }
        if (null != cr.getProperties()) {
          Map<String,Config> all=cluster.getConfigsByType(configType);
          if (null == all || !all.containsKey(cr.getVersionTag()) || cr.getProperties().size() > 0) {
            validateAuthorizationToUpdateServiceUsersAndGroups(cluster,cr);
            LOG.info(MessageFormat.format("Applying configuration with tag ''{0}'' to cluster ''{1}''  for configuration type {2}",cr.getVersionTag(),request.getClusterName(),configType));
            cr.setClusterName(cluster.getClusterName());
            configurationResponses.add(createConfiguration(cr));
          }
        }
        note=cr.getServiceConfigVersionNote();
        configs.add(cluster.getConfig(configType,cr.getVersionTag()));
      }
      if (!configs.isEmpty()) {
        String authName=getAuthName();
        serviceConfigVersionResponse=cluster.addDesiredConfig(authName,configs,note);
        if (serviceConfigVersionResponse != null) {
          Logger logger=LoggerFactory.getLogger("configchange");
          for (          Config config : configs) {
            logger.info("cluster '" + request.getClusterName() + "' "+ "changed by: '"+ authName+ "'; "+ "type='"+ config.getType()+ "' "+ "tag='"+ config.getTag()+ "'");
          }
        }
      }
    }
  }
  StackId currentVersion=cluster.getCurrentStackVersion();
  StackId desiredVersion=cluster.getDesiredStackVersion();
  if (currentVersion == null) {
    if (!AuthorizationHelper.isAuthorized(ResourceType.CLUSTER,cluster.getResourceId(),EnumSet.of(RoleAuthorization.CLUSTER_UPGRADE_DOWNGRADE_STACK))) {
      throw new AuthorizationException("The authenticated user does not have authorization to modify stack version");
    }
    cluster.setCurrentStackVersion(desiredVersion);
  }
  boolean requiresHostListUpdate=request.getHostNames() != null && !request.getHostNames().isEmpty();
  if (requiresHostListUpdate) {
    clusters.mapHostsToCluster(request.getHostNames(),request.getClusterName());
  }
  if (null != request.getProvisioningState()) {
    State oldProvisioningState=cluster.getProvisioningState();
    State provisioningState=State.valueOf(request.getProvisioningState());
    if (provisioningState != State.INIT && provisioningState != State.INSTALLED) {
      LOG.warn("Invalid cluster provisioning state {} cannot be set on the cluster {}",provisioningState,request.getClusterName());
      throw new IllegalArgumentException("Invalid cluster provisioning state " + provisioningState + " cannot be set on cluster "+ request.getClusterName());
    }
    if (provisioningState != oldProvisioningState) {
      boolean isStateTransitionValid=State.isValidDesiredStateTransition(oldProvisioningState,provisioningState);
      if (!isStateTransitionValid) {
        LOG.warn("Invalid cluster provisioning 2state {} cannot be set on the cluster {} because the current state is {}",provisioningState,request.getClusterName(),oldProvisioningState);
        throw new AmbariException("Invalid transition for" + " cluster provisioning state" + ", clusterName=" + cluster.getClusterName() + ", clusterId="+ cluster.getClusterId()+ ", currentProvisioningState="+ oldProvisioningState+ ", newProvisioningState="+ provisioningState);
      }
    }
    cluster.setProvisioningState(provisioningState);
  }
  if (null != request.getServiceConfigVersionRequest()) {
    if (!AuthorizationHelper.isAuthorized(ResourceType.CLUSTER,cluster.getResourceId(),EnumSet.of(RoleAuthorization.SERVICE_MODIFY_CONFIGS))) {
      throw new AuthorizationException("The authenticated user does not have authorization to modify service configurations");
    }
    ServiceConfigVersionRequest serviceConfigVersionRequest=request.getServiceConfigVersionRequest();
    if (StringUtils.isEmpty(serviceConfigVersionRequest.getServiceName()) || null == serviceConfigVersionRequest.getVersion()) {
      String msg="Service name and version should be specified in service config version";
      LOG.error(msg);
      throw new IllegalArgumentException(msg);
    }
    serviceConfigVersionResponse=cluster.setServiceConfigVersion(serviceConfigVersionRequest.getServiceName(),serviceConfigVersionRequest.getVersion(),getAuthName(),serviceConfigVersionRequest.getNote());
  }
  if (serviceConfigVersionResponse != null) {
    if (!configurationResponses.isEmpty()) {
      serviceConfigVersionResponse.setConfigurations(configurationResponses);
    }
    ClusterResponse clusterResponse=new ClusterResponse(cluster.getClusterId(),cluster.getClusterName(),null,null,null,null,null,null);
    Map<String,Collection<ServiceConfigVersionResponse>> map=new HashMap<String,Collection<ServiceConfigVersionResponse>>();
    map.put(serviceConfigVersionResponse.getServiceName(),Collections.singletonList(serviceConfigVersionResponse));
    clusterResponse.setDesiredServiceConfigVersions(map);
    saveClusterUpdate(request,clusterResponse);
  }
  SecurityType securityType=request.getSecurityType();
  if (securityType != null) {
    if (kerberosHelper.shouldExecuteCustomOperations(securityType,requestProperties)) {
      if (!AuthorizationHelper.isAuthorized(ResourceType.CLUSTER,cluster.getResourceId(),EnumSet.of(RoleAuthorization.CLUSTER_TOGGLE_KERBEROS))) {
        throw new AuthorizationException("The authenticated user does not have authorization to perform Kerberos-specific operations");
      }
      try {
        requestStageContainer=kerberosHelper.executeCustomOperations(cluster,requestProperties,requestStageContainer,kerberosHelper.getManageIdentitiesDirective(requestProperties));
      }
 catch (      KerberosOperationException e) {
        throw new IllegalArgumentException(e.getMessage(),e);
      }
    }
 else     if (cluster.getSecurityType() != securityType) {
      LOG.info("Received cluster security type change request from {} to {}",cluster.getSecurityType().name(),securityType.name());
      if ((securityType == SecurityType.KERBEROS) || (securityType == SecurityType.NONE)) {
        if (!AuthorizationHelper.isAuthorized(ResourceType.CLUSTER,cluster.getResourceId(),EnumSet.of(RoleAuthorization.CLUSTER_TOGGLE_KERBEROS))) {
          throw new AuthorizationException("The authenticated user does not have authorization to enable or disable Kerberos");
        }
        try {
          requestStageContainer=kerberosHelper.toggleKerberos(cluster,securityType,requestStageContainer,kerberosHelper.getManageIdentitiesDirective(requestProperties));
        }
 catch (        KerberosOperationException e) {
          throw new IllegalArgumentException(e.getMessage(),e);
        }
      }
 else {
        throw new IllegalArgumentException(String.format("Unexpected security type encountered: %s",securityType.name()));
      }
      cluster.setSecurityType(securityType);
    }
  }
  if (requestStageContainer != null) {
    requestStageContainer.persist();
    return requestStageContainer.getRequestStatusResponse();
  }
 else {
    return null;
  }
}
