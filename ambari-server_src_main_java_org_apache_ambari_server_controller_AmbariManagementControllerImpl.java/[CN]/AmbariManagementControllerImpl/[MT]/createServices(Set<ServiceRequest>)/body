{
  if (requests.isEmpty()) {
    LOG.warn("Received an empty requests set");
    return;
  }
  Map<String,Set<String>> serviceNames=new HashMap<String,Set<String>>();
  Set<String> duplicates=new HashSet<String>();
  for (  ServiceRequest request : requests) {
    if (request.getClusterName() == null || request.getClusterName().isEmpty() || request.getServiceName() == null || request.getServiceName().isEmpty()) {
      throw new IllegalArgumentException("Cluster name and service name" + " should be provided when creating a service");
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug("Received a createService request" + ", clusterName=" + request.getClusterName() + ", serviceName="+ request.getServiceName()+ ", request="+ request);
    }
    if (!serviceNames.containsKey(request.getClusterName())) {
      serviceNames.put(request.getClusterName(),new HashSet<String>());
    }
    if (serviceNames.get(request.getClusterName()).contains(request.getServiceName())) {
      duplicates.add(request.getServiceName());
      continue;
    }
    serviceNames.get(request.getClusterName()).add(request.getServiceName());
    if (request.getDesiredState() != null && !request.getDesiredState().isEmpty()) {
      State state=State.valueOf(request.getDesiredState());
      if (!state.isValidDesiredState() || state != State.INIT) {
        throw new IllegalArgumentException("Invalid desired state" + " only INIT state allowed during creation" + ", providedDesiredState="+ request.getDesiredState());
      }
    }
    Cluster cluster=clusters.getCluster(request.getClusterName());
    try {
      Service s=cluster.getService(request.getServiceName());
      if (s != null) {
        duplicates.add(request.getServiceName());
        continue;
      }
    }
 catch (    ServiceNotFoundException e) {
    }
    StackId stackId=cluster.getDesiredStackVersion();
    if (!ambariMetaInfo.isValidService(stackId.getStackName(),stackId.getStackVersion(),request.getServiceName())) {
      throw new IllegalArgumentException("Unsupported or invalid service" + " in stack" + ", clusterName=" + request.getClusterName() + ", serviceName="+ request.getServiceName()+ ", stackInfo="+ stackId.getStackId());
    }
  }
  if (serviceNames.size() != 1) {
    throw new IllegalArgumentException("Invalid arguments, updates allowed" + "on only one cluster at a time");
  }
  if (!duplicates.isEmpty()) {
    StringBuilder svcNames=new StringBuilder();
    boolean first=true;
    for (    String svcName : duplicates) {
      if (!first) {
        svcNames.append(",");
      }
      first=false;
      svcNames.append(svcName);
    }
    throw new IllegalArgumentException("Invalid request" + " contains duplicates within request or already existing services" + ", duplicateServiceNames="+ svcNames.toString());
  }
  for (  ServiceRequest request : requests) {
    Cluster cluster=clusters.getCluster(request.getClusterName());
    Map<String,Config> configs=new HashMap<String,Config>();
    State state=State.INIT;
    Service s=serviceFactory.createNew(cluster,request.getServiceName());
    s.setDesiredState(state);
    s.updateDesiredConfigs(configs);
    s.setDesiredStackVersion(cluster.getDesiredStackVersion());
    cluster.addService(s);
    s.persist();
  }
}
