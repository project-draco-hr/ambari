{
  stage.addHostRoleExecutionCommand(scHost.getHostName(),Role.valueOf(scHost.getServiceComponentName()),command,event,scHost.getClusterName(),scHost.getServiceName());
  ExecutionCommand execCmd=stage.getExecutionCommand(scHost.getHostName(),scHost.getServiceComponentName());
  execCmd.setClusterHostInfo(StageUtils.getClusterHostInfo(cluster));
  Host host=clusters.getHost(scHost.getHostName());
  Map<String,Map<String,String>> configurations=new TreeMap<String,Map<String,String>>();
  for (  Config config : configs.values()) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Attaching configs to execution command" + ", configType=" + config.getType() + ", configVersionTag="+ config.getVersionTag()+ ", clusterName="+ scHost.getClusterName()+ ", serviceName="+ scHost.getServiceName()+ ", componentName="+ scHost.getServiceComponentName()+ ", hostname="+ scHost.getHostName());
    }
    configurations.put(config.getType(),config.getProperties());
  }
  execCmd.setConfigurations(configurations);
  StackId stackId=scHost.getDesiredStackVersion();
  Map<String,List<RepositoryInfo>> repos=ambariMetaInfo.getRepository(stackId.getStackName(),stackId.getStackVersion());
  String repoInfo="";
  if (!repos.containsKey(host.getOsType())) {
    LOG.warn("Could not retrieve repo information for host" + ", hostname=" + scHost.getHostName() + ", clusterName="+ cluster.getClusterName()+ ", stackInfo="+ stackId.getStackId());
  }
 else {
    repoInfo=gson.toJson(repos.get(host.getOsType()));
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Sending repo information to agent" + ", hostname=" + scHost.getHostName() + ", clusterName="+ cluster.getClusterName()+ ", stackInfo="+ stackId.getStackId()+ ", repoInfo="+ repoInfo);
  }
  Map<String,String> params=new TreeMap<String,String>();
  params.put("repo_info",repoInfo);
  execCmd.setHostLevelParams(params);
  Map<String,String> roleParams=new TreeMap<String,String>();
  execCmd.setRoleParams(roleParams);
  return;
}
