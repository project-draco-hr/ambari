{
  if (args.length != 2) {
    System.err.println("Incorrect number of arguments. Please provide:\n" + "1) Path to file with json\n" + "2) Path to Hadoop FS (fs.default.name form core-site.xml)\n"+ "Exiting...");
    System.exit(1);
  }
  final String jsonFilePath=args[0];
  final String fsName=args[1];
  File file=new File(jsonFilePath);
  if (!file.isFile()) {
    System.err.println("File " + jsonFilePath + " doesn't exist.\nExiting...");
    System.exit(1);
  }
  Gson gson=new Gson();
  Resource[] resources=null;
  DistributedFileSystem dfs=null;
  try {
    dfs=new DistributedFileSystem();
    resources=(Resource[])gson.fromJson(new FileReader(jsonFilePath),Resource[].class);
    dfs.initialize(new URI(fsName),new Configuration());
    for (    Resource resource : resources) {
      System.out.println("Creating: " + resource);
      Resource.checkResourceParameters(resource,dfs);
      Path pathHadoop=new Path(resource.getTarget());
      if (resource.getAction().equals("create")) {
        Resource.createResource(resource,dfs,pathHadoop);
        Resource.setMode(resource,dfs,pathHadoop);
        Resource.setOwner(resource,dfs,pathHadoop);
      }
 else       if (resource.getAction().equals("delete")) {
        dfs.delete(pathHadoop,true);
      }
    }
  }
  finally {
    dfs.close();
  }
  System.out.println("All resources created.");
}
