@patch.object(logging, 'FileHandler')
@patch.object(UpgradeHelper_HDP2, 'backup_file')
@patch.object(UpgradeHelper_HDP2, 'write_mapping')
@patch('json.loads')
@patch.object(UpgradeHelper_HDP2, 'curl')
@patch('optparse.OptionParser')
def test_save_mr_mapping(self, option_parser_mock, curl_mock, json_loads_mock, write_mapping_mock, backup_file_mock, file_handler_mock):
    file_handler_mock.return_value = logging.FileHandler('')
    opm = option_parser_mock.return_value
    options = self.get_mock_options()
    args = ['save-mr-mapping']
    opm.parse_args.return_value = (options, args)
    curl_mock.side_effect = ['"href" : "', '"href" : "', '"href" : "']
    json_loads_mock.return_value = {'host_components': [{'HostRoles': {'host_name': 'host1', }, }], }
    UpgradeHelper_HDP2.main()
    expected_curl_calls = [call(False, '-u', 'admin:admin', 'http://localhost:8080/api/v1/clusters/c1/services/MAPREDUCE/components/MAPREDUCE_CLIENT'), call(False, '-u', 'admin:admin', 'http://localhost:8080/api/v1/clusters/c1/services/MAPREDUCE/components/TASKTRACKER'), call(False, '-u', 'admin:admin', 'http://localhost:8080/api/v1/clusters/c1/services/MAPREDUCE/components/JOBTRACKER')]
    curl_mock.assert_has_calls(expected_curl_calls, any_order=True)
    self.assertTrue(write_mapping_mock.called)
    write_call = write_mapping_mock.call_args
    (args, kargs) = write_call
    self.assertTrue(('MAPREDUCE_CLIENT' in args[0].keys()))
    self.assertTrue((['host1'] == args[0]['MAPREDUCE_CLIENT']))
    self.assertTrue(('TASKTRACKER' in args[0].keys()))
    self.assertTrue(('TASKTRACKER' in args[0].keys()))
    pass
