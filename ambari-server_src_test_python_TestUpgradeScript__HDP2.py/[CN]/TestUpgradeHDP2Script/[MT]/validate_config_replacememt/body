def validate_config_replacememt(self, call, type):
    (args, kargs) = call
    self.assertFalse(('REPLACE_WITH_' in args[8]))
    self.assertFalse(('REPLACE_JH_HOST' in args[8]))
    self.assertFalse(('REPLACE_RM_HOST' in args[8]))
    if (type == 'yarn-site'):
        self.assertTrue(('c6401' in args[8]))
        self.assertFalse(('an_old_value' in args[8]))
    elif (type == 'mapred-site'):
        self.assertFalse(('will_not_be_stored' in args[8]))
        self.assertTrue(('fs.df.interval' in args[8]))
        self.assertFalse(('dfs.df.interval' in args[8]))
    elif (type == 'global'):
        self.assertTrue(('global11' in args[8]))
        self.assertTrue(('an_old_value' in args[8]))
        self.assertTrue(('mapred.hosts.exclude' in args[8]))
    elif ((type == 'core-site') or (type == 'hdfs-site')):
        self.assertTrue(('global11' in args[8]))
        self.assertTrue(('global2' in args[8]))
        self.assertTrue(('hbase.rpc.engine' in args[8]))
    elif (type == 'hbase-site'):
        self.assertTrue(('global11' in args[8]))
        self.assertTrue(('hbase.hstore.blockingStoreFiles' in args[8]))
        self.assertTrue(('dfs.df.interval' in args[8]))
        self.assertFalse(('hbase.rpc.engine' in args[8]))
    pass
