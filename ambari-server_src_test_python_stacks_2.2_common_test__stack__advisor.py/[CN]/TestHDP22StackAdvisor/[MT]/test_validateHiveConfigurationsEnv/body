def test_validateHiveConfigurationsEnv(self):
    properties = {'hive_security_authorization': 'None', }
    configurations = {'hive-site': {'properties': {'hive.security.authorization.enabled': 'true', }, }, 'hive-env': {'properties': {'hive_security_authorization': 'None', }, }, }
    res_expected = [{'config-type': 'hive-env', 'message': 'hive_security_authorization should not be None if hive.security.authorization.enabled is set', 'type': 'configuration', 'config-name': 'hive_security_authorization', 'level': 'ERROR', }]
    res = self.stackAdvisor.validateHiveConfigurationsEnv(properties, {}, configurations, {}, {})
    self.assertEquals(res, res_expected)
    properties = {'hive_security_authorization': 'Ranger', }
    configurations = {'ranger-env': {'properties': {'ranger-hive-plugin-enabled': 'No', }, }, 'hive-env': {'properties': {'hive_security_authorization': 'Ranger', }, }, }
    services = {'configurations': configurations, }
    res_expected = []
    services['configurations']['ranger-env']['properties']['ranger-hive-plugin-enabled'] = 'No'
    res_expected = [{'config-type': 'hive-env', 'message': 'ranger-env/ranger-hive-plugin-enabled must be enabled when hive_security_authorization is set to Ranger', 'type': 'configuration', 'config-name': 'hive_security_authorization', 'level': 'WARN', }]
    res = self.stackAdvisor.validateHiveConfigurationsEnv(properties, {}, configurations, services, {})
    self.assertEquals(res, res_expected)
