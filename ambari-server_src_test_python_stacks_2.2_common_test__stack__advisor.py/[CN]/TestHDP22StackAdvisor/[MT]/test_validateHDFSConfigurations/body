def test_validateHDFSConfigurations(self):
    self.maxDiff = None
    recommendedDefaults = None
    unsecure_cluster_core_site = {'hadoop.security.authentication': 'simple', 'hadoop.security.authorization': 'false', }
    secure_cluster_core_site = {'hadoop.security.authentication': 'kerberos', 'hadoop.security.authorization': 'true', }
    properties = {'dfs.datanode.address': '0.0.0.0:1019', 'dfs.datanode.http.address': '0.0.0.0:1022', }
    configurations = {'hdfs-site': {'properties': properties, }, 'core-site': {'properties': unsecure_cluster_core_site, }, }
    expected = []
    validation_problems = self.stackAdvisor.validateHDFSConfigurations(properties, recommendedDefaults, configurations, None, None)
    self.assertEquals(validation_problems, expected)
    properties = {'dfs.datanode.address': '0.0.0.0:55555', 'dfs.datanode.http.address': '0.0.0.0:55555', }
    configurations = {'hdfs-site': {'properties': properties, }, 'core-site': {'properties': unsecure_cluster_core_site, }, }
    expected = []
    validation_problems = self.stackAdvisor.validateHDFSConfigurations(properties, recommendedDefaults, configurations, None, None)
    self.assertEquals(validation_problems, expected)
    properties = {'dfs.http.policy': 'WRONG_VALUE', 'dfs.datanode.address': '0.0.0.0:1019', 'dfs.datanode.http.address': '0.0.0.0:1022', }
    configurations = {'hdfs-site': {'properties': properties, }, 'core-site': {'properties': secure_cluster_core_site, }, }
    expected = [{'config-name': 'dfs.http.policy', 'config-type': 'hdfs-site', 'level': 'WARN', 'message': "Invalid property value: WRONG_VALUE. Valid values are ['HTTP_ONLY', 'HTTPS_ONLY', 'HTTP_AND_HTTPS']", 'type': 'configuration', }]
    validation_problems = self.stackAdvisor.validateHDFSConfigurations(properties, recommendedDefaults, configurations, None, None)
    self.assertEquals(validation_problems, expected)
    properties = {'dfs.http.policy': 'HTTPS_ONLY', 'dfs.datanode.address': '0.0.0.0:1019', }
    configurations = {'hdfs-site': {'properties': properties, }, 'core-site': {'properties': secure_cluster_core_site, }, }
    expected = []
    validation_problems = self.stackAdvisor.validateHDFSConfigurations(properties, recommendedDefaults, configurations, None, None)
    self.assertEquals(validation_problems, expected)
    properties = {'dfs.http.policy': 'HTTPS_ONLY', 'dfs.datanode.address': '0.0.0.0:1019', 'dfs.datanode.https.address': '0.0.0.0:1022', }
    configurations = {'hdfs-site': {'properties': properties, }, 'core-site': {'properties': secure_cluster_core_site, }, }
    expected = []
    validation_problems = self.stackAdvisor.validateHDFSConfigurations(properties, recommendedDefaults, configurations, None, None)
    self.assertEquals(validation_problems, expected)
    properties = {'dfs.http.policy': 'HTTPS_ONLY', 'dfs.datanode.address': '0.0.0.0:1019', 'dfs.datanode.https.address': '0.0.0.0:50475', }
    configurations = {'hdfs-site': {'properties': properties, }, 'core-site': {'properties': secure_cluster_core_site, }, }
    expected = []
    validation_problems = self.stackAdvisor.validateHDFSConfigurations(properties, recommendedDefaults, configurations, None, None)
    self.assertEquals(validation_problems, expected)
    properties = {'dfs.http.policy': 'HTTPS_ONLY', 'dfs.datanode.address': '0.0.0.0:50010', }
    configurations = {'hdfs-site': {'properties': properties, }, 'core-site': {'properties': secure_cluster_core_site, }, }
    expected = [{'config-name': 'dfs.datanode.address', 'config-type': 'hdfs-site', 'level': 'WARN', 'message': "You set up datanode to use some non-secure ports. If you want to run Datanode under non-root user in a secure cluster, you should set all these properties ['dfs.datanode.address', 'dfs.datanode.https.address'] to use non-secure ports (if property dfs.datanode.https.address does not exist, just add it). You may also set up property dfs.data.transfer.protection ('authentication' is a good default value). Also, set up WebHDFS with SSL as described in manual in order to be able to use HTTPS.", 'type': 'configuration', }, {'config-name': 'dfs.datanode.https.address', 'config-type': 'hdfs-site', 'level': 'WARN', 'message': "You set up datanode to use some non-secure ports. If you want to run Datanode under non-root user in a secure cluster, you should set all these properties ['dfs.datanode.address', 'dfs.datanode.https.address'] to use non-secure ports (if property dfs.datanode.https.address does not exist, just add it). You may also set up property dfs.data.transfer.protection ('authentication' is a good default value). Also, set up WebHDFS with SSL as described in manual in order to be able to use HTTPS.", 'type': 'configuration', }]
    validation_problems = self.stackAdvisor.validateHDFSConfigurations(properties, recommendedDefaults, configurations, None, None)
    self.assertEquals(validation_problems, expected)
    properties = {'dfs.http.policy': 'HTTPS_ONLY', 'dfs.datanode.address': '0.0.0.0:50010', 'dfs.datanode.https.address': '0.0.0.0:1022', }
    configurations = {'hdfs-site': {'properties': properties, }, 'core-site': {'properties': secure_cluster_core_site, }, }
    expected = [{'config-name': 'dfs.datanode.address', 'config-type': 'hdfs-site', 'level': 'WARN', 'message': "You set up datanode to use some non-secure ports. If you want to run Datanode under non-root user in a secure cluster, you should set all these properties ['dfs.datanode.address', 'dfs.datanode.https.address'] to use non-secure ports (if property dfs.datanode.https.address does not exist, just add it). You may also set up property dfs.data.transfer.protection ('authentication' is a good default value). Also, set up WebHDFS with SSL as described in manual in order to be able to use HTTPS.", 'type': 'configuration', }, {'config-name': 'dfs.datanode.https.address', 'config-type': 'hdfs-site', 'level': 'WARN', 'message': "You set up datanode to use some non-secure ports. If you want to run Datanode under non-root user in a secure cluster, you should set all these properties ['dfs.datanode.address', 'dfs.datanode.https.address'] to use non-secure ports (if property dfs.datanode.https.address does not exist, just add it). You may also set up property dfs.data.transfer.protection ('authentication' is a good default value). Also, set up WebHDFS with SSL as described in manual in order to be able to use HTTPS.", 'type': 'configuration', }]
    validation_problems = self.stackAdvisor.validateHDFSConfigurations(properties, recommendedDefaults, configurations, None, None)
    self.assertEquals(validation_problems, expected)
    properties = {'dfs.http.policy': 'HTTPS_ONLY', 'dfs.datanode.address': '0.0.0.0:50010', 'dfs.datanode.https.address': '0.0.0.0:50475', 'dfs.data.transfer.protection': 'authentication', }
    configurations = {'hdfs-site': {'properties': properties, }, 'core-site': {'properties': secure_cluster_core_site, }, }
    expected = []
    validation_problems = self.stackAdvisor.validateHDFSConfigurations(properties, recommendedDefaults, configurations, None, None)
    self.assertEquals(validation_problems, expected)
    properties = {'dfs.http.policy': 'HTTP_ONLY', 'dfs.datanode.address': '0.0.0.0:1019', 'dfs.datanode.http.address': '0.0.0.0:50475', }
    configurations = {'hdfs-site': {'properties': properties, }, 'core-site': {'properties': secure_cluster_core_site, }, }
    expected = [{'config-name': 'dfs.datanode.address', 'config-type': 'hdfs-site', 'level': 'WARN', 'message': "You have set up datanode to use some non-secure ports, but dfs.http.policy is set to HTTP_ONLY. In a secure cluster, Datanode forbids using non-secure ports if dfs.http.policy is not set to HTTPS_ONLY. Please make sure that properties ['dfs.datanode.address', 'dfs.datanode.http.address'] use secure ports.", 'type': 'configuration', }, {'config-name': 'dfs.datanode.http.address', 'config-type': 'hdfs-site', 'level': 'WARN', 'message': "You have set up datanode to use some non-secure ports, but dfs.http.policy is set to HTTP_ONLY. In a secure cluster, Datanode forbids using non-secure ports if dfs.http.policy is not set to HTTPS_ONLY. Please make sure that properties ['dfs.datanode.address', 'dfs.datanode.http.address'] use secure ports.", 'type': 'configuration', }]
    validation_problems = self.stackAdvisor.validateHDFSConfigurations(properties, recommendedDefaults, configurations, None, None)
    self.assertEquals(validation_problems, expected)
    properties = {'dfs.http.policy': 'HTTP_ONLY', 'dfs.datanode.address': '0.0.0.0:1019', 'dfs.datanode.http.address': '0.0.0.0:1022', }
    configurations = {'hdfs-site': {'properties': properties, }, 'core-site': {'properties': secure_cluster_core_site, }, }
    expected = []
    validation_problems = self.stackAdvisor.validateHDFSConfigurations(properties, recommendedDefaults, configurations, None, None)
    self.assertEquals(validation_problems, expected)
    properties = {'dfs.datanode.address': '0.0.0.0:1019', 'dfs.datanode.http.address': '0.0.0.0:1022', }
    configurations = {'hdfs-site': {'properties': properties, }, 'core-site': {'properties': secure_cluster_core_site, }, }
    expected = []
    validation_problems = self.stackAdvisor.validateHDFSConfigurations(properties, recommendedDefaults, configurations, None, None)
    self.assertEquals(validation_problems, expected)
    properties = {'dfs.http.policy': 'HTTP_ONLY', 'dfs.datanode.address': '0.0.0.0:1019', 'dfs.datanode.http.address': '0.0.0.0:1022', 'dfs.data.transfer.protection': 'authentication', }
    configurations = {'hdfs-site': {'properties': properties, }, 'core-site': {'properties': secure_cluster_core_site, }, }
    expected = [{'config-name': 'dfs.data.transfer.protection', 'config-type': 'hdfs-site', 'level': 'WARN', 'message': 'dfs.data.transfer.protection property can not be used when dfs.http.policy is set to any value other then HTTPS_ONLY. Tip: When dfs.http.policy property is not defined, it defaults to HTTP_ONLY', 'type': 'configuration', }]
    validation_problems = self.stackAdvisor.validateHDFSConfigurations(properties, recommendedDefaults, configurations, None, None)
    self.assertEquals(validation_problems, expected)
    properties = {'dfs.http.policy': 'HTTPS_ONLY', 'dfs.datanode.address': '0.0.0.0:50010', 'dfs.datanode.https.address': '0.0.0.0:50475', 'dfs.data.transfer.protection': 'WRONG_VALUE', }
    configurations = {'hdfs-site': {'properties': properties, }, 'core-site': {'properties': secure_cluster_core_site, }, }
    expected = [{'config-name': 'dfs.data.transfer.protection', 'config-type': 'hdfs-site', 'level': 'WARN', 'message': "Invalid property value: WRONG_VALUE. Valid values are ['authentication', 'integrity', 'privacy'].", 'type': 'configuration', }]
    validation_problems = self.stackAdvisor.validateHDFSConfigurations(properties, recommendedDefaults, configurations, None, None)
    self.assertEquals(validation_problems, expected)
    properties = {'dfs.encrypt.data.transfer': 'true', 'dfs.datanode.address': '0.0.0.0:1019', 'dfs.datanode.http.address': '0.0.0.0:1022', }
    configurations = {'hdfs-site': {'properties': properties, }, 'core-site': {'properties': secure_cluster_core_site, }, }
    expected = []
    validation_problems = self.stackAdvisor.validateHDFSConfigurations(properties, recommendedDefaults, configurations, None, None)
    self.assertEquals(validation_problems, expected)
