def test_validateStormRangerPluginConfigurations(self):
    configurations = {}
    recommendedDefaults = {}
    properties = {}
    configurations = {'ranger-env': {'properties': {'ranger-storm-plugin-enabled': 'Yes', }, }, 'ranger-storm-plugin-properties': {'properties': {'ranger-storm-plugin-enabled': 'Yes', }, }, 'cluster-env': {'properties': {'security_enabled': 'true', }, }, }
    services = {'services': [{'StackServices': {'service_name': 'RANGER', }, }], 'configurations': configurations, }
    res_expected = []
    res = self.stackAdvisor.validateStormRangerPluginConfigurations(properties, recommendedDefaults, configurations, services, {})
    self.assertEquals(res, res_expected)
    services['configurations']['ranger-env']['properties']['ranger-storm-plugin-enabled'] = 'No'
    res_expected = [{'config-type': 'ranger-storm-plugin-properties', 'message': 'ranger-storm-plugin-properties/ranger-storm-plugin-enabled must correspond ranger-env/ranger-storm-plugin-enabled', 'type': 'configuration', 'config-name': 'ranger-storm-plugin-enabled', 'level': 'WARN', }]
    res = self.stackAdvisor.validateStormRangerPluginConfigurations(properties, recommendedDefaults, configurations, services, {})
    self.assertEquals(res, res_expected)
    services['configurations']['cluster-env']['properties']['security_enabled'] = 'false'
    res_expected.append({'config-type': 'ranger-storm-plugin-properties', 'message': 'Ranger Storm plugin should not be enabled in non-kerberos environment.', 'type': 'configuration', 'config-name': 'ranger-storm-plugin-enabled', 'level': 'WARN', })
    res = self.stackAdvisor.validateStormRangerPluginConfigurations(properties, recommendedDefaults, configurations, services, {})
    self.assertEquals(res, res_expected)
