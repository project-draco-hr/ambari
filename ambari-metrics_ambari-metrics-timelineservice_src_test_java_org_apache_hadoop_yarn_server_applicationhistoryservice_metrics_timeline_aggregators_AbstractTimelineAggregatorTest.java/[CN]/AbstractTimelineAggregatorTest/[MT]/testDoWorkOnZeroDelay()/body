{
  long currentTime=System.currentTimeMillis();
  long roundedOffAggregatorTime=AbstractTimelineAggregator.getRoundedAggregateTimeMillis(currentTime);
  agg.setLastAggregatedEndTime(roundedOffAggregatorTime);
  agg.runOnce(sleepIntervalMillis);
  assertEquals("startTime should be zero",0,startTimeInDoWork.get());
  assertEquals("endTime  should be zero",0,endTimeInDoWork.get());
  assertEquals(roundedOffAggregatorTime,checkPoint.get());
  assertEquals("Do not aggregate on first run",0,actualRuns);
  checkPoint.set(currentTime - 5 * 60 * 1000);
  agg.runOnce(sleepIntervalMillis);
  assertEquals("startTime should be zero",0,startTimeInDoWork.get());
  assertEquals("endTime  should be zero",0,endTimeInDoWork.get());
  assertEquals(roundedOffAggregatorTime,checkPoint.get());
  assertEquals("Do not aggregate on first run",0,actualRuns);
  currentTime=System.currentTimeMillis();
  checkPoint.set(currentTime - 30000);
  agg.setLastAggregatedEndTime(-1l);
  agg.setSleepIntervalMillis(sleepIntervalMillis);
  agg.runOnce(sleepIntervalMillis);
  assertEquals("startTime should be zero",0,startTimeInDoWork.get());
  assertEquals("endTime  should be zero",0,endTimeInDoWork.get());
  assertEquals(agg.getLastAggregatedEndTime(),checkPoint.get());
  assertEquals("Do not aggregate on first run",0,actualRuns);
  long checkPointTime=roundedOffAggregatorTime - sleepIntervalMillis;
  long expectedCheckPoint=AbstractTimelineAggregator.getRoundedCheckPointTimeMillis(checkPointTime,sleepIntervalMillis);
  checkPoint.set(checkPointTime);
  agg.setLastAggregatedEndTime(-1l);
  agg.runOnce(sleepIntervalMillis);
  assertEquals("startTime should the lower rounded time of the checkpoint time",expectedCheckPoint,startTimeInDoWork.get());
  assertEquals("endTime should the lower rounded time of the checkpoint time + sleepIntervalMillis",expectedCheckPoint + sleepIntervalMillis,endTimeInDoWork.get());
  assertEquals(expectedCheckPoint + sleepIntervalMillis,checkPoint.get());
  assertEquals("Aggregate on first run",1,actualRuns);
  checkPointTime=roundedOffAggregatorTime - 2 * sleepIntervalMillis;
  expectedCheckPoint=AbstractTimelineAggregator.getRoundedCheckPointTimeMillis(checkPointTime,sleepIntervalMillis);
  checkPoint.set(checkPointTime);
  agg.runOnce(sleepIntervalMillis);
  assertEquals("startTime should the lower rounded time of the checkpoint time",expectedCheckPoint,startTimeInDoWork.get());
  assertEquals("startTime should the lower rounded time of the checkpoint time + sleepIntervalMillis",expectedCheckPoint + sleepIntervalMillis,endTimeInDoWork.get());
  assertEquals(expectedCheckPoint + sleepIntervalMillis,checkPoint.get());
  assertEquals("Do not aggregate on first run",2,actualRuns);
}
