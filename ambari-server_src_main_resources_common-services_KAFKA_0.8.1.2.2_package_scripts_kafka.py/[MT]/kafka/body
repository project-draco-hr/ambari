def kafka():
    import params
    Directory([params.kafka_log_dir, params.kafka_pid_dir, params.conf_dir], mode=493, cd_access='a', owner=params.kafka_user, group=params.user_group, recursive=True)
    brokerid = str(sorted(params.kafka_hosts).index(params.hostname))
    kafka_server_config = mutable_config_dict(params.config['configurations']['kafka-broker'])
    kafka_server_config['broker.id'] = brokerid
    kafka_server_config['host.name'] = params.hostname
    kafka_server_config['kafka.metrics.reporters'] = params.kafka_metrics_reporters
    if params.has_metric_collector:
        kafka_server_config['kafka.timeline.metrics.host'] = params.metric_collector_host
        kafka_server_config['kafka.timeline.metrics.port'] = params.metric_collector_port
    kafka_data_dir = kafka_server_config['log.dirs']
    Directory(filter(None, kafka_data_dir.split(',')), mode=493, cd_access='a', owner=params.kafka_user, group=params.user_group, recursive=True)
    conf_dir = params.conf_dir
    properties_config('server.properties', conf_dir=params.conf_dir, configurations=kafka_server_config, owner=params.kafka_user, group=params.user_group, brokerid=brokerid)
    File(format('{conf_dir}/kafka-env.sh'), owner=params.kafka_user, content=InlineTemplate(params.kafka_env_sh_template))
    if (params.log4j_props != None):
        File(format('{conf_dir}/log4j.properties'), mode=420, group=params.user_group, owner=params.kafka_user, content=params.log4j_props)
    setup_symlink(params.kafka_managed_pid_dir, params.kafka_pid_dir)
    setup_symlink(params.kafka_managed_log_dir, params.kafka_log_dir)
