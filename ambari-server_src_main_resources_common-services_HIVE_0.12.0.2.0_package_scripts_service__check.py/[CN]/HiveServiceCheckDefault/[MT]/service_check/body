def service_check(self, env):
    import params
    env.set_params(params)
    address_list = params.hive_server_hosts
    if (not address_list):
        raise Fail('Can not find any Hive Server host. Please check configuration.')
    port = int(format('{hive_server_port}'))
    print 'Test connectivity to hive server'
    if params.security_enabled:
        kinitcmd = format('{kinit_path_local} -kt {smoke_user_keytab} {smokeuser_principal}; ')
    else:
        kinitcmd = None
    SOCKET_WAIT_SECONDS = 290
    start_time = time.time()
    end_time = (start_time + SOCKET_WAIT_SECONDS)
    print 'Waiting for the Hive server to start...'
    workable_server_available = False
    i = 0
    while ((time.time() < end_time) and (not workable_server_available)):
        address = address_list[i]
        try:
            check_thrift_port_sasl(address, port, params.hive_server2_authentication, params.hive_server_principal, kinitcmd, params.smokeuser, transport_mode=params.hive_transport_mode, http_endpoint=params.hive_http_endpoint, ssl=params.hive_ssl, ssl_keystore=params.hive_ssl_keystore_path, ssl_password=params.hive_ssl_keystore_password)
            print ('Successfully connected to %s on port %s' % (address, port))
            workable_server_available = True
        except:
            print ('Connection to %s on port %s failed' % (address, port))
            time.sleep(5)
        i += 1
        if (i == len(address_list)):
            i = 0
    elapsed_time = (time.time() - start_time)
    if (not workable_server_available):
        raise Fail(('Connection to Hive server %s on port %s failed after %d seconds' % (params.hostname, params.hive_server_port, elapsed_time)))
    print ('Successfully connected to Hive at %s on port %s after %d seconds' % (params.hostname, params.hive_server_port, elapsed_time))
    hcat_service_check()
    webhcat_service_check()
