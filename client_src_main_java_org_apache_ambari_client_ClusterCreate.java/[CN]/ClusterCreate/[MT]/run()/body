{
  parseCommandLine();
  ClientConfig config=new DefaultClientConfig();
  Client client=Client.create(config);
  WebResource service=client.resource(getBaseURI());
  ClusterDefinition clsDef=new ClusterDefinition();
  clsDef.setName(line.getOptionValue("name"));
  clsDef.setBlueprintName(line.getOptionValue("blueprint"));
  clsDef.setNodes(line.getOptionValue("nodes"));
  clsDef.setGoalState(line.getOptionValue("goalstate"));
  String revision=line.getOptionValue("revision");
  if (revision == null) {
    revision="";
    ClientResponse response=service.path("blueprints/" + line.getOptionValue("blueprint")).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON).get(ClientResponse.class);
    if (response.getStatus() != 404 && response.getStatus() != 200) {
      System.err.println("Stack list command failed. Reason [Code: <" + response.getStatus() + ">, Message: <"+ response.getHeaders().getFirst("ErrorMessage")+ ">]");
      System.exit(-1);
    }
    if (response.getStatus() == 404) {
      System.err.println("Stack name:" + line.getOptionValue("blueprint") + " does not exist.");
      System.exit(-1);
    }
    Stack stack=response.getEntity(Stack.class);
    revision=stack.getRevision();
  }
  clsDef.setBlueprintRevision(revision);
  clsDef.setActiveServices(splitServices(line.getOptionValue("services")));
  clsDef.setDescription(line.getOptionValue("desc"));
  clsDef.setRoleToNodesMap(getRoleToNodesList(line.getOptionProperties("role")));
  ClientResponse response=service.path("clusters/" + line.getOptionValue("name")).queryParam("dry_run",dry_run).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON).put(ClientResponse.class,clsDef);
  if (response.getStatus() != 200) {
    System.err.println("Cluster create command failed. Reason [Code: <" + response.getStatus() + ">, Message: <"+ response.getHeaders().getFirst("ErrorMessage")+ ">]");
    System.exit(-1);
  }
  ClusterDefinition def=response.getEntity(ClusterDefinition.class);
  if (line.hasOption("dry_run")) {
    System.out.println("Cluster: [" + def.getName() + "] created. Mode: dry_run.\n");
    printClusterDefinition(def);
    return;
  }
  if (!line.hasOption("wait")) {
    System.out.println("Cluster: [" + def.getName() + "] created.\n");
    printClusterDefinition(def);
    return;
  }
  ClusterState clusterState;
  for (; ; ) {
    response=service.path("clusters/" + def.getName() + "/state").accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON).get(ClientResponse.class);
    if (response.getStatus() != 200) {
      System.err.println("Failed to get the cluster state. Reason [Code: <" + response.getStatus() + ">, Message: <"+ response.getHeaders().getFirst("ErrorMessage")+ ">]");
      System.exit(-1);
    }
    clusterState=response.getEntity(ClusterState.class);
    if (clusterState.getState().equals(def.getGoalState())) {
      break;
    }
    System.out.println("Waiting for cluster [" + def.getName() + "] to get to desired goalstate of ["+ def.getGoalState()+ "]");
    Thread.sleep(15 * 60000);
  }
  System.out.println("Cluster: [" + def.getName() + "] created. Cluster state: ["+ clusterState.getState()+ "]\n");
  printClusterDefinition(def);
}
