{
  CommandLineParser parser=new GnuParser();
  try {
    CommandLine line=parser.parse(this.options,this.args);
    if (line.hasOption("help")) {
      printUsage();
      System.exit(0);
    }
    this.clusterName=line.getOptionValue("name");
    this.blueprint=line.getOptionValue("blueprint");
    this.nodeRangeExpressions=line.getOptionValue("nodes");
    if (line.hasOption("revision")) {
      this.blueprint_revision=line.getOptionValue("revision");
      System.out.println("Blueprint Revision = " + this.blueprint_revision);
    }
    if (line.hasOption("desc")) {
      this.description=line.getOptionValue("desc");
      System.out.println("DESCRIPTION = " + this.description);
    }
    if (line.hasOption("role")) {
      this.roleToNodeExpressions=line.getOptionProperties("role");
    }
    if (line.hasOption("goalstate")) {
      this.goalState=line.getOptionValue("goalstate");
      System.out.println("Goalstate = " + this.goalState);
    }
    if (line.hasOption("services")) {
      this.activeServices=line.getOptionValue("services");
      System.out.println("Active Services = " + this.activeServices);
    }
    if (line.hasOption("wait")) {
      this.wait=true;
    }
    if (line.hasOption("dry_run")) {
      this.dry_run=true;
    }
  }
 catch (  ParseException exp) {
    System.err.println("Command parsing failed. Reason: <" + exp.getMessage() + ">\n");
    printUsage();
    System.exit(-1);
  }
}
