{
  actionLog.writeStdOut("Processing Kerberos identities and configurations");
  if (!schToProcess.isEmpty()) {
    if (dataDirectory == null) {
      String message="The data directory has not been set.  Generated data can not be stored.";
      LOG.error(message);
      throw new AmbariException(message);
    }
    File identityDataFile=new File(dataDirectory,KerberosIdentityDataFileWriter.DATA_FILE_NAME);
    Map<String,String> kerberosDescriptorProperties=kerberosDescriptor.getProperties();
    KerberosIdentityDataFileWriter kerberosIdentityDataFileWriter;
    Map<String,Map<String,String>> configurations=kerberosHelper.calculateConfigurations(cluster,null,kerberosDescriptorProperties);
    Map<String,Object> filterContext=new HashMap<String,Object>();
    filterContext.put("configurations",configurations);
    filterContext.put("services",cluster.getServices().keySet());
    actionLog.writeStdOut(String.format("Writing Kerberos identity data metadata file to %s",identityDataFile.getAbsolutePath()));
    try {
      kerberosIdentityDataFileWriter=kerberosIdentityDataFileWriterFactory.createKerberosIdentityDataFileWriter(identityDataFile);
    }
 catch (    IOException e) {
      String message=String.format("Failed to write index file - %s",identityDataFile.getAbsolutePath());
      LOG.error(message,e);
      actionLog.writeStdOut(message);
      actionLog.writeStdErr(message + "\n" + e.getLocalizedMessage());
      throw new AmbariException(message,e);
    }
    try {
      Set<String> services=cluster.getServices().keySet();
      Map<String,Set<String>> propertiesToIgnore=null;
      try {
        for (        ServiceComponentHost sch : schToProcess) {
          String hostName=sch.getHostName();
          String serviceName=sch.getServiceName();
          String componentName=sch.getServiceComponentName();
          KerberosServiceDescriptor serviceDescriptor=kerberosDescriptor.getService(serviceName);
          if (serviceDescriptor != null) {
            List<KerberosIdentityDescriptor> serviceIdentities=serviceDescriptor.getIdentities(true,filterContext);
            kerberosHelper.addIdentities(kerberosIdentityDataFileWriter,serviceIdentities,identityFilter,hostName,serviceName,componentName,kerberosConfigurations,configurations);
            propertiesToIgnore=gatherPropertiesToIgnore(serviceIdentities,propertiesToIgnore);
            KerberosComponentDescriptor componentDescriptor=serviceDescriptor.getComponent(componentName);
            if (componentDescriptor != null) {
              List<KerberosIdentityDescriptor> componentIdentities=componentDescriptor.getIdentities(true,filterContext);
              kerberosHelper.mergeConfigurations(kerberosConfigurations,componentDescriptor.getConfigurations(true),configurations);
              kerberosHelper.addIdentities(kerberosIdentityDataFileWriter,componentIdentities,identityFilter,hostName,serviceName,componentName,kerberosConfigurations,configurations);
              propertiesToIgnore=gatherPropertiesToIgnore(componentIdentities,propertiesToIgnore);
            }
          }
        }
        if (includeAmbariIdentity && kerberosHelper.createAmbariIdentities(configurations.get("kerberos-env"))) {
          List<KerberosIdentityDescriptor> ambariIdentities=kerberosHelper.getAmbariServerIdentities(kerberosDescriptor);
          if (!ambariIdentities.isEmpty()) {
            for (            KerberosIdentityDescriptor identity : ambariIdentities) {
              String componentName=KerberosHelper.AMBARI_SERVER_KERBEROS_IDENTITY_NAME.equals(identity.getName()) ? "AMBARI_SERVER_SELF" : "AMBARI_SERVER";
              List<KerberosIdentityDescriptor> componentIdentities=Collections.singletonList(identity);
              kerberosHelper.addIdentities(kerberosIdentityDataFileWriter,componentIdentities,identityFilter,KerberosHelper.AMBARI_SERVER_HOST_NAME,"AMBARI",componentName,kerberosConfigurations,configurations);
              propertiesToIgnore=gatherPropertiesToIgnore(componentIdentities,propertiesToIgnore);
            }
          }
        }
      }
 catch (      IOException e) {
        String message=String.format("Failed to write index file - %s",identityDataFile.getAbsolutePath());
        LOG.error(message,e);
        actionLog.writeStdOut(message);
        actionLog.writeStdErr(message + "\n" + e.getLocalizedMessage());
        throw new AmbariException(message,e);
      }
      kerberosHelper.applyStackAdvisorUpdates(cluster,services,configurations,kerberosConfigurations,propertiesToIgnore,propertiesToInsert,propertiesToRemove,kerberosEnabled);
    }
  finally {
      if (kerberosIdentityDataFileWriter != null) {
        try {
          kerberosIdentityDataFileWriter.close();
        }
 catch (        IOException e) {
          String message="Failed to close the index file writer";
          LOG.warn(message,e);
          actionLog.writeStdOut(message);
          actionLog.writeStdErr(message + "\n" + e.getLocalizedMessage());
        }
      }
    }
  }
}
