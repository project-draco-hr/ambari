{
  actionLog.writeStdOut("Processing Kerberos Identities");
  if (!schToProcess.isEmpty()) {
    if (dataDirectory == null) {
      String message="The data directory has not been set.  Generated data can not be stored.";
      LOG.error(message);
      throw new AmbariException(message);
    }
    File identityDataFile=new File(dataDirectory,KerberosIdentityDataFileWriter.DATA_FILE_NAME);
    Map<String,List<ServiceComponentHost>> hostServiceComponentHosts=new HashMap<String,List<ServiceComponentHost>>();
    for (    ServiceComponentHost sch : schToProcess) {
      String hostName=sch.getHostName();
      List<ServiceComponentHost> serviceComponentHosts=hostServiceComponentHosts.get(hostName);
      if (serviceComponentHosts == null) {
        serviceComponentHosts=new ArrayList<ServiceComponentHost>();
        hostServiceComponentHosts.put(hostName,serviceComponentHosts);
      }
      serviceComponentHosts.add(sch);
    }
    Map<String,String> kerberosDescriptorProperties=kerberosDescriptor.getProperties();
    KerberosIdentityDataFileWriter kerberosIdentityDataFileWriter=null;
    try {
      for (      Map.Entry<String,List<ServiceComponentHost>> entry : hostServiceComponentHosts.entrySet()) {
        String hostName=entry.getKey();
        List<ServiceComponentHost> serviceComponentHosts=entry.getValue();
        Map<String,Map<String,String>> configurations=kerberosHelper.calculateConfigurations(cluster,hostName,kerberosDescriptorProperties);
        try {
          for (          ServiceComponentHost sch : serviceComponentHosts) {
            String serviceName=sch.getServiceName();
            String componentName=sch.getServiceComponentName();
            KerberosServiceDescriptor serviceDescriptor=kerberosDescriptor.getService(serviceName);
            if (serviceDescriptor != null) {
              List<KerberosIdentityDescriptor> serviceIdentities=serviceDescriptor.getIdentities(true);
              if (kerberosIdentityDataFileWriter == null) {
                actionLog.writeStdOut(String.format("Writing Kerberos identity data metadata file to %s",identityDataFile.getAbsolutePath()));
                kerberosIdentityDataFileWriter=kerberosIdentityDataFileWriterFactory.createKerberosIdentityDataFileWriter(identityDataFile);
              }
              kerberosHelper.addIdentities(kerberosIdentityDataFileWriter,serviceIdentities,identityFilter,hostName,serviceName,componentName,kerberosConfigurations,configurations);
              KerberosComponentDescriptor componentDescriptor=serviceDescriptor.getComponent(componentName);
              if (componentDescriptor != null) {
                List<KerberosIdentityDescriptor> componentIdentities=componentDescriptor.getIdentities(true);
                kerberosHelper.mergeConfigurations(kerberosConfigurations,componentDescriptor.getConfigurations(true),configurations);
                kerberosHelper.addIdentities(kerberosIdentityDataFileWriter,componentIdentities,identityFilter,hostName,serviceName,componentName,kerberosConfigurations,configurations);
              }
            }
          }
        }
 catch (        IOException e) {
          String message=String.format("Failed to write index file - %s",identityDataFile.getAbsolutePath());
          LOG.error(message,e);
          actionLog.writeStdOut(message);
          actionLog.writeStdErr(message + "\n" + e.getLocalizedMessage());
          throw new AmbariException(message,e);
        }
      }
    }
  finally {
      if (kerberosIdentityDataFileWriter != null) {
        try {
          kerberosIdentityDataFileWriter.close();
        }
 catch (        IOException e) {
          String message="Failed to close the index file writer";
          LOG.warn(message,e);
          actionLog.writeStdOut(message);
          actionLog.writeStdErr(message + "\n" + e.getLocalizedMessage());
        }
      }
    }
  }
}
