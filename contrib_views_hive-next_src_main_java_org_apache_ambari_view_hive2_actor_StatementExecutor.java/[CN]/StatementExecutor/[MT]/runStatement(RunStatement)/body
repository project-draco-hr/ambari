{
  try {
    HiveStatement statement=connectionDelegate.createStatement(connection);
    if (message.shouldStartLogAggregation()) {
      startLogAggregation(statement,message.getStatement(),message.getLogFile().get());
    }
    if (message.shouldStartGUIDFetch() && message.getJobId().isPresent()) {
      startGUIDFetch(message.getId(),statement,message.getJobId().get());
    }
    LOG.info("Statement executor is executing statement: {}, Statement id: {}, JobId: {}",message.getStatement(),message.getId(),message.getJobId().or("SYNC JOB"));
    Optional<ResultSet> resultSetOptional=connectionDelegate.execute(message.getStatement());
    LOG.info("Finished executing statement: {}, Statement id: {}, JobId: {}",message.getStatement(),message.getId(),message.getJobId().or("SYNC JOB"));
    if (resultSetOptional.isPresent()) {
      sender().tell(new ResultInformation(message.getId(),resultSetOptional.get()),self());
    }
 else {
      sender().tell(new ResultInformation(message.getId()),self());
    }
  }
 catch (  SQLException e) {
    LOG.error("Failed to execute statement: {}. {}",message.getStatement(),e);
    sender().tell(new ResultInformation(message.getId(),new Failure("Failed to execute statement: " + message.getStatement(),e)),self());
  }
 finally {
    stopLogAggregation();
    stopGUIDFetch();
  }
}
