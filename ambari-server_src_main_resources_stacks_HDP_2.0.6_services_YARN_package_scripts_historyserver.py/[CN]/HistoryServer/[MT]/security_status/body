def security_status(self, env):
    import status_params
    env.set_params(status_params)
    expectations = {}
    expectations.update(build_expectations('mapred-site', None, ['mapreduce.jobhistory.keytab', 'mapreduce.jobhistory.principal', 'mapreduce.jobhistory.webapp.spnego-keytab-file', 'mapreduce.jobhistory.webapp.spnego-principal'], None))
    security_params = get_params_from_filesystem(status_params.hadoop_conf_dir, {'mapred-site.xml': FILE_TYPE_XML, })
    result_issues = validate_security_config_properties(security_params, expectations)
    if (not result_issues):
        try:
            if (('mapred-site' not in security_params) or ('mapreduce.jobhistory.keytab' not in security_params['mapred-site']) or ('mapreduce.jobhistory.principal' not in security_params['mapred-site']) or ('mapreduce.jobhistory.webapp.spnego-keytab-file' not in security_params['mapred-site']) or ('mapreduce.jobhistory.webapp.spnego-principal' not in security_params['mapred-site'])):
                self.put_structured_out({'securityState': 'UNSECURED', })
                self.put_structured_out({'securityIssuesFound': 'Keytab file or principal not set.', })
                return
            cached_kinit_executor(status_params.kinit_path_local, status_params.mapred_user, security_params['mapred-site']['mapreduce.jobhistory.keytab'], security_params['mapred-site']['mapreduce.jobhistory.principal'], status_params.hostname, status_params.tmp_dir)
            cached_kinit_executor(status_params.kinit_path_local, status_params.mapred_user, security_params['mapred-site']['mapreduce.jobhistory.webapp.spnego-keytab-file'], security_params['mapred-site']['mapreduce.jobhistory.webapp.spnego-principal'], status_params.hostname, status_params.tmp_dir)
            self.put_structured_out({'securityState': 'SECURED_KERBEROS', })
        except Exception as e:
            self.put_structured_out({'securityState': 'ERROR', })
            self.put_structured_out({'securityStateErrorInfo': str(e), })
    else:
        issues = []
        for cf in result_issues:
            issues.append(('Configuration file %s did not pass the validation. Reason: %s' % (cf, result_issues[cf])))
        self.put_structured_out({'securityIssuesFound': '. '.join(issues), })
        self.put_structured_out({'securityState': 'UNSECURED', })
