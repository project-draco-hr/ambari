{
  Map<String,Map<String,Collection<String>>> missingPasswords=blueprint.validateConfigurations(stackInfo,PropertyInfo.PropertyType.PASSWORD);
  Iterator<Map.Entry<String,Map<String,Collection<String>>>> iter;
  for (iter=missingPasswords.entrySet().iterator(); iter.hasNext(); ) {
    Map.Entry<String,Map<String,Collection<String>>> entry=iter.next();
    Map<String,Collection<String>> missingProps=entry.getValue();
    Iterator<Map.Entry<String,Collection<String>>> hostGroupIter;
    for (hostGroupIter=missingProps.entrySet().iterator(); hostGroupIter.hasNext(); ) {
      Map.Entry<String,Collection<String>> hgEntry=hostGroupIter.next();
      String configType=hgEntry.getKey();
      Collection<String> propertySet=hgEntry.getValue();
      for (Iterator<String> propIter=propertySet.iterator(); propIter.hasNext(); ) {
        String property=propIter.next();
        if (isPropertyInConfiguration(mapClusterConfigurations.get(configType),property)) {
          propIter.remove();
        }
 else {
          HostGroup hg=hostGroups.get(entry.getKey());
          if (hg != null && isPropertyInConfiguration(hg.getConfigurations().get(configType),property)) {
            propIter.remove();
          }
 else           if (setDefaultPassword(defaultPassword,configType,property)) {
            propIter.remove();
          }
        }
      }
      if (propertySet.isEmpty()) {
        hostGroupIter.remove();
      }
    }
    if (entry.getValue().isEmpty()) {
      iter.remove();
    }
  }
  if (!missingPasswords.isEmpty()) {
    throw new IllegalArgumentException("Missing required password properties.  Specify a value for these " + "properties in the cluster or host group configurations or include 'default_password' field in request. " + missingPasswords);
  }
}
