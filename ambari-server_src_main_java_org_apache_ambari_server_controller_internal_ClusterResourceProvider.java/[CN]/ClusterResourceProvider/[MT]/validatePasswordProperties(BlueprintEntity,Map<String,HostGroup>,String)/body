{
  Map<String,Map<String,Collection<String>>> missingPasswords=blueprint.validateConfigurations(stackInfo,PropertyInfo.PropertyType.PASSWORD);
  Iterator<Map.Entry<String,Map<String,Collection<String>>>> iter;
  for (iter=missingPasswords.entrySet().iterator(); iter.hasNext(); ) {
    Map.Entry<String,Map<String,Collection<String>>> entry=iter.next();
    Map<String,Collection<String>> missingProps=entry.getValue();
    Iterator<Map.Entry<String,Collection<String>>> propIter;
    for (propIter=missingProps.entrySet().iterator(); propIter.hasNext(); ) {
      Map.Entry<String,Collection<String>> propEntry=propIter.next();
      String configType=propEntry.getKey();
      Collection<String> propertySet=propEntry.getValue();
      for (      String property : propertySet) {
        if (setDefaultPassword(defaultPassword,configType,property)) {
          propIter.remove();
        }
 else         if (isPropertyInConfiguration(mapClusterConfigurations.get(configType),property)) {
          propIter.remove();
        }
 else {
          HostGroup hostgroup=hostGroups.get(entry.getKey());
          if (hostgroup != null) {
            if (isPropertyInConfiguration(hostgroup.getConfigurations().get(configType),property)) {
              propIter.remove();
            }
          }
        }
      }
    }
    if (entry.getValue().isEmpty()) {
      iter.remove();
    }
  }
  if (!missingPasswords.isEmpty()) {
    throw new IllegalArgumentException("Missing required password properties.  Specify a value for these " + "properties in the cluster or host group configurations or include 'default_password' field in request. " + missingPasswords);
  }
}
