{
  @SuppressWarnings("unchecked") Collection<Map<String,Object>> hostGroups=(Collection<Map<String,Object>>)properties.get("host_groups");
  if (hostGroups == null || hostGroups.isEmpty()) {
    throw new IllegalArgumentException("'host_groups' element must be included in cluster create body");
  }
  for (  Map<String,Object> hostGroupProperties : hostGroups) {
    String name=(String)hostGroupProperties.get("name");
    if (name == null || name.isEmpty()) {
      throw new IllegalArgumentException("Every host_group must include a non-null 'name' property");
    }
    HostGroup hostGroup=blueprintHostGroups.get(name);
    if (hostGroup == null) {
      throw new IllegalArgumentException("Invalid host_group specified: " + name + ".  All request host groups must have a corresponding host group in the specified blueprint");
    }
    Collection hosts=(Collection)hostGroupProperties.get("hosts");
    if (hosts == null || hosts.isEmpty()) {
      throw new IllegalArgumentException("Host group '" + name + "' must contain a 'hosts' element");
    }
    for (    Object oHost : hosts) {
      @SuppressWarnings("unchecked") Map<String,String> mapHostProperties=(Map<String,String>)oHost;
      String fqdn=mapHostProperties.get("fqdn");
      if (fqdn == null || fqdn.isEmpty()) {
        throw new IllegalArgumentException("Host group '" + name + "' hosts element must include at least one fqdn");
      }
      hostGroup.addHostInfo(fqdn);
    }
    Map<String,Map<String,String>> existingConfigurations=hostGroup.getConfigurations();
    overrideExistingProperties(existingConfigurations,(Collection<Map<String,String>>)hostGroupProperties.get("configurations"));
  }
  validateHostMappings(blueprintHostGroups);
}
