{
  for (  String service : getServicesToDeploy(stack,blueprintHostGroups)) {
    for (    String type : stack.getConfigurationTypes(service)) {
      Map<String,String> typeProps=mapClusterConfigurations.get(type);
      if (typeProps == null) {
        typeProps=new HashMap<String,String>();
        mapClusterConfigurations.put(type,typeProps);
      }
      typeProps.putAll(stack.getConfigurationProperties(service,type));
      Map<String,Map<String,String>> stackTypeAttributes=stack.getConfigurationAttributes(service,type);
      if (!stackTypeAttributes.isEmpty()) {
        if (!mapClusterAttributes.containsKey(type)) {
          mapClusterAttributes.put(type,new HashMap<String,Map<String,String>>());
        }
        Map<String,Map<String,String>> typeAttrs=mapClusterAttributes.get(type);
        for (        Map.Entry<String,Map<String,String>> attribute : stackTypeAttributes.entrySet()) {
          String attributeName=attribute.getKey();
          Map<String,String> attributes=typeAttrs.get(attributeName);
          if (attributes == null) {
            attributes=new HashMap<String,String>();
            typeAttrs.put(attributeName,attributes);
          }
          attributes.putAll(attribute.getValue());
        }
      }
    }
  }
  processBlueprintClusterConfigurations(blueprintConfigurations);
  processBlueprintClusterConfigAttributes(blueprintAttributes);
  BlueprintConfigurationProcessor configurationProcessor=new BlueprintConfigurationProcessor(mapClusterConfigurations);
  configurationProcessor.doUpdateForClusterCreate(blueprintHostGroups,stack);
  setMissingConfigurations(blueprintHostGroups);
}
