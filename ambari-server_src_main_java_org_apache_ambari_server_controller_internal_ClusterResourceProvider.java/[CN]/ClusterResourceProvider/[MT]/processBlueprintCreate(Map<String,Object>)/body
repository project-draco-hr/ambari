{
  String blueprintName=(String)properties.get(BLUEPRINT_PROPERTY_ID);
  LOG.info("Creating Cluster '" + properties.get(CLUSTER_NAME_PROPERTY_ID) + "' based on blueprint '"+ blueprintName+ "'.");
  BlueprintEntity blueprint=getExistingBlueprint(blueprintName);
  Stack stack=parseStack(blueprint);
  Map<String,HostGroupImpl> blueprintHostGroups=parseBlueprintHostGroups(blueprint,stack);
  applyRequestInfoToHostGroups(properties,blueprintHostGroups);
  Collection<Map<String,String>> configOverrides=(Collection<Map<String,String>>)properties.get("configurations");
  processConfigurations(processBlueprintConfigurations(blueprint,configOverrides),processBlueprintAttributes(blueprint),stack,blueprintHostGroups);
  validatePasswordProperties(blueprint,blueprintHostGroups,(String)properties.get("default_password"));
  String clusterName=(String)properties.get(CLUSTER_NAME_PROPERTY_ID);
  createClusterResource(buildClusterResourceProperties(stack,clusterName));
  setConfigurationsOnCluster(clusterName);
  Set<String> services=getServicesToDeploy(stack,blueprintHostGroups);
  createServiceAndComponentResources(blueprintHostGroups,clusterName,services);
  createHostAndComponentResources(blueprintHostGroups,clusterName);
  registerConfigGroups(clusterName,blueprintHostGroups,stack);
  persistInstallStateForUI();
  return ((ServiceResourceProvider)getResourceProvider(Resource.Type.Service)).installAndStart(clusterName);
}
