{
  LOG.info("Creating Cluster '" + properties.get(CLUSTER_NAME_PROPERTY_ID) + "' based on blueprint '"+ String.valueOf(properties.get(BLUEPRINT_PROPERTY_ID))+ "'.");
  String rawRequestBody=requestInfoProperties.get(Request.REQUEST_INFO_BODY_PROPERTY);
  Map<String,Object> rawBodyMap=jsonSerializer.<Map<String,Object>>fromJson(rawRequestBody,Map.class);
  SecurityConfiguration securityConfiguration=securityConfigurationFactory.createSecurityConfigurationFromRequest(rawBodyMap,false);
  ProvisionClusterRequest createClusterRequest;
  try {
    createClusterRequest=topologyRequestFactory.createProvisionClusterRequest(properties,securityConfiguration);
  }
 catch (  InvalidTopologyTemplateException e) {
    throw new IllegalArgumentException("Invalid Cluster Creation Template: " + e,e);
  }
  if (securityConfiguration != null && securityConfiguration.getType() == SecurityType.NONE && createClusterRequest.getBlueprint().getSecurity() != null && createClusterRequest.getBlueprint().getSecurity().getType() == SecurityType.KERBEROS) {
    throw new IllegalArgumentException("Setting security to NONE is not allowed as security type in blueprint is set to KERBEROS!");
  }
  try {
    return topologyManager.provisionCluster(createClusterRequest);
  }
 catch (  InvalidTopologyException e) {
    throw new IllegalArgumentException("Topology validation failed: " + e,e);
  }
catch (  AmbariException e) {
    e.printStackTrace();
    throw new SystemException("Unknown exception when asking TopologyManager to provision cluster",e);
  }
}
