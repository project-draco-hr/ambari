{
  for (  HostGroup group : hostGroups.values()) {
    HostGroupEntity entity=group.getEntity();
    Map<String,Map<String,Config>> groupConfigs=new HashMap<String,Map<String,Config>>();
    handleGlobalsBackwardsCompability(stack,group.getConfigurations());
    for (    Map.Entry<String,Map<String,String>> entry : group.getConfigurations().entrySet()) {
      String type=entry.getKey();
      String service=stack.getServiceForConfigType(type);
      Config config=new ConfigImpl(type);
      config.setTag(entity.getName());
      config.setProperties(entry.getValue());
      Map<String,Config> serviceConfigs=groupConfigs.get(service);
      if (serviceConfigs == null) {
        serviceConfigs=new HashMap<String,Config>();
        groupConfigs.put(service,serviceConfigs);
      }
      serviceConfigs.put(type,config);
    }
    for (    Map.Entry<String,Map<String,Config>> entry : groupConfigs.entrySet()) {
      String service=entry.getKey();
      Map<String,Config> serviceConfigs=entry.getValue();
      ConfigGroupRequest request=new ConfigGroupRequest(null,clusterName,entity.getName(),service,"Host Group Configuration",new HashSet<String>(group.getHostInfo()),serviceConfigs);
      ((ConfigGroupResourceProvider)getResourceProvider(Resource.Type.ConfigGroup)).createResources(Collections.singleton(request));
    }
  }
}
