{
  List<BlueprintServiceConfigRequest> listofConfigRequests=new LinkedList<BlueprintServiceConfigRequest>();
  for (  String service : getServicesToDeploy(stack,blueprintHostGroups)) {
    BlueprintServiceConfigRequest blueprintConfigRequest=new BlueprintServiceConfigRequest(service);
    for (    String serviceConfigType : stack.getConfigurationTypes(service)) {
      Set<String> excludedConfigTypes=stack.getExcludedConfigurationTypes(service);
      if (excludedConfigTypes == null) {
        excludedConfigTypes=Collections.emptySet();
      }
      if (!excludedConfigTypes.contains(serviceConfigType)) {
        if (!serviceConfigType.equals("cluster-env")) {
          if (mapClusterConfigurations.containsKey(serviceConfigType)) {
            blueprintConfigRequest.addConfigElement(serviceConfigType,mapClusterConfigurations.get(serviceConfigType),mapClusterAttributes.get(serviceConfigType));
          }
        }
      }
    }
    listofConfigRequests.add(blueprintConfigRequest);
  }
  BlueprintServiceConfigRequest globalConfigRequest=new BlueprintServiceConfigRequest("GLOBAL-CONFIG");
  globalConfigRequest.addConfigElement("cluster-env",mapClusterConfigurations.get("cluster-env"),mapClusterAttributes.get("cluster-env"));
  listofConfigRequests.add(globalConfigRequest);
  try {
    setConfigurationsOnCluster(clusterName,listofConfigRequests);
  }
 catch (  AmbariException e) {
    throw new SystemException("Unable to set configurations on cluster.",e);
  }
}
