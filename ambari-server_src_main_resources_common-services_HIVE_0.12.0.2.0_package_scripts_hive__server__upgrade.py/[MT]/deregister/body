def deregister():
    '\n  Runs the "hive --service hiveserver2 --deregister <version>" command to\n  de-provision the server in preparation for an upgrade. This will contact\n  ZooKeeper to remove the server so that clients that attempt to connect\n  will be directed to other servers automatically. Once all\n  clients have drained, the server will shutdown automatically.\n\n  However, since Ambari does not support Hive Server rolling upgrades due to the port change\n  affecting Hive Clients not using the ZK discovery service, the daemon might be forcefully\n  killed before it has been deregistered and drained.\n\n  This function will obtain the Kerberos ticket if security is enabled.\n  :return:\n  '
    import params
    Logger.info('HiveServer2 executing "deregister" command to complete upgrade...')
    if params.security_enabled:
        kinit_command = format('{kinit_path_local} -kt {smoke_user_keytab} {smokeuser_principal}; ')
        Execute(kinit_command, user=params.smokeuser)
    current_hiveserver_version = _get_current_hiveserver_version()
    if (current_hiveserver_version is None):
        raise Fail('Unable to determine the current HiveServer2 version to deregister.')
    hive_server_conf_dir = params.hive_server_conf_dir
    if (not os.path.exists(hive_server_conf_dir)):
        hive_server_conf_dir = '/etc/hive/conf.server'
    hive_execute_path = params.execute_path
    if ('downgrade' == params.upgrade_direction):
        downgrade_version = params.current_version
        if params.downgrade_from_version:
            downgrade_version = params.downgrade_from_version
        hive_execute_path = _get_hive_execute_path(downgrade_version)
    command = format(('hive --config {hive_server_conf_dir} --service hiveserver2 --deregister ' + current_hiveserver_version))
    Execute(command, user=params.hive_user, path=hive_execute_path, tries=1)
