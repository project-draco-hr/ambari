def _get_current_hiveserver_version():
    '\n  Runs "hive --version" and parses the result in order\n  to obtain the current version of hive.\n\n  :return:  the hiveserver2 version, returned by "hive --version"\n  '
    import params
    try:
        if ('downgrade' == params.upgrade_direction):
            if (not params.downgrade_from_version):
                raise Fail("The version from which we are downgrading from should be provided in 'downgrade_from_version'")
            source_version = params.downgrade_from_version
        else:
            source_version = params.current_version
        hive_execute_path = _get_hive_execute_path(source_version)
        version_hive_bin = params.hive_bin
        formatted_source_version = format_stack_version(source_version)
        if (formatted_source_version and (compare_versions(formatted_source_version, '2.2') >= 0)):
            version_hive_bin = format('/usr/hdp/{source_version}/hive/bin')
        command = format('{version_hive_bin}/hive --version')
        (return_code, hdp_output) = shell.call(command, user=params.hive_user, path=hive_execute_path)
    except Exception as e:
        Logger.error(str(e))
        raise Fail('Unable to execute hive --version command to retrieve the hiveserver2 version.')
    if (return_code != 0):
        raise Fail('Unable to determine the current HiveServer2 version because of a non-zero return code of {0}'.format(str(return_code)))
    match = re.search('^(Hive) ([0-9]+.[0-9]+.\\S+)', hdp_output, re.MULTILINE)
    if match:
        current_hive_server_version = match.group(2)
        return current_hive_server_version
    else:
        raise Fail('The extracted hiveserver2 version "{0}" does not matching any known pattern'.format(hdp_output))
