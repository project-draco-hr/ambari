{
  injector.injectMembers(this);
  this.clusterGlobalLock=service.getClusterGlobalLock();
  this.service=service;
  this.desiredStateEntity=serviceComponentDesiredStateEntity;
  this.hostComponents=new HashMap<String,ServiceComponentHost>();
  for (  HostComponentStateEntity hostComponentStateEntity : desiredStateEntity.getHostComponentStateEntities()) {
    HostComponentDesiredStateEntityPK pk=new HostComponentDesiredStateEntityPK();
    pk.setClusterId(hostComponentStateEntity.getClusterId());
    pk.setServiceName(hostComponentStateEntity.getServiceName());
    pk.setComponentName(hostComponentStateEntity.getComponentName());
    pk.setHostName(hostComponentStateEntity.getHostName());
    HostComponentDesiredStateEntity hostComponentDesiredStateEntity=hostComponentDesiredStateDAO.findByPK(pk);
    hostComponents.put(hostComponentStateEntity.getHostName(),serviceComponentHostFactory.createExisting(this,hostComponentStateEntity,hostComponentDesiredStateEntity));
  }
  StackId stackId=service.getDesiredStackVersion();
  try {
    ComponentInfo compInfo=ambariMetaInfo.getComponent(stackId.getStackName(),stackId.getStackVersion(),service.getName(),getName());
    this.isClientComponent=compInfo.isClient();
    this.isMasterComponent=compInfo.isMaster();
  }
 catch (  ObjectNotFoundException e) {
    throw new AmbariException("Trying to create a ServiceComponent" + " not recognized in stack info" + ", clusterName=" + service.getCluster().getClusterName() + ", serviceName="+ service.getName()+ ", componentName="+ getName()+ ", stackInfo="+ stackId.getStackId());
  }
  persisted=true;
}
