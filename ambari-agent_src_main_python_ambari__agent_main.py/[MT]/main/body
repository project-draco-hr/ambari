def main():
    global config
    parser = OptionParser()
    parser.add_option('-v', '--verbose', dest='verbose', action='store_true', help='verbose log output', default=False)
    (options, args) = parser.parse_args()
    formatstr = '%(levelname)s %(asctime)s %(filename)s:%(lineno)d - %(message)s'
    formatter = logging.Formatter(formatstr)
    rotateLog = logging.handlers.RotatingFileHandler(logfile, 'a', 10000000, 25)
    rotateLog.setFormatter(formatter)
    logger.addHandler(rotateLog)
    if options.verbose:
        logging.basicConfig(format=formatstr, level=logging.DEBUG, filename=logfile)
        logger.setLevel(logging.DEBUG)
    else:
        logging.basicConfig(format=formatstr, level=logging.INFO, filename=logfile)
        logger.setLevel(logging.INFO)
    logger.debug('loglevel=logging.DEBUG')
    default_cfg = {'agent': {'prefix': '/home/ambari', }, }
    config = ConfigParser.RawConfigParser(default_cfg)
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    signal.signal(signal.SIGUSR1, debug)
    if ((len(sys.argv) > 1) and (sys.argv[1] == 'stop')):
        pid = (-1)
        try:
            f = open(ProcessHelper.pidfile, 'r')
            pid = f.read()
            pid = int(pid)
            f.close()
            os.kill(pid, signal.SIGTERM)
            time.sleep(5)
            if os.path.exists(ProcessHelper.pidfile):
                raise Exception('PID file still exists.')
            os._exit(0)
        except Exception as err:
            if (pid == (-1)):
                print 'Agent process is not running'
            else:
                os.kill(pid, signal.SIGKILL)
            os._exit(1)
    if os.path.isfile(ProcessHelper.pidfile):
        print ('%s already exists, exiting' % ProcessHelper.pidfile)
        sys.exit(1)
    else:
        pid = str(os.getpid())
        file(ProcessHelper.pidfile, 'w').write(pid)
    credential = None
    try:
        config = AmbariConfig.config
        if os.path.exists('/etc/ambari-agent/conf/ambari-agent.ini'):
            config.read('/etc/ambari-agent/conf/ambari-agent.ini')
            AmbariConfig.setConfig(config)
        else:
            raise Exception('No config found, use default')
    except Exception as err:
        logger.warn(err)
    killstaleprocesses()
    server_url = ((('https://' + config.get('server', 'hostname')) + ':') + config.get('server', 'url_port'))
    print (('Connecting to the server at ' + server_url) + '...')
    logger.info(('Connecting to the server at: ' + server_url))
    netutil = NetUtil()
    netutil.try_to_connect(server_url, (-1), logger)
    ' Check if security is enable if not then disable it'
    logger.info('Creating certs')
    certMan = CertificateManager(config)
    certMan.initSecurity()
    controller = Controller(config)
    controller.start()
    controller.run()
    logger.info('finished')
