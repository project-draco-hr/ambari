def main():
    global config
    parser = OptionParser()
    parser.add_option('-v', '--verbose', dest='verbose', action='store_true', help='verbose log output', default=False)
    parser.add_option('-e', '--expected-hostname', dest='expected_hostname', action='store', help='expected hostname of current host. If hostname differs, agent will fail', default=None)
    (options, args) = parser.parse_args()
    expected_hostname = options.expected_hostname
    setup_logging(options.verbose)
    default_cfg = {'agent': {'prefix': '/home/ambari', }, }
    config = ConfigParser.RawConfigParser(default_cfg)
    bind_signal_handlers()
    if ((len(sys.argv) > 1) and (sys.argv[1] == 'stop')):
        stop_agent()
    config = resolve_ambari_config()
    data_cleaner = None
    if (int(config.get('agent', 'data_cleanup_interval')) > 0):
        data_cleaner = DataCleaner(config)
        data_cleaner.start()
    perform_prestart_checks(expected_hostname)
    daemonize()
    try:
        ping_port_listener = PingPortListener(config)
    except Exception as ex:
        err_message = ('Failed to start ping port listener of: ' + str(ex))
        logger.error(err_message)
        sys.stderr.write(err_message)
        sys.exit(1)
    ping_port_listener.start()
    update_log_level(config)
    server_hostname = config.get('server', 'hostname')
    server_url = ((('https://' + server_hostname) + ':') + config.get('server', 'url_port'))
    try:
        server_ip = socket.gethostbyname(server_hostname)
        logger.info('Connecting to Ambari server at %s (%s)', server_url, server_ip)
    except socket.error:
        logger.warn("Unable to determine the IP address of the Ambari server '%s'", server_hostname)
    netutil = NetUtil()
    netutil.try_to_connect(server_url, (-1), logger)
    controller = Controller(config)
    controller.start()
    controller.join()
    stop_agent()
    logger.info('finished')
