def main(heartbeat_stop_callback=None):
    global config
    global home_dir
    parser = OptionParser()
    parser.add_option('-v', '--verbose', dest='verbose', action='store_true', help='verbose log output', default=False)
    parser.add_option('-e', '--expected-hostname', dest='expected_hostname', action='store', help='expected hostname of current host. If hostname differs, agent will fail', default=None)
    parser.add_option('--home', dest='home_dir', action='store', help='Home directory', default='')
    (options, args) = parser.parse_args()
    expected_hostname = options.expected_hostname
    home_dir = options.home_dir
    logging_level = (logging.DEBUG if options.verbose else logging.INFO)
    setup_logging(logger, AmbariConfig.AmbariConfig.getLogFile(), logging_level)
    global is_logger_setup
    is_logger_setup = True
    setup_logging(alerts_logger, AmbariConfig.AmbariConfig.getAlertsLogFile(), logging_level)
    Logger.initialize_logger('resource_management', logging_level=logging_level)
    if (home_dir != ''):
        Logger.info(('Agent is using Home Dir: %s' % str(home_dir)))
    try:
        locale.setlocale(locale.LC_ALL, '')
    except locale.Error as ex:
        logger.warning('Cannot set locale for ambari-agent. Please check your systemwide locale settings. Failed due to: {0}.'.format(str(ex)))
    default_cfg = {'agent': {'prefix': '/home/ambari', }, }
    config.load(default_cfg)
    if ((len(sys.argv) > 1) and (sys.argv[1] == 'stop')):
        stop_agent()
    if ((len(sys.argv) > 2) and (sys.argv[1] == 'reset')):
        reset_agent(sys.argv)
    resolve_ambari_config()
    add_syslog_handler(logger)
    data_cleaner = None
    if (config.has_option('agent', 'data_cleanup_interval') and (int(config.get('agent', 'data_cleanup_interval')) > 0)):
        data_cleaner = DataCleaner(config)
        data_cleaner.start()
    perform_prestart_checks(expected_hostname)
    try:
        ping_port_listener = PingPortListener(config)
    except Exception as ex:
        err_message = ('Failed to start ping port listener of: ' + str(ex))
        logger.error(err_message)
        sys.stderr.write(err_message)
        sys.exit(1)
    ping_port_listener.start()
    update_log_level(config)
    update_open_files_ulimit(config)
    if (not (OSCheck.get_os_family() == OSConst.WINSRV_FAMILY)):
        daemonize()
    active_server = None
    server_hostnames = hostname.server_hostnames(config)
    connected = False
    stopped = False
    while ((not connected) and (not stopped)):
        for server_hostname in server_hostnames:
            server_url = config.get_api_url(server_hostname)
            try:
                server_ip = socket.gethostbyname(server_hostname)
                logger.info('Connecting to Ambari server at %s (%s)', server_url, server_ip)
            except socket.error:
                logger.warn("Unable to determine the IP address of the Ambari server '%s'", server_hostname)
            netutil = NetUtil(config, heartbeat_stop_callback)
            (retries, connected, stopped) = netutil.try_to_connect(server_url, MAX_RETRIES, logger)
            if connected:
                logger.info('Connected to Ambari server %s', server_hostname)
                active_server = server_hostname
                run_threads(server_hostname, heartbeat_stop_callback)
            if (connected or stopped):
                ExitHelper().exit(0)
                logger.info('finished')
                break
        pass
    pass
    return active_server
