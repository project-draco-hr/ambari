{
  ViewDAO viewDAO=createNiceMock(ViewDAO.class);
  ViewInstanceDAO viewInstanceDAO=createNiceMock(ViewInstanceDAO.class);
  UserDAO userDAO=createNiceMock(UserDAO.class);
  MemberDAO memberDAO=createNiceMock(MemberDAO.class);
  PrivilegeDAO privilegeDAO=createNiceMock(PrivilegeDAO.class);
  SecurityHelper securityHelper=createNiceMock(SecurityHelper.class);
  ResourceDAO rDAO=createNiceMock(ResourceDAO.class);
  ResourceTypeDAO rtDAO=createNiceMock(ResourceTypeDAO.class);
  ViewRegistry.init(viewDAO,viewInstanceDAO,userDAO,memberDAO,privilegeDAO,securityHelper,rDAO,rtDAO);
  ViewRegistry registry=ViewRegistry.getInstance();
  Properties properties=new Properties();
  properties.put("p1","v1");
  Configuration ambariConfig=new Configuration(properties);
  ViewConfig config=ViewConfigTest.getConfig(xml_valid_instance);
  ViewEntity viewEntity=getViewEntity(config,ambariConfig,getClass().getClassLoader(),"");
  ViewInstanceEntity viewInstanceEntity=getViewInstanceEntity(viewEntity,config.getInstances().get(0));
  expect(viewInstanceDAO.merge(viewInstanceEntity)).andReturn(null);
  expect(viewInstanceDAO.findByName("MY_VIEW{1.0.0}",viewInstanceEntity.getInstanceName())).andReturn(viewInstanceEntity);
  replay(viewDAO,viewInstanceDAO,securityHelper);
  registry.addDefinition(viewEntity);
  registry.installViewInstance(viewInstanceEntity);
  Collection<ViewInstanceEntity> viewInstanceDefinitions=registry.getInstanceDefinitions(viewEntity);
  Assert.assertEquals(1,viewInstanceDefinitions.size());
  Assert.assertEquals(viewInstanceEntity,viewInstanceDefinitions.iterator().next());
  verify(viewDAO,viewInstanceDAO,securityHelper);
}
