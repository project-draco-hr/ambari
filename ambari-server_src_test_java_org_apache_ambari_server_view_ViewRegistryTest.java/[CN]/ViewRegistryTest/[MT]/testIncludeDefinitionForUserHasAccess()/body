{
  ViewRegistry viewRegistry=ViewRegistry.getInstance();
  ViewEntity viewEntity=createNiceMock(ViewEntity.class);
  SecurityHelper securityHelper=createNiceMock(SecurityHelper.class);
  ViewInstanceEntity instanceEntity=createNiceMock(ViewInstanceEntity.class);
  ResourceEntity resourceEntity=createNiceMock(ResourceEntity.class);
  AmbariGrantedAuthority viewUseAuthority=createNiceMock(AmbariGrantedAuthority.class);
  PrivilegeEntity privilegeEntity=createNiceMock(PrivilegeEntity.class);
  PermissionEntity permissionEntity=createNiceMock(PermissionEntity.class);
  viewRegistry.setSecurityHelper(securityHelper);
  Collection<GrantedAuthority> authorities=new ArrayList<GrantedAuthority>();
  authorities.add(viewUseAuthority);
  Collection<ViewInstanceEntity> instances=new ArrayList<ViewInstanceEntity>();
  instances.add(instanceEntity);
  expect(viewEntity.getInstances()).andReturn(instances);
  expect(instanceEntity.getResource()).andReturn(resourceEntity);
  expect(viewUseAuthority.getPrivilegeEntity()).andReturn(privilegeEntity).anyTimes();
  expect(privilegeEntity.getPermission()).andReturn(permissionEntity).anyTimes();
  expect(privilegeEntity.getResource()).andReturn(resourceEntity).anyTimes();
  expect(permissionEntity.getId()).andReturn(PermissionEntity.VIEW_USE_PERMISSION).anyTimes();
  securityHelper.getCurrentAuthorities();
  EasyMock.expectLastCall().andReturn(authorities).anyTimes();
  replay(securityHelper,viewEntity,instanceEntity,viewUseAuthority,privilegeEntity,permissionEntity);
  Assert.assertTrue(viewRegistry.includeDefinition(viewEntity));
  verify(securityHelper,viewEntity,instanceEntity,viewUseAuthority,privilegeEntity,permissionEntity);
}
