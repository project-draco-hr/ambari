{
  File viewDir=createNiceMock(File.class);
  File extractedArchiveDir=createNiceMock(File.class);
  File viewArchive=createNiceMock(File.class);
  File archiveDir=createNiceMock(File.class);
  File entryFile=createNiceMock(File.class);
  File classesDir=createNiceMock(File.class);
  File libDir=createNiceMock(File.class);
  File metaInfDir=createNiceMock(File.class);
  File fileEntry=createNiceMock(File.class);
  JarInputStream viewJarFile=createNiceMock(JarInputStream.class);
  JarEntry jarEntry=createNiceMock(JarEntry.class);
  FileOutputStream fos=createMock(FileOutputStream.class);
  ResourceTypeEntity resourceTypeEntity=new ResourceTypeEntity();
  resourceTypeEntity.setId(10);
  resourceTypeEntity.setName("MY_VIEW{1.0.0}");
  ViewEntity viewDefinition=ViewEntityTest.getViewEntity();
  viewDefinition.setResourceType(resourceTypeEntity);
  Set<ViewInstanceEntity> viewInstanceEntities=ViewInstanceEntityTest.getViewInstanceEntities(viewDefinition);
  viewDefinition.setInstances(viewInstanceEntities);
  Map<File,ViewConfig> viewConfigs=Collections.singletonMap(viewArchive,viewDefinition.getConfiguration());
  long resourceId=99L;
  for (  ViewInstanceEntity viewInstanceEntity : viewInstanceEntities) {
    ResourceEntity resourceEntity=new ResourceEntity();
    resourceEntity.setId(resourceId);
    resourceEntity.setResourceType(resourceTypeEntity);
    viewInstanceEntity.setResource(resourceEntity);
  }
  Map<String,File> files=new HashMap<String,File>();
  files.put("/var/lib/ambari-server/resources/views/work",extractedArchiveDir);
  files.put("/var/lib/ambari-server/resources/views/work/MY_VIEW{1.0.0}",archiveDir);
  files.put("/var/lib/ambari-server/resources/views/work/MY_VIEW{1.0.0}/view.xml",entryFile);
  files.put("/var/lib/ambari-server/resources/views/work/MY_VIEW{1.0.0}/WEB-INF/classes",classesDir);
  files.put("/var/lib/ambari-server/resources/views/work/MY_VIEW{1.0.0}/WEB-INF/lib",libDir);
  files.put("/var/lib/ambari-server/resources/views/work/MY_VIEW{1.0.0}/META-INF",metaInfDir);
  Map<File,FileOutputStream> outputStreams=new HashMap<File,FileOutputStream>();
  outputStreams.put(entryFile,fos);
  Map<File,JarInputStream> jarFiles=new HashMap<File,JarInputStream>();
  jarFiles.put(viewArchive,viewJarFile);
  expect(configuration.getViewsDir()).andReturn(viewDir);
  expect(viewDir.getAbsolutePath()).andReturn("/var/lib/ambari-server/resources/views");
  expect(configuration.getViewExtractionThreadPoolCoreSize()).andReturn(2).anyTimes();
  expect(configuration.getViewExtractionThreadPoolMaxSize()).andReturn(3).anyTimes();
  expect(configuration.getViewExtractionThreadPoolTimeout()).andReturn(10000L).anyTimes();
  expect(viewDir.listFiles()).andReturn(new File[]{viewArchive});
  expect(viewArchive.isDirectory()).andReturn(false);
  expect(viewArchive.getAbsolutePath()).andReturn("/var/lib/ambari-server/resources/views/work/MY_VIEW{1.0.0}");
  expect(archiveDir.exists()).andReturn(false);
  expect(archiveDir.getAbsolutePath()).andReturn("/var/lib/ambari-server/resources/views/work/MY_VIEW{1.0.0}").anyTimes();
  expect(archiveDir.mkdir()).andReturn(true);
  expect(archiveDir.toURI()).andReturn(new URI("file:./"));
  expect(metaInfDir.mkdir()).andReturn(true);
  expect(viewJarFile.getNextJarEntry()).andReturn(jarEntry);
  expect(viewJarFile.getNextJarEntry()).andReturn(null);
  expect(jarEntry.getName()).andReturn("view.xml");
  expect(jarEntry.isDirectory()).andReturn(false);
  expect(viewJarFile.read(anyObject(byte[].class))).andReturn(10);
  expect(viewJarFile.read(anyObject(byte[].class))).andReturn(-1);
  fos.write(anyObject(byte[].class),eq(0),eq(10));
  fos.flush();
  fos.close();
  viewJarFile.closeEntry();
  viewJarFile.close();
  expect(extractedArchiveDir.exists()).andReturn(false);
  expect(extractedArchiveDir.mkdir()).andReturn(true);
  expect(classesDir.exists()).andReturn(true);
  expect(classesDir.toURI()).andReturn(new URI("file:./"));
  expect(libDir.exists()).andReturn(true);
  expect(libDir.listFiles()).andReturn(new File[]{fileEntry});
  expect(fileEntry.toURI()).andReturn(new URI("file:./"));
  expect(viewDAO.findAll()).andReturn(Collections.<ViewEntity>emptyList());
  expect(viewDAO.findByName("MY_VIEW{1.0.0}")).andThrow(new IllegalArgumentException("Expected exception."));
  replay(configuration,viewDir,extractedArchiveDir,viewArchive,archiveDir,entryFile,classesDir,libDir,metaInfDir,fileEntry,viewJarFile,jarEntry,fos,viewDAO);
  TestViewArchiveUtility archiveUtility=new TestViewArchiveUtility(viewConfigs,files,outputStreams,jarFiles);
  ViewRegistry registry=getRegistry(viewDAO,viewInstanceDAO,userDAO,memberDAO,privilegeDAO,resourceDAO,resourceTypeDAO,securityHelper,handlerList,null,archiveUtility);
  registry.readViewArchives();
  ViewEntity view=null;
  long timeout=System.currentTimeMillis() + 10000L;
  while ((view == null || !view.getStatus().equals(ViewDefinition.ViewStatus.ERROR)) && System.currentTimeMillis() < timeout) {
    view=registry.getDefinition("MY_VIEW","1.0.0");
  }
  Assert.assertNotNull(view);
  Assert.assertEquals(ViewDefinition.ViewStatus.ERROR,view.getStatus());
  verify(configuration,viewDir,extractedArchiveDir,viewArchive,archiveDir,entryFile,classesDir,libDir,metaInfDir,fileEntry,viewJarFile,jarEntry,fos,viewDAO);
}
