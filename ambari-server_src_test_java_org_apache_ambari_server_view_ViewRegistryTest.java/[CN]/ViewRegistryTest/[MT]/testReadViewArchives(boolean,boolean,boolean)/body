{
  File viewDir=createNiceMock(File.class);
  File extractedArchiveDir=createNiceMock(File.class);
  File viewArchive=createNiceMock(File.class);
  File archiveDir=createNiceMock(File.class);
  File entryFile=createNiceMock(File.class);
  File classesDir=createNiceMock(File.class);
  File libDir=createNiceMock(File.class);
  File metaInfDir=createNiceMock(File.class);
  File fileEntry=createNiceMock(File.class);
  JarInputStream viewJarFile=createNiceMock(JarInputStream.class);
  JarEntry jarEntry=createNiceMock(JarEntry.class);
  FileOutputStream fos=createMock(FileOutputStream.class);
  ResourceTypeEntity resourceTypeEntity=new ResourceTypeEntity();
  resourceTypeEntity.setId(10);
  resourceTypeEntity.setName("MY_VIEW{1.0.0}");
  ViewEntity viewDefinition=ViewEntityTest.getViewEntity();
  viewDefinition.setResourceType(resourceTypeEntity);
  Set<ViewInstanceEntity> viewInstanceEntities=ViewInstanceEntityTest.getViewInstanceEntities(viewDefinition);
  for (  ViewInstanceEntity viewInstanceEntity : viewInstanceEntities) {
    viewInstanceEntity.putInstanceData("p1","v1");
    Collection<ViewEntityEntity> entities=new HashSet<ViewEntityEntity>();
    ViewEntityEntity viewEntityEntity=new ViewEntityEntity();
    viewEntityEntity.setId(99L);
    viewEntityEntity.setIdProperty("id");
    viewEntityEntity.setViewName("MY_VIEW{1.0.0}");
    viewEntityEntity.setClassName("class");
    viewEntityEntity.setViewInstanceName(viewInstanceEntity.getName());
    viewEntityEntity.setViewInstance(viewInstanceEntity);
    entities.add(viewEntityEntity);
    viewInstanceEntity.setEntities(entities);
  }
  viewDefinition.setInstances(viewInstanceEntities);
  Map<File,ViewConfig> viewConfigs=Collections.singletonMap(viewArchive,viewDefinition.getConfiguration());
  long resourceId=99L;
  for (  ViewInstanceEntity viewInstanceEntity : viewInstanceEntities) {
    ResourceEntity resourceEntity=new ResourceEntity();
    resourceEntity.setId(resourceId);
    resourceEntity.setResourceType(resourceTypeEntity);
    viewInstanceEntity.setResource(resourceEntity);
  }
  Map<String,File> files=new HashMap<String,File>();
  if (System.getProperty("os.name").contains("Windows")) {
    files.put("\\var\\lib\\ambari-server\\resources\\views\\work",extractedArchiveDir);
    files.put("\\var\\lib\\ambari-server\\resources\\views\\work\\MY_VIEW{1.0.0}",archiveDir);
    files.put("\\var\\lib\\ambari-server\\resources\\views\\work\\MY_VIEW{1.0.0}\\view.xml",entryFile);
    files.put("\\var\\lib\\ambari-server\\resources\\views\\work\\MY_VIEW{1.0.0}\\WEB-INF/classes",classesDir);
    files.put("\\var\\lib\\ambari-server\\resources\\views\\work\\MY_VIEW{1.0.0}\\WEB-INF/lib",libDir);
    files.put("\\var\\lib\\ambari-server\\resources\\views\\work\\MY_VIEW{1.0.0}\\META-INF",metaInfDir);
  }
 else {
    files.put("/var/lib/ambari-server/resources/views/work",extractedArchiveDir);
    files.put("/var/lib/ambari-server/resources/views/work/MY_VIEW{1.0.0}",archiveDir);
    files.put("/var/lib/ambari-server/resources/views/work/MY_VIEW{1.0.0}/view.xml",entryFile);
    files.put("/var/lib/ambari-server/resources/views/work/MY_VIEW{1.0.0}/WEB-INF/classes",classesDir);
    files.put("/var/lib/ambari-server/resources/views/work/MY_VIEW{1.0.0}/WEB-INF/lib",libDir);
    files.put("/var/lib/ambari-server/resources/views/work/MY_VIEW{1.0.0}/META-INF",metaInfDir);
  }
  Map<File,FileOutputStream> outputStreams=new HashMap<File,FileOutputStream>();
  outputStreams.put(entryFile,fos);
  Map<File,JarInputStream> jarFiles=new HashMap<File,JarInputStream>();
  jarFiles.put(viewArchive,viewJarFile);
  expect(configuration.getViewsDir()).andReturn(viewDir);
  if (System.getProperty("os.name").contains("Windows")) {
    expect(viewDir.getAbsolutePath()).andReturn("\\var\\lib\\ambari-server\\resources\\views");
  }
 else {
    expect(viewDir.getAbsolutePath()).andReturn("/var/lib/ambari-server/resources/views");
  }
  expect(configuration.getViewExtractionThreadPoolCoreSize()).andReturn(2).anyTimes();
  expect(configuration.getViewExtractionThreadPoolMaxSize()).andReturn(3).anyTimes();
  expect(configuration.getViewExtractionThreadPoolTimeout()).andReturn(10000L).anyTimes();
  expect(viewDir.listFiles()).andReturn(new File[]{viewArchive});
  expect(viewArchive.isDirectory()).andReturn(false);
  if (System.getProperty("os.name").contains("Windows")) {
    expect(viewArchive.getAbsolutePath()).andReturn("\\var\\lib\\ambari-server\\resources\\views\\work\\MY_VIEW{1.0.0}").anyTimes();
  }
 else {
    expect(viewArchive.getAbsolutePath()).andReturn("/var/lib/ambari-server/resources/views/work/MY_VIEW{1.0.0}").anyTimes();
  }
  expect(archiveDir.exists()).andReturn(false).anyTimes();
  if (System.getProperty("os.name").contains("Windows")) {
    expect(archiveDir.getAbsolutePath()).andReturn("\\var\\lib\\ambari-server\\resources\\views\\work\\MY_VIEW{1.0.0}").anyTimes();
  }
 else {
    expect(archiveDir.getAbsolutePath()).andReturn("/var/lib/ambari-server/resources/views/work/MY_VIEW{1.0.0}").anyTimes();
  }
  expect(archiveDir.mkdir()).andReturn(true).anyTimes();
  expect(archiveDir.toURI()).andReturn(new URI("file:./")).anyTimes();
  expect(metaInfDir.mkdir()).andReturn(true).anyTimes();
  if (!badArchive) {
    expect(viewJarFile.getNextJarEntry()).andReturn(jarEntry);
    expect(viewJarFile.getNextJarEntry()).andReturn(null);
    expect(jarEntry.getName()).andReturn("view.xml");
    expect(jarEntry.isDirectory()).andReturn(false);
    expect(viewJarFile.read(anyObject(byte[].class))).andReturn(10);
    expect(viewJarFile.read(anyObject(byte[].class))).andReturn(-1);
    fos.write(anyObject(byte[].class),eq(0),eq(10));
    fos.flush();
    fos.close();
    viewJarFile.closeEntry();
    viewJarFile.close();
    expect(viewDAO.findByName("MY_VIEW{1.0.0}")).andReturn(viewDefinition);
  }
  expect(extractedArchiveDir.exists()).andReturn(false).anyTimes();
  expect(extractedArchiveDir.mkdir()).andReturn(true).anyTimes();
  expect(classesDir.exists()).andReturn(true).anyTimes();
  expect(classesDir.toURI()).andReturn(new URI("file:./")).anyTimes();
  expect(libDir.exists()).andReturn(true).anyTimes();
  expect(libDir.listFiles()).andReturn(new File[]{fileEntry}).anyTimes();
  expect(fileEntry.toURI()).andReturn(new URI("file:./")).anyTimes();
  expect(configuration.isViewRemoveUndeployedEnabled()).andReturn(removeUndeployed).anyTimes();
  Cluster cluster=createNiceMock(Cluster.class);
  Service service=createNiceMock(Service.class);
  ViewInstanceEntity viewAutoInstanceEntity=createNiceMock(ViewInstanceEntity.class);
  Capture<ViewInstanceEntity> viewAutoInstanceCapture=new Capture<ViewInstanceEntity>();
  ViewInstanceDataEntity autoInstanceDataEntity=createNiceMock(ViewInstanceDataEntity.class);
  expect(autoInstanceDataEntity.getName()).andReturn("p1").anyTimes();
  expect(autoInstanceDataEntity.getUser()).andReturn(" ").anyTimes();
  Map<String,Service> serviceMap=new HashMap<String,Service>();
  serviceMap.put("HDFS",service);
  serviceMap.put("HIVE",service);
  StackId stackId=new StackId("HDP-2.0");
  if (checkAutoInstanceCreation) {
    Map<String,Cluster> allClusters=new HashMap<String,Cluster>();
    expect(cluster.getClusterName()).andReturn("c1").anyTimes();
    expect(cluster.getCurrentStackVersion()).andReturn(stackId).anyTimes();
    expect(cluster.getServices()).andReturn(serviceMap).anyTimes();
    allClusters.put("c1",cluster);
    expect(clusters.getClusters()).andReturn(allClusters);
    expect(viewInstanceDAO.merge(capture(viewAutoInstanceCapture))).andReturn(viewAutoInstanceEntity).anyTimes();
    expect(viewInstanceDAO.findByName("MY_VIEW{1.0.0}","AUTO-INSTANCE")).andReturn(viewAutoInstanceEntity).anyTimes();
    expect(viewAutoInstanceEntity.getInstanceData("p1")).andReturn(autoInstanceDataEntity).anyTimes();
  }
 else {
    expect(clusters.getClusters()).andReturn(new HashMap<String,Cluster>());
  }
  if (removeUndeployed) {
    expect(viewDAO.findAll()).andReturn(Collections.<ViewEntity>emptyList());
  }
  replay(configuration,viewDir,extractedArchiveDir,viewArchive,archiveDir,entryFile,classesDir,libDir,metaInfDir,fileEntry,viewJarFile,jarEntry,fos,resourceDAO,viewDAO,viewInstanceDAO,clusters,cluster,viewAutoInstanceEntity);
  TestViewArchiveUtility archiveUtility=new TestViewArchiveUtility(viewConfigs,files,outputStreams,jarFiles,badArchive);
  ViewRegistry registry=getRegistry(viewDAO,viewInstanceDAO,userDAO,memberDAO,privilegeDAO,resourceDAO,resourceTypeDAO,securityHelper,handlerList,null,archiveUtility,ambariMetaInfo,clusters);
  registry.readViewArchives();
  ViewEntity view=null;
  long timeout=System.currentTimeMillis() + 10000L;
  while (!archiveUtility.isDeploymentFailed() && (view == null || !view.getStatus().equals(ViewDefinition.ViewStatus.DEPLOYED)) && System.currentTimeMillis() < timeout) {
    view=registry.getDefinition("MY_VIEW","1.0.0");
  }
  int instanceDefinitionSize=checkAutoInstanceCreation ? 3 : 2;
  if (badArchive) {
    Assert.assertNull(view);
    Assert.assertTrue(archiveUtility.isDeploymentFailed());
  }
 else {
    Assert.assertNotNull(view);
    Assert.assertEquals(ViewDefinition.ViewStatus.DEPLOYED,view.getStatus());
    Collection<ViewInstanceEntity> instanceDefinitions=registry.getInstanceDefinitions(view);
    ArrayList<ViewInstanceEntity> filteredInstanceDefinition=new ArrayList<>();
    Assert.assertEquals(instanceDefinitionSize,instanceDefinitions.size());
    if (checkAutoInstanceCreation) {
      Assert.assertEquals(viewAutoInstanceCapture.getValue(),registry.getInstanceDefinition("MY_VIEW","1.0.0","AUTO-INSTANCE"));
    }
    for (    ViewInstanceEntity entity : instanceDefinitions) {
      if (!entity.getName().equals("AUTO-INSTANCE")) {
        filteredInstanceDefinition.add(entity);
      }
    }
    for (    ViewInstanceEntity viewInstanceEntity : filteredInstanceDefinition) {
      Assert.assertEquals("v1",viewInstanceEntity.getInstanceData("p1").getValue());
      Collection<ViewEntityEntity> entities=viewInstanceEntity.getEntities();
      Assert.assertEquals(1,entities.size());
      ViewEntityEntity viewEntityEntity=entities.iterator().next();
      Assert.assertEquals(99L,(long)viewEntityEntity.getId());
      Assert.assertEquals(viewInstanceEntity.getName(),viewEntityEntity.getViewInstanceName());
    }
  }
  verify(configuration,viewDir,extractedArchiveDir,viewArchive,archiveDir,entryFile,classesDir,libDir,metaInfDir,fileEntry,viewJarFile,jarEntry,fos,resourceDAO,viewDAO,viewInstanceDAO);
}
