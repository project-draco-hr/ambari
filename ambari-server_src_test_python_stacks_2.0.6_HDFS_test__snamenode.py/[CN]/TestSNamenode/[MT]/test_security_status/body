@patch('resource_management.libraries.functions.security_commons.build_expectations')
@patch('resource_management.libraries.functions.security_commons.get_params_from_filesystem')
@patch('resource_management.libraries.functions.security_commons.validate_security_config_properties')
@patch('resource_management.libraries.functions.security_commons.cached_kinit_executor')
@patch('resource_management.libraries.script.Script.put_structured_out')
def test_security_status(self, put_structured_out_mock, cached_kinit_executor_mock, validate_security_config_mock, get_params_mock, build_exp_mock):
    security_params = {'core-site': {'hadoop.security.authentication': 'kerberos', }, 'hdfs-site': {'dfs.secondary.namenode.keytab.file': 'path/to/snamenode/keytab/file', 'dfs.secondary.namenode.kerberos.principal': 'snamenode_principal', }, }
    props_value_check = None
    props_empty_check = ['dfs.secondary.namenode.kerberos.internal.spnego.principal', 'dfs.secondary.namenode.keytab.file', 'dfs.secondary.namenode.kerberos.principal']
    props_read_check = ['dfs.secondary.namenode.keytab.file']
    result_issues = []
    get_params_mock.return_value = security_params
    validate_security_config_mock.return_value = result_issues
    self.executeScript((self.COMMON_SERVICES_PACKAGE_DIR + '/scripts/snamenode.py'), classname='SNameNode', command='security_status', config_file='secured.json', stack_version=self.STACK_VERSION, target=RMFTestCase.TARGET_COMMON_SERVICES)
    build_exp_mock.assert_called_with('hdfs-site', props_value_check, props_empty_check, props_read_check)
    put_structured_out_mock.assert_called_with({'securityState': 'SECURED_KERBEROS', })
    cached_kinit_executor_mock.called_with('/usr/bin/kinit', self.config_dict['configurations']['hadoop-env']['hdfs_user'], security_params['hdfs-site']['dfs.secondary.namenode.keytab.file'], security_params['hdfs-site']['dfs.secondary.namenode.kerberos.principal'], self.config_dict['hostname'], '/tmp')
    security_params['core-site']['hadoop.security.authentication'] = 'simple'
    self.executeScript((self.COMMON_SERVICES_PACKAGE_DIR + '/scripts/snamenode.py'), classname='SNameNode', command='security_status', config_file='secured.json', stack_version=self.STACK_VERSION, target=RMFTestCase.TARGET_COMMON_SERVICES)
    put_structured_out_mock.assert_called_with({'securityState': 'UNSECURED', })
    security_params['core-site']['hadoop.security.authentication'] = 'kerberos'
    cached_kinit_executor_mock.reset_mock()
    cached_kinit_executor_mock.side_effect = Exception('Invalid command')
    try:
        self.executeScript((self.COMMON_SERVICES_PACKAGE_DIR + '/scripts/snamenode.py'), classname='SNameNode', command='security_status', config_file='secured.json', stack_version=self.STACK_VERSION, target=RMFTestCase.TARGET_COMMON_SERVICES)
    except:
        self.assertTrue(True)
    empty_security_params = {'core-site': {'hadoop.security.authentication': 'kerberos', }, }
    cached_kinit_executor_mock.reset_mock()
    get_params_mock.reset_mock()
    put_structured_out_mock.reset_mock()
    get_params_mock.return_value = empty_security_params
    self.executeScript((self.COMMON_SERVICES_PACKAGE_DIR + '/scripts/snamenode.py'), classname='SNameNode', command='security_status', config_file='secured.json', stack_version=self.STACK_VERSION, target=RMFTestCase.TARGET_COMMON_SERVICES)
    put_structured_out_mock.assert_called_with({'securityIssuesFound': 'Keytab file or principal are not set property.', })
    result_issues_with_params = {'hdfs-site': 'Something bad happened', }
    validate_security_config_mock.reset_mock()
    get_params_mock.reset_mock()
    validate_security_config_mock.return_value = result_issues_with_params
    get_params_mock.return_value = security_params
    self.executeScript((self.COMMON_SERVICES_PACKAGE_DIR + '/scripts/snamenode.py'), classname='SNameNode', command='security_status', config_file='secured.json', stack_version=self.STACK_VERSION, target=RMFTestCase.TARGET_COMMON_SERVICES)
    put_structured_out_mock.assert_called_with({'securityState': 'UNSECURED', })
