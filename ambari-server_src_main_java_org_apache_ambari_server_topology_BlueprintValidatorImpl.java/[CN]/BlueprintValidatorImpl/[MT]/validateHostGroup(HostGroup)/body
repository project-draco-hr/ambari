{
  LOGGER.info("Validating hostgroup: {}",group.getName());
  Map<String,Collection<DependencyInfo>> missingDependencies=new HashMap<String,Collection<DependencyInfo>>();
  for (  String component : new HashSet<String>(group.getComponentNames())) {
    LOGGER.debug("Processing component: {}",component);
    for (    DependencyInfo dependency : stack.getDependenciesForComponent(component)) {
      LOGGER.debug("Processing dependency [{}] for component [{}]",dependency.getName(),component);
      String conditionalService=stack.getConditionalServiceForDependency(dependency);
      if (conditionalService != null && !blueprint.getServices().contains(conditionalService)) {
        LOGGER.debug("Conditional service  [{}] is missing from the blueprint, skipping dependency [{}]",conditionalService,dependency.getName());
        continue;
      }
      boolean isClientDependency=stack.getComponentInfo(dependency.getComponentName()).isClient();
      if (isClientDependency && !blueprint.getServices().contains(dependency.getServiceName())) {
        LOGGER.debug("The service [{}] for component [{}] is missing from the blueprint [{}], skipping dependency",dependency.getServiceName(),dependency.getComponentName(),blueprint.getName());
        continue;
      }
      String dependencyScope=dependency.getScope();
      String componentName=dependency.getComponentName();
      AutoDeployInfo autoDeployInfo=dependency.getAutoDeploy();
      boolean resolved=false;
      if (dependency.hasDependencyConditions()) {
        boolean conditionsSatisfied=true;
        for (        DependencyConditionInfo dependencyCondition : dependency.getDependencyConditions()) {
          if (!dependencyCondition.isResolved(blueprint.getConfiguration().getFullProperties())) {
            conditionsSatisfied=false;
          }
        }
        if (!conditionsSatisfied) {
          continue;
        }
      }
      if (dependencyScope.equals("cluster")) {
        Collection<String> missingDependencyInfo=verifyComponentCardinalityCount(componentName,new Cardinality("1+"),autoDeployInfo);
        resolved=missingDependencyInfo.isEmpty();
      }
 else       if (dependencyScope.equals("host")) {
        if (group.getComponentNames().contains(componentName) || (autoDeployInfo != null && autoDeployInfo.isEnabled())) {
          resolved=true;
          group.addComponent(componentName);
        }
      }
      if (!resolved) {
        Collection<DependencyInfo> missingCompDependencies=missingDependencies.get(component);
        if (missingCompDependencies == null) {
          missingCompDependencies=new HashSet<DependencyInfo>();
          missingDependencies.put(component,missingCompDependencies);
        }
        missingCompDependencies.add(dependency);
      }
    }
  }
  return missingDependencies;
}
