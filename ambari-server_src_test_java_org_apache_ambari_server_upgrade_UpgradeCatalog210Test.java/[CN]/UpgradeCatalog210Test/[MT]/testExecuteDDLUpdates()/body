{
  final DBAccessor dbAccessor=createNiceMock(DBAccessor.class);
  Connection connection=createNiceMock(Connection.class);
  Configuration configuration=createNiceMock(Configuration.class);
  ResultSet resultSet=createNiceMock(ResultSet.class);
  expect(configuration.getDatabaseUrl()).andReturn(Configuration.JDBC_IN_MEMORY_URL).anyTimes();
  HostDAO hostDao=createNiceMock(HostDAO.class);
  HostEntity mockHost=createNiceMock(HostEntity.class);
  expect(hostDao.findByName("foo")).andReturn(mockHost).anyTimes();
  Capture<DBAccessor.DBColumnInfo> hostsColumnCapture=new Capture<DBAccessor.DBColumnInfo>();
  Capture<DBAccessor.DBColumnInfo> viewInstanceColumnCapture=new Capture<DBAccessor.DBColumnInfo>();
  Capture<DBAccessor.DBColumnInfo> viewParamColumnCapture=new Capture<DBAccessor.DBColumnInfo>();
  dbAccessor.addColumn(eq("hosts"),capture(hostsColumnCapture));
  dbAccessor.addColumn(eq("viewinstance"),capture(viewInstanceColumnCapture));
  dbAccessor.addColumn(eq("viewparameter"),capture(viewParamColumnCapture));
  Capture<List<DBColumnInfo>> userWidgetColumnsCapture=new Capture<List<DBColumnInfo>>();
  Capture<List<DBColumnInfo>> widgetLayoutColumnsCapture=new Capture<List<DBColumnInfo>>();
  Capture<List<DBColumnInfo>> widgetLayoutUserWidgetColumnsCapture=new Capture<List<DBColumnInfo>>();
  dbAccessor.createTable(eq("user_widget"),capture(userWidgetColumnsCapture),eq("id"));
  dbAccessor.createTable(eq("widget_layout"),capture(widgetLayoutColumnsCapture),eq("id"));
  dbAccessor.createTable(eq("widget_layout_user_widget"),capture(widgetLayoutUserWidgetColumnsCapture),eq("widget_layout_id"),eq("user_widget_id"));
  replay(dbAccessor,configuration,resultSet);
  replay(hostDao,mockHost);
  AbstractUpgradeCatalog upgradeCatalog=getUpgradeCatalog(dbAccessor);
  Class<?> c=AbstractUpgradeCatalog.class;
  Field f=c.getDeclaredField("configuration");
  f.setAccessible(true);
  f.set(upgradeCatalog,configuration);
  upgradeCatalog.executeDDLUpdates();
  verify(dbAccessor,configuration,resultSet);
  verifyHosts(hostsColumnCapture);
  verifyViewInstance(viewInstanceColumnCapture);
  verifyViewParameter(viewParamColumnCapture);
  assertEquals(12,userWidgetColumnsCapture.getValue().size());
  assertEquals(4,widgetLayoutColumnsCapture.getValue().size());
  assertEquals(3,widgetLayoutUserWidgetColumnsCapture.getValue().size());
}
