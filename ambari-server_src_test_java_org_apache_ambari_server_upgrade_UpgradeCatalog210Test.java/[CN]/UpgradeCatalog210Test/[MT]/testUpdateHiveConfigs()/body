{
  EasyMockSupport easyMockSupport=new EasyMockSupport();
  final AmbariManagementController mockAmbariManagementController=easyMockSupport.createNiceMock(AmbariManagementController.class);
  final ConfigHelper mockConfigHelper=easyMockSupport.createMock(ConfigHelper.class);
  final Clusters mockClusters=easyMockSupport.createStrictMock(Clusters.class);
  final Cluster mockClusterExpected=easyMockSupport.createNiceMock(Cluster.class);
  final Config mockHiveEnv=easyMockSupport.createNiceMock(Config.class);
  final Map<String,String> propertiesExpectedHiveEnv=new HashMap<String,String>();
  final Injector mockInjector=Guice.createInjector(new AbstractModule(){
    @Override protected void configure(){
      bind(AmbariManagementController.class).toInstance(mockAmbariManagementController);
      bind(ConfigHelper.class).toInstance(mockConfigHelper);
      bind(Clusters.class).toInstance(mockClusters);
      bind(DBAccessor.class).toInstance(createNiceMock(DBAccessor.class));
      bind(OsFamily.class).toInstance(createNiceMock(OsFamily.class));
    }
  }
);
  expect(mockAmbariManagementController.getClusters()).andReturn(mockClusters).once();
  expect(mockClusters.getClusters()).andReturn(new HashMap<String,Cluster>(){
{
      put("normal",mockClusterExpected);
    }
  }
).once();
  expect(mockClusterExpected.getDesiredConfigByType("hive-env")).andReturn(mockHiveEnv).atLeastOnce();
  expect(mockHiveEnv.getProperties()).andReturn(propertiesExpectedHiveEnv).anyTimes();
  expect(mockClusterExpected.getConfig(anyObject(String.class),anyObject(String.class))).andReturn(mockHiveEnv).anyTimes();
  ServiceConfigVersionResponse r=null;
  expect(mockClusterExpected.addDesiredConfig("ambari-upgrade",Collections.singleton(mockHiveEnv))).andReturn(r).once();
  easyMockSupport.replayAll();
  mockInjector.getInstance(UpgradeCatalog210.class).updateHiveConfigs();
  easyMockSupport.verifyAll();
}
