@patch('os.listdir')
@patch('os.path.isdir')
@patch.object(UpgradeExecutor.UpgradeExecutor, 'get_key_func')
def test_execute_dir(self, get_key_func_method, isdir_method, listdir_method):
    pythonExecutor = MagicMock()
    puppetExecutor = MagicMock()
    command = {'debug': 'command', }
    isdir_method.return_value = True


    class MyList(list):
        pass
    files = MyList(['first.py', 'second.pp', 'third.py', 'fourth.nm', 'fifth-failing.py', 'six.py'])
    files.sort = (lambda key: None)
    listdir_method.return_value = files
    pythonExecutor.run_file.side_effect = [{'exitcode': 0, 'stdout': 'stdout - first.py', 'stderr': 'stderr - first.py', }, {'exitcode': 0, 'stdout': 'stdout - third.py', 'stderr': 'stderr - third.py', }, {'exitcode': 1, 'stdout': 'stdout - fifth-failing.py', 'stderr': 'stderr - fifth-failing.py', }, {'exitcode': 0, 'stdout': 'stdout - six.py', 'stderr': 'stderr - six.py', }]
    puppetExecutor.run_manifest.side_effect = [{'exitcode': 0, 'stdout': 'stdout - second.pp', 'stderr': 'stderr - second.pp', }]
    executor = UpgradeExecutor.UpgradeExecutor(pythonExecutor, puppetExecutor, AmbariConfig.AmbariConfig().getConfig())
    result = executor.execute_dir(command, 'basedir', 'dir', 'tmpout', 'tmperr')
    self.assertEquals(result['exitcode'], 1)
    self.assertEquals(result['stdout'], '\nstdout - first.py\nstdout - second.pp\nstdout - third.py\nUnrecognized file type, skipping: basedir/dir/fourth.nm\nstdout - fifth-failing.py')
    self.assertEquals(result['stderr'], '\nstderr - first.py\nstderr - second.pp\nstderr - third.py\nNone\nstderr - fifth-failing.py')
