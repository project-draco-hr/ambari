@patch.object(StackVersionsFileHandler, 'write_stack_version')
@patch('os.path.isdir')
def test_perform_stack_upgrade(self, isdir_method, write_stack_version_method):
    puppetExecutor = MagicMock()
    executor = UpgradeExecutor.UpgradeExecutor('pythonExecutor', puppetExecutor, AmbariConfig.AmbariConfig().getConfig())
    command = {'commandParams': {'source_stack_version': '{"stackName":"HDP","stackVersion":"1.3.0"}', 'target_stack_version': '{"stackName":"HDP","stackVersion":"1.3.0"}', }, 'role': 'HDFS', }
    result = executor.perform_stack_upgrade(command, 'tmpout', 'tmperr')
    self.assertTrue(('matches current stack version' in result['stdout']))
    self.assertFalse(write_stack_version_method.called)
    write_stack_version_method.reset()
    command = {'commandParams': {'source_stack_version': '{"stackName":"HDP","stackVersion":"1.0.1"}', 'target_stack_version': '{"stackName":"HDP","stackVersion":"1.3.0"}', }, 'role': 'HDFS', }
    isdir_method.return_value = False
    result = executor.perform_stack_upgrade(command, 'tmpout', 'tmperr')
    self.assertTrue(('not supported' in result['stderr']))
    self.assertFalse(write_stack_version_method.called)
    write_stack_version_method.reset()
    command = {'commandParams': {'source_stack_version': '{"stackName":"HDP","stackVersion":"Wrong"}', 'target_stack_version': '{"stackName":"HDP","stackVersion":"1.3.0"}', }, 'role': 'HDFS', }
    result = executor.perform_stack_upgrade(command, 'tmpout', 'tmperr')
    self.assertTrue(('does not match pattern' in result['stderr']))
    self.assertFalse(write_stack_version_method.called)
    write_stack_version_method.reset()
    command = {'commandParams': {'source_stack_version': '{"stackName":"HDP","stackVersion":"1.3.0"}', 'target_stack_version': '{"stackName":"HDP","stackVersion":"Wrong"}', }, 'role': 'HDFS', }
    result = executor.perform_stack_upgrade(command, 'tmpout', 'tmperr')
    self.assertTrue(('does not match pattern' in result['stderr']))
    self.assertFalse(write_stack_version_method.called)
    write_stack_version_method.reset()
    command = {'commandParams': {'source_stack_version': '{"stackName":"HDP","stackVersion":"1.0.1"}', 'target_stack_version': '{"stackName":"HDP","stackVersion":"1.3.0"}', }, 'role': 'HDFS', }
    isdir_method.return_value = True
    executor.execute_dir = (lambda command, basedir, dir, tmpout, tmperr: {'exitcode': 0, 'stdout': ('output - %s' % dir), 'stderr': ('errors - %s' % dir), })
    result = executor.perform_stack_upgrade(command, 'tmpout', 'tmperr')
    self.assertTrue(write_stack_version_method.called)
    self.assertEquals(result['exitcode'], 0)
    self.assertEquals(result['stdout'], 'output - pre-upgrade.d\noutput - upgrade.d\noutput - post-upgrade.d')
    self.assertEquals(result['stderr'], 'errors - pre-upgrade.d\nerrors - upgrade.d\nerrors - post-upgrade.d')
    write_stack_version_method.reset()
    command = {'commandParams': {'source_stack_version': '{"stackName":"HDP","stackVersion":"1.0.1"}', 'target_stack_version': '{"stackName":"HDP","stackVersion":"1.3.0"}', }, 'role': 'HDFS', }
    isdir_method.return_value = True
    executor.execute_dir = (lambda command, basedir, dir, tmpout, tmperr: {'exitcode': 1, 'stdout': ('output - %s' % dir), 'stderr': ('errors - %s' % dir), })
    result = executor.perform_stack_upgrade(command, 'tmpout', 'tmperr')
    self.assertTrue(write_stack_version_method.called)
    self.assertEquals(result['exitcode'], 1)
    self.assertEquals(result['stdout'], 'output - pre-upgrade.d')
    self.assertEquals(result['stderr'], 'errors - pre-upgrade.d')
