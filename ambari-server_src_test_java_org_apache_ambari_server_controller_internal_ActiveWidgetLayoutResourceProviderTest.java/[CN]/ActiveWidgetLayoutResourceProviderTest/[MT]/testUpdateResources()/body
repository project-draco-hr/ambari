{
  AmbariManagementController amc=createMock(AmbariManagementController.class);
  expect(widgetLayoutDAO.findById(anyLong())).andReturn(getMockEntities().get(0)).anyTimes();
  UserEntity userEntity=new UserEntity();
  expect(userDAO.findUserByName("username")).andReturn(userEntity);
  expect(userDAO.merge((UserEntity)anyObject())).andReturn(userEntity).anyTimes();
  replay(amc,widgetLayoutDAO,userDAO);
  Predicate predicate=new PredicateBuilder().property(ActiveWidgetLayoutResourceProvider.WIDGETLAYOUT_USERNAME_PROPERTY_ID).equals("username").toPredicate();
  Set<Map<String,String>> widgetLayouts=new HashSet<Map<String,String>>();
  HashMap<String,String> layout=new HashMap<String,String>();
  layout.put("id","1");
  widgetLayouts.add(layout);
  layout.put("id","2");
  widgetLayouts.add(layout);
  HashMap<String,Object> requestProps=new HashMap<String,Object>();
  requestProps.put(ActiveWidgetLayoutResourceProvider.WIDGETLAYOUT,widgetLayouts);
  requestProps.put(ActiveWidgetLayoutResourceProvider.WIDGETLAYOUT_USERNAME_PROPERTY_ID,"username");
  Request request=PropertyHelper.getUpdateRequest(requestProps,null);
  ActiveWidgetLayoutResourceProvider provider=createProvider(amc);
  provider.updateResources(request,predicate);
  Assert.assertTrue(userEntity.getActiveWidgetLayouts().equals("[{\"id\":\"2\"},{\"id\":\"2\"}]"));
  verify(amc,widgetLayoutDAO,userDAO);
}
