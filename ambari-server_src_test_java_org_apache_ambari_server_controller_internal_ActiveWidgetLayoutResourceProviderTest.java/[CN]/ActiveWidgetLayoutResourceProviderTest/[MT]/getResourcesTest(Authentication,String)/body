{
  Injector injector=createInjector();
  UserEntity userEntity=createMockUserEntity(requestedUsername);
  UserDAO userDAO=injector.getInstance(UserDAO.class);
  expect(userDAO.findUserByName(requestedUsername)).andReturn(userEntity).atLeastOnce();
  WidgetLayoutDAO widgetLayoutDAO=injector.getInstance(WidgetLayoutDAO.class);
  expect(widgetLayoutDAO.findById(1L)).andReturn(createMockWidgetLayout(1L,requestedUsername)).atLeastOnce();
  expect(widgetLayoutDAO.findById(2L)).andReturn(createMockWidgetLayout(2L,requestedUsername)).atLeastOnce();
  Cluster cluster=createNiceMock(Cluster.class);
  expect(cluster.getClusterName()).andReturn("c1").atLeastOnce();
  Clusters clusters=injector.getInstance(Clusters.class);
  expect(clusters.getClusterById(2L)).andReturn(cluster).atLeastOnce();
  replayAll();
  AmbariMetaInfo ambariMetaInfo=injector.getInstance(AmbariMetaInfo.class);
  ambariMetaInfo.init();
  SecurityContextHolder.getContext().setAuthentication(authentication);
  AmbariManagementController managementController=injector.getInstance(AmbariManagementController.class);
  ResourceProvider provider=getResourceProvider(injector,managementController);
  Set<String> propertyIds=PropertyHelper.getPropertyIds(Resource.Type.ActiveWidgetLayout);
  Request request=PropertyHelper.getReadRequest(propertyIds);
  Set<Resource> resources=provider.getResources(request,createPredicate(requestedUsername));
  Assert.assertEquals(2,resources.size());
  for (  Resource resource : resources) {
    Long id=(Long)resource.getPropertyValue(ActiveWidgetLayoutResourceProvider.WIDGETLAYOUT_ID_PROPERTY_ID);
    Assert.assertEquals("section" + id,resource.getPropertyValue(ActiveWidgetLayoutResourceProvider.WIDGETLAYOUT_SECTION_NAME_PROPERTY_ID));
    Assert.assertEquals("CLUSTER",resource.getPropertyValue(ActiveWidgetLayoutResourceProvider.WIDGETLAYOUT_SCOPE_PROPERTY_ID));
    Assert.assertEquals(requestedUsername,resource.getPropertyValue(ActiveWidgetLayoutResourceProvider.WIDGETLAYOUT_USERNAME_PROPERTY_ID));
    Assert.assertEquals("display name" + id,resource.getPropertyValue(ActiveWidgetLayoutResourceProvider.WIDGETLAYOUT_DISPLAY_NAME_PROPERTY_ID));
    Assert.assertEquals("layout name" + id,resource.getPropertyValue(ActiveWidgetLayoutResourceProvider.WIDGETLAYOUT_LAYOUT_NAME_PROPERTY_ID));
    Assert.assertEquals("[]",resource.getPropertyValue(ActiveWidgetLayoutResourceProvider.WIDGETLAYOUT_WIDGETS_PROPERTY_ID).toString());
  }
  verifyAll();
}
