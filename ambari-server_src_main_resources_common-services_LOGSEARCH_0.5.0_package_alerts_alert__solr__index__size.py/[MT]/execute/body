def execute(configurations={}, parameters={}, host_name=None):
    '\n  Returns a tuple containing the result code and a pre-formatted result label\n\n  Keyword arguments:\n  configurations (dictionary): a mapping of configuration key to value\n  parameters (dictionary): a mapping of script parameter key to value\n  host_name (string): the name of this host where the alert is running\n  '
    if (configurations is None):
        return (RESULT_CODE_UNKNOWN, ['There were no configurations supplied to the script.'])
    if (SOLR_PORT in configurations):
        solr_port = configurations[SOLR_PORT]
    else:
        return (RESULT_CODE_UNKNOWN, ['No Solr port specified'])
    solr_index_size_warning = SOLR_INDEX_SIZE_WARNING_DEFAULT
    if (SOLR_INDEX_SIZE_WARNING_KEY in parameters):
        solr_index_size_warning = float(parameters[SOLR_INDEX_SIZE_WARNING_KEY])
    solr_index_size_critical = SOLR_INDEX_SIZE_CRITICAL_DEFAULT
    if (SOLR_INDEX_SIZE_CRITICAL_KEY in parameters):
        solr_index_size_critical = float(parameters[SOLR_INDEX_SIZE_CRITICAL_KEY])
    try:
        query = (('http://localhost:' + str(solr_port)) + '/solr/admin/cores?action=STATUS&wt=json')
        response = urllib2.urlopen(query)
        raw_data = response.read()
        json_data = json.loads(raw_data)
        size_in_bytes = 0
        for shard_data in json_data['status'].itervalues():
            size_in_bytes += shard_data['index']['sizeInBytes']
    except:
        label = CRITICAL_CONNECTION_MESSAGE.format(query, traceback.format_exc())
        return (RESULT_CODE_CRITICAL, [label])
    size_in_gb = (float(size_in_bytes) / float(((1024 * 1024) * 1024)))
    label = MESSAGE.format(size_in_gb)
    if (size_in_gb <= solr_index_size_warning):
        result_code = RESULT_CODE_OK
    elif (size_in_gb <= solr_index_size_critical):
        result_code = RESULT_CODE_WARNING
    else:
        result_code = RESULT_CODE_CRITICAL
    return (result_code, [label])
