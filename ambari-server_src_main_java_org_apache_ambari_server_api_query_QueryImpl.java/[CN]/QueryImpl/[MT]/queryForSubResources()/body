{
  for (  Map.Entry<String,QueryImpl> entry : requestedSubResources.entrySet()) {
    QueryImpl subResource=entry.getValue();
    Resource.Type resourceType=subResource.getResourceDefinition().getType();
    Request request=subResource.createRequest();
    Set<Resource> providerResourceSet=new HashSet<Resource>();
    for (    QueryResult queryResult : populatedQueryResults.values()) {
      for (      Resource resource : queryResult.getQueryResponse().getResources()) {
        Map<Resource.Type,String> map=getKeyValueMap(resource,queryResult.getKeyValueMap());
        Predicate queryPredicate=subResource.createPredicate(map,subResource.processedPredicate);
        Set<Resource> resourceSet=new LinkedHashSet<Resource>();
        try {
          Set<Resource> queryResources=subResource.doQuery(resourceType,request,queryPredicate,false).getResources();
          providerResourceSet.addAll(queryResources);
          resourceSet.addAll(queryResources);
        }
 catch (        NoSuchResourceException e) {
        }
catch (        AuthorizationException e) {
          LOG.debug("User does not have authorization to get {} resources. The data will not be added to the response.",resourceType.name());
        }
        subResource.queryResults.put(resource,new QueryResult(request,queryPredicate,subResourcePredicate,map,new QueryResponseImpl(resourceSet)));
        subResource.populatedQueryResults.put(resource,new QueryResult(request,queryPredicate,subResourcePredicate,map,new QueryResponseImpl(resourceSet)));
      }
    }
    if (renderer.requiresPropertyProviderInput()) {
      clusterController.populateResources(resourceType,providerResourceSet,request,subResourcePredicate);
    }
    subResource.queryForSubResources();
  }
}
