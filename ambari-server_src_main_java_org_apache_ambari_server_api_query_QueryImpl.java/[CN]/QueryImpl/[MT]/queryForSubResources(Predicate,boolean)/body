{
  for (  Map.Entry<String,QueryImpl> entry : querySubResourceSet.entrySet()) {
    QueryImpl subResource=entry.getValue();
    Resource.Type resourceType=subResource.getResourceDefinition().getType();
    Request request=subResource.createRequest(!minimal);
    Request qRequest=subResource.createRequest(true);
    Predicate subResourcePredicate=hasSubResourcePredicate ? getSubResourcePredicate(predicate,entry.getKey()) : null;
    Predicate processedPredicate=hasSubResourcePredicate ? subResource.processUserPredicate(subResourcePredicate) : null;
    Set<Resource> providerResourceSet=new HashSet<Resource>();
    for (    QueryResult queryResult : queryResults.values()) {
      for (      Resource resource : queryResult.getProviderResourceSet()) {
        Map<Resource.Type,String> map=getKeyValueMap(resource,queryResult.getKeyValueMap());
        Predicate queryPredicate=subResource.createPredicate(map,processedPredicate);
        Set<Resource> resourceSet=new LinkedHashSet<Resource>();
        try {
          for (          Resource queryResource : subResource.doQuery(resourceType,qRequest,queryPredicate)) {
            providerResourceSet.add(queryResource);
            resourceSet.add(queryResource);
          }
        }
 catch (        NoSuchResourceException e) {
        }
        subResource.queryResults.put(resource,new QueryResult(request,queryPredicate,subResourcePredicate,map,resourceSet));
      }
    }
    clusterController.populateResources(resourceType,providerResourceSet,qRequest,null);
    subResource.queryForSubResources(subResourcePredicate,hasSubResourcePredicate);
  }
}
