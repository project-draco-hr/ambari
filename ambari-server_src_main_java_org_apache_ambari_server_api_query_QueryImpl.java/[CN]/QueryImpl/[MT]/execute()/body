{
  Map<Resource,Collection<Resource>> resourceTree=new HashMap<Resource,Collection<Resource>>();
  Map<Resource,String> resourceNames=new HashMap<Resource,String>();
  Map<QueryImpl,Resource> nextLevel=new HashMap<QueryImpl,Resource>();
  nextLevel.put(this,null);
  while (!nextLevel.isEmpty()) {
    Map<QueryImpl,Resource> current=nextLevel;
    Map<Resource.Type,Set<Resource>> resourceMap=new HashMap<Resource.Type,Set<Resource>>();
    Map<Resource.Type,Predicate> predicateMap=new HashMap<Resource.Type,Predicate>();
    Map<Resource.Type,Request> requestMap=new HashMap<Resource.Type,Request>();
    for (    QueryImpl query : current.keySet()) {
      Resource.Type type=query.getResourceType();
      if (!resourceMap.containsKey(type)) {
        resourceMap.put(type,new HashSet<Resource>());
        predicateMap.put(type,query.getPredicate());
        requestMap.put(type,query.createRequest());
      }
      resourceMap.get(type).addAll(query.getProviderResources());
    }
    getClusterController().populateResources(resourceMap,requestMap,predicateMap);
    nextLevel=new HashMap<QueryImpl,Resource>();
    for (    Map.Entry<QueryImpl,Resource> entry : current.entrySet()) {
      QueryImpl query=entry.getKey();
      Resource parent=entry.getValue();
      Map<QueryImpl,Resource> subQueries=query.getSubQueries();
      Collection<Resource> validResources=new ArrayList<Resource>();
      for (      Resource resource : query.getResourceIterable()) {
        validResources.add(resource);
      }
      resourceTree.put(parent,validResources);
      resourceNames.put(parent,query.getResultName());
      nextLevel.putAll(subQueries);
    }
  }
  Result result=createResult();
  populateResult(result,resourceTree,resourceNames,null,null);
  return result;
}
