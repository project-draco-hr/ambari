{
  Result result=createResult();
  if (m_resourceDefinition.getId() == null) {
    Schema schema=getClusterController().getSchema(m_resourceDefinition.getType());
    addProperty(schema.getKeyPropertyId(m_resourceDefinition.getType()));
    result.getResultTree().setProperty("isCollection","true");
  }
  if (m_mapQueryProperties.isEmpty() && m_mapSubResources.isEmpty()) {
    m_mapSubResources.putAll(m_resourceDefinition.getSubResources());
  }
  Predicate predicate=createPredicate(m_resourceDefinition);
  Iterable<Resource> iterResource=getClusterController().getResources(m_resourceDefinition.getType(),createRequest(),predicate);
  TreeNode<Resource> tree=result.getResultTree();
  int count=1;
  for (  Resource resource : iterResource) {
    TreeNode<Resource> node=tree.addChild(resource,resource.getType() + ":" + count++);
    for (    Map.Entry<String,ResourceDefinition> entry : m_mapSubResources.entrySet()) {
      String subResCategory=entry.getKey();
      ResourceDefinition r=entry.getValue();
      r.setParentId(m_resourceDefinition.getType(),(String)resource.getPropertyValue(getClusterController().getSchema(m_resourceDefinition.getType()).getKeyPropertyId(m_resourceDefinition.getType())));
      TreeNode<Resource> childResult=r.getQuery().execute().getResultTree();
      childResult.setName(subResCategory);
      childResult.setProperty("isCollection","false");
      node.addChild(childResult);
    }
  }
  return result;
}
