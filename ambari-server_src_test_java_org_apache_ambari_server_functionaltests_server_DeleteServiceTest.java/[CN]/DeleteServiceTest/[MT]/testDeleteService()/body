{
  String clusterName="c1";
  String serviceName="HDFS";
  ConnectionParams params=new ConnectionParams();
  params.setServerName("localhost");
  params.setServerApiPort(serverPort);
  params.setServerAgentPort(serverAgentPort);
  params.setUserName("admin");
  params.setPassword("admin");
  ClusterUtils clusterUtils=injector.getInstance(ClusterUtils.class);
  clusterUtils.createSampleCluster(params);
  JsonElement jsonResponse=RestApiUtils.executeRequest(new GetServiceWebRequest(params,clusterName,serviceName));
  assertTrue(!jsonResponse.isJsonNull());
  JsonObject jsonServiceInfoObj=jsonResponse.getAsJsonObject().get("ServiceInfo").getAsJsonObject();
  String cluster_name=jsonServiceInfoObj.get("cluster_name").getAsString();
  assertEquals(cluster_name,clusterName);
  String service_name=jsonServiceInfoObj.get("service_name").getAsString();
  assertEquals(service_name,serviceName);
  jsonResponse=RestApiUtils.executeRequest(new StopServiceWebRequest(params,clusterName,serviceName));
  ClusterServiceDAO clusterServiceDAO=injector.getInstance(ClusterServiceDAO.class);
  List<ClusterServiceEntity> clusterServiceEntities=clusterServiceDAO.findAll();
  assertEquals(clusterServiceEntities.size(),1);
  assertEquals(clusterServiceEntities.get(0).getServiceName(),serviceName);
  ClusterServiceEntity clusterServiceEntity=clusterServiceEntities.get(0);
  long clusterId=clusterServiceEntity.getClusterId();
  ServiceDesiredStateDAO serviceDesiredStateDAO=injector.getInstance(ServiceDesiredStateDAO.class);
  List<ServiceDesiredStateEntity> serviceDesiredStateEntities=serviceDesiredStateDAO.findAll();
  assertEquals(serviceDesiredStateEntities.size(),1);
  ServiceDesiredStateEntity serviceDesiredStateEntity=serviceDesiredStateEntities.get(0);
  assertEquals(serviceDesiredStateEntity.getServiceName(),serviceName);
  assertEquals(serviceDesiredStateEntity.getDesiredState(),State.INSTALLED);
  ServiceComponentDesiredStateDAO serviceComponentDesiredStateDAO=injector.getInstance(ServiceComponentDesiredStateDAO.class);
  List<ServiceComponentDesiredStateEntity> serviceComponentDesiredStateEntities=serviceComponentDesiredStateDAO.findAll();
  assertEquals(serviceComponentDesiredStateEntities.size(),3);
  for (  ServiceComponentDesiredStateEntity serviceComponentDesiredStateEntity : serviceComponentDesiredStateEntities) {
    assertEquals(serviceComponentDesiredStateEntity.getDesiredState(),State.INSTALLED);
  }
  HostComponentStateDAO hostComponentStateDAO=injector.getInstance(HostComponentStateDAO.class);
  List<HostComponentStateEntity> hostComponentStateEntities=hostComponentStateDAO.findAll();
  assertEquals(hostComponentStateEntities.size(),3);
  HostComponentDesiredStateDAO hostComponentDesiredStateDAO=injector.getInstance(HostComponentDesiredStateDAO.class);
  List<HostComponentDesiredStateEntity> hostComponentDesiredStateEntities=hostComponentDesiredStateDAO.findAll();
  assertEquals(hostComponentDesiredStateEntities.size(),3);
  jsonResponse=RestApiUtils.executeRequest(new DeleteServiceWebRequest(params,clusterName,serviceName));
  WebResponse webResponse=new GetServiceWebRequest(params,clusterName,serviceName).getResponse();
  assertEquals(webResponse.getStatusCode(),HttpStatus.SC_NOT_FOUND);
  clusterServiceEntity=clusterServiceDAO.findByClusterAndServiceNames(clusterName,serviceName);
  assertTrue(clusterServiceEntity == null);
  ServiceDesiredStateEntityPK serviceDesiredStateEntityPK=injector.getInstance(ServiceDesiredStateEntityPK.class);
  serviceDesiredStateEntityPK.setClusterId(clusterId);
  serviceDesiredStateEntityPK.setServiceName(serviceName);
  serviceDesiredStateEntity=serviceDesiredStateDAO.findByPK(serviceDesiredStateEntityPK);
  assertTrue(serviceDesiredStateEntity == null);
  ServiceComponentDesiredStateEntityPK serviceComponentDesiredStateEntityPK=injector.getInstance(ServiceComponentDesiredStateEntityPK.class);
  ServiceComponentDesiredStateEntity serviceComponentDesiredStateEntity=serviceComponentDesiredStateDAO.findByPK(serviceComponentDesiredStateEntityPK);
  assertTrue(serviceComponentDesiredStateEntity == null);
  hostComponentStateEntities=hostComponentStateDAO.findByService(serviceName);
  assertEquals(hostComponentStateEntities.size(),0);
  hostComponentDesiredStateEntities=hostComponentDesiredStateDAO.findAll();
  assertEquals(hostComponentDesiredStateEntities.size(),0);
}
