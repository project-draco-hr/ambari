{
  final Set<ControllerRequest> requests=new HashSet<ControllerRequest>();
  for (  Map<String,Object> propertyMap : getPropertyMaps(request.getProperties().iterator().next(),predicate)) {
    final ControllerRequest req=getRequest(propertyMap);
    requests.add(req);
  }
  Set<Resource> resources=new HashSet<Resource>();
  for (  final ControllerRequest controllerRequest : requests) {
    Resource resource=modifyResources(new Command<Resource>(){
      @Override public Resource invoke() throws AmbariException {
        Resource resource=null;
switch (ControllerType.getByName(controllerRequest.getName())) {
case LDAP:
          resource=new ResourceImpl(Resource.Type.Controller);
        Set<String> users=null;
      if (controllerRequest.getPropertyMap().containsKey(CONTROLLER_LDAP_SYNCED_USERS_PROPERTY_ID)) {
        final String userCsv=(String)controllerRequest.getPropertyMap().get(CONTROLLER_LDAP_SYNCED_USERS_PROPERTY_ID);
        if (!userCsv.trim().equals(ALL_ENTRIES)) {
          users=new HashSet<String>();
          for (          String user : userCsv.split(",")) {
            if (StringUtils.isNotEmpty(user)) {
              users.add(user.toLowerCase());
            }
          }
        }
      }
    Set<String> groups=null;
  if (controllerRequest.getPropertyMap().containsKey(CONTROLLER_LDAP_SYNCED_GROUPS_PROPERTY_ID)) {
    final String groupCsv=(String)controllerRequest.getPropertyMap().get(CONTROLLER_LDAP_SYNCED_GROUPS_PROPERTY_ID);
    if (!groupCsv.trim().equals(ALL_ENTRIES)) {
      groups=new HashSet<String>();
      for (      String group : groupCsv.split(",")) {
        if (StringUtils.isNotEmpty(group)) {
          groups.add(group.toLowerCase());
        }
      }
    }
  }
if (!getManagementController().isLdapSyncInProgress()) {
  LdapSyncRequest userRequest=users == null ? new LdapSyncRequest(LdapSyncSpecEntity.SyncType.ALL) : new LdapSyncRequest(LdapSyncSpecEntity.SyncType.SPECIFIC,users);
  LdapSyncRequest groupRequest=groups == null ? new LdapSyncRequest(LdapSyncSpecEntity.SyncType.ALL) : new LdapSyncRequest(LdapSyncSpecEntity.SyncType.SPECIFIC,groups);
  LdapBatchDto syncInfo=getManagementController().synchronizeLdapUsersAndGroups(userRequest,groupRequest);
  resource.setProperty("Sync/status","successful");
  resource.setProperty("Sync/summary/Users/created",syncInfo.getUsersToBeCreated().size());
  resource.setProperty("Sync/summary/Users/updated",syncInfo.getUsersToBecomeLdap().size());
  resource.setProperty("Sync/summary/Users/removed",syncInfo.getUsersToBeRemoved().size());
  resource.setProperty("Sync/summary/Groups/created",syncInfo.getGroupsToBeCreated().size());
  resource.setProperty("Sync/summary/Groups/updated",syncInfo.getGroupsToBecomeLdap().size());
  resource.setProperty("Sync/summary/Groups/removed",syncInfo.getGroupsToBeRemoved().size());
  resource.setProperty("Sync/summary/Memberships/created",syncInfo.getMembershipToAdd().size());
  resource.setProperty("Sync/summary/Memberships/removed",syncInfo.getMembershipToRemove().size());
}
 else {
  resource.setProperty("Sync/status","not started");
  resource.setProperty("Sync/summary","Another sync is already running");
}
break;
}
return resource;
}
}
);
resources.add(resource);
}
return getRequestStatus(null,resources);
}
