{
  final Set<ControllerRequest> requests=new HashSet<ControllerRequest>();
  for (  Map<String,Object> propertyMap : getPropertyMaps(request.getProperties().iterator().next(),predicate)) {
    final ControllerRequest req=getRequest(propertyMap);
    requests.add(req);
  }
  for (  final ControllerRequest controllerRequest : requests) {
    modifyResources(new Command<Void>(){
      @Override public Void invoke() throws AmbariException {
switch (ControllerType.getByName(controllerRequest.getName())) {
case LDAP:
          Set<String> users=new HashSet<String>();
        if (controllerRequest.getPropertyMap().containsKey(CONTROLLER_LDAP_SYNCED_USERS_PROPERTY_ID)) {
          final String userCsv=(String)controllerRequest.getPropertyMap().get(CONTROLLER_LDAP_SYNCED_USERS_PROPERTY_ID);
          for (          String user : userCsv.split(",")) {
            if (StringUtils.isNotEmpty(user)) {
              users.add(user.toLowerCase());
            }
          }
        }
      Set<String> groups=new HashSet<String>();
    if (controllerRequest.getPropertyMap().containsKey(CONTROLLER_LDAP_SYNCED_GROUPS_PROPERTY_ID)) {
      final String groupCsv=(String)controllerRequest.getPropertyMap().get(CONTROLLER_LDAP_SYNCED_GROUPS_PROPERTY_ID);
      for (      String group : groupCsv.split(",")) {
        if (StringUtils.isNotEmpty(group)) {
          groups.add(group.toLowerCase());
        }
      }
    }
  getManagementController().synchronizeLdapUsersAndGroups(users,groups);
break;
}
return null;
}
}
);
}
return getRequestStatus(null);
}
