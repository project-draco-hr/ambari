{
  final Set<ControllerRequest> requests=new HashSet<ControllerRequest>();
  if (predicate == null) {
    requests.add(getRequest(null));
  }
 else {
    for (    Map<String,Object> propertyMap : getPropertyMaps(predicate)) {
      requests.add(getRequest(propertyMap));
    }
  }
  Set<ControllerResponse> responses=getResources(new Command<Set<ControllerResponse>>(){
    @Override public Set<ControllerResponse> invoke() throws AmbariException {
      final Set<ControllerResponse> responses=new HashSet<ControllerResponse>();
      for (      ControllerRequest request : requests) {
        if (request.getName() == null) {
          responses.addAll(controllers.values());
        }
 else {
          if (controllers.containsKey(request.getName())) {
            responses.add(controllers.get(request.getName()));
          }
        }
      }
      return responses;
    }
  }
);
  Set<String> requestedIds=getRequestPropertyIds(request,predicate);
  Set<Resource> resources=new HashSet<Resource>();
  for (  ControllerResponse controllerResponse : responses) {
    ResourceImpl resource=new ResourceImpl(Resource.Type.Controller);
    setResourceProperty(resource,CONTROLLER_NAME_PROPERTY_ID,controllerResponse.getName(),requestedIds);
switch (ControllerType.getByName(controllerResponse.getName())) {
case LDAP:
      final boolean ldapConfigured=getManagementController().checkLdapConfigured();
    setResourceProperty(resource,CONTROLLER_LDAP_CONFIGURED_PROPERTY_ID,ldapConfigured,requestedIds);
  if (ldapConfigured) {
    try {
      final LdapSyncDto syncInfo=getManagementController().getLdapSyncInfo();
      final List<String> allUsers=new ArrayList<String>();
      final List<String> syncedUsers=new ArrayList<String>();
      for (      LdapUserDto user : syncInfo.getUsers()) {
        allUsers.add(user.getUserName());
        if (user.isSynced()) {
          syncedUsers.add(user.getUserName());
        }
      }
      setResourceProperty(resource,CONTROLLER_LDAP_USERS_PROPERTY_ID,allUsers,requestedIds);
      setResourceProperty(resource,CONTROLLER_LDAP_SYNCED_USERS_PROPERTY_ID,syncedUsers,requestedIds);
      final List<String> allGroups=new ArrayList<String>();
      final List<String> syncedGroups=new ArrayList<String>();
      for (      LdapGroupDto group : syncInfo.getGroups()) {
        allGroups.add(group.getGroupName());
        if (group.isSynced()) {
          syncedGroups.add(group.getGroupName());
        }
      }
      setResourceProperty(resource,CONTROLLER_LDAP_GROUPS_PROPERTY_ID,allGroups,requestedIds);
      setResourceProperty(resource,CONTROLLER_LDAP_SYNCED_GROUPS_PROPERTY_ID,syncedGroups,requestedIds);
    }
 catch (    AmbariException ex) {
      throw new SystemException("Can't retrieve data from external LDAP server",ex);
    }
  }
break;
}
resources.add(resource);
}
return resources;
}
