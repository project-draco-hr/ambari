{
  String template=URL_TEMPLATES.get(componentName);
  if (componentName.equals(COMPONENT_RESOURCEMANAGER)) {
    try {
      Cluster cluster=this.clusters.getCluster(clusterName);
      Map<String,String> yarnConfigProperties=cluster.getDesiredConfigByType(CONFIG_YARN_SITE).getProperties();
      Map<String,String> coreConfigProperties=cluster.getDesiredConfigByType(CONFIG_CORE_SITE).getProperties();
      String yarnHttpPolicy=yarnConfigProperties.get(PROPERTY_YARN_HTTP_POLICY);
      String hadoopSslEnabled=coreConfigProperties.get(PROPERTY_HADOOP_SSL_ENABLED);
      if ((yarnHttpPolicy != null && yarnHttpPolicy.equals(PROPERTY_YARN_HTTP_POLICY_VALUE_HTTPS_ONLY)) || hadoopSslEnabled != null && hadoopSslEnabled.equals(PROPERTY_HADOOP_SSL_ENABLED_VALUE_TRUE)) {
        template=template.replace("http","https");
      }
    }
 catch (    AmbariException e) {
      LOG.debug(String.format("Could not load cluster with name %s. %s",clusterName,e.getMessage()));
      throw new SystemException(String.format("Could not load cluster with name %s.",clusterName),e);
    }
  }
  return template;
}
