{
  HostGroup hostGroup=getHostGroup();
  Map<String,Map<String,Config>> groupConfigs=new HashMap<String,Map<String,Config>>();
  Stack stack=hostGroup.getStack();
  Configuration topologyHostGroupConfig=topologyContext.getClusterTopology().getHostGroupInfo().get(hostGroup.getName()).getConfiguration();
  handleGlobalsBackwardsCompability(stack,topologyHostGroupConfig.getProperties());
  for (  Map.Entry<String,Map<String,String>> entry : topologyHostGroupConfig.getProperties().entrySet()) {
    String type=entry.getKey();
    String service=stack.getServiceForConfigType(type);
    Config config=new ConfigImpl(type);
    config.setTag(hostGroup.getName());
    config.setProperties(entry.getValue());
    Map<String,Config> serviceConfigs=groupConfigs.get(service);
    if (serviceConfigs == null) {
      serviceConfigs=new HashMap<String,Config>();
      groupConfigs.put(service,serviceConfigs);
    }
    serviceConfigs.put(type,config);
  }
  String bpName=topologyContext.getClusterTopology().getBlueprint().getName();
  for (  Map.Entry<String,Map<String,Config>> entry : groupConfigs.entrySet()) {
    String service=entry.getKey();
    Map<String,Config> serviceConfigs=entry.getValue();
    String absoluteGroupName=getConfigurationGroupName(bpName,hostGroup.getName());
    Collection<String> groupHosts;
    groupHosts=topologyContext.getClusterTopology().getHostGroupInfo().get(hostgroupName).getHostNames();
    ConfigGroupRequest request=new ConfigGroupRequest(null,getClusterName(),absoluteGroupName,service,"Host Group Configuration",new HashSet<String>(groupHosts),serviceConfigs);
    ConfigGroupResourceProvider configGroupProvider=(ConfigGroupResourceProvider)ClusterControllerHelper.getClusterController().ensureResourceProvider(Resource.Type.ConfigGroup);
    configGroupProvider.createResources(Collections.singleton(request));
  }
}
