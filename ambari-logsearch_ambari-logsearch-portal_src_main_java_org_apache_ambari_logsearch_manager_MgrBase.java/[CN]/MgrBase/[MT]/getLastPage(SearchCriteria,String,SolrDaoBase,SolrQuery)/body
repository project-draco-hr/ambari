{
  Integer maxRows=searchCriteria.getMaxRows();
  String givenSortType=searchCriteria.getSortType();
  searchCriteria=new SearchCriteria();
  searchCriteria.setSortBy(logTimeField);
  if (givenSortType == null || givenSortType.equals(LogSearchConstants.DESCENDING_ORDER)) {
    lastPageQuery.removeSort(LogSearchConstants.LOGTIME);
    searchCriteria.setSortType(LogSearchConstants.ASCENDING_ORDER);
  }
 else {
    searchCriteria.setSortType(LogSearchConstants.DESCENDING_ORDER);
  }
  queryGenerator.setSingleSortOrder(lastPageQuery,searchCriteria);
  Long totalLogs=0l;
  int startIndex=0;
  int numberOfLogsOnLastPage=0;
  VSolrLogList collection=null;
  try {
    queryGenerator.setStart(lastPageQuery,0);
    queryGenerator.setRowCount(lastPageQuery,maxRows);
    collection=getLogAsPaginationProvided(lastPageQuery,solrDoaBase);
    totalLogs=countQuery(lastPageQuery,solrDoaBase);
    if (maxRows != null) {
      startIndex=Integer.parseInt("" + ((totalLogs / maxRows) * maxRows));
      numberOfLogsOnLastPage=Integer.parseInt("" + (totalLogs - startIndex));
    }
    collection.setStartIndex(startIndex);
    collection.setTotalCount(totalLogs);
    collection.setPageSize(maxRows);
    SolrDocumentList docList=collection.getList();
    SolrDocumentList lastPageDocList=new SolrDocumentList();
    collection.setSolrDocuments(lastPageDocList);
    int cnt=0;
    for (    SolrDocument doc : docList) {
      if (cnt < numberOfLogsOnLastPage) {
        lastPageDocList.add(doc);
      }
      cnt++;
    }
    Collections.reverse(lastPageDocList);
  }
 catch (  SolrException|SolrServerException|IOException|NumberFormatException e) {
    logger.error("Count Query was not executed successfully",e);
    throw restErrorUtil.createRESTException(MessageEnums.SOLR_ERROR.getMessage().getMessage(),MessageEnums.ERROR_SYSTEM);
  }
  return collection;
}
