{
  ClassLoader currentClassLoader=Thread.currentThread().getContextClassLoader();
  Thread.currentThread().setContextClassLoader(getClass().getClassLoader());
  try {
    boolean securityEnabled=Boolean.valueOf(getViewParameterValue(PROPERTY_SLIDER_SECURITY_ENABLED));
    UserGroupInformation sliderUser;
    if (securityEnabled) {
      String viewPrincipal=getViewParameterValue(PARAM_VIEW_PRINCIPAL);
      String viewPrincipalKeytab=getViewParameterValue(PARAM_VIEW_PRINCIPAL_KEYTAB);
      UserGroupInformation ambariUser=UserGroupInformation.loginUserFromKeytabAndReturnUGI(viewPrincipal,viewPrincipalKeytab);
      sliderUser=UserGroupInformation.createProxyUser(getUserToRunAs(),ambariUser);
    }
 else {
      sliderUser=UserGroupInformation.getBestUGI(null,getUserToRunAs());
    }
    try {
      T value=sliderUser.doAs(new PrivilegedExceptionAction<T>(){
        @Override public T run() throws Exception {
          final SliderClient sliderClient=createSliderClient();
          try {
            return runnable.run(sliderClient);
          }
  finally {
            destroySliderClient(sliderClient);
          }
        }
      }
);
      return value;
    }
 catch (    UndeclaredThrowableException e) {
      Throwable cause=e.getCause();
      if (cause instanceof YarnException) {
        YarnException ye=(YarnException)cause;
        throw ye;
      }
      throw e;
    }
  }
  finally {
    Thread.currentThread().setContextClassLoader(currentClassLoader);
  }
}
