{
  ViewStatus status=new ViewStatus();
  Map<String,String> newHadoopConfigs=new HashMap<String,String>();
  status.setVersion(SliderAppsConfiguration.INSTANCE.getVersion());
  String ambariCluster=getViewParameterValue(PARAM_AMBARI_CLUSTER_API);
  String ambariUsername=getViewParameterValue(PARAM_AMBARI_USERNAME);
  String ambariPassword=getViewParameterValue(PARAM_AMBARI_PASSWORD);
  if (ambariCluster != null && ambariUsername != null && ambariPassword != null && ambariCluster.trim().length() > 0 && ambariUsername.trim().length() > 0 && ambariPassword.trim().length() > 0) {
    String APIPREFIX="/api/v1/clusters/";
    int index=ambariCluster.indexOf(APIPREFIX);
    if (index > 0) {
      String ambariUrl=ambariCluster.substring(0,index);
      String clusterName=ambariCluster.substring(index + APIPREFIX.length());
      if (clusterName.endsWith("/")) {
        clusterName=clusterName.substring(0,clusterName.length() - 1);
      }
      AmbariHttpClient ambariClient=new AmbariHttpClient(ambariUrl,ambariUsername,ambariPassword,viewContext);
      try {
        AmbariClusterInfo clusterInfo=ambariClient.getClusterInfo();
        if (clusterInfo != null && clusterName.equals(clusterInfo.getName())) {
          AmbariCluster cluster=ambariClient.getCluster(clusterInfo);
          AmbariServiceInfo hdfsServiceInfo=null;
          AmbariServiceInfo yarnServiceInfo=null;
          Validation validateStackVersion=validateStackVersion(clusterInfo.getVersion());
          if (validateStackVersion != null) {
            status.getValidations().add(validateStackVersion);
          }
          for (          AmbariServiceInfo svc : cluster.getServices()) {
            if ("HDFS".equals(svc.getId())) {
              hdfsServiceInfo=svc;
            }
 else             if ("YARN".equals(svc.getId())) {
              yarnServiceInfo=svc;
            }
          }
          if (hdfsServiceInfo != null) {
            if (!hdfsServiceInfo.isStarted()) {
              status.getValidations().add(new ViewStatus.Validation("HDFS service is not started"));
            }
          }
 else {
            status.getValidations().add(new ViewStatus.Validation("HDFS service is not installed"));
          }
          if (yarnServiceInfo != null) {
            if (!yarnServiceInfo.isStarted()) {
              status.getValidations().add(new ViewStatus.Validation("YARN service is not started"));
            }
          }
 else {
            status.getValidations().add(new ViewStatus.Validation("YARN service is not installed"));
          }
          Map<String,String> ambariServerConfigs=ambariClient.getAmbariServerConfigs();
          if (ambariServerConfigs.containsKey("java.home")) {
            newHadoopConfigs.put("java.home",ambariServerConfigs.get("java.home"));
            status.getParameters().put(PROPERTY_JAVA_HOME,ambariServerConfigs.get("java.home"));
          }
          if (cluster.getDesiredConfigs().containsKey("core-site")) {
            Map<String,String> coreSiteConfigs=ambariClient.getConfiguration(cluster,"core-site",cluster.getDesiredConfigs().get("core-site"));
            newHadoopConfigs.putAll(coreSiteConfigs);
          }
          if (cluster.getDesiredConfigs().containsKey("cluster-env")) {
            Map<String,String> clusterEnvConfigs=ambariClient.getConfiguration(cluster,"cluster-env",cluster.getDesiredConfigs().get("cluster-env"));
            newHadoopConfigs.put("security_enabled",clusterEnvConfigs.get("security_enabled"));
          }
          if (cluster.getDesiredConfigs().containsKey("hdfs-site")) {
            Map<String,String> hdfsSiteConfigs=ambariClient.getConfiguration(cluster,"hdfs-site",cluster.getDesiredConfigs().get("hdfs-site"));
            newHadoopConfigs.putAll(hdfsSiteConfigs);
          }
          if (cluster.getDesiredConfigs().containsKey("yarn-site")) {
            Map<String,String> yarnSiteConfigs=ambariClient.getConfiguration(cluster,"yarn-site",cluster.getDesiredConfigs().get("yarn-site"));
            newHadoopConfigs.putAll(yarnSiteConfigs);
            status.getParameters().put(PROPERTY_YARN_RM_WEBAPP_URL,newHadoopConfigs.get("yarn.resourcemanager.webapp.address"));
          }
          if (cluster.getDesiredConfigs().containsKey("yarn-env")) {
            Map<String,String> yarnEnvConfigs=ambariClient.getConfiguration(cluster,"yarn-env",cluster.getDesiredConfigs().get("yarn-env"));
            String yarnUser=yarnEnvConfigs.get("yarn_user");
            if (yarnUser == null || yarnUser.trim().length() < 1) {
              yarnUser="yarn";
            }
            newHadoopConfigs.put("yarn_user",yarnUser);
          }
          newHadoopConfigs.put("slider.user",getUserToRunAs(newHadoopConfigs));
          status.getParameters().put(PROPERTY_SLIDER_USER,newHadoopConfigs.get("slider.user"));
          if (newHadoopConfigs.containsKey("security_enabled")) {
            boolean securityEnabled=Boolean.valueOf(newHadoopConfigs.get("security_enabled"));
            if (securityEnabled) {
              String yarnUser=newHadoopConfigs.get("yarn_user");
              if (yarnUser != null && yarnUser.equals(newHadoopConfigs.get("slider.user"))) {
                status.getValidations().add(new ViewStatus.Validation("Slider view does not support accessing secured YARN cluster as YARN superuser (" + yarnUser + ")"));
              }
            }
          }
          if (cluster.getDesiredConfigs().containsKey("zoo.cfg")) {
            Map<String,String> zkEnvConfigs=ambariClient.getConfiguration(cluster,"zoo.cfg",cluster.getDesiredConfigs().get("zoo.cfg"));
            StringBuilder zkQuorumBuilder=new StringBuilder();
            String port=zkEnvConfigs.get("clientPort");
            AmbariService zkService=ambariClient.getService(cluster,"ZOOKEEPER");
            if (zkService != null) {
              List<AmbariHostComponent> hostsList=zkService.getComponentsToHostComponentsMap().get("ZOOKEEPER_SERVER");
              int count=1;
              for (              AmbariHostComponent host : hostsList) {
                zkQuorumBuilder.append(host.getHostName() + ":" + port);
                if (count++ < hostsList.size()) {
                  zkQuorumBuilder.append(",");
                }
              }
              newHadoopConfigs.put(PROPERTY_SLIDER_ZK_QUORUM,zkQuorumBuilder.toString());
            }
 else {
              status.getValidations().add(new ViewStatus.Validation("ZooKeeper service is not installed"));
            }
          }
 else {
            status.getValidations().add(new ViewStatus.Validation("ZooKeeper service is not installed"));
          }
          if (cluster.getDesiredConfigs().containsKey("ams-site")) {
            Map<String,String> amsConfigs=ambariClient.getConfiguration(cluster,"ams-site",cluster.getDesiredConfigs().get("ams-site"));
            AmbariService amsService=ambariClient.getService(cluster,"AMBARI_METRICS");
            List<AmbariHostComponent> hostsList=amsService.getComponentsToHostComponentsMap().get("METRICS_COLLECTOR");
            if (hostsList != null && hostsList.size() > 0) {
              String collectorHostName=hostsList.get(0).getHostName();
              newHadoopConfigs.put(PROPERTY_METRICS_SERVER_HOSTNAME,collectorHostName);
              status.getParameters().put(PROPERTY_METRICS_SERVER_HOSTNAME,collectorHostName);
            }
            if (amsConfigs != null && amsConfigs.containsKey("timeline.metrics.service.webapp.address")) {
              String portString=amsConfigs.get("timeline.metrics.service.webapp.address");
              int sepIndex=portString.indexOf(':');
              if (sepIndex > -1) {
                portString=portString.substring(sepIndex + 1);
              }
              newHadoopConfigs.put(PROPERTY_METRICS_SERVER_PORT,portString);
              status.getParameters().put(PROPERTY_METRICS_SERVER_PORT,portString);
            }
            newHadoopConfigs.put(PROPERTY_METRICS_LIBRARY_PATH,"file:///usr/lib/ambari-metrics-hadoop-sink/ambari-metrics-hadoop-sink.jar");
            status.getParameters().put(PROPERTY_METRICS_LIBRARY_PATH,"file:///usr/lib/ambari-metrics-hadoop-sink/ambari-metrics-hadoop-sink.jar");
          }
          Validation validateHDFSAccess=validateHDFSAccess(newHadoopConfigs,hdfsServiceInfo);
          if (validateHDFSAccess != null) {
            status.getValidations().add(validateHDFSAccess);
          }
        }
 else {
          status.getValidations().add(new ViewStatus.Validation("Ambari cluster with ID [" + clusterName + "] was not found on Ambari server"));
        }
      }
 catch (      Throwable e) {
        logger.error("Exception determining view status",e);
        String message=e.getClass().getName() + ": " + e.getMessage();
        if (e instanceof RuntimeException && e.getCause() != null) {
          message=e.getCause().getClass().getName() + ": " + e.getMessage();
        }
        message=String.format("Unable to initialize Slider view: %s",message);
        status.getValidations().add(new ViewStatus.Validation(message));
      }
    }
 else {
      status.getValidations().add(new ViewStatus.Validation("Ambari server cluster API URL should include cluster name, for example http://ambari.server:8080/api/v1/clusters/c1"));
    }
  }
 else {
    status.getValidations().add(new ViewStatus.Validation("View parameters specifying Ambari details required"));
  }
synchronized (viewContext) {
    if (!newHadoopConfigs.equals(viewContext.getInstanceData())) {
      Set<String> removeKeys=new HashSet<String>(viewContext.getInstanceData().keySet());
      for (      Entry<String,String> e : newHadoopConfigs.entrySet()) {
        viewContext.putInstanceData(e.getKey(),e.getValue());
        removeKeys.remove(e.getKey());
      }
      for (      String key : removeKeys) {
        viewContext.removeInstanceData(key);
      }
    }
  }
  return status;
}
