{
  if (yarnApp == null) {
    return null;
  }
  SliderApp app=new SliderApp();
  app.setState(yarnApp.getYarnApplicationState().name());
  if (YarnApplicationState.FINISHED.equals(yarnApp.getYarnApplicationState())) {
    try {
      if (sliderClient.actionExists(yarnApp.getName(),false) == LauncherExitCodes.EXIT_SUCCESS) {
        app.setState(SliderApp.STATE_FROZEN);
      }
    }
 catch (    UnknownApplicationInstanceException e) {
      return null;
    }
catch (    YarnException e) {
      logger.warn("Unable to determine frozen state for " + yarnApp.getName(),e);
      return null;
    }
catch (    IOException e) {
      logger.warn("Unable to determine frozen state for " + yarnApp.getName(),e);
      return null;
    }
  }
  app.setId(getApplicationIdString(yarnApp.getApplicationId()));
  app.setName(yarnApp.getName());
  app.setUser(yarnApp.getUser());
  app.setDiagnostics(yarnApp.getDiagnostics());
  app.setYarnId(yarnApp.getApplicationId().toString());
  app.setStartTime(yarnApp.getStartTime());
  app.setEndTime(yarnApp.getFinishTime());
  Set<String> applicationTags=yarnApp.getApplicationTags();
  if (applicationTags != null && applicationTags.size() > 0) {
    for (    String tag : applicationTags) {
      int index=tag.indexOf(':');
      if (index > 0 && index < tag.length() - 1) {
        String key=tag.substring(0,index).trim();
        String value=tag.substring(index + 1).trim();
        if ("name".equals(key)) {
          app.setType(value);
        }
 else         if ("version".equals(key)) {
          app.setAppVersion(value);
        }
 else         if ("description".equals(key)) {
          app.setDescription(value);
        }
      }
    }
  }
  if (properties != null && !properties.isEmpty()) {
    SliderAppType matchedAppType=null;
    List<SliderAppType> matchingAppTypes=getSliderAppTypes(null);
    if (matchingAppTypes != null && matchingAppTypes.size() > 0) {
      for (      SliderAppType appType : matchingAppTypes) {
        if ((appType.getTypeName() != null && appType.getTypeName().equalsIgnoreCase(app.getType())) && (appType.getTypeVersion() != null && appType.getTypeVersion().equalsIgnoreCase(app.getAppVersion()))) {
          matchedAppType=appType;
          break;
        }
      }
    }
    SliderAppMasterClient sliderAppClient=yarnApp.getTrackingUrl() == null ? null : new SliderAppMasterClient(yarnApp.getTrackingUrl());
    SliderAppMasterData appMasterData=null;
    Map<String,String> quickLinks=new HashMap<String,String>();
    Set<String> gangliaMetrics=new HashSet<String>();
    for (    String property : properties) {
      if ("RUNNING".equals(app.getState())) {
        if (sliderAppClient != null) {
          if (appMasterData == null) {
            appMasterData=sliderAppClient.getAppMasterData();
          }
          if (appMasterData != null && "urls".equals(property.toLowerCase())) {
            if (quickLinks.isEmpty()) {
              quickLinks=sliderAppClient.getQuickLinks(appMasterData.publisherUrl);
            }
            app.setUrls(quickLinks);
          }
 else           if (appMasterData != null && "configs".equals(property.toLowerCase())) {
            Map<String,Map<String,String>> configs=sliderAppClient.getConfigs(appMasterData.publisherUrl);
            app.setConfigs(configs);
          }
 else           if (appMasterData != null && "jmx".equals(property.toLowerCase())) {
            if (quickLinks.isEmpty()) {
              quickLinks=sliderAppClient.getQuickLinks(appMasterData.publisherUrl);
            }
            if (quickLinks != null && quickLinks.containsKey("JMX")) {
              String jmxUrl=quickLinks.get("JMX");
              if (matchedAppType != null) {
                MetricsHolder metricsHolder=appMetrics.get(matchedAppType.uniqueName());
                app.setJmx(sliderAppClient.getJmx(jmxUrl,viewContext,matchedAppType,metricsHolder));
              }
            }
            Map<String,Map<String,String>> configs=sliderAppClient.getConfigs(appMasterData.publisherUrl);
            app.setConfigs(configs);
          }
 else           if ("components".equals(property.toLowerCase())) {
            try {
              ClusterDescription description=sliderClient.getClusterDescription(yarnApp.getName());
              if (description != null && description.status != null && !description.status.isEmpty()) {
                Map<String,SliderAppComponent> componentTypeMap=new HashMap<String,SliderAppComponent>();
                for (                Entry<String,Object> e : description.status.entrySet()) {
                  @SuppressWarnings("unchecked") Map<String,Map<String,Map<String,Object>>> componentsObj=(Map<String,Map<String,Map<String,Object>>>)e.getValue();
                  boolean isLive="live".equals(e.getKey());
                  for (                  Entry<String,Map<String,Map<String,Object>>> componentEntry : componentsObj.entrySet()) {
                    SliderAppComponent appComponent=componentTypeMap.get(componentEntry.getKey());
                    if (appComponent == null) {
                      appComponent=new SliderAppComponent();
                      appComponent.setComponentName(componentEntry.getKey());
                      appComponent.setActiveContainers(new HashMap<String,Map<String,String>>());
                      appComponent.setCompletedContainers(new HashMap<String,Map<String,String>>());
                      componentTypeMap.put(componentEntry.getKey(),appComponent);
                    }
                    for (                    Entry<String,Map<String,Object>> containerEntry : componentEntry.getValue().entrySet()) {
                      Map<String,String> containerDataMap=new HashMap<String,String>();
                      String containerId=containerEntry.getKey();
                      Map<String,Object> containerValues=containerEntry.getValue();
                      for (                      String containerProperty : containerValues.keySet()) {
                        Object containerPropertyValue=containerValues.get(containerProperty);
                        containerDataMap.put(containerProperty,containerPropertyValue.toString());
                      }
                      if (isLive) {
                        appComponent.getActiveContainers().put(containerId,containerDataMap);
                      }
 else {
                        appComponent.getCompletedContainers().put(containerId,containerDataMap);
                      }
                    }
                    appComponent.setInstanceCount(appComponent.getActiveContainers().size() + appComponent.getCompletedContainers().size());
                    if (description.statistics != null && description.statistics.containsKey(componentEntry.getKey())) {
                      Map<String,Integer> statisticsMap=description.statistics.get(componentEntry.getKey());
                      if (statisticsMap.containsKey("containers.desired")) {
                        appComponent.setInstanceCount(statisticsMap.get("containers.desired"));
                      }
                    }
                  }
                }
                app.setAlerts(sliderAlerts.generateComponentsAlerts(componentTypeMap,app.getType()));
                app.setComponents(componentTypeMap);
              }
            }
 catch (            UnknownApplicationInstanceException e) {
              logger.warn("Unable to determine app components for " + yarnApp.getName(),e);
            }
catch (            YarnException e) {
              logger.warn("Unable to determine app components for " + yarnApp.getName(),e);
              throw new RuntimeException(e.getMessage(),e);
            }
catch (            IOException e) {
              logger.warn("Unable to determine app components for " + yarnApp.getName(),e);
              throw new RuntimeException(e.getMessage(),e);
            }
          }
 else           if (property.startsWith(METRICS_PREFIX)) {
            gangliaMetrics.add(property.substring(METRICS_PREFIX.length()));
          }
 else           if ("supportedMetrics".equals(property)) {
            if (matchedAppType != null) {
              app.setSupportedMetrics(matchedAppType.getSupportedMetrics());
            }
          }
        }
      }
    }
    if (gangliaMetrics.size() > 0) {
      if (quickLinks.isEmpty()) {
        quickLinks=sliderAppClient.getQuickLinks(appMasterData.publisherUrl);
      }
      if (quickLinks != null && quickLinks.containsKey(METRICS_API_NAME)) {
        String metricsUrl=quickLinks.get(METRICS_API_NAME);
        MetricsHolder metricsHolder=appMetrics.get(matchedAppType.uniqueName());
        app.setMetrics(sliderAppClient.getGangliaMetrics(metricsUrl,gangliaMetrics,null,viewContext,matchedAppType,metricsHolder));
      }
    }
  }
  return app;
}
