{
  ClassLoader currentClassLoader=Thread.currentThread().getContextClassLoader();
  Thread.currentThread().setContextClassLoader(getClass().getClassLoader());
  try {
    boolean securityEnabled=Boolean.valueOf(hadoopConfigs.get("security_enabled"));
    final HdfsConfiguration hdfsConfiguration=new HdfsConfiguration();
    for (    Entry<String,String> entry : hadoopConfigs.entrySet()) {
      hdfsConfiguration.set(entry.getKey(),entry.getValue());
    }
    UserGroupInformation.setConfiguration(hdfsConfiguration);
    UserGroupInformation sliderUser;
    String loggedInUser=getUserToRunAs(hadoopConfigs);
    if (securityEnabled) {
      String viewPrincipal=getViewParameterValue(PARAM_VIEW_PRINCIPAL);
      String viewPrincipalKeytab=getViewParameterValue(PARAM_VIEW_PRINCIPAL_KEYTAB);
      UserGroupInformation ambariUser=UserGroupInformation.loginUserFromKeytabAndReturnUGI(viewPrincipal,viewPrincipalKeytab);
      if (loggedInUser.equals(ambariUser.getShortUserName())) {
        sliderUser=ambariUser;
      }
 else {
        sliderUser=UserGroupInformation.createProxyUser(loggedInUser,ambariUser);
      }
    }
 else {
      sliderUser=UserGroupInformation.getBestUGI(null,loggedInUser);
    }
    try {
      T value=sliderUser.doAs(new PrivilegedExceptionAction<T>(){
        @Override public T run() throws Exception {
          String fsPath=hadoopConfigs.get("fs.defaultFS");
          FileSystem fs=FileSystem.get(URI.create(fsPath),hdfsConfiguration);
          try {
            return runnable.run(fs);
          }
  finally {
            fs.close();
          }
        }
      }
);
      return value;
    }
 catch (    UndeclaredThrowableException e) {
      throw e;
    }
  }
  finally {
    Thread.currentThread().setContextClassLoader(currentClassLoader);
  }
}
