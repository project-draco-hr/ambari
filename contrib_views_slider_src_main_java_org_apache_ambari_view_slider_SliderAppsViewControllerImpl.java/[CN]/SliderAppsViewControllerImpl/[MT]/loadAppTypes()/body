{
  List<SliderAppType> appTypes=null;
  String appsFolderPath=getAppsFolderPath();
  File appsFolder=new File(appsFolderPath);
  if (appsFolder.exists()) {
    File[] appZips=appsFolder.listFiles((FilenameFilter)new RegexFileFilter("^.*\\.zip$"));
    if (appZips != null) {
      appTypes=new ArrayList<SliderAppType>();
      for (      File appZip : appZips) {
        try {
          ZipFile zipFile=new ZipFile(appZip);
          Metainfo metainfo=new MetainfoParser().parse(zipFile.getInputStream(zipFile.getEntry("metainfo.xml")));
          if (metainfo.getApplication() != null) {
            Application application=metainfo.getApplication();
            String appConfigJsonString=IOUtils.toString(zipFile.getInputStream(zipFile.getEntry("appConfig.json")),"UTF-8");
            String resourcesJsonString=IOUtils.toString(zipFile.getInputStream(zipFile.getEntry("resources.json")),"UTF-8");
            JsonElement appConfigJson=new JsonParser().parse(appConfigJsonString);
            JsonElement resourcesJson=new JsonParser().parse(resourcesJsonString);
            SliderAppType appType=new SliderAppType();
            appType.setId(application.getName());
            appType.setTypeName(application.getName());
            appType.setTypeDescription(application.getComment());
            appType.setTypeVersion(application.getVersion());
            appType.setTypePackageFileName(appZip.getName());
            Map<String,String> configsMap=new HashMap<String,String>();
            JsonObject appTypeGlobalJson=appConfigJson.getAsJsonObject().get("global").getAsJsonObject();
            for (            Entry<String,JsonElement> e : appTypeGlobalJson.entrySet()) {
              configsMap.put(e.getKey(),e.getValue().getAsString());
            }
            appType.setTypeConfigs(configsMap);
            ArrayList<SliderAppTypeComponent> appTypeComponentList=new ArrayList<SliderAppTypeComponent>();
            for (            Component component : application.getComponents()) {
              if ("CLIENT".equals(component.getCategory())) {
                continue;
              }
              SliderAppTypeComponent appTypeComponent=new SliderAppTypeComponent();
              appTypeComponent.setDisplayName(component.getName());
              appTypeComponent.setId(component.getName());
              appTypeComponent.setName(component.getName());
              appTypeComponent.setYarnMemory(1024);
              appTypeComponent.setYarnCpuCores(1);
              if (component.getMinInstanceCount() != null) {
                appTypeComponent.setInstanceCount(Integer.parseInt(component.getMinInstanceCount()));
              }
              if (component.getMaxInstanceCount() != null) {
                appTypeComponent.setMaxInstanceCount(Integer.parseInt(component.getMaxInstanceCount()));
              }
              if (resourcesJson != null) {
                JsonElement componentJson=resourcesJson.getAsJsonObject().get("components").getAsJsonObject().get(component.getName());
                if (componentJson != null && componentJson.getAsJsonObject().has("yarn.role.priority")) {
                  appTypeComponent.setPriority(Integer.parseInt(componentJson.getAsJsonObject().get("yarn.role.priority").getAsString()));
                }
              }
              appTypeComponent.setCategory(component.getCategory());
              appTypeComponentList.add(appTypeComponent);
            }
            appType.setJmxMetrics(readMetrics(zipFile,"jmx_metrics.json"));
            appType.setGangliaMetrics(readMetrics(zipFile,"ganglia_metrics.json"));
            appType.setTypeComponents(appTypeComponentList);
            appTypes.add(appType);
          }
        }
 catch (        ZipException e) {
          logger.warn("Unable to parse app " + appZip.getAbsolutePath(),e);
        }
catch (        IOException e) {
          logger.warn("Unable to parse app " + appZip.getAbsolutePath(),e);
        }
      }
    }
  }
  return appTypes;
}
