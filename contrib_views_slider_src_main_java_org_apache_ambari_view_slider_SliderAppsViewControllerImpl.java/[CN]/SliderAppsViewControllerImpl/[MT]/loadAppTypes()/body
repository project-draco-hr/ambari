{
  List<SliderAppType> appTypes=null;
  String appsFolderPath=getAppsFolderPath();
  File appsFolder=new File(appsFolderPath);
  if (appsFolder.exists()) {
    File[] appZips=appsFolder.listFiles((FilenameFilter)new RegexFileFilter("^.*\\.zip$"));
    if (appZips != null) {
      appTypes=new ArrayList<SliderAppType>();
      for (      File appZip : appZips) {
        try {
          ZipFile zipFile=new ZipFile(appZip);
          Metainfo metainfo=new MetainfoParser().parse(zipFile.getInputStream(zipFile.getEntry("metainfo.xml")));
          if (metainfo.getApplication() != null) {
            Application application=metainfo.getApplication();
            ZipArchiveEntry appConfigZipEntry=zipFile.getEntry("appConfig-default.json");
            ZipArchiveEntry appConfigSecuredZipEntry=zipFile.getEntry("appConfig-secured-default.json");
            if (appConfigZipEntry == null) {
              throw new IllegalStateException("Slider App package '" + appZip.getName() + "' does not contain 'appConfig-default.json' file");
            }
            ZipArchiveEntry resourcesZipEntry=zipFile.getEntry("resources-default.json");
            ZipArchiveEntry resourcesSecuredZipEntry=zipFile.getEntry("resources-secured-default.json");
            if (resourcesZipEntry == null) {
              throw new IllegalStateException("Slider App package '" + appZip.getName() + "' does not contain 'resources-default.json' file");
            }
            SliderAppType appType=new SliderAppType();
            appType.setId(application.getName() + "-" + application.getVersion());
            appType.setTypeName(application.getName());
            appType.setTypeDescription(application.getComment());
            appType.setTypeVersion(application.getVersion());
            appType.setTypePackageFileName(appZip.getName());
            appType.typeConfigsUnsecured=parseAppTypeConfigs(zipFile,appConfigZipEntry,appZip.getName(),application.getName());
            if (appConfigSecuredZipEntry != null) {
              appType.typeConfigsSecured=parseAppTypeConfigs(zipFile,appConfigSecuredZipEntry,appZip.getName(),application.getName());
            }
            appType.resourcesUnsecured=parseAppTypeResources(zipFile,resourcesZipEntry);
            if (resourcesSecuredZipEntry != null) {
              appType.resourcesSecured=parseAppTypeResources(zipFile,resourcesSecuredZipEntry);
            }
            ArrayList<SliderAppTypeComponent> appTypeComponentList=new ArrayList<SliderAppTypeComponent>();
            for (            Component component : application.getComponents()) {
              if ("CLIENT".equals(component.getCategory())) {
                continue;
              }
              SliderAppTypeComponent appTypeComponent=new SliderAppTypeComponent();
              appTypeComponent.setDisplayName(component.getName());
              appTypeComponent.setId(component.getName());
              appTypeComponent.setName(component.getName());
              appTypeComponent.setYarnMemory(1024);
              appTypeComponent.setYarnCpuCores(1);
              appTypeComponent.setInstanceCount(1);
              if (component.getMinInstanceCount() != null) {
                appTypeComponent.setInstanceCount(Integer.parseInt(component.getMinInstanceCount()));
              }
              if (component.getMaxInstanceCount() != null) {
                appTypeComponent.setMaxInstanceCount(Integer.parseInt(component.getMaxInstanceCount()));
              }
              appTypeComponent.setCategory(component.getCategory());
              appTypeComponentList.add(appTypeComponent);
            }
            MetricsHolder metricsHolder=new MetricsHolder();
            metricsHolder.setJmxMetrics(readMetrics(zipFile,"jmx_metrics.json"));
            metricsHolder.setTimelineMetrics(readMetrics(zipFile,"timeline_metrics.json"));
            appType.setSupportedMetrics(getSupportedMetrics(metricsHolder.getTimelineMetrics()));
            appMetrics.put(appType.uniqueName(),metricsHolder);
            appType.setTypeComponents(appTypeComponentList);
            appTypes.add(appType);
          }
        }
 catch (        ZipException e) {
          logger.warn("Unable to parse Slider App package " + appZip.getAbsolutePath(),e);
        }
catch (        IOException e) {
          logger.warn("Unable to parse Slider App package " + appZip.getAbsolutePath(),e);
        }
catch (        Throwable e) {
          logger.warn("Unable to parse Slider App package " + appZip.getAbsolutePath(),e);
        }
      }
    }
  }
  return appTypes;
}
