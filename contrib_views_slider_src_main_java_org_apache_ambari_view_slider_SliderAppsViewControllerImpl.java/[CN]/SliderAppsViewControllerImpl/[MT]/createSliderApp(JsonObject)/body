{
  if (json.has("name") && json.has("typeConfigs") && json.has("resources")&& json.has("typeName")) {
    final String appTypeId=json.get("typeName").getAsString();
    SliderAppType sliderAppType=getSliderAppType(appTypeId,null);
    final String appName=json.get("name").getAsString();
    final String queueName=json.has("queue") ? json.get("queue").getAsString() : null;
    final boolean securityEnabled=Boolean.valueOf(getHadoopConfigs().get("security_enabled"));
    final boolean twoWaySSlEnabled=json.has("twoWaySSLEnabled") ? Boolean.valueOf(json.get("twoWaySSLEnabled").getAsString()) : false;
    JsonObject configs=json.get("typeConfigs").getAsJsonObject();
    JsonObject resourcesObj=json.get("resources").getAsJsonObject();
    JsonArray componentsArray=resourcesObj.get("components").getAsJsonArray();
    String appsCreateFolderPath=getAppsCreateFolderPath();
    File appsCreateFolder=new File(appsCreateFolderPath);
    if (!appsCreateFolder.exists()) {
      appsCreateFolder.mkdirs();
    }
    int appCount;
synchronized (createAppCounter) {
      if (createAppCounter < 0) {
        createAppCounter=0;
        String[] apps=appsCreateFolder.list();
        for (        String app : apps) {
          try {
            int count=Integer.parseInt(app);
            if (count > createAppCounter) {
              createAppCounter=count;
            }
          }
 catch (          NumberFormatException e) {
          }
        }
      }
      appCount=++createAppCounter;
    }
    File appCreateFolder=new File(appsCreateFolder,Integer.toString(appCount));
    appCreateFolder.mkdirs();
    File appConfigJsonFile=new File(appCreateFolder,"appConfig.json");
    File resourcesJsonFile=new File(appCreateFolder,"resources.json");
    saveAppConfigs(configs,componentsArray,appName,sliderAppType.getTypeName(),securityEnabled,twoWaySSlEnabled,appConfigJsonFile);
    saveAppResources(resourcesObj,resourcesJsonFile);
    final ActionCreateArgs createArgs=new ActionCreateArgs();
    createArgs.template=appConfigJsonFile;
    createArgs.resources=resourcesJsonFile;
    if (queueName != null && queueName.trim().length() > 0) {
      createArgs.queue=queueName;
    }
    final ActionInstallPackageArgs installArgs=new ActionInstallPackageArgs();
    String localAppPackageFileName=sliderAppType.getTypePackageFileName();
    installArgs.name=sliderAppType.getTypeName();
    installArgs.packageURI=getAppsFolderPath() + "/" + localAppPackageFileName;
    installArgs.replacePkg=true;
    final List<ActionInstallKeytabArgs> installKeytabActions=new ArrayList<ActionInstallKeytabArgs>();
    if (securityEnabled) {
      for (      String keytab : getUserToRunAsKeytabs(sliderAppType.getTypeName())) {
        ActionInstallKeytabArgs keytabArgs=new ActionInstallKeytabArgs();
        keytabArgs.keytabUri=keytab;
        keytabArgs.folder=appName;
        keytabArgs.overwrite=true;
        installKeytabActions.add(keytabArgs);
      }
    }
    return invokeSliderClientRunnable(new SliderClientContextRunnable<String>(){
      @Override public String run(      SliderClient sliderClient) throws YarnException, IOException, InterruptedException {
        try {
          File sliderJarFile=SliderUtils.findContainingJar(SliderClient.class);
          if (sliderJarFile != null) {
            if (logger.isDebugEnabled()) {
              logger.debug("slider.libdir=" + sliderJarFile.getParentFile().getAbsolutePath());
            }
            System.setProperty("slider.libdir",sliderJarFile.getParentFile().getAbsolutePath());
          }
        }
 catch (        Throwable t) {
          logger.warn("Unable to determine 'slider.libdir' path",t);
        }
        if (securityEnabled) {
          for (          ActionInstallKeytabArgs keytabArgs : installKeytabActions) {
            if (logger.isDebugEnabled()) {
              logger.debug("Installing keytab " + keytabArgs.keytabUri);
            }
            sliderClient.actionInstallKeytab(keytabArgs);
          }
        }
        sliderClient.actionInstallPkg(installArgs);
        sliderClient.actionCreate(appName,createArgs);
        ApplicationId applicationId=sliderClient.applicationId;
        if (applicationId != null) {
          return getApplicationIdString(applicationId);
        }
        return null;
      }
    }
);
  }
  return null;
}
