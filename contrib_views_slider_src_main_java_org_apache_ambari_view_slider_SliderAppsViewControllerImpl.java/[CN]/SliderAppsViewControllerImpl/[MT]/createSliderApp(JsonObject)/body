{
  if (json.has("name") && json.has("typeConfigs") && json.has("resources")&& json.has("typeName")) {
    final String appType=json.get("typeName").getAsString();
    final String appName=json.get("name").getAsString();
    final String queueName=json.has("queue") ? json.get("queue").getAsString() : null;
    final boolean securityEnabled=Boolean.valueOf(getHadoopConfigs().get("security_enabled"));
    JsonObject configs=json.get("typeConfigs").getAsJsonObject();
    JsonObject resourcesObj=json.get("resources").getAsJsonObject();
    JsonArray componentsArray=resourcesObj.get("components").getAsJsonArray();
    String appsCreateFolderPath=getAppsCreateFolderPath();
    File appsCreateFolder=new File(appsCreateFolderPath);
    if (!appsCreateFolder.exists()) {
      appsCreateFolder.mkdirs();
    }
    int appCount;
synchronized (createAppCounter) {
      if (createAppCounter < 0) {
        createAppCounter=0;
        String[] apps=appsCreateFolder.list();
        for (        String app : apps) {
          try {
            int count=Integer.parseInt(app);
            if (count > createAppCounter) {
              createAppCounter=count;
            }
          }
 catch (          NumberFormatException e) {
          }
        }
      }
      appCount=++createAppCounter;
    }
    File appCreateFolder=new File(appsCreateFolder,Integer.toString(appCount));
    appCreateFolder.mkdirs();
    File appConfigJsonFile=new File(appCreateFolder,"appConfig.json");
    File resourcesJsonFile=new File(appCreateFolder,"resources.json");
    saveAppConfigs(configs,componentsArray,appName,securityEnabled,appConfigJsonFile);
    saveAppResources(resourcesObj,resourcesJsonFile);
    final ActionCreateArgs createArgs=new ActionCreateArgs();
    createArgs.template=appConfigJsonFile;
    createArgs.resources=resourcesJsonFile;
    if (queueName != null && queueName.trim().length() > 0) {
      createArgs.queue=queueName;
    }
    final ActionInstallPackageArgs installArgs=new ActionInstallPackageArgs();
    SliderAppType sliderAppType=getSliderAppType(appType,null);
    String localAppPackageFileName=sliderAppType.getTypePackageFileName();
    installArgs.name=appType;
    installArgs.packageURI=getAppsFolderPath() + "/" + localAppPackageFileName;
    installArgs.replacePkg=true;
    final ActionInstallKeytabArgs keytabArgs=new ActionInstallKeytabArgs();
    if (securityEnabled) {
      keytabArgs.keytabUri=getUserToRunAsKeytab();
      keytabArgs.folder=appName;
    }
    return invokeSliderClientRunnable(new SliderClientContextRunnable<String>(){
      @Override public String run(      SliderClient sliderClient) throws YarnException, IOException, InterruptedException {
        if (securityEnabled) {
          sliderClient.actionInstallKeytab(keytabArgs);
        }
        sliderClient.actionInstallPkg(installArgs);
        sliderClient.actionCreate(appName,createArgs);
        ApplicationId applicationId=sliderClient.applicationId;
        if (applicationId != null) {
          return getApplicationIdString(applicationId);
        }
        return null;
      }
    }
);
  }
  return null;
}
