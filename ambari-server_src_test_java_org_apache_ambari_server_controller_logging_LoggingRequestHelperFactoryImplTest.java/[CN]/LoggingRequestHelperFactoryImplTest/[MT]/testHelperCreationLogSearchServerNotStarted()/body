{
  final String expectedClusterName="testclusterone";
  final String expectedHostName="c6410.ambari.apache.org";
  final String expectedPortNumber="61889";
  EasyMockSupport mockSupport=new EasyMockSupport();
  AmbariManagementController controllerMock=mockSupport.createMock(AmbariManagementController.class);
  Clusters clustersMock=mockSupport.createMock(Clusters.class);
  Cluster clusterMock=mockSupport.createMock(Cluster.class);
  Config logSearchEnvConfig=mockSupport.createMock(Config.class);
  ServiceComponentHost serviceComponentHostMock=mockSupport.createMock(ServiceComponentHost.class);
  Map<String,String> testProperties=new HashMap<String,String>();
  testProperties.put("logsearch_ui_port",expectedPortNumber);
  expect(controllerMock.getClusters()).andReturn(clustersMock).atLeastOnce();
  expect(clustersMock.getCluster(expectedClusterName)).andReturn(clusterMock).atLeastOnce();
  expect(clusterMock.getDesiredConfigByType("logsearch-env")).andReturn(logSearchEnvConfig).atLeastOnce();
  expect(clusterMock.getServiceComponentHosts("LOGSEARCH","LOGSEARCH_SERVER")).andReturn(Collections.singletonList(serviceComponentHostMock)).atLeastOnce();
  expect(clusterMock.getServices()).andReturn(Collections.singletonMap("LOGSEARCH",(Service)null)).atLeastOnce();
  expect(serviceComponentHostMock.getState()).andReturn(State.INSTALLED).atLeastOnce();
  mockSupport.replayAll();
  LoggingRequestHelperFactory helperFactory=new LoggingRequestHelperFactoryImpl();
  LoggingRequestHelper helper=helperFactory.getHelper(controllerMock,expectedClusterName);
  assertNull("LoggingRequestHelper object returned by the factory should have been null",helper);
  mockSupport.verifyAll();
}
