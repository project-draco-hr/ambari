{
  stacks=mock(Stacks.class);
  parentStack=new Stack();
  parentStack.setName("parent");
  childStack=new Stack();
  childStack.setName("child");
  grandchildStack=new Stack();
  grandchildStack.setName("grandchild");
  childStack.setParentName(parentStack.getName());
  childStack.setParentRevision(0);
  grandchildStack.setParentName(childStack.getName());
  grandchildStack.setParentRevision(0);
  when(stacks.getStack(parentStack.getName(),0)).thenReturn(parentStack);
  when(stacks.getStack(childStack.getName(),0)).thenReturn(childStack);
  when(stacks.getStack(grandchildStack.getName(),0)).thenReturn(grandchildStack);
  plugins=mock(ComponentPluginFactory.class);
  hdfs=mock(ComponentPlugin.class);
  when(hdfs.getActiveRoles()).thenReturn(new String[]{"namenode","datanode"});
  mapreduce=mock(ComponentPlugin.class);
  when(mapreduce.getActiveRoles()).thenReturn(new String[]{"jobtracker","tasktracker"});
  hdfsDefn=new ComponentDefinition("hdfs","org.apache.ambari","0");
  mapreduceDefn=new ComponentDefinition("mapreduce","org.apache.ambari","0");
  when(plugins.getPlugin(hdfsDefn)).thenReturn(hdfs);
  when(plugins.getPlugin(mapreduceDefn)).thenReturn(mapreduce);
  parentHdfs=new Component("hdfs","0.20.205.0","i386","org.apache.ambari",new ComponentDefinition("hdfs","org.apache.ambari","0"),new Configuration(),new ArrayList<Role>(),new UserGroup());
  parentMapreduce=new Component("mapreduce","0.20.205.0","i386","org.apache.ambari",new ComponentDefinition("mapreduce","org.apache.ambari","0"),new Configuration(),new ArrayList<Role>(),new UserGroup());
  List<Component> compList=new ArrayList<Component>();
  parentStack.setComponents(compList);
  compList.add(parentHdfs);
  compList.add(parentMapreduce);
  flattener=new StackFlattener(stacks,plugins);
}
