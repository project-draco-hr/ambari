{
  List<TaskAttempt> taskAttempts=conn.fetchTaskAttempts(jobId,"REDUCE");
  List<Point> shufflePoints=new ArrayList<Point>();
  List<Point> reducePoints=new ArrayList<Point>();
  for (double time=submitTimeSecs; time < finishTimeSecs; time+=step) {
    int numShuffleTasks=0;
    int numReduceTasks=0;
    for (    TaskAttempt taskAttempt : taskAttempts) {
      if ((taskAttempt.getStartTime() / 1000.0) <= (time + step) && (taskAttempt.getShuffleFinishTime() / 1000.0) >= time) {
        numShuffleTasks++;
      }
 else       if ((taskAttempt.getShuffleFinishTime() / 1000.0) < (time + step) && (taskAttempt.getFinishTime() / 1000.0) >= time) {
        numReduceTasks++;
      }
    }
    shufflePoints.add(new Point(Math.round(time),numShuffleTasks));
    reducePoints.add(new Point(Math.round(time),numReduceTasks));
  }
  points.setShuffleData(shufflePoints);
  points.setReduceData(reducePoints);
}
