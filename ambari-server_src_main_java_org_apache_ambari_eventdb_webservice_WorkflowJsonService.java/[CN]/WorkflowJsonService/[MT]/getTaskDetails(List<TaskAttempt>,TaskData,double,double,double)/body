{
  List<Point> mapPoints=new ArrayList<Point>();
  List<Point> shufflePoints=new ArrayList<Point>();
  List<Point> reducePoints=new ArrayList<Point>();
  for (double time=submitTimeSecs; time < finishTimeSecs; time+=step) {
    int numTasks=0;
    int numShuffleTasks=0;
    int numReduceTasks=0;
    for (    TaskAttempt taskAttempt : taskAttempts) {
      if (taskAttempt.getTaskType().equals("MAP")) {
        if ((taskAttempt.getStartTime() / 1000.0) <= (time + step) && (taskAttempt.getFinishTime() / 1000.0) >= time)         numTasks++;
      }
 else       if (taskAttempt.getTaskType().equals("REDUCE")) {
        if ((taskAttempt.getStartTime() / 1000.0) <= (time + step) && (taskAttempt.getShuffleFinishTime() / 1000.0) >= time) {
          numShuffleTasks++;
        }
 else         if ((taskAttempt.getShuffleFinishTime() / 1000.0) < (time + step) && (taskAttempt.getFinishTime() / 1000.0) >= time) {
          numReduceTasks++;
        }
      }
    }
    mapPoints.add(new Point(Math.round(time),numTasks));
    shufflePoints.add(new Point(Math.round(time),numShuffleTasks));
    reducePoints.add(new Point(Math.round(time),numReduceTasks));
  }
  points.setMapData(mapPoints);
  points.setShuffleData(shufflePoints);
  points.setReduceData(reducePoints);
}
