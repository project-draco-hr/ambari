{
  String GET_SERVICES_WITHOUT_CONFIGS_QUERY="select service_name from clusterservices where service_name not in (select service_name from serviceconfig where group_id is null)";
  String GET_SERVICE_CONFIG_WITHOUT_MAPPING_QUERY="select service_name from serviceconfig where service_config_id not in (select service_config_id from serviceconfigmapping) and group_id is null";
  String GET_STACK_NAME_VERSION_QUERY="select s.stack_name, s.stack_version from clusters c join stack s on c.desired_stack_id = s.stack_id";
  String GET_SERVICES_WITH_CONFIGS_QUERY="select cs.service_name, type_name, sc.version from clusterservices cs " + "join serviceconfig sc on cs.service_name=sc.service_name " + "join serviceconfigmapping scm on sc.service_config_id=scm.service_config_id "+ "join clusterconfig cc on scm.config_id=cc.config_id "+ "where sc.group_id is null "+ "group by cs.service_name, type_name, sc.version";
  String GET_NOT_SELECTED_SERVICE_CONFIGS_QUERY="select cs.service_name,cc.type_name from clusterservices cs " + "join serviceconfig sc on cs.service_name=sc.service_name " + "join serviceconfigmapping scm on sc.service_config_id=scm.service_config_id "+ "join clusterconfig cc on scm.config_id=cc.config_id "+ "join clusterconfigmapping ccm on cc.type_name=ccm.type_name and cc.version_tag=ccm.version_tag "+ "where sc.group_id is null and sc.service_config_id = (select max(service_config_id) from serviceconfig sc2 where sc2.service_name=sc.service_name) "+ "group by cs.service_name,cc.type_name "+ "having sum(ccm.selected) < 1";
  String stackName=null, stackVersion=null;
  Set<String> servicesWithoutConfigs=new HashSet<>();
  Set<String> servicesWithoutMappedConfigs=new HashSet<>();
  Map<String,List<String>> notSelectedServiceConfigs=new HashMap<>();
  ResultSet rs=null;
  try {
    Statement statement=connection.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
    rs=statement.executeQuery(GET_SERVICES_WITHOUT_CONFIGS_QUERY);
    if (rs != null) {
      while (rs.next()) {
        servicesWithoutConfigs.add(rs.getString("service_name"));
      }
    }
    if (!servicesWithoutConfigs.isEmpty()) {
      LOG.error("You have services without configs at all: " + StringUtils.join(servicesWithoutConfigs,","));
    }
    rs=statement.executeQuery(GET_SERVICE_CONFIG_WITHOUT_MAPPING_QUERY);
    if (rs != null) {
      while (rs.next()) {
        servicesWithoutMappedConfigs.add(rs.getString("service_name"));
      }
    }
    if (!servicesWithoutMappedConfigs.isEmpty()) {
      LOG.error("You have services without mapped configs: " + StringUtils.join(servicesWithoutMappedConfigs,","));
    }
    rs=statement.executeQuery(GET_STACK_NAME_VERSION_QUERY);
    if (rs != null) {
      while (rs.next()) {
        stackName=rs.getString("stack_name");
        stackVersion=rs.getString("stack_version");
      }
    }
    if (stackName != null && stackVersion != null) {
      Set<String> serviceNames=new HashSet<>();
      Map<Integer,Multimap<String,String>> dbServiceVersionConfigs=new HashMap<>();
      Multimap<String,String> stackServiceConfigs=HashMultimap.create();
      rs=statement.executeQuery(GET_SERVICES_WITH_CONFIGS_QUERY);
      if (rs != null) {
        String serviceName=null, configType=null;
        Integer serviceVersion=null;
        while (rs.next()) {
          serviceName=rs.getString("service_name");
          configType=rs.getString("type_name");
          serviceVersion=rs.getInt("version");
          serviceNames.add(serviceName);
          if (dbServiceVersionConfigs.get(serviceVersion) == null) {
            Multimap<String,String> dbServiceConfigs=HashMultimap.create();
            dbServiceConfigs.put(serviceName,configType);
            dbServiceVersionConfigs.put(serviceVersion,dbServiceConfigs);
          }
 else {
            dbServiceVersionConfigs.get(serviceVersion).put(serviceName,configType);
          }
        }
      }
      Map<String,ServiceInfo> serviceInfoMap=ambariMetaInfo.getServices(stackName,stackVersion);
      for (      String serviceName : serviceNames) {
        ServiceInfo serviceInfo=serviceInfoMap.get(serviceName);
        Set<String> configTypes=serviceInfo.getConfigTypeAttributes().keySet();
        for (        String configType : configTypes) {
          stackServiceConfigs.put(serviceName,configType);
        }
      }
      for (      Integer serviceVersion : dbServiceVersionConfigs.keySet()) {
        Multimap<String,String> dbServiceConfigs=dbServiceVersionConfigs.get(serviceVersion);
        for (        String serviceName : dbServiceConfigs.keySet()) {
          Collection<String> serviceConfigsFromStack=stackServiceConfigs.get(serviceName);
          Collection<String> serviceConfigsFromDB=dbServiceConfigs.get(serviceName);
          if (serviceConfigsFromDB != null && serviceConfigsFromStack != null) {
            serviceConfigsFromStack.removeAll(serviceConfigsFromDB);
            if (!serviceConfigsFromStack.isEmpty()) {
              LOG.error(String.format("Required config(s): %s is(are) not available for service %s with service config version %s",StringUtils.join(serviceConfigsFromStack,","),serviceName,Integer.toString(serviceVersion)));
            }
          }
        }
      }
    }
    rs=statement.executeQuery(GET_NOT_SELECTED_SERVICE_CONFIGS_QUERY);
    if (rs != null) {
      String serviceName=null, configType=null;
      while (rs.next()) {
        serviceName=rs.getString("service_name");
        configType=rs.getString("type_name");
        if (notSelectedServiceConfigs.get(serviceName) != null) {
          notSelectedServiceConfigs.get(serviceName).add(configType);
        }
 else {
          List<String> configTypes=new ArrayList<>();
          configTypes.add(configType);
          notSelectedServiceConfigs.put(serviceName,configTypes);
        }
      }
    }
    for (    String serviceName : notSelectedServiceConfigs.keySet()) {
      LOG.error(String.format("You have non selected configs: %s for service %s.",StringUtils.join(notSelectedServiceConfigs.get(serviceName),","),serviceName));
    }
  }
 catch (  SQLException e) {
    LOG.error("Exception occurred during complex service check procedure: ",e);
  }
catch (  AmbariException e) {
    LOG.error("Exception occurred during complex service check procedure: ",e);
  }
 finally {
    if (rs != null) {
      try {
        rs.close();
      }
 catch (      SQLException e) {
        LOG.error("Exception occurred during result set closing procedure: ",e);
      }
    }
  }
}
