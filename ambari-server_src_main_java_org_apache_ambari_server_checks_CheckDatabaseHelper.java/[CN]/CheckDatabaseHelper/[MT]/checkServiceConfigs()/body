{
  String GET_SERVICES_WITHOUT_CONFIGS_QUERY="select c.cluster_name, service_name from clusterservices cs " + "join clusters c on cs.cluster_id=c.cluster_id " + "where service_name not in (select service_name from serviceconfig sc where sc.cluster_id=cs.cluster_id and sc.service_name=cs.service_name and sc.group_id is null)";
  String GET_SERVICE_CONFIG_WITHOUT_MAPPING_QUERY="select service_name from serviceconfig where service_config_id not in (select service_config_id from serviceconfigmapping) and group_id is null";
  String GET_STACK_NAME_VERSION_QUERY="select c.cluster_name, s.stack_name, s.stack_version from clusters c " + "join stack s on c.desired_stack_id = s.stack_id";
  String GET_SERVICES_WITH_CONFIGS_QUERY="select c.cluster_name, cs.service_name, type_name, sc.version from clusterservices cs " + "join serviceconfig sc on cs.service_name=sc.service_name and cs.cluster_id=sc.cluster_id " + "join serviceconfigmapping scm on sc.service_config_id=scm.service_config_id "+ "join clusterconfig cc on scm.config_id=cc.config_id and sc.cluster_id=cc.cluster_id "+ "join clusters c on cc.cluster_id=c.cluster_id "+ "where sc.group_id is null "+ "group by c.cluster_name, cs.service_name, type_name, sc.version";
  String GET_NOT_SELECTED_SERVICE_CONFIGS_QUERY="select c.cluster_name, cs.service_name,cc.type_name from clusterservices cs " + "join serviceconfig sc on cs.service_name=sc.service_name and cs.cluster_id=sc.cluster_id " + "join serviceconfigmapping scm on sc.service_config_id=scm.service_config_id "+ "join clusterconfig cc on scm.config_id=cc.config_id and cc.cluster_id=sc.cluster_id "+ "join clusterconfigmapping ccm on cc.type_name=ccm.type_name and cc.version_tag=ccm.version_tag and cc.cluster_id=ccm.cluster_id "+ "join clusters c on ccm.cluster_id=c.cluster_id "+ "where sc.group_id is null and sc.service_config_id = (select max(service_config_id) from serviceconfig sc2 where sc2.service_name=sc.service_name and sc2.cluster_id=sc.cluster_id) "+ "group by c.cluster_name,cs.service_name,cc.type_name "+ "having sum(ccm.selected) < 1";
  Multimap<String,String> servicesWithoutConfigs=HashMultimap.create();
  Map<String,Map<String,String>> clusterStackInfo=new HashMap<>();
  Set<String> servicesWithoutMappedConfigs=new HashSet<>();
  Map<String,Multimap<String,String>> notSelectedServiceConfigs=new HashMap<>();
  ResultSet rs=null;
  try {
    Statement statement=connection.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
    rs=statement.executeQuery(GET_SERVICES_WITHOUT_CONFIGS_QUERY);
    if (rs != null) {
      while (rs.next()) {
        servicesWithoutConfigs.put(rs.getString("cluster_name"),rs.getString("service_name"));
      }
    }
    for (    String clusterName : servicesWithoutConfigs.keySet()) {
      LOG.error(String.format("Service(s): %s, from cluster %s has no config(s) in serviceconfig table!",StringUtils.join(servicesWithoutConfigs.get(clusterName),","),clusterName));
      errorAvailable=true;
    }
    rs=statement.executeQuery(GET_SERVICE_CONFIG_WITHOUT_MAPPING_QUERY);
    if (rs != null) {
      while (rs.next()) {
        servicesWithoutMappedConfigs.add(rs.getString("service_name"));
      }
    }
    if (!servicesWithoutMappedConfigs.isEmpty()) {
      LOG.error("You have service(s) without mapped configs in serviceconfigmapping: " + StringUtils.join(servicesWithoutMappedConfigs,","));
      errorAvailable=true;
    }
    rs=statement.executeQuery(GET_STACK_NAME_VERSION_QUERY);
    if (rs != null) {
      while (rs.next()) {
        Map<String,String> stackInfoMap=new HashMap<>();
        stackInfoMap.put(rs.getString("stack_name"),rs.getString("stack_version"));
        clusterStackInfo.put(rs.getString("cluster_name"),stackInfoMap);
      }
    }
    Set<String> serviceNames=new HashSet<>();
    Map<String,Map<Integer,Multimap<String,String>>> dbClusterServiceVersionConfigs=new HashMap<>();
    Multimap<String,String> stackServiceConfigs=HashMultimap.create();
    rs=statement.executeQuery(GET_SERVICES_WITH_CONFIGS_QUERY);
    if (rs != null) {
      String serviceName=null, configType=null, clusterName=null;
      Integer serviceVersion=null;
      while (rs.next()) {
        clusterName=rs.getString("cluster_name");
        serviceName=rs.getString("service_name");
        configType=rs.getString("type_name");
        serviceVersion=rs.getInt("version");
        serviceNames.add(serviceName);
        if (dbClusterServiceVersionConfigs.get(clusterName) != null) {
          Map<Integer,Multimap<String,String>> dbServiceVersionConfigs=dbClusterServiceVersionConfigs.get(clusterName);
          if (dbServiceVersionConfigs.get(serviceVersion) != null) {
            dbServiceVersionConfigs.get(serviceVersion).put(serviceName,configType);
          }
 else {
            Multimap<String,String> dbServiceConfigs=HashMultimap.create();
            dbServiceConfigs.put(serviceName,configType);
            dbServiceVersionConfigs.put(serviceVersion,dbServiceConfigs);
          }
        }
 else {
          Map<Integer,Multimap<String,String>> dbServiceVersionConfigs=new HashMap<>();
          Multimap<String,String> dbServiceConfigs=HashMultimap.create();
          dbServiceConfigs.put(serviceName,configType);
          dbServiceVersionConfigs.put(serviceVersion,dbServiceConfigs);
          dbClusterServiceVersionConfigs.put(clusterName,dbServiceVersionConfigs);
        }
      }
    }
    for (    Map.Entry<String,Map<String,String>> clusterStackInfoEntry : clusterStackInfo.entrySet()) {
      String clusterName=clusterStackInfoEntry.getKey();
      Map<String,String> stackInfo=clusterStackInfoEntry.getValue();
      String stackName=stackInfo.keySet().iterator().next();
      String stackVersion=stackInfo.get(stackName);
      Map<String,ServiceInfo> serviceInfoMap=ambariMetaInfo.getServices(stackName,stackVersion);
      for (      String serviceName : serviceNames) {
        ServiceInfo serviceInfo=serviceInfoMap.get(serviceName);
        Set<String> configTypes=serviceInfo.getConfigTypeAttributes().keySet();
        for (        String configType : configTypes) {
          stackServiceConfigs.put(serviceName,configType);
        }
      }
      Map<Integer,Multimap<String,String>> dbServiceVersionConfigs=dbClusterServiceVersionConfigs.get(clusterName);
      for (      Integer serviceVersion : dbServiceVersionConfigs.keySet()) {
        Multimap<String,String> dbServiceConfigs=dbServiceVersionConfigs.get(serviceVersion);
        for (        String serviceName : dbServiceConfigs.keySet()) {
          Collection<String> serviceConfigsFromStack=stackServiceConfigs.get(serviceName);
          Collection<String> serviceConfigsFromDB=dbServiceConfigs.get(serviceName);
          if (serviceConfigsFromDB != null && serviceConfigsFromStack != null) {
            serviceConfigsFromStack.removeAll(serviceConfigsFromDB);
            if (!serviceConfigsFromStack.isEmpty()) {
              LOG.error(String.format("Required config(s): %s is(are) not available for service %s with service config version %s for cluster %s",StringUtils.join(serviceConfigsFromStack,","),serviceName,Integer.toString(serviceVersion),clusterName));
              errorAvailable=true;
            }
          }
        }
      }
    }
    rs=statement.executeQuery(GET_NOT_SELECTED_SERVICE_CONFIGS_QUERY);
    if (rs != null) {
      String serviceName=null, configType=null, clusterName=null;
      while (rs.next()) {
        clusterName=rs.getString("cluster_name");
        serviceName=rs.getString("service_name");
        configType=rs.getString("type_name");
        if (notSelectedServiceConfigs.get(clusterName) != null) {
          Multimap<String,String> serviceConfigs=notSelectedServiceConfigs.get(clusterName);
          serviceConfigs.put(serviceName,configType);
        }
 else {
          Multimap<String,String> serviceConfigs=HashMultimap.create();
          serviceConfigs.put(serviceName,configType);
          notSelectedServiceConfigs.put(clusterName,serviceConfigs);
        }
      }
    }
    for (    String clusterName : notSelectedServiceConfigs.keySet()) {
      Multimap<String,String> serviceConfig=notSelectedServiceConfigs.get(clusterName);
      for (      String serviceName : serviceConfig.keySet()) {
        LOG.error(String.format("You have non selected configs: %s for service %s from cluster %s!",StringUtils.join(serviceConfig.get(serviceName),","),serviceName,clusterName));
        errorAvailable=true;
      }
    }
  }
 catch (  SQLException e) {
    LOG.error("Exception occurred during complex service check procedure: ",e);
  }
catch (  AmbariException e) {
    LOG.error("Exception occurred during complex service check procedure: ",e);
  }
 finally {
    if (rs != null) {
      try {
        rs.close();
      }
 catch (      SQLException e) {
        LOG.error("Exception occurred during result set closing procedure: ",e);
      }
    }
  }
}
