def get_params_from_filesystem(conf_dir, config_files):
    '\n  Used to retrieve properties from xml config files and build a dict\n\n  The dictionary of configuration files to file types should contain one of the following values"\n    \'XML\'\n    \'PROPERTIES\'\n\n  :param conf_dir:  directory where the configuration files sit\n  :param config_files: dictionary of configuration file names to (supported) file types\n  :return: a dictionary of config-type to a dictionary of key/value pairs for\n  '
    result = {}
    from xml.etree import ElementTree as ET
    import ConfigParser, StringIO
    import re
    for (config_file, file_type) in config_files.iteritems():
        (file_name, file_ext) = os.path.splitext(config_file)
        if (file_type == FILE_TYPE_XML):
            configuration = ET.parse(((conf_dir + os.sep) + config_file))
            props = configuration.getroot().getchildren()
            config_file_id = (file_name if file_name else config_file)
            result[config_file_id] = {}
            for prop in props:
                result[config_file_id].update({prop[0].text: prop[1].text, })
        elif (file_type == FILE_TYPE_PROPERTIES):
            with open(((conf_dir + os.sep) + config_file), 'r') as f:
                config_string = ('[root]\n' + f.read())
            ini_fp = StringIO.StringIO(re.sub('\\\\\\s*\\n', '\\\n ', config_string))
            config = ConfigParser.RawConfigParser()
            config.readfp(ini_fp)
            props = config.items('root')
            result[file_name] = {}
            for (key, value) in props:
                result[file_name].update({key: value, })
        elif (file_type == FILE_TYPE_JAAS_CONF):
            section_header = re.compile('^(\\w+)\\s+\\{\\s*$')
            section_data = re.compile('^\\s*([^ \\s\\=\\}\\{]+)\\s*=?\\s*"?([^ ";]+)"?;?\\s*$')
            section_footer = re.compile('^\\}\\s*;?\\s*$')
            section_name = 'root'
            result[file_name] = {}
            with open(((conf_dir + os.sep) + config_file), 'r') as f:
                for line in f:
                    if line:
                        line = line.strip()
                        m = section_header.search(line)
                        if m:
                            section_name = m.group(1)
                            if (section_name not in result[file_name]):
                                result[file_name][section_name] = {}
                        else:
                            m = section_footer.search(line)
                            if m:
                                section_name = 'root'
                            else:
                                m = section_data.search(line)
                                if m:
                                    result[file_name][section_name][m.group(1)] = m.group(2)
    return result
