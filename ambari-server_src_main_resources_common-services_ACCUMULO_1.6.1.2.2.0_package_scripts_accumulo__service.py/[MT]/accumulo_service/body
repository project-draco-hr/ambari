def accumulo_service(name, action='start'):
    import params
    role = name
    pid_file = format('{pid_dir}/accumulo-{accumulo_user}-{role}.pid')
    pid_exists = format('ls {pid_file} >/dev/null 2>&1 && ps `cat {pid_file}` >/dev/null 2>&1')
    if (action == 'start'):
        if (name != 'tserver'):
            Execute(format('{daemon_script} org.apache.accumulo.master.state.SetGoalState NORMAL'), not_if=pid_exists, user=params.accumulo_user)
        daemon_cmd = format('{daemon_script} {role} --address {params.hostname} > {log_dir}/accumulo-{role}.out 2>{log_dir}/accumulo-{role}.err & echo $! > {pid_file}')
        Execute(daemon_cmd, not_if=pid_exists, user=params.accumulo_user)
    elif (action == 'stop'):
        no_pid_exists = format('! ({pid_exists})')
        try:
            if (name == 'master'):
                Execute(format('{daemon_script} admin stopMaster'), not_if=no_pid_exists, timeout=30, user=params.accumulo_user)
            elif (name == 'tserver'):
                Execute(format('{daemon_script} admin stop {hostname}'), not_if=no_pid_exists, timeout=30, user=params.accumulo_user)
            elif (name != 'monitor'):
                Execute(format('{daemon_script} org.apache.accumulo.master.state.SetGoalState SAFE_MODE'), not_if=pid_exists, user=params.accumulo_user)
        except:
            pass
        time.sleep(5)
        pid = format('`cat {pid_file}` >/dev/null 2>&1')
        Execute(format('kill {pid}'), not_if=no_pid_exists, user=params.accumulo_user)
        Execute(format('kill -9 {pid}'), not_if=format('sleep 2; {no_pid_exists} || sleep 20; {no_pid_exists}'), ignore_failures=True, user=params.accumulo_user)
        Execute(format('rm -f {pid_file}'), user=params.accumulo_user)
