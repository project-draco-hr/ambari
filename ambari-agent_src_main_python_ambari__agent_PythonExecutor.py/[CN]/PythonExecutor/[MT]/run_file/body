def run_file(self, command, file, tmpoutfile, tmperrfile):
    '\n    Executes the specified python file in a separate subprocess.\n    Method returns only when the subprocess is finished.\n    '
    tmpout = open(tmpoutfile, 'w')
    tmperr = open(tmperrfile, 'w')
    pythonCommand = self.pythonCommand(file)
    logger.info(('Running command ' + pprint.pformat(pythonCommand)))
    process = self.lauch_python_subprocess(pythonCommand, tmpout, tmperr)
    logger.debug('Launching watchdog thread')
    self.event.clear()
    self.python_process_has_been_killed = False
    thread = Thread(target=self.python_watchdog_func, args=(process,))
    thread.start()
    process.communicate()
    self.event.set()
    thread.join()
    error = self.NO_ERROR
    returncode = process.returncode
    out = open(tmpoutfile, 'r').read()
    error = open(tmperrfile, 'r').read()
    if self.python_process_has_been_killed:
        error = (str(error) + '\n Puppet has been killed due to timeout')
        returncode = 999
    result = self.condenseOutput(out, error, returncode)
    logger.info(('Result: %s' % result))
    return result
