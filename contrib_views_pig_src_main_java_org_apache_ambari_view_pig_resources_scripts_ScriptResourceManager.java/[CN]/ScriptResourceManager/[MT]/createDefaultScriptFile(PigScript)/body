{
  String userScriptsPath=context.getProperties().get("dataworker.scripts.path");
  if (userScriptsPath == null) {
    String msg="dataworker.scripts.path is not configured!";
    LOG.error(msg);
    throw new WebServiceException(msg);
  }
  int checkId=0;
  boolean fileCreated;
  String newFilePath;
  do {
    String normalizedName=object.getTitle().replaceAll("[^a-zA-Z0-9 ]+","").replaceAll(" ","_").toLowerCase();
    String timestamp=new SimpleDateFormat("yyyy-MM-dd_hh-mm").format(new Date());
    newFilePath=String.format(userScriptsPath + "/%s/%s-%s%s.pig",getUsername(),normalizedName,timestamp,(checkId == 0) ? "" : "_" + checkId);
    LOG.debug("Trying to create new file " + newFilePath);
    try {
      FSDataOutputStream stream=BaseService.getHdfsApi(context).create(newFilePath,false);
      stream.close();
      fileCreated=true;
      LOG.debug("File created successfully!");
    }
 catch (    FileAlreadyExistsException e) {
      fileCreated=false;
      LOG.debug("File already exists. Trying next id");
    }
catch (    IOException e) {
      try {
        delete(object.getId());
      }
 catch (      ItemNotFound itemNotFound) {
        throw new WebServiceException("Error in creation, during clean up: " + itemNotFound.toString(),itemNotFound);
      }
      throw new WebServiceException("Error in creation: " + e.toString(),e);
    }
catch (    InterruptedException e) {
      try {
        delete(object.getId());
      }
 catch (      ItemNotFound itemNotFound) {
        throw new WebServiceException("Error in creation, during clean up: " + itemNotFound.toString(),itemNotFound);
      }
      throw new WebServiceException("Error in creation: " + e.toString(),e);
    }
    checkId+=1;
  }
 while (!fileCreated);
  object.setPigScript(newFilePath);
  getPigStorage().store(object);
}
