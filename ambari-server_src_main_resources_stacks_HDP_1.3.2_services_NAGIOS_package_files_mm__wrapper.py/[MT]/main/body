def main():
    '\n  This script allows to run nagios service check commands for host components\n  located at different hosts.\n  Also script passes to every command a $MM_HOSTS shell variable with a list of\n  hosts that are in MM\n\n  or mode: return 0 exit code if at least one service check succeeds.\n  Command exits on a first success.\n  Failures for host components that are in MM are suppressed (return code\n  is set to 0).\n  If command fails for all provided hostnames, script returns alert with the\n  greatest exit code value.\n\n  and mode:\n  Perform checks of all host components (effectively ignoring negative results\n  for MM components). If service check is successful for all hosts, script\n  also returns zero exit code. Otherwise alert with the greatest exit code is\n  returned.\n\n  env_only mode:\n  Pass list of all hosts to command and run it once. The only role of\n  mm_wrapper script in this mode is to provide properly initialized\n  $MM_HOSTS env variable to command being run. All duties of ignoring failures\n  of MM host components are delegated to a command being run.\n\n  filter_mm\n  Similar to env_only mode. The only difference is that hostnames for\n  host components that are in MM are filtered (not passed to command at all)\n\n  legacy_check_wrapper\n  Designed as a drop-in replacement for check_wrapper.sh . It reads $NAGIOS_HOSTNAME\n  env var and ignores check results if host component on this host is in MM.\n  When host subtitution symbol is encountered, hostname defined by $NAGIOS_HOSTNAME\n  is substituted,\n  '
    args = sys.argv[1:]
    (mode, hostnames, command_line) = parse_args(args)
    (output, ret_code) = do_work(mode, hostnames, command_line)
    for line in output:
        print line
    sys.exit(ret_code)
