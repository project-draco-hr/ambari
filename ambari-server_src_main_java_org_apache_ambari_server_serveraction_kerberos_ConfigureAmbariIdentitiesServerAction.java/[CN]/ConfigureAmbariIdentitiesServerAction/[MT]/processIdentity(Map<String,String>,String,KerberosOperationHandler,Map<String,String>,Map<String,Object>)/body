{
  CommandReport commandReport=null;
  if (identityRecord != null) {
    String message;
    String dataDirectory=getDataDirectoryPath();
    if (dataDirectory == null) {
      message="The data directory has not been set. Generated keytab files can not be stored.";
      LOG.error(message);
      commandReport=createCommandReport(1,HostRoleStatus.FAILED,"{}",actionLog.getStdOut(),actionLog.getStdErr());
    }
 else {
      String hostName=identityRecord.get(KerberosIdentityDataFileReader.HOSTNAME);
      if (hostName != null && hostName.equalsIgnoreCase(KerberosHelper.AMBARI_SERVER_HOST_NAME)) {
        String destKeytabFilePath=identityRecord.get(KerberosIdentityDataFileReader.KEYTAB_FILE_PATH);
        File hostDirectory=new File(dataDirectory,hostName);
        File srcKeytabFile=new File(hostDirectory,DigestUtils.sha1Hex(destKeytabFilePath));
        if (srcKeytabFile.exists()) {
          String ownerAccess=identityRecord.get(KerberosIdentityDataFileReader.KEYTAB_FILE_OWNER_ACCESS);
          boolean ownerWritable="w".equalsIgnoreCase(ownerAccess) || "rw".equalsIgnoreCase(ownerAccess);
          boolean ownerReadable="r".equalsIgnoreCase(ownerAccess) || "rw".equalsIgnoreCase(ownerAccess);
          String groupAccess=identityRecord.get(KerberosIdentityDataFileReader.KEYTAB_FILE_OWNER_ACCESS);
          boolean groupWritable="w".equalsIgnoreCase(groupAccess) || "rw".equalsIgnoreCase(groupAccess);
          boolean groupReadable="r".equalsIgnoreCase(groupAccess) || "rw".equalsIgnoreCase(groupAccess);
          installAmbariServerIdentity(evaluatedPrincipal,srcKeytabFile.getAbsolutePath(),destKeytabFilePath,identityRecord.get(KerberosIdentityDataFileReader.KEYTAB_FILE_OWNER_NAME),ownerReadable,ownerWritable,identityRecord.get(KerberosIdentityDataFileReader.KEYTAB_FILE_GROUP_NAME),groupReadable,groupWritable,actionLog);
          if ("AMBARI_SERVER_SELF".equals(identityRecord.get(KerberosIdentityDataFileReader.COMPONENT))) {
            configureJAAS(evaluatedPrincipal,destKeytabFilePath,actionLog);
          }
        }
      }
    }
  }
  return commandReport;
}
