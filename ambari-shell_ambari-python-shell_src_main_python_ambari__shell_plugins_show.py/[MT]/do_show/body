def do_show(self, option):
    '\n    Usage:\n        > show clusters     list clusters\n        > show hosts        list hosts\n        > show stacks       list stacks\n        > show services     list services\n        > show requests     list previous requests\n        > show blueprints   list blueprints\n    '
    headers = []
    rows = []
    options = ['clusters', 'stacks', 'status', 'services', 'hosts', 'requests', 'blueprints']
    if (not option):
        self.help_show()
        return
    if (option not in options):
        self.default(option)
        return
    client = self.global_shell_config['client']
    clustername = self.global_shell_config['clustername']
    if (option == 'clusters'):
        'Display list of clusters on system'
        headers = ['CLUSTER NAME']
        clusters = client.get_all_clusters()
        for cluster in clusters:
            rows.append([cluster.cluster_name])
    if (option == 'stacks'):
        'Display list of stacks on system'
        headers = ['STACK NAME']
        stacks = client.get_stacks(True)
        for stack in stacks:
            rows.append([stack.stack_version])
    if (option == 'blueprints'):
        'Display list of blueprints on system'
        headers = ['BLUEPRINT NAME', 'VERSION']
        blues = client.get_blueprint()
        for b in blues:
            rows.append([b.blueprint_name, b.stack_version])
    if (option == 'status'):
        'Display list of stacks on system'
        headers = ['HOST_NAME', 'ROLE', 'STATUS']
        if (not clustername):
            print 'Error! No cluster currently selected'
            return
        else:
            tasks = client.get_task_status(clustername, 2)
            for task in tasks:
                rows.append([task.host_name, task.role, task.status])
    if (option == 'hosts'):
        'Display a list of hosts avaiable on the system'
        headers = ['HOSTNAME', 'IP ADDRESS']
        if (not clustername):
            for host in client.get_all_hosts():
                rows.append([host.host_name, host.ip])
        else:
            c = client.get_cluster(clustername)
            for host in c.get_all_hosts():
                rows.append([host.host_name, host.ip])
    if (option == 'requests'):
        headers = ['REQUEST-ID', 'STATUS']
        if (not clustername):
            print 'Error! No cluster currently selected'
            return
        else:
            c = client.get_cluster(clustername)
            for req in client.get_requests(clustername):
                rows.append([req.id, req.request_status])
    if (option == 'services'):
        'Show list of services on the cluster'
        headers = ['SERVICE', 'STATUS']
        if (not clustername):
            print 'Error! No cluster currently selected'
            return
        else:
            c = client.get_cluster(clustername)
            for service in c.get_all_services():
                rows.append([service.service_name, service.state])
    self.generate_output(headers, rows)
