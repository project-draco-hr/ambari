{
  ADKerberosOperationHandler handler=createMockBuilder(ADKerberosOperationHandler.class).addMockedMethod(ADKerberosOperationHandler.class.getDeclaredMethod("createInitialLdapContext",Properties.class,Control[].class)).addMockedMethod(ADKerberosOperationHandler.class.getDeclaredMethod("createSearchControls")).createNiceMock();
  expect(handler.createInitialLdapContext(anyObject(Properties.class),anyObject(Control[].class))).andAnswer(new IAnswer<LdapContext>(){
    @Override public LdapContext answer() throws Throwable {
      LdapContext ldapContext=createNiceMock(LdapContext.class);
      expect(ldapContext.search(anyObject(String.class),anyObject(String.class),anyObject(SearchControls.class))).andAnswer(new IAnswer<NamingEnumeration<SearchResult>>(){
        @Override public NamingEnumeration<SearchResult> answer() throws Throwable {
          NamingEnumeration<SearchResult> result=createNiceMock(NamingEnumeration.class);
          expect(result.hasMore()).andReturn(false).once();
          replay(result);
          return result;
        }
      }
).once();
      replay(ldapContext);
      return ldapContext;
    }
  }
).once();
  expect(handler.createSearchControls()).andAnswer(new IAnswer<SearchControls>(){
    @Override public SearchControls answer() throws Throwable {
      SearchControls searchControls=createNiceMock(SearchControls.class);
      replay(searchControls);
      return searchControls;
    }
  }
).once();
  replayAll();
  handler.open(new KerberosCredential(DEFAULT_ADMIN_PRINCIPAL,DEFAULT_ADMIN_PASSWORD,null),DEFAULT_REALM,DEFAULT_LDAP_URL,DEFAULT_PRINCIPAL_CONTAINER_DN);
  handler.testAdministratorCredentials();
  handler.close();
}
