{
  PrincipalKeyCredential kc=new PrincipalKeyCredential(DEFAULT_ADMIN_PRINCIPAL,DEFAULT_ADMIN_PASSWORD);
  Map<String,String> kerberosEnvMap=new HashMap<String,String>();
  kerberosEnvMap.put(ADKerberosOperationHandler.KERBEROS_ENV_LDAP_URL,DEFAULT_LDAP_URL);
  kerberosEnvMap.put(ADKerberosOperationHandler.KERBEROS_ENV_PRINCIPAL_CONTAINER_DN,DEFAULT_PRINCIPAL_CONTAINER_DN);
  kerberosEnvMap.put(ADKerberosOperationHandler.KERBEROS_ENV_AD_CREATE_ATTRIBUTES_TEMPLATE,"" + "{" + "\"principal_digest\": \"$principal_digest\","+ "\"principal_digest_256\": \"$principal_digest_256\","+ "\"principal_digest_512\": \"$principal_digest_512\""+ "}");
  Capture<Attributes> capturedAttributes=newCapture();
  ADKerberosOperationHandler handler=createMockBuilder(ADKerberosOperationHandler.class).addMockedMethod(ADKerberosOperationHandler.class.getDeclaredMethod("createInitialLdapContext",Properties.class,Control[].class)).addMockedMethod(ADKerberosOperationHandler.class.getDeclaredMethod("createSearchControls")).createNiceMock();
  @SuppressWarnings("unchecked") NamingEnumeration<SearchResult> searchResult=createNiceMock(NamingEnumeration.class);
  expect(searchResult.hasMore()).andReturn(false).once();
  LdapContext ldapContext=createNiceMock(LdapContext.class);
  expect(ldapContext.search(anyObject(String.class),anyObject(String.class),anyObject(SearchControls.class))).andReturn(searchResult).once();
  expect(ldapContext.createSubcontext(anyObject(Name.class),capture(capturedAttributes))).andReturn(createNiceMock(DirContext.class)).once();
  expect(handler.createInitialLdapContext(anyObject(Properties.class),anyObject(Control[].class))).andReturn(ldapContext).once();
  expect(handler.createSearchControls()).andAnswer(new IAnswer<SearchControls>(){
    @Override public SearchControls answer() throws Throwable {
      SearchControls searchControls=createNiceMock(SearchControls.class);
      replay(searchControls);
      return searchControls;
    }
  }
).once();
  replayAll();
  handler.open(kc,DEFAULT_REALM,kerberosEnvMap);
  handler.createPrincipal("nn/c6501.ambari.apache.org","secret",true);
  handler.close();
  Attributes attributes=capturedAttributes.getValue();
  Assert.assertNotNull(attributes);
  Assert.assertEquals("995e1580db28198e7fda1417ab5d894c877937d2",attributes.get("principal_digest").get());
  Assert.assertEquals("b65bc066d11ac8b1beb31dc84035d9c204736f823decf8dfedda05a30e4ae410",attributes.get("principal_digest_256").get());
  Assert.assertEquals("f48de28bc0467d764f5b04dbf04d35ff329a80277614be35eda0d0deed7f1c074cc5b0e0dc361130fdb078e09eb0ca545b9c653388192508ef382af89bd3a80c",attributes.get("principal_digest_512").get());
}
