@patch.object(manifestGenerator, 'generateManifest')
@patch.object(PuppetExecutor, 'isJavaAvailable')
@patch.object(PuppetExecutor, 'runPuppetFile')
def test_run_command(self, runPuppetFileMock, isJavaAvailableMock, generateManifestMock):
    tmpdir = tempfile.gettempdir()
    puppetInstance = PuppetExecutor('/tmp', '/x', '/y', tmpdir, AmbariConfig().getConfig())
    jsonFile = open('../../main/python/ambari_agent/test.json', 'r')
    jsonStr = jsonFile.read()
    parsedJson = json.loads(jsonStr)
    parsedJson['taskId'] = 1

    def side_effect1(puppetFile, result, puppetEnv, tmpoutfile, tmperrfile):
        result['exitcode'] = 0
    runPuppetFileMock.side_effect = side_effect1
    generateManifestMock.return_value = ''
    puppetInstance.reposInstalled = False
    isJavaAvailableMock.return_value = True
    res = puppetInstance.runCommand(parsedJson, (tmpdir + '/out.txt'), (tmpdir + '/err.txt'))
    self.assertEquals(res['exitcode'], 0)
    self.assertTrue(puppetInstance.reposInstalled)

    def side_effect2(puppetFile, result, puppetEnv, tmpoutfile, tmperrfile):
        result['exitcode'] = 999
    runPuppetFileMock.side_effect = side_effect2
    puppetInstance.reposInstalled = False
    isJavaAvailableMock.return_value = True
    res = puppetInstance.runCommand(parsedJson, (tmpdir + '/out.txt'), (tmpdir + '/err.txt'))
    self.assertEquals(res['exitcode'], 999)
    self.assertFalse(puppetInstance.reposInstalled)
    generateManifestMock.return_value = 'error during manifest generation'
    res = puppetInstance.runCommand(parsedJson, (tmpdir + '/out.txt'), (tmpdir + '/err.txt'))
    self.assertTrue(generateManifestMock.called)
    self.assertEquals(res['exitcode'], 1)
    generateManifestMock.return_value = ''

    def side_effect2(puppetFile, result, puppetEnv, tmpoutfile, tmperrfile):
        result['exitcode'] = 0
    runPuppetFileMock.side_effect = side_effect2
    puppetInstance.reposInstalled = False
    isJavaAvailableMock.return_value = False
    parsedJson['roleCommand'] = 'START'
    parsedJson['configurations'] = {'global': {'java64_home': '/usr/jdk/jdk123', }, }
    res = puppetInstance.runCommand(parsedJson, (tmpdir + '/out.txt'), (tmpdir + '/err.txt'))
    JAVANOTVALID_MSG = 'Cannot access JDK! Make sure you have permission to execute {0}/bin/java'
    errMsg = JAVANOTVALID_MSG.format('/usr/jdk/jdk123')
    self.assertEquals(res['exitcode'], 1)
    self.assertEquals(res['stderr'], errMsg)
    self.assertFalse(puppetInstance.reposInstalled)
    parsedJson['configurations'] = {'random': {'name1': 'value2', }, }
    res = puppetInstance.runCommand(parsedJson, (tmpdir + '/out.txt'), (tmpdir + '/err.txt'))
    self.assertEquals(res['exitcode'], 1)
    self.assertEquals(res['stderr'], 'Cannot access JDK! Make sure java64_home is specified in global config')
