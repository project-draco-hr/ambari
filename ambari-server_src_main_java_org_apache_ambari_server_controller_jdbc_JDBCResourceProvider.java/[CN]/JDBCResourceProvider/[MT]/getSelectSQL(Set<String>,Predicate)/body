{
  StringBuilder columns=new StringBuilder();
  Set<String> tableSet=new HashSet<String>();
  for (  String propertyId : propertyIds) {
    if (columns.length() > 0) {
      columns.append(", ");
    }
    String propertyCategory=PropertyHelper.getPropertyCategory(propertyId);
    columns.append(propertyCategory).append(".").append(PropertyHelper.getPropertyName(propertyId));
    tableSet.add(propertyCategory);
  }
  boolean haveWhereClause=false;
  StringBuilder whereClause=new StringBuilder();
  if (predicate != null && propertyIds.containsAll(PredicateHelper.getPropertyIds(predicate)) && predicate instanceof PredicateVisitorAcceptor) {
    SQLPredicateVisitor visitor=new SQLPredicateVisitor();
    ((PredicateVisitorAcceptor)predicate).accept(visitor);
    whereClause.append(visitor.getSQL());
    haveWhereClause=true;
  }
  StringBuilder joinClause=new StringBuilder();
  if (tableSet.size() > 1) {
    for (    String table : tableSet) {
      Map<String,String> joinKeys=importedKeys.get(table);
      if (joinKeys != null) {
        for (        Map.Entry<String,String> entry : joinKeys.entrySet()) {
          String category1=PropertyHelper.getPropertyCategory(entry.getKey());
          String category2=PropertyHelper.getPropertyCategory(entry.getValue());
          if (tableSet.contains(category1) && tableSet.contains(category2)) {
            if (haveWhereClause) {
              joinClause.append(" AND ");
            }
            joinClause.append(category1).append(".").append(PropertyHelper.getPropertyName(entry.getKey()));
            joinClause.append(" = ");
            joinClause.append(category2).append(".").append(PropertyHelper.getPropertyName(entry.getValue()));
            tableSet.add(category1);
            tableSet.add(category2);
            haveWhereClause=true;
          }
        }
      }
    }
  }
  StringBuilder tables=new StringBuilder();
  for (  String table : tableSet) {
    if (tables.length() > 0) {
      tables.append(", ");
    }
    tables.append(table);
  }
  String sql="select " + columns + " from "+ tables;
  if (haveWhereClause) {
    sql=sql + " where " + whereClause+ joinClause;
  }
  return sql;
}
