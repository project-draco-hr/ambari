{
  Set<Resource> resources=new HashSet<Resource>();
  Set<String> propertyIds=PropertyHelper.getRequestPropertyIds(this.propertyIds,request,predicate);
  propertyIds.remove(PropertyHelper.getPropertyId("Clusters","cluster_id"));
  propertyIds.remove(PropertyHelper.getPropertyId("Hosts","disk_info"));
  propertyIds.remove(PropertyHelper.getPropertyId("Hosts","public_host_name"));
  propertyIds.remove(PropertyHelper.getPropertyId("Hosts","last_registration_time"));
  propertyIds.remove(PropertyHelper.getPropertyId("Hosts","host_state"));
  propertyIds.remove(PropertyHelper.getPropertyId("Hosts","last_heartbeat_time"));
  propertyIds.remove(PropertyHelper.getPropertyId("Hosts","host_health_report"));
  propertyIds.remove(PropertyHelper.getPropertyId("Hosts","host_status"));
  propertyIds.remove(PropertyHelper.getPropertyId("ServiceInfo","desired_configs"));
  propertyIds.remove(PropertyHelper.getPropertyId("ServiceComponentInfo","desired_configs"));
  propertyIds.remove(PropertyHelper.getPropertyId("HostRoles","configs"));
  propertyIds.remove(PropertyHelper.getPropertyId("HostRoles","desired_configs"));
  Connection connection=null;
  Statement statement=null;
  ResultSet rs=null;
  try {
    connection=connectionFactory.getConnection();
    for (    String table : getTables(propertyIds)) {
      getImportedKeys(connection,table);
    }
    String sql=getSelectSQL(propertyIds,predicate);
    statement=connection.createStatement();
    rs=statement.executeQuery(sql);
    while (rs.next()) {
      ResultSetMetaData metaData=rs.getMetaData();
      int columnCount=metaData.getColumnCount();
      final ResourceImpl resource=new ResourceImpl(type);
      for (int i=1; i <= columnCount; ++i) {
        String propertyId=PropertyHelper.getPropertyId(metaData.getTableName(i),metaData.getColumnName(i));
        if (propertyIds.contains(propertyId)) {
          resource.setProperty(propertyId,rs.getString(i));
        }
      }
      resources.add(resource);
    }
    statement.close();
  }
 catch (  SQLException e) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Caught exception getting resource.",e);
    }
    return Collections.emptySet();
  }
 finally {
    try {
      if (rs != null)       rs.close();
    }
 catch (    SQLException e) {
      LOG.error("Exception while closing ResultSet",e);
    }
    try {
      if (statement != null)       statement.close();
    }
 catch (    SQLException e) {
      LOG.error("Exception while closing statment",e);
    }
    try {
      if (connection != null)       connection.close();
    }
 catch (    SQLException e) {
      LOG.error("Exception while closing statment",e);
    }
  }
  return resources;
}
