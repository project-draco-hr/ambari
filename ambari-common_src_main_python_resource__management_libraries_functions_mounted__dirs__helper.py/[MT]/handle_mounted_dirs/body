def handle_mounted_dirs(func, dirs_string, history_filename, update_cache=True):
    "\n  This function determine which dir paths can be created.\n  There are 2 uses cases:\n  1. Customers that have many dirs, each one on a separate mount point that corresponds to a different drive.\n  2. Developers that are using a sandbox VM and all dirs are mounted on the root.\n\n  The goal is to avoid forcefully creating a dir when a user's drive fails. In this scenario, the\n  mount point for a dir changes from something like /hadoop/hdfs/data/data1 to /\n  If Ambari forcefully creates the directory when it doesn't exist and drive became unmounted, then Ambari will soon\n  fill up the root drive, which is bad. Instead, we should not create the directory and let HDFS handle the failure\n  based on its tolerance of missing directories.\n\n  This function relies on the history_file parameter to parse a file that contains\n  a mapping from a dir, and its last known mount point.\n  After determining which dirs can be created if they don't exist, it recalculates the mount points and\n  writes to the file again.\n  :param func: Function that will be called if a directory will be created. This function\n               will be called as func(dir)\n  :param update_cache: Bool indicating whether to update the global cache of mount points\n  :return: Returns a history_filename content\n  "
    Directory(os.path.dirname(history_filename), create_parents=True, mode=493)
    prev_dir_to_mount_point = get_dir_to_mount_from_file(history_filename)
    dir_to_mount_point = prev_dir_to_mount_point.copy()
    history_file_exists = True
    if (history_filename is None):
        history_file_exists = False
        Logger.warning('History_file.file property is null.')
    elif (not os.path.exists(history_filename)):
        history_file_exists = False
        Logger.warning(('History_file property has file %s and it does not exist.' % history_filename))
    valid_dirs = []
    error_messages = []
    dirs_unmounted = set()
    valid_existing_dirs = []
    dirs_string = ','.join([re.sub('^\\[.+\\]', '', dfs_dir.strip()) for dfs_dir in dirs_string.split(',')])
    for dir in dirs_string.split(','):
        if ((dir is None) or (dir.strip() == '')):
            continue
        dir = dir.strip()
        valid_dirs.append(dir)
        if os.path.isdir(dir):
            valid_existing_dirs.append(dir)
    used_mounts = set([get_mount_point_for_dir(dir) for dir in valid_existing_dirs])
    ignore_bad_mounts = default('/configurations/cluster-env/ignore_bad_mounts', False)
    manage_dirs_on_root = default('/configurations/cluster-env/manage_dirs_on_root', True)
    for dir_ in valid_dirs:
        last_mount_point_for_dir = (prev_dir_to_mount_point.get(dir_, None) if history_file_exists else None)
        curr_mount_point = get_mount_point_for_dir(dir_)
        is_non_root_dir = ((curr_mount_point is not None) and (curr_mount_point != '/'))
        folder_exists = (dir_ in valid_existing_dirs)
        if ((not folder_exists) and ignore_bad_mounts):
            Logger.debug("The directory {0} doesn't exist.".format(dir_))
            Logger.warning('Not creating {0} as cluster-env/ignore_bad_mounts is enabled.'.format(dir_))
            may_manage_this_dir = False
        else:
            may_manage_this_dir = _may_manage_folder(dir_, last_mount_point_for_dir, is_non_root_dir, dirs_unmounted, error_messages, manage_dirs_on_root, curr_mount_point)
            if (may_manage_this_dir and (dir_ not in valid_existing_dirs) and (curr_mount_point in used_mounts)):
                if default('/configurations/cluster-env/one_dir_per_partition', False):
                    may_manage_this_dir = False
                    Logger.warning((('Skipping creation of another directory on the following mount: ' + curr_mount_point) + ' . Please turn off cluster-env/one_dir_per_partition or handle the situation manually.'))
                else:
                    Logger.warning(('Trying to create another directory on the following mount: ' + str(curr_mount_point)))
        if may_manage_this_dir:
            Logger.info('Forcefully ensuring existence and permissions of the directory: {0}'.format(dir_))
            func(dir_)
            used_mounts.add(curr_mount_point)
    pass
    if update_cache:
        get_and_cache_mount_points(refresh=True)
    for dir in valid_dirs:
        if (os.path.isdir(dir) and (dir not in dirs_unmounted)):
            curr_mount_point = get_mount_point_for_dir(dir)
            dir_to_mount_point[dir] = curr_mount_point
    if (error_messages and (len(error_messages) > 0)):
        header = ' WARNING '.join((['*****'] * 6))
        header = (('\n' + '\n'.join(([header] * 3))) + '\n')
        msg = (' '.join(error_messages) + ' Please ensure that mounts are healthy. If the mount change was intentional, you can update the contents of {0}.'.format(history_filename))
        Logger.error(((header + msg) + header))
    dir_to_mount = DIR_TO_MOUNT_HEADER
    for kv in dir_to_mount_point.iteritems():
        dir_to_mount += (((kv[0] + ',') + kv[1]) + '\n')
    return dir_to_mount
