def delete_storm_zookeeper_data(self, env):
    '\n    Deletes the Storm data from ZooKeeper, effectively bringing down all\n    Storm daemons.\n    :return:\n    '
    import params
    Logger.info('Clearing Storm data from ZooKeeper')
    storm_zookeeper_root_dir = params.storm_zookeeper_root_dir
    if (storm_zookeeper_root_dir is None):
        raise Fail('The storm ZooKeeper directory specified by storm-site/storm.zookeeper.root must be specified')
    storm_zookeeper_server_list = yaml_utils.get_values_from_yaml_array(params.storm_zookeeper_servers)
    if (storm_zookeeper_server_list is None):
        Logger.info("Unable to extract ZooKeeper hosts from '{0}', assuming localhost").format(params.storm_zookeeper_servers)
        storm_zookeeper_server_list = ['localhost']
    if params.security_enabled:
        kinit_command = format('{kinit_path_local} -kt {smoke_user_keytab} {smokeuser_principal}; ')
        Execute(kinit_command, user=params.smokeuser)
    zookeeper_data_cleared = False
    for storm_zookeeper_server in storm_zookeeper_server_list:
        zk_command_location = '/usr/hdp/current/zookeeper-client/bin/zkCli.sh'
        if (params.version is not None):
            zk_command_location = '/usr/hdp/{0}/zookeeper/bin/zkCli.sh'.format(params.version)
        command = '{0} -server {1}:{2} rmr /storm'.format(zk_command_location, storm_zookeeper_server, params.storm_zookeeper_port)
        try:
            env_map = {'JAVA_HOME': params.java64_home, }
            Execute(command, user=params.storm_user, environment=env_map, logoutput=True, tries=1)
            zookeeper_data_cleared = True
            break
        except:
            pass
    if (not zookeeper_data_cleared):
        raise Fail('Unable to clear ZooKeeper Storm data on any of the following ZooKeeper hosts: {0}'.format(storm_zookeeper_server_list))
