def test_choice_includes(self):
    t = test_env.from_string('{% include ["missing", "header"] %}')
    assert (t.render(foo=42) == '[42|23]')
    t = test_env.from_string('{% include ["missing", "missing2"] ignore missing %}')
    assert (t.render(foo=42) == '')
    t = test_env.from_string('{% include ["missing", "missing2"] %}')
    self.assert_raises(TemplateNotFound, t.render)
    try:
        t.render()
    except TemplatesNotFound as e:
        assert (e.templates == ['missing', 'missing2'])
        assert (e.name == 'missing2')
    else:
        assert False, 'thou shalt raise'

    def test_includes(t, **ctx):
        ctx['foo'] = 42
        assert (t.render(ctx) == '[42|23]')
    t = test_env.from_string('{% include ["missing", "header"] %}')
    test_includes(t)
    t = test_env.from_string('{% include x %}')
    test_includes(t, x=['missing', 'header'])
    t = test_env.from_string('{% include [x, "header"] %}')
    test_includes(t, x='missing')
    t = test_env.from_string('{% include x %}')
    test_includes(t, x='header')
    t = test_env.from_string('{% include x %}')
    test_includes(t, x='header')
    t = test_env.from_string('{% include [x] %}')
    test_includes(t, x='header')
