{
  String filterName=LogSearchConstants.LOGFEEDER_FILTER_NAME;
  SolrQuery solrQuery=new SolrQuery();
  solrQuery.setQuery("*:*");
  String fq=LogSearchConstants.ROW_TYPE + ":" + filterName;
  solrQuery.setFilterQueries(fq);
  try {
    QueryResponse response=userConfigSolrDao.process(solrQuery);
    SolrDocumentList documentList=response.getResults();
    VLogfeederFilterWrapper logfeederFilterWrapper=null;
    if (documentList != null && documentList.size() > 0) {
      SolrDocument configDoc=documentList.get(0);
      String configJson=jsonUtil.objToJson(configDoc);
      HashMap<String,Object> configMap=(HashMap<String,Object>)jsonUtil.jsonToMapObject(configJson);
      String json=(String)configMap.get(LogSearchConstants.VALUES);
      logfeederFilterWrapper=(VLogfeederFilterWrapper)jsonUtil.jsonToObj(json,VLogfeederFilterWrapper.class);
      logfeederFilterWrapper.setId("" + configDoc.get(LogSearchConstants.ID));
    }
 else {
      String hadoopServiceString=getHadoopServiceConfigJSON();
      try {
        JSONObject componentList=new JSONObject();
        JSONObject jsonValue=new JSONObject();
        JSONObject hadoopServiceJsonObject=new JSONObject(hadoopServiceString).getJSONObject("service");
        Iterator<String> hadoopSerivceKeys=hadoopServiceJsonObject.keys();
        while (hadoopSerivceKeys.hasNext()) {
          String key=hadoopSerivceKeys.next();
          JSONArray componentArray=hadoopServiceJsonObject.getJSONObject(key).getJSONArray("components");
          for (int i=0; i < componentArray.length(); i++) {
            JSONObject compJsonObject=(JSONObject)componentArray.get(i);
            String componentName=compJsonObject.getString("name");
            JSONObject innerContent=new JSONObject();
            innerContent.put("label",componentName);
            innerContent.put("hosts",new JSONArray());
            innerContent.put("defaultLevels",new JSONArray());
            componentList.put(componentName,innerContent);
          }
        }
        jsonValue.put("filter",componentList);
        return saveUserFiter(jsonValue.toString());
      }
 catch (      JsonParseException|JSONException je) {
        logger.error(je);
        logfeederFilterWrapper=new VLogfeederFilterWrapper();
      }
    }
    return convertObjToString(logfeederFilterWrapper);
  }
 catch (  SolrException|SolrServerException|IOException e) {
    logger.error(e);
    throw restErrorUtil.createRESTException(e.getMessage(),MessageEnums.ERROR_SYSTEM);
  }
}
