{
  VLogfeederFilterWrapper logfeederFilterWrapper=(VLogfeederFilterWrapper)jsonUtil.jsonToObj(json,VLogfeederFilterWrapper.class);
  if (logfeederFilterWrapper == null) {
    logger.error("filter json is not a valid :" + json);
    throw restErrorUtil.createRESTException("Invalid filter json",MessageEnums.ERROR_SYSTEM);
  }
  String id=logfeederFilterWrapper.getId();
  if (!stringUtil.isEmpty(id)) {
    deleteUserConfig(id);
  }
  String filterName=LogSearchConstants.LOGFEEDER_FILTER_NAME;
  json=jsonUtil.objToJson(logfeederFilterWrapper);
  SolrInputDocument conifgDocument=new SolrInputDocument();
  conifgDocument.addField(LogSearchConstants.ID,new Date().getTime());
  conifgDocument.addField(LogSearchConstants.ROW_TYPE,filterName);
  conifgDocument.addField(LogSearchConstants.VALUES,json);
  conifgDocument.addField(LogSearchConstants.USER_NAME,filterName);
  conifgDocument.addField(LogSearchConstants.FILTER_NAME,filterName);
  try {
    userConfigSolrDao.addDocs(conifgDocument);
  }
 catch (  SolrException|SolrServerException|IOException e) {
    logger.error(e);
    throw restErrorUtil.createRESTException(e.getMessage(),MessageEnums.ERROR_SYSTEM);
  }
  return getUserFilter();
}
