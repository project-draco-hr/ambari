{
  try {
    String recordName=record.name();
    String contextName=record.context();
    StringBuilder sb=new StringBuilder();
    sb.append(contextName);
    sb.append('.');
    sb.append(recordName);
    appendPrefix(record,sb);
    sb.append(".");
    int sbBaseLen=sb.length();
    Collection<AbstractMetric> metrics=(Collection<AbstractMetric>)record.metrics();
    List<TimelineMetric> metricList=new ArrayList<TimelineMetric>();
    long startTime=record.timestamp();
    for (    AbstractMetric metric : metrics) {
      sb.append(metric.name());
      String name=sb.toString();
      Number value=metric.value();
      TimelineMetric timelineMetric=new TimelineMetric();
      timelineMetric.setMetricName(name);
      timelineMetric.setHostName(hostName);
      timelineMetric.setAppId(serviceName);
      timelineMetric.setStartTime(startTime);
      timelineMetric.setType(ClassUtils.getShortCanonicalName(value,"Number"));
      timelineMetric.getMetricValues().put(startTime,value.doubleValue());
      metricsCache.putTimelineMetric(timelineMetric,metric.type());
      TimelineMetric cachedMetric=metricsCache.getTimelineMetric(name);
      if (cachedMetric != null) {
        metricList.add(cachedMetric);
      }
      sb.setLength(sbBaseLen);
    }
    TimelineMetrics timelineMetrics=new TimelineMetrics();
    timelineMetrics.setMetrics(metricList);
    if (!metricList.isEmpty()) {
      emitMetrics(timelineMetrics);
    }
  }
 catch (  UnableToConnectException uce) {
    LOG.warn("Unable to send metrics to collector by address:" + uce.getConnectUrl());
  }
catch (  IOException io) {
    throw new MetricsException("Failed to putMetrics",io);
  }
}
