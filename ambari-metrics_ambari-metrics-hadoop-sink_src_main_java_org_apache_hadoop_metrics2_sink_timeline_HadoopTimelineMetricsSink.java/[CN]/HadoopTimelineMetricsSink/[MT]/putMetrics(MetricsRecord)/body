{
  try {
    String recordName=record.name();
    String contextName=record.context();
    StringBuilder sb=new StringBuilder();
    if (contextName.startsWith("ipc.")) {
      String portNumber=contextName.replaceFirst("ipc.","");
      if (rpcPortSuffixes.containsKey(portNumber)) {
        contextName="ipc." + rpcPortSuffixes.get(portNumber);
      }
    }
    sb.append(contextName);
    sb.append('.');
    if (contextName.equals("jvm")) {
      if (record.tags() != null) {
        for (        MetricsTag tag : record.tags()) {
          if (tag.info().name().equalsIgnoreCase("processName") && (tag.value().equals("RegionServer") || tag.value().equals("Master"))) {
            sb.append(tag.value());
            sb.append('.');
          }
        }
      }
    }
    sb.append(recordName);
    appendPrefix(record,sb);
    sb.append('.');
    if (!rpcPortSuffixes.isEmpty() && contextName.contains("rpc")) {
      if (record.tags() != null) {
        for (        MetricsTag tag : record.tags()) {
          if (tag.info().name().equalsIgnoreCase("port") && rpcPortSuffixes.keySet().contains(tag.value())) {
            sb.append(rpcPortSuffixes.get(tag.value()));
            sb.append('.');
          }
        }
      }
    }
    if (record.context().equals("container")) {
      emitContainerMetrics(record);
      return;
    }
    int sbBaseLen=sb.length();
    Collection<AbstractMetric> metrics=(Collection<AbstractMetric>)record.metrics();
    List<TimelineMetric> metricList=new ArrayList<TimelineMetric>();
    long startTime=record.timestamp();
    for (    AbstractMetric metric : metrics) {
      sb.append(metric.name());
      String name=sb.toString();
      Number value=metric.value();
      TimelineMetric timelineMetric=new TimelineMetric();
      timelineMetric.setMetricName(name);
      timelineMetric.setHostName(hostName);
      timelineMetric.setAppId(serviceName);
      timelineMetric.setStartTime(startTime);
      timelineMetric.setType(metric.type() != null ? metric.type().name() : null);
      timelineMetric.getMetricValues().put(startTime,value.doubleValue());
      boolean isCounter=MetricType.COUNTER == metric.type();
      metricsCache.putTimelineMetric(timelineMetric,isCounter);
      TimelineMetric cachedMetric=metricsCache.getTimelineMetric(name);
      if (cachedMetric != null) {
        metricList.add(cachedMetric);
      }
      sb.setLength(sbBaseLen);
    }
    TimelineMetrics timelineMetrics=new TimelineMetrics();
    timelineMetrics.setMetrics(metricList);
    if (!metricList.isEmpty()) {
      emitMetrics(timelineMetrics);
    }
  }
 catch (  UnableToConnectException uce) {
    LOG.warn("Unable to send metrics to collector by address:" + uce.getConnectUrl());
  }
}
