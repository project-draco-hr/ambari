{
  List<PermissionEntity> permissionEntities=new LinkedList<PermissionEntity>();
  PermissionEntity permissionEntity=createNiceMock(PermissionEntity.class);
  ResourceTypeEntity resourceTypeEntity=createNiceMock(ResourceTypeEntity.class);
  permissionEntities.add(permissionEntity);
  expect(dao.findAll()).andReturn(permissionEntities);
  expect(permissionEntity.getId()).andReturn(99);
  expect(permissionEntity.getPermissionName()).andReturn("AMBARI.ADMIN");
  expect(permissionEntity.getResourceType()).andReturn(resourceTypeEntity);
  expect(resourceTypeEntity.getName()).andReturn("AMBARI");
  replay(dao,permissionEntity,resourceTypeEntity);
  PermissionResourceProvider provider=new PermissionResourceProvider();
  Set<Resource> resources=provider.getResources(PropertyHelper.getReadRequest(),null);
  Assert.assertEquals(1,resources.size());
  Resource resource=resources.iterator().next();
  Assert.assertEquals(99,resource.getPropertyValue(PermissionResourceProvider.PERMISSION_ID_PROPERTY_ID));
  Assert.assertEquals("AMBARI.ADMIN",resource.getPropertyValue(PermissionResourceProvider.PERMISSION_NAME_PROPERTY_ID));
  Assert.assertEquals("AMBARI",resource.getPropertyValue(PermissionResourceProvider.RESOURCE_NAME_PROPERTY_ID));
  verify(dao,permissionEntity,resourceTypeEntity);
}
