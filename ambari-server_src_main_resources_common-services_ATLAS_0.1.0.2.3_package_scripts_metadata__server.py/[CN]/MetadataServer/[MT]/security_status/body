def security_status(self, env):
    import status_params
    env.set_params(status_params)
    props_value_check = {'metadata.authentication.method': 'kerberos', 'metadata.http.authentication.enabled': 'true', 'metadata.http.authentication.type': 'kerberos', }
    props_empty_check = ['metadata.authentication.principal', 'metadata.authentication.keytab', 'metadata.http.authentication.kerberos.principal', 'metadata.http.authentication.kerberos.keytab']
    props_read_check = ['metadata.authentication.keytab', 'metadata.http.authentication.kerberos.keytab']
    atlas_site_expectations = build_expectations('application-properties', props_value_check, props_empty_check, props_read_check)
    atlas_expectations = {}
    atlas_expectations.update(atlas_site_expectations)
    security_params = get_params_from_filesystem(status_params.conf_dir, {'application.properties': FILE_TYPE_PROPERTIES, })
    result_issues = validate_security_config_properties(security_params, atlas_expectations)
    if (not result_issues):
        try:
            if (('application-properties' not in security_params) or ('metadata.authentication.keytab' not in security_params['application-properties']) or ('metadata.authentication.principal' not in security_params['application-properties'])):
                self.put_structured_out({'securityState': 'UNSECURED', })
                self.put_structured_out({'securityIssuesFound': 'Atlas service keytab file or principal are not set property.', })
                return
            if (('application-properties' not in security_params) or ('metadata.http.authentication.kerberos.keytab' not in security_params['application-properties']) or ('metadata.http.authentication.kerberos.principal' not in security_params['application-properties'])):
                self.put_structured_out({'securityState': 'UNSECURED', })
                self.put_structured_out({'securityIssuesFound': 'HTTP Authentication keytab file or principal are not set property.', })
                return
            self.put_structured_out({'securityState': 'SECURED_KERBEROS', })
        except Exception as e:
            self.put_structured_out({'securityState': 'ERROR', })
            self.put_structured_out({'securityStateErrorInfo': str(e), })
    else:
        issues = []
        for cf in result_issues:
            issues.append(('Configuration file %s did not pass the validation. Reason: %s' % (cf, result_issues[cf])))
        self.put_structured_out({'securityIssuesFound': '. '.join(issues), })
        self.put_structured_out({'securityState': 'UNSECURED', })
