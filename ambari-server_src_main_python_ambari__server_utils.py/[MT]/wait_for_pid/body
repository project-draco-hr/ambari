def wait_for_pid(pids, server_init_timeout, occupy_port_timeout, init_web_ui_timeout, server_out_file, db_check_log, properties):
    '\n    Check pid for existence during timeout\n  '
    ambari_server_ui_port = 8080
    api_ssl = properties.get_property('api.ssl')
    ssl_api_port = properties.get_property('client.api.ssl.port')
    if (api_ssl and (str(api_ssl).lower() == 'true')):
        if ssl_api_port:
            ambari_server_ui_port = int(ssl_api_port)
    server_ui_port_occupied = False
    tstart = time.time()
    pid_live = 0
    while ((int((time.time() - tstart)) <= occupy_port_timeout) and (len(pids) > 0)):
        sys.stdout.write('.')
        sys.stdout.flush()
        pid_live = 0
        for item in pids:
            if pid_exists(item['pid']):
                pid_live += 1
        time.sleep(1)
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(1)
            sock.connect(('localhost', ambari_server_ui_port))
            print ('\nServer started listening on ' + str(ambari_server_ui_port))
            server_ui_port_occupied = True
            break
        except Exception as e:
            pass
    if ('Database consistency check: failed' in open(server_out_file).read()):
        print (('\nDB configs consistency check failed. Run "ambari-server start --skip-database-check" to skip. If you use this "--skip-database-check" option, do not make any changes to your cluster topology or perform a cluster upgrade until you correct the database consistency issues. See ' + db_check_log) + 'for more details on the consistency issues.')
    else:
        print '\nDB consistency check: no errors were found.'
    if (not server_ui_port_occupied):
        raise FatalException(1, (((('Server not yet listening on http port ' + str(ambari_server_ui_port)) + ' after ') + str((occupy_port_timeout + server_init_timeout))) + ' seconds. Exiting.'))
    tstart = time.time()
    print 'Waiting for 10 seconds, for server WEB UI initialization'
    while ((int((time.time() - tstart)) <= init_web_ui_timeout) and (len(pids) > 0)):
        sys.stdout.write('.')
        sys.stdout.flush()
        pid_live = 0
        for item in pids:
            if pid_exists(item['pid']):
                pid_live += 1
        time.sleep(1)
    return pid_live
