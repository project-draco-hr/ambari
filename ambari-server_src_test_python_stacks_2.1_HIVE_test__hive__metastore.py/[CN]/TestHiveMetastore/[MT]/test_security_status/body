@patch('resource_management.libraries.functions.security_commons.build_expectations')
@patch('resource_management.libraries.functions.security_commons.get_params_from_filesystem')
@patch('resource_management.libraries.functions.security_commons.validate_security_config_properties')
@patch('resource_management.libraries.functions.security_commons.cached_kinit_executor')
@patch('resource_management.libraries.script.Script.put_structured_out')
def test_security_status(self, put_structured_out_mock, cached_kinit_executor_mock, validate_security_config_mock, get_params_mock, build_exp_mock):
    security_params = {'hive-site': {'hive.server2.authentication': 'KERBEROS', 'hive.metastore.sasl.enabled': 'true', 'hive.security.authorization.enabled': 'true', 'hive.metastore.kerberos.keytab.file': 'path/to/keytab', 'hive.metastore.kerberos.principal': 'principal', }, }
    result_issues = []
    props_value_check = {'hive.server2.authentication': 'KERBEROS', 'hive.metastore.sasl.enabled': 'true', 'hive.security.authorization.enabled': 'true', }
    props_empty_check = ['hive.metastore.kerberos.keytab.file', 'hive.metastore.kerberos.principal']
    props_read_check = ['hive.metastore.kerberos.keytab.file']
    get_params_mock.return_value = security_params
    validate_security_config_mock.return_value = result_issues
    self.executeScript((self.COMMON_SERVICES_PACKAGE_DIR + '/scripts/hive_metastore.py'), classname='HiveMetastore', command='security_status', config_file='../../2.1/configs/secured.json', hdp_stack_version=self.STACK_VERSION, target=RMFTestCase.TARGET_COMMON_SERVICES)
    get_params_mock.assert_called_with('/etc/hive/conf', {'hive-site.xml': 'XML', })
    build_exp_mock.assert_called_with('hive-site', props_value_check, props_empty_check, props_read_check)
    put_structured_out_mock.assert_called_with({'securityState': 'SECURED_KERBEROS', })
    self.assertTrue(cached_kinit_executor_mock.call_count, 2)
    cached_kinit_executor_mock.assert_called_with('/usr/bin/kinit', self.config_dict['configurations']['hive-env']['hive_user'], security_params['hive-site']['hive.metastore.kerberos.keytab.file'], security_params['hive-site']['hive.metastore.kerberos.principal'], self.config_dict['hostname'], '/tmp')
    cached_kinit_executor_mock.reset_mock()
    cached_kinit_executor_mock.side_effect = Exception('Invalid command')
    try:
        self.executeScript((self.COMMON_SERVICES_PACKAGE_DIR + '/scripts/hive_metastore.py'), classname='HiveMetastore', command='security_status', config_file='../../2.1/configs/secured.json', hdp_stack_version=self.STACK_VERSION, target=RMFTestCase.TARGET_COMMON_SERVICES)
    except:
        self.assertTrue(True)
    empty_security_params = {}
    cached_kinit_executor_mock.reset_mock()
    get_params_mock.reset_mock()
    put_structured_out_mock.reset_mock()
    get_params_mock.return_value = empty_security_params
    self.executeScript((self.COMMON_SERVICES_PACKAGE_DIR + '/scripts/hive_metastore.py'), classname='HiveMetastore', command='security_status', config_file='../../2.1/configs/secured.json', hdp_stack_version=self.STACK_VERSION, target=RMFTestCase.TARGET_COMMON_SERVICES)
    put_structured_out_mock.assert_called_with({'securityIssuesFound': 'Keytab file or principal are not set property.', })
    result_issues_with_params = {'hive-site': 'Something bad happened', }
    validate_security_config_mock.reset_mock()
    get_params_mock.reset_mock()
    validate_security_config_mock.return_value = result_issues_with_params
    get_params_mock.return_value = security_params
    self.executeScript((self.COMMON_SERVICES_PACKAGE_DIR + '/scripts/hive_metastore.py'), classname='HiveMetastore', command='security_status', config_file='../../2.1/configs/secured.json', hdp_stack_version=self.STACK_VERSION, target=RMFTestCase.TARGET_COMMON_SERVICES)
    put_structured_out_mock.assert_called_with({'securityState': 'UNSECURED', })
    self.executeScript((self.COMMON_SERVICES_PACKAGE_DIR + '/scripts/hive_metastore.py'), classname='HiveMetastore', command='security_status', config_file='../../2.1/configs/default.json', hdp_stack_version=self.STACK_VERSION, target=RMFTestCase.TARGET_COMMON_SERVICES)
    put_structured_out_mock.assert_called_with({'securityState': 'UNSECURED', })
