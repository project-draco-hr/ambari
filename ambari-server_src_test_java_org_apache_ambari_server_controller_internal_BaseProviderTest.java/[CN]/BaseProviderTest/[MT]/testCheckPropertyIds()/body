{
  Set<String> propertyIds=new HashSet<String>();
  propertyIds.add("foo");
  propertyIds.add("bar");
  propertyIds.add("cat1/prop1");
  propertyIds.add("cat2/prop2");
  propertyIds.add("cat3/subcat3/prop3");
  propertyIds.add("cat4/subcat4/map");
  BaseProvider provider=new TestProvider(propertyIds);
  Assert.assertTrue(provider.checkPropertyIds(propertyIds).isEmpty());
  Assert.assertTrue(provider.checkPropertyIds(Collections.singleton("cat1")).isEmpty());
  Assert.assertTrue(provider.checkPropertyIds(Collections.singleton("cat2")).isEmpty());
  Assert.assertTrue(provider.checkPropertyIds(Collections.singleton("cat3")).isEmpty());
  Assert.assertTrue(provider.checkPropertyIds(Collections.singleton("cat3/subcat3")).isEmpty());
  Assert.assertTrue(provider.checkPropertyIds(Collections.singleton("cat4/subcat4/map")).isEmpty());
  Assert.assertTrue(provider.checkPropertyIds(Collections.singleton("cat4/subcat4/map/key")).isEmpty());
  propertyIds.add("badprop");
  propertyIds.add("badcat");
  Set<String> unsupportedPropertyIds=provider.checkPropertyIds(propertyIds);
  Assert.assertFalse(unsupportedPropertyIds.isEmpty());
  Assert.assertEquals(2,unsupportedPropertyIds.size());
  Assert.assertTrue(unsupportedPropertyIds.contains("badprop"));
  Assert.assertTrue(unsupportedPropertyIds.contains("badcat"));
}
