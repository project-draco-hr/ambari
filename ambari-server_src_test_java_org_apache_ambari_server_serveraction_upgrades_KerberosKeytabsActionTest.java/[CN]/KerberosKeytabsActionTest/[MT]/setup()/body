{
  m_clusters=EasyMock.createMock(Clusters.class);
  m_kerberosHelper=EasyMock.createMock(KerberosHelper.class);
  m_kerberosConfig=new ConfigImpl("kerberos-env"){
    Map<String,String> mockProperties=new HashMap<String,String>(){
{
        put("kerberos-env","");
      }
    }
;
    @Override public Map<String,String> getProperties(){
      return mockProperties;
    }
    @Override public void setProperties(    Map<String,String> properties){
      mockProperties.putAll(properties);
    }
    @Override public void persist(    boolean newConfig){
    }
  }
;
  Cluster cluster=EasyMock.createMock(Cluster.class);
  expect(cluster.getDesiredConfigByType("kerberos-env")).andReturn(m_kerberosConfig).atLeastOnce();
  expect(cluster.getSecurityType()).andReturn(SecurityType.KERBEROS).anyTimes();
  expect(m_clusters.getCluster((String)anyObject())).andReturn(cluster).anyTimes();
  replay(m_clusters,cluster);
  m_injector=Guice.createInjector(new AbstractModule(){
    @Override protected void configure(){
      bind(Clusters.class).toInstance(m_clusters);
      bind(KerberosHelper.class).toInstance(m_kerberosHelper);
      bind(AuditLogger.class).toInstance(EasyMock.createNiceMock(AuditLogger.class));
    }
  }
);
}
