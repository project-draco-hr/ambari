{
  HashMap<String,Object> mergedRoleCommandOrders=new HashMap<String,Object>();
  HashMap<String,Object> parentData=parent.getContent();
  List<String> keys=Arrays.asList(GENERAL_DEPS_KEY,GLUSTERFS_DEPS_KEY,NO_GLUSTERFS_DEPS_KEY,NAMENODE_HA_DEPS_KEY,RESOURCEMANAGER_HA_DEPS_KEY);
  for (  String key : keys) {
    if (parentData.containsKey(key) && content.containsKey(key)) {
      Map<String,Object> result=new HashMap<String,Object>();
      Map<String,Object> parentProperties=(Map<String,Object>)parentData.get(key);
      Map<String,Object> childProperties=(Map<String,Object>)content.get(key);
      MultiValueMap childAndParentProperties=new MultiValueMap();
      childAndParentProperties.putAll(childProperties);
      childAndParentProperties.putAll(parentProperties);
      for (      Object property : childAndParentProperties.keySet()) {
        List propertyValues=(List)childAndParentProperties.get(property);
        result.put((String)property,propertyValues.get(0));
      }
      mergedRoleCommandOrders.put(key,result);
    }
 else     if (content.containsKey(key)) {
      mergedRoleCommandOrders.put(key,content.get(key));
    }
 else     if (parentData.containsKey(key)) {
      mergedRoleCommandOrders.put(key,parentData.get(key));
    }
  }
  this.content=mergedRoleCommandOrders;
}
