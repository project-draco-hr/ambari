{
  Resource.Type type=Resource.Type.Member;
  AmbariManagementController managementController=createMock(AmbariManagementController.class);
  RequestStatusResponse response=createNiceMock(RequestStatusResponse.class);
  ResourceProviderFactory resourceProviderFactory=createNiceMock(ResourceProviderFactory.class);
  AbstractControllerResourceProvider.init(resourceProviderFactory);
  expect(resourceProviderFactory.getMemberResourceProvider(anyObject(Set.class),anyObject(Map.class),eq(managementController))).andReturn(new MemberResourceProvider(PropertyHelper.getPropertyIds(type),PropertyHelper.getKeyPropertyIds(type),managementController)).anyTimes();
  expect(managementController.getMembers(AbstractResourceProviderTest.Matcher.getMemberRequestSet(null,null))).andReturn(Collections.<MemberResponse>emptySet()).atLeastOnce();
  replay(managementController,response,resourceProviderFactory);
  SecurityContextHolder.getContext().setAuthentication(authentication);
  ResourceProvider provider=AbstractControllerResourceProvider.getResourceProvider(type,PropertyHelper.getPropertyIds(type),PropertyHelper.getKeyPropertyIds(type),managementController);
  Request request=PropertyHelper.getReadRequest(null,null);
  Predicate predicate=new PredicateBuilder().property(GroupResourceProvider.GROUP_GROUPNAME_PROPERTY_ID).equals("engineering").toPredicate();
  provider.getResources(request,predicate);
  verify(managementController,response);
}
