{
  Resource.Type type=Resource.Type.Member;
  AmbariManagementController managementController=createMock(AmbariManagementController.class);
  RequestStatusResponse response=createNiceMock(RequestStatusResponse.class);
  ResourceProviderFactory resourceProviderFactory=createNiceMock(ResourceProviderFactory.class);
  AbstractControllerResourceProvider.init(resourceProviderFactory);
  expect(resourceProviderFactory.getMemberResourceProvider(anyObject(Set.class),anyObject(Map.class),eq(managementController))).andReturn(new MemberResourceProvider(PropertyHelper.getPropertyIds(type),PropertyHelper.getKeyPropertyIds(type),managementController)).anyTimes();
  managementController.createMembers(AbstractResourceProviderTest.Matcher.getMemberRequestSet("engineering","joe"));
  expectLastCall().atLeastOnce();
  replay(managementController,response,resourceProviderFactory);
  SecurityContextHolder.getContext().setAuthentication(authentication);
  ResourceProvider provider=AbstractControllerResourceProvider.getResourceProvider(type,PropertyHelper.getPropertyIds(type),PropertyHelper.getKeyPropertyIds(type),managementController);
  Set<Map<String,Object>> propertySet=new LinkedHashSet<Map<String,Object>>();
  Map<String,Object> properties=new LinkedHashMap<String,Object>();
  properties.put(MemberResourceProvider.MEMBER_GROUP_NAME_PROPERTY_ID,"engineering");
  properties.put(MemberResourceProvider.MEMBER_USER_NAME_PROPERTY_ID,"joe");
  propertySet.add(properties);
  Request request=PropertyHelper.getCreateRequest(propertySet,null);
  provider.createResources(request);
  verify(managementController,response);
}
