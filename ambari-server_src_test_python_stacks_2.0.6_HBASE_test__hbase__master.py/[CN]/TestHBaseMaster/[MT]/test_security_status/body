@patch('resource_management.libraries.functions.security_commons.build_expectations')
@patch('resource_management.libraries.functions.security_commons.get_params_from_filesystem')
@patch('resource_management.libraries.functions.security_commons.validate_security_config_properties')
@patch('resource_management.libraries.functions.security_commons.cached_kinit_executor')
@patch('resource_management.libraries.script.Script.put_structured_out')
def test_security_status(self, put_structured_out_mock, cached_kinit_executor_mock, validate_security_config_mock, get_params_mock, build_exp_mock):
    import collections
    security_params = {'hbase-site': {'hbase.master.kerberos.principal': '/path/to/hbase_keytab', 'hbase.master.keytab.file': 'hbase_principal', }, }
    status_params = {'kinit_path_local': '/bin/kinit', 'hbase_user': 'hbase', 'hostname': 'localhost', 'tmp_dir': '/thisdoesmotexost', }
    result_issues = []
    props_value_check = {'hbase.security.authentication': 'kerberos', 'hbase.security.authorization': 'true', }
    props_empty_check = ['hbase.master.keytab.file', 'hbase.master.kerberos.principal']
    props_read_check = ['hbase.master.keytab.file']
    get_params_mock.return_value = security_params
    validate_security_config_mock.return_value = result_issues
    self.executeScript((self.COMMON_SERVICES_PACKAGE_DIR + '/scripts/hbase_master.py'), classname='HbaseMaster', command='security_status', config_file='secured.json', hdp_stack_version=self.STACK_VERSION, target=RMFTestCase.TARGET_COMMON_SERVICES)
    build_exp_mock.assert_called_with('hbase-site', props_value_check, props_empty_check, props_read_check)
    put_structured_out_mock.assert_called_with({'securityState': 'SECURED_KERBEROS', })
    cached_kinit_executor_mock.called_with(status_params['kinit_path_local'], status_params['hbase_user'], security_params['hbase-site']['hbase.master.keytab.file'], security_params['hbase-site']['hbase.master.kerberos.principal'], status_params['hostname'], status_params['tmp_dir'], 30)
    cached_kinit_executor_mock.reset_mock()
    cached_kinit_executor_mock.side_effect = Exception('Invalid command')
    try:
        self.executeScript((self.COMMON_SERVICES_PACKAGE_DIR + '/scripts/hbase_master.py'), classname='HbaseMaster', command='security_status', config_file='secured.json', hdp_stack_version=self.STACK_VERSION, target=RMFTestCase.TARGET_COMMON_SERVICES)
    except:
        self.assertTrue(True)
    empty_security_params = {}
    cached_kinit_executor_mock.reset_mock()
    get_params_mock.reset_mock()
    put_structured_out_mock.reset_mock()
    get_params_mock.return_value = empty_security_params
    self.executeScript((self.COMMON_SERVICES_PACKAGE_DIR + '/scripts/hbase_master.py'), classname='HbaseMaster', command='security_status', config_file='secured.json', hdp_stack_version=self.STACK_VERSION, target=RMFTestCase.TARGET_COMMON_SERVICES)
    put_structured_out_mock.assert_called_with({'securityIssuesFound': 'Keytab file or principal are not set property.', })
    result_issues_with_params = {}
    result_issues_with_params['hbase-site'] = 'Something bad happened'
    validate_security_config_mock.reset_mock()
    get_params_mock.reset_mock()
    validate_security_config_mock.return_value = result_issues_with_params
    get_params_mock.return_value = security_params
    self.executeScript((self.COMMON_SERVICES_PACKAGE_DIR + '/scripts/hbase_master.py'), classname='HbaseMaster', command='security_status', config_file='default.json', hdp_stack_version=self.STACK_VERSION, target=RMFTestCase.TARGET_COMMON_SERVICES)
    put_structured_out_mock.assert_called_with({'securityState': 'UNSECURED', })
    self.executeScript((self.COMMON_SERVICES_PACKAGE_DIR + '/scripts/hbase_master.py'), classname='HbaseMaster', command='security_status', config_file='secured.json', hdp_stack_version=self.STACK_VERSION, target=RMFTestCase.TARGET_COMMON_SERVICES)
    put_structured_out_mock.assert_called_with({'securityState': 'UNSECURED', })
