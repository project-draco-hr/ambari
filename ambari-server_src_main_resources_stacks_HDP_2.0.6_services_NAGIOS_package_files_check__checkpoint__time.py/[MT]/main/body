def main():
    current_time = int(round((time.time() * 1000)))
    parser = optparse.OptionParser()
    parser.add_option('-H', '--host', dest='host', default='localhost', help='NameNode host')
    parser.add_option('-p', '--port', dest='port', default='50070', help='NameNode jmx port')
    parser.add_option('-w', '--warning', dest='warning', default='200', help='Percent for warning alert')
    parser.add_option('-c', '--critical', dest='crit', default='200', help='Percent for critical alert')
    parser.add_option('-t', '--period', dest='period', default='21600', help='Period time')
    parser.add_option('-x', '--txns', dest='txns', default='1000000', help="CheckpointNode will create a checkpoint of the namespace every 'dfs.namenode.checkpoint.txns'")
    (options, args) = parser.parse_args()
    host = get_available_nn_host(options)
    last_checkpoint_time_qry = 'http://{host}:{port}/jmx?qry=Hadoop:service=NameNode,name=FSNamesystem'.format(host=host, port=options.port)
    last_checkpoint_time = int(get_value_from_jmx(last_checkpoint_time_qry, 'LastCheckpointTime'))
    journal_transaction_info_qry = 'http://{host}:{port}/jmx?qry=Hadoop:service=NameNode,name=NameNodeInfo'.format(host=host, port=options.port)
    journal_transaction_info = get_value_from_jmx(journal_transaction_info_qry, 'JournalTransactionInfo')
    journal_transaction_info_dict = json.loads(journal_transaction_info)
    last_txid = int(journal_transaction_info_dict['LastAppliedOrWrittenTxId'])
    most_txid = int(journal_transaction_info_dict['MostRecentCheckpointTxId'])
    delta = ((current_time - last_checkpoint_time) / 1000)
    if (((last_txid - most_txid) > int(options.txns)) and (((float(delta) / int(options.period)) * 100) >= int(options.crit))):
        print CRIT_MESSAGE.format(h=get_time(delta)['h'], m=get_time(delta)['m'])
        exit(2)
    elif (((last_txid - most_txid) > int(options.txns)) and (((float(delta) / int(options.period)) * 100) >= int(options.warning))):
        print WARNING_MESSAGE.format(h=get_time(delta)['h'], m=get_time(delta)['m'])
        exit(1)
    else:
        print OK_MESSAGE
        exit(0)
