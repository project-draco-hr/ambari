'\nLicensed to the Apache Software Foundation (ASF) under one\nor more contributor license agreements.  See the NOTICE file\ndistributed with this work for additional information\nregarding copyright ownership.  The ASF licenses this file\nto you under the Apache License, Version 2.0 (the\n"License"); you may not use this file except in compliance\nwith the License.  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n'
from ambari_commons.constants import AMBARI_SUDO_BINARY
from resource_management.libraries.functions.default import default
from resource_management.libraries.functions.format import format
from resource_management.libraries.functions.is_empty import is_empty
from resource_management.libraries.script.script import Script
import os
import status_params
config = Script.get_config()
tmp_dir = Script.get_tmp_dir()
stack_version = default('/commandParams/version', None)
sudo = AMBARI_SUDO_BINARY
logsearch_solr_conf = '/etc/ambari-logsearch-solr/conf'
logsearch_server_conf = '/etc/ambari-logsearch-portal/conf'
logsearch_logfeeder_conf = '/etc/ambari-logsearch-logfeeder/conf'
logsearch_config_set_dir = format('{logsearch_server_conf}/solr_configsets')
logsearch_solr_port = status_params.logsearch_solr_port
logsearch_solr_piddir = status_params.logsearch_solr_piddir
logsearch_solr_pidfile = status_params.logsearch_solr_pidfile
logsearch_pid_dir = status_params.logsearch_pid_dir
logsearch_pid_file = status_params.logsearch_pid_file
logfeeder_pid_dir = status_params.logfeeder_pid_dir
logfeeder_pid_file = status_params.logfeeder_pid_file
user_group = config['configurations']['cluster-env']['user_group']
fetch_nonlocal_groups = config['configurations']['cluster-env']['fetch_nonlocal_groups']
java64_home = config['hostLevelParams']['java_home']
zookeeper_hosts_list = config['clusterHostInfo']['zookeeper_hosts']
zookeeper_hosts_list.sort()
zookeeper_hosts = ','.join(zookeeper_hosts_list)
cluster_name = str(config['clusterName'])
if ('metrics_collector_hosts' in config['clusterHostInfo']):
    metrics_collector_hosts_list = ','.join(config['clusterHostInfo']['metrics_collector_hosts'])
    metrics_collector_port = str(get_port_from_url(config['configurations']['ams-site']['timeline.metrics.service.webapp.address']))
    metrics_collector_hosts = format('http://{metrics_collector_hosts_list}:{metrics_collector_port}/ws/v1/timeline/metrics')
else:
    metrics_collector_hosts = ''
solr_cloudmode = 'true'
solr_dir = '/usr/lib/ambari-logsearch-solr'
solr_client_dir = '/usr/lib/ambari-logsearch-solr-client'
solr_bindir = (solr_dir + '/bin')
cloud_scripts = (solr_dir + '/server/scripts/cloud-scripts')
logsearch_solr_znode = config['configurations']['logsearch-solr-env']['logsearch_solr_znode']
logsearch_solr_min_mem = format(config['configurations']['logsearch-solr-env']['logsearch_solr_minmem'])
logsearch_solr_max_mem = format(config['configurations']['logsearch-solr-env']['logsearch_solr_maxmem'])
logsearch_solr_instance_count = len(config['clusterHostInfo']['logsearch_solr_hosts'])
logsearch_solr_datadir = format(config['configurations']['logsearch-solr-env']['logsearch_solr_datadir'])
logsearch_solr_data_resources_dir = os.path.join(logsearch_solr_datadir, 'resources')
logsearch_service_logs_max_retention = config['configurations']['logsearch-service_logs-solrconfig']['logsearch_service_logs_max_retention']
logsearch_service_logs_merge_factor = config['configurations']['logsearch-service_logs-solrconfig']['logsearch_service_logs_merge_factor']
logsearch_audit_logs_max_retention = config['configurations']['logsearch-audit_logs-solrconfig']['logsearch_audit_logs_max_retention']
logsearch_audit_logs_merge_factor = config['configurations']['logsearch-audit_logs-solrconfig']['logsearch_audit_logs_merge_factor']
logsearch_solr_metrics_collector_hosts = format(config['configurations']['logsearch-properties']['logsearch.solr.metrics.collector.hosts'])
logsearch_solr_jmx_port = config['configurations']['logsearch-solr-env']['logsearch_solr_jmx_port']
logsearch_service_logs_fields = config['configurations']['logsearch-properties']['logsearch.service.logs.fields']
logsearch_audit_logs_split_interval_mins = config['configurations']['logsearch-properties']['logsearch.audit.logs.split.interval.mins']
logsearch_service_logs_split_interval_mins = config['configurations']['logsearch-properties']['logsearch.service.logs.split.interval.mins']
zookeeper_port = default('/configurations/zoo.cfg/clientPort', None)
index = 0
zookeeper_quorum = ''
for host in config['clusterHostInfo']['zookeeper_hosts']:
    zookeeper_quorum += ((host + ':') + str(zookeeper_port))
    index += 1
    if (index < len(config['clusterHostInfo']['zookeeper_hosts'])):
        zookeeper_quorum += ','
if ('zoo.cfg' in config['configurations']):
    zoo_cfg_properties_map = config['configurations']['zoo.cfg']
else:
    zoo_cfg_properties_map = {}
logsearch_solr_user = config['configurations']['logsearch-solr-env']['logsearch_solr_user']
logsearch_solr_log_dir = config['configurations']['logsearch-solr-env']['logsearch_solr_log_dir']
logsearch_solr_client_log_dir = config['configurations']['logsearch-solr-env']['logsearch_solr_client_log_dir']
logsearch_solr_client_log = format('{logsearch_solr_client_log_dir}/solr-client.log')
logsearch_solr_log = format('{logsearch_solr_log_dir}/solr-install.log')
solr_env_content = config['configurations']['logsearch-solr-env']['content']
solr_xml_content = config['configurations']['logsearch-solr-xml']['content']
solr_log4j_content = config['configurations']['logsearch-solr-log4j']['content']
solr_client_log4j_content = config['configurations']['logsearch-solr-client-log4j']['content']
logsearch_dir = '/usr/lib/ambari-logsearch-portal'
logsearch_collection_service_logs_numshards_config = config['configurations']['logsearch-properties']['logsearch.collection.service.logs.numshards']
logsearch_collection_audit_logs_numshards_config = config['configurations']['logsearch-properties']['logsearch.collection.audit.logs.numshards']
if (logsearch_collection_service_logs_numshards_config > 0):
    logsearch_collection_service_logs_numshards = str(logsearch_collection_service_logs_numshards_config)
else:
    logsearch_collection_service_logs_numshards = format(str(logsearch_solr_instance_count))
if (logsearch_collection_audit_logs_numshards_config > 0):
    logsearch_collection_audit_logs_numshards = str(logsearch_collection_audit_logs_numshards_config)
else:
    logsearch_collection_audit_logs_numshards = format(str(logsearch_solr_instance_count))
logsearch_collection_service_logs_replication_factor = str(config['configurations']['logsearch-properties']['logsearch.collection.service.logs.replication.factor'])
logsearch_collection_audit_logs_replication_factor = str(config['configurations']['logsearch-properties']['logsearch.collection.audit.logs.replication.factor'])
logsearch_solr_collection_service_logs = default('/configurations/logsearch-properties/logsearch.solr.collection.service.logs', 'hadoop_logs')
logsearch_solr_collection_audit_logs = default('/configurations/logsearch-properties/logsearch.solr.collection.audit.logs', 'audit_logs')
logsearch_logfeeder_include_default_level = default('/configurations/logsearch-properties/logsearch.logfeeder.include.default.level', 'fatal,error,warn')
logsearch_solr_audit_logs_use_ranger = default('/configurations/logsearch-env/logsearch_solr_audit_logs_use_ranger', False)
logsearch_solr_audit_logs_url = ''
if logsearch_solr_audit_logs_use_ranger:
    ranger_audit_solr_zookeepers = default('/configurations/ranger-admin-site/ranger.audit.solr.zookeepers', None)
    logsearch_solr_audit_logs_url = default('/configurations/ranger-admin-site/ranger.audit.solr.urls', solr_audit_logs_url)
else:
    logsearch_solr_audit_logs_zk_node = default('/configurations/logsearch-env/logsearch_solr_audit_logs_zk_node', None)
    logsearch_solr_audit_logs_zk_quorum = default('/configurations/logsearch-env/logsearch_solr_audit_logs_zk_quorum', None)
    if (not logsearch_solr_audit_logs_zk_quorum):
        logsearch_solr_audit_logs_zk_quorum = zookeeper_quorum
    if (not logsearch_solr_audit_logs_zk_node):
        logsearch_solr_audit_logs_zk_node = logsearch_solr_znode
    logsearch_solr_audit_logs_zk_node = format(logsearch_solr_audit_logs_zk_node)
    logsearch_solr_audit_logs_zk_quorum = format(logsearch_solr_audit_logs_zk_quorum)
logsearch_custom_properties = dict(config['configurations']['logsearch-properties'])
logsearch_custom_properties.pop('logsearch.service.logs.fields', None)
logsearch_custom_properties.pop('logsearch.audit.logs.split.interval.mins', None)
logsearch_custom_properties.pop('logsearch.collection.service.logs.replication.factor', None)
logsearch_custom_properties.pop('logsearch.solr.collection.service.logs', None)
logsearch_custom_properties.pop('logsearch.solr.metrics.collector.hosts', None)
logsearch_custom_properties.pop('logsearch.solr.collection.audit.logs', None)
logsearch_custom_properties.pop('logsearch.logfeeder.include.default.level', None)
logsearch_custom_properties.pop('logsearch.collection.audit.logs.replication.factor', None)
logsearch_custom_properties.pop('logsearch.collection.service.logs.numshards', None)
logsearch_custom_properties.pop('logsearch.service.logs.split.interval.mins', None)
logsearch_custom_properties.pop('logsearch.collection.audit.logs.numshards', None)
logsearch_custom_properties.pop('logsearch.external.auth.enabled', None)
logsearch_custom_properties.pop('logsearch.external.auth.host_url', None)
logsearch_custom_properties.pop('logsearch.external.auth.login_url', None)
logsearch_user = config['configurations']['logsearch-env']['logsearch_user']
logsearch_log_dir = config['configurations']['logsearch-env']['logsearch_log_dir']
logsearch_log = (logsearch_log_dir + '/logsearch.out')
logsearch_ui_port = config['configurations']['logsearch-env']['logsearch_ui_port']
logsearch_debug_enabled = str(config['configurations']['logsearch-env']['logsearch_debug_enabled']).lower()
logsearch_debug_port = config['configurations']['logsearch-env']['logsearch_debug_port']
logsearch_app_max_memory = config['configurations']['logsearch-env']['logsearch_app_max_memory']
logsearch_env_content = config['configurations']['logsearch-env']['content']
logsearch_service_logs_solrconfig_content = config['configurations']['logsearch-service_logs-solrconfig']['content']
logsearch_audit_logs_solrconfig_content = config['configurations']['logsearch-audit_logs-solrconfig']['content']
logsearch_app_log4j_content = config['configurations']['logsearch-log4j']['content']
ambari_server_log_dir = '/var/log/ambari-server'
ambari_agent_log_dir = '/var/log/ambari-agent'
knox_log_dir = '/var/log/knox'
metrics_collector_log_dir = default('/configurations/ams-env/metrics_collector_log_dir', '/var/log')
metrics_monitor_log_dir = default('/configurations/ams-env/metrics_monitor_log_dir', '/var/log')
atlas_log_dir = default('/configurations/atlas-env/metadata_log_dir', '/var/log/atlas')
accumulo_log_dir = default('/configurations/accumulo-env/accumulo_log_dir', '/var/log/accumulo')
falcon_log_dir = default('/configurations/falcon-env/falcon_log_dir', '/var/log/falcon')
hbase_log_dir = default('/configurations/hbase-env/hbase_log_dir', '/var/log/hbase')
hdfs_log_dir_prefix = default('/configurations/hadoop-env/hdfs_log_dir_prefix', '/var/log/hadoop')
hive_log_dir = default('/configurations/hive-env/hive_log_dir', '/var/log/hive')
kafka_log_dir = default('/configurations/kafka-env/kafka_log_dir', '/var/log/kafka')
nifi_master_log_dir = default('/configurations/nifi-bootstrap-env/nifi_master_log_dir', '/var/log/nifi_master')
nifi_node_log_dir = default('/configurations/nifi-bootstrap-env/nifi_nod_log_dir', '/var/log/nifi_node')
oozie_log_dir = default('/configurations/oozie-env/oozie_log_dir', '/var/log/oozie')
ranger_usersync_log_dir = default('/configurations/ranger-env/ranger_usersync_log_dir', '/var/log/ranger/usersync')
ranger_admin_log_dir = default('/configurations/ranger-env/ranger_admin_log_dir', '/var/log/ranger/admin')
ranger_kms_log_dir = default('/configurations/kms-env/kms_log_dir', '/var/log/ranger/kms')
storm_log_dir = default('/configurations/storm-env/storm_log_dir', '/var/log/storm')
yarn_log_dir_prefix = default('/configurations/yarn-env/yarn_log_dir_prefix', '/var/log/hadoop')
mapred_log_dir_prefix = default('/configurations/mapred-env/mapred_log_dir_prefix', '/var/log/hadoop')
zk_log_dir = default('/configurations/zookeeper-env/zk_log_dir', '/var/log/zookeeper')
logsearch_admin_credential_file = 'logsearch-admin.json'
logsearch_admin_username = default('/configurations/logsearch-admin-json/logsearch_admin_username', 'admin')
logsearch_admin_password = default('/configurations/logsearch-admin-json/logsearch_admin_password', '')
logsearch_admin_content = config['configurations']['logsearch-admin-json']['content']
if ('ambari_server_host' in config['clusterHostInfo']):
    ambari_server_host = config['clusterHostInfo']['ambari_server_host'][0]
    ambari_server_port = config['clusterHostInfo']['ambari_server_port'][0]
    ambari_server_use_ssl = (config['clusterHostInfo']['ambari_server_use_ssl'][0] == 'true')
    ambari_server_protocol = ('https' if ambari_server_use_ssl else 'http')
    ambari_server_auth_host_url = format('{ambari_server_protocol}://{ambari_server_host}:{ambari_server_port}')
else:
    ambari_server_auth_host_url = ''
logsearch_auth_external_enabled = str(config['configurations']['logsearch-properties']['logsearch.external.auth.enabled']).lower()
logsearch_auth_external_host_url = format(config['configurations']['logsearch-properties']['logsearch.external.auth.host_url'])
logsearch_auth_external_login_url = config['configurations']['logsearch-properties']['logsearch.external.auth.login_url']
logfeeder_dir = '/usr/lib/ambari-logsearch-logfeeder'
logfeeder_user = config['configurations']['logfeeder-env']['logfeeder_user']
logfeeder_log_dir = config['configurations']['logfeeder-env']['logfeeder_log_dir']
logfeeder_log = (logfeeder_log_dir + '/logfeeder.out')
logfeeder_max_mem = config['configurations']['logfeeder-env']['logfeeder_max_mem']
solr_service_logs_enable = default('/configurations/logfeeder-env/logfeeder_solr_service_logs_enable', True)
solr_audit_logs_enable = default('/configurations/logfeeder-env/logfeeder_solr_audit_logs_enable', True)
logfeeder_env_content = config['configurations']['logfeeder-env']['content']
logfeeder_log4j_content = config['configurations']['logfeeder-log4j']['content']
logsearch_solr_ssl_enabled = default('configurations/logsearch-solr-env/logsearch_solr_ssl_enabled', False)
logsearch_solr_ssl_server_keystore_location = config['configurations']['logsearch-solr-env']['logsearch_solr_ssl_server_keystore_location']
logsearch_solr_ssl_server_keystore_password = config['configurations']['logsearch-solr-env']['logsearch_solr_ssl_server_keystore_password']
logsearch_solr_ssl_server_keystore_type = config['configurations']['logsearch-solr-env']['logsearch_solr_ssl_server_keystore_type']
logsearch_solr_ssl_server_truststore_location = config['configurations']['logsearch-solr-env']['logsearch_solr_ssl_server_truststore_location']
logsearch_solr_ssl_server_truststore_password = config['configurations']['logsearch-solr-env']['logsearch_solr_ssl_server_truststore_password']
logsearch_solr_ssl_server_truststore_type = config['configurations']['logsearch-solr-env']['logsearch_solr_ssl_server_truststore_type']
logsearch_solr_ssl_client_keystore_location = config['configurations']['logsearch-env']['logsearch_solr_ssl_client_keystore_location']
logsearch_solr_ssl_client_keystore_password = config['configurations']['logsearch-env']['logsearch_solr_ssl_client_keystore_password']
logsearch_solr_ssl_client_keystore_type = config['configurations']['logsearch-env']['logsearch_solr_ssl_client_keystore_type']
logsearch_solr_ssl_client_truststore_location = config['configurations']['logsearch-env']['logsearch_solr_ssl_client_truststore_location']
logsearch_solr_ssl_client_truststore_password = config['configurations']['logsearch-env']['logsearch_solr_ssl_client_truststore_password']
logsearch_solr_ssl_client_truststore_type = config['configurations']['logsearch-env']['logsearch_solr_ssl_client_truststore_type']
logfeeder_solr_ssl_client_keystore_location = config['configurations']['logfeeder-env']['logfeeder_solr_ssl_client_keystore_location']
logfeeder_solr_ssl_client_keystore_password = config['configurations']['logfeeder-env']['logfeeder_solr_ssl_client_keystore_password']
logfeeder_solr_ssl_client_keystore_type = config['configurations']['logfeeder-env']['logfeeder_solr_ssl_client_keystore_type']
logfeeder_solr_ssl_client_truststore_location = config['configurations']['logfeeder-env']['logfeeder_solr_ssl_client_truststore_location']
logfeeder_solr_ssl_client_truststore_password = config['configurations']['logfeeder-env']['logfeeder_solr_ssl_client_truststore_password']
logfeeder_solr_ssl_client_truststore_type = config['configurations']['logfeeder-env']['logfeeder_solr_ssl_client_truststore_type']
logfeeder_checkpoint_folder = default('/configurations/logfeeder-env/logfeeder.checkpoint.folder', '/etc/ambari-logsearch-logfeeder/conf/checkpoints')
logfeeder_log_filter_enable = str(default('/configurations/logfeeder-properties/logfeeder.log.filter.enable', True)).lower()
logfeeder_solr_config_interval = default('/configurations/logfeeder-properties/logfeeder.solr.config.interval', 5)
logfeeder_supported_services = ['accumulo', 'ambari', 'ams', 'atlas', 'falcon', 'hbase', 'hdfs', 'hive', 'kafka', 'knox', 'logsearch', 'nifi', 'oozie', 'ranger', 'storm', 'yarn', 'zookeeper']
logfeeder_config_file_names = (['global.config.json', 'output.config.json'] + [('input.config-%s.json' % tag) for tag in logfeeder_supported_services])
default_config_files = ','.join(logfeeder_config_file_names)
logfeeder_config_files = format(config['configurations']['logfeeder-properties']['logfeeder.config.files'])
logfeeder_metrics_collector_hosts = format(config['configurations']['logfeeder-properties']['logfeeder.metrics.collector.hosts'])
logfeeder_custom_properties = dict(config['configurations']['logfeeder-properties'])
logfeeder_custom_properties.pop('logfeeder.config.files', None)
logfeeder_custom_properties.pop('logfeeder.checkpoint.folder', None)
logfeeder_custom_properties.pop('logfeeder.metrics.collector.hosts', None)
logfeeder_custom_properties.pop('logfeeder.log.filter.enable', None)
logfeeder_custom_properties.pop('logfeeder.solr.config.interval', None)
logsearch_server_hosts = config['clusterHostInfo']['logsearch_server_hosts']
logsearch_server_host = ''
if ((logsearch_server_hosts is not None) and (len(logsearch_server_hosts) > 0)):
    logsearch_server_host = logsearch_server_hosts[0]
smoke_logsearch_cmd = format('curl -s -o /dev/null -w "%{{http_code}}" http://{logsearch_server_host}:{logsearch_ui_port}/login.jsp | grep 200')
