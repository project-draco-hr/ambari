def flume(action=None):
    import params
    if (action == 'config'):
        for n in find_expected_agent_names(params.flume_conf_dir):
            os.unlink(os.path.join(params.flume_conf_dir, n, 'ambari-meta.json'))
        Directory(params.flume_conf_dir, recursive=True)
        Directory(params.flume_log_dir, owner=params.flume_user)
        flume_agents = {}
        if (params.flume_conf_content is not None):
            flume_agents = build_flume_topology(params.flume_conf_content)
        for agent in flume_agents.keys():
            flume_agent_conf_dir = os.path.join(params.flume_conf_dir, agent)
            flume_agent_conf_file = os.path.join(flume_agent_conf_dir, 'flume.conf')
            flume_agent_meta_file = os.path.join(flume_agent_conf_dir, 'ambari-meta.json')
            flume_agent_log4j_file = os.path.join(flume_agent_conf_dir, 'log4j.properties')
            flume_agent_env_file = os.path.join(flume_agent_conf_dir, 'flume-env.sh')
            Directory(flume_agent_conf_dir)
            PropertiesFile(flume_agent_conf_file, properties=flume_agents[agent], mode=420)
            File(flume_agent_log4j_file, content=Template('log4j.properties.j2', agent_name=agent), mode=420)
            File(flume_agent_meta_file, content=json.dumps(ambari_meta(agent, flume_agents[agent])), mode=420)
            File(flume_agent_env_file, owner=params.flume_user, content=InlineTemplate(params.flume_env_sh_template))
            if params.has_metric_collector:
                File(os.path.join(flume_agent_conf_dir, 'flume-metrics2.properties'), owner=params.flume_user, content=Template('flume-metrics2.properties.j2'))
    elif (action == 'start'):
        if (len(params.flume_command_targets) == 0):
            _set_desired_state('STARTED')
        flume_base = (as_user(format('{flume_bin} agent --name {{0}} --conf {{1}} --conf-file {{2}} {{3}} > {flume_log_dir}/{{4}}.out 2>&1'), params.flume_user, env={'JAVA_HOME': params.java_home, }) + ' &')
        for agent in cmd_target_names():
            flume_agent_conf_dir = ((params.flume_conf_dir + os.sep) + agent)
            flume_agent_conf_file = ((flume_agent_conf_dir + os.sep) + 'flume.conf')
            flume_agent_pid_file = (((params.flume_run_dir + os.sep) + agent) + '.pid')
            if (not os.path.isfile(flume_agent_conf_file)):
                continue
            if (not is_flume_process_live(flume_agent_pid_file)):
                extra_args = ''
                if (params.ganglia_server_host is not None):
                    extra_args = '-Dflume.monitoring.type=ganglia -Dflume.monitoring.hosts={0}:{1}'
                    extra_args = extra_args.format(params.ganglia_server_host, '8655')
                if params.has_metric_collector:
                    extra_args = '-Dflume.monitoring.type=org.apache.hadoop.metrics2.sink.flume.FlumeTimelineMetricsSink'
                flume_cmd = flume_base.format(agent, flume_agent_conf_dir, flume_agent_conf_file, extra_args, agent)
                Execute(flume_cmd, wait_for_finish=False, environment={'JAVA_HOME': params.java_home, })
                pid_cmd = format('pgrep -o -u {flume_user} -f ^{java_home}.*{agent}.* > {flume_agent_pid_file}')
                Execute(pid_cmd, logoutput=True, tries=20, try_sleep=10)
        pass
    elif (action == 'stop'):
        if (len(params.flume_command_targets) == 0):
            _set_desired_state('INSTALLED')
        pid_files = glob.glob(((params.flume_run_dir + os.sep) + '*.pid'))
        if (0 == len(pid_files)):
            return
        agent_names = cmd_target_names()
        for agent in agent_names:
            pid_file = (((params.flume_run_dir + os.sep) + agent) + '.pid')
            pid = format('`cat {pid_file}` > /dev/null 2>&1')
            Execute(format('kill {pid}'), ignore_failures=True)
            File(pid_file, action='delete')
