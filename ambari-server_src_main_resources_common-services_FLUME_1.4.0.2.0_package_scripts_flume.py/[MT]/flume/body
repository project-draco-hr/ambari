@OsFamilyFuncImpl(os_family=OSConst.WINSRV_FAMILY)
def flume(action=None):
    import params
    from service_mapping import flume_win_service_name
    if (action == 'config'):
        ServiceConfig(flume_win_service_name, action='configure', start_type='manual')
        ServiceConfig(flume_win_service_name, action='change_user', username=params.flume_user, password=Script.get_password(params.flume_user))
        for n in find_expected_agent_names(params.flume_conf_dir):
            os.unlink(os.path.join(params.flume_conf_dir, n, 'ambari-meta.json'))
        flume_agents = {}
        if (params.flume_conf_content is not None):
            flume_agents = build_flume_topology(params.flume_conf_content)
        for agent in flume_agents.keys():
            flume_agent_conf_dir = os.path.join(params.flume_conf_dir, agent)
            flume_agent_conf_file = os.path.join(flume_agent_conf_dir, 'flume.conf')
            flume_agent_meta_file = os.path.join(flume_agent_conf_dir, 'ambari-meta.json')
            flume_agent_log4j_file = os.path.join(flume_agent_conf_dir, 'log4j.properties')
            flume_agent_env_file = os.path.join(flume_agent_conf_dir, 'flume-env.ps1')
            Directory(flume_agent_conf_dir)
            PropertiesFile(flume_agent_conf_file, properties=flume_agents[agent])
            File(flume_agent_log4j_file, content=Template('log4j.properties.j2', agent_name=agent))
            File(flume_agent_meta_file, content=json.dumps(ambari_meta(agent, flume_agents[agent])))
            File(flume_agent_env_file, owner=params.flume_user, content=InlineTemplate(params.flume_env_sh_template))
            if params.has_metric_collector:
                File(os.path.join(flume_agent_conf_dir, 'flume-metrics2.properties'), owner=params.flume_user, content=Template('flume-metrics2.properties.j2'))
