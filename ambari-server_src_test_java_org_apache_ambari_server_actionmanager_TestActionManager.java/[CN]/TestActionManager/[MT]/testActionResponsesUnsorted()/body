{
  ActionDBAccessor db=injector.getInstance(ActionDBAccessorImpl.class);
  ActionManager am=injector.getInstance(ActionManager.class);
  populateActionDBWithTwoCommands(db,hostname);
  Stage stage=db.getAllStages(requestId).get(0);
  Assert.assertEquals(stageId,stage.getStageId());
  stage.setHostRoleStatus(hostname,"HBASE_MASTER",HostRoleStatus.QUEUED);
  db.hostRoleScheduled(stage,hostname,"HBASE_MASTER");
  List<CommandReport> reports=new ArrayList<CommandReport>();
  CommandReport cr=new CommandReport();
  cr.setTaskId(2);
  cr.setActionId(StageUtils.getActionId(requestId,stageId));
  cr.setRole("HBASE_REGIONSERVER");
  cr.setStatus("COMPLETED");
  cr.setStdErr("ERROR");
  cr.setStdOut("OUTPUT");
  cr.setStructuredOut("STRUCTURED_OUTPUT");
  cr.setExitCode(215);
  reports.add(cr);
  CommandReport cr2=new CommandReport();
  cr2.setTaskId(1);
  cr2.setActionId(StageUtils.getActionId(requestId,stageId));
  cr2.setRole("HBASE_MASTER");
  cr2.setStatus("IN_PROGRESS");
  cr2.setStdErr("ERROR");
  cr2.setStdOut("OUTPUT");
  cr2.setStructuredOut("STRUCTURED_OUTPUT");
  cr2.setExitCode(215);
  reports.add(cr2);
  am.processTaskResponse(hostname,reports,CommandUtils.convertToTaskIdCommandMap(am.getTasks(Arrays.asList(new Long[]{1L,2L}))));
  assertEquals(HostRoleStatus.IN_PROGRESS,am.getAction(requestId,stageId).getHostRoleStatus(hostname,"HBASE_MASTER"));
  assertEquals(HostRoleStatus.PENDING,am.getAction(requestId,stageId).getHostRoleStatus(hostname,"HBASE_REGIONSERVER"));
}
