def wrap_exceptions(fun):
    'Decorator which translates bare OSError and IOError exceptions\n    into NoSuchProcess and AccessDenied.\n    '

    @wraps(fun)
    def wrapper(self, *args, **kwargs):
        try:
            return fun(self, *args, **kwargs)
        except EnvironmentError:
            if ((NoSuchProcess is None) or (AccessDenied is None)):
                raise
            err = sys.exc_info()[1]
            if (err.errno in (errno.ENOENT, errno.ESRCH)):
                raise NoSuchProcess(self.pid, self._name)
            if (err.errno in (errno.EPERM, errno.EACCES)):
                raise AccessDenied(self.pid, self._name)
            raise
    return wrapper
