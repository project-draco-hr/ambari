@patch.object(OSCheck, 'os_distribution', new=MagicMock(return_value=os_distro_value))
@patch.object(StatusCheck, 'getIsLive')
@patch.object(logger, 'error')
def test_no_user_mapping(self, error_mock, get_is_live_mock):
    badServiceToPidDict = self.serviceToPidDict.copy()
    badServiceToPidDict['BAD_COMPONENT'] = ('prefix' + StatusCheck.USER_PATTERN)
    statusCheck = StatusCheck(badServiceToPidDict, self.pidPathVars, self.globalConfig, self.servicesToLinuxUser)
    statusCheck.pidFilesDict = self.pidFilesDict
    get_is_live_mock.side_effect = (lambda pid_path: self.is_live_values[pid_path])
    status = statusCheck.getStatus(COMPONENT_LIVE)
    self.assertTrue(error_mock.called)
