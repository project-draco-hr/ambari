@OsFamilyFuncImpl(os_family=OsFamilyImpl.DEFAULT)
def execute(configurations={}, parameters={}, host_name=None):
    '\n  Returns a tuple containing the result code and a pre-formatted result label\n\n  Keyword arguments:\n  configurations (dictionary): a mapping of configuration key to value\n  parameters (dictionary): a mapping of script parameter key to value\n  host_name (string): the name of this host where the alert is running\n  '
    LLAP_APP_STATUS_CMD_TIMEOUT = 0
    if (configurations is None):
        return ('UNKNOWN', ['There were no configurations supplied to the script.'])
    result_code = None
    try:
        security_enabled = False
        if (SECURITY_ENABLED_KEY in configurations):
            security_enabled = (str(configurations[SECURITY_ENABLED_KEY]).upper() == 'TRUE')
        check_command_timeout = CHECK_COMMAND_TIMEOUT_DEFAULT
        if (CHECK_COMMAND_TIMEOUT_KEY in configurations):
            check_command_timeout = int(parameters[CHECK_COMMAND_TIMEOUT_KEY])
        hive_user = HIVE_USER_DEFAULT
        if (HIVE_USER_KEY in configurations):
            hive_user = configurations[HIVE_USER_KEY]
        llap_app_name = LLAP_APP_NAME_DEFAULT
        if (LLAP_APP_NAME_KEY in configurations):
            llap_app_name = configurations[LLAP_APP_NAME_KEY]
        if security_enabled:
            if (HIVE_PRINCIPAL_KEY in configurations):
                llap_principal = configurations[HIVE_PRINCIPAL_KEY]
            else:
                llap_principal = HIVE_PRINCIPAL_DEFAULT
            llap_principal = llap_principal.replace('_HOST', host_name.lower())
            llap_keytab = HIVE_PRINCIPAL_KEYTAB_DEFAULT
            if (HIVE_PRINCIPAL_KEYTAB_KEY in configurations):
                llap_keytab = configurations[HIVE_PRINCIPAL_KEYTAB_KEY]
            if (KERBEROS_EXECUTABLE_SEARCH_PATHS_KEY in configurations):
                kerberos_executable_search_paths = configurations[KERBEROS_EXECUTABLE_SEARCH_PATHS_KEY]
            else:
                kerberos_executable_search_paths = None
            kinit_path_local = get_kinit_path(kerberos_executable_search_paths)
            kinitcmd = format('{kinit_path_local} -kt {llap_keytab} {llap_principal}; ')
            kinit_lock = global_lock.get_lock(global_lock.LOCK_TYPE_KERBEROS)
            kinit_lock.acquire()
            try:
                Execute(kinitcmd, user=hive_user, path=['/bin/', '/usr/bin/', '/usr/lib/hive/bin/', '/usr/sbin/'], timeout=10)
            finally:
                kinit_lock.release()
        start_time = time.time()
        if (STACK_ROOT in configurations):
            llap_status_cmd = (configurations[STACK_ROOT] + format('/current/hive-server2-hive2/bin/hive --service llapstatus --name {llap_app_name}  -findAppTimeout {LLAP_APP_STATUS_CMD_TIMEOUT}'))
        else:
            llap_status_cmd = (STACK_ROOT_DEFAULT + format('/current/hive-server2-hive2/bin/hive --service llapstatus --name {llap_app_name} -findAppTimeout {LLAP_APP_STATUS_CMD_TIMEOUT}'))
        (code, output, error) = shell.checked_call(llap_status_cmd, user=hive_user, stderr=subprocess.PIPE, timeout=check_command_timeout, logoutput=False)
        llap_app_info = make_valid_json(output)
        if ((llap_app_info is None) or ('state' not in llap_app_info)):
            alert_label = traceback.format_exc()
            result_code = UKNOWN_STATUS_CODE
            return (result_code, [alert_label])
        retrieved_llap_app_state = llap_app_info['state'].upper()
        if (retrieved_llap_app_state in ['RUNNING_ALL']):
            result_code = OK_RESULT_CODE
            total_time = (time.time() - start_time)
            alert_label = OK_MESSAGE.format(llap_app_state_dict.get(retrieved_llap_app_state, retrieved_llap_app_state), total_time)
        elif (retrieved_llap_app_state in ['RUNNING_PARTIAL']):
            live_instances = 0
            desired_instances = 0
            percentInstancesUp = 0
            percent_desired_instances_to_be_up = 80
            if (('liveInstances' not in llap_app_info) or ('desiredInstances' not in llap_app_info)):
                result_code = CRITICAL_RESULT_CODE
                total_time = (time.time() - start_time)
                alert_label = CRITICAL_MESSAGE_WITH_STATE.format(llap_app_state_dict.get(retrieved_llap_app_state, retrieved_llap_app_state), total_time)
                return (result_code, [alert_label])
            live_instances = llap_app_info['liveInstances']
            desired_instances = llap_app_info['desiredInstances']
            if ((live_instances < 0) or (desired_instances <= 0)):
                result_code = CRITICAL_RESULT_CODE
                total_time = (time.time() - start_time)
                alert_label = CRITICAL_MESSAGE_WITH_STATE.format(llap_app_state_dict.get(retrieved_llap_app_state, retrieved_llap_app_state), total_time)
                return (result_code, [alert_label])
            percentInstancesUp = ((float(live_instances) / desired_instances) * 100)
            if (percentInstancesUp >= percent_desired_instances_to_be_up):
                result_code = OK_RESULT_CODE
                total_time = (time.time() - start_time)
                alert_label = MESSAGE_WITH_STATE_AND_INSTANCES.format(llap_app_state_dict.get(retrieved_llap_app_state, retrieved_llap_app_state), total_time, llap_app_info['liveInstances'], llap_app_info['desiredInstances'])
            else:
                result_code = CRITICAL_RESULT_CODE
                total_time = (time.time() - start_time)
                alert_label = MESSAGE_WITH_STATE_AND_INSTANCES.format(llap_app_state_dict.get(retrieved_llap_app_state, retrieved_llap_app_state), total_time, llap_app_info['liveInstances'], llap_app_info['desiredInstances'])
        else:
            result_code = CRITICAL_RESULT_CODE
            total_time = (time.time() - start_time)
            alert_label = CRITICAL_MESSAGE_WITH_STATE.format(llap_app_state_dict.get(retrieved_llap_app_state, retrieved_llap_app_state), total_time)
    except:
        alert_label = traceback.format_exc()
        traceback.format_exc()
        result_code = UKNOWN_STATUS_CODE
    return (result_code, [alert_label])
