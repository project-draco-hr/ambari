{
  validateConditionIsNotEmpty(condition);
  if (condition.getMetricNames() == null || condition.getMetricNames().size() == 0) {
    throw new IllegalArgumentException("Point in time query without " + "metric names not supported ");
  }
  String stmtStr;
  if (condition.getStatement() != null) {
    stmtStr=condition.getStatement();
  }
 else {
    stmtStr=String.format(GET_METRIC_SQL,"",METRICS_RECORD_TABLE_NAME);
  }
  StringBuilder sb=new StringBuilder(stmtStr);
  sb.append(" WHERE ");
  sb.append(condition.getConditionClause());
  String orderByClause=condition.getOrderByClause();
  if (orderByClause != null) {
    sb.append(orderByClause);
  }
 else {
    sb.append(" ORDER BY SERVER_TIME DESC, METRIC_NAME  ");
  }
  sb.append(" LIMIT ").append(condition.getMetricNames().size());
  if (LOG.isDebugEnabled()) {
    LOG.debug("SQL: " + sb.toString() + ", condition: "+ condition);
  }
  PreparedStatement stmt=connection.prepareStatement(sb.toString());
  int pos=1;
  if (condition.getMetricNames() != null) {
    for (; pos <= condition.getMetricNames().size(); pos++) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("Setting pos: " + pos + ", value = "+ condition.getMetricNames().get(pos - 1));
      }
      stmt.setString(pos,condition.getMetricNames().get(pos - 1));
    }
  }
  if (condition.getHostname() != null) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Setting pos: " + pos + ", value: "+ condition.getHostname());
    }
    stmt.setString(pos++,condition.getHostname());
  }
  if (condition.getAppId() != null) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Setting pos: " + pos + ", value: "+ condition.getAppId());
    }
    stmt.setString(pos++,condition.getAppId());
  }
  if (condition.getInstanceId() != null) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Setting pos: " + pos + ", value: "+ condition.getInstanceId());
    }
    stmt.setString(pos++,condition.getInstanceId());
  }
  if (condition.getFetchSize() != null) {
    stmt.setFetchSize(condition.getFetchSize());
  }
  return stmt;
}
