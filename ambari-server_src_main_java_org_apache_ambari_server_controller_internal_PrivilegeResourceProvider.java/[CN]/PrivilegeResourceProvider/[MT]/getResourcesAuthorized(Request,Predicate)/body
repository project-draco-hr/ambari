{
  Set<Resource> resources=new HashSet<Resource>();
  Set<String> requestedIds=getRequestPropertyIds(request,predicate);
  Set<Long> resourceIds=new HashSet<Long>();
  Set<Map<String,Object>> propertyMaps=getPropertyMaps(predicate);
  if (propertyMaps.isEmpty()) {
    propertyMaps.add(Collections.<String,Object>emptyMap());
  }
  for (  Map<String,Object> properties : propertyMaps) {
    Map<Long,T> resourceEntities;
    try {
      resourceEntities=getResourceEntities(properties);
    }
 catch (    AmbariException e) {
      throw new SystemException("Could not get resource list from request",e);
    }
    resourceIds.addAll(resourceEntities.keySet());
    Set<PrivilegeEntity> entitySet=new HashSet<PrivilegeEntity>();
    List<PrincipalEntity> userPrincipals=new LinkedList<PrincipalEntity>();
    List<PrincipalEntity> groupPrincipals=new LinkedList<PrincipalEntity>();
    List<PrincipalEntity> rolePrincipals=new LinkedList<PrincipalEntity>();
    List<PrivilegeEntity> entities=privilegeDAO.findAll();
    for (    PrivilegeEntity privilegeEntity : entities) {
      if (resourceIds.contains(privilegeEntity.getResource().getId())) {
        PrincipalEntity principal=privilegeEntity.getPrincipal();
        String principalType=principal.getPrincipalType().getName();
        entitySet.add(privilegeEntity);
        if (PrincipalTypeEntity.USER_PRINCIPAL_TYPE_NAME.equals(principalType)) {
          userPrincipals.add(principal);
        }
 else         if (PrincipalTypeEntity.GROUP_PRINCIPAL_TYPE_NAME.equals(principalType)) {
          groupPrincipals.add(principal);
        }
 else         if (PrincipalTypeEntity.ROLE_PRINCIPAL_TYPE_NAME.equals(principalType)) {
          rolePrincipals.add(principal);
        }
      }
    }
    Map<Long,UserEntity> userEntities=new HashMap<Long,UserEntity>();
    if (!userPrincipals.isEmpty()) {
      List<UserEntity> userList=userDAO.findUsersByPrincipal(userPrincipals);
      for (      UserEntity userEntity : userList) {
        userEntities.put(userEntity.getPrincipal().getId(),userEntity);
      }
    }
    Map<Long,GroupEntity> groupEntities=new HashMap<Long,GroupEntity>();
    if (!groupPrincipals.isEmpty()) {
      List<GroupEntity> groupList=groupDAO.findGroupsByPrincipal(groupPrincipals);
      for (      GroupEntity groupEntity : groupList) {
        groupEntities.put(groupEntity.getPrincipal().getId(),groupEntity);
      }
    }
    Map<Long,PermissionEntity> roleEntities=new HashMap<Long,PermissionEntity>();
    if (!rolePrincipals.isEmpty()) {
      List<PermissionEntity> roleList=permissionDAO.findPermissionsByPrincipal(rolePrincipals);
      for (      PermissionEntity roleEntity : roleList) {
        roleEntities.put(roleEntity.getPrincipal().getId(),roleEntity);
      }
    }
    for (    PrivilegeEntity privilegeEntity : entitySet) {
      Resource resource=toResource(privilegeEntity,userEntities,groupEntities,roleEntities,resourceEntities,requestedIds);
      if (resource != null && (predicate == null || predicate.evaluate(resource))) {
        resources.add(resource);
      }
    }
  }
  return resources;
}
