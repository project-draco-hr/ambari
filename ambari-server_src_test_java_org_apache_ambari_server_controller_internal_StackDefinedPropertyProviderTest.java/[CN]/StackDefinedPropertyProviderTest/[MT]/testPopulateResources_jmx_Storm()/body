{
  Cluster cluster=clusters.getCluster("c2");
  cluster.setDesiredStackVersion(new StackId("HDP-2.1.1"));
  TestStreamProvider streamProvider=new TestStreamProvider();
  JMXPropertyProviderTest.TestJMXHostProvider hostProvider=new JMXPropertyProviderTest.TestJMXHostProvider(false);
  TestGangliaHostProvider gangliaHostProvider=new TestGangliaHostProvider();
  JMXPropertyProviderTest.TestMetricHostProvider metricsHostProvider=new JMXPropertyProviderTest.TestMetricHostProvider();
  TestGangliaServiceProvider serviceProvider=new TestGangliaServiceProvider();
  StackDefinedPropertyProvider propertyProvider=new StackDefinedPropertyProvider(Resource.Type.HostComponent,hostProvider,gangliaHostProvider,serviceProvider,streamProvider,PropertyHelper.getPropertyId("HostRoles","cluster_name"),PropertyHelper.getPropertyId("HostRoles","host_name"),PropertyHelper.getPropertyId("HostRoles","component_name"),PropertyHelper.getPropertyId("HostRoles","state"),new EmptyPropertyProvider(),new EmptyPropertyProvider());
  Resource resource=new ResourceImpl(Resource.Type.HostComponent);
  resource.setProperty("HostRoles/cluster_name","c2");
  resource.setProperty(HOST_COMPONENT_HOST_NAME_PROPERTY_ID,"domu-12-31-39-0e-34-e1.compute-1.internal");
  resource.setProperty(HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID,"STORM_REST_API");
  resource.setProperty(HOST_COMPONENT_STATE_PROPERTY_ID,"STARTED");
  Request request=PropertyHelper.getReadRequest(Collections.<String>emptySet());
  Assert.assertEquals(1,propertyProvider.populateResources(Collections.singleton(resource),request,null).size());
  Assert.assertEquals(28.0,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/api/cluster/summary","tasks.total")));
  Assert.assertEquals(8.0,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/api/cluster/summary","slots.total")));
  Assert.assertEquals(5.0,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/api/cluster/summary","slots.free")));
  Assert.assertEquals(2.0,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/api/cluster/summary","supervisors")));
  Assert.assertEquals(28.0,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/api/cluster/summary","executors.total")));
  Assert.assertEquals(3.0,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/api/cluster/summary","slots.used")));
  Assert.assertEquals(1.0,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/api/cluster/summary","topologies")));
  Assert.assertEquals(4637.0,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/api/cluster/summary","nimbus.uptime")));
}
