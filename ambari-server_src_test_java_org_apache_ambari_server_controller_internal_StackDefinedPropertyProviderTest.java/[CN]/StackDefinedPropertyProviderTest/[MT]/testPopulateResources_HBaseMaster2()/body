{
  TestStreamProvider streamProvider=new TestStreamProvider();
  JMXPropertyProviderTest.TestJMXHostProvider hostProvider=new JMXPropertyProviderTest.TestJMXHostProvider(false);
  JMXPropertyProviderTest.TestMetricHostProvider metricsHostProvider=new JMXPropertyProviderTest.TestMetricHostProvider();
  TestGangliaServiceProvider serviceProvider=new TestGangliaServiceProvider();
  StackDefinedPropertyProvider propertyProvider=new StackDefinedPropertyProvider(Resource.Type.HostComponent,hostProvider,metricsHostProvider,serviceProvider,streamProvider,PropertyHelper.getPropertyId("HostRoles","cluster_name"),PropertyHelper.getPropertyId("HostRoles","host_name"),PropertyHelper.getPropertyId("HostRoles","component_name"),PropertyHelper.getPropertyId("HostRoles","state"),new EmptyPropertyProvider(),new EmptyPropertyProvider());
  Resource resource=new ResourceImpl(Resource.Type.HostComponent);
  resource.setProperty("HostRoles/cluster_name","c1");
  resource.setProperty(HOST_COMPONENT_HOST_NAME_PROPERTY_ID,"domu-12-31-39-0e-34-e1.compute-1.internal");
  resource.setProperty(HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID,"HBASE_MASTER");
  resource.setProperty(HOST_COMPONENT_STATE_PROPERTY_ID,"STARTED");
  Request request=PropertyHelper.getReadRequest(Collections.<String>emptySet());
  Set<Resource> res=propertyProvider.populateResources(Collections.singleton(resource),request,null);
  Assert.assertEquals(1,res.size());
  Map<String,Map<String,Object>> map=res.iterator().next().getPropertiesMap();
  Assert.assertTrue(map.containsKey("metrics/hbase/master"));
  Assert.assertTrue(map.get("metrics/hbase/master").containsKey("IsActiveMaster"));
}
