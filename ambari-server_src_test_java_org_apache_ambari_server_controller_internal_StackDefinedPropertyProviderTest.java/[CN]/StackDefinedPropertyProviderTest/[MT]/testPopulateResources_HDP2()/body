{
  StreamProvider streamProvider=new TestStreamProvider();
  JMXPropertyProviderTest.TestJMXHostProvider hostProvider=new JMXPropertyProviderTest.TestJMXHostProvider(true);
  JMXPropertyProviderTest.TestMetricHostProvider metricsHostProvider=new JMXPropertyProviderTest.TestMetricHostProvider();
  TestGangliaServiceProvider serviceProvider=new TestGangliaServiceProvider();
  StackDefinedPropertyProvider propertyProvider=new StackDefinedPropertyProvider(Resource.Type.HostComponent,hostProvider,metricsHostProvider,serviceProvider,streamProvider,PropertyHelper.getPropertyId("HostRoles","cluster_name"),PropertyHelper.getPropertyId("HostRoles","host_name"),PropertyHelper.getPropertyId("HostRoles","component_name"),PropertyHelper.getPropertyId("HostRoles","state"),new EmptyPropertyProvider(),new EmptyPropertyProvider());
  Resource resource=new ResourceImpl(Resource.Type.HostComponent);
  resource.setProperty("HostRoles/cluster_name","c1");
  resource.setProperty(HOST_COMPONENT_HOST_NAME_PROPERTY_ID,"domu-12-31-39-0e-34-e1.compute-1.internal");
  resource.setProperty(HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID,"RESOURCEMANAGER");
  resource.setProperty(HOST_COMPONENT_STATE_PROPERTY_ID,"STARTED");
  Request request=PropertyHelper.getReadRequest(Collections.<String>emptySet());
  Assert.assertEquals(1,propertyProvider.populateResources(Collections.singleton(resource),request,null).size());
  Assert.assertEquals(6,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/yarn/Queue/root","AggregateContainersAllocated")));
  Assert.assertEquals(6,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/yarn/Queue/root","AggregateContainersReleased")));
  Assert.assertEquals(8192,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/yarn/Queue/root","AvailableMB")));
  Assert.assertEquals(1,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/yarn/Queue/root","AvailableVCores")));
  Assert.assertEquals(2,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/yarn/Queue/root","AppsSubmitted")));
  Assert.assertEquals(1,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/yarn/ClusterMetrics","NumActiveNMs")));
  Assert.assertEquals(0,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/yarn/ClusterMetrics","NumDecommissionedNMs")));
  Assert.assertEquals(0,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/yarn/ClusterMetrics","NumLostNMs")));
  Assert.assertEquals(0,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/yarn/ClusterMetrics","NumUnhealthyNMs")));
  Assert.assertEquals(0,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/yarn/ClusterMetrics","NumRebootedNMs")));
  Assert.assertEquals(932118528,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/jvm","HeapMemoryMax")));
  resource=new ResourceImpl(Resource.Type.HostComponent);
  resource.setProperty("HostRoles/cluster_name","c1");
  resource.setProperty(HOST_COMPONENT_HOST_NAME_PROPERTY_ID,"domu-12-31-39-0e-34-e1.compute-1.internal");
  resource.setProperty(HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID,"NAMENODE");
  resource.setProperty(HOST_COMPONENT_STATE_PROPERTY_ID,"STARTED");
  request=PropertyHelper.getReadRequest(Collections.<String>emptySet());
  Assert.assertEquals(1,propertyProvider.populateResources(Collections.singleton(resource),request,null).size());
}
