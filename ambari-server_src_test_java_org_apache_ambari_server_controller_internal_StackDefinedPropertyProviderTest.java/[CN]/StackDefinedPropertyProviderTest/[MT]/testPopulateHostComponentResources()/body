{
  TestJMXProvider tj=new TestJMXProvider(true);
  JMXPropertyProviderTest.TestMetricHostProvider tm=new JMXPropertyProviderTest.TestMetricHostProvider();
  TestGangliaServiceProvider serviceProvider=new TestGangliaServiceProvider();
  StackDefinedPropertyProvider sdpp=new StackDefinedPropertyProvider(Resource.Type.HostComponent,tj,tm,serviceProvider,new CombinedStreamProvider(),"HostRoles/cluster_name","HostRoles/host_name","HostRoles/component_name","HostRoles/state",null,null);
  Resource resource=new ResourceImpl(Resource.Type.HostComponent);
  resource.setProperty("HostRoles/cluster_name","c2");
  resource.setProperty("HostRoles/host_name","h1");
  resource.setProperty("HostRoles/component_name","NAMENODE");
  resource.setProperty("HostRoles/state","STARTED");
  Request request=PropertyHelper.getReadRequest(Collections.<String>emptySet(),new HashMap<String,TemporalInfo>());
  Set<Resource> set=sdpp.populateResources(Collections.singleton(resource),request,null);
  Assert.assertEquals(1,set.size());
  Resource res=set.iterator().next();
  Map<String,Map<String,Object>> values=res.getPropertiesMap();
  Assert.assertTrue("Expected JMX metric 'metrics/dfs/FSNamesystem'",values.containsKey("metrics/dfs/FSNamesystem"));
  Assert.assertTrue("Expected JMX metric 'metrics/dfs/namenode'",values.containsKey("metrics/dfs/namenode"));
  Assert.assertTrue("Expected Ganglia metric 'metrics/rpcdetailed/client'",values.containsKey("metrics/rpcdetailed/client"));
  Assert.assertTrue("Expected Ganglia metric 'metrics/rpc/client'",values.containsKey("metrics/rpc/client"));
}
