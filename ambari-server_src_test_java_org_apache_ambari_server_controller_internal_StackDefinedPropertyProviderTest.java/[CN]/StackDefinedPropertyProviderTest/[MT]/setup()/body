{
  InMemoryDefaultTestModule module=new InMemoryDefaultTestModule();
  injector=Guice.createInjector(Modules.override(module).with(new TestModuleWithCacheProvider()));
  injector.getInstance(GuiceJpaInitializer.class);
  StackDefinedPropertyProvider.init(injector);
  helper=injector.getInstance(OrmTestHelper.class);
  clusters=injector.getInstance(Clusters.class);
  StackId stackId=new StackId("HDP-2.0.5");
  clusters.addCluster("c2",stackId);
  Cluster cluster=clusters.getCluster("c2");
  cluster.setDesiredStackVersion(stackId);
  helper.getOrCreateRepositoryVersion(stackId,stackId.getStackVersion());
  cluster.createClusterVersion(stackId,stackId.getStackVersion(),"admin",RepositoryVersionState.UPGRADING);
  clusters.addHost("h1");
  Host host=clusters.getHost("h1");
  Map<String,String> hostAttributes=new HashMap<String,String>();
  hostAttributes.put("os_family","redhat");
  hostAttributes.put("os_release_version","6.3");
  host.setHostAttributes(hostAttributes);
  host.persist();
  clusters.mapHostToCluster("h1","c2");
  AmbariManagementController amc=createNiceMock(AmbariManagementController.class);
  Field field=AmbariServer.class.getDeclaredField("clusterController");
  field.setAccessible(true);
  field.set(null,amc);
  Clusters clustersMock=createNiceMock(Clusters.class);
  Cluster clusterMock=createNiceMock(Cluster.class);
  expect(amc.getClusters()).andReturn(clustersMock).anyTimes();
  expect(clustersMock.getCluster(CLUSTER_NAME_PROPERTY_ID)).andReturn(clusterMock).anyTimes();
  expect(clusterMock.getResourceId()).andReturn(2L).anyTimes();
  try {
    expect(clustersMock.getCluster(anyObject(String.class))).andReturn(clusterMock).anyTimes();
  }
 catch (  AmbariException e) {
    e.printStackTrace();
  }
  replay(amc,clustersMock,clusterMock);
}
