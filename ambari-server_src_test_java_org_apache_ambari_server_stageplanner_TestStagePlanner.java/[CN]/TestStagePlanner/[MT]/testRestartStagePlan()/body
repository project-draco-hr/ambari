{
  RoleCommandOrder rco=injector.getInstance(RoleCommandOrder.class);
  ClusterImpl cluster=mock(ClusterImpl.class);
  when(cluster.getCurrentStackVersion()).thenReturn(new StackId("HDP-2.0.6"));
  rco.initialize(cluster);
  RoleGraph rg=roleGraphFactory.createNew(rco);
  long now=System.currentTimeMillis();
  Stage stage=stageFactory.createNew(1,"/tmp","cluster1",1L,"execution command wrapper test","clusterHostInfo","commandParamsStage","hostParamsStage");
  stage.setStageId(1);
  stage.addServerActionCommand("RESTART",null,Role.HIVE_METASTORE,RoleCommand.CUSTOM_COMMAND,"cluster1",new ServiceComponentHostServerActionEvent("host2",System.currentTimeMillis()),null,"command detail",null,null,false);
  stage.addServerActionCommand("RESTART",null,Role.MYSQL_SERVER,RoleCommand.CUSTOM_COMMAND,"cluster1",new ServiceComponentHostServerActionEvent("host2",System.currentTimeMillis()),null,"command detail",null,null,false);
  System.out.println(stage.toString());
  rg.build(stage);
  System.out.println(rg.stringifyGraph());
  List<Stage> outStages=rg.getStages();
  for (  Stage s : outStages) {
    System.out.println(s.toString());
  }
  assertEquals(2,outStages.size());
}
