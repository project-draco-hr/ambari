{
  SchemaFactory schemaFactory=createNiceMock(SchemaFactory.class);
  Schema schema=createNiceMock(Schema.class);
  expect(schemaFactory.getSchema(Resource.Type.Service)).andReturn(schema).anyTimes();
  expect(schema.getKeyPropertyId(Resource.Type.Service)).andReturn("ServiceInfo/service_name").anyTimes();
  expect(schema.getKeyPropertyId(Resource.Type.Cluster)).andReturn("ServiceInfo/cluster_name").anyTimes();
  replay(schemaFactory,schema);
  HashSet<String> serviceProperties=new HashSet<String>();
  serviceProperties.add("foo/bar");
  QueryInfo rootQuery=new QueryInfo(new ServiceResourceDefinition(),serviceProperties);
  TreeNode<QueryInfo> queryTree=new TreeNodeImpl<QueryInfo>(null,rootQuery,"Service");
  MetricsPaddingRenderer renderer=new MetricsPaddingRenderer("null_padding");
  renderer.init(schemaFactory);
  TreeNode<Set<String>> propertyTree=renderer.finalizeProperties(queryTree,false);
  assertEquals(4,propertyTree.getObject().size());
  assertTrue(propertyTree.getObject().contains("ServiceInfo/service_name"));
  assertTrue(propertyTree.getObject().contains("ServiceInfo/cluster_name"));
  assertTrue(propertyTree.getObject().contains("foo/bar"));
  assertTrue(propertyTree.getObject().contains("params/padding/NULLS"));
  assertEquals(0,propertyTree.getChildren().size());
  verify(schemaFactory,schema);
}
