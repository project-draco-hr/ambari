{
  User user1=createNiceMock(User.class);
  User user2=createNiceMock(User.class);
  User user3=createNiceMock(User.class);
  User user4=createNiceMock(User.class);
  expect(user1.getUserName()).andReturn("user1").anyTimes();
  expect(user2.getUserName()).andReturn("user2").anyTimes();
  expect(user3.getUserName()).andReturn("user5").anyTimes();
  expect(user4.getUserName()).andReturn("user6").anyTimes();
  expect(user1.isLdapUser()).andReturn(false).anyTimes();
  expect(user2.isLdapUser()).andReturn(true).anyTimes();
  expect(user3.isLdapUser()).andReturn(true).anyTimes();
  expect(user4.isLdapUser()).andReturn(false).anyTimes();
  List<User> userList=Arrays.asList(user1,user2,user3,user4);
  Configuration configuration=createNiceMock(Configuration.class);
  Users users=createNiceMock(Users.class);
  LdapTemplate ldapTemplate=createNiceMock(LdapTemplate.class);
  LdapServerProperties ldapServerProperties=createNiceMock(LdapServerProperties.class);
  expect(users.getAllUsers()).andReturn(userList);
  replay(ldapTemplate,ldapServerProperties,users,configuration);
  replay(user1,user2,user3,user4);
  AmbariLdapDataPopulatorTestInstance populator=createMockBuilder(AmbariLdapDataPopulatorTestInstance.class).addMockedMethod("getLdapUsers").withConstructor(configuration,users).createNiceMock();
  LdapUserDto externalUser1=createNiceMock(LdapUserDto.class);
  LdapUserDto externalUser2=createNiceMock(LdapUserDto.class);
  LdapUserDto externalUser3=createNiceMock(LdapUserDto.class);
  LdapUserDto externalUser4=createNiceMock(LdapUserDto.class);
  expect(externalUser1.getUserName()).andReturn("user1").anyTimes();
  expect(externalUser2.getUserName()).andReturn("user2").anyTimes();
  expect(externalUser3.getUserName()).andReturn("xuser3").anyTimes();
  expect(externalUser4.getUserName()).andReturn("xuser4").anyTimes();
  replay(externalUser1,externalUser2,externalUser3,externalUser4);
  expect(populator.getLdapUsers("xuser*")).andReturn(createSet(externalUser3,externalUser4));
  expect(populator.getLdapUsers("user1")).andReturn(Collections.singleton(externalUser1));
  expect(populator.getLdapUsers("user2")).andReturn(Collections.singleton(externalUser2));
  replay(populator);
  populator.setLdapTemplate(ldapTemplate);
  populator.setLdapServerProperties(ldapServerProperties);
  LdapBatchDto result=populator.synchronizeLdapUsers(createSet("user1","user2","xuser*"),new LdapBatchDto());
  assertEquals(2,result.getUsersToBeCreated().size());
  assertTrue(result.getUsersToBeCreated().contains("xuser3"));
  assertTrue(result.getUsersToBeCreated().contains("xuser4"));
  assertEquals(1,result.getUsersToBecomeLdap().size());
  assertTrue(result.getUsersToBecomeLdap().contains("user1"));
  assertTrue(result.getUsersToBeRemoved().isEmpty());
  assertTrue(result.getGroupsToBeRemoved().isEmpty());
  assertTrue(result.getGroupsToBeCreated().isEmpty());
  assertTrue(result.getGroupsToBecomeLdap().isEmpty());
  assertTrue(result.getMembershipToAdd().isEmpty());
  assertTrue(result.getMembershipToRemove().isEmpty());
  verify(populator.loadLdapTemplate(),populator);
}
