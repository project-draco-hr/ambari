{
  User user1=createNiceMock(User.class);
  User user2=createNiceMock(User.class);
  User user3=createNiceMock(User.class);
  User user4=createNiceMock(User.class);
  expect(user1.getUserName()).andReturn("user1").anyTimes();
  expect(user2.getUserName()).andReturn("user2").anyTimes();
  expect(user3.getUserName()).andReturn("user3").anyTimes();
  expect(user4.getUserName()).andReturn("user4").anyTimes();
  expect(user1.isLdapUser()).andReturn(false).anyTimes();
  expect(user2.isLdapUser()).andReturn(true).anyTimes();
  expect(user3.isLdapUser()).andReturn(true).anyTimes();
  expect(user4.isLdapUser()).andReturn(false).anyTimes();
  Configuration configuration=createNiceMock(Configuration.class);
  Users users=createNiceMock(Users.class);
  LdapTemplate ldapTemplate=createNiceMock(LdapTemplate.class);
  LdapServerProperties ldapServerProperties=createNiceMock(LdapServerProperties.class);
  replay(ldapTemplate,ldapServerProperties,users,configuration);
  replay(user1,user2,user3,user4);
  AmbariLdapDataPopulatorTestInstance populator=createMockBuilder(AmbariLdapDataPopulatorTestInstance.class).addMockedMethod("getLdapUserByMemberAttr").addMockedMethod("getInternalMembers").withConstructor(configuration,users).createNiceMock();
  LdapGroupDto externalGroup=createNiceMock(LdapGroupDto.class);
  expect(externalGroup.getGroupName()).andReturn("group1").anyTimes();
  expect(externalGroup.getMemberAttributes()).andReturn(createSet("user1","user2","user4","user6")).anyTimes();
  replay(externalGroup);
  Map<String,User> internalMembers=new HashMap<String,User>();
  internalMembers.put("user1",user1);
  internalMembers.put("user3",user3);
  internalMembers.put("user4",user4);
  LdapBatchDto batchInfo=new LdapBatchDto();
  LdapUserDto externalUser1=createNiceMock(LdapUserDto.class);
  LdapUserDto externalUser2=createNiceMock(LdapUserDto.class);
  LdapUserDto externalUser3=createNiceMock(LdapUserDto.class);
  LdapUserDto externalUser4=createNiceMock(LdapUserDto.class);
  expect(externalUser1.getUserName()).andReturn("user1").anyTimes();
  expect(externalUser2.getUserName()).andReturn("user2").anyTimes();
  expect(externalUser3.getUserName()).andReturn("user4").anyTimes();
  expect(externalUser4.getUserName()).andReturn("user6").anyTimes();
  replay(externalUser1,externalUser2,externalUser3,externalUser4);
  expect(populator.getLdapUserByMemberAttr("user1")).andReturn(externalUser1).anyTimes();
  expect(populator.getLdapUserByMemberAttr("user2")).andReturn(externalUser2).anyTimes();
  expect(populator.getLdapUserByMemberAttr("user4")).andReturn(externalUser3).anyTimes();
  expect(populator.getLdapUserByMemberAttr("user6")).andReturn(externalUser4).anyTimes();
  expect(populator.getInternalMembers("group1")).andReturn(internalMembers);
  replay(populator);
  populator.setLdapTemplate(ldapTemplate);
  populator.setLdapServerProperties(ldapServerProperties);
  Map<String,User> internalUsers=new HashMap<String,User>();
  internalUsers.putAll(internalMembers);
  internalUsers.put("user2",user2);
  populator.refreshGroupMembers(batchInfo,externalGroup,internalUsers,null);
  Set<String> groupMembersToAdd=new HashSet<String>();
  for (  LdapUserGroupMemberDto ldapUserGroupMemberDto : batchInfo.getMembershipToAdd()) {
    groupMembersToAdd.add(ldapUserGroupMemberDto.getUserName());
  }
  assertEquals(2,groupMembersToAdd.size());
  assertTrue(groupMembersToAdd.contains("user2"));
  assertTrue(groupMembersToAdd.contains("user6"));
  Set<String> groupMembersToRemove=new HashSet<String>();
  for (  LdapUserGroupMemberDto ldapUserGroupMemberDto : batchInfo.getMembershipToRemove()) {
    groupMembersToRemove.add(ldapUserGroupMemberDto.getUserName());
  }
  assertEquals(1,groupMembersToRemove.size());
  assertTrue(groupMembersToRemove.contains("user3"));
  assertEquals(1,batchInfo.getUsersToBeCreated().size());
  assertTrue(batchInfo.getUsersToBeCreated().contains("user6"));
  assertEquals(2,batchInfo.getUsersToBecomeLdap().size());
  assertTrue(batchInfo.getUsersToBecomeLdap().contains("user1"));
  assertTrue(batchInfo.getUsersToBecomeLdap().contains("user4"));
  assertTrue(batchInfo.getGroupsToBecomeLdap().isEmpty());
  assertTrue(batchInfo.getGroupsToBeCreated().isEmpty());
  assertTrue(batchInfo.getGroupsToBeRemoved().isEmpty());
  assertTrue(batchInfo.getUsersToBeRemoved().isEmpty());
  verify(populator.loadLdapTemplate(),populator);
}
