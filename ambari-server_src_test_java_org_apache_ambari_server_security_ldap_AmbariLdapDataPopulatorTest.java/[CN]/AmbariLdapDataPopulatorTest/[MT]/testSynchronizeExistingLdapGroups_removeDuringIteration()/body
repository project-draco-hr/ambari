{
  Group group1=createNiceMock(Group.class);
  expect(group1.getGroupId()).andReturn(1).anyTimes();
  expect(group1.getGroupName()).andReturn("group1").anyTimes();
  expect(group1.isLdapGroup()).andReturn(true).anyTimes();
  Group group2=createNiceMock(Group.class);
  expect(group2.getGroupId()).andReturn(2).anyTimes();
  expect(group2.getGroupName()).andReturn("group2").anyTimes();
  expect(group2.isLdapGroup()).andReturn(true).anyTimes();
  Configuration configuration=createNiceMock(Configuration.class);
  Users users=createNiceMock(Users.class);
  expect(users.getAllGroups()).andReturn(Arrays.asList(group1,group2));
  expect(users.getAllUsers()).andReturn(Collections.EMPTY_LIST);
  expect(configuration.getLdapServerProperties()).andReturn(new LdapServerProperties()).anyTimes();
  LdapGroupDto group1Dto=new LdapGroupDto();
  group1Dto.setGroupName("group1");
  group1Dto.setMemberAttributes(Sets.newHashSet("group2"));
  Set<LdapGroupDto> groupDtos1=Sets.newHashSet();
  groupDtos1.add(group1Dto);
  LdapGroupDto group2Dto=new LdapGroupDto();
  group2Dto.setGroupName("group2");
  group2Dto.setMemberAttributes(Collections.EMPTY_SET);
  Set<LdapGroupDto> groupDtos2=Sets.newHashSet();
  groupDtos2.add(group2Dto);
  LdapBatchDto batchInfo=new LdapBatchDto();
  replay(configuration,users,group1,group2);
  AmbariLdapDataPopulator dataPopulator=createMockBuilder(AmbariLdapDataPopulatorTestInstance.class).withConstructor(configuration,users).addMockedMethod("getLdapGroups").addMockedMethod("getLdapUserByMemberAttr").addMockedMethod("getLdapGroupByMemberAttr").createNiceMock();
  expect(dataPopulator.getLdapUserByMemberAttr(anyString())).andReturn(null).anyTimes();
  expect(dataPopulator.getLdapGroupByMemberAttr("group2")).andReturn(group2Dto);
  expect(dataPopulator.getLdapGroups("group1")).andReturn(groupDtos1).anyTimes();
  expect(dataPopulator.getLdapGroups("group2")).andReturn(groupDtos2).anyTimes();
  replay(dataPopulator);
  dataPopulator.synchronizeExistingLdapGroups(batchInfo);
  verify(dataPopulator,group1,group2);
}
