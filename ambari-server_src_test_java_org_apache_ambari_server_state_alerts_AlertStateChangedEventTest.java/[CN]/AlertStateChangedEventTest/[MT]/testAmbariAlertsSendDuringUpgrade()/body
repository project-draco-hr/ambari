{
  expectUpgradingCluster();
  AlertTargetEntity alertTarget=createNiceMock(AlertTargetEntity.class);
  AlertGroupEntity alertGroup=createMock(AlertGroupEntity.class);
  List<AlertGroupEntity> groups=new ArrayList<AlertGroupEntity>();
  Set<AlertTargetEntity> targets=new HashSet<AlertTargetEntity>();
  targets.add(alertTarget);
  groups.add(alertGroup);
  EasyMock.expect(alertGroup.getAlertTargets()).andReturn(targets).once();
  EasyMock.expect(alertTarget.isEnabled()).andReturn(Boolean.TRUE).atLeastOnce();
  EasyMock.expect(alertTarget.getAlertStates()).andReturn(EnumSet.allOf(AlertState.class)).atLeastOnce();
  EasyMock.expect(dispatchDao.findGroupsByDefinition(EasyMock.anyObject(AlertDefinitionEntity.class))).andReturn(groups).once();
  AlertDefinitionEntity definition=createNiceMock(AlertDefinitionEntity.class);
  EasyMock.expect(definition.getDefinitionId()).andReturn(1L).anyTimes();
  EasyMock.expect(definition.getServiceName()).andReturn(Services.AMBARI.name()).anyTimes();
  EasyMock.expect(definition.getLabel()).andReturn("ambari-foo-alert").anyTimes();
  EasyMock.expect(definition.getDescription()).andReturn("Ambari Foo Alert").anyTimes();
  EasyMock.expect(dispatchDao.createNotices((List<AlertNoticeEntity>)EasyMock.anyObject())).andReturn(new ArrayList<AlertNoticeEntity>()).once();
  AlertCurrentEntity current=getMockedAlertCurrentEntity();
  AlertHistoryEntity history=createNiceMock(AlertHistoryEntity.class);
  AlertStateChangeEvent event=createNiceMock(AlertStateChangeEvent.class);
  Alert alert=createNiceMock(Alert.class);
  EasyMock.expect(current.getAlertHistory()).andReturn(history).anyTimes();
  EasyMock.expect(current.getFirmness()).andReturn(AlertFirmness.HARD).atLeastOnce();
  EasyMock.expect(history.getClusterId()).andReturn(1L).atLeastOnce();
  EasyMock.expect(history.getAlertState()).andReturn(AlertState.CRITICAL).atLeastOnce();
  EasyMock.expect(history.getAlertDefinition()).andReturn(definition).atLeastOnce();
  EasyMock.expect(alert.getText()).andReturn("The HDFS Foo Alert Is Not Good").atLeastOnce();
  EasyMock.expect(alert.getState()).andReturn(AlertState.CRITICAL).atLeastOnce();
  EasyMock.expect(event.getCurrentAlert()).andReturn(current).atLeastOnce();
  EasyMock.expect(event.getNewHistoricalEntry()).andReturn(history).atLeastOnce();
  EasyMock.expect(event.getAlert()).andReturn(alert).atLeastOnce();
  replayAll();
  eventPublisher.publish(event);
  verifyAll();
}
