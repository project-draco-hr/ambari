{
  ExecutionScheduleManager scheduleManagerMock=createMock(ExecutionScheduleManager.class);
  BatchRequestJob batchRequestJob=new BatchRequestJob(scheduleManagerMock,100L);
  String clusterName="mycluster";
  Long requestId=11L;
  Map<String,Object> properties=new HashMap<String,Object>();
  properties.put(BatchRequestJob.BATCH_REQUEST_EXECUTION_ID_KEY,1L);
  properties.put(BatchRequestJob.BATCH_REQUEST_BATCH_ID_KEY,1L);
  properties.put(BatchRequestJob.BATCH_REQUEST_CLUSTER_NAME_KEY,clusterName);
  BatchRequestResponse pendingResponse=new BatchRequestResponse();
  pendingResponse.setStatus(HostRoleStatus.PENDING.toString());
  BatchRequestResponse inProgressResponse=new BatchRequestResponse();
  inProgressResponse.setStatus(HostRoleStatus.IN_PROGRESS.toString());
  BatchRequestResponse completedResponse=new BatchRequestResponse();
  completedResponse.setStatus(HostRoleStatus.COMPLETED.toString());
  Capture<Long> executionIdCapture=new Capture<Long>();
  Capture<Long> batchIdCapture=new Capture<Long>();
  Capture<String> clusterNameCapture=new Capture<String>();
  expect(scheduleManagerMock.executeBatchRequest(captureLong(executionIdCapture),captureLong(batchIdCapture),capture(clusterNameCapture))).andReturn(requestId);
  expect(scheduleManagerMock.getBatchRequestResponse(requestId,clusterName)).andReturn(pendingResponse).times(2);
  expect(scheduleManagerMock.getBatchRequestResponse(requestId,clusterName)).andReturn(inProgressResponse).times(4);
  expect(scheduleManagerMock.getBatchRequestResponse(requestId,clusterName)).andReturn(completedResponse).atLeastOnce();
  replay(scheduleManagerMock);
  batchRequestJob.doWork(properties);
  verify(scheduleManagerMock);
}
