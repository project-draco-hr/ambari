{
synchronized (lock) {
    if (!initialized) {
      LOG.info("Initializing Kafka Timeline Metrics Sink");
      try {
        hostname=InetAddress.getLocalHost().getHostName();
        if ((hostname == null) || (!hostname.contains("."))) {
          hostname=InetAddress.getLocalHost().getCanonicalHostName();
        }
      }
 catch (      UnknownHostException e) {
        LOG.error("Could not identify hostname.");
        throw new RuntimeException("Could not identify hostname.",e);
      }
      KafkaMetricsConfig metricsConfig=new KafkaMetricsConfig(props);
      timeoutSeconds=props.getInt(METRICS_POST_TIMEOUT_SECONDS,DEFAULT_POST_TIMEOUT_SECONDS);
      int metricsSendInterval=props.getInt(TIMELINE_METRICS_SEND_INTERVAL_PROPERTY,MAX_EVICTION_TIME_MILLIS);
      int maxRowCacheSize=props.getInt(TIMELINE_METRICS_MAX_ROW_CACHE_SIZE_PROPERTY,MAX_RECS_PER_NAME_DEFAULT);
      String metricCollectorHost=props.getString(TIMELINE_HOST_PROPERTY,TIMELINE_DEFAULT_HOST);
      String metricCollectorPort=props.getString(TIMELINE_PORT_PROPERTY,TIMELINE_DEFAULT_PORT);
      String metricCollectorProtocol=props.getString(TIMELINE_PROTOCOL_PROPERTY,TIMELINE_DEFAULT_PROTOCOL);
      setMetricsCache(new TimelineMetricsCache(maxRowCacheSize,metricsSendInterval));
      collectorUri=metricCollectorProtocol + "://" + metricCollectorHost+ ":"+ metricCollectorPort+ WS_V1_TIMELINE_METRICS;
      if (collectorUri.toLowerCase().startsWith("https://")) {
        String trustStorePath=props.getString(SSL_KEYSTORE_PATH_PROPERTY).trim();
        String trustStoreType=props.getString(SSL_KEYSTORE_TYPE_PROPERTY).trim();
        String trustStorePwd=props.getString(SSL_KEYSTORE_PASSWORD_PROPERTY).trim();
        loadTruststore(trustStorePath,trustStoreType,trustStorePwd);
      }
      String excludedMetricsStr=props.getString(EXCLUDED_METRICS_PROPERTY,"");
      if (!StringUtils.isEmpty(excludedMetricsStr.trim())) {
        excludedMetricsPrefixes=excludedMetricsStr.trim().split(",");
      }
      String includedMetricsStr=props.getString(INCLUDED_METRICS_PROPERTY,"");
      if (!StringUtils.isEmpty(includedMetricsStr.trim())) {
        includedMetricsPrefixes=includedMetricsStr.trim().split(",");
      }
      initializeReporter();
      if (props.getBoolean(TIMELINE_REPORTER_ENABLED_PROPERTY,false)) {
        startReporter(metricsConfig.pollingIntervalSecs());
      }
      if (LOG.isDebugEnabled()) {
        LOG.debug("CollectorUri = " + collectorUri);
        LOG.debug("MetricsSendInterval = " + metricsSendInterval);
        LOG.debug("MaxRowCacheSize = " + maxRowCacheSize);
        LOG.debug("Excluded metrics prefixes = " + excludedMetricsStr);
        LOG.debug("Included metrics prefixes = " + includedMetricsStr);
      }
    }
  }
}
