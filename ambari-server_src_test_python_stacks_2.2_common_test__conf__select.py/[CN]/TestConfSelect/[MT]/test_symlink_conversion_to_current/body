@patch('resource_management.core.shell.call')
@patch.object(os.path, 'exists')
@patch.object(os.path, 'islink')
@patch('resource_management.libraries.functions.conf_select._valid', new=MagicMock(return_value=True))
@patch('resource_management.libraries.functions.conf_select.create', new=MagicMock(return_value=['/etc/hadoop/2.3.0.0-1234/0']))
@patch('resource_management.libraries.functions.conf_select.select', new=MagicMock())
def test_symlink_conversion_to_current(self, islink_mock, path_mock, shell_call_mock):
    '\n    Tests that conf-select creates the correct symlink directories.\n    :return:\n    '

    def mock_call(command, **kwargs):
        '\n      Instead of shell.call, call a command whose output equals the command.\n      :param command: Command that will be echoed.\n      :return: Returns a tuple of (process output code, stdout, stderr)\n      '
        return (0, '/etc/hadoop/conf', None)

    def path_mock_call(path):
        if (path == '/etc/hadoop/conf'):
            return True
        if (path == '/etc/hadoop/2.3.0.0-1234/0'):
            return True
        return False

    def islink_mock_call(path):
        if (path == '/etc/hadoop/conf'):
            return False
        return False
    path_mock.side_effect = path_mock_call
    islink_mock.side_effect = islink_mock_call
    shell_call_mock.side_effect = mock_call
    conf_select.convert_conf_directories_to_symlinks('hadoop', '2.3.0.0-1234', conf_select._PACKAGE_DIRS['hadoop'])
    self.assertEqual(pprint.pformat(self.env.resource_list), "[Execute[('cp', '-R', '-p', '/etc/hadoop/conf', '/etc/hadoop/conf.backup')],\n Directory['/etc/hadoop/conf'],\n Link['/etc/hadoop/conf']]")
