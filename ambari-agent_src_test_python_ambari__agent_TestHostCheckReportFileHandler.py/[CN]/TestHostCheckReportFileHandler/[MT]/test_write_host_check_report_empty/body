def test_write_host_check_report_empty(self):
    tmpfile = tempfile.mktemp()
    config = ConfigParser.RawConfigParser()
    config.add_section('agent')
    config.set('agent', 'prefix', os.path.dirname(tmpfile))
    handler = HostCheckReportFileHandler(config)
    mydict = {}
    mydict['hostHealth'] = {}
    mydict['existingUsers'] = []
    mydict['alternatives'] = []
    mydict['stackFoldersAndFiles'] = []
    mydict['hostHealth']['activeJavaProcs'] = []
    mydict['installedPackages'] = []
    mydict['existingRepos'] = []
    handler.writeHostCheckFile(mydict)
    configValidator = ConfigParser.RawConfigParser()
    configPath = os.path.join(os.path.dirname(tmpfile), HostCheckReportFileHandler.HOST_CHECK_FILE)
    configValidator.read(configPath)
    users = configValidator.get('users', 'usr_list')
    users = configValidator.get('users', 'usr_homedir_list')
    self.assertEquals(users, '')
    names = configValidator.get('alternatives', 'symlink_list')
    targets = configValidator.get('alternatives', 'target_list')
    self.assertEquals(names, '')
    self.assertEquals(targets, '')
    paths = configValidator.get('directories', 'dir_list')
    self.assertEquals(paths, '')
    procs = configValidator.get('processes', 'proc_list')
    self.assertEquals(procs, '')
    time = configValidator.get('metadata', 'created')
    self.assertTrue((time != None))
