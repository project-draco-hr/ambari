{
  StackEntity stackEntity=stackDAO.find(HDP_22_STACK.getStackName(),HDP_22_STACK.getStackVersion());
  Assert.assertNotNull(stackEntity);
  ResourceTypeEntity resourceTypeEntity=new ResourceTypeEntity();
  resourceTypeEntity.setId(ResourceType.CLUSTER.getId());
  resourceTypeEntity.setName(ResourceType.CLUSTER.name());
  resourceTypeEntity=resourceTypeDAO.merge(resourceTypeEntity);
  ResourceEntity resourceEntity=new ResourceEntity();
  resourceEntity.setResourceType(resourceTypeEntity);
  ClusterEntity clusterEntity=new ClusterEntity();
  clusterEntity.setClusterName("test_cluster1");
  clusterEntity.setClusterInfo("test_cluster_info1");
  clusterEntity.setResource(resourceEntity);
  clusterEntity.setDesiredStack(stackEntity);
  clusterDAO.create(clusterEntity);
  RepositoryVersionEntity repoVersionEntity=helper.getOrCreateRepositoryVersion(HDP_22_STACK,repoVersion_2200);
  ClusterVersionEntity clusterVersionEntity=new ClusterVersionEntity(clusterEntity,repoVersionEntity,RepositoryVersionState.CURRENT,System.currentTimeMillis(),System.currentTimeMillis(),"admin");
  List<ClusterVersionEntity> clusterVersionEntities=new ArrayList<ClusterVersionEntity>();
  clusterVersionEntities.add(clusterVersionEntity);
  clusterEntity.setClusterVersionEntities(clusterVersionEntities);
  clusterVersionDAO.create(clusterVersionEntity);
  clusterDAO.merge(clusterEntity);
  HostEntity host1=new HostEntity();
  HostEntity host2=new HostEntity();
  HostEntity host3=new HostEntity();
  host1.setHostName("test_host1");
  host2.setHostName("test_host2");
  host3.setHostName("test_host3");
  host1.setIpv4("192.168.0.1");
  host2.setIpv4("192.168.0.2");
  host3.setIpv4("192.168.0.3");
  List<HostEntity> hostEntities=new ArrayList<HostEntity>();
  hostEntities.add(host1);
  hostEntities.add(host2);
  hostEntities.add(host3);
  host1.setClusterEntities(Arrays.asList(clusterEntity));
  host2.setClusterEntities(Arrays.asList(clusterEntity));
  host3.setClusterEntities(Arrays.asList(clusterEntity));
  hostDAO.create(host1);
  hostDAO.create(host2);
  hostDAO.create(host3);
  clusterEntity.setHostEntities(hostEntities);
  clusterDAO.merge(clusterEntity);
  HostVersionEntity hostVersionEntity1=new HostVersionEntity(host1,clusterVersionEntity.getRepositoryVersion(),RepositoryVersionState.CURRENT);
  HostVersionEntity hostVersionEntity2=new HostVersionEntity(host2,clusterVersionEntity.getRepositoryVersion(),RepositoryVersionState.INSTALLED);
  HostVersionEntity hostVersionEntity3=new HostVersionEntity(host3,clusterVersionEntity.getRepositoryVersion(),RepositoryVersionState.INSTALLED);
  hostVersionDAO.create(hostVersionEntity1);
  hostVersionDAO.create(hostVersionEntity2);
  hostVersionDAO.create(hostVersionEntity3);
}
