{
  injector=Guice.createInjector(new TestModule());
  driver=injector.getInstance(FSMDriverInterface.class);
  invoker=injector.getInstance(StateMachineInvokerInterface.class);
  plugin=mock(ComponentPlugin.class);
  when(plugin.getActiveRoles()).thenReturn(roles);
  when(plugin.getRequiredComponents()).thenReturn(null);
  cdef=mock(ClusterDefinition.class);
  when(cdef.getEnabledServices()).thenReturn(Arrays.asList("comp1"));
  cluster=mock(Cluster.class);
  when(cluster.getClusterDefinition(anyInt())).thenReturn(cdef);
  when(cluster.getName()).thenReturn("cluster1");
  when(cluster.getComponentDefinition("comp1")).thenReturn(plugin);
  when(cluster.getLatestRevisionNumber()).thenReturn(-1);
  Action startAction=new Action();
  startAction.setKind(Kind.START_ACTION);
  when(plugin.startServer("cluster1","abc")).thenReturn(startAction);
  when(plugin.runCheckRole()).thenReturn("abc");
  when(plugin.runPreStartRole()).thenReturn("abc");
  Action preStartAction=new Action();
  preStartAction.setKind(Kind.RUN_ACTION);
  when(plugin.preStartAction("cluster1","abc")).thenReturn(preStartAction);
  Action checkServiceAction=new Action();
  preStartAction.setKind(Kind.RUN_ACTION);
  when(plugin.checkService("cluster1","abc")).thenReturn(checkServiceAction);
  nodes=mock(Nodes.class);
  clusters=mock(Clusters.class);
  node=new Node();
  node.setName("localhost");
  NodeState nodeState=new NodeState();
  nodeState.setClusterName("cluster1");
  node.setNodeState(nodeState);
  when(nodes.getNode("localhost")).thenReturn(node);
  when(nodes.getNodeRoles("localhost")).thenReturn(Arrays.asList(roles));
  when(nodes.getHeathOfNode("localhost")).thenReturn(NodeState.HEALTHY);
  when(clusters.getClusterByName("cluster1")).thenReturn(cluster);
  when(clusters.getInstallAndConfigureScript(anyString(),anyInt())).thenReturn(script);
  stack=mock(Stack.class);
  usergroup=mock(UserGroup.class);
  component=mock(Component.class);
  when(clusters.getClusterStack("cluster1",true)).thenReturn(stack);
  when(stack.getComponentByName(anyString())).thenReturn(component);
  when(component.getUser_group()).thenReturn(usergroup);
  when(usergroup.getUser()).thenReturn("hadoop");
  heartbeat=new HeartBeat();
  heartbeat.setIdle(true);
  heartbeat.setInstallScriptHash(-1);
  heartbeat.setHostname("localhost");
  heartbeat.setInstalledRoleStates(new ArrayList<AgentRoleState>());
}
