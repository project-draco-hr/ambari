def recommendAmsConfigurations(self, configurations, clusterData, services, hosts):
    putAmsHbaseSiteProperty = self.putProperty(configurations, 'ams-hbase-site')
    putTimelineServiceProperty = self.putProperty(configurations, 'ams-site')
    putHbaseEnvProperty = self.putProperty(configurations, 'ams-hbase-env')
    amsCollectorHosts = self.getComponentHostNames(services, 'AMS', 'METRIC_COLLECTOR')
    putHbaseEnvProperty('hbase_regionserver_heapsize', '1024m')
    putAmsHbaseSiteProperty('hfile.block.cache.size', 0.3)
    putAmsHbaseSiteProperty('hbase.regionserver.global.memstore.upperLimit', 0.5)
    putAmsHbaseSiteProperty('hbase.regionserver.global.memstore.lowerLimit', 0.4)
    putTimelineServiceProperty('timeline.metrics.host.aggregator.ttl', 86400)
    if (len(amsCollectorHosts) > 1):
        pass
    else:
        totalHostsCount = len(hosts['items'])
        if (totalHostsCount > 400):
            putHbaseEnvProperty('hbase_master_heapsize', '12288m')
        elif (totalHostsCount > 100):
            putHbaseEnvProperty('hbase_master_heapsize', '6144m')
        elif (totalHostsCount > 50):
            putHbaseEnvProperty('hbase_master_heapsize', '2048m')
        else:
            putHbaseEnvProperty('hbase_master_heapsize', '1024m')
