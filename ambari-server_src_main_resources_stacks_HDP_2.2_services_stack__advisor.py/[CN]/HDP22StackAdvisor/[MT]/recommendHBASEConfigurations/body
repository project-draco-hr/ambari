def recommendHBASEConfigurations(self, configurations, clusterData, services, hosts):
    super(HDP22StackAdvisor, self).recommendHbaseConfigurations(configurations, clusterData, services, hosts)
    putHbaseEnvPropertyAttributes = self.putPropertyAttribute(configurations, 'hbase-env')
    hmaster_host = self.getHostWithComponent('HBASE', 'HBASE_MASTER', services, hosts)
    if (hmaster_host is not None):
        host_ram = hmaster_host['Hosts']['total_mem']
        putHbaseEnvPropertyAttributes('hbase_master_heapsize', 'maximum', max(1024, int((host_ram / 1024))))
    rs_hosts = self.getHostsWithComponent('HBASE', 'HBASE_REGIONSERVER', services, hosts)
    if ((rs_hosts is not None) and (len(rs_hosts) > 0)):
        min_ram = rs_hosts[0]['Hosts']['total_mem']
        for host in rs_hosts:
            host_ram = host['Hosts']['total_mem']
            min_ram = min(min_ram, host_ram)
        putHbaseEnvPropertyAttributes('hbase_regionserver_heapsize', 'maximum', max(1024, int(((min_ram * 0.8) / 1024))))
    putHbaseSiteProperty = self.putProperty(configurations, 'hbase-site', services)
    putHbaseSitePropertyAttributes = self.putPropertyAttribute(configurations, 'hbase-site')
    putHbaseSiteProperty('hbase.regionserver.global.memstore.size', '0.4')
    if (('hbase-env' in services['configurations']) and ('phoenix_sql_enabled' in services['configurations']['hbase-env']['properties']) and ('true' == services['configurations']['hbase-env']['properties']['phoenix_sql_enabled'].lower())):
        putHbaseSiteProperty('hbase.regionserver.wal.codec', 'org.apache.hadoop.hbase.regionserver.wal.IndexedWALEditCodec')
        putHbaseSiteProperty('phoenix.functions.allowUserDefinedFunctions', 'true')
    else:
        putHbaseSiteProperty('hbase.regionserver.wal.codec', 'org.apache.hadoop.hbase.regionserver.wal.WALCellCodec')
        if (('hbase.rpc.controllerfactory.class' in configurations['hbase-site']['properties']) or (('hbase-site' in services['configurations']) and ('hbase.rpc.controllerfactory.class' in services['configurations']['hbase-site']['properties']))):
            putHbaseSitePropertyAttributes('hbase.rpc.controllerfactory.class', 'delete', 'true')
        if (('phoenix.functions.allowUserDefinedFunctions' in configurations['hbase-site']['properties']) or (('hbase-site' in services['configurations']) and ('phoenix.functions.allowUserDefinedFunctions' in services['configurations']['hbase-site']['properties']))):
            putHbaseSitePropertyAttributes('phoenix.functions.allowUserDefinedFunctions', 'delete', 'true')
    if (('ranger-env' in services['configurations']) and ('ranger-hbase-plugin-properties' in services['configurations']) and ('ranger-hbase-plugin-enabled' in services['configurations']['ranger-env']['properties'])):
        putHbaseRangerPluginProperty = self.putProperty(configurations, 'ranger-hbase-plugin-properties', services)
        rangerEnvHbasePluginProperty = services['configurations']['ranger-env']['properties']['ranger-hbase-plugin-enabled']
        putHbaseRangerPluginProperty('ranger-hbase-plugin-enabled', rangerEnvHbasePluginProperty)
        if (('cluster-env' in services['configurations']) and ('smokeuser' in services['configurations']['cluster-env']['properties'])):
            smoke_user = services['configurations']['cluster-env']['properties']['smokeuser']
            putHbaseRangerPluginProperty('policy_user', smoke_user)
    rangerPluginEnabled = ''
    if (('ranger-hbase-plugin-properties' in configurations) and ('ranger-hbase-plugin-enabled' in configurations['ranger-hbase-plugin-properties']['properties'])):
        rangerPluginEnabled = configurations['ranger-hbase-plugin-properties']['properties']['ranger-hbase-plugin-enabled']
    elif (('ranger-hbase-plugin-properties' in services['configurations']) and ('ranger-hbase-plugin-enabled' in services['configurations']['ranger-hbase-plugin-properties']['properties'])):
        rangerPluginEnabled = services['configurations']['ranger-hbase-plugin-properties']['properties']['ranger-hbase-plugin-enabled']
    if (rangerPluginEnabled and (rangerPluginEnabled.lower() == 'Yes'.lower())):
        putHbaseSiteProperty('hbase.security.authorization', 'true')
    threshold = 23
    mb = 1024
    if (int(clusterData['hbaseRam']) > threshold):
        regionserver_total_ram = (int(clusterData['hbaseRam']) * mb)
        regionserver_heap_size = 20480
        regionserver_max_direct_memory_size = (regionserver_total_ram - regionserver_heap_size)
        hfile_block_cache_size = '0.4'
        block_cache_heap = 8192
        hbase_regionserver_global_memstore_size = '0.4'
        reserved_offheap_memory = 2048
        bucketcache_offheap_memory = (regionserver_max_direct_memory_size - reserved_offheap_memory)
        hbase_bucketcache_size = bucketcache_offheap_memory
        hbase_bucketcache_percentage_in_combinedcache = (float(bucketcache_offheap_memory) / hbase_bucketcache_size)
        hbase_bucketcache_percentage_in_combinedcache_str = '{0:.4f}'.format((math.ceil((hbase_bucketcache_percentage_in_combinedcache * 10000)) / 10000.0))
        putHbaseSiteProperty('hfile.block.cache.size', hfile_block_cache_size)
        putHbaseSiteProperty('hbase.regionserver.global.memstore.size', hbase_regionserver_global_memstore_size)
        putHbaseSiteProperty('hbase.bucketcache.ioengine', 'offheap')
        putHbaseSiteProperty('hbase.bucketcache.size', hbase_bucketcache_size)
        putHbaseSiteProperty('hbase.bucketcache.percentage.in.combinedcache', hbase_bucketcache_percentage_in_combinedcache_str)
        putHbaseEnvProperty = self.putProperty(configurations, 'hbase-env', services)
        putHbaseEnvProperty('hbase_max_direct_memory_size', regionserver_max_direct_memory_size)
        putHbaseEnvProperty('hbase_regionserver_heapsize', regionserver_heap_size)
    else:
        if (('hbase.bucketcache.ioengine' in configurations['hbase-site']['properties']) or (('hbase-site' in services['configurations']) and ('hbase.bucketcache.ioengine' in services['configurations']['hbase-site']['properties']))):
            putHbaseSitePropertyAttributes('hbase.bucketcache.ioengine', 'delete', 'true')
        if (('hbase.bucketcache.size' in configurations['hbase-site']['properties']) or (('hbase-site' in services['configurations']) and ('hbase.bucketcache.size' in services['configurations']['hbase-site']['properties']))):
            putHbaseSitePropertyAttributes('hbase.bucketcache.size', 'delete', 'true')
        if (('hbase.bucketcache.percentage.in.combinedcache' in configurations['hbase-site']['properties']) or (('hbase-site' in services['configurations']) and ('hbase.bucketcache.percentage.in.combinedcache' in services['configurations']['hbase-site']['properties']))):
            putHbaseSitePropertyAttributes('hbase.bucketcache.percentage.in.combinedcache', 'delete', 'true')
        if (('hbase_max_direct_memory_size' in configurations['hbase-env']['properties']) or (('hbase-env' in services['configurations']) and ('hbase_max_direct_memory_size' in services['configurations']['hbase-env']['properties']))):
            putHbaseEnvPropertyAttributes('hbase_max_direct_memory_size', 'delete', 'true')
    hbaseCoProcessorConfigs = {'hbase.coprocessor.region.classes': [], 'hbase.coprocessor.regionserver.classes': [], 'hbase.coprocessor.master.classes': [], }
    for key in hbaseCoProcessorConfigs:
        hbase_coprocessor_classes = None
        if (key in configurations['hbase-site']['properties']):
            hbase_coprocessor_classes = configurations['hbase-site']['properties'][key].strip()
        elif (('hbase-site' in services['configurations']) and (key in services['configurations']['hbase-site']['properties'])):
            hbase_coprocessor_classes = services['configurations']['hbase-site']['properties'][key].strip()
        if hbase_coprocessor_classes:
            hbaseCoProcessorConfigs[key] = hbase_coprocessor_classes.split(',')
    hbase_security_authorization = None
    if (('hbase-site' in configurations) and ('hbase.security.authorization' in configurations['hbase-site']['properties'])):
        hbase_security_authorization = configurations['hbase-site']['properties']['hbase.security.authorization']
    elif (('hbase-site' in services['configurations']) and ('hbase.security.authorization' in services['configurations']['hbase-site']['properties'])):
        hbase_security_authorization = services['configurations']['hbase-site']['properties']['hbase.security.authorization']
    if hbase_security_authorization:
        if ('true' == hbase_security_authorization.lower()):
            hbaseCoProcessorConfigs['hbase.coprocessor.master.classes'].append('org.apache.hadoop.hbase.security.access.AccessController')
            hbaseCoProcessorConfigs['hbase.coprocessor.regionserver.classes'].append('org.apache.hadoop.hbase.security.access.AccessController')
            authRegionClasses = ['org.apache.hadoop.hbase.security.access.SecureBulkLoadEndpoint', 'org.apache.hadoop.hbase.security.access.AccessController']
            for item in range(len(authRegionClasses)):
                hbaseCoProcessorConfigs['hbase.coprocessor.region.classes'].append(authRegionClasses[item])
        else:
            if ('org.apache.hadoop.hbase.security.access.AccessController' in hbaseCoProcessorConfigs['hbase.coprocessor.region.classes']):
                hbaseCoProcessorConfigs['hbase.coprocessor.region.classes'].remove('org.apache.hadoop.hbase.security.access.AccessController')
            if ('org.apache.hadoop.hbase.security.access.AccessController' in hbaseCoProcessorConfigs['hbase.coprocessor.master.classes']):
                hbaseCoProcessorConfigs['hbase.coprocessor.master.classes'].remove('org.apache.hadoop.hbase.security.access.AccessController')
            hbaseCoProcessorConfigs['hbase.coprocessor.region.classes'].append('org.apache.hadoop.hbase.security.access.SecureBulkLoadEndpoint')
            if (('hbase.coprocessor.regionserver.classes' in configurations['hbase-site']['properties']) or (('hbase-site' in services['configurations']) and ('hbase.coprocessor.regionserver.classes' in services['configurations']['hbase-site']['properties']))):
                putHbaseSitePropertyAttributes('hbase.coprocessor.regionserver.classes', 'delete', 'true')
    else:
        hbaseCoProcessorConfigs['hbase.coprocessor.region.classes'].append('org.apache.hadoop.hbase.security.access.SecureBulkLoadEndpoint')
        if (('hbase.coprocessor.regionserver.classes' in configurations['hbase-site']['properties']) or (('hbase-site' in services['configurations']) and ('hbase.coprocessor.regionserver.classes' in services['configurations']['hbase-site']['properties']))):
            putHbaseSitePropertyAttributes('hbase.coprocessor.regionserver.classes', 'delete', 'true')
    if (('hbase-site' in services['configurations']) and ('hbase.security.authentication' in services['configurations']['hbase-site']['properties'])):
        if ('kerberos' == services['configurations']['hbase-site']['properties']['hbase.security.authentication'].lower()):
            if ('org.apache.hadoop.hbase.security.access.SecureBulkLoadEndpoint' not in hbaseCoProcessorConfigs['hbase.coprocessor.region.classes']):
                hbaseCoProcessorConfigs['hbase.coprocessor.region.classes'].append('org.apache.hadoop.hbase.security.access.SecureBulkLoadEndpoint')
            if ('org.apache.hadoop.hbase.security.token.TokenProvider' not in hbaseCoProcessorConfigs['hbase.coprocessor.region.classes']):
                hbaseCoProcessorConfigs['hbase.coprocessor.region.classes'].append('org.apache.hadoop.hbase.security.token.TokenProvider')
        elif ('org.apache.hadoop.hbase.security.token.TokenProvider' in hbaseCoProcessorConfigs['hbase.coprocessor.region.classes']):
            hbaseCoProcessorConfigs['hbase.coprocessor.region.classes'].remove('org.apache.hadoop.hbase.security.token.TokenProvider')
    for key in hbaseCoProcessorConfigs:
        uniqueCoprocessorRegionClassList = []
        [uniqueCoprocessorRegionClassList.append(i) for i in hbaseCoProcessorConfigs[key] if ((not (i in uniqueCoprocessorRegionClassList)) and (i.strip() not in ['{{hbase_coprocessor_region_classes}}', '{{hbase_coprocessor_master_classes}}', '{{hbase_coprocessor_regionserver_classes}}']))]
        putHbaseSiteProperty(key, ','.join(set(uniqueCoprocessorRegionClassList)))
    servicesList = [service['StackServices']['service_name'] for service in services['services']]
    rangerServiceVersion = ''
    if ('RANGER' in servicesList):
        rangerServiceVersion = [service['StackServices']['service_version'] for service in services['services'] if (service['StackServices']['service_name'] == 'RANGER')][0]
    if (rangerServiceVersion and (rangerServiceVersion == '0.4.0')):
        rangerClass = 'com.xasecure.authorization.hbase.XaSecureAuthorizationCoprocessor'
    else:
        rangerClass = 'org.apache.ranger.authorization.hbase.RangerAuthorizationCoprocessor'
    nonRangerClass = 'org.apache.hadoop.hbase.security.access.AccessController'
    hbaseClassConfigs = hbaseCoProcessorConfigs.keys()
    for item in range(len(hbaseClassConfigs)):
        if ('hbase-site' in services['configurations']):
            if (hbaseClassConfigs[item] in services['configurations']['hbase-site']['properties']):
                if (('hbase-site' in configurations) and (hbaseClassConfigs[item] in configurations['hbase-site']['properties'])):
                    coprocessorConfig = configurations['hbase-site']['properties'][hbaseClassConfigs[item]]
                else:
                    coprocessorConfig = services['configurations']['hbase-site']['properties'][hbaseClassConfigs[item]]
                coprocessorClasses = coprocessorConfig.split(',')
                coprocessorClasses = filter(None, coprocessorClasses)
                if (rangerPluginEnabled and (rangerPluginEnabled.lower() == 'Yes'.lower())):
                    if (nonRangerClass in coprocessorClasses):
                        coprocessorClasses.remove(nonRangerClass)
                    if (not (rangerClass in coprocessorClasses)):
                        coprocessorClasses.append(rangerClass)
                    putHbaseSiteProperty(hbaseClassConfigs[item], ','.join(coprocessorClasses))
                elif (rangerPluginEnabled and (rangerPluginEnabled.lower() == 'No'.lower())):
                    if (rangerClass in coprocessorClasses):
                        coprocessorClasses.remove(rangerClass)
                        if (not (nonRangerClass in coprocessorClasses)):
                            coprocessorClasses.append(nonRangerClass)
                        putHbaseSiteProperty(hbaseClassConfigs[item], ','.join(coprocessorClasses))
            elif (rangerPluginEnabled and (rangerPluginEnabled.lower() == 'Yes'.lower())):
                putHbaseSiteProperty(hbaseClassConfigs[item], rangerClass)
