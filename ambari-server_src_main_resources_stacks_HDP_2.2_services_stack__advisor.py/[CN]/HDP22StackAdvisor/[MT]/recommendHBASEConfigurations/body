def recommendHBASEConfigurations(self, configurations, clusterData, services, hosts):
    super(HDP22StackAdvisor, self).recommendHbaseEnvConfigurations(configurations, clusterData, services, hosts)
    putHbaseEnvPropertyAttributes = self.putPropertyAttribute(configurations, 'hbase-env')
    rs_hosts = self.getHostsWithComponent('HBASE', 'HBASE_REGIONSERVER', services, hosts)
    if ((rs_hosts is not None) and (len(rs_hosts) > 0)):
        min_ram = rs_hosts[0]['Hosts']['total_mem']
        for host in rs_hosts:
            host_ram = host['Hosts']['total_mem']
            min_ram = min(min_ram, host_ram)
        putHbaseEnvPropertyAttributes('hbase_regionserver_heapsize', 'maximum', max(1024, int(((min_ram * 0.8) / 1024))))
    putHbaseSiteProperty = self.putProperty(configurations, 'hbase-site', services)
    putHbaseSitePropertyAttributes = self.putPropertyAttribute(configurations, 'hbase-site')
    putHbaseSiteProperty('hbase.regionserver.global.memstore.upperLimit', '0.4')
    if (('hbase-env' in services['configurations']) and ('phoenix_sql_enabled' in services['configurations']['hbase-env']['properties'])):
        if ('true' == services['configurations']['hbase-env']['properties']['phoenix_sql_enabled'].lower()):
            putHbaseSiteProperty('hbase.regionserver.rpc.scheduler.factory.class', 'org.apache.hadoop.hbase.ipc.PhoenixRpcSchedulerFactory')
            putHbaseSiteProperty('hbase.rpc.controllerfactory.class', 'org.apache.hadoop.hbase.ipc.controller.ServerRpcControllerFactory')
            putHbaseSiteProperty('hbase.regionserver.wal.codec', 'org.apache.hadoop.hbase.regionserver.wal.IndexedWALEditCodec')
        else:
            putHbaseSiteProperty('hbase.regionserver.wal.codec', 'org.apache.hadoop.hbase.regionserver.wal.WALCellCodec')
            putHbaseSitePropertyAttributes('hbase.regionserver.rpc.scheduler.factory.class', 'delete', 'true')
            putHbaseSitePropertyAttributes('hbase.rpc.controllerfactory.class', 'delete', 'true')
    servicesList = [service['StackServices']['service_name'] for service in services['services']]
    if (('ranger-hbase-plugin-properties' in services['configurations']) and ('ranger-hbase-plugin-enabled' in services['configurations']['ranger-hbase-plugin-properties']['properties'])):
        rangerPluginEnabled = services['configurations']['ranger-hbase-plugin-properties']['properties']['ranger-hbase-plugin-enabled']
        if (('RANGER' in servicesList) and (rangerPluginEnabled.lower() == 'Yes'.lower())):
            putHbaseSiteProperty('hbase.security.authorization', 'true')
            putHbaseSiteProperty('hbase.coprocessor.master.classes', 'com.xasecure.authorization.hbase.XaSecureAuthorizationCoprocessor')
            putHbaseSiteProperty('hbase.coprocessor.region.classes', 'com.xasecure.authorization.hbase.XaSecureAuthorizationCoprocessor')
    threshold = 23
    mb = 1024
    if (int(clusterData['hbaseRam']) > threshold):
        regionserver_total_ram = (int(clusterData['hbaseRam']) * mb)
        regionserver_heap_size = 20480
        regionserver_max_direct_memory_size = (regionserver_total_ram - regionserver_heap_size)
        hfile_block_cache_size = '0.4'
        block_cache_heap = 8192
        hbase_regionserver_global_memstore_size = '0.4'
        reserved_offheap_memory = 2048
        bucketcache_offheap_memory = (regionserver_max_direct_memory_size - reserved_offheap_memory)
        hbase_bucketcache_size = (block_cache_heap + bucketcache_offheap_memory)
        hbase_bucketcache_percentage_in_combinedcache = (float(bucketcache_offheap_memory) / hbase_bucketcache_size)
        hbase_bucketcache_percentage_in_combinedcache_str = '{0:.4f}'.format((math.ceil((hbase_bucketcache_percentage_in_combinedcache * 10000)) / 10000.0))
        putHbaseProperty = self.putProperty(configurations, 'hbase-site', services)
        putHbaseProperty('hfile.block.cache.size', hfile_block_cache_size)
        putHbaseProperty('hbase.regionserver.global.memstore.upperLimit', hbase_regionserver_global_memstore_size)
        putHbaseProperty('hbase.bucketcache.ioengine', 'offheap')
        putHbaseProperty('hbase.bucketcache.size', hbase_bucketcache_size)
        putHbaseProperty('hbase.bucketcache.percentage.in.combinedcache', hbase_bucketcache_percentage_in_combinedcache_str)
        putHbaseEnvProperty = self.putProperty(configurations, 'hbase-env', services)
        putHbaseEnvProperty('hbase_max_direct_memory_size', regionserver_max_direct_memory_size)
        putHbaseEnvProperty('hbase_regionserver_heapsize', regionserver_heap_size)
    else:
        putHbaseProperty = self.putProperty(configurations, 'hbase-site', services)
        putHbaseProperty('hbase.bucketcache.ioengine', '')
        putHbaseProperty('hbase.bucketcache.size', '')
        putHbaseProperty('hbase.bucketcache.percentage.in.combinedcache', '')
        putHbaseEnvProperty = self.putProperty(configurations, 'hbase-env', services)
        putHbaseEnvProperty('hbase_max_direct_memory_size', '')
