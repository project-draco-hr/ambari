def validateHBASEConfigurations(self, properties, recommendedDefaults, configurations, services, hosts):
    hbase_site = properties
    validationItems = []
    ranger_plugin_properties = getSiteProperties(configurations, 'ranger-hbase-plugin-properties')
    ranger_plugin_enabled = ranger_plugin_properties['ranger-hbase-plugin-enabled']
    prop_name = 'hbase.security.authorization'
    prop_val = 'true'
    servicesList = [service['StackServices']['service_name'] for service in services['services']]
    if (('RANGER' in servicesList) and (ranger_plugin_enabled.lower() == 'Yes'.lower())):
        if (hbase_site[prop_name] != prop_val):
            validationItems.append({'config-name': prop_name, 'item': self.getWarnItem('If Ranger HBASE Plugin is enabled.{0} needs to be set to {1}'.format(prop_name, prop_val)), })
        prop_name = 'hbase.coprocessor.master.classes'
        prop_val = 'com.xasecure.authorization.hbase.XaSecureAuthorizationCoprocessor'
        if (hbase_site[prop_name] != prop_val):
            validationItems.append({'config-name': prop_name, 'item': self.getWarnItem('If Ranger HBASE Plugin is enabled. {0} needs to be set to {1}'.format(prop_name, prop_val)), })
        prop_name = 'hbase.coprocessor.region.classes'
        prop_val = 'com.xasecure.authorization.hbase.XaSecureAuthorizationCoprocessor'
        if (hbase_site[prop_name] != prop_val):
            validationItems.append({'config-name': prop_name, 'item': self.getWarnItem('If Ranger HBASE Plugin is enabled. {0} needs to be set to {1}'.format(prop_name, prop_val)), })
    return self.toConfigurationValidationProblems(validationItems, 'hbase-site')
