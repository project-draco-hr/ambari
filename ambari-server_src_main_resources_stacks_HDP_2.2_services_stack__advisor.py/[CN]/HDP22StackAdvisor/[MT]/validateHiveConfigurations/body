def validateHiveConfigurations(self, properties, recommendedDefaults, configurations, services, hosts):
    super(HDP22StackAdvisor, self).validateHiveConfigurations(properties, recommendedDefaults, configurations, services, hosts)
    hive_site = properties
    validationItems = []
    ranger_plugin_properties = getSiteProperties(configurations, 'ranger-hive-plugin-properties')
    ranger_plugin_enabled = ranger_plugin_properties['ranger-hive-plugin-enabled']
    servicesList = [service['StackServices']['service_name'] for service in services['services']]
    if ('RANGER' in servicesList):
        if (ranger_plugin_enabled.lower() == 'Yes'.lower()):
            prop_name = 'hive.security.authorization.enabled'
            prop_val = 'true'
            if (hive_site[prop_name] != prop_val):
                validationItems.append({'config-name': prop_name, 'item': self.getWarnItem('If Ranger Hive Plugin is enabled. {0} needs to be set to {1}'.format(prop_name, prop_val)), })
            prop_name = 'hive.conf.restricted.list'
            prop_vals = 'hive.security.authorization.enabled,hive.security.authorization.manager,hive.security.authenticator.manager'.split(',')
            current_vals = hive_site[prop_name].split(',')
            missing_vals = []
            for val in prop_vals:
                if (not (val in current_vals)):
                    missing_vals.append(val)
            if missing_vals:
                validationItems.append({'config-name': prop_name, 'item': self.getWarnItem('If Ranger Hive Plugin is enabled. {0} needs to contain {1}'.format(prop_name, ','.join(missing_vals))), })
    return self.toConfigurationValidationProblems(validationItems, 'hive-site')
