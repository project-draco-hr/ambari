def recommendLogsearchConfigurations(self, configurations, clusterData, services, hosts):
    putLogsearchProperty = self.putProperty(configurations, 'logsearch-properties', services)
    logsearchSolrHosts = self.getComponentHostNames(services, 'LOGSEARCH', 'LOGSEARCH_SOLR')
    if ((logsearchSolrHosts is not None) and (len(logsearchSolrHosts) > 0) and ('logsearch-properties' in services['configurations'])):
        recommendedMinShards = len(logsearchSolrHosts)
        recommendedShards = (2 * len(logsearchSolrHosts))
        recommendedMaxShards = (3 * len(logsearchSolrHosts))
        putLogsearchAttribute = self.putPropertyAttribute(configurations, 'logsearch-properties')
        putLogsearchAttribute('logsearch.collection.service.logs.numshards', 'minimum', recommendedMinShards)
        putLogsearchAttribute('logsearch.collection.service.logs.numshards', 'maximum', recommendedMaxShards)
        putLogsearchProperty('logsearch.collection.service.logs.numshards', recommendedShards)
        putLogsearchAttribute('logsearch.collection.audit.logs.numshards', 'minimum', recommendedMinShards)
        putLogsearchAttribute('logsearch.collection.audit.logs.numshards', 'maximum', recommendedMaxShards)
        putLogsearchProperty('logsearch.collection.audit.logs.numshards', recommendedShards)
        replicationReccomendFloat = math.log(len(logsearchSolrHosts), 5)
        recommendedReplicationFactor = int((1 + math.floor(replicationReccomendFloat)))
        putLogsearchProperty('logsearch.collection.service.logs.replication.factor', recommendedReplicationFactor)
        putLogsearchProperty('logsearch.collection.audit.logs.replication.factor', recommendedReplicationFactor)
