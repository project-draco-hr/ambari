def recommendHIVEConfigurations(self, configurations, clusterData, services, hosts):
    super(HDP22StackAdvisor, self).recommendHiveConfigurations(configurations, clusterData, services, hosts)
    putHiveServerProperty = self.putProperty(configurations, 'hiveserver2-site', services)
    putHiveEnvProperty = self.putProperty(configurations, 'hive-env', services)
    putHiveSiteProperty = self.putProperty(configurations, 'hive-site', services)
    putHiveSitePropertyAttribute = self.putPropertyAttribute(configurations, 'hive-site')
    putHiveEnvPropertyAttributes = self.putPropertyAttribute(configurations, 'hive-env')
    servicesList = [service['StackServices']['service_name'] for service in services['services']]
    putHiveEnvProperty('hive_exec_orc_storage_strategy', 'SPEED')
    putHiveSiteProperty('hive.exec.orc.encoding.strategy', configurations['hive-env']['properties']['hive_exec_orc_storage_strategy'])
    putHiveSiteProperty('hive.exec.orc.compression.strategy', configurations['hive-env']['properties']['hive_exec_orc_storage_strategy'])
    putHiveSiteProperty('hive.exec.orc.default.stripe.size', '67108864')
    putHiveSiteProperty('hive.exec.orc.default.compress', 'ZLIB')
    putHiveSiteProperty('hive.optimize.index.filter', 'true')
    putHiveSiteProperty('hive.optimize.sort.dynamic.partition', 'false')
    putHiveSiteProperty('hive.vectorized.execution.enabled', 'true')
    putHiveSiteProperty('hive.vectorized.execution.reduce.enabled', 'false')
    putHiveEnvProperty('hive_txn_acid', 'off')
    if (str(configurations['hive-env']['properties']['hive_txn_acid']).lower() == 'on'):
        putHiveSiteProperty('hive.txn.manager', 'org.apache.hadoop.hive.ql.lockmgr.DbTxnManager')
        putHiveSiteProperty('hive.support.concurrency', 'true')
        putHiveSiteProperty('hive.compactor.initiator.on', 'true')
        putHiveSiteProperty('hive.compactor.worker.threads', '1')
        putHiveSiteProperty('hive.enforce.bucketing', 'true')
        putHiveSiteProperty('hive.exec.dynamic.partition.mode', 'nonstrict')
    else:
        putHiveSiteProperty('hive.txn.manager', 'org.apache.hadoop.hive.ql.lockmgr.DummyTxnManager')
        putHiveSiteProperty('hive.support.concurrency', 'false')
        putHiveSiteProperty('hive.compactor.initiator.on', 'false')
        putHiveSiteProperty('hive.compactor.worker.threads', '0')
        putHiveSiteProperty('hive.enforce.bucketing', 'false')
        putHiveSiteProperty('hive.exec.dynamic.partition.mode', 'strict')
    putHiveEnvProperty('hive_timeline_logging_enabled', 'true')
    hooks_properties = ['hive.exec.pre.hooks', 'hive.exec.post.hooks', 'hive.exec.failure.hooks']
    include_ats_hook = (str(configurations['hive-env']['properties']['hive_timeline_logging_enabled']).lower() == 'true')
    ats_hook_class = 'org.apache.hadoop.hive.ql.hooks.ATSHook'
    for hooks_property in hooks_properties:
        if (hooks_property in configurations['hive-site']['properties']):
            hooks_value = configurations['hive-site']['properties'][hooks_property]
        else:
            hooks_value = ' '
        if (include_ats_hook and (ats_hook_class not in hooks_value)):
            if (hooks_value == ' '):
                hooks_value = ats_hook_class
            else:
                hooks_value = ((hooks_value + ',') + ats_hook_class)
        if ((not include_ats_hook) and (ats_hook_class in hooks_value)):
            hooks_classes = []
            for hook_class in hooks_value.split(','):
                if ((hook_class != ats_hook_class) and (hook_class != ' ')):
                    hooks_classes.append(hook_class)
            if hooks_classes:
                hooks_value = ','.join(hooks_classes)
            else:
                hooks_value = ' '
        putHiveSiteProperty(hooks_property, hooks_value)
    if ('TEZ' in servicesList):
        putHiveSiteProperty('hive.execution.engine', 'tez')
    else:
        putHiveSiteProperty('hive.execution.engine', 'mr')
    container_size = '512'
    if (not ('yarn-site' in configurations)):
        self.recommendYARNConfigurations(configurations, clusterData, services, hosts)
    yarnMaxAllocationSize = min((30 * int(configurations['yarn-site']['properties']['yarn.scheduler.minimum-allocation-mb'])), int(configurations['yarn-site']['properties']['yarn.scheduler.maximum-allocation-mb']))
    container_size = (clusterData['mapMemory'] if (clusterData['mapMemory'] > 2048) else int(clusterData['reduceMemory']))
    container_size = min((clusterData['containers'] * clusterData['ramPerContainer']), container_size, yarnMaxAllocationSize)
    putHiveSiteProperty('hive.tez.container.size', min(int(configurations['yarn-site']['properties']['yarn.scheduler.maximum-allocation-mb']), container_size))
    putHiveSiteProperty('hive.prewarm.enabled', 'false')
    putHiveSiteProperty('hive.prewarm.numcontainers', '3')
    putHiveSiteProperty('hive.tez.auto.reducer.parallelism', 'true')
    putHiveSiteProperty('hive.tez.dynamic.partition.pruning', 'true')
    container_size = configurations['hive-site']['properties']['hive.tez.container.size']
    container_size_bytes = ((int(container_size) * 1024) * 1024)
    putHiveSiteProperty('hive.auto.convert.join.noconditionaltask.size', int(round((container_size_bytes / 3))))
    putHiveSitePropertyAttribute('hive.auto.convert.join.noconditionaltask.size', 'maximum', container_size_bytes)
    putHiveSiteProperty('hive.exec.reducers.bytes.per.reducer', '67108864')
    putHiveEnvProperty('cost_based_optimizer', 'On')
    if (str(configurations['hive-env']['properties']['cost_based_optimizer']).lower() == 'on'):
        putHiveSiteProperty('hive.cbo.enable', 'true')
    else:
        putHiveSiteProperty('hive.cbo.enable', 'false')
    hive_cbo_enable = configurations['hive-site']['properties']['hive.cbo.enable']
    putHiveSiteProperty('hive.stats.fetch.partition.stats', hive_cbo_enable)
    putHiveSiteProperty('hive.stats.fetch.column.stats', hive_cbo_enable)
    putHiveSiteProperty('hive.compute.query.using.stats', 'true')
    putHiveSiteProperty('hive.server2.tez.initialize.default.sessions', 'false')
    putHiveSiteProperty('hive.server2.tez.sessions.per.default.queue', '1')
    putHiveSiteProperty('hive.server2.enable.doAs', 'true')
    yarn_queues = 'default'
    capacitySchedulerProperties = {}
    if (('capacity-scheduler' in services['configurations']) and ('capacity-scheduler' in services['configurations']['capacity-scheduler']['properties'])):
        properties = str(services['configurations']['capacity-scheduler']['properties']['capacity-scheduler']).split('\n')
        for property in properties:
            (key, sep, value) = property.partition('=')
            capacitySchedulerProperties[key] = value
    if ('yarn.scheduler.capacity.root.queues' in capacitySchedulerProperties):
        yarn_queues = str(capacitySchedulerProperties['yarn.scheduler.capacity.root.queues'])
    putHiveServerPropertyAttribute = self.putPropertyAttribute(configurations, 'hiveserver2-site')
    toProcessQueues = yarn_queues.split(',')
    leafQueues = []
    while (len(toProcessQueues) > 0):
        queue = toProcessQueues.pop()
        queueKey = (('yarn.scheduler.capacity.root.' + queue) + '.queues')
        if (queueKey in capacitySchedulerProperties):
            subQueues = capacitySchedulerProperties[queueKey].split(',')
            for subQueue in subQueues:
                toProcessQueues.append(((queue + '.') + subQueue))
        else:
            leafQueues.append({'label': (str(queue) + ' queue'), 'value': queue, })
    leafQueues = sorted(leafQueues, key=(lambda q: q['value']))
    putHiveSitePropertyAttribute('hive.server2.tez.default.queues', 'entries', leafQueues)
    putHiveSiteProperty('hive.server2.tez.default.queues', ','.join([leafQueue['value'] for leafQueue in leafQueues]))
    if (('ranger-env' in services['configurations']) and ('hive-env' in services['configurations']) and ('ranger-hive-plugin-enabled' in services['configurations']['ranger-env']['properties'])):
        rangerEnvHivePluginProperty = services['configurations']['ranger-env']['properties']['ranger-hive-plugin-enabled']
        if (rangerEnvHivePluginProperty.lower() == 'yes'):
            putHiveEnvProperty('hive_security_authorization', 'RANGER')
    if (('configurations' not in services) or ('hive-env' not in services['configurations']) or ('properties' not in services['configurations']['hive-env']) or ('hive_security_authorization' not in services['configurations']['hive-env']['properties']) or (str(services['configurations']['hive-env']['properties']['hive_security_authorization']).lower() == 'none')):
        putHiveEnvProperty('hive_security_authorization', 'None')
    else:
        putHiveEnvProperty('hive_security_authorization', services['configurations']['hive-env']['properties']['hive_security_authorization'])
    if (('ranger-env' in services['configurations']) and ('hive-env' in services['configurations']) and ('ranger-hive-plugin-enabled' in services['configurations']['ranger-env']['properties'])):
        rangerEnvHivePluginProperty = services['configurations']['ranger-env']['properties']['ranger-hive-plugin-enabled']
        rangerEnvHiveAuthProperty = services['configurations']['hive-env']['properties']['hive_security_authorization']
        if (rangerEnvHivePluginProperty.lower() == 'yes'):
            putHiveEnvProperty('hive_security_authorization', 'Ranger')
        elif (rangerEnvHiveAuthProperty.lower() == 'ranger'):
            putHiveEnvProperty('hive_security_authorization', 'None')
    if (str(configurations['hive-env']['properties']['hive_security_authorization']).lower() == 'none'):
        putHiveSiteProperty('hive.security.authorization.manager', 'org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdConfOnlyAuthorizerFactory')
        if (('hive.security.authorization.manager' in configurations['hiveserver2-site']['properties']) or ('hiveserver2-site' not in services['configurations']) or (('hiveserver2-site' in services['configurations']) and ('hive.security.authorization.manager' in services['configurations']['hiveserver2-site']['properties']))):
            putHiveServerPropertyAttribute('hive.security.authorization.manager', 'delete', 'true')
        if (('hive.security.authenticator.manager' in configurations['hiveserver2-site']['properties']) or ('hiveserver2-site' not in services['configurations']) or (('hiveserver2-site' in services['configurations']) and ('hive.security.authenticator.manager' in services['configurations']['hiveserver2-site']['properties']))):
            putHiveServerPropertyAttribute('hive.security.authenticator.manager', 'delete', 'true')
        if (('hive.conf.restricted.list' in configurations['hiveserver2-site']['properties']) or ('hiveserver2-site' not in services['configurations']) or (('hiveserver2-site' in services['configurations']) and ('hive.conf.restricted.list' in services['configurations']['hiveserver2-site']['properties']))):
            putHiveServerPropertyAttribute('hive.conf.restricted.list', 'delete', 'true')
        if ('KERBEROS' not in servicesList):
            putHiveSiteProperty('hive.security.authorization.enabled', 'false')
    else:
        putHiveSiteProperty('hive.security.authorization.enabled', 'true')
    try:
        auth_manager_value = str(configurations['hive-env']['properties']['hive.security.metastore.authorization.manager'])
    except KeyError:
        auth_manager_value = 'org.apache.hadoop.hive.ql.security.authorization.StorageBasedAuthorizationProvider'
        pass
    auth_manager_values = auth_manager_value.split(',')
    sqlstdauth_class = 'org.apache.hadoop.hive.ql.security.authorization.MetaStoreAuthzAPIAuthorizerEmbedOnly'
    putHiveSiteProperty('hive.server2.enable.doAs', 'true')
    if (str(configurations['hive-env']['properties']['hive_security_authorization']).lower() == 'sqlstdauth'):
        putHiveSiteProperty('hive.server2.enable.doAs', 'false')
        putHiveServerProperty('hive.security.authorization.enabled', 'true')
        putHiveServerProperty('hive.security.authorization.manager', 'org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactory')
        putHiveServerProperty('hive.security.authenticator.manager', 'org.apache.hadoop.hive.ql.security.SessionStateUserAuthenticator')
        putHiveServerProperty('hive.conf.restricted.list', 'hive.security.authenticator.manager,hive.security.authorization.manager,hive.users.in.admin.role')
        putHiveSiteProperty('hive.security.authorization.manager', 'org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdConfOnlyAuthorizerFactory')
        if (sqlstdauth_class not in auth_manager_values):
            auth_manager_values.append(sqlstdauth_class)
    elif (sqlstdauth_class in auth_manager_values):
        auth_manager_values = [x for x in auth_manager_values if (x != sqlstdauth_class)]
        pass
    putHiveSiteProperty('hive.security.metastore.authorization.manager', ','.join(auth_manager_values))
    if (str(configurations['hive-env']['properties']['hive_security_authorization']).lower() == 'ranger'):
        putHiveSiteProperty('hive.server2.enable.doAs', 'false')
        putHiveServerProperty('hive.security.authorization.enabled', 'true')
        putHiveServerProperty('hive.security.authorization.manager', 'com.xasecure.authorization.hive.authorizer.XaSecureHiveAuthorizerFactory')
        putHiveServerProperty('hive.security.authenticator.manager', 'org.apache.hadoop.hive.ql.security.SessionStateUserAuthenticator')
        putHiveServerProperty('hive.conf.restricted.list', 'hive.security.authorization.enabled,hive.security.authorization.manager,hive.security.authenticator.manager')
    putHiveSiteProperty('hive.server2.use.SSL', 'false')
    hive_server2_auth = None
    if (('hive-site' in services['configurations']) and ('hive.server2.authentication' in services['configurations']['hive-site']['properties'])):
        hive_server2_auth = str(services['configurations']['hive-site']['properties']['hive.server2.authentication']).lower()
    elif ('hive.server2.authentication' in configurations['hive-site']['properties']):
        hive_server2_auth = str(configurations['hive-site']['properties']['hive.server2.authentication']).lower()
    if (hive_server2_auth == 'ldap'):
        putHiveSiteProperty('hive.server2.authentication.ldap.url', '')
    elif (('hive.server2.authentication.ldap.url' in configurations['hive-site']['properties']) or ('hive-site' not in services['configurations']) or (('hive-site' in services['configurations']) and ('hive.server2.authentication.ldap.url' in services['configurations']['hive-site']['properties']))):
        putHiveSitePropertyAttribute('hive.server2.authentication.ldap.url', 'delete', 'true')
    if (hive_server2_auth == 'kerberos'):
        putHiveSiteProperty('hive.server2.authentication.kerberos.keytab', '')
        putHiveSiteProperty('hive.server2.authentication.kerberos.principal', '')
    elif ('KERBEROS' not in servicesList):
        if (('hive.server2.authentication.kerberos.keytab' in configurations['hive-site']['properties']) or ('hive-site' not in services['configurations']) or (('hive-site' in services['configurations']) and ('hive.server2.authentication.kerberos.keytab' in services['configurations']['hive-site']['properties']))):
            putHiveSitePropertyAttribute('hive.server2.authentication.kerberos.keytab', 'delete', 'true')
        if (('hive.server2.authentication.kerberos.principal' in configurations['hive-site']['properties']) or ('hive-site' not in services['configurations']) or (('hive-site' in services['configurations']) and ('hive.server2.authentication.kerberos.principal' in services['configurations']['hive-site']['properties']))):
            putHiveSitePropertyAttribute('hive.server2.authentication.kerberos.principal', 'delete', 'true')
    if (hive_server2_auth == 'pam'):
        putHiveSiteProperty('hive.server2.authentication.pam.services', '')
    elif (('hive.server2.authentication.pam.services' in configurations['hive-site']['properties']) or ('hive-site' not in services['configurations']) or (('hive-site' in services['configurations']) and ('hive.server2.authentication.pam.services' in services['configurations']['hive-site']['properties']))):
        putHiveSitePropertyAttribute('hive.server2.authentication.pam.services', 'delete', 'true')
    if (hive_server2_auth == 'custom'):
        putHiveSiteProperty('hive.server2.custom.authentication.class', '')
    elif (('hive.server2.authentication' in configurations['hive-site']['properties']) or ('hive-site' not in services['configurations']) or (('hive-site' in services['configurations']) and ('hive.server2.custom.authentication.class' in services['configurations']['hive-site']['properties']))):
        putHiveSitePropertyAttribute('hive.server2.custom.authentication.class', 'delete', 'true')
    hs_heapsize_multiplier = (3.0 / 8)
    hm_heapsize_multiplier = (1.0 / 8)
    hive_server_hosts = self.getHostsWithComponent('HIVE', 'HIVE_SERVER', services, hosts)
    hive_client_hosts = self.getHostsWithComponent('HIVE', 'HIVE_CLIENT', services, hosts)
    if ((hive_server_hosts is not None) and len(hive_server_hosts)):
        hs_host_ram = (hive_server_hosts[0]['Hosts']['total_mem'] / 1024)
        putHiveEnvProperty('hive.metastore.heapsize', max(512, int((hs_host_ram * hm_heapsize_multiplier))))
        putHiveEnvProperty('hive.heapsize', max(512, int((hs_host_ram * hs_heapsize_multiplier))))
        putHiveEnvPropertyAttributes('hive.metastore.heapsize', 'maximum', max(1024, hs_host_ram))
        putHiveEnvPropertyAttributes('hive.heapsize', 'maximum', max(1024, hs_host_ram))
    if ((hive_client_hosts is not None) and len(hive_client_hosts)):
        putHiveEnvProperty('hive.client.heapsize', 1024)
        putHiveEnvPropertyAttributes('hive.client.heapsize', 'maximum', max(1024, int((hive_client_hosts[0]['Hosts']['total_mem'] / 1024))))
