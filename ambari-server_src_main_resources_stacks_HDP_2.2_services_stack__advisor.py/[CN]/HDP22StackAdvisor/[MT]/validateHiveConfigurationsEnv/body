def validateHiveConfigurationsEnv(self, properties, recommendedDefaults, configurations, services, hosts):
    validationItems = []
    hive_env = properties
    hive_site = getSiteProperties(configurations, 'hive-site')
    if (('hive_security_authorization' in hive_env) and (str(hive_env['hive_security_authorization']).lower() == 'none') and (str(hive_site['hive.security.authorization.enabled']).lower() == 'true')):
        authorization_item = self.getErrorItem('hive_security_authorization should not be None if hive.security.authorization.enabled is set')
        validationItems.append({'config-name': 'hive_security_authorization', 'item': authorization_item, })
    if (('hive_security_authorization' in hive_env) and (str(hive_env['hive_security_authorization']).lower() == 'ranger')):
        ranger_env = getServicesSiteProperties(services, 'ranger-env')
        if ((not ranger_env) or (not ('ranger-hive-plugin-enabled' in ranger_env)) or (ranger_env['ranger-hive-plugin-enabled'].lower() != 'yes')):
            validationItems.append({'config-name': 'hive_security_authorization', 'item': self.getWarnItem('ranger-env/ranger-hive-plugin-enabled must be enabled when hive_security_authorization is set to Ranger'), })
    return self.toConfigurationValidationProblems(validationItems, 'hive-env')
