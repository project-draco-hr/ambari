def recommendTezConfigurations(self, configurations, clusterData, services, hosts):
    if (not ('yarn-site' in configurations)):
        self.recommendYARNConfigurations(configurations, clusterData, services, hosts)
    yarnMaxAllocationSize = min((30 * int(configurations['yarn-site']['properties']['yarn.scheduler.minimum-allocation-mb'])), int(configurations['yarn-site']['properties']['yarn.scheduler.maximum-allocation-mb']))
    putTezProperty = self.putProperty(configurations, 'tez-site', services)
    putTezProperty('tez.am.resource.memory.mb', min(int(configurations['yarn-site']['properties']['yarn.scheduler.maximum-allocation-mb']), ((int(clusterData['amMemory']) * 2) if (int(clusterData['amMemory']) < 3072) else int(clusterData['amMemory']))))
    taskResourceMemory = (clusterData['mapMemory'] if (clusterData['mapMemory'] > 2048) else int(clusterData['reduceMemory']))
    taskResourceMemory = min((clusterData['containers'] * clusterData['ramPerContainer']), taskResourceMemory, yarnMaxAllocationSize)
    putTezProperty('tez.task.resource.memory.mb', min(int(configurations['yarn-site']['properties']['yarn.scheduler.maximum-allocation-mb']), taskResourceMemory))
    taskResourceMemory = int(configurations['tez-site']['properties']['tez.task.resource.memory.mb'])
    putTezProperty('tez.runtime.io.sort.mb', min(int((taskResourceMemory * 0.4)), 2047))
    putTezProperty('tez.runtime.unordered.output.buffer.size-mb', int((taskResourceMemory * 0.075)))
    putTezProperty('tez.session.am.dag.submit.timeout.secs', '600')
    tez_queue = self.recommendYarnQueue(services, 'tez-site', 'tez.queue.name')
    if (tez_queue is not None):
        putTezProperty('tez.queue.name', tez_queue)
    serverProperties = services['ambari-server-properties']
    latest_tez_jar_version = None
    server_host = socket.getfqdn()
    for host in hosts['items']:
        if (server_host == host['Hosts']['host_name']):
            server_host = host['Hosts']['public_host_name']
    server_port = '8080'
    server_protocol = 'http'
    views_dir = '/var/lib/ambari-server/resources/views/'
    if serverProperties:
        if ('client.api.port' in serverProperties):
            server_port = serverProperties['client.api.port']
        if ('views.dir' in serverProperties):
            views_dir = serverProperties['views.dir']
        if ('api.ssl' in serverProperties):
            if (serverProperties['api.ssl'].lower() == 'true'):
                server_protocol = 'https'
        views_work_dir = os.path.join(views_dir, 'work')
        if (os.path.exists(views_work_dir) and os.path.isdir(views_work_dir)):
            last_version = '0.0.0'
            for file in os.listdir(views_work_dir):
                if fnmatch.fnmatch(file, 'TEZ{*}'):
                    current_version = file.lstrip('TEZ{').rstrip('}')
                    if (self.versionCompare(current_version.replace('-', '.'), last_version.replace('-', '.')) >= 0):
                        latest_tez_jar_version = current_version
                        last_version = current_version
                    pass
            pass
        pass
    pass
    if latest_tez_jar_version:
        tez_url = '{0}://{1}:{2}/#/main/views/TEZ/{3}/TEZ_CLUSTER_INSTANCE'.format(server_protocol, server_host, server_port, latest_tez_jar_version)
        putTezProperty('tez.tez-ui.history-url.base', tez_url)
    pass
