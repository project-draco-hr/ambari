{
  HBaseAdmin hBaseAdmin=hdb.getHBaseAdmin();
  String precisionTtl="";
  for (  String tableName : PHOENIX_TABLES) {
    HTableDescriptor tableDescriptor=hBaseAdmin.getTableDescriptor(tableName.getBytes());
    Assert.assertFalse("Normalizer disabled by default.",tableDescriptor.isNormalizationEnabled());
    Assert.assertNull("Default compaction policy is null.",tableDescriptor.getConfigurationValue(HSTORE_COMPACTION_CLASS_KEY));
    for (    HColumnDescriptor family : tableDescriptor.getColumnFamilies()) {
      if (tableName.equals(METRICS_RECORD_TABLE_NAME)) {
        precisionTtl=family.getValue("TTL");
      }
    }
    Assert.assertEquals("Precision TTL value.","86400",precisionTtl);
  }
  Field f=PhoenixHBaseAccessor.class.getDeclaredField("tableTTL");
  f.setAccessible(true);
  Map<String,String> precisionValues=(Map<String,String>)f.get(hdb);
  precisionValues.put(METRICS_RECORD_TABLE_NAME,String.valueOf(2 * 86400));
  f.set(hdb,precisionValues);
  Field f2=PhoenixHBaseAccessor.class.getDeclaredField("timelineMetricsTablesDurability");
  f2.setAccessible(true);
  f2.set(hdb,"ASYNC_WAL");
  hdb.initPoliciesAndTTL();
  boolean normalizerEnabled=false;
  String compactionPolicy=null;
  boolean tableDurabilitySet=false;
  for (int i=0; i < 10; i++) {
    LOG.warn("Policy check retry : " + i);
    for (    String tableName : PHOENIX_TABLES) {
      HTableDescriptor tableDescriptor=hBaseAdmin.getTableDescriptor(tableName.getBytes());
      normalizerEnabled=tableDescriptor.isNormalizationEnabled();
      tableDurabilitySet=(Durability.ASYNC_WAL.equals(tableDescriptor.getDurability()));
      compactionPolicy=tableDescriptor.getConfigurationValue(HSTORE_COMPACTION_CLASS_KEY);
      LOG.debug("Table: " + tableName + ", normalizerEnabled = "+ normalizerEnabled);
      LOG.debug("Table: " + tableName + ", compactionPolicy = "+ compactionPolicy);
      if (!normalizerEnabled || compactionPolicy == null) {
        Thread.sleep(2000l);
      }
      if (tableName.equals(METRICS_RECORD_TABLE_NAME)) {
        for (        HColumnDescriptor family : tableDescriptor.getColumnFamilies()) {
          precisionTtl=family.getValue("TTL");
        }
      }
    }
  }
  Assert.assertTrue("Normalizer enabled.",normalizerEnabled);
  Assert.assertTrue("Durability Set.",tableDurabilitySet);
  Assert.assertEquals("FIFO compaction policy is set.",FIFO_COMPACTION_POLICY_CLASS,compactionPolicy);
  Assert.assertEquals("Precision TTL value not changed.",String.valueOf(2 * 86400),precisionTtl);
  hBaseAdmin.close();
}
