{
  TimelineMetricAggregator agg=TimelineMetricAggregatorFactory.createTimelineClusterAggregatorHourly(hdb,new Configuration());
  long startTime=System.currentTimeMillis();
  long ctime=startTime;
  long minute=60 * 1000;
  Map<TimelineClusterMetric,MetricClusterAggregate> records=new HashMap<TimelineClusterMetric,MetricClusterAggregate>();
  records.put(createEmptyTimelineClusterMetric(ctime),new MetricClusterAggregate(4.0,2,0.0,4.0,0.0));
  records.put(createEmptyTimelineClusterMetric(ctime+=minute),new MetricClusterAggregate(4.0,2,0.0,4.0,0.0));
  records.put(createEmptyTimelineClusterMetric(ctime+=minute),new MetricClusterAggregate(4.0,2,0.0,4.0,0.0));
  records.put(createEmptyTimelineClusterMetric(ctime+=minute),new MetricClusterAggregate(4.0,2,0.0,4.0,0.0));
  hdb.saveClusterAggregateRecords(records);
  boolean success=agg.doWork(startTime,ctime + minute);
  assertTrue(success);
  Condition condition=new DefaultCondition(Collections.singletonList("disk_used"),null,null,null,startTime,ctime + minute,Precision.HOURS,null,true);
  TimelineMetrics timelineMetrics=hdb.getAggregateMetricRecords(condition,singletonValueFunctionMap("disk_used"));
  assertEquals(1,timelineMetrics.getMetrics().size());
  TimelineMetric metric=timelineMetrics.getMetrics().get(0);
  assertEquals("disk_used",metric.getMetricName());
  assertEquals("test_app",metric.getAppId());
  assertEquals(1,metric.getMetricValues().size());
  assertEquals(2.0,metric.getMetricValues().values().iterator().next(),0.00001);
}
