{
  if (null == allAlerts || 0 == allAlerts.size())   return;
  int ok=0;
  int warning=0;
  int critical=0;
  int passive=0;
  List<Map<String,Object>> alerts=new ArrayList<Map<String,Object>>();
  Set<String> processedHosts=new HashSet<String>();
  for (  NagiosAlert alert : allAlerts) {
    boolean match=false;
switch (resourceType.getInternalType()) {
case Service:
      match=alert.getService().equals(matchValue);
    if (match && null != alert.getDescription() && IGNORABLE_FOR_SERVICES.contains(alert.getDescription())) {
      match=false;
    }
  break;
case Host:
match=alert.getHost().equals(matchValue);
if (match && null != alert.getDescription()) {
String desc=alert.getDescription();
Iterator<String> it=IGNORABLE_FOR_HOSTS.iterator();
while (it.hasNext() && match) {
  if (-1 != desc.toLowerCase().indexOf(it.next()))   match=false;
}
}
break;
case Cluster:
if (!processedHosts.contains(alert.getHost())) {
match=true;
Iterator<String> it=IGNORABLE_FOR_HOSTS.iterator();
String desc=alert.getDescription();
while (it.hasNext() && match) {
if (-1 != desc.toLowerCase().indexOf(it.next())) match=false;
}
}
break;
default :
break;
}
if (match) {
processedHosts.add(alert.getHost());
Map<String,Object> map=new LinkedHashMap<String,Object>();
map.put("description",alert.getDescription());
map.put("host_name",alert.getHost());
map.put("last_status",NagiosAlert.getStatusString(alert.getLastStatus()));
map.put("last_status_time",Long.valueOf(alert.getLastStatusTime()));
map.put("service_name",alert.getService());
map.put("status",NagiosAlert.getStatusString(alert.getStatus()));
map.put("status_time",Long.valueOf(alert.getStatusTime()));
map.put("output",alert.getOutput());
map.put("actual_status",NagiosAlert.getStatusString(alert.getStatus()));
String longOut=alert.getLongPluginOutput();
int index=(null == longOut) ? -1 : longOut.indexOf(PASSIVE_TOKEN);
if (-1 != index) {
int actualStatus=3;
try {
int len=PASSIVE_TOKEN.length();
actualStatus=Integer.parseInt(longOut.substring(index + len,index + len + 1));
}
 catch (Exception e) {
}
map.put("status","PASSIVE");
map.put("actual_status",NagiosAlert.getStatusString(actualStatus));
passive++;
}
 else {
switch (alert.getStatus()) {
case 0:
ok++;
break;
case 1:
warning++;
break;
case 2:
critical++;
break;
case 3:
passive++;
break;
default :
break;
}
}
alerts.add(map);
}
}
setResourceProperty(res,ALERT_SUMMARY_OK_PROPERTY_ID,Integer.valueOf(ok),requestedIds);
setResourceProperty(res,ALERT_SUMMARY_WARNING_PROPERTY_ID,Integer.valueOf(warning),requestedIds);
setResourceProperty(res,ALERT_SUMMARY_CRITICAL_PROPERTY_ID,Integer.valueOf(critical),requestedIds);
setResourceProperty(res,ALERT_SUMMARY_PASSIVE_PROPERTY_ID,Integer.valueOf(passive),requestedIds);
if (!alerts.isEmpty() && (resourceType.getInternalType() != Resource.InternalType.Cluster)) {
setResourceProperty(res,ALERT_DETAIL_PROPERTY_ID,alerts,requestedIds);
}
}
