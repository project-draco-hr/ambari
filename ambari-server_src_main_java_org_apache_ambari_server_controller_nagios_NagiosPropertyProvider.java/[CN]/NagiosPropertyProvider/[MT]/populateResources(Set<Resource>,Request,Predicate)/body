{
  Set<String> propertyIds=getRequestPropertyIds(request,predicate);
  for (  Resource res : resources) {
    String matchValue=res.getPropertyValue(resourceTypeProperty).toString();
    if (null == matchValue)     continue;
    Object clusterPropertyValue=res.getPropertyValue(clusterNameProperty);
    if (null == clusterPropertyValue)     continue;
    final String clusterName=clusterPropertyValue.toString();
    if (null == clusterName)     continue;
    if (!CLUSTER_ALERTS.containsKey(clusterName)) {
      Future<List<NagiosAlert>> f=scheduler.submit(new Callable<List<NagiosAlert>>(){
        @Override public List<NagiosAlert> call() throws Exception {
          return populateAlerts(clusterName);
        }
      }
);
      try {
        CLUSTER_ALERTS.put(clusterName,f.get());
      }
 catch (      Exception e) {
        LOG.error("Could not load metrics - Executor exception" + " (" + e.getMessage() + ")");
      }
    }
    CLUSTER_NAMES.add(clusterName);
    List<NagiosAlert> alerts=CLUSTER_ALERTS.get(clusterName);
    if (null != alerts) {
      updateAlerts(res,matchValue,alerts,propertyIds);
    }
  }
  return resources;
}
