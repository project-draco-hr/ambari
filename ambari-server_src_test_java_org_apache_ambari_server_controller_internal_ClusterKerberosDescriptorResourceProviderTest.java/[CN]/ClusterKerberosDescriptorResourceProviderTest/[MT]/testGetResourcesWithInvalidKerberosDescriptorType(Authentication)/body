{
  StackId stackVersion=createMock(StackId.class);
  expect(stackVersion.getStackName()).andReturn("stackName").atLeastOnce();
  expect(stackVersion.getStackVersion()).andReturn("stackVersion").atLeastOnce();
  Cluster cluster=createMock(Cluster.class);
  expect(cluster.getResourceId()).andReturn(4L).atLeastOnce();
  expect(cluster.getCurrentStackVersion()).andReturn(stackVersion).atLeastOnce();
  Clusters clusters=createMock(Clusters.class);
  expect(clusters.getCluster("c1")).andReturn(cluster).atLeastOnce();
  KerberosDescriptor kerberosDescriptor=createMock(KerberosDescriptor.class);
  expect(kerberosDescriptor.toMap()).andReturn(STACK_MAP).atLeastOnce();
  AmbariMetaInfo metaInfo=createMock(AmbariMetaInfo.class);
  expect(metaInfo.getKerberosDescriptor("stackName","stackVersion")).andReturn(kerberosDescriptor).atLeastOnce();
  AmbariManagementController managementController=createMock(AmbariManagementController.class);
  expect(managementController.getClusters()).andReturn(clusters).atLeastOnce();
  expect(managementController.getAmbariMetaInfo()).andReturn(metaInfo).atLeastOnce();
  Request request=createMock(Request.class);
  expect(request.getPropertyIds()).andReturn(null).once();
  replayAll();
  SecurityContextHolder.getContext().setAuthentication(authentication);
  ResourceProvider provider=AbstractControllerResourceProvider.getResourceProvider(Resource.Type.ClusterKerberosDescriptor,PropertyHelper.getPropertyIds(Resource.Type.ClusterKerberosDescriptor),PropertyHelper.getKeyPropertyIds(Resource.Type.ClusterKerberosDescriptor),managementController);
  Predicate predicate1=new PredicateBuilder().property(ClusterKerberosDescriptorResourceProvider.CLUSTER_KERBEROS_DESCRIPTOR_CLUSTER_NAME_PROPERTY_ID).equals("c1").toPredicate();
  Predicate predicate2=new PredicateBuilder().property(ClusterKerberosDescriptorResourceProvider.CLUSTER_KERBEROS_DESCRIPTOR_TYPE_PROPERTY_ID).equals("BOGUS").toPredicate();
  Predicate predicate=new AndPredicate(predicate1,predicate2);
  try {
    provider.getResources(request,predicate);
    Assert.fail("Expected NoSuchResourceException not thrown");
  }
 catch (  NoSuchResourceException e) {
  }
  verifyAll();
}
