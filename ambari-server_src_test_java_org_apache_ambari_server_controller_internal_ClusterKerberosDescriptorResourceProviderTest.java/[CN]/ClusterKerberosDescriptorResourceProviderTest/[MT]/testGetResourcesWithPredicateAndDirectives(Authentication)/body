{
  Cluster cluster=createMock(Cluster.class);
  expect(cluster.getResourceId()).andReturn(4L).atLeastOnce();
  Clusters clusters=createMock(Clusters.class);
  expect(clusters.getCluster("c1")).andReturn(cluster).atLeastOnce();
  KerberosDescriptorFactory kerberosDescriptorFactory=injector.getInstance(KerberosDescriptorFactory.class);
  KerberosDescriptor stackKerberosDescriptor=kerberosDescriptorFactory.createInstance(STACK_MAP);
  KerberosDescriptor userKerberosDescriptor=kerberosDescriptorFactory.createInstance(USER_MAP);
  KerberosDescriptor compositeKerberosDescriptor=kerberosDescriptorFactory.createInstance(STACK_MAP);
  compositeKerberosDescriptor.update(userKerberosDescriptor);
  Capture<? extends Collection<String>> captureAdditionalServices=newCapture(CaptureType.ALL);
  KerberosHelper kerberosHelper=createMock(KerberosHelper.class);
  expect(kerberosHelper.getKerberosDescriptor(eq(KerberosHelper.KerberosDescriptorType.STACK),eq(cluster),eq(true),capture(captureAdditionalServices))).andReturn(stackKerberosDescriptor).atLeastOnce();
  expect(kerberosHelper.getKerberosDescriptor(eq(KerberosHelper.KerberosDescriptorType.USER),eq(cluster),eq(true),capture(captureAdditionalServices))).andReturn(userKerberosDescriptor).atLeastOnce();
  expect(kerberosHelper.getKerberosDescriptor(eq(KerberosHelper.KerberosDescriptorType.COMPOSITE),eq(cluster),eq(true),capture(captureAdditionalServices))).andReturn(compositeKerberosDescriptor).atLeastOnce();
  AmbariManagementController managementController=createMock(AmbariManagementController.class);
  expect(managementController.getClusters()).andReturn(clusters).atLeastOnce();
  expect(managementController.getKerberosHelper()).andReturn(kerberosHelper).atLeastOnce();
  Map<String,String> requestInfoProperties=new HashMap<String,String>();
  requestInfoProperties.put(ClusterKerberosDescriptorResourceProvider.DIRECTIVE_EVALUATE_WHEN_CLAUSE,"true");
  requestInfoProperties.put(ClusterKerberosDescriptorResourceProvider.DIRECTIVE_ADDITIONAL_SERVICES,"HIVE, TEZ,PIG");
  Request request=createMock(Request.class);
  expect(request.getPropertyIds()).andReturn(null).atLeastOnce();
  expect(request.getRequestInfoProperties()).andReturn(requestInfoProperties).atLeastOnce();
  replayAll();
  SecurityContextHolder.getContext().setAuthentication(authentication);
  ResourceProvider provider=AbstractControllerResourceProvider.getResourceProvider(Resource.Type.ClusterKerberosDescriptor,PropertyHelper.getPropertyIds(Resource.Type.ClusterKerberosDescriptor),PropertyHelper.getKeyPropertyIds(Resource.Type.ClusterKerberosDescriptor),managementController);
  Predicate clusterPredicate=new PredicateBuilder().property(ClusterKerberosDescriptorResourceProvider.CLUSTER_KERBEROS_DESCRIPTOR_CLUSTER_NAME_PROPERTY_ID).equals("c1").toPredicate();
  Predicate typePredicate;
  Set<Resource> results;
  typePredicate=new PredicateBuilder().property(ClusterKerberosDescriptorResourceProvider.CLUSTER_KERBEROS_DESCRIPTOR_TYPE_PROPERTY_ID).equals("STACK").toPredicate();
  results=provider.getResources(request,new AndPredicate(clusterPredicate,typePredicate));
  Assert.assertEquals(1,results.size());
  for (  Resource result : results) {
    Assert.assertEquals("c1",result.getPropertyValue(ClusterKerberosDescriptorResourceProvider.CLUSTER_KERBEROS_DESCRIPTOR_CLUSTER_NAME_PROPERTY_ID));
    Assert.assertEquals("STACK",result.getPropertyValue(ClusterKerberosDescriptorResourceProvider.CLUSTER_KERBEROS_DESCRIPTOR_TYPE_PROPERTY_ID));
    Map partial1=result.getPropertiesMap().get(ClusterKerberosDescriptorResourceProvider.CLUSTER_KERBEROS_DESCRIPTOR_DESCRIPTOR_PROPERTY_ID);
    Map partial2=result.getPropertiesMap().get("KerberosDescriptor/kerberos_descriptor/properties");
    partial1.put("properties",partial2);
    Assert.assertEquals(GSON.toJson(STACK_MAP),GSON.toJson(partial1));
  }
  typePredicate=new PredicateBuilder().property(ClusterKerberosDescriptorResourceProvider.CLUSTER_KERBEROS_DESCRIPTOR_TYPE_PROPERTY_ID).equals("USER").toPredicate();
  results=provider.getResources(request,new AndPredicate(clusterPredicate,typePredicate));
  Assert.assertEquals(1,results.size());
  for (  Resource result : results) {
    Assert.assertEquals("c1",result.getPropertyValue(ClusterKerberosDescriptorResourceProvider.CLUSTER_KERBEROS_DESCRIPTOR_CLUSTER_NAME_PROPERTY_ID));
    Assert.assertEquals("USER",result.getPropertyValue(ClusterKerberosDescriptorResourceProvider.CLUSTER_KERBEROS_DESCRIPTOR_TYPE_PROPERTY_ID));
    Map partial1=result.getPropertiesMap().get(ClusterKerberosDescriptorResourceProvider.CLUSTER_KERBEROS_DESCRIPTOR_DESCRIPTOR_PROPERTY_ID);
    Map partial2=result.getPropertiesMap().get("KerberosDescriptor/kerberos_descriptor/properties");
    partial1.put("properties",partial2);
    Assert.assertEquals(GSON.toJson(USER_MAP),GSON.toJson(partial1));
  }
  typePredicate=new PredicateBuilder().property(ClusterKerberosDescriptorResourceProvider.CLUSTER_KERBEROS_DESCRIPTOR_TYPE_PROPERTY_ID).equals("COMPOSITE").toPredicate();
  results=provider.getResources(request,new AndPredicate(clusterPredicate,typePredicate));
  Assert.assertEquals(1,results.size());
  testResults("COMPOSITE",COMPOSITE_MAP,results);
  verifyAll();
  List<? extends Collection<String>> capturedValues=captureAdditionalServices.getValues();
  Assert.assertEquals(3,capturedValues.size());
  for (  Collection<String> capturedValue : capturedValues) {
    Assert.assertEquals(3,capturedValue.size());
    Assert.assertTrue(capturedValue.contains("HIVE"));
    Assert.assertTrue(capturedValue.contains("PIG"));
    Assert.assertTrue(capturedValue.contains("TEZ"));
  }
}
