{
  TestStreamProvider streamProvider=new TestStreamProvider("temporal_ganglia_data_1.txt");
  TestGangliaHostProvider hostProvider=new TestGangliaHostProvider();
  GangliaPropertyProvider propertyProvider=new GangliaHostPropertyProvider(PropertyHelper.getMetricPropertyIds(Resource.Type.Host),streamProvider,configuration,hostProvider,CLUSTER_NAME_PROPERTY_ID,HOST_NAME_PROPERTY_ID);
  Set<Resource> resources=new HashSet<Resource>();
  Resource resource=new ResourceImpl(Resource.Type.Host);
  resource.setProperty(CLUSTER_NAME_PROPERTY_ID,"c1");
  resource.setProperty(HOST_NAME_PROPERTY_ID,"domU-12-31-39-0E-34-E1.compute-1.internal");
  resources.add(resource);
  resource=new ResourceImpl(Resource.Type.Host);
  resource.setProperty(CLUSTER_NAME_PROPERTY_ID,"c1");
  resource.setProperty(HOST_NAME_PROPERTY_ID,"domU-12-31-39-0E-34-E2.compute-1.internal");
  resources.add(resource);
  resource=new ResourceImpl(Resource.Type.Host);
  resource.setProperty(CLUSTER_NAME_PROPERTY_ID,"c1");
  resource.setProperty(HOST_NAME_PROPERTY_ID,"domU-12-31-39-0E-34-E3.compute-1.internal");
  resources.add(resource);
  Map<String,TemporalInfo> temporalInfoMap=new HashMap<String,TemporalInfo>();
  temporalInfoMap.put(PROPERTY_ID,new TemporalInfoImpl(10L,20L,1L));
  Request request=PropertyHelper.getReadRequest(Collections.singleton(PROPERTY_ID),temporalInfoMap);
  Assert.assertEquals(3,propertyProvider.populateResources(resources,request,null).size());
  URIBuilder uriBuilder=new URIBuilder();
  uriBuilder.setScheme((configuration.isGangliaSSL() ? "https" : "http"));
  uriBuilder.setHost("domU-12-31-39-0E-34-E1.compute-1.internal");
  uriBuilder.setPath("/cgi-bin/rrd.py");
  uriBuilder.setParameter("c","HDPJobTracker,HDPHBaseMaster,HDPResourceManager,HDPFlumeServer,HDPSlaves,HDPHistoryServer,HDPJournalNode,HDPTaskTracker,HDPHBaseRegionServer,HDPNameNode");
  uriBuilder.setParameter("h","domU-12-31-39-0E-34-E3.compute-1.internal,domU-12-31-39-0E-34-E1.compute-1.internal,domU-12-31-39-0E-34-E2.compute-1.internal");
  uriBuilder.setParameter("m","jvm.metrics.gcCount");
  uriBuilder.setParameter("s","10");
  uriBuilder.setParameter("e","20");
  uriBuilder.setParameter("r","1");
  String expected=uriBuilder.toString();
  List<String> components=Arrays.asList(new String[]{"HDPJobTracker","HDPHBaseMaster","HDPResourceManager","HDPFlumeServer","HDPSlaves","HDPHistoryServer","HDPJournalNode","HDPTaskTracker","HDPHBaseRegionServer","HDPNameNode"});
  List<String> hosts=Arrays.asList(new String[]{"domU-12-31-39-0E-34-E3.compute-1.internal","domU-12-31-39-0E-34-E1.compute-1.internal","domU-12-31-39-0E-34-E2.compute-1.internal"});
  int httpsVariation=configuration.isGangliaSSL() ? 1 : 0;
  Assert.assertEquals(expected.substring(0,66 + httpsVariation),streamProvider.getLastSpec().substring(0,66 + httpsVariation));
  Assert.assertTrue(CollectionPresentationUtils.isStringPermutationOfCollection(streamProvider.getLastSpec().substring(66 + httpsVariation,236 + httpsVariation),components,"%2C",0,0));
  Assert.assertTrue(CollectionPresentationUtils.isStringPermutationOfCollection(streamProvider.getLastSpec().substring(239 + httpsVariation,368 + httpsVariation),hosts,"%2C",0,0));
  Assert.assertEquals(expected.substring(369 + httpsVariation),streamProvider.getLastSpec().substring(369 + httpsVariation));
  for (  Resource res : resources) {
    Assert.assertEquals(3,PropertyHelper.getProperties(res).size());
    Assert.assertNotNull(res.getPropertyValue(PROPERTY_ID));
  }
}
