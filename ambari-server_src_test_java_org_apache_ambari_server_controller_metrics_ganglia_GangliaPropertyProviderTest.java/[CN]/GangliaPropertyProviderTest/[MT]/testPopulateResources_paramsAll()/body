{
  TestStreamProvider streamProvider=new TestStreamProvider("flume_ganglia_data.txt");
  TestGangliaHostProvider hostProvider=new TestGangliaHostProvider();
  GangliaPropertyProvider propertyProvider=new GangliaHostComponentPropertyProvider(PropertyHelper.getMetricPropertyIds(Resource.Type.HostComponent),streamProvider,configuration,hostProvider,CLUSTER_NAME_PROPERTY_ID,HOST_NAME_PROPERTY_ID,COMPONENT_NAME_PROPERTY_ID);
  Resource resource=new ResourceImpl(Resource.Type.HostComponent);
  resource.setProperty(CLUSTER_NAME_PROPERTY_ID,"c1");
  resource.setProperty(HOST_NAME_PROPERTY_ID,"ip-10-39-113-33.ec2.internal");
  resource.setProperty(COMPONENT_NAME_PROPERTY_ID,"FLUME_HANDLER");
  Map<String,TemporalInfo> temporalInfoMap=new HashMap<String,TemporalInfo>();
  Request request=PropertyHelper.getReadRequest(Collections.<String>emptySet(),temporalInfoMap);
  Assert.assertEquals(1,propertyProvider.populateResources(Collections.singleton(resource),request,null).size());
  String expected=(configuration.isHttpsEnabled() ? "https" : "http") + "://domU-12-31-39-0E-34-E1.compute-1.internal/cgi-bin/rrd.py?c=HDPFlumeServer%2CHDPSlaves&h=ip-10-39-113-33.ec2.internal&m=";
  List<String> components=Arrays.asList(new String[]{"HDPFlumeServer","HDPSlaves"});
  int httpsVariation=configuration.isHttpsEnabled() ? 1 : 0;
  Assert.assertEquals(expected.substring(0,66 + httpsVariation),streamProvider.getLastSpec().substring(0,66 + httpsVariation));
  Assert.assertTrue(CollectionPresentationUtils.isStringPermutationOfCollection(streamProvider.getLastSpec().substring(66 + httpsVariation,92 + httpsVariation),components,"%2C",0,0));
  Assert.assertTrue(streamProvider.getLastSpec().substring(92 + httpsVariation).startsWith(expected.substring(92 + httpsVariation)));
  Assert.assertEquals(34,PropertyHelper.getProperties(resource).size());
  Assert.assertNotNull(resource.getPropertyValue(FLUME_CHANNEL_CAPACITY_PROPERTY));
}
