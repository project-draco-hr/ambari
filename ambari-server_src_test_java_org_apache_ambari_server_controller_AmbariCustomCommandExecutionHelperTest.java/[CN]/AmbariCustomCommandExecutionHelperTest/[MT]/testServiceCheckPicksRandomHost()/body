{
  AmbariCustomCommandExecutionHelper ambariCustomCommandExecutionHelper=injector.getInstance(AmbariCustomCommandExecutionHelper.class);
  Cluster c1=clusters.getCluster("c1");
  Service s=c1.getService("ZOOKEEPER");
  ServiceComponent sc=s.getServiceComponent("ZOOKEEPER_CLIENT");
  Assert.assertTrue(sc.getServiceComponentHosts().keySet().size() > 1);
  List<RequestResourceFilter> requestResourceFilter=new ArrayList<RequestResourceFilter>(){
{
      add(new RequestResourceFilter("ZOOKEEPER","ZOOKEEPER_CLIENT",null));
    }
  }
;
  ActionExecutionContext actionExecutionContext=new ActionExecutionContext("c1","SERVICE_CHECK",requestResourceFilter);
  Stage stage=EasyMock.niceMock(Stage.class);
  ExecutionCommandWrapper execCmdWrapper=EasyMock.niceMock(ExecutionCommandWrapper.class);
  ExecutionCommand execCmd=EasyMock.niceMock(ExecutionCommand.class);
  EasyMock.expect(stage.getClusterName()).andReturn("c1");
  EasyMock.expect(stage.getExecutionCommandWrapper(EasyMock.eq("c1-c6401"),EasyMock.anyString())).andReturn(execCmdWrapper);
  EasyMock.expect(stage.getExecutionCommandWrapper(EasyMock.eq("c1-c6402"),EasyMock.anyString())).andReturn(execCmdWrapper);
  EasyMock.expect(execCmdWrapper.getExecutionCommand()).andReturn(execCmd);
  EasyMock.expect(execCmd.getForceRefreshConfigTagsBeforeExecution()).andReturn(true);
  HashSet<String> localComponents=new HashSet<>();
  EasyMock.expect(execCmd.getLocalComponents()).andReturn(localComponents).anyTimes();
  EasyMock.replay(stage,execCmdWrapper,execCmd);
  ambariCustomCommandExecutionHelper.addExecutionCommandsToStage(actionExecutionContext,stage,new HashMap<String,String>());
}
