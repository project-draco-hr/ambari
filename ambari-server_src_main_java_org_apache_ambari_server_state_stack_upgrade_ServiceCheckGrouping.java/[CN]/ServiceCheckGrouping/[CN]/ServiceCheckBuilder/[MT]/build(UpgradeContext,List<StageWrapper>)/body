{
  m_cluster=upgradeContext.getCluster();
  m_metaInfo=upgradeContext.getAmbariMetaInfo();
  List<StageWrapper> result=new ArrayList<StageWrapper>(stageWrappers);
  if (upgradeContext.getDirection().isDowngrade()) {
    return result;
  }
  Map<String,Service> serviceMap=m_cluster.getServices();
  Set<String> clusterServices=new LinkedHashSet<String>(serviceMap.keySet());
  for (  String service : priorityServices) {
    if (checkServiceValidity(upgradeContext,service,serviceMap)) {
      StageWrapper wrapper=new StageWrapper(StageWrapper.Type.SERVICE_CHECK,"Service Check " + upgradeContext.getServiceDisplay(service),new TaskWrapper(service,"",Collections.<String>emptySet(),new ServiceCheckTask()));
      result.add(wrapper);
      clusterServices.remove(service);
    }
  }
  if (upgradeContext.getType() == UpgradeType.ROLLING) {
    for (    String service : clusterServices) {
      if (ServiceCheckGrouping.this.excludeServices.contains(service)) {
        continue;
      }
      if (checkServiceValidity(upgradeContext,service,serviceMap)) {
        StageWrapper wrapper=new StageWrapper(StageWrapper.Type.SERVICE_CHECK,"Service Check " + upgradeContext.getServiceDisplay(service),new TaskWrapper(service,"",Collections.<String>emptySet(),new ServiceCheckTask()));
        result.add(wrapper);
      }
      if (excludeServices.contains(service)) {
        continue;
      }
      if (checkServiceValidity(upgradeContext,service,serviceMap)) {
        StageWrapper wrapper=new StageWrapper(StageWrapper.Type.SERVICE_CHECK,"Service Check " + upgradeContext.getServiceDisplay(service),new TaskWrapper(service,"",Collections.<String>emptySet(),new ServiceCheckTask()));
        result.add(wrapper);
      }
    }
  }
  return result;
}
