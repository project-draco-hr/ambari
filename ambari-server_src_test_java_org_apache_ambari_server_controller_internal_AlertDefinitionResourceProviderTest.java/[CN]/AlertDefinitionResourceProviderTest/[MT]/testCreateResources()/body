{
  AmbariManagementController amc=createMock(AmbariManagementController.class);
  Clusters clusters=createMock(Clusters.class);
  Cluster cluster=createMock(Cluster.class);
  expect(amc.getClusters()).andReturn(clusters).atLeastOnce();
  expect(clusters.getCluster((String)anyObject())).andReturn(cluster).atLeastOnce();
  expect(cluster.getClusterId()).andReturn(Long.valueOf(1)).anyTimes();
  Capture<AlertDefinitionEntity> entityCapture=new Capture<AlertDefinitionEntity>();
  dao.create(capture(entityCapture));
  expectLastCall();
  expect(definitionHash.invalidateHosts(EasyMock.anyObject(AlertDefinitionEntity.class))).andReturn(new HashSet<String>()).once();
  replay(amc,clusters,cluster,dao,definitionHash);
  Gson gson=m_factory.getGson();
  MetricSource source=(MetricSource)getMockSource();
  AlertDefinitionResourceProvider provider=createProvider(amc);
  Map<String,Object> requestProps=new HashMap<String,Object>();
  requestProps.put(AlertDefinitionResourceProvider.ALERT_DEF_CLUSTER_NAME,"c1");
  requestProps.put(AlertDefinitionResourceProvider.ALERT_DEF_INTERVAL,"1");
  requestProps.put(AlertDefinitionResourceProvider.ALERT_DEF_NAME,"my_def");
  requestProps.put(AlertDefinitionResourceProvider.ALERT_DEF_SERVICE_NAME,"HDFS");
  requestProps.put(AlertDefinitionResourceProvider.ALERT_DEF_LABEL,"Mock Label (Create)");
  requestProps.put(AlertDefinitionResourceProvider.ALERT_DEF_DESCRIPTION,"Mock Description (Create)");
  requestProps.put(AlertDefinitionResourceProvider.ALERT_DEF_SOURCE_TYPE,SourceType.METRIC.name());
  requestProps.put("AlertDefinition/source/jmx/value",source.getJmxInfo().getValue());
  requestProps.put("AlertDefinition/source/jmx/property_list",source.getJmxInfo().getPropertyList());
  requestProps.put("AlertDefinition/source/uri/http",source.getUri().getHttpUri());
  requestProps.put("AlertDefinition/source/uri/https",source.getUri().getHttpsUri());
  requestProps.put("AlertDefinition/source/uri/https_property",source.getUri().getHttpsProperty());
  requestProps.put("AlertDefinition/source/uri/https_property_value",source.getUri().getHttpsPropertyValue());
  requestProps.put("AlertDefinition/source/reporting/critical/text",source.getReporting().getCritical().getText());
  requestProps.put("AlertDefinition/source/reporting/critical/value",source.getReporting().getCritical().getValue());
  requestProps.put("AlertDefinition/source/reporting/ok/text",source.getReporting().getOk().getText());
  requestProps.put("AlertDefinition/source/reporting/warning/text",source.getReporting().getWarning().getText());
  requestProps.put("AlertDefinition/source/reporting/warning/value",source.getReporting().getWarning().getValue());
  requestProps.put("AlertDefinition/source/reporting/units","Gigabytes");
  Request request=PropertyHelper.getCreateRequest(Collections.singleton(requestProps),null);
  provider.createResources(request);
  Assert.assertTrue(entityCapture.hasCaptured());
  AlertDefinitionEntity entity=entityCapture.getValue();
  Assert.assertNotNull(entity);
  Assert.assertEquals(Long.valueOf(1),entity.getClusterId());
  Assert.assertNull(entity.getComponentName());
  Assert.assertEquals("my_def",entity.getDefinitionName());
  Assert.assertTrue(entity.getEnabled());
  Assert.assertNotNull(entity.getHash());
  Assert.assertEquals(Integer.valueOf(1),entity.getScheduleInterval());
  Assert.assertEquals(Scope.ANY,entity.getScope());
  Assert.assertEquals("HDFS",entity.getServiceName());
  Assert.assertEquals(SourceType.METRIC,entity.getSourceType());
  Assert.assertEquals("Mock Label (Create)",entity.getLabel());
  Assert.assertEquals("Mock Description (Create)",entity.getDescription());
  Assert.assertEquals(false,entity.isHostIgnored());
  Assert.assertNotNull(entity.getSource());
  MetricSource actualSource=gson.fromJson(entity.getSource(),MetricSource.class);
  Assert.assertNotNull(actualSource);
  assertEquals(source.getReporting().getOk().getText(),actualSource.getReporting().getOk().getText());
  assertEquals(source.getReporting().getWarning().getText(),actualSource.getReporting().getWarning().getText());
  assertEquals(source.getReporting().getCritical().getText(),actualSource.getReporting().getCritical().getText());
  assertEquals("Gigabytes",actualSource.getReporting().getUnits());
  Assert.assertNotNull(source.getUri().getHttpUri());
  Assert.assertNotNull(source.getUri().getHttpsUri());
  assertEquals(source.getUri().getHttpUri(),actualSource.getUri().getHttpUri());
  assertEquals(source.getUri().getHttpsUri(),actualSource.getUri().getHttpsUri());
  verify(amc,clusters,cluster,dao);
}
