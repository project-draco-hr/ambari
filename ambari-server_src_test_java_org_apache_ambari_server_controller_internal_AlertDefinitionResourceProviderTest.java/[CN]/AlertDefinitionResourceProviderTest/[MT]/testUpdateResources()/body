{
  AmbariManagementController amc=createMock(AmbariManagementController.class);
  Clusters clusters=createMock(Clusters.class);
  Cluster cluster=createMock(Cluster.class);
  expect(amc.getClusters()).andReturn(clusters).atLeastOnce();
  expect(clusters.getCluster((String)anyObject())).andReturn(cluster).atLeastOnce();
  expect(clusters.getClusterById(EasyMock.anyInt())).andReturn(cluster).atLeastOnce();
  expect(cluster.getClusterId()).andReturn(Long.valueOf(1)).atLeastOnce();
  expect(cluster.getClusterName()).andReturn("c1").atLeastOnce();
  Capture<AlertDefinitionEntity> entityCapture=new Capture<AlertDefinitionEntity>();
  dao.create(capture(entityCapture));
  expectLastCall();
  expect(definitionHash.invalidateHosts(EasyMock.anyObject(AlertDefinitionEntity.class))).andReturn(new HashSet<String>()).atLeastOnce();
  replay(amc,clusters,cluster,dao,definitionHash);
  Map<String,Object> requestProps=new HashMap<String,Object>();
  requestProps.put(AlertDefinitionResourceProvider.ALERT_DEF_CLUSTER_NAME,"c1");
  requestProps.put(AlertDefinitionResourceProvider.ALERT_DEF_INTERVAL,"1");
  requestProps.put(AlertDefinitionResourceProvider.ALERT_DEF_NAME,"my_def");
  requestProps.put(AlertDefinitionResourceProvider.ALERT_DEF_SERVICE_NAME,"HDFS");
  requestProps.put(AlertDefinitionResourceProvider.ALERT_DEF_SOURCE_TYPE,"METRIC");
  Request request=PropertyHelper.getCreateRequest(Collections.singleton(requestProps),null);
  AlertDefinitionResourceProvider provider=createProvider(amc);
  provider.createResources(request);
  Assert.assertTrue(entityCapture.hasCaptured());
  AlertDefinitionEntity entity=entityCapture.getValue();
  Assert.assertNotNull(entity);
  Predicate p=new PredicateBuilder().property(AlertDefinitionResourceProvider.ALERT_DEF_ID).equals("1").and().property(AlertDefinitionResourceProvider.ALERT_DEF_CLUSTER_NAME).equals("c1").toPredicate();
  entity.setDefinitionId(Long.valueOf(1));
  String oldName=entity.getDefinitionName();
  String oldHash=entity.getHash();
  resetToStrict(dao);
  expect(dao.findById(1L)).andReturn(entity).anyTimes();
  expect(dao.merge((AlertDefinitionEntity)anyObject())).andReturn(entity).anyTimes();
  replay(dao);
  requestProps=new HashMap<String,Object>();
  requestProps.put(AlertDefinitionResourceProvider.ALERT_DEF_CLUSTER_NAME,"c1");
  requestProps.put(AlertDefinitionResourceProvider.ALERT_DEF_INTERVAL,"1");
  requestProps.put(AlertDefinitionResourceProvider.ALERT_DEF_NAME,"my_def1");
  requestProps.put(AlertDefinitionResourceProvider.ALERT_DEF_SERVICE_NAME,"HDFS");
  requestProps.put(AlertDefinitionResourceProvider.ALERT_DEF_SOURCE_TYPE,"METRIC");
  request=PropertyHelper.getUpdateRequest(requestProps,null);
  provider.updateResources(request,p);
  Assert.assertFalse(oldHash.equals(entity.getHash()));
  Assert.assertFalse(oldName.equals(entity.getDefinitionName()));
  verify(amc,clusters,cluster,dao);
}
