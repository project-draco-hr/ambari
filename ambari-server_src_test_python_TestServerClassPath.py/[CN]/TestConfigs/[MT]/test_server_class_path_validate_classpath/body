@patch.object(ServerClassPath, '_find_all_jars')
@patch('ambari_server.serverConfiguration.get_conf_dir')
def test_server_class_path_validate_classpath(self, get_conf_dir_mock, find_jars_mock):
    serverClassPath = ServerClassPath(None, None)
    find_jars_mock.return_value = []
    try:
        serverClassPath._validate_classpath(None)
    except:
        self.fail()
    find_jars_mock.return_value = ['ambari-metrics-common-2.1.1.236.jar', 'ambari-server-2.1.1.236.jar', 'jetty-client-8.1.17.v20150415.jar', 'spring-core-3.0.7.RELEASE.jar']
    try:
        serverClassPath._validate_classpath(None)
    except:
        self.fail()
    find_jars_mock.return_value = ['ambari-metrics-common-2.1.1.236.jar', 'ambari-server-2.1.1.236.jar', 'ambari-server-2.1.1.hotfixed.jar', 'jetty-client-8.1.17.v20150415.jar', 'spring-core-3.0.7.RELEASE.jar']
    try:
        serverClassPath._validate_classpath(None)
        self.fail()
    except:
        pass
    find_jars_mock.return_value = ['ambari-metrics-common-2.1.1.236.jar', 'ambari-server-2.1.1.236.jar', 'jetty-client-8.1.17.v20150415.jar', 'jetty-client-9.jar', 'spring-core-3.0.7.RELEASE.jar']
    try:
        serverClassPath._validate_classpath(None)
    except:
        self.fail()
