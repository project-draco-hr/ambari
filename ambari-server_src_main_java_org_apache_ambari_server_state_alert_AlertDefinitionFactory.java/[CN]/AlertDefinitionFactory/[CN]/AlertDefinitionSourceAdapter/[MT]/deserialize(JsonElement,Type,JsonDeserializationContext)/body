{
  JsonObject jsonObj=(JsonObject)json;
  SourceType type=SourceType.valueOf(jsonObj.get("type").getAsString());
  Class<? extends Source> clazz=null;
switch (type) {
case METRIC:
{
      clazz=MetricSource.class;
      break;
    }
case PORT:
{
    clazz=PortSource.class;
    break;
  }
case SCRIPT:
{
  clazz=ScriptSource.class;
  break;
}
case AGGREGATE:
{
clazz=AggregateSource.class;
break;
}
case PERCENT:
{
clazz=PercentSource.class;
break;
}
default :
break;
}
if (null == clazz) {
LOG.warn("Unable to deserialize an alert definition with source type {}",type);
return null;
}
return context.deserialize(json,clazz);
}
