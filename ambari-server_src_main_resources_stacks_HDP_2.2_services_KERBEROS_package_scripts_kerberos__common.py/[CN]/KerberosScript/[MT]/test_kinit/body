@staticmethod
def test_kinit(identity):
    principal = get_property_value(identity, 'principal')
    if (principal is not None):
        keytab_file = get_property_value(identity, 'keytab_file')
        keytab = get_property_value(identity, 'keytab')
        password = get_property_value(identity, 'password')
        if ((keytab_file is not None) and os.path.isfile(keytab_file)):
            command = ('kinit -k -t %s %s' % (keytab_file, principal))
            shell.checked_call(command)
            return shell.checked_call('kdestroy')
        elif (keytab is not None):
            (fd, test_keytab_file) = tempfile.mkstemp()
            os.write(fd, base64.b64decode(keytab))
            os.close(fd)
            try:
                try:
                    command = ('kinit -k -t %s %s' % (test_keytab_file, principal))
                    shell.checked_call(command)
                    return shell.checked_call('kdestroy')
                except:
                    raise
            finally:
                if (test_keytab_file is not None):
                    os.remove(test_keytab_file)
        elif (password is not None):
            process = subprocess.Popen(['kinit', principal], stdin=subprocess.PIPE)
            (stdout, stderr) = process.communicate(password)
            if process.returncode:
                err_msg = Logger.get_protected_text(('Execution of kinit returned %d. %s' % (process.returncode, stderr)))
                raise Fail(err_msg)
            else:
                return shell.checked_call('kdestroy')
        else:
            return (0, '')
    else:
        return (0, '')
