def get_policy_params(self, typeOfPolicy, policyObj, policy_user):
    '\n    param typeOfPolicy: component name for which policy has to be get\n    param policyObj: policy dict\n    param policy_user: policy user that needs to be updated\n    returns: Returns updated policy dict\n    '
    typeOfPolicy = typeOfPolicy.lower()
    if (typeOfPolicy == 'hdfs'):
        policyObj['permMapList'] = [{'userList': [policy_user], 'permList': ['read', 'write', 'execute', 'admin'], }]
    elif (typeOfPolicy == 'hive'):
        policyObj['permMapList'] = [{'userList': [policy_user], 'permList': ['select', 'update', 'create', 'drop', 'alter', 'index', 'lock', 'all', 'admin'], }]
    elif (typeOfPolicy == 'hbase'):
        policyObj['permMapList'] = [{'userList': [policy_user], 'permList': ['read', 'write', 'create', 'admin'], }]
    elif (typeOfPolicy == 'knox'):
        policyObj['permMapList'] = [{'userList': [policy_user], 'permList': ['allow', 'admin'], }]
    elif (typeOfPolicy == 'storm'):
        policyObj['permMapList'] = [{'userList': [policy_user], 'permList': ['submitTopology', 'fileUpload', 'getNimbusConf', 'getClusterInfo', 'fileDownload', 'killTopology', 'rebalance', 'activate', 'deactivate', 'getTopologyConf', 'getTopology', 'getUserTopology', 'getTopologyInfo', 'uploadNewCredential', 'admin'], }]
    return policyObj
