@safe_retry(times=5, sleep_time=8, backoff_factor=1.5, err_class=Fail, return_on_fail=None)
def create_ambari_admin_user(self, ambari_admin_username, ambari_admin_password, usernamepassword):
    '\n    :param ambari_admin_username: username of user to be created\n    :param ambari_admin_username: user password of user to be created\n    :return Returns response code for successful user creation else None\n    '
    flag_ambari_admin_present = False
    match = re.match('[a-zA-Z0-9_\\S]+$', ambari_admin_password)
    if (match is None):
        raise Fail('Invalid password given for Ranger Admin user for Ambari')
    try:
        url = ((self.urlUsers + '?name=') + str(ambari_admin_username))
        request = urllib2.Request(url)
        base64string = base64.encodestring(usernamepassword).replace('\n', '')
        request.add_header('Content-Type', 'application/json')
        request.add_header('Accept', 'application/json')
        request.add_header('Authorization', 'Basic {0}'.format(base64string))
        result = openurl(request, timeout=20)
        response_code = result.getcode()
        response = json.loads(result.read())
        if ((response_code == 200) and (len(response['vXUsers']) >= 0)):
            for vxuser in response['vXUsers']:
                if (vxuser['name'] == ambari_admin_username):
                    flag_ambari_admin_present = True
                    break
                else:
                    flag_ambari_admin_present = False
            if flag_ambari_admin_present:
                Logger.info((ambari_admin_username + ' user already exists.'))
                return response_code
            else:
                Logger.info((ambari_admin_username + ' user is not present, creating user using given configurations'))
                url = self.urlSecUsers
                admin_user = dict()
                admin_user['status'] = 1
                admin_user['userRoleList'] = ['ROLE_SYS_ADMIN']
                admin_user['name'] = ambari_admin_username
                admin_user['password'] = ambari_admin_password
                admin_user['description'] = ambari_admin_username
                admin_user['firstName'] = ambari_admin_username
                data = json.dumps(admin_user)
                base64string = base64.encodestring('{0}'.format(usernamepassword)).replace('\n', '')
                headers = {'Accept': 'application/json', 'Content-Type': 'application/json', }
                request = urllib2.Request(url, data, headers)
                request.add_header('Authorization', 'Basic {0}'.format(base64string))
                result = openurl(request, timeout=20)
                response_code = result.getcode()
                response = json.loads(json.JSONEncoder().encode(result.read()))
                if ((response_code == 200) and (response is not None)):
                    Logger.info('Ambari admin user creation successful.')
                    return response_code
                else:
                    Logger.info('Ambari admin user creation failed.')
                    return None
        else:
            return None
    except urllib2.URLError as e:
        if isinstance(e, urllib2.HTTPError):
            raise Fail('Error creating ambari admin user. Http status code - {0}. \n {1}'.format(e.code, e.read()))
        else:
            raise Fail('Error creating ambari admin user. Reason - {0}.'.format(e.reason))
    except httplib.BadStatusLine:
        raise Fail('Ranger Admin service is not reachable, please restart the service and then try again')
    except TimeoutError:
        raise Fail('Connection to Ranger Admin failed. Reason - timeout')
