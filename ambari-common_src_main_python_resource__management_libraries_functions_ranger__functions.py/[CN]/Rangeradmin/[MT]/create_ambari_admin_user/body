def create_ambari_admin_user(self, ambari_admin_username, ambari_admin_password, usernamepassword):
    try:
        url = ((self.urlUsers + '?name=') + str(ambari_admin_username))
        request = urllib2.Request(url)
        base64string = base64.encodestring(usernamepassword).replace('\n', '')
        request.add_header('Content-Type', 'application/json')
        request.add_header('Accept', 'application/json')
        request.add_header('Authorization', 'Basic {0}'.format(base64string))
        result = urllib2.urlopen(request)
        response_code = result.getcode()
        response = json.loads(result.read())
        if ((response_code == 200) and (len(response['vXUsers']) >= 0)):
            ambari_admin_username = ambari_admin_username
            flag_ambari_admin_present = False
            for vxuser in response['vXUsers']:
                rangerlist_username = vxuser['name']
                if (rangerlist_username == ambari_admin_username):
                    flag_ambari_admin_present = True
                    break
                else:
                    flag_ambari_admin_present = False
            if flag_ambari_admin_present:
                Logger.info((ambari_admin_username + ' user already exists, using existing user from configurations.'))
                return (ambari_admin_username, ambari_admin_password)
            else:
                Logger.info((ambari_admin_username + ' user is not present, creating user using given configurations'))
                url = self.urlSecUsers
                admin_user = dict()
                admin_user['status'] = 1
                admin_user['userRoleList'] = ['ROLE_SYS_ADMIN']
                admin_user['name'] = ambari_admin_username
                admin_user['password'] = ambari_admin_password
                admin_user['description'] = ambari_admin_username
                admin_user['firstName'] = ambari_admin_username
                data = json.dumps(admin_user)
                base64string = base64.encodestring('{0}'.format(usernamepassword)).replace('\n', '')
                headers = {'Accept': 'application/json', 'Content-Type': 'application/json', }
                request = urllib2.Request(url, data, headers)
                request.add_header('Authorization', 'Basic {0}'.format(base64string))
                result = urllib2.urlopen(request)
                response_code = result.getcode()
                response = json.loads(json.JSONEncoder().encode(result.read()))
                if ((response_code == 200) and (response is not None)):
                    Logger.info('Ambari admin user creation successful.')
                else:
                    Logger.info('Ambari admin user creation failed,setting username and password as blank')
                    ambari_admin_username = ''
                    ambari_admin_password = ''
                return (ambari_admin_username, ambari_admin_password)
        else:
            return ('', '')
    except urllib2.URLError as e:
        if isinstance(e, urllib2.HTTPError):
            Logger.error('HTTP Code: {0}'.format(e.code))
            Logger.error('HTTP Data: {0}'.format(e.read()))
            return ('', '')
        else:
            Logger.error('Error: {0}'.format(e.reason))
            return ('', '')
    except httplib.BadStatusLine:
        Logger.error('Ranger Admin service is not reachable, please restart the service and then try again')
        return ('', '')
