@safe_retry(times=75, sleep_time=8, backoff_factor=1.5, err_class=Fail, return_on_fail=None)
def get_policy_by_repo_name(self, name, component, status, usernamepassword):
    '\n    :param name: repository name\n    :param component: component name for which policy needs to be searched\n    :param status: true or false\n    :param usernamepassword: user credentials using which policy needs to be searched\n    :return Returns successful response else None\n    '
    try:
        searchPolicyURL = ((((((self.urlPolicies + '?repositoryName=') + name) + '&repositoryType=') + component) + '&isEnabled=') + status)
        request = urllib2.Request(searchPolicyURL)
        base64string = base64.encodestring(usernamepassword).replace('\n', '')
        request.add_header('Content-Type', 'application/json')
        request.add_header('Accept', 'application/json')
        request.add_header('Authorization', 'Basic {0}'.format(base64string))
        result = openurl(request, timeout=20)
        response_code = result.getcode()
        response = json.loads(result.read())
        if ((response_code == 200) and (len(response['vXPolicies']) > 0)):
            return response['vXPolicies']
        else:
            return None
    except urllib2.URLError as e:
        if isinstance(e, urllib2.HTTPError):
            raise Fail('Error getting policy from repository {0} for component {1}. Http status code - {2}. \n {3}'.format(name, component, e.code, e.read()))
        else:
            raise Fail('Error getting policy from repository {0} for component {1}. Reason - {2}.'.format(name, component, e.reason))
    except httplib.BadStatusLine:
        raise Fail('Ranger Admin service is not reachable, please restart the service and then try again')
    except TimeoutError:
        raise Fail('Connection to Ranger Admin failed. Reason - timeout')
