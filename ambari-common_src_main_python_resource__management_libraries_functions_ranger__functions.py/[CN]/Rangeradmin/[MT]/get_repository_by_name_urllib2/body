def get_repository_by_name_urllib2(self, name, component, status, usernamepassword):
    '\n    param name: name of the component, from which, function will search in list of repositories\n    param component: component for which repository has to be checked\n    param status: active or inactive\n    param usernamepassword: user credentials using which repository needs to be searched\n    return: Returns Ranger repository dict if found otherwise None\n    '
    try:
        searchRepoURL = ((((((self.urlReposPub + '?name=') + name) + '&type=') + component) + '&status=') + status)
        request = urllib2.Request(searchRepoURL)
        base64string = base64.encodestring(usernamepassword).replace('\n', '')
        request.add_header('Content-Type', 'application/json')
        request.add_header('Accept', 'application/json')
        request.add_header('Authorization', 'Basic {0}'.format(base64string))
        result = urllib2.urlopen(request)
        response_code = result.getcode()
        response = json.loads(result.read())
        if ((response_code == 200) and (len(response['vXRepositories']) > 0)):
            for repo in response['vXRepositories']:
                repoDump = json.loads(json.JSONEncoder().encode(repo))
                if (repoDump['name'].lower() == name.lower()):
                    return repoDump
            return None
        else:
            return None
    except urllib2.URLError as e:
        if isinstance(e, urllib2.HTTPError):
            Logger.error('Error getting {0} repository for component {1}. Http status code - {2}. \n {3}'.format(name, component, e.code, e.read()))
        else:
            Logger.error('Error getting {0} repository for component {1}. Reason - {2}.'.format(name, component, e.reason))
        return None
    except httplib.BadStatusLine:
        Logger.error('Ranger Admin service is not reachable, please restart the service and then try again')
        return None
