def create_repository_urllib2(self, data, usernamepassword, policy_user):
    '\n    param data: repository dict \n    param usernamepassword: user credentials using which repository needs to be created\n    param policy_user: use this policy user for policies that will be used during repository creation\n    return: Returns created repository response else None\n    '
    try:
        searchRepoURL = self.urlReposPub
        base64string = base64.encodestring('{0}'.format(usernamepassword)).replace('\n', '')
        headers = {'Accept': 'application/json', 'Content-Type': 'application/json', }
        request = urllib2.Request(searchRepoURL, data, headers)
        request.add_header('Authorization', 'Basic {0}'.format(base64string))
        result = urllib2.urlopen(request)
        response_code = result.getcode()
        response = json.loads(json.JSONEncoder().encode(result.read()))
        if (response_code == 200):
            Logger.info('Repository created Successfully')
            repoData = json.loads(data)
            repoName = repoData['name']
            typeOfPolicy = repoData['repositoryType']
            policyList = self.get_policy_by_repo_name(name=repoName, component=typeOfPolicy, status='true', usernamepassword=usernamepassword)
            if ((policyList is not None) and (len(policyList) > 0)):
                policiesUpdateCount = 0
                for policy in policyList:
                    updatedPolicyObj = self.get_policy_params(typeOfPolicy, policy, policy_user)
                    (policyResCode, policyResponse) = self.update_ranger_policy(updatedPolicyObj['id'], json.dumps(updatedPolicyObj), usernamepassword)
                    if (policyResCode == 200):
                        policiesUpdateCount = (policiesUpdateCount + 1)
                    else:
                        Logger.info('Policy Update failed')
                if (len(policyList) == policiesUpdateCount):
                    Logger.info('Ranger Repository created successfully and policies updated successfully providing ambari-qa user all permissions')
                    return response
                else:
                    return None
            else:
                Logger.info('Policies not found for the newly created Repository')
            return None
        else:
            Logger.info('Repository creation failed')
            return None
    except urllib2.URLError as e:
        if isinstance(e, urllib2.HTTPError):
            Logger.error('Error creating repository. Http status code - {0}. \n {1}'.format(e.code, e.read()))
        else:
            Logger.error('Error creating repository. Reason - {0}.'.format(e.reason))
        return None
    except httplib.BadStatusLine:
        Logger.error('Ranger Admin service is not reachable, please restart the service and then try again')
        return None
