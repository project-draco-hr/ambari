{
  if (CollectionUtils.isEmpty(hosts)) {
    return Collections.emptyList();
  }
  Cluster cluster=upgradeContext.getCluster();
  List<StageWrapper> wrappers=new ArrayList<>();
  for (  String hostName : hosts) {
    List<TaskWrapper> stopTasks=new ArrayList<>();
    List<TaskWrapper> upgradeTasks=new ArrayList<>();
    for (    ServiceComponentHost sch : cluster.getServiceComponentHosts(hostName)) {
      if (!isVersionAdvertised(upgradeContext,sch)) {
        continue;
      }
      HostsType hostsType=upgradeContext.getResolver().getMasterAndHosts(sch.getServiceName(),sch.getServiceComponentName());
      if (null != hostsType && !hostsType.hosts.contains(hostName)) {
        LOG.warn("Host {} could not be orchestrated. Either there are no components for {}/{} " + "or the target version {} is already current.",hostName,sch.getServiceName(),sch.getServiceComponentName(),upgradeContext.getVersion());
        continue;
      }
      if (!sch.isClientComponent()) {
        stopTasks.add(new TaskWrapper(sch.getServiceName(),sch.getServiceComponentName(),Collections.singleton(hostName),new StopTask()));
      }
      upgradeTasks.add(new TaskWrapper(sch.getServiceName(),sch.getServiceComponentName(),Collections.singleton(hostName),new RestartTask()));
    }
    if (stopTasks.isEmpty() && upgradeTasks.isEmpty()) {
      LOG.info("No tasks for {}",hostName);
      continue;
    }
    StageWrapper stopWrapper=new StageWrapper(StageWrapper.Type.STOP,String.format("Stop on %s",hostName),stopTasks.toArray(new TaskWrapper[stopTasks.size()]));
    StageWrapper startWrapper=new StageWrapper(StageWrapper.Type.RESTART,String.format("Start on %s",hostName),upgradeTasks.toArray(new TaskWrapper[upgradeTasks.size()]));
    String message=String.format("Please acknowledge that host %s has been prepared.",hostName);
    ManualTask mt=new ManualTask();
    mt.messages.add(message);
    JsonObject structuredOut=new JsonObject();
    structuredOut.addProperty(TYPE,HostOrderItem.HostOrderActionType.HOST_UPGRADE.toString());
    structuredOut.addProperty(HOST,hostName);
    mt.structuredOut=structuredOut.toString();
    StageWrapper manualWrapper=new StageWrapper(StageWrapper.Type.SERVER_SIDE_ACTION,"Manual Confirmation",new TaskWrapper(null,null,Collections.<String>emptySet(),mt));
    wrappers.add(stopWrapper);
    wrappers.add(manualWrapper);
    wrappers.add(startWrapper);
  }
  return wrappers;
}
