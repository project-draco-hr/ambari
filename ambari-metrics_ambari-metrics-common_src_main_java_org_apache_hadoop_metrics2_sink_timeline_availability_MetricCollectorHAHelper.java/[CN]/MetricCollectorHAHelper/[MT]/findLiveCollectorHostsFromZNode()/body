{
  Set<String> collectors=new HashSet<>();
  RetryPolicy retryPolicy=new BoundedExponentialBackoffRetry(sleepMsBetweenRetries,10 * sleepMsBetweenRetries,tryCount);
  final CuratorZookeeperClient client=new CuratorZookeeperClient(zookeeperQuorum,SESSION_TIMEOUT,CONNECTION_TIMEOUT,null,retryPolicy);
  List<String> liveInstances=null;
  try {
    client.start();
    liveInstances=RetryLoop.callWithRetry(client,new Callable<List<String>>(){
      @Override public List<String> call() throws Exception {
        ZooKeeper zookeeper=client.getZooKeeper();
        return zookeeper.getChildren(ZK_PATH,false);
      }
    }
);
  }
 catch (  Exception e) {
    LOG.warn("Unable to connect to zookeeper.",e);
    LOG.debug(e);
  }
  if (liveInstances != null && !liveInstances.isEmpty()) {
    for (    String instanceStr : liveInstances) {
      collectors.add(instanceStr.substring(0,instanceStr.indexOf(INSTANCE_NAME_DELIMITER)));
    }
  }
  return collectors;
}
