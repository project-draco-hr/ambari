def jdbc_connector():
    import params
    if ((params.hive_jdbc_driver in params.hive_jdbc_drivers_list) and params.hive_use_existing_db):
        environment = {'no_proxy': format('{ambari_server_hostname}'), }
        Execute(('rm', '-f', params.prepackaged_ojdbc_symlink), path=['/bin', '/usr/bin/'], sudo=True)
        File(params.downloaded_custom_connector, content=DownloadSource(params.driver_curl_source))
        if params.sqla_db_used:
            untar_sqla_type2_driver = ('tar', '-xvf', params.downloaded_custom_connector, '-C', params.tmp_dir)
            Execute(untar_sqla_type2_driver, sudo=True)
            Execute(format('yes | {sudo} cp {jars_path_in_archive} {hive_lib}'))
            Directory(params.jdbc_libs_dir, recursive=True)
            Execute(format('yes | {sudo} cp {libs_path_in_archive} {jdbc_libs_dir}'))
            Execute(format('{sudo} chown -R {hive_user}:{user_group} {hive_lib}/*'))
        else:
            Execute(('cp', '--remove-destination', params.downloaded_custom_connector, params.target), path=['/bin', '/usr/bin/'], sudo=True)
    else:
        Execute(('cp', '--remove-destination', format('/usr/share/java/{jdbc_jar_name}'), params.target), path=['/bin', '/usr/bin/'], sudo=True)
    File(params.target, mode=420)
