def hive(name=None):
    import params
    if (name == 'hiveserver2'):
        if ((params.hdp_stack_version_major != '') and (compare_versions(params.hdp_stack_version_major, '2.2') >= 0)):
            params.HdfsResource(InlineTemplate(params.mapreduce_tar_destination).get_content(), type='file', action='create_delayed', source=params.mapreduce_tar_source, group=params.user_group, mode=params.tarballs_mode)
            params.HdfsResource(InlineTemplate(params.tez_tar_destination).get_content(), type='file', action='create_delayed', source=params.tez_tar_source, group=params.user_group, mode=params.tarballs_mode)
        else:
            install_tez_jars()
        if ((params.hdp_stack_version_major != '') and (compare_versions(params.hdp_stack_version_major, '2.2.0.0') < 0)):
            params.HdfsResource(params.webhcat_apps_dir, type='directory', action='create_delayed', owner=params.webhcat_user, mode=493)
        if (params.hcat_hdfs_user_dir != params.webhcat_hdfs_user_dir):
            params.HdfsResource(params.hcat_hdfs_user_dir, type='directory', action='create_delayed', owner=params.hcat_user, mode=params.hcat_hdfs_user_mode)
        params.HdfsResource(params.webhcat_hdfs_user_dir, type='directory', action='create_delayed', owner=params.webhcat_user, mode=params.webhcat_hdfs_user_mode)
        for src_filepath in glob.glob(params.hadoop_streaming_tar_source):
            src_filename = os.path.basename(src_filepath)
            params.HdfsResource(((InlineTemplate(params.hadoop_streaming_tar_destination_dir).get_content() + '/') + src_filename), type='file', action='create_delayed', source=src_filepath, group=params.user_group, mode=params.tarballs_mode)
        if os.path.isfile(params.pig_tar_source):
            params.HdfsResource(InlineTemplate(params.pig_tar_destination).get_content(), type='file', action='create_delayed', source=params.pig_tar_source, group=params.user_group, mode=params.tarballs_mode)
        params.HdfsResource(InlineTemplate(params.hive_tar_destination).get_content(), type='file', action='create_delayed', source=params.hive_tar_source, group=params.user_group, mode=params.tarballs_mode)
        for src_filepath in glob.glob(params.sqoop_tar_source):
            src_filename = os.path.basename(src_filepath)
            params.HdfsResource(((InlineTemplate(params.sqoop_tar_destination_dir).get_content() + '/') + src_filename), type='file', action='create_delayed', source=src_filepath, group=params.user_group, mode=params.tarballs_mode)
        params.HdfsResource(params.hive_apps_whs_dir, type='directory', action='create_delayed', owner=params.hive_user, mode=511)
        params.HdfsResource(params.hive_hdfs_user_dir, type='directory', action='create_delayed', owner=params.hive_user, mode=params.hive_hdfs_user_mode)
        params.HdfsResource(None, action='execute')
    Directory(params.hive_conf_dir_prefix, mode=493)
    for conf_dir in params.hive_conf_dirs_list:
        fill_conf_dir(conf_dir)
    XmlConfig('hive-site.xml', conf_dir=params.hive_config_dir, configurations=params.config['configurations']['hive-site'], configuration_attributes=params.config['configuration_attributes']['hive-site'], owner=params.hive_user, group=params.user_group, mode=420)
    if (params.hive_specific_configs_supported and (name == 'hiveserver2')):
        XmlConfig('hiveserver2-site.xml', conf_dir=params.hive_server_conf_dir, configurations=params.config['configurations']['hiveserver2-site'], configuration_attributes=params.config['configuration_attributes']['hiveserver2-site'], owner=params.hive_user, group=params.user_group, mode=420)
    File(format('{hive_config_dir}/hive-env.sh'), owner=params.hive_user, group=params.user_group, content=InlineTemplate(params.hive_env_sh_template))
    if ((name == 'metastore') or (name == 'hiveserver2')):
        jdbc_connector()
    environment = {'no_proxy': format('{ambari_server_hostname}'), }
    cmd = format('/bin/sh -c \'cd /usr/lib/ambari-agent/ && curl -kf -x "" --retry 5 {jdk_location}{check_db_connection_jar_name} -o {check_db_connection_jar_name}\'')
    Execute(cmd, not_if=format('[ -f {check_db_connection_jar} ]'), environment=environment)
    if (name == 'metastore'):
        File(params.start_metastore_path, mode=493, content=StaticFile('startMetastore.sh'))
        if params.init_metastore_schema:
            create_schema_cmd = format('export HIVE_CONF_DIR={hive_server_conf_dir} ; {hive_bin}/schematool -initSchema -dbType {hive_metastore_db_type} -userName {hive_metastore_user_name} -passWord {hive_metastore_user_passwd!p}')
            check_schema_created_cmd = format('export HIVE_CONF_DIR={hive_server_conf_dir} ; {hive_bin}/schematool -info -dbType {hive_metastore_db_type} -userName {hive_metastore_user_name} -passWord {hive_metastore_user_passwd!p}')
            Execute(create_schema_cmd, not_if=check_schema_created_cmd)
    elif (name == 'hiveserver2'):
        File(params.start_hiveserver2_path, mode=493, content=Template(format('{start_hiveserver2_script}')))
    if (name != 'client'):
        crt_directory(params.hive_pid_dir)
        crt_directory(params.hive_log_dir)
        crt_directory(params.hive_var_lib)
