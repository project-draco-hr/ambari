{
  final Set<Resource> resources=new HashSet<Resource>();
  final Set<String> requestedIds=getRequestPropertyIds(request,predicate);
  final Set<Map<String,Object>> propertyMaps=getPropertyMaps(predicate);
  for (  Map<String,Object> propertyMap : propertyMaps) {
    final String clusterName=propertyMap.get(UPGRADE_CHECK_CLUSTER_NAME_PROPERTY_ID).toString();
    final UpgradeType upgradeType=propertyMap.containsKey(UPGRADE_CHECK_UPGRADE_TYPE_PROPERTY_ID) ? UpgradeType.valueOf(propertyMap.get(UPGRADE_CHECK_UPGRADE_TYPE_PROPERTY_ID).toString()) : UpgradeType.ROLLING;
    final Cluster cluster;
    try {
      cluster=clustersProvider.get().getCluster(clusterName);
    }
 catch (    AmbariException ambariException) {
      throw new NoSuchResourceException(ambariException.getMessage());
    }
    String stackName=cluster.getCurrentStackVersion().getStackName();
    String sourceStackVersion=cluster.getCurrentStackVersion().getStackVersion();
    final PrereqCheckRequest upgradeCheckRequest=new PrereqCheckRequest(clusterName,upgradeType);
    upgradeCheckRequest.setSourceStackId(cluster.getCurrentStackVersion());
    if (propertyMap.containsKey(UPGRADE_CHECK_REPOSITORY_VERSION_PROPERTY_ID)) {
      String repositoryVersionId=propertyMap.get(UPGRADE_CHECK_REPOSITORY_VERSION_PROPERTY_ID).toString();
      RepositoryVersionEntity repositoryVersionEntity=repositoryVersionDAO.findByStackNameAndVersion(stackName,repositoryVersionId);
      upgradeCheckRequest.setRepositoryVersion(repositoryVersionId);
      upgradeCheckRequest.setTargetStackId(repositoryVersionEntity.getStackId());
    }
    UpgradePack upgradePack=null;
    String preferredUpgradePackName=propertyMap.containsKey(UPGRADE_CHECK_UPGRADE_PACK_PROPERTY_ID) ? (String)propertyMap.get(UPGRADE_CHECK_UPGRADE_PACK_PROPERTY_ID) : null;
    try {
      upgradePack=upgradeHelper.get().suggestUpgradePack(clusterName,sourceStackVersion,upgradeCheckRequest.getRepositoryVersion(),Direction.UPGRADE,upgradeType,preferredUpgradePackName);
    }
 catch (    AmbariException e) {
      throw new SystemException(e.getMessage(),e);
    }
    if (upgradePack == null) {
      throw new SystemException(String.format("Upgrade pack not found for the target repository version %s",upgradeCheckRequest.getRepositoryVersion()));
    }
    List<AbstractCheckDescriptor> upgradeChecksToRun=upgradeCheckRegistry.getFilteredUpgradeChecks(upgradePack);
    for (    PrerequisiteCheck prerequisiteCheck : checkHelper.performChecks(upgradeCheckRequest,upgradeChecksToRun)) {
      final Resource resource=new ResourceImpl(Resource.Type.PreUpgradeCheck);
      setResourceProperty(resource,UPGRADE_CHECK_ID_PROPERTY_ID,prerequisiteCheck.getId(),requestedIds);
      setResourceProperty(resource,UPGRADE_CHECK_CHECK_PROPERTY_ID,prerequisiteCheck.getDescription(),requestedIds);
      setResourceProperty(resource,UPGRADE_CHECK_STATUS_PROPERTY_ID,prerequisiteCheck.getStatus(),requestedIds);
      setResourceProperty(resource,UPGRADE_CHECK_REASON_PROPERTY_ID,prerequisiteCheck.getFailReason(),requestedIds);
      setResourceProperty(resource,UPGRADE_CHECK_FAILED_ON_PROPERTY_ID,prerequisiteCheck.getFailedOn(),requestedIds);
      setResourceProperty(resource,UPGRADE_CHECK_FAILED_DETAIL_PROPERTY_ID,prerequisiteCheck.getFailedDetail(),requestedIds);
      setResourceProperty(resource,UPGRADE_CHECK_CHECK_TYPE_PROPERTY_ID,prerequisiteCheck.getType(),requestedIds);
      setResourceProperty(resource,UPGRADE_CHECK_CLUSTER_NAME_PROPERTY_ID,prerequisiteCheck.getClusterName(),requestedIds);
      setResourceProperty(resource,UPGRADE_CHECK_UPGRADE_TYPE_PROPERTY_ID,upgradeType,requestedIds);
      if (upgradeCheckRequest.getRepositoryVersion() != null) {
        setResourceProperty(resource,UPGRADE_CHECK_REPOSITORY_VERSION_PROPERTY_ID,upgradeCheckRequest.getRepositoryVersion(),requestedIds);
      }
      resources.add(resource);
    }
  }
  return resources;
}
