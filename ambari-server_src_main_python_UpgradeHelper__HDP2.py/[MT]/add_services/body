def add_services(options):
    SERVICE_URL_FORMAT = (URL_FORMAT + '/services/{2}')
    COMPONENT_URL_FORMAT = (SERVICE_URL_FORMAT + '/components/{3}')
    HOST_COMPONENT_URL_FORMAT = (URL_FORMAT + '/hosts/{2}/host_components/{3}')
    service_comp = {'YARN': ['NODEMANAGER', 'RESOURCEMANAGER', 'YARN_CLIENT'], 'MAPREDUCE2': ['HISTORYSERVER', 'MAPREDUCE2_CLIENT'], }
    new_old_host_map = {'NODEMANAGER': 'TASKTRACKER', 'HISTORYSERVER': 'JOBTRACKER', 'RESOURCEMANAGER': 'JOBTRACKER', 'YARN_CLIENT': 'MAPREDUCE_CLIENT', 'MAPREDUCE2_CLIENT': 'MAPREDUCE_CLIENT', }
    hostmapping = read_mapping()
    for service in service_comp.keys():
        response = curl('-u', AUTH_FORMAT.format(options.user, options.password), '-X', 'POST', SERVICE_URL_FORMAT.format(options.hostname, options.clustername, service))
        (retcode, errdata) = validate_response(response, False)
        if (not (retcode == 0)):
            raise FatalException(retcode, errdata)
        for component in service_comp[service]:
            response = curl('-u', AUTH_FORMAT.format(options.user, options.password), '-X', 'POST', COMPONENT_URL_FORMAT.format(options.hostname, options.clustername, service, component))
            (retcode, errdata) = validate_response(response, False)
            if (not (retcode == 0)):
                raise FatalException(retcode, errdata)
            for host in hostmapping[new_old_host_map[component]]:
                response = curl('-u', AUTH_FORMAT.format(options.user, options.password), '-X', 'POST', HOST_COMPONENT_URL_FORMAT.format(options.hostname, options.clustername, host, component))
                (retcode, errdata) = validate_response(response, False)
                if (not (retcode == 0)):
                    raise FatalException(retcode, errdata)
                pass
            pass
        pass
    pass
