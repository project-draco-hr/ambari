def startProcess(self, clusterId, clusterDefinitionRevision, component, role, script, user, result):
    global serverTracker
    oldUid = os.getuid()
    try:
        user = getpwnam(user)[2]
        os.setuid(user)
    except Exception:
        logger.warn(('%s %s %s can not switch user for START_ACTION.' % (clusterId, component, role)))
    code = 0
    commandResult = {}
    process = ((((((clusterId + '/') + clusterDefinitionRevision) + '/') + component) + '/') + role)
    if (not (process in serverTracker)):
        cmd = sys.executable
        tempfilename = tempfile.mktemp()
        tmp = open(tempfilename, 'w')
        tmp.write(script['script'])
        tmp.close()
        cmd = ('%s %s %s' % (cmd, tempfilename, ' '.join(script['param'])))
        child_pid = os.fork()
        if (child_pid == 0):
            p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True, close_fds=True)
            (out, err) = p.communicate()
            code = p.wait()
            os.unlink(tempfilename)
            serverTracker[process] = None
        else:
            serverTracker[process] = child_pid
            commandResult['exitCode'] = 0
        result['commandResult'] = commandResult
    try:
        os.setuid(oldUid)
    except Exception:
        logger.warn(('%s %s %s can not restore user for START_ACTION.' % (clusterId, component, role)))
    return result
