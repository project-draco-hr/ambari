def _collect(self):
    cmd_module = self._load_source()
    if (cmd_module is not None):
        configurations = {}
        try:
            tokens = cmd_module.get_tokens()
            if (tokens is not None):
                for token in tokens:
                    value = self._get_configuration_value(token)
                    if (value is not None):
                        configurations[token] = value
        except AttributeError:
            logger.debug('The script {0} does not have a get_tokens() function'.format(str(cmd_module)))
        matchObj = re.match('((.*)services(.*)package)', self.path_to_script)
        if matchObj:
            basedir = matchObj.group(1)
            with Environment(basedir, tmp_dir=Constants.AGENT_TMP_DIR, logger=logging.getLogger('ambari_alerts')) as env:
                result = cmd_module.execute(configurations, self.parameters, self.host_name)
        else:
            result = cmd_module.execute(configurations, self.parameters, self.host_name)
        loggerMsg = '[Alert][{0}] Failed with result {2}: {3}'.format(self.get_name(), self.path_to_script, result[0], result[1])
        if (result[0] == self.RESULT_CRITICAL):
            logger.error(loggerMsg)
        elif ((result[0] == self.RESULT_WARNING) or (result[0] == self.RESULT_UNKNOWN)):
            logger.debug(loggerMsg)
        return result
    else:
        return (self.RESULT_UNKNOWN, ['Unable to execute script {0}'.format(self.path)])
