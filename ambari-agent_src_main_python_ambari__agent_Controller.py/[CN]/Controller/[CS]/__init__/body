def __init__(self, config, server_hostname, heartbeat_stop_callback=None, range=30):
    threading.Thread.__init__(self)
    logger.debug('Initializing Controller RPC thread.')
    if (heartbeat_stop_callback is None):
        heartbeat_stop_callback = HeartbeatStopHandlers()
    self.version = self.read_agent_version(config)
    self.lock = threading.Lock()
    self.safeMode = True
    self.credential = None
    self.config = config
    self.hostname = hostname.hostname(config)
    self.serverHostname = server_hostname
    server_secured_url = ((('https://' + self.serverHostname) + ':') + config.get('server', 'secured_url_port'))
    self.registerUrl = ((server_secured_url + '/agent/v1/register/') + self.hostname)
    self.heartbeatUrl = ((server_secured_url + '/agent/v1/heartbeat/') + self.hostname)
    self.componentsUrl = (server_secured_url + '/agent/v1/components/')
    self.netutil = NetUtil(heartbeat_stop_callback)
    self.responseId = (-1)
    self.repeatRegistration = False
    self.isRegistered = False
    self.cachedconnect = None
    self.range = range
    self.hasMappedComponents = True
    self.heartbeat_stop_callback = heartbeat_stop_callback
    self.registration_listeners = []
    self.recovery_manager = RecoveryManager()
    cache_dir = config.get('agent', 'cache_dir')
    if (cache_dir is None):
        cache_dir = '/var/lib/ambari-agent/cache'
    stacks_cache_dir = os.path.join(cache_dir, FileCache.STACKS_CACHE_DIRECTORY)
    common_services_cache_dir = os.path.join(cache_dir, FileCache.COMMON_SERVICES_DIRECTORY)
    host_scripts_cache_dir = os.path.join(cache_dir, FileCache.HOST_SCRIPTS_CACHE_DIRECTORY)
    alerts_cache_dir = os.path.join(cache_dir, 'alerts')
    cluster_config_cache_dir = os.path.join(cache_dir, 'cluster_configuration')
    self.cluster_configuration = ClusterConfiguration(cluster_config_cache_dir)
    self.move_data_dir_mount_file()
    self.alert_scheduler_handler = AlertSchedulerHandler(alerts_cache_dir, stacks_cache_dir, common_services_cache_dir, host_scripts_cache_dir, self.cluster_configuration, config)
    self.alert_scheduler_handler.start()
