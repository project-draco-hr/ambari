def heartbeatWithServer(self):
    self.DEBUG_HEARTBEAT_RETRIES = 0
    self.DEBUG_SUCCESSFULL_HEARTBEATS = 0
    retry = False
    certVerifFailed = False
    config = AmbariConfig.config
    hb_interval = config.get('heartbeat', 'state_interval')
    id = 0
    while (not self.DEBUG_STOP_HEARTBEATING):
        try:
            if (not retry):
                data = json.dumps(self.heartbeat.build(self.responseId, int(hb_interval), self.hasMappedComponents))
                logger.debug(('Sending request: ' + data))
                pass
            else:
                self.DEBUG_HEARTBEAT_RETRIES += 1
            response = self.sendRequest(self.heartbeatUrl, data)
            response = json.loads(response)
            logger.debug(('Got server response: ' + pprint.pformat(response)))
            serverId = int(response['responseId'])
            if ('hasMappedComponents' in response.keys()):
                self.hasMappedComponents = (response['hasMappedComponents'] != False)
            if ('registrationCommand' in response.keys()):
                if (response['registrationCommand'] is not None):
                    logger.info('RegistrationCommand received - repeat agent registration')
                    self.repeatRegistration = True
                    return
            if (serverId != (self.responseId + 1)):
                logger.error('Error in responseId sequence - restarting')
                self.restartAgent()
            else:
                self.responseId = serverId
            if ('executionCommands' in response.keys()):
                self.addToQueue(response['executionCommands'])
                pass
            if ('statusCommands' in response.keys()):
                self.addToQueue(response['statusCommands'])
                pass
            if ('true' == response['restartAgent']):
                logger.error('Got restartAgent command')
                self.restartAgent()
            else:
                logger.info('No commands sent from the Server.')
                pass
            if retry:
                print 'Reconnected to the server'
                logger.info('Reconnected to the server')
            retry = False
            certVerifFailed = False
            self.DEBUG_SUCCESSFULL_HEARTBEATS += 1
            self.DEBUG_HEARTBEAT_RETRIES = 0
            self.heartbeat_wait_event.clear()
        except ssl.SSLError:
            self.repeatRegistration = False
            return
        except Exception as err:
            delay = randint(0, self.range)
            time.sleep(delay)
            if ('code' in err):
                logger.error(err.code)
            else:
                logger.error(((('Unable to connect to: ' + self.heartbeatUrl) + ' due to ') + str(err)))
                logger.debug(('Details: ' + str(err)), exc_info=True)
                if (not retry):
                    print 'Connection to the server was lost. Reconnecting...'
                if (('certificate verify failed' in str(err)) and (not certVerifFailed)):
                    print 'Server certificate verify failed. Did you regenerate server certificate?'
                    certVerifFailed = True
            self.cachedconnect = None
            retry = True
        timeout = (self.netutil.HEARTBEAT_IDDLE_INTERVAL_SEC - self.netutil.MINIMUM_INTERVAL_BETWEEN_HEARTBEATS)
        self.heartbeat_wait_event.wait(timeout=timeout)
        time.sleep(self.netutil.MINIMUM_INTERVAL_BETWEEN_HEARTBEATS)
    pass
