def heartbeatWithServer(self):
    self.DEBUG_HEARTBEAT_RETRIES = 0
    self.DEBUG_SUCCESSFULL_HEARTBEATS = 0
    retry = False
    certVerifFailed = False
    state_interval = self.config.get('heartbeat', 'state_interval_seconds', '60')
    last_state_timestamp = 0.0
    heartbeat_running_msg_timestamp = 0.0
    while (not self.DEBUG_STOP_HEARTBEATING):
        heartbeat_interval = self.netutil.HEARTBEAT_IDLE_INTERVAL_DEFAULT_MAX_SEC
        try:
            crt_time = time.time()
            if ((crt_time - heartbeat_running_msg_timestamp) > int(state_interval)):
                logger.info('Heartbeat with server is running...')
                heartbeat_running_msg_timestamp = crt_time
            send_state = False
            if (not retry):
                if ((crt_time - last_state_timestamp) > int(state_interval)):
                    send_state = True
                data = json.dumps(self.heartbeat.build(self.responseId, send_state, self.hasMappedComponents))
            else:
                self.DEBUG_HEARTBEAT_RETRIES += 1
            logger.debug('Sending Heartbeat (id = %s): %s', self.responseId, data)
            response = self.sendRequest(self.heartbeatUrl, data)
            exitStatus = 0
            if ('exitstatus' in response.keys()):
                exitStatus = int(response['exitstatus'])
            if (exitStatus != 0):
                raise Exception(response)
            serverId = int(response['responseId'])
            logger.debug('Heartbeat response received (id = %s)', serverId)
            cluster_size = (int(response['clusterSize']) if ('clusterSize' in response.keys()) else (-1))
            heartbeat_interval = (self.get_heartbeat_interval(cluster_size) if (cluster_size > 0) else self.netutil.HEARTBEAT_IDLE_INTERVAL_DEFAULT_MAX_SEC)
            logger.debug('Heartbeat interval is %s seconds', heartbeat_interval)
            if ('hasMappedComponents' in response.keys()):
                self.hasMappedComponents = (response['hasMappedComponents'] is not False)
            if ('hasPendingTasks' in response.keys()):
                has_pending_tasks = bool(response['hasPendingTasks'])
                self.recovery_manager.set_paused(has_pending_tasks)
            if ('registrationCommand' in response.keys()):
                if (response['registrationCommand'] is not None):
                    logger.info('RegistrationCommand received - repeat agent registration')
                    self.isRegistered = False
                    self.repeatRegistration = True
                    return
            used_ram = (get_used_ram() / 1000)
            if (self.max_ram_soft and (used_ram >= self.max_ram_soft) and (not self.actionQueue.tasks_in_progress_or_pending())):
                logger.error(AGENT_RAM_OVERUSE_MESSAGE.format(used_ram=used_ram, config_name='memory_threshold_soft_mb', max_ram=self.max_ram_soft))
                self.restartAgent()
            if (self.max_ram_hard and (used_ram >= self.max_ram_hard)):
                logger.error(AGENT_RAM_OVERUSE_MESSAGE.format(used_ram=used_ram, config_name='memory_threshold_hard_mb', max_ram=self.max_ram_hard))
                self.restartAgent()
            if (serverId != (self.responseId + 1)):
                logger.error('Error in responseId sequence - restarting')
                self.restartAgent()
            else:
                self.responseId = serverId
                if send_state:
                    last_state_timestamp = time.time()
            self.cluster_configuration.update_configurations_from_heartbeat(response)
            response_keys = response.keys()
            if ('cancelCommands' in response_keys):
                self.cancelCommandInQueue(response['cancelCommands'])
            if ('executionCommands' in response_keys):
                execution_commands = response['executionCommands']
                self.recovery_manager.process_execution_commands(execution_commands)
                self.addToQueue(execution_commands)
            if ('statusCommands' in response_keys):
                self.addToStatusQueue(response['statusCommands'])
            if (not self.actionQueue.tasks_in_progress_or_pending()):
                recovery_commands = self.recovery_manager.get_recovery_commands()
                for recovery_command in recovery_commands:
                    logger.info('Adding recovery command %s for component %s', recovery_command['roleCommand'], recovery_command['role'])
                    self.addToQueue([recovery_command])
            if ('alertDefinitionCommands' in response_keys):
                self.alert_scheduler_handler.update_definitions(response)
            if ('alertExecutionCommands' in response_keys):
                self.alert_scheduler_handler.execute_alert(response['alertExecutionCommands'])
            if ('true' == response['restartAgent']):
                logger.error('Received the restartAgent command')
                self.restartAgent()
            else:
                logger.debug('No commands sent from %s', self.serverHostname)
            if retry:
                logger.info('Reconnected to %s', self.heartbeatUrl)
            if ('recoveryConfig' in response):
                self.recovery_manager.update_configuration_from_registration(response)
            retry = False
            certVerifFailed = False
            self.DEBUG_SUCCESSFULL_HEARTBEATS += 1
            self.DEBUG_HEARTBEAT_RETRIES = 0
            self.heartbeat_stop_callback.reset_heartbeat()
        except ssl.SSLError:
            self.repeatRegistration = False
            self.isRegistered = False
            logger.exception('SSLError while trying to heartbeat.')
            return
        except Exception as err:
            if ('code' in err):
                logger.error(err.code)
            else:
                logException = False
                if logger.isEnabledFor(logging.DEBUG):
                    logException = True
                exceptionMessage = str(err)
                errorMessage = 'Unable to reconnect to {0} (attempts={1}, details={2})'.format(self.heartbeatUrl, self.DEBUG_HEARTBEAT_RETRIES, exceptionMessage)
                if (not retry):
                    errorMessage = 'Connection to {0} was lost (details={1})'.format(self.serverHostname, exceptionMessage)
                logger.error(errorMessage, exc_info=logException)
                if (('certificate verify failed' in str(err)) and (not certVerifFailed)):
                    logger.warn('Server certificate verify failed. Did you regenerate server certificate?')
                    certVerifFailed = True
            self.cachedconnect = None
            retry = True
            delay = randint(0, self.range)
            time.sleep(delay)
        timeout = (heartbeat_interval - self.netutil.MINIMUM_INTERVAL_BETWEEN_HEARTBEATS)
        if (0 == self.heartbeat_stop_callback.wait(timeout, self.netutil.MINIMUM_INTERVAL_BETWEEN_HEARTBEATS)):
            logger.info('Stop event received')
            self.DEBUG_STOP_HEARTBEATING = True
