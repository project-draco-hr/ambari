def registerWithServer(self):
    '\n    :return: returning from current method without setting self.isRegistered\n    to True will lead to agent termination.\n    '
    LiveStatus.SERVICES = []
    LiveStatus.CLIENT_COMPONENTS = []
    LiveStatus.COMPONENTS = []
    ret = {}
    while (not self.isRegistered):
        try:
            data = json.dumps(self.register.build())
            prettyData = pprint.pformat(data)
            try:
                server_ip = socket.gethostbyname(self.hostname)
                logger.info('Registering with %s (%s) (agent=%s)', self.hostname, server_ip, prettyData)
            except socket.error:
                logger.warn("Unable to determine the IP address of '%s', agent registration may fail (agent=%s)", self.hostname, prettyData)
            ret = self.sendRequest(self.registerUrl, data)
            prettyData = pprint.pformat(ret)
            logger.debug('Registration response is %s', prettyData)
            exitstatus = 0
            if ('exitstatus' in ret.keys()):
                exitstatus = int(ret['exitstatus'])
            if (exitstatus == 1):
                if ('log' in ret.keys()):
                    log = ret['log']
                    logger.error(log)
                self.isRegistered = False
                self.repeatRegistration = False
                return ret
            self.responseId = int(ret['responseId'])
            logger.info('Registration Successful (response id = %s)', self.responseId)
            self.isRegistered = True
            if ('statusCommands' in ret.keys()):
                logger.debug('Got status commands on registration.')
                self.addToStatusQueue(ret['statusCommands'])
            else:
                self.hasMappedComponents = False
            self.cluster_configuration.update_configurations_from_heartbeat(ret)
            self.recovery_manager.update_configuration_from_registration(ret)
            self.config.update_configuration_from_registration(ret)
            logger.debug(('Updated config:' + str(self.config)))
            self.alert_scheduler_handler.update_definitions(ret)
        except ssl.SSLError:
            self.repeatRegistration = False
            self.isRegistered = False
            return
        except Exception as ex:
            delay = randint(0, self.range)
            logger.error(('Unable to connect to: ' + self.registerUrl), exc_info=True)
            logger.error(('Error:' + str(ex)))
            logger.warn(' Sleeping for {0} seconds and then trying again '.format(delay))
            time.sleep(delay)
    return ret
