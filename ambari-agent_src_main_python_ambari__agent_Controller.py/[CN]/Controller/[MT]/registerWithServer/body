def registerWithServer(self):
    LiveStatus.SERVICES = []
    LiveStatus.CLIENT_COMPONENTS = []
    LiveStatus.COMPONENTS = []
    id = (-1)
    ret = {}
    while (not self.isRegistered):
        try:
            data = json.dumps(self.register.build(id))
            prettyData = pprint.pformat(data)
            try:
                server_ip = socket.gethostbyname(self.hostname)
                logger.info('Registering with %s (%s) (agent=%s)', self.hostname, server_ip, prettyData)
            except socket.error:
                logger.warn("Unable to determine the IP address of '%s', agent registration may fail (agent=%s)", self.hostname, prettyData)
            ret = self.sendRequest(self.registerUrl, data)
            exitstatus = 0
            if ('exitstatus' in ret.keys()):
                exitstatus = int(ret['exitstatus'])
            if (exitstatus == 1):
                if ('log' in ret.keys()):
                    log = ret['log']
                logger.error(log)
                self.isRegistered = False
                self.repeatRegistration = False
                return ret
            logger.info('Registration Successful (response=%s)', pprint.pformat(ret))
            self.responseId = int(ret['responseId'])
            self.isRegistered = True
            if ('statusCommands' in ret.keys()):
                logger.info(('Got status commands on registration ' + pprint.pformat(ret['statusCommands'])))
                self.addToStatusQueue(ret['statusCommands'])
                pass
            else:
                self.hasMappedComponents = False
            if ('alertDefinitionCommands' in ret.keys()):
                logger.info(('Got alert definition update on registration ' + pprint.pformat(ret['alertDefinitionCommands'])))
                self.alert_scheduler_handler.update_definitions(ret['alertDefinitionCommands'])
                pass
            pass
        except ssl.SSLError:
            self.repeatRegistration = False
            self.isRegistered = False
            return
        except Exception:
            delay = randint(0, self.range)
            logger.error(('Unable to connect to: ' + self.registerUrl), exc_info=True)
            ' Sleeping for {0} seconds and then retrying again '.format(delay)
            time.sleep(delay)
            pass
        pass
    return ret
