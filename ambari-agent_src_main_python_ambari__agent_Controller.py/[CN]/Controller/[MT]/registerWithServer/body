def registerWithServer(self):
    retry = False
    firstTime = True
    registered = False
    id = (-1)
    ret = {}
    while (not registered):
        try:
            data = json.dumps(self.register.build(id))
            logger.info(('Registering with the server ' + pprint.pformat(data)))
            response = self.sendRequest(self.registerUrl, data)
            ret = json.loads(response)
            errors = None
            if ('errors' in ret.keys()):
                errors = ret['errors']
            print str(errors)
            if (not ((errors == None) or (errors == ''))):
                logger.error(ret['errors'])
                return ret
            logger.info(('Registered with the server with ' + pprint.pformat(ret)))
            print 'Registered with the server'
            self.responseId = int(ret['responseId'])
            registered = True
            if ('statusCommands' in ret.keys()):
                logger.info(('Got status commands on registration ' + pprint.pformat(ret['statusCommands'])))
                self.addToQueue(ret['statusCommands'])
                pass
            else:
                self.hasMappedComponents = False
            pass
        except ssl.SSLError:
            self.repeatRegistration = False
            return
        except Exception as err:
            delay = randint(0, self.range)
            logger.info(('Unable to connect to: ' + self.registerUrl), exc_info=True)
            ' Sleeping for {0} seconds and then retrying again '.format(delay)
            time.sleep(delay)
            pass
        pass
    return ret
