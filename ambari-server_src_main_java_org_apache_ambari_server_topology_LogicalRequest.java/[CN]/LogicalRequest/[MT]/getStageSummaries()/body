{
  Map<Long,HostRoleCommandStatusSummaryDTO> summaryMap=new HashMap<Long,HostRoleCommandStatusSummaryDTO>();
  for (  StageEntity stage : getStageEntities()) {
    int aborted=0;
    int completed=0;
    int failed=0;
    int holding=0;
    int holdingFailed=0;
    int holdingTimedout=0;
    int inProgress=0;
    int pending=0;
    int queued=0;
    int timedout=0;
    int skippedFailed=0;
    for (    HostRoleCommandEntity task : stage.getHostRoleCommands()) {
      HostRoleStatus taskStatus=task.getStatus();
switch (taskStatus) {
case ABORTED:
        aborted+=1;
      break;
case COMPLETED:
    completed+=1;
  break;
case FAILED:
failed+=1;
break;
case HOLDING:
holding+=1;
break;
case HOLDING_FAILED:
holdingFailed+=1;
break;
case HOLDING_TIMEDOUT:
holdingTimedout+=1;
break;
case IN_PROGRESS:
inProgress+=1;
break;
case PENDING:
pending+=1;
break;
case QUEUED:
queued+=1;
break;
case TIMEDOUT:
timedout+=1;
break;
case SKIPPED_FAILED:
skippedFailed+=1;
break;
default :
System.out.println("Unexpected status when creating stage summaries: " + taskStatus);
}
}
HostRoleCommandStatusSummaryDTO stageSummary=new HostRoleCommandStatusSummaryDTO(stage.isSkippable() ? 1 : 0,0,0,stage.getStageId(),aborted,completed,failed,holding,holdingFailed,holdingTimedout,inProgress,pending,queued,timedout,skippedFailed);
summaryMap.put(stage.getStageId(),stageSummary);
}
return summaryMap;
}
