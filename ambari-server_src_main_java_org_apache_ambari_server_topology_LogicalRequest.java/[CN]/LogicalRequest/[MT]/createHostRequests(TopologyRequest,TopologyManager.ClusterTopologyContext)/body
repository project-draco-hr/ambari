{
  long stageIdCounter=0;
  Map<String,HostGroupInfo> hostGroupInfoMap=requestRequest.getHostGroupInfo();
  for (  HostGroupInfo hostGroupInfo : hostGroupInfoMap.values()) {
    String groupName=hostGroupInfo.getHostGroupName();
    Blueprint blueprint=topology.getBlueprint();
    int hostCardinality;
    List<String> hostnames;
    hostCardinality=hostGroupInfo.getRequestedHostCount();
    hostnames=new ArrayList<String>(hostGroupInfo.getHostNames());
    for (int i=0; i < hostCardinality; ++i) {
      if (!hostnames.isEmpty()) {
        String hostname=hostnames.get(i);
        HostRequest hostRequest=new HostRequest(getRequestId(),stageIdCounter++,getClusterName(),blueprint.getName(),blueprint.getHostGroup(groupName),hostname,hostGroupInfo.getPredicate(),topologyContext);
synchronized (requestsWithReservedHosts) {
          requestsWithReservedHosts.put(hostname,hostRequest);
        }
      }
 else {
        HostRequest hostRequest=new HostRequest(getRequestId(),stageIdCounter++,getClusterName(),blueprint.getName(),blueprint.getHostGroup(groupName),hostCardinality,hostGroupInfo.getPredicate(),topologyContext);
        outstandingHostRequests.add(hostRequest);
      }
    }
  }
  allHostRequests.addAll(outstandingHostRequests);
  allHostRequests.addAll(requestsWithReservedHosts.values());
}
