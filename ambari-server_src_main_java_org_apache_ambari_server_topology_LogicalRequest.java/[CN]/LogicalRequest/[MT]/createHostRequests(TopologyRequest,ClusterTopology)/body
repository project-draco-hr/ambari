{
  Map<String,HostGroupInfo> hostGroupInfoMap=request.getHostGroupInfo();
  Blueprint blueprint=topology.getBlueprint();
  for (  HostGroupInfo hostGroupInfo : hostGroupInfoMap.values()) {
    String groupName=hostGroupInfo.getHostGroupName();
    int hostCardinality=hostGroupInfo.getRequestedHostCount();
    List<String> hostnames=new ArrayList<String>(hostGroupInfo.getHostNames());
    for (int i=0; i < hostCardinality; ++i) {
      if (!hostnames.isEmpty()) {
        String hostname=hostnames.get(i);
        HostRequest hostRequest=new HostRequest(getRequestId(),hostIdCounter.getAndIncrement(),getClusterName(),hostname,blueprint.getName(),blueprint.getHostGroup(groupName),null,topology);
synchronized (requestsWithReservedHosts) {
          requestsWithReservedHosts.put(hostname,hostRequest);
        }
      }
 else {
        HostRequest hostRequest=new HostRequest(getRequestId(),hostIdCounter.getAndIncrement(),getClusterName(),null,blueprint.getName(),blueprint.getHostGroup(groupName),hostGroupInfo.getPredicate(),topology);
        outstandingHostRequests.add(hostRequest);
      }
    }
  }
  allHostRequests.addAll(outstandingHostRequests);
  allHostRequests.addAll(requestsWithReservedHosts.values());
}
