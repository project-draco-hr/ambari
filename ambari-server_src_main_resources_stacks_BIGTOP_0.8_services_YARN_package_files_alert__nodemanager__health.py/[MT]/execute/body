def execute(configurations={}, parameters={}, host_name=None):
    '\n  Returns a tuple containing the result code and a pre-formatted result label\n\n  Keyword arguments:\n  configurations (dictionary): a mapping of configuration key to value\n  parameters (dictionary): a mapping of script parameter key to value\n  host_name (string): the name of this host where the alert is running\n  '
    result_code = RESULT_CODE_UNKNOWN
    if (configurations is None):
        return (result_code, ['There were no configurations supplied to the script.'])
    scheme = 'http'
    http_uri = None
    https_uri = None
    http_policy = 'HTTP_ONLY'
    if (NODEMANAGER_HTTP_ADDRESS_KEY in configurations):
        http_uri = configurations[NODEMANAGER_HTTP_ADDRESS_KEY]
    if (NODEMANAGER_HTTPS_ADDRESS_KEY in configurations):
        https_uri = configurations[NODEMANAGER_HTTPS_ADDRESS_KEY]
    if (YARN_HTTP_POLICY_KEY in configurations):
        http_policy = configurations[YARN_HTTP_POLICY_KEY]
    connection_timeout = CONNECTION_TIMEOUT_DEFAULT
    if (CONNECTION_TIMEOUT_KEY in parameters):
        connection_timeout = float(parameters[CONNECTION_TIMEOUT_KEY])
    uri = http_uri
    if (http_policy == 'HTTPS_ONLY'):
        scheme = 'https'
        if (https_uri is not None):
            uri = https_uri
    label = ''
    url_response = None
    node_healthy = 'false'
    total_time = 0
    if (uri is None):
        if (host_name is None):
            host_name = socket.getfqdn()
        uri = '{0}:{1}'.format(host_name, NODEMANAGER_DEFAULT_PORT)
    if OSCheck.is_windows_family():
        (uri_host, uri_port) = uri.split(':')
        uri_host = resolve_address(uri_host)
        uri = '{0}:{1}'.format(uri_host, uri_port)
    query = '{0}://{1}/ws/v1/node/info'.format(scheme, uri)
    try:
        url_response = urllib2.urlopen(query, timeout=connection_timeout)
    except urllib2.HTTPError as httpError:
        label = CRITICAL_HTTP_STATUS_MESSAGE.format(str(httpError.code), query, str(httpError))
        return (RESULT_CODE_CRITICAL, [label])
    except Exception as exception:
        label = CRITICAL_CONNECTION_MESSAGE.format(query, str(exception))
        return (RESULT_CODE_CRITICAL, [label])
    try:
        try:
            json_response = json.loads(url_response.read())
            node_healthy = json_response['nodeInfo']['nodeHealthy']
            node_healthy_report = json_response['nodeInfo']['healthReport']
            node_healthy = str(node_healthy)
        except:
            return (RESULT_CODE_CRITICAL, [query])
    finally:
        if (url_response is not None):
            try:
                url_response.close()
            except:
                pass
    if (node_healthy.lower() == 'true'):
        result_code = RESULT_CODE_OK
        label = OK_MESSAGE
    elif (node_healthy.lower() == 'false'):
        result_code = RESULT_CODE_CRITICAL
        label = node_healthy_report
    else:
        result_code = RESULT_CODE_CRITICAL
        label = CRITICAL_NODEMANAGER_STATUS_MESSAGE.format(node_healthy)
    return (result_code, [label])
