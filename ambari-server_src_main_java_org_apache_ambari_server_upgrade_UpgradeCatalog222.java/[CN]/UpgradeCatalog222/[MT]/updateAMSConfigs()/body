{
  AmbariManagementController ambariManagementController=injector.getInstance(AmbariManagementController.class);
  Clusters clusters=ambariManagementController.getClusters();
  if (clusters != null) {
    Map<String,Cluster> clusterMap=clusters.getClusters();
    if (clusterMap != null && !clusterMap.isEmpty()) {
      for (      final Cluster cluster : clusterMap.values()) {
        Config amsSite=cluster.getDesiredConfigByType(AMS_SITE);
        if (amsSite != null) {
          Map<String,String> amsSiteProperties=amsSite.getProperties();
          Map<String,String> newProperties=new HashMap<>();
          if (amsSiteProperties.containsKey(AMS_WEBAPP_ADDRESS_PROPERTY)) {
            Set<String> collectorHostNames=cluster.getHosts(AMS_SERVICE_NAME,AMS_COLLECTOR_COMPONENT_NAME);
            for (            String collector : collectorHostNames) {
              String currentValue=amsSiteProperties.get(AMS_WEBAPP_ADDRESS_PROPERTY);
              if (currentValue.startsWith("0.0.0.0")) {
                newProperties.put(AMS_WEBAPP_ADDRESS_PROPERTY,currentValue.replace("0.0.0.0",collector));
              }
 else               if (currentValue.startsWith("localhost")) {
                newProperties.put(AMS_WEBAPP_ADDRESS_PROPERTY,currentValue.replace("localhost",collector));
              }
            }
          }
          if (amsSiteProperties.containsKey(HOST_AGGREGATOR_DAILY_CHECKPOINTCUTOFFMULTIPIER_PROPERTY) && amsSiteProperties.get(HOST_AGGREGATOR_DAILY_CHECKPOINTCUTOFFMULTIPIER_PROPERTY).equals("1")) {
            LOG.info("Setting value of " + HOST_AGGREGATOR_DAILY_CHECKPOINTCUTOFFMULTIPIER_PROPERTY + " : 2");
            newProperties.put(HOST_AGGREGATOR_DAILY_CHECKPOINTCUTOFFMULTIPIER_PROPERTY,String.valueOf(2));
          }
          if (amsSiteProperties.containsKey(CLUSTER_AGGREGATOR_DAILY_CHECKPOINTCUTOFFMULTIPIER_PROPERTY) && amsSiteProperties.get(CLUSTER_AGGREGATOR_DAILY_CHECKPOINTCUTOFFMULTIPIER_PROPERTY).equals("1")) {
            LOG.info("Setting value of " + CLUSTER_AGGREGATOR_DAILY_CHECKPOINTCUTOFFMULTIPIER_PROPERTY + " : 2");
            newProperties.put(CLUSTER_AGGREGATOR_DAILY_CHECKPOINTCUTOFFMULTIPIER_PROPERTY,String.valueOf(2));
          }
          if (!amsSiteProperties.containsKey(TIMELINE_METRICS_SERVICE_WATCHER_DISBALED_PROPERTY)) {
            LOG.info("Add config  " + TIMELINE_METRICS_SERVICE_WATCHER_DISBALED_PROPERTY + " = false");
            newProperties.put(TIMELINE_METRICS_SERVICE_WATCHER_DISBALED_PROPERTY,String.valueOf(false));
          }
          boolean isDistributed=false;
          if ("distributed".equals(amsSite.getProperties().get(AMS_MODE_PROPERTY))) {
            isDistributed=true;
          }
          if (amsSiteProperties.containsKey(PRECISION_TABLE_TTL_PROPERTY)) {
            String oldTtl=amsSiteProperties.get(PRECISION_TABLE_TTL_PROPERTY);
            String newTtl=oldTtl;
            if (isDistributed) {
              if ("86400".equals(oldTtl)) {
                newTtl=String.valueOf(3 * 86400);
              }
            }
            newProperties.put(PRECISION_TABLE_TTL_PROPERTY,newTtl);
            LOG.info("Setting value of " + PRECISION_TABLE_TTL_PROPERTY + " : "+ newTtl);
          }
          if (amsSiteProperties.containsKey(CLUSTER_SECOND_TABLE_TTL_PROPERTY)) {
            String oldTtl=amsSiteProperties.get(CLUSTER_SECOND_TABLE_TTL_PROPERTY);
            String newTtl=oldTtl;
            if ("2592000".equals(oldTtl)) {
              newTtl=String.valueOf(7 * 86400);
            }
            newProperties.put(CLUSTER_SECOND_TABLE_TTL_PROPERTY,newTtl);
            LOG.info("Setting value of " + CLUSTER_SECOND_TABLE_TTL_PROPERTY + " : "+ newTtl);
          }
          if (amsSiteProperties.containsKey(CLUSTER_MINUTE_TABLE_TTL_PROPERTY)) {
            String oldTtl=amsSiteProperties.get(CLUSTER_MINUTE_TABLE_TTL_PROPERTY);
            String newTtl=oldTtl;
            if ("7776000".equals(oldTtl)) {
              newTtl=String.valueOf(30 * 86400);
            }
            newProperties.put(CLUSTER_MINUTE_TABLE_TTL_PROPERTY,newTtl);
            LOG.info("Setting value of " + CLUSTER_MINUTE_TABLE_TTL_PROPERTY + " : "+ newTtl);
          }
          if (!amsSiteProperties.containsKey(TIMELINE_METRICS_CLUSTER_AGGREGATOR_INTERPOLATION_ENABLED)) {
            LOG.info("Add config  " + TIMELINE_METRICS_CLUSTER_AGGREGATOR_INTERPOLATION_ENABLED + " = true");
            newProperties.put(TIMELINE_METRICS_CLUSTER_AGGREGATOR_INTERPOLATION_ENABLED,String.valueOf(true));
          }
          updateConfigurationPropertiesForCluster(cluster,AMS_SITE,newProperties,true,true);
        }
        Config amsHbaseSite=cluster.getDesiredConfigByType(AMS_HBASE_SITE);
        if (amsHbaseSite != null) {
          Map<String,String> amsHbaseSiteProperties=amsHbaseSite.getProperties();
          Map<String,String> newProperties=new HashMap<>();
          if (!amsHbaseSiteProperties.containsKey(HBASE_RPC_TIMEOUT_PROPERTY)) {
            newProperties.put(HBASE_RPC_TIMEOUT_PROPERTY,String.valueOf(300000));
          }
          if (!amsHbaseSiteProperties.containsKey(PHOENIX_QUERY_KEEPALIVE_PROPERTY)) {
            newProperties.put(PHOENIX_QUERY_KEEPALIVE_PROPERTY,String.valueOf(300000));
          }
          if (!amsHbaseSiteProperties.containsKey(HBASE_CLIENT_SCANNER_TIMEOUT_PERIOD_PROPERTY) || amsHbaseSiteProperties.get(HBASE_CLIENT_SCANNER_TIMEOUT_PERIOD_PROPERTY).equals("900000")) {
            amsHbaseSiteProperties.put(HBASE_CLIENT_SCANNER_TIMEOUT_PERIOD_PROPERTY,String.valueOf(300000));
          }
          if (!amsHbaseSiteProperties.containsKey(PHOENIX_QUERY_TIMEOUT_PROPERTY) || amsHbaseSiteProperties.get(PHOENIX_QUERY_TIMEOUT_PROPERTY).equals("1200000")) {
            amsHbaseSiteProperties.put(PHOENIX_QUERY_TIMEOUT_PROPERTY,String.valueOf(300000));
          }
          updateConfigurationPropertiesForCluster(cluster,AMS_HBASE_SITE,newProperties,true,true);
        }
      }
    }
  }
}
