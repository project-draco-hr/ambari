{
  InternalAuthenticationToken authenticationToken=new InternalAuthenticationToken("admin");
  authenticationToken.setAuthenticated(true);
  SecurityContextHolder.getContext().setAuthentication(authenticationToken);
  Clusters clusters=amc.getClusters();
  for (  Map.Entry<String,Cluster> kv : clusters.getClusters().entrySet()) {
    String clusterName=kv.getKey();
    Resource.Type type=Resource.Type.ServiceConfigVersion;
    Set<String> propertyIds=new HashSet<String>();
    propertyIds.add(ServiceConfigVersionResourceProvider.SERVICE_CONFIG_VERSION_CONFIGURATIONS_PROPERTY_ID);
    Predicate predicate=new PredicateBuilder().property(ServiceConfigVersionResourceProvider.SERVICE_CONFIG_VERSION_CLUSTER_NAME_PROPERTY_ID).equals(clusterName).and().property(ServiceConfigVersionResourceProvider.SERVICE_CONFIG_VERSION_SERVICE_NAME_PROPERTY_ID).equals("AMBARI_METRICS").and().property(ServiceConfigVersionResourceProvider.SERVICE_CONFIG_VERSION_IS_CURRENT_PROPERTY_ID).equals("true").toPredicate();
    Request request=PropertyHelper.getReadRequest(propertyIds);
    ResourceProvider provider=AbstractControllerResourceProvider.getResourceProvider(type,PropertyHelper.getPropertyIds(type),PropertyHelper.getKeyPropertyIds(type),amc);
    try {
      Set<Resource> resources=provider.getResources(request,predicate);
      for (      Resource resource : resources) {
        if (resource != null) {
          ArrayList<LinkedHashMap<Object,Object>> configs=(ArrayList<LinkedHashMap<Object,Object>>)resource.getPropertyValue(ServiceConfigVersionResourceProvider.SERVICE_CONFIG_VERSION_CONFIGURATIONS_PROPERTY_ID);
          for (          LinkedHashMap<Object,Object> config : configs) {
            if (config != null && config.get("type").equals("ams-site")) {
              TreeMap<Object,Object> properties=(TreeMap<Object,Object>)config.get("properties");
              collectorUri=(String)properties.get("timeline.metrics.service.webapp.address");
              String which_protocol=(String)properties.get("timeline.metrics.service.http.policy");
              collectorProtocol=which_protocol.equals("HTTP_ONLY") ? "http" : "https";
              break;
            }
          }
        }
      }
    }
 catch (    Exception e) {
      LOG.info("Throwing exception when retrieving Collector URI",e);
    }
  }
}
