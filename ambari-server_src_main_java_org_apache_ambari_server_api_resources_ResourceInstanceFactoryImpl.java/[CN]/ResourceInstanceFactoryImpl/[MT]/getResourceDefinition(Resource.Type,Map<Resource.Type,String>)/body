{
  ResourceDefinition resourceDefinition;
  if (resourceDefinitions.containsKey(type)) {
    return resourceDefinitions.get(type);
  }
switch (type.getInternalType()) {
case Cluster:
    resourceDefinition=new ClusterResourceDefinition();
  break;
case Service:
resourceDefinition=new ServiceResourceDefinition();
break;
case Host:
resourceDefinition=mapIds.containsKey(Resource.Type.Cluster) ? new HostResourceDefinition() : new DetachedHostResourceDefinition();
break;
case Component:
resourceDefinition=new ComponentResourceDefinition();
break;
case HostComponent:
resourceDefinition=new HostComponentResourceDefinition();
break;
case Action:
resourceDefinition=new ActionResourceDefinition();
break;
case Configuration:
resourceDefinition=new ConfigurationResourceDefinition();
break;
case ServiceConfigVersion:
resourceDefinition=new ServiceConfigVersionResourceDefinition();
break;
case Task:
resourceDefinition=new TaskResourceDefinition();
break;
case User:
resourceDefinition=new UserResourceDefinition();
break;
case Group:
resourceDefinition=new GroupResourceDefinition();
break;
case Member:
resourceDefinition=new MemberResourceDefinition();
break;
case Request:
resourceDefinition=new RequestResourceDefinition();
break;
case Stack:
resourceDefinition=new StackResourceDefinition();
break;
case StackVersion:
resourceDefinition=new StackVersionResourceDefinition();
break;
case StackLevelConfiguration:
resourceDefinition=new StackLevelConfigurationResourceDefinition();
break;
case StackService:
resourceDefinition=new StackServiceResourceDefinition();
break;
case StackServiceComponent:
resourceDefinition=new StackServiceComponentResourceDefinition();
break;
case StackServiceComponentDependency:
resourceDefinition=new StackDependencyResourceDefinition();
break;
case StackConfiguration:
resourceDefinition=new StackConfigurationResourceDefinition();
break;
case OperatingSystem:
resourceDefinition=new OperatingSystemResourceDefinition();
break;
case Repository:
resourceDefinition=new RepositoryResourceDefinition();
break;
case DRFeed:
resourceDefinition=new FeedResourceDefinition();
break;
case DRTargetCluster:
resourceDefinition=new TargetClusterResourceDefinition();
break;
case DRInstance:
resourceDefinition=new InstanceResourceDefinition();
break;
case Workflow:
resourceDefinition=new WorkflowResourceDefinition();
break;
case Job:
resourceDefinition=new JobResourceDefinition();
break;
case TaskAttempt:
resourceDefinition=new TaskAttemptResourceDefinition();
break;
case RootService:
resourceDefinition=new RootServiceResourceDefinition();
break;
case RootServiceComponent:
resourceDefinition=new RootServiceComponentResourceDefinition();
break;
case RootServiceHostComponent:
resourceDefinition=new RootServiceHostComponentResourceDefinition();
break;
case ConfigGroup:
resourceDefinition=new ConfigGroupResourceDefinition();
break;
case RequestSchedule:
resourceDefinition=new RequestScheduleResourceDefinition();
break;
case View:
resourceDefinition=new ViewResourceDefinition();
break;
case ViewVersion:
resourceDefinition=new ViewVersionResourceDefinition();
break;
case ViewInstance:
Set<SubResourceDefinition> subResourceDefinitions=ViewRegistry.getInstance().getSubResourceDefinitions(mapIds.get(Resource.Type.View),mapIds.get(Resource.Type.ViewVersion));
resourceDefinition=new ViewInstanceResourceDefinition(subResourceDefinitions);
break;
case Blueprint:
resourceDefinition=new BlueprintResourceDefinition();
break;
case Recommendation:
resourceDefinition=new RecommendationResourceDefinition();
break;
case Validation:
resourceDefinition=new ValidationResourceDefinition();
break;
case HostComponentProcess:
resourceDefinition=new HostComponentProcessResourceDefinition();
break;
case Permission:
resourceDefinition=new PermissionResourceDefinition();
break;
case Alert:
resourceDefinition=new AlertResourceDefinition();
break;
case AlertDefinition:
resourceDefinition=new AlertDefResourceDefinition();
break;
case AlertGroup:
resourceDefinition=new AlertGroupResourceDefinition();
break;
case AlertTarget:
resourceDefinition=new AlertTargetResourceDefinition();
break;
case AmbariPrivilege:
resourceDefinition=new PrivilegeResourceDefinition(Resource.Type.AmbariPrivilege);
break;
case ClusterPrivilege:
resourceDefinition=new PrivilegeResourceDefinition(Resource.Type.ClusterPrivilege);
break;
case ViewPrivilege:
resourceDefinition=new PrivilegeResourceDefinition(Resource.Type.ViewPrivilege);
break;
case ViewPermission:
resourceDefinition=new ViewPermissionResourceDefinition();
break;
case ClientConfig:
resourceDefinition=new ClientConfigResourceDefinition();
break;
case LdapSyncEvent:
resourceDefinition=new LdapSyncEventResourceDefinition();
break;
default :
throw new IllegalArgumentException("Unsupported resource type: " + type);
}
return resourceDefinition;
}
