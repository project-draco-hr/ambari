def check_is_active_namenode(hdfs_binary):
    '\n  Checks if current NameNode is active. Waits up to 30 seconds. If other NameNode is active returns False.\n  :return: True if current NameNode is active, False otherwise\n  '
    import params
    if params.dfs_ha_enabled:
        is_active_this_namenode_cmd = as_user(format('{hdfs_binary} --config {hadoop_conf_dir} haadmin -ns {dfs_ha_nameservices} -getServiceState {namenode_id} | grep active'), params.hdfs_user, env={'PATH': params.hadoop_bin_dir, })
        is_active_other_namenode_cmd = as_user(format('{hdfs_binary} --config {hadoop_conf_dir} haadmin -ns {dfs_ha_nameservices} -getServiceState {other_namenode_id} | grep active'), params.hdfs_user, env={'PATH': params.hadoop_bin_dir, })
        for i in range(0, 5):
            (code, out) = shell.call(is_active_this_namenode_cmd)
            if (code == 0):
                return True
            (code, out) = shell.call(is_active_other_namenode_cmd)
            if (code == 0):
                return False
            if (i < 4):
                time.sleep(6)
        Logger.info('Active NameNode is not found.')
        return False
    else:
        return True
