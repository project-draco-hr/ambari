@OsFamilyFuncImpl(os_family=OsFamilyImpl.DEFAULT)
def namenode(action=None, hdfs_binary=None, do_format=True, upgrade_type=None, upgrade_suspended=False, env=None):
    if (action is None):
        raise Fail('"action" parameter is required for function namenode().')
    if ((action in ['start', 'stop']) and (hdfs_binary is None)):
        raise Fail('"hdfs_binary" parameter is required for function namenode().')
    if (action == 'configure'):
        import params
        create_name_dirs(params.dfs_name_dir)
    elif (action == 'start'):
        Logger.info('Called service {0} with upgrade_type: {1}'.format(action, str(upgrade_type)))
        setup_ranger_hdfs(upgrade_type=upgrade_type)
        import params
        if (do_format and (not params.hdfs_namenode_format_disabled)):
            format_namenode()
            pass
        File(params.exclude_file_path, content=Template('exclude_hosts_list.j2'), owner=params.hdfs_user, group=params.user_group)
        if (params.dfs_ha_enabled and (params.dfs_ha_namenode_standby is not None) and (params.hostname == params.dfs_ha_namenode_standby)):
            success = bootstrap_standby_namenode(params)
            if (not success):
                raise Fail('Could not bootstrap standby namenode')
        if ((upgrade_type == 'rolling') and params.dfs_ha_enabled):
            safe_zkfc_op(action, env)
        options = ''
        if (upgrade_type == 'rolling'):
            if (params.upgrade_direction == Direction.UPGRADE):
                options = '-rollingUpgrade started'
            elif (params.upgrade_direction == Direction.DOWNGRADE):
                options = '-rollingUpgrade downgrade'
        elif (upgrade_type == 'nonrolling'):
            is_previous_image_dir = is_previous_fs_image()
            Logger.info('Previous file system image dir present is {0}'.format(str(is_previous_image_dir)))
            if (params.upgrade_direction == Direction.UPGRADE):
                options = '-rollingUpgrade started'
            elif (params.upgrade_direction == Direction.DOWNGRADE):
                options = '-rollingUpgrade downgrade'
        elif ((upgrade_type is None) and (upgrade_suspended is True)):
            if os.path.exists(namenode_upgrade.get_upgrade_in_progress_marker()):
                options = '-rollingUpgrade started'
            else:
                Logger.info('The NameNode upgrade marker file {0} does not exist, yet an upgrade is currently suspended. Assuming that the upgrade of NameNode has not occurred yet.'.format(namenode_upgrade.get_upgrade_in_progress_marker()))
        Logger.info('Options for start command are: {0}'.format(options))
        service(action='start', name='namenode', user=params.hdfs_user, options=options, create_pid_dir=True, create_log_dir=True)
        if params.security_enabled:
            Execute(format('{kinit_path_local} -kt {hdfs_user_keytab} {hdfs_principal_name}'), user=params.hdfs_user)
        ensure_safemode_off = True
        is_active_namenode = True
        if params.dfs_ha_enabled:
            Logger.info('Waiting for the NameNode to broadcast whether it is Active or Standby...')
            if (is_this_namenode_active() is False):
                is_active_namenode = False
                if (upgrade_type is None):
                    ensure_safemode_off = False
        if (upgrade_type == 'nonrolling'):
            ensure_safemode_off = False
        if ensure_safemode_off:
            Logger.info('Waiting for this NameNode to leave Safemode due to the following conditions: HA: {0}, isActive: {1}, upgradeType: {2}'.format(params.dfs_ha_enabled, is_active_namenode, upgrade_type))
        else:
            Logger.info('Skipping Safemode check due to the following conditions: HA: {0}, isActive: {1}, upgradeType: {2}'.format(params.dfs_ha_enabled, is_active_namenode, upgrade_type))
        if ensure_safemode_off:
            wait_for_safemode_off(hdfs_binary)
        if (is_active_namenode and ensure_safemode_off):
            create_hdfs_directories()
            create_ranger_audit_hdfs_directories()
        else:
            Logger.info('Skipping creation of HDFS directories since this is either not the Active NameNode or we did not wait for Safemode to finish.')
    elif (action == 'stop'):
        import params
        service(action='stop', name='namenode', user=params.hdfs_user)
    elif (action == 'status'):
        import status_params
        check_process_status(status_params.namenode_pid_file)
    elif (action == 'decommission'):
        decommission()
