def namenode(action=None, do_format=True, rolling_restart=False, env=None):
    import params
    if (action == 'configure'):
        create_name_dirs(params.dfs_name_dir)
    if (action == 'start'):
        if do_format:
            format_namenode()
            pass
        File(params.exclude_file_path, content=Template('exclude_hosts_list.j2'), owner=params.hdfs_user, group=params.user_group)
        Directory(params.hadoop_pid_dir_prefix, mode=493, owner=params.hdfs_user, group=params.user_group)
        if (params.dfs_ha_enabled and (params.dfs_ha_namenode_standby is not None) and (params.hostname == params.dfs_ha_namenode_standby)):
            success = bootstrap_standby_namenode(params)
            if (not success):
                raise Fail('Could not bootstrap standby namenode')
        options = ('-rollingUpgrade started' if rolling_restart else '')
        if rolling_restart:
            safe_zkfc_op(action, env)
        service(action='start', name='namenode', user=params.hdfs_user, options=options, create_pid_dir=True, create_log_dir=True)
        if params.security_enabled:
            Execute(format('{kinit_path_local} -kt {hdfs_user_keytab} {hdfs_principal_name}'), user=params.hdfs_user)
        if params.dfs_ha_enabled:
            dfs_check_nn_status_cmd = as_user(format('hdfs --config {hadoop_conf_dir} haadmin -getServiceState {namenode_id} | grep active'), params.hdfs_user, env={'PATH': params.hadoop_bin_dir, })
        else:
            dfs_check_nn_status_cmd = None
        namenode_safe_mode_off = format("hadoop dfsadmin -fs {namenode_address} -safemode get | grep 'Safe mode is OFF'")
        leave_safe_mode = True
        if (dfs_check_nn_status_cmd is not None):
            (code, out) = shell.call(dfs_check_nn_status_cmd)
            if (code != 0):
                leave_safe_mode = False
        if leave_safe_mode:
            (code, out) = shell.call(namenode_safe_mode_off)
            if (code != 0):
                leave_safe_mode_cmd = format('hdfs --config {hadoop_conf_dir} dfsadmin -fs {namenode_address} -safemode leave')
                Execute(leave_safe_mode_cmd, user=params.hdfs_user, path=[params.hadoop_bin_dir])
        Execute(namenode_safe_mode_off, tries=40, try_sleep=10, path=[params.hadoop_bin_dir], user=params.hdfs_user, only_if=dfs_check_nn_status_cmd)
        create_hdfs_directories(dfs_check_nn_status_cmd)
    if (action == 'stop'):
        service(action='stop', name='namenode', user=params.hdfs_user)
    if (action == 'decommission'):
        decommission()
