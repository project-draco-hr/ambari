{
  final Clusters clusters=mock(Clusters.class);
  versionMismatchCheck=new ServiceComponentHostVersionMatchCheck();
  versionMismatchCheck.clustersProvider=new Provider<Clusters>(){
    @Override public Clusters get(){
      return clusters;
    }
  }
;
  cluster=mock(Cluster.class,RETURNS_DEEP_STUBS);
  when(clusters.getCluster(CLUSTER_NAME)).thenReturn(cluster);
  Service firstService=mock(Service.class);
  Map<String,Service> services=ImmutableMap.of(FIRST_SERVICE_NAME,firstService);
  when(cluster.getServices()).thenReturn(services);
  ServiceComponent firstServiceComponent=mock(ServiceComponent.class);
  Map<String,ServiceComponent> components=ImmutableMap.of(FIRST_SERVICE_COMPONENT_NAME,firstServiceComponent);
  when(firstServiceComponent.isVersionAdvertised()).thenReturn(true);
  when(firstService.getServiceComponents()).thenReturn(components);
  firstServiceComponentHost=mock(ServiceComponentHost.class);
  secondServiceComponentHost=mock(ServiceComponentHost.class);
  Map<String,ServiceComponentHost> firstServiceComponentHosts=ImmutableMap.of(FIRST_SERVICE_COMPONENT_HOST_NAME,firstServiceComponentHost,SECOND_SERVICE_COMPONENT_HOST_NAME,secondServiceComponentHost);
  when(firstServiceComponent.getServiceComponentHosts()).thenReturn(firstServiceComponentHosts);
}
