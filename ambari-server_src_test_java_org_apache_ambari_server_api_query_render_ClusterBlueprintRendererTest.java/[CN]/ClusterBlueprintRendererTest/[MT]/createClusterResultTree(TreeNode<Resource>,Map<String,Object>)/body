{
  Resource clusterResource=new ResourceImpl(Resource.Type.Cluster){
    @Override public Map<String,Map<String,Object>> getPropertiesMap(){
      Map<String,Map<String,Object>> originalMap=super.getPropertiesMap();
      if (desiredConfig == null) {
        originalMap.put("Clusters/desired_configs",Collections.<String,Object>emptyMap());
      }
 else {
        originalMap.put("Clusters/desired_configs",desiredConfig);
      }
      return originalMap;
    }
  }
;
  clusterResource.setProperty("Clusters/cluster_name","testCluster");
  clusterResource.setProperty("Clusters/version","HDP-1.3.3");
  TreeNode<Resource> clusterTree=resultTree.addChild(clusterResource,"Cluster:1");
  Resource servicesResource=new ResourceImpl(Resource.Type.Service);
  clusterTree.addChild(servicesResource,"services");
  Resource configurationsResource=new ResourceImpl(Resource.Type.Configuration);
  TreeNode<Resource> configurations=clusterTree.addChild(configurationsResource,"configurations");
  Resource resourceOne=new ResourceImpl(Resource.Type.Configuration){
    @Override public Map<String,Map<String,Object>> getPropertiesMap(){
      Map<String,Map<String,Object>> originalMap=super.getPropertiesMap();
      originalMap.put("properties",null);
      return originalMap;
    }
  }
;
  resourceOne.setProperty("type","mapreduce-log4j");
  configurations.addChild(resourceOne,"resourceOne");
  Resource resourceTwo=new ResourceImpl(Resource.Type.Configuration){
    @Override public Map<String,Map<String,Object>> getPropertiesMap(){
      Map<String,Map<String,Object>> originalMap=super.getPropertiesMap();
      originalMap.put("properties",Collections.<String,Object>singletonMap("propertyOne","valueOne"));
      originalMap.put("properties_attributes",Collections.<String,Object>singletonMap("final",Collections.singletonMap("propertyOne","true")));
      return originalMap;
    }
  }
;
  resourceTwo.setProperty("type","test-type-one");
  resourceTwo.setProperty("tag","test-tag-one");
  configurations.addChild(resourceTwo,"resourceTwo");
  Resource blueprintOne=new ResourceImpl(Resource.Type.Blueprint);
  blueprintOne.setProperty("Blueprints/blueprint_name","blueprint-testCluster");
  clusterTree.addChild(blueprintOne,"Blueprints");
  TreeNode<Resource> hostsTree=clusterTree.addChild(null,"hosts");
  hostsTree.setProperty("isCollection","true");
  Resource hostResource=new ResourceImpl(Resource.Type.Host);
  hostResource.setProperty("Hosts/host_name",getLocalHostName());
  TreeNode<Resource> hostTree=hostsTree.addChild(hostResource,"Host:1");
  TreeNode<Resource> hostComponentsTree=hostTree.addChild(null,"host_components");
  hostComponentsTree.setProperty("isCollection","true");
  Resource nnComponentResource=new ResourceImpl(Resource.Type.HostComponent);
  nnComponentResource.setProperty("HostRoles/component_name","NAMENODE");
  Resource dnComponentResource=new ResourceImpl(Resource.Type.HostComponent);
  dnComponentResource.setProperty("HostRoles/component_name","DATANODE");
  Resource jtComponentResource=new ResourceImpl(Resource.Type.HostComponent);
  jtComponentResource.setProperty("HostRoles/component_name","JOBTRACKER");
  Resource ttComponentResource=new ResourceImpl(Resource.Type.HostComponent);
  ttComponentResource.setProperty("HostRoles/component_name","TASKTRACKER");
  hostComponentsTree.addChild(nnComponentResource,"HostComponent:1");
  hostComponentsTree.addChild(dnComponentResource,"HostComponent:2");
  hostComponentsTree.addChild(jtComponentResource,"HostComponent:3");
  hostComponentsTree.addChild(ttComponentResource,"HostComponent:4");
  Resource host2Resource=new ResourceImpl(Resource.Type.Host);
  host2Resource.setProperty("Hosts/host_name","testHost2");
  TreeNode<Resource> host2Tree=hostsTree.addChild(host2Resource,"Host:2");
  TreeNode<Resource> host2ComponentsTree=host2Tree.addChild(null,"host_components");
  host2ComponentsTree.setProperty("isCollection","true");
  host2ComponentsTree.addChild(dnComponentResource,"HostComponent:1");
  host2ComponentsTree.addChild(ttComponentResource,"HostComponent:2");
  Resource host3Resource=new ResourceImpl(Resource.Type.Host);
  host3Resource.setProperty("Hosts/host_name","testHost3");
  TreeNode<Resource> host3Tree=hostsTree.addChild(host3Resource,"Host:3");
  TreeNode<Resource> host3ComponentsTree=host3Tree.addChild(null,"host_components");
  host3ComponentsTree.setProperty("isCollection","true");
  host3ComponentsTree.addChild(dnComponentResource,"HostComponent:1");
  host3ComponentsTree.addChild(ttComponentResource,"HostComponent:2");
}
