{
  Map<String,String> clusterTypeProps=new HashMap<String,String>();
  clusterProps.put("test-type-one",clusterTypeProps);
  clusterTypeProps.put("propertyOne","valueOne");
  Map<String,Map<String,String>> clusterTypeAttributes=new HashMap<String,Map<String,String>>();
  clusterAttributes.put("test-type-one",clusterTypeAttributes);
  Map<String,String> clusterAttributeProps=new HashMap<String,String>();
  clusterAttributeProps.put("propertyOne","true");
  clusterTypeAttributes.put("final",clusterAttributeProps);
  Collection<String> group1Components=Arrays.asList("JOBTRACKER","TASKTRACKER","NAMENODE","DATANODE","AMBARI_SERVER");
  Collection<String> group2Components=Arrays.asList("TASKTRACKER","DATANODE");
  Map<String,Configuration> hostGroupConfigs=new HashMap<String,Configuration>();
  hostGroupConfigs.put("host_group_1",emptyConfiguration);
  hostGroupConfigs.put("host_group_2",emptyConfiguration);
  Map<String,HostGroup> hostGroups=new HashMap<String,HostGroup>();
  hostGroups.put("host_group_1",group1);
  hostGroups.put("host_group_2",group2);
  HostGroupInfo group1Info=new HostGroupInfo("host_group_1");
  group1Info.addHost("host1");
  group1Info.setConfiguration(emptyConfiguration);
  HostGroupInfo group2Info=new HostGroupInfo("host_group_2");
  Map<String,HostGroupInfo> groupInfoMap=new HashMap<String,HostGroupInfo>();
  group2Info.addHosts(Arrays.asList("host2","host3"));
  group2Info.setConfiguration(emptyConfiguration);
  groupInfoMap.put("host_group_1",group1Info);
  groupInfoMap.put("host_group_2",group2Info);
  expect(topology.isNameNodeHAEnabled()).andReturn(false).anyTimes();
  expect(topology.getConfiguration()).andReturn(clusterConfig).anyTimes();
  expect(topology.getBlueprint()).andReturn(blueprint).anyTimes();
  expect(topology.getHostGroupInfo()).andReturn(groupInfoMap).anyTimes();
  expect(blueprint.getStack()).andReturn(stack).anyTimes();
  expect(blueprint.getHostGroups()).andReturn(hostGroups).anyTimes();
  expect(blueprint.getHostGroup("host_group_1")).andReturn(group1).anyTimes();
  expect(blueprint.getHostGroup("host_group_2")).andReturn(group2).anyTimes();
  expect(stack.getName()).andReturn("HDP").anyTimes();
  expect(stack.getVersion()).andReturn("1.3.3").anyTimes();
  expect(group1.getName()).andReturn("host_group_1").anyTimes();
  expect(group2.getName()).andReturn("host_group_2").anyTimes();
  expect(group1.getComponents()).andReturn(group1Components).anyTimes();
  expect(group2.getComponents()).andReturn(group2Components).anyTimes();
  replay(topology,blueprint,stack,group1,group2);
}
