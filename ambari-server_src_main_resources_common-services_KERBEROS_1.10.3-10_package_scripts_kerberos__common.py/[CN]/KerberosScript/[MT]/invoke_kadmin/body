@staticmethod
def invoke_kadmin(query, admin_identity=None, default_realm=None):
    '\n    Executes the kadmin or kadmin.local command (depending on whether auth_identity is set or not\n    and returns command result code and standard out data.\n\n    :param query: the kadmin query to execute\n    :param admin_identity: the identity for the administrative user (optional)\n    :param default_realm: the default realm to assume\n    :return: return_code, out\n    '
    if ((query is not None) and (len(query) > 0)):
        auth_principal = None
        auth_keytab_file = None
        if (admin_identity is not None):
            auth_principal = get_property_value(admin_identity, 'principal')
        if (auth_principal is None):
            kadmin = 'kadmin.local'
            credential = ''
        else:
            kadmin = ('kadmin -p "%s"' % auth_principal)
            auth_password = get_property_value(admin_identity, 'password')
            if (auth_password is None):
                auth_keytab = get_property_value(admin_identity, 'keytab')
                if (auth_keytab is not None):
                    (fd, auth_keytab_file) = tempfile.mkstemp()
                    os.write(fd, base64.b64decode(auth_keytab))
                    os.close(fd)
                credential = ('-k -t %s' % auth_keytab_file)
            else:
                credential = ('-w "%s"' % auth_password)
        if ((default_realm is not None) and (len(default_realm) > 0)):
            realm = ('-r %s' % default_realm)
        else:
            realm = ''
        try:
            try:
                command = ('%s %s %s -q "%s"' % (kadmin, credential, realm, query.replace('"', '\\"')))
                return shell.checked_call(command)
            except:
                raise
        finally:
            if (auth_keytab_file is not None):
                os.remove(auth_keytab_file)
