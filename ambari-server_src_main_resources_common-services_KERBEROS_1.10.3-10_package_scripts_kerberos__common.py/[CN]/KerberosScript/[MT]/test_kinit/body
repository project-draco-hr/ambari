@staticmethod
def test_kinit(identity, user=None):
    principal = get_property_value(identity, 'principal')
    kinit_path_local = functions.get_kinit_path(default('/configurations/kerberos-env/executable_search_paths', None))
    kdestroy_path_local = functions.get_kdestroy_path(default('/configurations/kerberos-env/executable_search_paths', None))
    if (principal is not None):
        keytab_file = get_property_value(identity, 'keytab_file')
        keytab = get_property_value(identity, 'keytab')
        password = get_property_value(identity, 'password')
        if ((keytab_file is not None) and os.path.isfile(keytab_file)):
            command = ('%s -k -t %s %s' % (kinit_path_local, keytab_file, principal))
            Execute(command, user=user)
            return shell.checked_call(kdestroy_path_local)
        elif (keytab is not None):
            (fd, test_keytab_file) = tempfile.mkstemp()
            os.write(fd, base64.b64decode(keytab))
            os.close(fd)
            try:
                try:
                    command = ('%s -k -t %s %s' % (kinit_path_local, test_keytab_file, principal))
                    Execute(command, user=user)
                    return shell.checked_call(kdestroy_path_local)
                except:
                    raise
            finally:
                if (test_keytab_file is not None):
                    os.remove(test_keytab_file)
        elif (password is not None):
            process = subprocess.Popen([kinit_path_local, principal], stdin=subprocess.PIPE)
            (stdout, stderr) = process.communicate(password)
            if process.returncode:
                err_msg = Logger.filter_text(('Execution of kinit returned %d. %s' % (process.returncode, stderr)))
                raise Fail(err_msg)
            else:
                return shell.checked_call(kdestroy_path_local)
        else:
            return (0, '')
    else:
        return (0, '')
