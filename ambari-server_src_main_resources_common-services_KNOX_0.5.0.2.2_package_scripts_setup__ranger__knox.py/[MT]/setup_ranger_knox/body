def setup_ranger_knox(env):
    import params
    env.set_params(params)
    try:
        command = 'hdp-select status knox-server'
        (return_code, hdp_output) = shell.call(command, timeout=20)
    except Exception as e:
        Logger.error(str(e))
        raise Fail('Unable to execute hdp-select command to retrieve the version.')
    if (return_code != 0):
        raise Fail('Unable to determine the current version because of a non-zero return code of {0}'.format(str(return_code)))
    hdp_version = re.sub('knox-server - ', '', hdp_output)
    match = re.match('[0-9]+.[0-9]+.[0-9]+.[0-9]+-[0-9]+', hdp_version)
    if (match is None):
        raise Fail('Failed to get extracted version')
    file_path = (('/usr/hdp/' + hdp_version) + '/ranger-knox-plugin/install.properties')
    if params.has_ranger_admin:
        ranger_knox_dict = ranger_knox_properties(params)
        knox_repo_data = knox_repo_properties(params)
        write_properties_to_file(file_path, ranger_knox_dict)
        if params.enable_ranger_knox:
            cmd = format('cd /usr/hdp/{hdp_version}/ranger-knox-plugin/ && sh enable-knox-plugin.sh')
            ranger_adm_obj = Rangeradmin(url=ranger_knox_dict['POLICY_MGR_URL'])
            (response_code, response_recieved) = ranger_adm_obj.call_pycurl_request((ranger_knox_dict['POLICY_MGR_URL'] + '/login.jsp'), '', 'get', 'test:test')
            if ((response_code is not None) and (response_code == 200)):
                repo = ranger_adm_obj.get_repository_by_name_pycurl(ranger_knox_dict['REPOSITORY_NAME'], 'knox', 'true', 'admin:admin')
                if (repo and (repo['name'] == ranger_knox_dict['REPOSITORY_NAME'])):
                    Logger.info('Knox Repository exist')
                else:
                    response = ranger_adm_obj.create_repository_pycurl(knox_repo_data, 'admin:admin')
                    if (response is not None):
                        Logger.info('Knox Repository created')
                    else:
                        Logger.info('Knox Repository creation failed')
            else:
                Logger.info('Ranger service is not started on given host')
        else:
            cmd = format('cd /usr/hdp/{hdp_version}/ranger-knox-plugin/ && sh disable-knox-plugin.sh')
        Execute(cmd, environment={'JAVA_HOME': params.java_home, }, logoutput=True)
    else:
        Logger.info('Ranger admin not installed')
