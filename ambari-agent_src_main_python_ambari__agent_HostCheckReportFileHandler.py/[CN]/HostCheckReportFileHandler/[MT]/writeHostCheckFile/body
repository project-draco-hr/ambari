def writeHostCheckFile(self, hostInfo):
    if (self.hostCheckFilePath is None):
        return
    try:
        logger.debug(('Host check report at ' + self.hostCheckFilePath))
        config = ConfigParser.RawConfigParser()
        config.add_section('metadata')
        config.set('metadata', 'created', str(datetime.datetime.now()))
        if ('existingUsers' in hostInfo.keys()):
            items = []
            items2 = []
            for itemDetail in hostInfo['existingUsers']:
                items.append(itemDetail['name'])
                items2.append(itemDetail['homeDir'])
            config.add_section('users')
            config.set('users', 'usr_list', ','.join(items))
            config.set('users', 'usr_homedir_list', ','.join(items2))
        if ('alternatives' in hostInfo.keys()):
            items = []
            items2 = []
            for itemDetail in hostInfo['alternatives']:
                items.append(itemDetail['name'])
                items2.append(itemDetail['target'])
            config.add_section('alternatives')
            config.set('alternatives', 'symlink_list', ','.join(items))
            config.set('alternatives', 'target_list', ','.join(items2))
        if ('stackFoldersAndFiles' in hostInfo.keys()):
            items = []
            for itemDetail in hostInfo['stackFoldersAndFiles']:
                items.append(itemDetail['name'])
            if os.path.exists('/usr/hdp'):
                items.append('/usr/hdp')
            config.add_section('directories')
            config.set('directories', 'dir_list', ','.join(items))
        if ('hostHealth' in hostInfo.keys()):
            if ('activeJavaProcs' in hostInfo['hostHealth'].keys()):
                items = []
                for itemDetail in hostInfo['hostHealth']['activeJavaProcs']:
                    items.append(itemDetail['pid'])
                config.add_section('processes')
                config.set('processes', 'proc_list', ','.join(map(str, items)))
        self.removeFile(self.hostCheckFilePath)
        self.touchFile(self.hostCheckFilePath)
        with open(self.hostCheckFilePath, 'wb') as configfile:
            config.write(configfile)
    except Exception as err:
        logger.error(("Can't write host check file at %s :%s " % (self.hostCheckFilePath, err.message)))
        traceback.print_exc()
