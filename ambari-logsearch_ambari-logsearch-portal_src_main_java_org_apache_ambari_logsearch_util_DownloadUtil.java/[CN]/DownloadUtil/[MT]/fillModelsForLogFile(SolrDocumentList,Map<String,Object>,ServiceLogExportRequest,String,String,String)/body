{
  long numLogs=docList.getNumFound();
  List<String> hosts=new ArrayList<>();
  List<String> components=new ArrayList<>();
  List<String> levels=new ArrayList<>();
  List<TemplateData> logData=new ArrayList<>();
  for (  SolrDocument doc : docList) {
    if (doc != null) {
      String hostname=(String)doc.getFieldValue(HOST);
      String comp=(String)doc.getFieldValue(COMPONENT);
      String level=(String)doc.getFieldValue(LEVEL);
      if (!hosts.contains(hostname)) {
        hosts.add(hostname);
      }
      if (!components.contains(comp)) {
        components.add(comp);
      }
      if (!levels.contains(level)) {
        levels.add(level);
      }
      StringBuffer textToWrite=new StringBuffer();
      if (doc.getFieldValue(LOGTIME) != null) {
        textToWrite.append(doc.getFieldValue(LOGTIME).toString() + " ");
      }
      if (doc.getFieldValue(LEVEL) != null) {
        textToWrite.append(doc.getFieldValue(LEVEL).toString()).append(" ");
      }
      if (doc.getFieldValue(THREAD_NAME) != null) {
        textToWrite.append(doc.getFieldValue(THREAD_NAME).toString().trim()).append(" ");
      }
      if (doc.getFieldValue(LOGGER_NAME) != null) {
        textToWrite.append(doc.getFieldValue(LOGGER_NAME).toString().trim()).append(" ");
      }
      if (doc.getFieldValue(FILE) != null && doc.getFieldValue(LINE_NUMBER) != null) {
        textToWrite.append(doc.getFieldValue(FILE).toString()).append(":").append(doc.getFieldValue(LINE_NUMBER).toString()).append(" ");
      }
      if (doc.getFieldValue(LOG_MESSAGE) != null) {
        textToWrite.append("- ").append(doc.getFieldValue(LOG_MESSAGE).toString());
      }
      logData.add(new TemplateData((textToWrite.toString())));
    }
  }
  models.put("numberOfLogs",numLogs);
  models.put("logs",logData);
  models.put("hosts","[ " + StringUtils.join(hosts," ; ") + " ]");
  models.put("components","[ " + StringUtils.join(components," ; ") + " ]");
  models.put("format",format);
  models.put("from",from);
  models.put("levels",StringUtils.join(levels,", "));
  models.put("to",to);
  String includeString=request.getiMessage();
  if (StringUtils.isBlank(includeString)) {
    includeString="\"\"";
  }
 else {
    List<String> include=Splitter.on(request.getiMessage()).splitToList(LogSearchConstants.I_E_SEPRATOR);
    includeString="\"" + StringUtils.join(include,"\", \"") + "\"";
  }
  models.put("iString",includeString);
  String excludeString=request.geteMessage();
  if (StringUtils.isBlank(excludeString)) {
    excludeString="\"\"";
  }
 else {
    List<String> exclude=Splitter.on(request.getiMessage()).splitToList(LogSearchConstants.I_E_SEPRATOR);
    excludeString="\"" + StringUtils.join(exclude,"\", \"") + "\"";
  }
  models.put("eString",excludeString);
}
