{
  SolrDocumentList docList=null;
  String id=(String)searchCriteria.getParamValue(LogSearchConstants.ID);
  if (stringUtil.isEmpty(id)) {
    try {
      return convertObjToString(new VSolrLogList());
    }
 catch (    IOException e) {
      throw restErrorUtil.createRESTException(e.getMessage(),MessageEnums.ERROR_SYSTEM);
    }
  }
  String maxRows="";
  maxRows=(String)searchCriteria.getParamValue("numberRows");
  if (stringUtil.isEmpty(maxRows))   maxRows="10";
  String scrollType=(String)searchCriteria.getParamValue("scrollType");
  String logTime=null;
  String sequenceId=null;
  try {
    SolrQuery solrQuery=new SolrQuery();
    queryGenerator.setMainQuery(solrQuery,queryGenerator.buildFilterQuery(LogSearchConstants.ID,id));
    queryGenerator.setRowCount(solrQuery,1);
    QueryResponse response=serviceLogsSolrDao.process(solrQuery);
    docList=response.getResults();
    if (docList != null && !docList.isEmpty()) {
      Date date=(Date)docList.get(0).getFieldValue(LogSearchConstants.LOGTIME);
      logTime=dateUtil.convertDateWithMillisecondsToSolrDate(date);
      sequenceId="" + docList.get(0).getFieldValue(LogSearchConstants.SEQUNCE_ID);
    }
    if (stringUtil.isEmpty(logTime)) {
      return convertObjToString(new VSolrLogList());
    }
  }
 catch (  SolrServerException|SolrException|IOException e) {
    throw restErrorUtil.createRESTException(e.getMessage(),MessageEnums.DATA_NOT_FOUND);
  }
  if (LogSearchConstants.SCROLL_TYPE_BEFORE.equals(scrollType)) {
    VSolrLogList vSolrLogList=whenScrollUp(searchCriteria,logTime,sequenceId,maxRows);
    SolrDocumentList solrDocList=new SolrDocumentList();
    for (    SolrDocument solrDoc : vSolrLogList.getList()) {
      solrDocList.add(solrDoc);
    }
    vSolrLogList.setSolrDocuments(solrDocList);
    try {
      return convertObjToString(vSolrLogList);
    }
 catch (    IOException e) {
    }
  }
 else   if (LogSearchConstants.SCROLL_TYPE_AFTER.equals(scrollType)) {
    SolrDocumentList solrDocList=new SolrDocumentList();
    VSolrLogList vSolrLogList=new VSolrLogList();
    for (    SolrDocument solrDoc : whenScrollDown(searchCriteria,logTime,sequenceId,maxRows).getList()) {
      solrDocList.add(solrDoc);
    }
    vSolrLogList.setSolrDocuments(solrDocList);
    try {
      return convertObjToString(vSolrLogList);
    }
 catch (    IOException e) {
    }
  }
 else {
    VSolrLogList vSolrLogList=new VSolrLogList();
    SolrDocumentList initial=new SolrDocumentList();
    SolrDocumentList before=whenScrollUp(searchCriteria,logTime,sequenceId,maxRows).getList();
    SolrDocumentList after=whenScrollDown(searchCriteria,logTime,sequenceId,maxRows).getList();
    if (before == null || before.isEmpty())     before=new SolrDocumentList();
    for (    SolrDocument solrDoc : Lists.reverse(before)) {
      initial.add(solrDoc);
    }
    initial.add(docList.get(0));
    if (after == null || after.isEmpty())     after=new SolrDocumentList();
    for (    SolrDocument solrDoc : after) {
      initial.add(solrDoc);
    }
    vSolrLogList.setSolrDocuments(initial);
    try {
      return convertObjToString(vSolrLogList);
    }
 catch (    IOException e) {
    }
  }
  try {
    return convertObjToString(new VSolrLogList());
  }
 catch (  IOException e) {
    throw restErrorUtil.createRESTException(e.getMessage(),MessageEnums.DATA_NOT_FOUND);
  }
}
