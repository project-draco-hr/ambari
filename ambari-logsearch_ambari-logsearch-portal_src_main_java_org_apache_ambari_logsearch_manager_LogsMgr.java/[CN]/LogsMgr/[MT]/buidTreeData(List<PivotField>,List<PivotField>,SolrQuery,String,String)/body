{
  List<VNode> extensionTree=new ArrayList<VNode>();
  String hostQuery=null;
  if (pivotFields != null) {
    for (    PivotField pivotHost : pivotFields) {
      VNode hostNode=new VNode();
      hostNode.setName("" + pivotHost.getValue());
      hostNode.setValue("" + pivotHost.getCount());
      hostNode.setType(firstPriority);
      hostNode.setParent(true);
      hostNode.setRoot(true);
      PivotField hostPivot=null;
      for (      PivotField searchHost : pivotFieldHost) {
        if (hostNode.getName().equals(searchHost.getValue())) {
          hostPivot=searchHost;
          break;
        }
      }
      List<PivotField> pivotLevelHost=hostPivot.getPivot();
      if (pivotLevelHost != null) {
        Collection<VNameValue> logLevelCount=new ArrayList<VNameValue>();
        for (        PivotField pivotLevel : pivotLevelHost) {
          VNameValue vnameValue=new VNameValue();
          vnameValue.setName(((String)pivotLevel.getValue()).toUpperCase());
          vnameValue.setValue("" + pivotLevel.getCount());
          logLevelCount.add(vnameValue);
        }
        hostNode.setLogLevelCount(logLevelCount);
      }
      query.addFilterQuery(hostQuery);
      List<PivotField> pivotComponents=pivotHost.getPivot();
      if (pivotComponents != null) {
        Collection<VNode> componentNodes=new ArrayList<VNode>();
        for (        PivotField pivotComp : pivotComponents) {
          VNode compNode=new VNode();
          compNode.setName("" + pivotComp.getValue());
          compNode.setType(secondPriority);
          compNode.setValue("" + pivotComp.getCount());
          compNode.setParent(false);
          compNode.setRoot(false);
          List<PivotField> pivotLevels=pivotComp.getPivot();
          if (pivotLevels != null) {
            Collection<VNameValue> logLevelCount=new ArrayList<VNameValue>();
            for (            PivotField pivotLevel : pivotLevels) {
              VNameValue vnameValue=new VNameValue();
              vnameValue.setName(((String)pivotLevel.getValue()).toUpperCase());
              vnameValue.setValue("" + pivotLevel.getCount());
              logLevelCount.add(vnameValue);
            }
            compNode.setLogLevelCount(logLevelCount);
          }
          componentNodes.add(compNode);
        }
        hostNode.setChilds(componentNodes);
      }
      extensionTree.add(hostNode);
    }
  }
  return extensionTree;
}
