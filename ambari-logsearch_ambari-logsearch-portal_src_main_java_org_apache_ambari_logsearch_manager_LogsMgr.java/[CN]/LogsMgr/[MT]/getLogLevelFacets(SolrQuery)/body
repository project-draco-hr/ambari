{
  HashMap<String,String> map=new HashMap<String,String>();
  List<VNameValue> logsCounts=new ArrayList<VNameValue>();
  try {
    queryGenerator.setFacetField(query,LogSearchConstants.SOLR_LEVEL);
    List<Count> logLevelCounts=getFacetCounts(query,LogSearchConstants.SOLR_LEVEL);
    for (    Count count : logLevelCounts) {
      map.put(count.getName().toUpperCase(),"" + count.getCount());
    }
    String level=LogSearchConstants.FATAL;
    VNameValue nameValue=null;
    String value=map.get(level);
    if (value == null || value.equals(""))     value="0";
    nameValue=new VNameValue();
    nameValue.setName(level);
    nameValue.setValue(value);
    logsCounts.add(nameValue);
    level=LogSearchConstants.ERROR;
    value=map.get(level);
    if (value == null || value.equals(""))     value="0";
    nameValue=new VNameValue();
    nameValue.setName(level);
    nameValue.setValue(value);
    logsCounts.add(nameValue);
    level=LogSearchConstants.WARN;
    value=map.get(level);
    if (value == null || value.equals(""))     value="0";
    nameValue=new VNameValue();
    nameValue.setName(level);
    nameValue.setValue(value);
    logsCounts.add(nameValue);
    level=LogSearchConstants.INFO;
    value=map.get(level);
    if (value == null || value.equals(""))     value="0";
    nameValue=new VNameValue();
    nameValue.setName(level);
    nameValue.setValue(value);
    logsCounts.add(nameValue);
    level=LogSearchConstants.DEBUG;
    value=map.get(level);
    if (value == null || value.equals(""))     value="0";
    nameValue=new VNameValue();
    nameValue.setName(level);
    nameValue.setValue(value);
    logsCounts.add(nameValue);
    level=LogSearchConstants.TRACE;
    value=map.get(level);
    if (value == null || value.equals(""))     value="0";
    nameValue=new VNameValue();
    nameValue.setName(level);
    nameValue.setValue(value);
    logsCounts.add(nameValue);
  }
 catch (  SolrException|SolrServerException|IOException e) {
    logger.error("Error during solrQuery=" + query,e);
  }
  return logsCounts;
}
