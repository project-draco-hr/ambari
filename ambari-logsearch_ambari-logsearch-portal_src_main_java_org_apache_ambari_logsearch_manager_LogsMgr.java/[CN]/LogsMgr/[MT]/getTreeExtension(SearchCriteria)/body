{
  SolrQuery solrQuery=queryGenerator.commonServiceFilterQuery(searchCriteria);
  solrQuery.setParam("event","/getTreeExtension");
  if (searchCriteria.getSortBy() == null) {
    searchCriteria.setSortBy(LogSearchConstants.SOLR_HOST);
    searchCriteria.setSortType(SolrQuery.ORDER.asc.toString());
  }
  queryGenerator.setFilterFacetSort(solrQuery,searchCriteria);
  String hostName="" + ((searchCriteria.getParamValue("hostName") == null) ? "" : searchCriteria.getParamValue("hostName"));
  if (!StringUtils.isBlank(hostName)) {
    solrQuery.addFilterQuery(LogSearchConstants.SOLR_HOST + ":*" + hostName+ "*");
  }
  String firstHirarchy="host,type,level";
  String secondHirarchy="host,level";
  VNodeList list=new VNodeList();
  try {
    queryGenerator.setFacetPivot(solrQuery,1,firstHirarchy,secondHirarchy);
    QueryResponse response=serviceLogsSolrDao.process(solrQuery);
    List<List<PivotField>> listFirstHirarchicalPivotFields=new ArrayList<List<PivotField>>();
    NamedList<List<PivotField>> firstNamedList=response.getFacetPivot();
    if (firstNamedList != null) {
      listFirstHirarchicalPivotFields=firstNamedList.getAll(firstHirarchy);
    }
    List<List<PivotField>> listSecondHirarchicalPivotFields=new ArrayList<List<PivotField>>();
    NamedList<List<PivotField>> secondNamedList=response.getFacetPivot();
    if (secondNamedList != null) {
      listSecondHirarchicalPivotFields=secondNamedList.getAll(secondHirarchy);
    }
    List<PivotField> firstHirarchicalPivotFields=new ArrayList<PivotField>();
    List<PivotField> secondHirarchicalPivotFields=new ArrayList<PivotField>();
    if (!listFirstHirarchicalPivotFields.isEmpty()) {
      firstHirarchicalPivotFields=listFirstHirarchicalPivotFields.get(0);
    }
    if (!listSecondHirarchicalPivotFields.isEmpty()) {
      secondHirarchicalPivotFields=listSecondHirarchicalPivotFields.get(0);
    }
    List<VNode> dataList=buidTreeData(firstHirarchicalPivotFields,secondHirarchicalPivotFields,solrQuery,LogSearchConstants.HOST,LogSearchConstants.COMPONENT);
    list.setvNodeList(dataList);
  }
 catch (  SolrException|SolrServerException|IOException e) {
    logger.error("Error during solrQuery=" + solrQuery,e);
    throw restErrorUtil.createRESTException(MessageEnums.SOLR_ERROR.getMessage().getMessage(),MessageEnums.ERROR_SYSTEM);
  }
  return list;
}
