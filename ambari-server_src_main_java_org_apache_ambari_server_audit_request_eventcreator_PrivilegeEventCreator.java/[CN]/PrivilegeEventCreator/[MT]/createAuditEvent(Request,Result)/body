{
  Map<String,List<String>> users=getEntities(request,PrincipalTypeEntity.USER_PRINCIPAL_TYPE_NAME);
  Map<String,List<String>> groups=getEntities(request,PrincipalTypeEntity.GROUP_PRINCIPAL_TYPE_NAME);
switch (request.getRequestType()) {
case PUT:
    return ClusterPrivilegeChangeRequestAuditEvent.builder().withTimestamp(System.currentTimeMillis()).withRequestType(request.getRequestType()).withResultStatus(result.getStatus()).withUrl(request.getURI()).withRemoteIp(request.getRemoteAddress()).withUsers(users).withGroups(groups).build();
case POST:
  String role=users.isEmpty() ? (groups.isEmpty() ? null : groups.keySet().iterator().next()) : users.keySet().iterator().next();
return PrivilegeChangeRequestAuditEvent.builder().withTimestamp(System.currentTimeMillis()).withRequestType(request.getRequestType()).withResultStatus(result.getStatus()).withUrl(request.getURI()).withRemoteIp(request.getRemoteAddress()).withRole(role).withGroup(groups.get(role) == null ? null : groups.get(role).get(0)).withUser(users.get(role) == null ? null : users.get(role).get(0)).withOperation((users.isEmpty() ? (groups.isEmpty() ? "" : "Group ") : "User ") + "role change").build();
default :
return null;
}
}
