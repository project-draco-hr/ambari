{
  PrereqCheckRequest request=new PrereqCheckRequest("cluster");
  ConfigurationMergeCheck cmc=new ConfigurationMergeCheck();
  Assert.assertFalse(cmc.isApplicable(request));
  final RepositoryVersionDAO repositoryVersionDAO=EasyMock.createMock(RepositoryVersionDAO.class);
  expect(repositoryVersionDAO.findMaxByVersion("1.0")).andReturn(createFor("1.0")).anyTimes();
  expect(repositoryVersionDAO.findMaxByVersion("1.1")).andReturn(createFor("1.1")).anyTimes();
  expect(repositoryVersionDAO.findMaxByVersion("1.2")).andReturn(null).anyTimes();
  replay(repositoryVersionDAO);
  cmc.repositoryVersionDaoProvider=new Provider<RepositoryVersionDAO>(){
    @Override public RepositoryVersionDAO get(){
      return repositoryVersionDAO;
    }
  }
;
  cmc.clustersProvider=new Provider<Clusters>(){
    @Override public Clusters get(){
      return clusters;
    }
  }
;
  request.setRepositoryVersion("1.0");
  Assert.assertFalse(cmc.isApplicable(request));
  request.setRepositoryVersion("1.1");
  Assert.assertTrue(cmc.isApplicable(request));
  request.setRepositoryVersion("1.2");
  Assert.assertFalse(cmc.isApplicable(request));
}
