{
  EasyMockSupport mockSupport=new EasyMockSupport();
  AmbariManagementController mockMgmtController=mockSupport.createMock(AmbariManagementController.class);
  ResourceProvider mockServiceProvider=mockSupport.createMock(ResourceProvider.class);
  ResourceProvider mockComponentProvider=mockSupport.createMock(ResourceProvider.class);
  ResourceProvider mockHostProvider=mockSupport.createMock(ResourceProvider.class);
  ResourceProvider mockHostComponentProvider=mockSupport.createMock(ResourceProvider.class);
  ResourceProvider mockConfigGroupProvider=mockSupport.createMock(ResourceProvider.class);
  Stack mockStack=mockSupport.createMock(Stack.class);
  BaseBlueprintProcessor.HostGroupImpl mockHostGroupOne=mockSupport.createMock(BaseBlueprintProcessor.HostGroupImpl.class);
  ArrayList<Capture<Set<ClusterRequest>>> listOfRequestCaptures=new ArrayList<Capture<Set<ClusterRequest>>>();
  for (int i=0; i < 2; i++) {
    listOfRequestCaptures.add(new Capture<Set<ClusterRequest>>());
  }
  ArrayList<Capture<Map<String,String>>> listOfPropertiesCaptures=new ArrayList<Capture<Map<String,String>>>();
  for (int i=0; i < 2; i++) {
    listOfPropertiesCaptures.add(new Capture<Map<String,String>>());
  }
  expect(mockHostGroupOne.getHostInfo()).andReturn(Collections.singleton("c6401.ambari.apache.org")).atLeastOnce();
  expect(mockHostGroupOne.getComponents()).andReturn(Arrays.asList("FALCON_SERVER","FALCON_CLIENT"));
  expect(mockStack.getServicesForComponents(Arrays.asList("FALCON_SERVER","FALCON_CLIENT"))).andReturn(Arrays.asList("FALCON")).atLeastOnce();
  expect(mockStack.getConfigurationTypes("FALCON")).andReturn(Arrays.asList("falcon-site","falcon-env","oozie-site")).atLeastOnce();
  expect(mockStack.getExcludedConfigurationTypes("FALCON")).andReturn(Collections.<String>singleton("oozie-site")).atLeastOnce();
  for (int i=0; i < 2; i++) {
    expect(mockMgmtController.updateClusters(capture(listOfRequestCaptures.get(i)),capture(listOfPropertiesCaptures.get(i)))).andReturn(null);
  }
  Map<String,BaseBlueprintProcessor.HostGroupImpl> testMapOfHostGroups=new HashMap<String,BaseBlueprintProcessor.HostGroupImpl>();
  testMapOfHostGroups.put("host-group-one",mockHostGroupOne);
  mockSupport.replayAll();
  ClusterResourceProvider clusterResourceProvider=new TestClusterResourceProvider(mockMgmtController,mockServiceProvider,mockComponentProvider,mockHostProvider,mockHostComponentProvider,mockConfigGroupProvider);
  Map<String,Map<String,String>> clusterConfig=clusterResourceProvider.getClusterConfigurations();
  clusterConfig.put("falcon-site",Collections.singletonMap("key1","value1"));
  clusterConfig.put("falcon-env",Collections.singletonMap("envKey1","envValue1"));
  clusterConfig.put("oozie-site",Collections.singletonMap("oozie-key-one","oozie-value-one"));
  clusterConfig.put("cluster-env",Collections.<String,String>emptyMap());
  clusterResourceProvider.setConfigurationsOnCluster("clusterone",mockStack,testMapOfHostGroups);
  for (  Capture<Set<ClusterRequest>> requestCapture : listOfRequestCaptures) {
    Set<ClusterRequest> request=requestCapture.getValue();
    assertEquals("Incorrect number of cluster requests in this update",1,request.size());
  }
  for (  Capture<Map<String,String>> propertiesCapture : listOfPropertiesCaptures) {
    assertNull("Incorrect request properties sent with this update",propertiesCapture.getValue());
  }
  ClusterRequest requestOne=listOfRequestCaptures.get(0).getValue().iterator().next();
  ClusterRequest requestTwo=listOfRequestCaptures.get(1).getValue().iterator().next();
  if (requestOne.getDesiredConfig().size() == 1) {
    verifyClusterRequest(requestOne,"cluster-env");
    verifyClusterRequest(requestTwo,"falcon-site","falcon-env");
  }
 else {
    verifyClusterRequest(requestTwo,"cluster-env");
    verifyClusterRequest(requestOne,"falcon-site","falcon-env");
  }
  mockSupport.verifyAll();
}
