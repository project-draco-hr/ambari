{
  String blueprintName="test-blueprint";
  String stackName="test";
  String stackVersion="1.23";
  String clusterName="c1";
  ConfigHelper configHelper=createNiceMock(ConfigHelper.class);
  BlueprintDAO blueprintDAO=createStrictMock(BlueprintDAO.class);
  AmbariMetaInfo metaInfo=createMock(AmbariMetaInfo.class);
  AmbariManagementController managementController=createStrictMock(AmbariManagementController.class);
  Request request=createNiceMock(Request.class);
  RequestStatusResponse response=createNiceMock(RequestStatusResponse.class);
  BlueprintEntity blueprint=createNiceMock(BlueprintEntity.class);
  StackServiceResponse stackServiceResponse1=createNiceMock(StackServiceResponse.class);
  StackServiceResponse stackServiceResponse2=createNiceMock(StackServiceResponse.class);
  Capture<Set<StackServiceRequest>> stackServiceRequestCapture=new Capture<Set<StackServiceRequest>>();
  StackServiceComponentResponse stackServiceComponentResponse1=createNiceMock(StackServiceComponentResponse.class);
  StackServiceComponentResponse stackServiceComponentResponse2=createNiceMock(StackServiceComponentResponse.class);
  StackServiceComponentResponse stackServiceComponentResponse3=createNiceMock(StackServiceComponentResponse.class);
  Capture<Set<StackServiceComponentRequest>> serviceComponentRequestCapture1=new Capture<Set<StackServiceComponentRequest>>();
  Capture<Set<StackServiceComponentRequest>> serviceComponentRequestCapture2=new Capture<Set<StackServiceComponentRequest>>();
  StackConfigurationResponse stackConfigurationResponse1=createNiceMock(StackConfigurationResponse.class);
  StackConfigurationResponse stackConfigurationResponse2=createNiceMock(StackConfigurationResponse.class);
  StackConfigurationResponse stackConfigurationResponse3=createNiceMock(StackConfigurationResponse.class);
  StackConfigurationResponse stackConfigurationResponse4=createNiceMock(StackConfigurationResponse.class);
  Capture<Set<StackConfigurationRequest>> serviceConfigurationRequestCapture1=new Capture<Set<StackConfigurationRequest>>();
  Capture<Set<StackConfigurationRequest>> serviceConfigurationRequestCapture2=new Capture<Set<StackConfigurationRequest>>();
  BlueprintConfigEntity blueprintConfig=createNiceMock(BlueprintConfigEntity.class);
  HostGroupEntity hostGroup=createNiceMock(HostGroupEntity.class);
  HostGroupComponentEntity hostGroupComponent1=createNiceMock(HostGroupComponentEntity.class);
  HostGroupComponentEntity hostGroupComponent2=createNiceMock(HostGroupComponentEntity.class);
  HostGroupComponentEntity hostGroupComponent3=createNiceMock(HostGroupComponentEntity.class);
  HostGroupConfigEntity hostGroupConfig=createNiceMock(HostGroupConfigEntity.class);
  ServiceResourceProvider serviceResourceProvider=createStrictMock(ServiceResourceProvider.class);
  ResourceProvider componentResourceProvider=createStrictMock(ResourceProvider.class);
  ResourceProvider hostResourceProvider=createStrictMock(ResourceProvider.class);
  ResourceProvider hostComponentResourceProvider=createStrictMock(ResourceProvider.class);
  ConfigGroupResourceProvider configGroupResourceProvider=createStrictMock(ConfigGroupResourceProvider.class);
  PersistKeyValueImpl persistKeyValue=createNiceMock(PersistKeyValueImpl.class);
  Set<StackServiceResponse> stackServiceResponses=new LinkedHashSet<StackServiceResponse>();
  stackServiceResponses.add(stackServiceResponse1);
  stackServiceResponses.add(stackServiceResponse2);
  Set<StackServiceComponentResponse> stackServiceComponentResponses1=new LinkedHashSet<StackServiceComponentResponse>();
  stackServiceComponentResponses1.add(stackServiceComponentResponse1);
  stackServiceComponentResponses1.add(stackServiceComponentResponse2);
  Set<StackServiceComponentResponse> stackServiceComponentResponses2=new LinkedHashSet<StackServiceComponentResponse>();
  stackServiceComponentResponses2.add(stackServiceComponentResponse3);
  Set<StackConfigurationResponse> stackConfigurationResponses1=new LinkedHashSet<StackConfigurationResponse>();
  stackConfigurationResponses1.add(stackConfigurationResponse1);
  Set<StackConfigurationResponse> stackConfigurationResponses2=new LinkedHashSet<StackConfigurationResponse>();
  stackConfigurationResponses2.add(stackConfigurationResponse2);
  stackConfigurationResponses2.add(stackConfigurationResponse3);
  stackConfigurationResponses2.add(stackConfigurationResponse4);
  Collection<HostGroupComponentEntity> hostGroupComponents=new LinkedHashSet<HostGroupComponentEntity>();
  hostGroupComponents.add(hostGroupComponent1);
  hostGroupComponents.add(hostGroupComponent2);
  hostGroupComponents.add(hostGroupComponent3);
  Set<Map<String,Object>> propertySet=new LinkedHashSet<Map<String,Object>>();
  Map<String,Object> properties=new LinkedHashMap<String,Object>();
  properties.put(ClusterResourceProvider.CLUSTER_NAME_PROPERTY_ID,clusterName);
  properties.put(ClusterResourceProvider.BLUEPRINT_PROPERTY_ID,blueprintName);
  propertySet.add(properties);
  Map<String,String> mapGroupConfigProperties=new HashMap<String,String>();
  mapGroupConfigProperties.put("myGroupProp","awesomeValue");
  Map<String,String> blueprintConfigProperties=new HashMap<String,String>();
  blueprintConfigProperties.put("property1","value2");
  blueprintConfigProperties.put("new.property","new.property.value");
  expect(request.getProperties()).andReturn(propertySet).anyTimes();
  expect(blueprintDAO.findByName(blueprintName)).andReturn(blueprint);
  expect(blueprint.getStackName()).andReturn(stackName);
  expect(blueprint.getStackVersion()).andReturn(stackVersion);
  expect(metaInfo.getComponentDependencies("test","1.23","service1","component1")).andReturn(Collections.<DependencyInfo>emptyList());
  expect(metaInfo.getComponentDependencies("test","1.23","service1","component2")).andReturn(Collections.<DependencyInfo>emptyList());
  expect(metaInfo.getComponentDependencies("test","1.23","service2","component3")).andReturn(Collections.<DependencyInfo>emptyList());
  expect(managementController.getStackServices(capture(stackServiceRequestCapture))).andReturn(stackServiceResponses);
  expect(stackServiceResponse1.getServiceName()).andReturn("service1");
  expect(stackServiceResponse2.getServiceName()).andReturn("service2");
  expect(managementController.getStackComponents(capture(serviceComponentRequestCapture1))).andReturn(stackServiceComponentResponses1);
  expect(stackServiceComponentResponse1.getComponentName()).andReturn("component1");
  expect(stackServiceComponentResponse2.getComponentName()).andReturn("component2");
  expect(managementController.getStackConfigurations(capture(serviceConfigurationRequestCapture1))).andReturn(stackConfigurationResponses1);
  expect(stackConfigurationResponse1.getType()).andReturn("core-site.xml");
  expect(stackConfigurationResponse1.getPropertyName()).andReturn("property1");
  expect(stackConfigurationResponse1.getPropertyValue()).andReturn("value1");
  expect(managementController.getStackComponents(capture(serviceComponentRequestCapture2))).andReturn(stackServiceComponentResponses2);
  expect(stackServiceComponentResponse3.getComponentName()).andReturn("component3");
  expect(managementController.getStackConfigurations(capture(serviceConfigurationRequestCapture2))).andReturn(stackConfigurationResponses2);
  expect(stackConfigurationResponse2.getType()).andReturn("hdfs-site.xml");
  expect(stackConfigurationResponse2.getPropertyName()).andReturn("property2");
  expect(stackConfigurationResponse2.getPropertyValue()).andReturn("value2");
  expect(stackConfigurationResponse3.getType()).andReturn("global.xml");
  expect(stackConfigurationResponse3.getPropertyName()).andReturn("oozie_user");
  expect(stackConfigurationResponse3.getPropertyValue()).andReturn("oozie");
  expect(stackConfigurationResponse4.getType()).andReturn("core-site.xml");
  expect(stackConfigurationResponse4.getPropertyName()).andReturn("property3");
  expect(stackConfigurationResponse4.getPropertyValue()).andReturn("value3");
  expect(blueprintConfig.getBlueprintName()).andReturn("test-blueprint").anyTimes();
  expect(blueprintConfig.getType()).andReturn("core-site").anyTimes();
  expect(blueprint.getHostGroups()).andReturn(Collections.singleton(hostGroup)).anyTimes();
  expect(hostGroup.getName()).andReturn("group1").anyTimes();
  expect(hostGroup.getComponents()).andReturn(hostGroupComponents).anyTimes();
  expect(hostGroupComponent1.getName()).andReturn("component1").anyTimes();
  expect(hostGroupComponent2.getName()).andReturn("component2").anyTimes();
  expect(hostGroupComponent3.getName()).andReturn("component3").anyTimes();
  expect(hostGroup.getConfigurations()).andReturn(Collections.<HostGroupConfigEntity>singleton(hostGroupConfig)).anyTimes();
  expect(hostGroupConfig.getType()).andReturn("core-site").anyTimes();
  expect(hostGroupConfig.getConfigData()).andReturn(new Gson().toJson(mapGroupConfigProperties)).anyTimes();
  replay(blueprintDAO,managementController,request,response,blueprint,stackServiceResponse1,stackServiceResponse2,stackServiceComponentResponse1,stackServiceComponentResponse2,stackServiceComponentResponse3,stackConfigurationResponse1,stackConfigurationResponse2,stackConfigurationResponse3,stackConfigurationResponse4,blueprintConfig,hostGroup,hostGroupComponent1,hostGroupComponent2,hostGroupComponent3,hostGroupConfig,serviceResourceProvider,componentResourceProvider,hostResourceProvider,hostComponentResourceProvider,configGroupResourceProvider,persistKeyValue,metaInfo);
  ClusterResourceProvider.init(blueprintDAO,metaInfo,configHelper);
  ResourceProvider provider=new TestClusterResourceProvider(managementController,serviceResourceProvider,componentResourceProvider,hostResourceProvider,hostComponentResourceProvider,configGroupResourceProvider);
  try {
    provider.createResources(request);
    fail("Expected exception for missing password property");
  }
 catch (  IllegalArgumentException e) {
  }
}
