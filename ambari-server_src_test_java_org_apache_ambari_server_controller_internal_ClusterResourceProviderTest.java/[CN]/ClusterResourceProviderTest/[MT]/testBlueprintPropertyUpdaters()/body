{
  final Map<String,String> singleHostProperty1=Collections.singletonMap("dfs.http.address","localhost:50070");
  final Map<String,String> singleHostProperty2=Collections.singletonMap("hive.metastore.uris","prefix.localhost.suffix");
  final Map<String,String> multiHostProperty1=Collections.singletonMap("hbase.zookeeper.quorum","localhost");
  final Map<String,String> multiHostProperty2=Collections.singletonMap("storm.zookeeper.servers","['localhost']");
  final Map<String,String> mProperty=Collections.singletonMap("namenode_heapsize","1025");
  final Map<String,String> databaseProperty=Collections.singletonMap("javax.jdo.option.ConnectionURL","localhost:12345");
  final HostGroup hostGroup1=createNiceMock(HostGroup.class);
  final HostGroup hostGroup2=createNiceMock(HostGroup.class);
  expect(hostGroup1.getComponents()).andReturn(new ArrayList<String>(){
{
      add("NAMENODE");
      add("HBASE_MASTER");
      add("HIVE_SERVER");
      add("ZOOKEEPER_SERVER");
    }
  }
).anyTimes();
  expect(hostGroup1.getHostInfo()).andReturn(Collections.singletonList("h1")).anyTimes();
  expect(hostGroup2.getComponents()).andReturn(Collections.singletonList("ZOOKEEPER_SERVER")).anyTimes();
  expect(hostGroup2.getHostInfo()).andReturn(Collections.singletonList("h2")).anyTimes();
  Map<String,HostGroup> hostGroups=new HashMap<String,HostGroup>(){
{
      put("host_group_1",hostGroup1);
      put("host_group_2",hostGroup2);
    }
  }
;
  AmbariManagementController managementController=createNiceMock(AmbariManagementController.class);
  ClusterResourceProvider resourceProvider=createMockBuilder(ClusterResourceProvider.class).withConstructor(Set.class,Map.class,AmbariManagementController.class).withArgs(new HashSet<String>(),new HashMap<Resource.Type,String>(),managementController).createMock();
  replay(managementController,resourceProvider,hostGroup1,hostGroup2);
  Map<String,Map<String,String>> mapConfigurations;
  Field configField=ClusterResourceProvider.class.getDeclaredField("mapClusterConfigurations");
  configField.setAccessible(true);
  mapConfigurations=(Map<String,Map<String,String>>)configField.get(resourceProvider);
  Map<String,PropertyUpdater> propertyUpdaterMap;
  Field f=ClusterResourceProvider.class.getDeclaredField("propertyUpdaters");
  f.setAccessible(true);
  propertyUpdaterMap=(Map<String,PropertyUpdater>)f.get(resourceProvider);
  Assert.assertNotNull(propertyUpdaterMap);
  String newValue;
  Map.Entry<String,String> entry=singleHostProperty1.entrySet().iterator().next();
  newValue=propertyUpdaterMap.get(entry.getKey()).update(hostGroups,entry.getValue());
  Assert.assertEquals("h1:50070",newValue);
  entry=singleHostProperty2.entrySet().iterator().next();
  newValue=propertyUpdaterMap.get(entry.getKey()).update(hostGroups,entry.getValue());
  Assert.assertEquals("prefix.h1.suffix",newValue);
  entry=multiHostProperty1.entrySet().iterator().next();
  newValue=propertyUpdaterMap.get(entry.getKey()).update(hostGroups,entry.getValue());
  Assert.assertTrue(CollectionUtils.isEqualCollection(Arrays.asList("h1,h2".split(",")),Arrays.asList(newValue.split(","))));
  entry=multiHostProperty2.entrySet().iterator().next();
  newValue=propertyUpdaterMap.get(entry.getKey()).update(hostGroups,entry.getValue());
  Assert.assertTrue(newValue.equals("['h1','h2']") || newValue.equals("['h2','h1']"));
  entry=mProperty.entrySet().iterator().next();
  newValue=propertyUpdaterMap.get(entry.getKey()).update(hostGroups,entry.getValue());
  Assert.assertEquals("1025m",newValue);
  Map<String,String> configs=new HashMap<String,String>();
  configs.put("hive_database","External MySQL Database");
  mapConfigurations.put("hive-env",configs);
  entry=databaseProperty.entrySet().iterator().next();
  newValue=propertyUpdaterMap.get(entry.getKey()).update(hostGroups,entry.getValue());
  Assert.assertEquals("localhost:12345",newValue);
  verify(managementController,resourceProvider,hostGroup1,hostGroup2);
}
