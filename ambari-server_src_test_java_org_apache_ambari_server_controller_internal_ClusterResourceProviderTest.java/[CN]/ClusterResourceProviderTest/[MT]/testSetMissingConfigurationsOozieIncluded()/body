{
  EasyMockSupport mockSupport=new EasyMockSupport();
  AmbariManagementController mockMgmtController=mockSupport.createMock(AmbariManagementController.class);
  ResourceProvider mockServiceProvider=mockSupport.createMock(ResourceProvider.class);
  ResourceProvider mockComponentProvider=mockSupport.createMock(ResourceProvider.class);
  ResourceProvider mockHostProvider=mockSupport.createMock(ResourceProvider.class);
  ResourceProvider mockHostComponentProvider=mockSupport.createMock(ResourceProvider.class);
  ResourceProvider mockConfigGroupProvider=mockSupport.createMock(ResourceProvider.class);
  AmbariManagementController mockManagementController=mockSupport.createMock(AmbariManagementController.class);
  StackServiceResponse mockStackServiceResponseOne=mockSupport.createMock(StackServiceResponse.class);
  StackServiceComponentResponse mockStackComponentResponse=mockSupport.createMock(StackServiceComponentResponse.class);
  AmbariMetaInfo mockAmbariMetaInfo=mockSupport.createMock(AmbariMetaInfo.class);
  expect(mockStackComponentResponse.getComponentName()).andReturn("OOZIE_SERVER");
  expect(mockStackComponentResponse.getCardinality()).andReturn("1");
  expect(mockStackComponentResponse.getAutoDeploy()).andReturn(new AutoDeployInfo());
  expect(mockStackServiceResponseOne.getServiceName()).andReturn("OOZIE");
  expect(mockManagementController.getStackServices(isA(Set.class))).andReturn(Collections.singleton(mockStackServiceResponseOne));
  expect(mockManagementController.getStackComponents(isA(Set.class))).andReturn(Collections.singleton(mockStackComponentResponse));
  expect(mockManagementController.getStackConfigurations(isA(Set.class))).andReturn(Collections.<StackConfigurationResponse>emptySet());
  expect(mockManagementController.getStackLevelConfigurations(isA(Set.class))).andReturn(Collections.<StackConfigurationResponse>emptySet());
  expect(mockAmbariMetaInfo.getComponentDependencies("HDP","2.1","OOZIE","OOZIE_SERVER")).andReturn(Collections.<DependencyInfo>emptyList());
  mockSupport.replayAll();
  ClusterResourceProvider.init(null,mockAmbariMetaInfo,null);
  BaseBlueprintProcessor.Stack stack=new BaseBlueprintProcessor.Stack("HDP","2.1",mockManagementController);
  ClusterResourceProvider clusterResourceProvider=new TestClusterResourceProvider(mockMgmtController,mockServiceProvider,mockComponentProvider,mockHostProvider,mockHostComponentProvider,mockConfigGroupProvider);
  HostGroupEntity hostGroup=new HostGroupEntity();
  hostGroup.setComponents(Collections.<HostGroupComponentEntity>emptyList());
  HostGroupConfigEntity configEntity=new HostGroupConfigEntity();
  configEntity.setConfigData("");
  hostGroup.setConfigurations(Collections.singletonList(configEntity));
  BaseBlueprintProcessor.HostGroupImpl hostGroupImpl=new BaseBlueprintProcessor.HostGroupImpl(hostGroup,stack,null);
  hostGroupImpl.addComponent("OOZIE_SERVER");
  clusterResourceProvider.getClusterConfigurations().put("core-site",new HashMap<String,String>());
  clusterResourceProvider.getClusterConfigurations().put("oozie-env",new HashMap<String,String>());
  clusterResourceProvider.getClusterConfigurations().get("oozie-env").put("oozie_user","oozie");
  clusterResourceProvider.setMissingConfigurations(Collections.singletonMap("host_group_one",hostGroupImpl));
  Map<String,String> mapCoreSiteConfig=clusterResourceProvider.getClusterConfigurations().get("core-site");
  assertNotNull("core-site map was null.",mapCoreSiteConfig);
  assertEquals("Incorrect number of entries in the core-site config map",2,mapCoreSiteConfig.size());
  assertEquals("Incorrect value for proxy hosts","*",mapCoreSiteConfig.get("hadoop.proxyuser.oozie.hosts"));
  assertEquals("Incorrect value for proxy hosts","users",mapCoreSiteConfig.get("hadoop.proxyuser.oozie.groups"));
  mockSupport.verifyAll();
}
