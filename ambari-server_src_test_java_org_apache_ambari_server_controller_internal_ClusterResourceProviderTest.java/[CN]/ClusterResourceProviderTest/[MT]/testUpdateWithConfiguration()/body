{
  AmbariManagementController managementController=createMock(AmbariManagementController.class);
  RequestStatusResponse response=createNiceMock(RequestStatusResponse.class);
  Set<ClusterResponse> nameResponse=new HashSet<ClusterResponse>();
  nameResponse.add(new ClusterResponse(100L,"Cluster100",State.INSTALLED,null,null,null,null));
  Map<String,String> mapRequestProps=new HashMap<String,String>();
  mapRequestProps.put("context","Called from a test");
  expect(managementController.getClusters(EasyMock.<Set<ClusterRequest>>anyObject())).andReturn(nameResponse).times(2);
  expect(managementController.updateClusters(Collections.singleton(EasyMock.anyObject(ClusterRequest.class)),eq(mapRequestProps))).andReturn(response).times(1);
  expect(managementController.getClusterUpdateResults(anyObject(ClusterRequest.class))).andReturn(null).anyTimes();
  replay(managementController,response);
  Map<String,Object> properties=new LinkedHashMap<String,Object>();
  properties.put(ClusterResourceProvider.CLUSTER_NAME_PROPERTY_ID,"Cluster100");
  properties.put(PropertyHelper.getPropertyId("Clusters.desired_config","type"),"global");
  properties.put(PropertyHelper.getPropertyId("Clusters.desired_config","tag"),"version1");
  properties.put(PropertyHelper.getPropertyId("Clusters.desired_config.properties","a"),"b");
  properties.put(PropertyHelper.getPropertyId("Clusters.desired_config.properties","x"),"y");
  Map<String,Object> properties2=new LinkedHashMap<String,Object>();
  properties2.put(ClusterResourceProvider.CLUSTER_NAME_PROPERTY_ID,"Cluster100");
  properties2.put(PropertyHelper.getPropertyId("Clusters.desired_config","type"),"mapred-site");
  properties2.put(PropertyHelper.getPropertyId("Clusters.desired_config","tag"),"versio99");
  properties2.put(PropertyHelper.getPropertyId("Clusters.desired_config.properties","foo"),"A1");
  properties2.put(PropertyHelper.getPropertyId("Clusters.desired_config.properties","bar"),"B2");
  Set<Map<String,Object>> propertySet=new HashSet<Map<String,Object>>();
  propertySet.add(properties);
  propertySet.add(properties2);
  Request request=new RequestImpl(null,propertySet,mapRequestProps,null);
  Predicate predicate=new PredicateBuilder().property(ClusterResourceProvider.CLUSTER_NAME_PROPERTY_ID).equals("Cluster100").toPredicate();
  ResourceProvider provider=AbstractControllerResourceProvider.getResourceProvider(Resource.Type.Cluster,PropertyHelper.getPropertyIds(Resource.Type.Cluster),PropertyHelper.getKeyPropertyIds(Resource.Type.Cluster),managementController);
  AbstractResourceProviderTest.TestObserver observer=new AbstractResourceProviderTest.TestObserver();
  ((ObservableResourceProvider)provider).addObserver(observer);
  provider.updateResources(request,predicate);
  ResourceProviderEvent lastEvent=observer.getLastEvent();
  Assert.assertNotNull(lastEvent);
  Assert.assertEquals(Resource.Type.Cluster,lastEvent.getResourceType());
  Assert.assertEquals(ResourceProviderEvent.Type.Update,lastEvent.getType());
  Assert.assertEquals(request,lastEvent.getRequest());
  Assert.assertEquals(predicate,lastEvent.getPredicate());
  verify(managementController,response);
}
