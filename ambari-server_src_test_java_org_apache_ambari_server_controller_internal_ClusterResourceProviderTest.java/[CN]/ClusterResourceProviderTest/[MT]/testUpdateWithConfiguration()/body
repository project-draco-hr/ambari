{
  AmbariManagementController managementController=createMock(AmbariManagementController.class);
  RequestStatusResponse response=createNiceMock(RequestStatusResponse.class);
  Set<ClusterResponse> nameResponse=new HashSet<ClusterResponse>();
  nameResponse.add(new ClusterResponse(100L,"Cluster100",null,null));
  Map<String,String> mapRequestProps=new HashMap<String,String>();
  mapRequestProps.put("context","Called from a test");
  expect(managementController.getClusters(EasyMock.<Set<ClusterRequest>>anyObject())).andReturn(nameResponse).once();
  expect(managementController.updateCluster(EasyMock.anyObject(ClusterRequest.class),eq(mapRequestProps))).andReturn(response).once();
  replay(managementController,response);
  Map<String,Object> properties=new LinkedHashMap<String,Object>();
  properties.put(ClusterResourceProvider.CLUSTER_NAME_PROPERTY_ID,"Cluster100");
  properties.put(PropertyHelper.getPropertyId("Clusters.desired_config","type"),"global");
  properties.put(PropertyHelper.getPropertyId("Clusters.desired_config","tag"),"version1");
  properties.put(PropertyHelper.getPropertyId("Clusters.desired_config.properties","a"),"b");
  properties.put(PropertyHelper.getPropertyId("Clusters.desired_config.properties","x"),"y");
  Request request=PropertyHelper.getUpdateRequest(properties,mapRequestProps);
  Predicate predicate=new PredicateBuilder().property(ClusterResourceProvider.CLUSTER_NAME_PROPERTY_ID).equals("Cluster100").toPredicate();
  ResourceProvider provider=AbstractControllerResourceProvider.getResourceProvider(Resource.Type.Cluster,PropertyHelper.getPropertyIds(Resource.Type.Cluster),PropertyHelper.getKeyPropertyIds(Resource.Type.Cluster),managementController);
  provider.updateResources(request,predicate);
  verify(managementController,response);
}
