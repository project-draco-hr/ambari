{
  FilterChain chain=createNiceMock(FilterChain.class);
  HttpServletRequest request=createNiceMock(HttpServletRequest.class);
  HttpServletResponse response=createNiceMock(HttpServletResponse.class);
  AmbariAuthorizationFilter filter=createMockBuilder(AmbariAuthorizationFilter.class).addMockedMethod("getSecurityContext").withConstructor().createMock();
  SecurityContext securityContext=createNiceMock(SecurityContext.class);
  Authentication authentication=createNiceMock(Authentication.class);
  AmbariGrantedAuthority authority=createNiceMock(AmbariGrantedAuthority.class);
  PrivilegeEntity privilegeEntity=createNiceMock(PrivilegeEntity.class);
  PermissionEntity permission=createNiceMock(PermissionEntity.class);
  FilterConfig filterConfig=createNiceMock(FilterConfig.class);
  Authentication auth=new UsernamePasswordAuthenticationToken("admin",null);
  SecurityContextHolder.getContext().setAuthentication(auth);
  expect(filterConfig.getInitParameter("realm")).andReturn("AuthFilter");
  expect(authentication.isAuthenticated()).andReturn(true);
  expect(request.getRequestURI()).andReturn("/api/v1/persist/some_val");
  expect(authority.getPrivilegeEntity()).andReturn(privilegeEntity);
  expect(privilegeEntity.getPermission()).andReturn(permission);
  EasyMock.<Collection<? extends GrantedAuthority>>expect(authentication.getAuthorities()).andReturn(Collections.singletonList(authority));
  expect(filter.getSecurityContext()).andReturn(securityContext);
  expect(securityContext.getAuthentication()).andReturn(authentication);
  response.setHeader("User","admin");
  expectLastCall().andAnswer(new IAnswer(){
    public Object answer(){
      String arg1=(String)getCurrentArguments()[0];
      String arg2=(String)getCurrentArguments()[1];
      Assert.assertEquals("User",arg1);
      Assert.assertEquals("admin",arg2);
      return null;
    }
  }
);
  expect(permission.getId()).andReturn(PermissionEntity.CLUSTER_ADMINISTRATOR_PERMISSION);
  chain.doFilter(request,response);
  replay(request,response,chain,filter,securityContext,authentication,authority,privilegeEntity,permission,filterConfig);
  filter.init(filterConfig);
  filter.doFilter(request,response,chain);
  verify(request,response,chain,filter,securityContext,authentication,authority,privilegeEntity,permission,filterConfig);
}
