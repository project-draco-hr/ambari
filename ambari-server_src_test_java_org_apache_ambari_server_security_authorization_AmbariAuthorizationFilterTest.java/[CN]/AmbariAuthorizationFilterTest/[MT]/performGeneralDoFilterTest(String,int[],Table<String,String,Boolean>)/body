{
  final SecurityContext securityContext=createNiceMock(SecurityContext.class);
  final Authentication authentication=createNiceMock(Authentication.class);
  final FilterConfig filterConfig=createNiceMock(FilterConfig.class);
  final AmbariAuthorizationFilter filter=createMockBuilder(AmbariAuthorizationFilter.class).addMockedMethod("getSecurityContext").addMockedMethod("getViewRegistry").withConstructor().createMock();
  final List<AmbariGrantedAuthority> authorities=new ArrayList<AmbariGrantedAuthority>();
  final ViewRegistry viewRegistry=createNiceMock(ViewRegistry.class);
  for (  int permissionGranted : permissionsGranted) {
    final AmbariGrantedAuthority authority=createNiceMock(AmbariGrantedAuthority.class);
    final PrivilegeEntity privilegeEntity=createNiceMock(PrivilegeEntity.class);
    final PermissionEntity permission=createNiceMock(PermissionEntity.class);
    expect(authority.getPrivilegeEntity()).andReturn(privilegeEntity).anyTimes();
    expect(privilegeEntity.getPermission()).andReturn(permission).anyTimes();
    expect(permission.getId()).andReturn(permissionGranted).anyTimes();
    replay(authority,privilegeEntity,permission);
    authorities.add(authority);
  }
  EasyMock.<Collection<? extends GrantedAuthority>>expect(authentication.getAuthorities()).andReturn(authorities).anyTimes();
  expect(filterConfig.getInitParameter("realm")).andReturn("AuthFilter").anyTimes();
  expect(authentication.isAuthenticated()).andReturn(true).anyTimes();
  expect(authentication.getName()).andReturn(username).anyTimes();
  expect(filter.getSecurityContext()).andReturn(securityContext).anyTimes();
  expect(filter.getViewRegistry()).andReturn(viewRegistry).anyTimes();
  expect(securityContext.getAuthentication()).andReturn(authentication).anyTimes();
  expect(viewRegistry.checkPermission(EasyMock.eq("AllowedView"),EasyMock.<String>anyObject(),EasyMock.<String>anyObject(),EasyMock.anyBoolean())).andAnswer(new IAnswer<Boolean>(){
    @Override public Boolean answer() throws Throwable {
      for (      int permissionGranted : permissionsGranted) {
        if (permissionGranted == PermissionEntity.VIEW_USE_PERMISSION) {
          return true;
        }
      }
      return false;
    }
  }
).anyTimes();
  expect(viewRegistry.checkPermission(EasyMock.eq("DeniedView"),EasyMock.<String>anyObject(),EasyMock.<String>anyObject(),EasyMock.anyBoolean())).andReturn(false).anyTimes();
  replay(authentication,filterConfig,filter,securityContext,viewRegistry);
  for (  final Cell<String,String,Boolean> urlTest : urlTests.cellSet()) {
    final FilterChain chain=EasyMock.createStrictMock(FilterChain.class);
    final HttpServletRequest request=createNiceMock(HttpServletRequest.class);
    final HttpServletResponse response=createNiceMock(HttpServletResponse.class);
    expect(request.getRequestURI()).andReturn(urlTest.getRowKey()).anyTimes();
    expect(request.getMethod()).andReturn(urlTest.getColumnKey()).anyTimes();
    if (urlTest.getValue()) {
      chain.doFilter(EasyMock.<ServletRequest>anyObject(),EasyMock.<ServletResponse>anyObject());
      EasyMock.expectLastCall().once();
    }
    replay(request,response,chain);
    try {
      filter.doFilter(request,response,chain);
    }
 catch (    AssertionError error) {
      throw new Exception("doFilter() should not be chained on " + urlTest.getColumnKey() + " "+ urlTest.getRowKey(),error);
    }
    try {
      verify(chain);
    }
 catch (    AssertionError error) {
      throw new Exception("verify( failed on " + urlTest.getColumnKey() + " "+ urlTest.getRowKey(),error);
    }
  }
}
