{
  String stacks="src/test/resources/stacks";
  String version="src/test/resources/version";
  String sharedResourcesDir="src/test/resources/";
  if (System.getProperty("os.name").contains("Windows")) {
    stacks=ClassLoader.getSystemClassLoader().getResource("stacks").getPath();
    version=new File(new File(ClassLoader.getSystemClassLoader().getResource("").getPath()).getParent(),"version").getPath();
    sharedResourcesDir=ClassLoader.getSystemClassLoader().getResource("").getPath();
  }
  if (!properties.containsKey(Configuration.SERVER_PERSISTENCE_TYPE.getKey())) {
    properties.setProperty(Configuration.SERVER_PERSISTENCE_TYPE.getKey(),"in-memory");
  }
  if (!properties.containsKey(Configuration.METADATA_DIR_PATH.getKey())) {
    properties.setProperty(Configuration.METADATA_DIR_PATH.getKey(),stacks);
  }
  if (!properties.containsKey(Configuration.SERVER_VERSION_FILE.getKey())) {
    properties.setProperty(Configuration.SERVER_VERSION_FILE.getKey(),version);
  }
  if (!properties.containsKey(Configuration.OS_VERSION.getKey())) {
    properties.setProperty(Configuration.OS_VERSION.getKey(),"centos5");
  }
  if (!properties.containsKey(Configuration.SHARED_RESOURCES_DIR.getKey())) {
    properties.setProperty(Configuration.SHARED_RESOURCES_DIR.getKey(),sharedResourcesDir);
  }
  try {
    install(Modules.override(new BeanDefinitionsCachingTestControllerModule(properties)).with(new AbstractModule(){
      @Override protected void configure(){
        install(new FactoryModuleBuilder().implement(StackManager.class,StackManagerMock.class).build(StackManagerFactory.class));
      }
    }
));
    AuditLogger al=EasyMock.createNiceMock(AuditLogger.class);
    EasyMock.expect(al.isEnabled()).andReturn(false).anyTimes();
    bind(AuditLogger.class).toInstance(al);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}
