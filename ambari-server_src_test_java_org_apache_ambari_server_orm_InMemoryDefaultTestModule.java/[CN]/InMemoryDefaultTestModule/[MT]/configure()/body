{
  String stacks="src/test/resources/stacks";
  String version="src/test/resources/version";
  String sharedResourcesDir="src/test/resources/";
  if (System.getProperty("os.name").contains("Windows")) {
    stacks=ClassLoader.getSystemClassLoader().getResource("stacks").getPath();
    version=new File(new File(ClassLoader.getSystemClassLoader().getResource("").getPath()).getParent(),"version").getPath();
    sharedResourcesDir=ClassLoader.getSystemClassLoader().getResource("").getPath();
  }
  if (!properties.containsKey(Configuration.SERVER_PERSISTENCE_TYPE_KEY)) {
    properties.setProperty(Configuration.SERVER_PERSISTENCE_TYPE_KEY,"in-memory");
  }
  if (!properties.containsKey(Configuration.METADATA_DIR_PATH)) {
    properties.setProperty(Configuration.METADATA_DIR_PATH,stacks);
  }
  if (!properties.containsKey(Configuration.SERVER_VERSION_FILE)) {
    properties.setProperty(Configuration.SERVER_VERSION_FILE,version);
  }
  if (!properties.containsKey(Configuration.OS_VERSION_KEY)) {
    properties.setProperty(Configuration.OS_VERSION_KEY,"centos5");
  }
  if (!properties.containsKey(Configuration.SHARED_RESOURCES_DIR_KEY)) {
    properties.setProperty(Configuration.SHARED_RESOURCES_DIR_KEY,sharedResourcesDir);
  }
  try {
    install(new BeanDefinitionsCachingTestControllerModule(properties));
    AuditLogger al=EasyMock.createNiceMock(AuditLogger.class);
    EasyMock.expect(al.isEnabled()).andReturn(false).anyTimes();
    bind(AuditLogger.class).toInstance(al);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}
