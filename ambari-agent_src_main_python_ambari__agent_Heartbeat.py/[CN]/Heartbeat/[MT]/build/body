def build(self, id='-1', state_interval=(-1), componentsMapped=False):
    global clusterId, clusterDefinitionRevision, firstContact
    timestamp = int((time.time() * 1000))
    queueResult = self.actionQueue.result()
    nodeStatus = {'status': 'HEALTHY', 'cause': 'NONE', }
    heartbeat = {'responseId': int(id), 'timestamp': timestamp, 'hostname': hostname(self.config), 'nodeStatus': nodeStatus, }
    rec_status = self.actionQueue.controller.recovery_manager.get_recovery_status()
    heartbeat['recoveryReport'] = rec_status
    commandsInProgress = False
    if (not self.actionQueue.commandQueue.empty()):
        commandsInProgress = True
    if (len(queueResult) != 0):
        heartbeat['reports'] = queueResult['reports']
        heartbeat['componentStatus'] = queueResult['componentStatus']
        if (len(heartbeat['reports']) > 0):
            commandsInProgress = True
        pass
    if (int(id) == 0):
        componentsMapped = False
    logger.info('Building Heartbeat: {responseId = %s, timestamp = %s, commandsInProgress = %s, componentsMapped = %s}', str(id), str(timestamp), repr(commandsInProgress), repr(componentsMapped))
    if logger.isEnabledFor(logging.DEBUG):
        logger.debug('Heartbeat: %s', pformat(heartbeat))
    hostInfo = HostInfo(self.config)
    if ((int(id) >= 0) and (state_interval > 0) and ((int(id) % state_interval) == 0)):
        nodeInfo = {}
        hostInfo.register(nodeInfo, componentsMapped, commandsInProgress)
        heartbeat['agentEnv'] = nodeInfo
        mounts = Hardware.osdisks()
        heartbeat['mounts'] = mounts
        if logger.isEnabledFor(logging.DEBUG):
            logger.debug('agentEnv: %s', str(nodeInfo))
            logger.debug('mounts: %s', str(mounts))
    if (self.collector is not None):
        heartbeat['alerts'] = self.collector.alerts()
    return heartbeat
