def execute(configurations={}, parameters={}, host_name=None):
    '\n  Returns a tuple containing the result code and a pre-formatted result label\n\n  Keyword arguments:\n  configurations (dictionary): a mapping of configuration key to value\n  parameters (dictionary): a mapping of script parameter key to value\n  host_name (string): the name of this host where the alert is running\n  '
    if (configurations is None):
        return (RESULT_CODE_UNKNOWN, ['There were no configurations supplied to the script.'])
    if (SOLR_PORT in configurations):
        solr_port = configurations[SOLR_PORT]
    else:
        return (RESULT_CODE_UNKNOWN, ['No Solr port specified'])
    solr_memory_usage_warning = SOLR_MEMORY_USAGE_WARNING_DEFAULT
    if (SOLR_MEMORY_USAGE_WARNING_KEY in parameters):
        solr_memory_usage_warning = float(parameters[SOLR_MEMORY_USAGE_WARNING_KEY])
    solr_memory_usage_critical = SOLR_MEMORY_USAGE_CRITICAL_DEFAULT
    if (SOLR_MEMORY_USAGE_CRITICAL_KEY in parameters):
        solr_memory_usage_critical = float(parameters[SOLR_MEMORY_USAGE_CRITICAL_KEY])
    try:
        query = (('http://localhost:' + str(solr_port)) + '/solr/admin/cores?action=STATUS&indexInfo=false&wt=json')
        shard_response = urllib2.urlopen(query)
        shard_raw_data = shard_response.read()
        shard_json_data = json.loads(shard_raw_data)
        shard_name = shard_json_data['status'].keys()[0]
        query = (((('http://localhost:' + str(solr_port)) + '/solr/') + shard_name) + '/admin/system?wt=json')
        shard_details_response = urllib2.urlopen(query)
        shard_details_raw_data = shard_details_response.read()
        shard_details_json_data = json.loads(shard_details_raw_data)
        memory_percent = shard_details_json_data['jvm']['memory']['raw']['used%']
    except:
        label = CRITICAL_CONNECTION_MESSAGE.format(query, traceback.format_exc())
        return (RESULT_CODE_CRITICAL, [label])
    memory_load = (memory_percent / 100.0)
    label = MESSAGE.format(memory_load)
    if (memory_percent <= solr_memory_usage_warning):
        result_code = RESULT_CODE_OK
    elif (memory_percent <= solr_memory_usage_critical):
        result_code = RESULT_CODE_WARNING
    else:
        result_code = RESULT_CODE_CRITICAL
    return (result_code, [label])
