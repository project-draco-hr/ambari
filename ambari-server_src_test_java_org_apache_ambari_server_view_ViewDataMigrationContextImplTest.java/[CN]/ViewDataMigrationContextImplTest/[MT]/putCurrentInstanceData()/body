{
  ViewEntity entity1=getViewEntityMock(VERSION_1);
  ViewEntity entity2=getViewEntityMock(VERSION_2);
  replay(entity1,entity2);
  Capture<ViewInstanceDataEntity> capturedInstanceData1=Capture.newInstance();
  Collection data1=createNiceMock(Collection.class);
  expect(data1.add(capture(capturedInstanceData1))).andReturn(true);
  replay(data1);
  Capture<ViewInstanceDataEntity> capturedInstanceData2=Capture.newInstance();
  Collection data2=createStrictMock(Collection.class);
  expect(data2.add(capture(capturedInstanceData2))).andReturn(true);
  replay(data2);
  ViewInstanceEntity instanceEntity1=getViewInstanceEntityMock(entity1);
  expect(instanceEntity1.getData()).andReturn(data1);
  ViewInstanceEntity instanceEntity2=getViewInstanceEntityMock(entity2);
  expect(instanceEntity2.getData()).andReturn(data2);
  replay(instanceEntity1,instanceEntity2);
  ViewDataMigrationContextImpl context=new TestViewDataMigrationContextImpl(instanceEntity1,instanceEntity2);
  context.putOriginInstanceData("user1","key1","val1");
  context.putCurrentInstanceData("user2","key2","val2");
  verify(data2);
  Assert.assertEquals("user1",capturedInstanceData1.getValue().getUser());
  Assert.assertEquals("key1",capturedInstanceData1.getValue().getName());
  Assert.assertEquals("val1",capturedInstanceData1.getValue().getValue());
  Assert.assertEquals("user2",capturedInstanceData2.getValue().getUser());
  Assert.assertEquals("key2",capturedInstanceData2.getValue().getName());
  Assert.assertEquals("val2",capturedInstanceData2.getValue().getValue());
}
