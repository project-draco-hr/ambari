{
  ViewEntity entity1=getViewEntityMock(VERSION_1);
  ViewEntity entity2=getViewEntityMock(VERSION_2);
  EntityConfig entityConfig=createNiceMock(EntityConfig.class);
  expect(entityConfig.getClassName()).andReturn(SampleEntity.class.getName()).anyTimes();
  replay(entityConfig);
  PersistenceConfig persistenceConfig1=createStrictMock(PersistenceConfig.class);
  expect(persistenceConfig1.getEntities()).andReturn(Arrays.asList(entityConfig));
  PersistenceConfig persistenceConfig2=createStrictMock(PersistenceConfig.class);
  expect(persistenceConfig2.getEntities()).andReturn(Arrays.asList(entityConfig));
  replay(persistenceConfig1,persistenceConfig2);
  ViewConfig config1=createNiceMock(ViewConfig.class);
  expect(config1.getPersistence()).andReturn(persistenceConfig1);
  ViewConfig config2=createNiceMock(ViewConfig.class);
  expect(config2.getPersistence()).andReturn(persistenceConfig2);
  replay(config1,config2);
  expect(entity1.getConfiguration()).andReturn(config1);
  expect(entity2.getConfiguration()).andReturn(config2);
  replay(entity1,entity2);
  ViewInstanceEntity instanceEntity1=getViewInstanceEntityMock(entity1);
  ViewInstanceEntity instanceEntity2=getViewInstanceEntityMock(entity2);
  replay(instanceEntity1,instanceEntity2);
  ViewDataMigrationContextImpl context=new TestViewDataMigrationContextImpl(instanceEntity1,instanceEntity2);
  Map<String,Class> current=context.getCurrentEntityClasses();
  Assert.assertEquals(1,current.size());
  Assert.assertEquals(SampleEntity.class.getName(),current.entrySet().iterator().next().getKey());
  Assert.assertEquals(SampleEntity.class,current.entrySet().iterator().next().getValue());
  Map<String,Class> origin=context.getOriginEntityClasses();
  Assert.assertEquals(1,origin.size());
  Assert.assertEquals(SampleEntity.class.getName(),origin.entrySet().iterator().next().getKey());
  Assert.assertEquals(SampleEntity.class,origin.entrySet().iterator().next().getValue());
}
