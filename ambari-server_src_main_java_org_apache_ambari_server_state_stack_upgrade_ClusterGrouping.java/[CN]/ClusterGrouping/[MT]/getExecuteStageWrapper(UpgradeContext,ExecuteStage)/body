{
  String service=execution.service;
  String component=execution.component;
  ExecuteTask et=(ExecuteTask)execution.task;
  if (StringUtils.isNotBlank(service) && StringUtils.isNotBlank(component)) {
    if (!ctx.isScoped(execution.scope)) {
      return null;
    }
    if (!ctx.isServiceSupported(service)) {
      return null;
    }
    HostsType hosts=ctx.getResolver().getMasterAndHosts(service,component);
    if (hosts != null) {
      Set<String> realHosts=new LinkedHashSet<String>(hosts.hosts);
      if (ExecuteHostType.MASTER == et.hosts && null != hosts.master) {
        realHosts=Collections.singleton(hosts.master);
      }
      if (ExecuteHostType.ANY == et.hosts && !hosts.hosts.isEmpty()) {
        realHosts=Collections.singleton(hosts.hosts.iterator().next());
      }
      if (ExecuteHostType.FIRST == et.hosts && !hosts.hosts.isEmpty()) {
        List<String> sortedHosts=new ArrayList<>(hosts.hosts);
        Collections.sort(sortedHosts,String.CASE_INSENSITIVE_ORDER);
        realHosts=Collections.singleton(sortedHosts.get(0));
      }
      if (realHosts.isEmpty()) {
        return null;
      }
      return new StageWrapper(StageWrapper.Type.RU_TASKS,execution.title,new TaskWrapper(service,component,realHosts,et));
    }
  }
 else   if (null == service && null == component) {
    Cluster cluster=ctx.getCluster();
    Set<String> hostNames=new HashSet<String>();
    for (    Host host : ctx.getCluster().getHosts()) {
      MaintenanceState maintenanceState=host.getMaintenanceState(cluster.getClusterId());
      if (maintenanceState == MaintenanceState.OFF) {
        hostNames.add(host.getHostName());
      }
    }
    return new StageWrapper(StageWrapper.Type.RU_TASKS,execution.title,new TaskWrapper(service,component,hostNames,et));
  }
  return null;
}
