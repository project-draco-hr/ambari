{
  CommandReport commandReport=null;
  if (identityRecord != null) {
    if (operationHandler == null) {
      String message=String.format("Failed to create keytab file for %s, missing handler",evaluatedPrincipal);
      LOG.error(message);
      commandReport=createCommandReport(1,HostRoleStatus.FAILED,"{}","",message);
    }
 else {
      Map<String,String> principalPasswordMap=getPrincipalPasswordMap(requestSharedDataContext);
      if (principalPasswordMap != null) {
        String host=identityRecord.get(HOSTNAME);
        String keytabFilePath=identityRecord.get(KEYTAB_FILE_PATH);
        if ((host != null) && !host.isEmpty() && (keytabFilePath != null)&& !keytabFilePath.isEmpty()) {
          String password=principalPasswordMap.get(evaluatedPrincipal);
          if (password == null) {
            String message=String.format("Failed to create keytab file for %s, missing password",evaluatedPrincipal);
            LOG.error(message);
            commandReport=createCommandReport(1,HostRoleStatus.FAILED,"{}","",message);
          }
 else {
            File hostDirectory=new File(getDataDirectoryPath(),host);
            if (hostDirectory.exists() || hostDirectory.mkdirs()) {
              File keytabFile=new File(hostDirectory,DigestUtils.sha1Hex(keytabFilePath));
              if (operationHandler.createKeytabFile(evaluatedPrincipal,password,keytabFile)) {
                LOG.debug("Successfully created keytab file for {} at {}",evaluatedPrincipal,keytabFile.getAbsolutePath());
              }
 else {
                String message=String.format("Failed to create keytab file for %s at %s",evaluatedPrincipal,keytabFile.getAbsolutePath());
                LOG.error(message);
                commandReport=createCommandReport(1,HostRoleStatus.FAILED,"{}","",message);
              }
            }
 else {
              String message=String.format("Failed to create keytab file for %s, the container directory does not exist: %s",evaluatedPrincipal,hostDirectory.getAbsolutePath());
              LOG.error(message);
              commandReport=createCommandReport(1,HostRoleStatus.FAILED,"{}","",message);
            }
          }
        }
      }
    }
  }
  return commandReport;
}
