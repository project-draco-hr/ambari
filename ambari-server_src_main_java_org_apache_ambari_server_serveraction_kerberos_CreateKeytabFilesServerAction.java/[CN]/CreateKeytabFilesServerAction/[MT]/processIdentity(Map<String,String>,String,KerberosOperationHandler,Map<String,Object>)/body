{
  CommandReport commandReport=null;
  if (identityRecord != null) {
    String message=String.format("Creating keytab file for %s",evaluatedPrincipal);
    LOG.info(message);
    actionLog.writeStdOut(message);
    if (operationHandler == null) {
      message=String.format("Failed to create keytab file for %s, missing KerberosOperationHandler",evaluatedPrincipal);
      actionLog.writeStdErr(message);
      LOG.error(message);
      commandReport=createCommandReport(1,HostRoleStatus.FAILED,"{}",actionLog.getStdOut(),actionLog.getStdErr());
    }
 else {
      Map<String,String> principalPasswordMap=getPrincipalPasswordMap(requestSharedDataContext);
      Map<String,Integer> principalKeyNumberMap=getPrincipalKeyNumberMap(requestSharedDataContext);
      String host=identityRecord.get(HOSTNAME);
      String keytabFilePath=identityRecord.get(KEYTAB_FILE_PATH);
      if ((host != null) && !host.isEmpty() && (keytabFilePath != null)&& !keytabFilePath.isEmpty()) {
        String password=principalPasswordMap.get(evaluatedPrincipal);
        File hostDirectory=new File(getDataDirectoryPath(),host);
        if (hostDirectory.exists() || hostDirectory.mkdirs()) {
          File keytabFile=new File(hostDirectory,DigestUtils.sha1Hex(keytabFilePath));
          if (password == null) {
            if (kerberosPrincipalHostDAO.exists(evaluatedPrincipal,host)) {
              message=String.format("Skipping keytab file for %s, missing password indicates nothing to do",evaluatedPrincipal);
              LOG.debug(message);
            }
 else {
              KerberosPrincipalEntity principalEntity=kerberosPrincipalDAO.find(evaluatedPrincipal);
              String cachedKeytabPath=(principalEntity == null) ? null : principalEntity.getCachedKeytabPath();
              if (cachedKeytabPath == null) {
                message=String.format("Failed to create keytab file for %s, missing password",evaluatedPrincipal);
                actionLog.writeStdErr(message);
                LOG.error(message);
                commandReport=createCommandReport(1,HostRoleStatus.FAILED,"{}",actionLog.getStdOut(),actionLog.getStdErr());
              }
 else {
                try {
                  FileUtils.copyFile(new File(cachedKeytabPath),keytabFile);
                  message=String.format("Using cached keytab file for %s at %s",evaluatedPrincipal,keytabFile.getAbsolutePath());
                  LOG.debug(message);
                }
 catch (                IOException e) {
                  message=String.format("Failed to use cached keytab file for %s at %s: %s",evaluatedPrincipal,keytabFile.getAbsolutePath(),e.getMessage());
                  actionLog.writeStdErr(message);
                  LOG.warn(message);
                  commandReport=createCommandReport(1,HostRoleStatus.FAILED,"{}",actionLog.getStdOut(),actionLog.getStdErr());
                }
              }
            }
          }
 else {
            Integer keyNumber=principalKeyNumberMap.get(evaluatedPrincipal);
            try {
              if (operationHandler.createKeytabFile(evaluatedPrincipal,password,keyNumber,keytabFile)) {
                message=String.format("Successfully created keytab file for %s at %s",evaluatedPrincipal,keytabFile.getAbsolutePath());
                LOG.debug(message);
                KerberosPrincipalEntity principalEntity=kerberosPrincipalDAO.find(evaluatedPrincipal);
                if (principalEntity != null) {
                  if (!principalEntity.isService()) {
                    principalEntity.setCachedKeytabPath(keytabFilePath);
                    kerberosPrincipalDAO.merge(principalEntity);
                  }
                }
              }
 else {
                message=String.format("Failed to create keytab file for %s at %s",evaluatedPrincipal,keytabFile.getAbsolutePath());
                actionLog.writeStdErr(message);
                LOG.error(message);
                commandReport=createCommandReport(1,HostRoleStatus.FAILED,"{}",actionLog.getStdOut(),actionLog.getStdErr());
              }
            }
 catch (            KerberosOperationException e) {
              message=String.format("Failed to create keytab file for %s - %s",evaluatedPrincipal,e.getMessage());
              actionLog.writeStdErr(message);
              LOG.error(message,e);
              commandReport=createCommandReport(1,HostRoleStatus.FAILED,"{}",actionLog.getStdOut(),actionLog.getStdErr());
            }
          }
        }
 else {
          message=String.format("Failed to create keytab file for %s, the container directory does not exist: %s",evaluatedPrincipal,hostDirectory.getAbsolutePath());
          actionLog.writeStdErr(message);
          LOG.error(message);
          commandReport=createCommandReport(1,HostRoleStatus.FAILED,"{}",actionLog.getStdOut(),actionLog.getStdErr());
        }
      }
    }
  }
  return commandReport;
}
