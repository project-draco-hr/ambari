{
  CreateKeyTabKerberosAuditEvent.CreateKeyTabKerberosAuditEventBuilder auditEventBuilder=CreateKeyTabKerberosAuditEvent.builder();
  auditEventBuilder.withTimestamp(System.currentTimeMillis());
  auditEventBuilder.withRequestId(getHostRoleCommand().getRequestId());
  auditEventBuilder.withTaskId(getHostRoleCommand().getTaskId());
  CommandReport commandReport=null;
  String message=null;
  try {
    if (identityRecord != null) {
      String dataDirectory=getDataDirectoryPath();
      if (operationHandler == null) {
        message=String.format("Failed to create keytab file for %s, missing KerberosOperationHandler",evaluatedPrincipal);
        actionLog.writeStdErr(message);
        LOG.error(message);
        commandReport=createCommandReport(1,HostRoleStatus.FAILED,"{}",actionLog.getStdOut(),actionLog.getStdErr());
      }
 else       if (dataDirectory == null) {
        message="The data directory has not been set. Generated keytab files can not be stored.";
        LOG.error(message);
        commandReport=createCommandReport(1,HostRoleStatus.FAILED,"{}",actionLog.getStdOut(),actionLog.getStdErr());
      }
 else {
        Map<String,String> principalPasswordMap=getPrincipalPasswordMap(requestSharedDataContext);
        Map<String,Integer> principalKeyNumberMap=getPrincipalKeyNumberMap(requestSharedDataContext);
        String hostName=identityRecord.get(KerberosIdentityDataFileReader.HOSTNAME);
        String keytabFilePath=identityRecord.get(KerberosIdentityDataFileReader.KEYTAB_FILE_PATH);
        if ((hostName != null) && !hostName.isEmpty() && (keytabFilePath != null)&& !keytabFilePath.isEmpty()) {
          Set<String> visitedPrincipalKeys=visitedIdentities.get(evaluatedPrincipal);
          String visitationKey=String.format("%s|%s",hostName,keytabFilePath);
          if ((visitedPrincipalKeys == null) || !visitedPrincipalKeys.contains(visitationKey)) {
            String password=principalPasswordMap.get(evaluatedPrincipal);
            Integer keyNumber=principalKeyNumberMap.get(evaluatedPrincipal);
            message=String.format("Creating keytab file for %s on host %s",evaluatedPrincipal,hostName);
            LOG.info(message);
            actionLog.writeStdOut(message);
            auditEventBuilder.withPrincipal(evaluatedPrincipal).withHostName(hostName).withKeyTabFilePath(keytabFilePath);
            File hostDirectory=new File(dataDirectory,hostName);
            if (!hostDirectory.exists() && hostDirectory.mkdirs()) {
              ensureAmbariOnlyAccess(hostDirectory);
            }
            if (hostDirectory.exists()) {
              File destinationKeytabFile=new File(hostDirectory,DigestUtils.sha1Hex(keytabFilePath));
              HostEntity hostEntity=hostDAO.findByName(hostName);
              if (hostEntity == null && !hostName.equalsIgnoreCase(KerberosHelper.AMBARI_SERVER_HOST_NAME)) {
                message="Failed to find HostEntity for hostname = " + hostName;
                actionLog.writeStdErr(message);
                LOG.error(message);
                commandReport=createCommandReport(1,HostRoleStatus.FAILED,"{}",actionLog.getStdOut(),actionLog.getStdErr());
                return commandReport;
              }
              if (password == null) {
                if (hostName.equalsIgnoreCase(KerberosHelper.AMBARI_SERVER_HOST_NAME) || kerberosPrincipalHostDAO.exists(evaluatedPrincipal,hostEntity.getHostId())) {
                  message=String.format("Skipping keytab file for %s, missing password indicates nothing to do",evaluatedPrincipal);
                  LOG.debug(message);
                }
 else {
                  KerberosPrincipalEntity principalEntity=kerberosPrincipalDAO.find(evaluatedPrincipal);
                  String cachedKeytabPath=(principalEntity == null) ? null : principalEntity.getCachedKeytabPath();
                  if (cachedKeytabPath == null) {
                    message=String.format("Failed to create keytab for %s, missing cached file",evaluatedPrincipal);
                    actionLog.writeStdErr(message);
                    LOG.error(message);
                    commandReport=createCommandReport(1,HostRoleStatus.FAILED,"{}",actionLog.getStdOut(),actionLog.getStdErr());
                  }
 else {
                    try {
                      operationHandler.createKeytabFile(new File(cachedKeytabPath),destinationKeytabFile);
                    }
 catch (                    KerberosOperationException e) {
                      message=String.format("Failed to create keytab file for %s - %s",evaluatedPrincipal,e.getMessage());
                      actionLog.writeStdErr(message);
                      LOG.error(message,e);
                      commandReport=createCommandReport(1,HostRoleStatus.FAILED,"{}",actionLog.getStdOut(),actionLog.getStdErr());
                    }
                  }
                }
              }
 else {
                boolean canCache=("true".equalsIgnoreCase(identityRecord.get(KerberosIdentityDataFileReader.KEYTAB_FILE_IS_CACHABLE)));
                Keytab keytab=createKeytab(evaluatedPrincipal,password,keyNumber,operationHandler,visitedPrincipalKeys != null,canCache,actionLog);
                if (keytab != null) {
                  try {
                    if (operationHandler.createKeytabFile(keytab,destinationKeytabFile)) {
                      ensureAmbariOnlyAccess(destinationKeytabFile);
                      message=String.format("Successfully created keytab file for %s at %s",evaluatedPrincipal,destinationKeytabFile.getAbsolutePath());
                      LOG.debug(message);
                      auditEventBuilder.withPrincipal(evaluatedPrincipal).withHostName(hostName).withKeyTabFilePath(destinationKeytabFile.getAbsolutePath());
                    }
 else {
                      message=String.format("Failed to create keytab file for %s at %s",evaluatedPrincipal,destinationKeytabFile.getAbsolutePath());
                      actionLog.writeStdErr(message);
                      LOG.error(message);
                      commandReport=createCommandReport(1,HostRoleStatus.FAILED,"{}",actionLog.getStdOut(),actionLog.getStdErr());
                    }
                  }
 catch (                  KerberosOperationException e) {
                    message=String.format("Failed to create keytab file for %s - %s",evaluatedPrincipal,e.getMessage());
                    actionLog.writeStdErr(message);
                    LOG.error(message,e);
                    commandReport=createCommandReport(1,HostRoleStatus.FAILED,"{}",actionLog.getStdOut(),actionLog.getStdErr());
                  }
                }
 else {
                  commandReport=createCommandReport(1,HostRoleStatus.FAILED,"{}",actionLog.getStdOut(),actionLog.getStdErr());
                }
                if (visitedPrincipalKeys == null) {
                  visitedPrincipalKeys=new HashSet<String>();
                  visitedIdentities.put(evaluatedPrincipal,visitedPrincipalKeys);
                }
                visitedPrincipalKeys.add(visitationKey);
              }
            }
 else {
              message=String.format("Failed to create keytab file for %s, the container directory does not exist: %s",evaluatedPrincipal,hostDirectory.getAbsolutePath());
              actionLog.writeStdErr(message);
              LOG.error(message);
              commandReport=createCommandReport(1,HostRoleStatus.FAILED,"{}",actionLog.getStdOut(),actionLog.getStdErr());
            }
          }
 else {
            LOG.debug(String.format("Skipping previously processed keytab for %s on host %s",evaluatedPrincipal,hostName));
          }
        }
      }
    }
  }
  finally {
    if (commandReport != null && HostRoleStatus.FAILED.toString().equals(commandReport.getStatus())) {
      auditEventBuilder.withReasonOfFailure(message == null ? "Unknown error" : message);
    }
    if (commandReport != null || auditEventBuilder.hasPrincipal()) {
      auditLog(auditEventBuilder.build());
    }
  }
  return commandReport;
}
