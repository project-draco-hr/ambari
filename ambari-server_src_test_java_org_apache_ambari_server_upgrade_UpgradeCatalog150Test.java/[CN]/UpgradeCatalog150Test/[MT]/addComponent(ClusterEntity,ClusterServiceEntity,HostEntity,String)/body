{
  ServiceComponentDesiredStateEntity componentDesiredStateEntity=new ServiceComponentDesiredStateEntity();
  componentDesiredStateEntity.setClusterServiceEntity(clusterServiceEntity);
  componentDesiredStateEntity.setComponentName(componentName);
  componentDesiredStateEntity.setHostComponentStateEntities(new ArrayList<HostComponentStateEntity>());
  HostComponentDesiredStateEntity hostComponentDesiredStateEntity=new HostComponentDesiredStateEntity();
  hostComponentDesiredStateEntity.setAdminState(HostComponentAdminState.INSERVICE);
  hostComponentDesiredStateEntity.setServiceComponentDesiredStateEntity(componentDesiredStateEntity);
  hostComponentDesiredStateEntity.setHostEntity(hostEntity);
  HostComponentStateEntity hostComponentStateEntity=new HostComponentStateEntity();
  hostComponentStateEntity.setHostEntity(hostEntity);
  hostComponentStateEntity.setHostName(hostEntity.getHostName());
  hostComponentStateEntity.setCurrentStackVersion(clusterEntity.getDesiredStackVersion());
  hostComponentStateEntity.setServiceComponentDesiredStateEntity(componentDesiredStateEntity);
  componentDesiredStateEntity.getHostComponentStateEntities().add(hostComponentStateEntity);
  componentDesiredStateEntity.setHostComponentDesiredStateEntities(new ArrayList<HostComponentDesiredStateEntity>());
  componentDesiredStateEntity.getHostComponentDesiredStateEntities().add(hostComponentDesiredStateEntity);
  hostEntity.getHostComponentStateEntities().add(hostComponentStateEntity);
  hostEntity.getHostComponentDesiredStateEntities().add(hostComponentDesiredStateEntity);
  clusterServiceEntity.getServiceComponentDesiredStateEntities().add(componentDesiredStateEntity);
  ClusterServiceDAO clusterServiceDAO=injector.getInstance(ClusterServiceDAO.class);
  clusterServiceDAO.merge(clusterServiceEntity);
}
