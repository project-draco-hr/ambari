{
  super(configuration);
  Injector injector=Guice.createInjector(Modules.override(new InMemoryDefaultTestModule()).with(new MockModule()));
  injector.getInstance(GuiceJpaInitializer.class);
  injector.getInstance(EntityManager.class);
  Class<?> c=getClass().getSuperclass();
  metaInfoDAO=injector.getInstance(MetainfoDAO.class);
  Field f=c.getDeclaredField("metaInfoDAO");
  f.setAccessible(true);
  f.set(this,metaInfoDAO);
  StackManagerFactory stackManagerFactory=injector.getInstance(StackManagerFactory.class);
  f=c.getDeclaredField("stackManagerFactory");
  f.setAccessible(true);
  f.set(this,stackManagerFactory);
  alertDefinitionDAO=createNiceMock(AlertDefinitionDAO.class);
  f=c.getDeclaredField("alertDefinitionDao");
  f.setAccessible(true);
  f.set(this,alertDefinitionDAO);
  alertDefinitionFactory=new AlertDefinitionFactory();
  f=c.getDeclaredField("alertDefinitionFactory");
  f.setAccessible(true);
  f.set(this,alertDefinitionFactory);
  AmbariEventPublisher ambariEventPublisher=new AmbariEventPublisher();
  f=c.getDeclaredField("eventPublisher");
  f.setAccessible(true);
  f.set(this,ambariEventPublisher);
  Configuration config=createNiceMock(Configuration.class);
  expect(config.getSharedResourcesDirPath()).andReturn("./src/test/resources").anyTimes();
  replay(config);
  osFamily=new OsFamily(config);
  f=c.getDeclaredField("osFamily");
  f.setAccessible(true);
  f.set(this,osFamily);
}
