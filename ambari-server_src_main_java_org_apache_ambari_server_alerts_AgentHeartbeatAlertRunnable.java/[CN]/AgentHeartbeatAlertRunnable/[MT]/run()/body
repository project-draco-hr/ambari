{
  try {
    Map<String,Cluster> clusterMap=m_clustersProvider.get().getClusters();
    for (    Cluster cluster : clusterMap.values()) {
      AlertDefinitionEntity entity=m_dao.findByName(cluster.getClusterId(),HEARTBEAT_DEFINITION_NAME);
      if (null == entity || !entity.getEnabled()) {
        continue;
      }
      long alertTimestamp=System.currentTimeMillis();
      Map<String,Host> hostMap=m_clustersProvider.get().getHostsForCluster(cluster.getClusterName());
      Set<Entry<String,Host>> entries=hostMap.entrySet();
      for (      Entry<String,Host> entry : entries) {
        String hostName=entry.getKey();
        Host host=entry.getValue();
        String alertText;
        AlertState alertState=AlertState.OK;
        HostState hostState=host.getState();
switch (hostState) {
case INIT:
          alertText=MessageFormat.format(INIT_MSG,hostName);
        break;
case HEALTHY:
      alertText=MessageFormat.format(HEALTHY_MSG,hostName);
    break;
case WAITING_FOR_HOST_STATUS_UPDATES:
  alertText=MessageFormat.format(STATUS_UPDATE_MSG,hostName);
break;
case HEARTBEAT_LOST:
alertState=AlertState.CRITICAL;
alertText=MessageFormat.format(HEARTBEAT_LOST_MSG,hostName);
break;
case UNHEALTHY:
alertState=AlertState.CRITICAL;
alertText=MessageFormat.format(UNHEALTHY_MSG,hostName);
default :
alertState=AlertState.UNKNOWN;
alertText=MessageFormat.format(UNKNOWN_MSG,hostName,hostState);
break;
}
Alert alert=new Alert(entity.getDefinitionName(),null,entity.getServiceName(),entity.getComponentName(),hostName,alertState);
alert.setLabel(entity.getLabel());
alert.setText(alertText);
alert.setTimestamp(alertTimestamp);
AlertReceivedEvent event=new AlertReceivedEvent(cluster.getClusterId(),alert);
m_alertEventPublisher.publish(event);
}
}
}
 catch (Exception exception) {
LOG.error("Unable to run the {} alert",HEARTBEAT_DEFINITION_NAME,exception);
}
}
