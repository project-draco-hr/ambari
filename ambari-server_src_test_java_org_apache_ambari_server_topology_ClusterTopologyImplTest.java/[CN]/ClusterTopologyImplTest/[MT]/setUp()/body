{
  configuration=new Configuration(new HashMap<String,Map<String,String>>(),new HashMap<String,Map<String,Map<String,String>>>());
  HostGroupInfo group1Info=new HostGroupInfo("group1");
  HostGroupInfo group2Info=new HostGroupInfo("group2");
  HostGroupInfo group3Info=new HostGroupInfo("group3");
  HostGroupInfo group4Info=new HostGroupInfo("group4");
  hostGroupInfoMap.put("group1",group1Info);
  hostGroupInfoMap.put("group2",group2Info);
  hostGroupInfoMap.put("group3",group3Info);
  hostGroupInfoMap.put("group4",group4Info);
  group1Info.setConfiguration(configuration);
  Collection<String> group1Hosts=new HashSet<String>();
  group1Hosts.add("host1");
  group1Hosts.add("host2");
  group1Info.addHosts(group1Hosts);
  group2Info.setConfiguration(configuration);
  Collection<String> group2Hosts=new HashSet<String>();
  group2Hosts.add("host3");
  group2Info.addHosts(group2Hosts);
  group3Info.setConfiguration(configuration);
  group3Info.setRequestedCount(5);
  group4Info.setConfiguration(configuration);
  group4Info.setRequestedCount(5);
  group4Info.setPredicate(predicate);
  expect(blueprint.getConfiguration()).andReturn(configuration).anyTimes();
  hostGroupMap.put("group1",group1);
  hostGroupMap.put("group2",group2);
  hostGroupMap.put("group3",group3);
  hostGroupMap.put("group4",group4);
  Set<Component> group1Components=new HashSet<Component>();
  group1Components.add(new Component("component1"));
  group1Components.add(new Component("component2"));
  Set<Component> group2Components=new HashSet<Component>();
  group2Components.add(new Component("component3"));
  Set<Component> group3Components=new HashSet<Component>();
  group3Components.add(new Component("component4"));
  Set<Component> group4Components=new HashSet<Component>();
  group4Components.add(new Component("component5"));
  expect(blueprint.getHostGroups()).andReturn(hostGroupMap).anyTimes();
  expect(blueprint.getHostGroup("group1")).andReturn(group1).anyTimes();
  expect(blueprint.getHostGroup("group2")).andReturn(group2).anyTimes();
  expect(blueprint.getHostGroup("group3")).andReturn(group3).anyTimes();
  expect(blueprint.getHostGroup("group4")).andReturn(group4).anyTimes();
  expect(group1.getConfiguration()).andReturn(configuration).anyTimes();
  expect(group2.getConfiguration()).andReturn(configuration).anyTimes();
  expect(group3.getConfiguration()).andReturn(configuration).anyTimes();
  expect(group4.getConfiguration()).andReturn(configuration).anyTimes();
  expect(group1.getComponents()).andReturn(group1Components).anyTimes();
  expect(group2.getComponents()).andReturn(group2Components).anyTimes();
  expect(group3.getComponents()).andReturn(group3Components).anyTimes();
  expect(group4.getComponents()).andReturn(group4Components).anyTimes();
}
