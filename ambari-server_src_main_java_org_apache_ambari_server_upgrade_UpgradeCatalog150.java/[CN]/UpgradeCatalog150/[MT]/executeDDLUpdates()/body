{
  LOG.debug("Upgrading schema...");
  DatabaseType databaseType=configuration.getDatabaseType();
  List<DBColumnInfo> columns=new ArrayList<DBColumnInfo>();
  columns.add(new DBColumnInfo("cluster_id",Long.class,null,null,false));
  columns.add(new DBColumnInfo("type_name",String.class,255,null,false));
  columns.add(new DBColumnInfo("version_tag",String.class,255,null,false));
  columns.add(new DBColumnInfo("create_timestamp",Long.class,null,null,false));
  columns.add(new DBColumnInfo("selected",Integer.class,0,null,false));
  columns.add(new DBColumnInfo("user_name",String.class,255,"_db",false));
  dbAccessor.createTable("clusterconfigmapping",columns,"cluster_id","type_name","create_timestamp");
  columns.clear();
  columns.add(new DBColumnInfo("request_id",Long.class,null,null,false));
  columns.add(new DBColumnInfo("cluster_id",Long.class,null,null,true));
  columns.add(new DBColumnInfo("request_schedule_id",Long.class,null,null,true));
  columns.add(new DBColumnInfo("command_name",String.class,255,null,true));
  columns.add(new DBColumnInfo("create_time",Long.class,null,null,true));
  columns.add(new DBColumnInfo("end_time",Long.class,null,null,true));
  columns.add(new DBColumnInfo("inputs",byte[].class,null,null,true));
  columns.add(new DBColumnInfo("request_context",String.class,255,null,true));
  columns.add(new DBColumnInfo("request_type",String.class,255,null,true));
  columns.add(new DBColumnInfo("start_time",Long.class,null,null,false));
  columns.add(new DBColumnInfo("status",String.class,255));
  dbAccessor.createTable("request",columns,"request_id");
  columns.clear();
  columns.add(new DBColumnInfo("schedule_id",Long.class,null,null,false));
  columns.add(new DBColumnInfo("cluster_id",Long.class,null,null,false));
  columns.add(new DBColumnInfo("description",String.class,255,null,true));
  columns.add(new DBColumnInfo("status",String.class,255,null,true));
  columns.add(new DBColumnInfo("batch_separation_seconds",Integer.class,null,null,true));
  columns.add(new DBColumnInfo("batch_toleration_limit",Integer.class,null,null,true));
  columns.add(new DBColumnInfo("create_user",String.class,255,null,true));
  columns.add(new DBColumnInfo("create_timestamp",Long.class,null,null,true));
  columns.add(new DBColumnInfo("update_user",String.class,255,null,true));
  columns.add(new DBColumnInfo("update_timestamp",Long.class,null,null,true));
  columns.add(new DBColumnInfo("minutes",String.class,10,null,true));
  columns.add(new DBColumnInfo("hours",String.class,10,null,true));
  columns.add(new DBColumnInfo("days_of_month",String.class,10,null,true));
  columns.add(new DBColumnInfo("month",String.class,10,null,true));
  columns.add(new DBColumnInfo("day_of_week",String.class,10,null,true));
  columns.add(new DBColumnInfo("yearToSchedule",String.class,10,null,true));
  columns.add(new DBColumnInfo("startTime",String.class,50,null,true));
  columns.add(new DBColumnInfo("endTime",String.class,50,null,true));
  columns.add(new DBColumnInfo("last_execution_status",String.class,255,null,true));
  dbAccessor.createTable("requestschedule",columns,"schedule_id");
  columns.clear();
  columns.add(new DBColumnInfo("schedule_id",Long.class,null,null,false));
  columns.add(new DBColumnInfo("batch_id",Long.class,null,null,false));
  columns.add(new DBColumnInfo("request_id",Long.class,null,null,true));
  columns.add(new DBColumnInfo("request_type",String.class,255,null,true));
  columns.add(new DBColumnInfo("request_uri",String.class,1024,null,true));
  columns.add(new DBColumnInfo("request_body",byte[].class,null,null,true));
  columns.add(new DBColumnInfo("request_status",String.class,255,null,true));
  columns.add(new DBColumnInfo("return_code",Integer.class,null,null,true));
  columns.add(new DBColumnInfo("return_message",String.class,2000,null,true));
  dbAccessor.createTable("requestschedulebatchrequest",columns,"schedule_id","batch_id");
  columns.clear();
  columns.add(new DBColumnInfo("cluster_id",Long.class,null,null,false));
  columns.add(new DBColumnInfo("host_name",String.class,255,null,false));
  columns.add(new DBColumnInfo("type_name",String.class,255,null,false));
  columns.add(new DBColumnInfo("version_tag",String.class,255,null,true));
  columns.add(new DBColumnInfo("service_name",String.class,255,null,true));
  columns.add(new DBColumnInfo("create_timestamp",Long.class,null,null,false));
  columns.add(new DBColumnInfo("selected",Integer.class,0,null,false));
  dbAccessor.createTable("hostconfigmapping",columns,"cluster_id","host_name","type_name","create_timestamp");
  columns.clear();
  columns.add(new DBColumnInfo("sequence_name",String.class,255,null,false));
  columns.add(new DBColumnInfo("value",Long.class,null,null,false));
  dbAccessor.createTable("ambari_sequences",columns,"sequence_name");
  columns.clear();
  columns.add(new DBColumnInfo("metainfo_key",String.class,255,null,false));
  columns.add(new DBColumnInfo("metainfo_value",String.class,255,null,false));
  dbAccessor.createTable("metainfo",columns,"metainfo_key");
  columns.clear();
  columns.add(new DBColumnInfo("group_id",Long.class,null,null,false));
  columns.add(new DBColumnInfo("cluster_id",Long.class,null,null,false));
  columns.add(new DBColumnInfo("group_name",String.class,255,null,false));
  columns.add(new DBColumnInfo("tag",String.class,1024,null,false));
  columns.add(new DBColumnInfo("description",String.class,1024,null,true));
  columns.add(new DBColumnInfo("create_timestamp",Long.class,null,null,false));
  dbAccessor.createTable("configgroup",columns,"group_id");
  columns.clear();
  columns.add(new DBColumnInfo("config_group_id",Long.class,null,null,false));
  columns.add(new DBColumnInfo("cluster_id",Long.class,null,null,false));
  columns.add(new DBColumnInfo("config_type",String.class,255,null,false));
  columns.add(new DBColumnInfo("version_tag",String.class,255,null,false));
  columns.add(new DBColumnInfo("user_name",String.class,255,"_db",true));
  columns.add(new DBColumnInfo("create_timestamp",Long.class,null,null,false));
  dbAccessor.createTable("confgroupclusterconfigmapping",columns,"config_group_id","cluster_id","config_type");
  columns.clear();
  columns.add(new DBColumnInfo("config_group_id",Long.class,null,null,false));
  columns.add(new DBColumnInfo("host_name",String.class,255,null,false));
  dbAccessor.createTable("configgrouphostmapping",columns,"config_group_id","host_name");
  columns.clear();
  columns.add(new DBColumnInfo("blueprint_name",String.class,255,null,false));
  columns.add(new DBColumnInfo("stack_name",String.class,255,null,false));
  columns.add(new DBColumnInfo("stack_version",String.class,255,null,false));
  dbAccessor.createTable("blueprint",columns,"blueprint_name");
  columns.clear();
  columns.add(new DBColumnInfo("blueprint_name",String.class,255,null,false));
  columns.add(new DBColumnInfo("type_name",String.class,255,null,false));
  columns.add(new DBColumnInfo("config_data",byte[].class,null,null,false));
  dbAccessor.createTable("blueprint_configuration",columns,"blueprint_name","type_name");
  columns.clear();
  columns.add(new DBColumnInfo("blueprint_name",String.class,255,null,false));
  columns.add(new DBColumnInfo("name",String.class,255,null,false));
  columns.add(new DBColumnInfo("cardinality",String.class,255,null,false));
  dbAccessor.createTable("hostgroup",columns,"blueprint_name","name");
  columns.clear();
  columns.add(new DBColumnInfo("blueprint_name",String.class,255,null,false));
  columns.add(new DBColumnInfo("hostgroup_name",String.class,255,null,false));
  columns.add(new DBColumnInfo("name",String.class,255,null,false));
  dbAccessor.createTable("hostgroup_component",columns,"blueprint_name","hostgroup_name","name");
  columns.clear();
  columns.add(new DBColumnInfo("filter_id",Long.class,null,null,false));
  columns.add(new DBColumnInfo("request_id",Long.class,null,null,false));
  columns.add(new DBColumnInfo("service_name",String.class,255,null,true));
  columns.add(new DBColumnInfo("component_name",String.class,255,null,true));
  columns.add(new DBColumnInfo("hosts",byte[].class,null,null,true));
  dbAccessor.createTable("requestresourcefilter",columns,"filter_id");
  createQuartzTables();
  dbAccessor.addColumn("hostcomponentdesiredstate",new DBColumnInfo("maintenance_state",String.class,32,"OFF",false));
  dbAccessor.addColumn("servicedesiredstate",new DBColumnInfo("maintenance_state",String.class,32,"OFF",false));
  dbAccessor.addColumn("hoststate",new DBColumnInfo("maintenance_state",String.class,512,null,true));
  dbAccessor.addColumn("hostcomponentdesiredstate",new DBColumnInfo("admin_state",String.class,32,null,true));
  dbAccessor.addColumn("hosts",new DBColumnInfo("ph_cpu_count",Integer.class,32,null,true));
  dbAccessor.addColumn("clusterstate",new DBColumnInfo("current_stack_version",String.class,255,null,false));
  dbAccessor.addColumn("hostconfigmapping",new DBColumnInfo("user_name",String.class,255,"_db",false));
  dbAccessor.addColumn("stage",new DBColumnInfo("request_context",String.class,255,null,true));
  dbAccessor.addColumn("stage",new DBColumnInfo("cluster_host_info",byte[].class,null,null,true));
  dbAccessor.addColumn("clusterconfigmapping",new DBColumnInfo("user_name",String.class,255,"_db",false));
  dbAccessor.addColumn("host_role_command",new DBColumnInfo("end_time",Long.class,null,null,true));
  dbAccessor.addColumn("host_role_command",new DBColumnInfo("structured_out",byte[].class,null,null,true));
  dbAccessor.addColumn("host_role_command",new DBColumnInfo("command_detail",String.class,255,null,true));
  dbAccessor.addColumn("host_role_command",new DBColumnInfo("custom_command_name",String.class,255,null,true));
  if (databaseType == DatabaseType.POSTGRES) {
    if (dbAccessor.tableExists("hostcomponentdesiredconfigmapping")) {
      dbAccessor.executeQuery("ALTER TABLE hostcomponentdesiredconfigmapping rename to hcdesiredconfigmapping",true);
    }
    dbAccessor.executeQuery("ALTER TABLE users ALTER column user_id DROP DEFAULT",true);
    dbAccessor.executeQuery("ALTER TABLE users ALTER column ldap_user TYPE INTEGER USING CASE WHEN ldap_user=true THEN 1 ELSE 0 END",true);
  }
  if (databaseType == DatabaseType.ORACLE || databaseType == DatabaseType.POSTGRES) {
    if (dbAccessor.tableHasColumn("hosts","disks_info")) {
      dbAccessor.executeQuery("ALTER TABLE hosts DROP COLUMN disks_info",true);
    }
  }
  if (databaseType == DatabaseType.MYSQL) {
    String dbName=configuration.getServerJDBCPostgresSchemaName();
    moveRCATableInMySQL("workflow",dbName);
    moveRCATableInMySQL("job",dbName);
    moveRCATableInMySQL("task",dbName);
    moveRCATableInMySQL("taskAttempt",dbName);
    moveRCATableInMySQL("hdfsEvent",dbName);
    moveRCATableInMySQL("mapreduceEvent",dbName);
    moveRCATableInMySQL("clusterEvent",dbName);
    dbAccessor.executeQuery("DROP DATABASE IF EXISTS ambarirca");
  }
  String tableName="request";
  if (!dbAccessor.tableExists(tableName)) {
    String msg=String.format("Table \"%s\" was not created during schema upgrade",tableName);
    LOG.error(msg);
    throw new AmbariException(msg);
  }
 else   if (!dbAccessor.tableHasData(tableName)) {
    String query=null;
    if (databaseType == DatabaseType.POSTGRES) {
      query=getPostgresRequestUpgradeQuery();
    }
 else     if (databaseType == DatabaseType.ORACLE) {
      query=getOracleRequestUpgradeQuery();
    }
 else     if (databaseType == DatabaseType.MYSQL) {
      query=getMysqlRequestUpgradeQuery();
    }
    if (query != null) {
      dbAccessor.executeQuery(query);
    }
  }
 else {
    LOG.info("Table {} already filled",tableName);
  }
  if (databaseType == DatabaseType.POSTGRES || databaseType == DatabaseType.MYSQL || databaseType == DatabaseType.DERBY) {
    dbAccessor.dropConstraint("clusterconfigmapping","FK_clusterconfigmapping_cluster_id");
    dbAccessor.dropConstraint("hostcomponentdesiredstate","FK_hostcomponentdesiredstate_host_name");
    dbAccessor.dropConstraint("hostcomponentdesiredstate","FK_hostcomponentdesiredstate_component_name");
    dbAccessor.dropConstraint("hostcomponentstate","FK_hostcomponentstate_component_name");
    dbAccessor.dropConstraint("hostcomponentstate","FK_hostcomponentstate_host_name");
    dbAccessor.dropConstraint("servicecomponentdesiredstate","FK_servicecomponentdesiredstate_service_name");
    dbAccessor.dropConstraint("servicedesiredstate","FK_servicedesiredstate_service_name");
    dbAccessor.dropConstraint("role_success_criteria","FK_role_success_criteria_stage_id");
    dbAccessor.dropConstraint("ClusterHostMapping","FK_ClusterHostMapping_host_name");
    dbAccessor.dropConstraint("ClusterHostMapping","FK_ClusterHostMapping_cluster_id");
    dbAccessor.addFKConstraint("clusterconfigmapping","clusterconfigmappingcluster_id","cluster_id","clusters","cluster_id",false);
    dbAccessor.addFKConstraint("hostcomponentdesiredstate","hstcmponentdesiredstatehstname","host_name","hosts","host_name",false);
    dbAccessor.addFKConstraint("hostcomponentdesiredstate","hstcmpnntdesiredstatecmpnntnme",new String[]{"component_name","cluster_id","service_name"},"servicecomponentdesiredstate",new String[]{"component_name","cluster_id","service_name"},false);
    dbAccessor.addFKConstraint("hostcomponentstate","hstcomponentstatecomponentname",new String[]{"component_name","cluster_id","service_name"},"servicecomponentdesiredstate",new String[]{"component_name","cluster_id","service_name"},false);
    dbAccessor.addFKConstraint("hostcomponentstate","hostcomponentstate_host_name","host_name","hosts","host_name",false);
    dbAccessor.addFKConstraint("servicecomponentdesiredstate","srvccmponentdesiredstatesrvcnm",new String[]{"service_name","cluster_id"},"clusterservices",new String[]{"service_name","cluster_id"},false);
    dbAccessor.addFKConstraint("servicedesiredstate","servicedesiredstateservicename",new String[]{"service_name","cluster_id"},"clusterservices",new String[]{"service_name","cluster_id"},false);
    dbAccessor.addFKConstraint("role_success_criteria","role_success_criteria_stage_id",new String[]{"stage_id","request_id"},"stage",new String[]{"stage_id","request_id"},false);
    dbAccessor.addFKConstraint("ClusterHostMapping","ClusterHostMapping_cluster_id","cluster_id","clusters","cluster_id",false);
    dbAccessor.addFKConstraint("ClusterHostMapping","ClusterHostMapping_host_name","host_name","hosts","host_name",false);
    dbAccessor.dropConstraint("confgroupclusterconfigmapping","FK_confgroupclusterconfigmapping_config_tag",true);
    dbAccessor.dropConstraint("confgroupclusterconfigmapping","FK_confgroupclusterconfigmapping_group_id",true);
    dbAccessor.dropConstraint("configgrouphostmapping","FK_configgrouphostmapping_configgroup_id",true);
    dbAccessor.dropConstraint("configgrouphostmapping","FK_configgrouphostmapping_host_name",true);
  }
  dbAccessor.addFKConstraint("stage","FK_stage_request_id","request_id","request","request_id",true);
  dbAccessor.addFKConstraint("request","FK_request_cluster_id","cluster_id","clusters","cluster_id",true);
  dbAccessor.addFKConstraint("request","FK_request_schedule_id","request_schedule_id","requestschedule","schedule_id",true);
  dbAccessor.addFKConstraint("requestschedulebatchrequest","FK_rsbatchrequest_schedule_id","schedule_id","requestschedule","schedule_id",true);
  dbAccessor.addFKConstraint("hostconfigmapping","FK_hostconfmapping_cluster_id","cluster_id","clusters","cluster_id",true);
  dbAccessor.addFKConstraint("hostconfigmapping","FK_hostconfmapping_host_name","host_name","hosts","host_name",true);
  dbAccessor.addFKConstraint("configgroup","FK_configgroup_cluster_id","cluster_id","clusters","cluster_id",true);
  dbAccessor.addFKConstraint("confgroupclusterconfigmapping","FK_confg",new String[]{"version_tag","config_type","cluster_id"},"clusterconfig",new String[]{"version_tag","type_name","cluster_id"},true);
  dbAccessor.addFKConstraint("confgroupclusterconfigmapping","FK_cgccm_gid","config_group_id","configgroup","group_id",true);
  dbAccessor.addFKConstraint("configgrouphostmapping","FK_cghm_cgid","config_group_id","configgroup","group_id",true);
  dbAccessor.addFKConstraint("configgrouphostmapping","FK_cghm_hname","host_name","hosts","host_name",true);
  dbAccessor.addFKConstraint("clusterconfigmapping","FK_clustercfgmap_cluster_id","cluster_id","clusters","cluster_id",true);
  dbAccessor.addFKConstraint("requestresourcefilter","FK_reqresfilter_req_id","request_id","request","request_id",true);
  dbAccessor.addFKConstraint("hostgroup","FK_hostgroup_blueprint_name","blueprint_name","blueprint","blueprint_name",true);
  dbAccessor.addFKConstraint("hostgroup_component","FK_hg_blueprint_name","blueprint_name","hostgroup","blueprint_name",true);
  dbAccessor.addFKConstraint("hostgroup_component","FK_hgc_blueprint_name","hostgroup_name","hostgroup","name",true);
  dbAccessor.addFKConstraint("blueprint_configuration","FK_cfg_blueprint_name","blueprint_name","blueprint","blueprint_name",true);
}
