{
  ResourceInstance resource=createMock(ResourceInstance.class);
  ResourceDefinition resourceDefinition=createMock(ResourceDefinition.class);
  ClusterController controller=createMock(ClusterController.class);
  Schema schema=createMock(Schema.class);
  Request serverRequest=createStrictMock(Request.class);
  Query query=createMock(Query.class);
  Predicate predicate=createMock(Predicate.class);
  RequestBody body=new RequestBody();
  String clusterId="clusterId";
  String serviceId="serviceId";
  Map<Resource.Type,String> mapResourceIds=new HashMap<Resource.Type,String>();
  mapResourceIds.put(Resource.Type.Cluster,clusterId);
  mapResourceIds.put(Resource.Type.Service,serviceId);
  Map<String,Object> mapProperties=new HashMap<String,Object>();
  mapProperties.put(PropertyHelper.getPropertyId("foo","bar"),"value");
  NamedPropertySet namedPropSet=new NamedPropertySet("",mapProperties);
  body.addPropertySet(namedPropSet);
  Set<Map<String,Object>> setExpected=new HashSet<Map<String,Object>>();
  setExpected.add(mapProperties);
  expect(resource.getKeyValueMap()).andReturn(mapResourceIds);
  expect(resource.getResourceDefinition()).andReturn(resourceDefinition).atLeastOnce();
  expect(controller.getSchema(Resource.Type.Component)).andReturn(schema);
  expect(resourceDefinition.getType()).andReturn(Resource.Type.Component);
  expect(resource.getQuery()).andReturn(query);
  expect(query.getPredicate()).andReturn(predicate);
  expect(schema.getKeyPropertyId(Resource.Type.Cluster)).andReturn(clusterId);
  expect(schema.getKeyPropertyId(Resource.Type.Service)).andReturn(serviceId);
  expect(controller.updateResources(Resource.Type.Component,serverRequest,predicate)).andReturn(new RequestStatusImpl(null));
  replay(resource,resourceDefinition,controller,schema,serverRequest,query,predicate);
  new TestPersistenceManager(controller,setExpected,serverRequest).update(resource,body);
  verify(resource,resourceDefinition,controller,schema,serverRequest,query,predicate);
}
