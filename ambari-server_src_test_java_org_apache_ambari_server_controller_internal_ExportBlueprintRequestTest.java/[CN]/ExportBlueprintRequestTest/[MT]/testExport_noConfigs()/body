{
  Resource clusterResource=new ResourceImpl(Resource.Type.Cluster);
  clusterResource.setProperty(ClusterResourceProvider.CLUSTER_NAME_PROPERTY_ID,CLUSTER_NAME);
  clusterResource.setProperty(ClusterResourceProvider.CLUSTER_ID_PROPERTY_ID,CLUSTER_ID);
  clusterResource.setProperty(ClusterResourceProvider.CLUSTER_VERSION_PROPERTY_ID,"TEST-1.0");
  TreeNode<Resource> clusterNode=new TreeNodeImpl<Resource>(null,clusterResource,"cluster");
  Resource configResource=new ResourceImpl(Resource.Type.Configuration);
  clusterNode.addChild(configResource,"configurations");
  Resource hostsResource=new ResourceImpl(Resource.Type.Host);
  Resource host1Resource=new ResourceImpl(Resource.Type.Host);
  Resource host2Resource=new ResourceImpl(Resource.Type.Host);
  Resource host3Resource=new ResourceImpl(Resource.Type.Host);
  TreeNode<Resource> hostsNode=clusterNode.addChild(hostsResource,"hosts");
  TreeNode<Resource> host1Node=hostsNode.addChild(host1Resource,"host_1");
  TreeNode<Resource> host2Node=hostsNode.addChild(host2Resource,"host_2");
  TreeNode<Resource> host3Node=hostsNode.addChild(host3Resource,"host_3");
  host1Resource.setProperty("Hosts/host_name","host1");
  host2Resource.setProperty("Hosts/host_name","host2");
  host3Resource.setProperty("Hosts/host_name","host3");
  List<String> host1ComponentsList=Arrays.asList("NAMENODE","HDFS_CLIENT","ZOOKEEPER_SERVER","SECONDARY_NAMENODE");
  List<String> host2ComponentsList=Arrays.asList("DATANODE","HDFS_CLIENT","ZOOKEEPER_SERVER");
  List<String> host3ComponentsList=Arrays.asList("DATANODE","HDFS_CLIENT","ZOOKEEPER_SERVER");
  processHostGroupComponents(host1Node,host1ComponentsList);
  processHostGroupComponents(host2Node,host2ComponentsList);
  processHostGroupComponents(host3Node,host3ComponentsList);
  ExportBlueprintRequest exportBlueprintRequest=new ExportBlueprintRequest(clusterNode);
  assertEquals(CLUSTER_NAME,exportBlueprintRequest.getClusterName());
  Blueprint bp=exportBlueprintRequest.getBlueprint();
  assertEquals("exported-blueprint",bp.getName());
  Map<String,HostGroup> hostGroups=bp.getHostGroups();
  assertEquals(2,hostGroups.size());
  String hg1Name=null;
  String hg2Name=null;
  for (  HostGroup group : hostGroups.values()) {
    Collection<String> components=group.getComponents();
    if (components.containsAll(host1ComponentsList)) {
      assertEquals(host1ComponentsList.size(),components.size());
      assertEquals("1",group.getCardinality());
      hg1Name=group.getName();
    }
 else     if (components.containsAll(host2ComponentsList)) {
      assertEquals(host2ComponentsList.size(),components.size());
      assertEquals("2",group.getCardinality());
      hg2Name=group.getName();
    }
 else {
      fail("Host group contained invalid components");
    }
  }
  assertNotNull(hg1Name);
  assertNotNull(hg2Name);
  HostGroupInfo host1Info=exportBlueprintRequest.getHostGroupInfo().get(hg1Name);
  assertEquals(1,host1Info.getHostNames().size());
  assertEquals("host1",host1Info.getHostNames().iterator().next());
  HostGroupInfo host2Info=exportBlueprintRequest.getHostGroupInfo().get(hg2Name);
  assertEquals(2,host2Info.getHostNames().size());
  assertTrue(host2Info.getHostNames().contains("host2") && host2Info.getHostNames().contains("host3"));
}
