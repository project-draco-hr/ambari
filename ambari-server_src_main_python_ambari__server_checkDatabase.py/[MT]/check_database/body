def check_database(options):
    jdk_path = serverConfiguration.get_java_exe_path()
    if (jdk_path is None):
        print_error_msg(('No JDK found, please run the "setup" command to install a JDK automatically or install any JDK manually to ' + configDefaults.JDK_INSTALL_DIR))
        sys.exit(1)
    properties = serverConfiguration.get_ambari_properties()
    serverConfiguration.parse_properties_file(options)
    database_type = properties[JDBC_DATABASE_PROPERTY]
    if (not database_type):
        print_error_msg('Please run "ambari-server setup" command to initialize ambari db properties.')
        sys.exit(1)
    options.database_index = LINUX_DBMS_KEYS_LIST.index(properties[JDBC_DATABASE_PROPERTY])
    dbConfiguration.ensure_jdbc_driver_is_installed(options, serverConfiguration.get_ambari_properties())
    serverClassPath = ServerClassPath(serverConfiguration.get_ambari_properties(), options)
    class_path = serverClassPath.get_full_ambari_classpath_escaped_for_shell()
    command = CHECK_DATABASE_HELPER_CMD.format(jdk_path, class_path)
    ambari_user = serverConfiguration.read_ambari_user()
    current_user = setupSecurity.ensure_can_start_under_current_user(ambari_user)
    environ = setupSecurity.generate_env(options, ambari_user, current_user)
    (retcode, stdout, stderr) = os_utils.run_os_command(command, env=environ)
    if (retcode > 0):
        print str(stdout)
        raise FatalException(1, (((('Database check failed to complete. Please check ' + configDefaults.SERVER_LOG_FILE) + ' and ') + configDefaults.DB_CHECK_LOG) + ' for more information.'))
    else:
        print str(stdout)
        if (not stdout.startswith('No errors')):
            print "Ambari Server 'check-database' completed"
            sys.exit(1)
