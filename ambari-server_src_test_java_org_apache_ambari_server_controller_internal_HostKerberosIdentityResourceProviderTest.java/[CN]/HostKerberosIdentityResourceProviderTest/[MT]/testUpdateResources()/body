{
  AmbariManagementController managementController=createMock(AmbariManagementController.class);
  Map<String,String> mapRequestProps=new HashMap<String,String>();
  mapRequestProps.put("context","Called from a test");
  ResourceProvider provider=new HostKerberosIdentityResourceProvider(managementController);
  Map<String,Object> properties=new LinkedHashMap<String,Object>();
  properties.put(HostKerberosIdentityResourceProvider.KERBEROS_IDENTITY_CLUSTER_NAME_PROPERTY_ID,"Cluster100");
  properties.put(HostKerberosIdentityResourceProvider.KERBEROS_IDENTITY_HOST_NAME_PROPERTY_ID,"Host100");
  properties.put(HostKerberosIdentityResourceProvider.KERBEROS_IDENTITY_PRINCIPAL_NAME_PROPERTY_ID,"principal@REALM");
  properties.put(HostKerberosIdentityResourceProvider.KERBEROS_IDENTITY_PRINCIPAL_LOCAL_USERNAME_PROPERTY_ID,"userA");
  Request request=PropertyHelper.getUpdateRequest(properties,mapRequestProps);
  Predicate predicate=new PredicateBuilder().property(HostKerberosIdentityResourceProvider.KERBEROS_IDENTITY_CLUSTER_NAME_PROPERTY_ID).equals("Cluster100").and().property(HostKerberosIdentityResourceProvider.KERBEROS_IDENTITY_HOST_NAME_PROPERTY_ID).equals("Host100").and().property(HostKerberosIdentityResourceProvider.KERBEROS_IDENTITY_PRINCIPAL_NAME_PROPERTY_ID).equals("principal@REALM").toPredicate();
  provider.updateResources(request,predicate);
}
