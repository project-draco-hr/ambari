{
  final UserPrivilegeResourceProvider resourceProvider=new UserPrivilegeResourceProvider();
  final UserDAO userDAO=EasyMock.createNiceMock(UserDAO.class);
  final GroupDAO groupDAO=EasyMock.createNiceMock(GroupDAO.class);
  final ClusterDAO clusterDAO=EasyMock.createNiceMock(ClusterDAO.class);
  final ViewInstanceDAO viewInstanceDAO=EasyMock.createNiceMock(ViewInstanceDAO.class);
  final UserEntity userEntity=EasyMock.createNiceMock(UserEntity.class);
  final PrincipalEntity principalEntity=EasyMock.createNiceMock(PrincipalEntity.class);
  final PrivilegeEntity privilegeEntity=EasyMock.createNiceMock(PrivilegeEntity.class);
  final PermissionEntity permissionEntity=EasyMock.createNiceMock(PermissionEntity.class);
  final PrincipalTypeEntity principalTypeEntity=EasyMock.createNiceMock(PrincipalTypeEntity.class);
  final ResourceEntity resourceEntity=EasyMock.createNiceMock(ResourceEntity.class);
  final ResourceTypeEntity resourceTypeEntity=EasyMock.createNiceMock(ResourceTypeEntity.class);
  EasyMock.expect(userDAO.findLocalUserByName("user")).andReturn(userEntity).anyTimes();
  EasyMock.expect(userEntity.getPrincipal()).andReturn(principalEntity).anyTimes();
  EasyMock.expect(userEntity.getMemberEntities()).andReturn(Collections.<MemberEntity>emptySet()).anyTimes();
  EasyMock.expect(privilegeEntity.getPermission()).andReturn(permissionEntity).anyTimes();
  EasyMock.expect(privilegeEntity.getPrincipal()).andReturn(principalEntity).anyTimes();
  EasyMock.expect(principalEntity.getPrincipalType()).andReturn(principalTypeEntity).anyTimes();
  EasyMock.expect(principalTypeEntity.getName()).andReturn(PrincipalTypeEntity.USER_PRINCIPAL_TYPE_NAME).anyTimes();
  EasyMock.expect(principalEntity.getPrivileges()).andReturn(new HashSet<PrivilegeEntity>(){
{
      add(privilegeEntity);
    }
  }
).anyTimes();
  EasyMock.expect(userDAO.findUserByPrincipal(EasyMock.<PrincipalEntity>anyObject())).andReturn(userEntity).anyTimes();
  EasyMock.expect(userEntity.getUserName()).andReturn("user").anyTimes();
  EasyMock.expect(privilegeEntity.getResource()).andReturn(resourceEntity).anyTimes();
  EasyMock.expect(resourceEntity.getResourceType()).andReturn(resourceTypeEntity).anyTimes();
  EasyMock.expect(resourceTypeEntity.getId()).andReturn(ResourceTypeEntity.AMBARI_RESOURCE_TYPE);
  EasyMock.replay(userDAO,userEntity,principalEntity,privilegeEntity,permissionEntity,principalTypeEntity,resourceEntity,resourceTypeEntity);
  UserPrivilegeResourceProvider.init(userDAO,clusterDAO,groupDAO,viewInstanceDAO);
  final Set<String> propertyIds=new HashSet<String>();
  propertyIds.add(UserPrivilegeResourceProvider.PRIVILEGE_USER_NAME_PROPERTY_ID);
  final Predicate predicate=new PredicateBuilder().property(UserPrivilegeResourceProvider.PRIVILEGE_USER_NAME_PROPERTY_ID).equals("user").toPredicate();
  Request request=PropertyHelper.getReadRequest(propertyIds);
  Set<Resource> resources=resourceProvider.getResources(request,predicate);
  Assert.assertEquals(1,resources.size());
  for (  Resource resource : resources) {
    String userName=(String)resource.getPropertyValue(UserPrivilegeResourceProvider.PRIVILEGE_USER_NAME_PROPERTY_ID);
    Assert.assertEquals("user",userName);
  }
  EasyMock.verify(userDAO,userEntity,principalEntity,privilegeEntity,permissionEntity,principalTypeEntity,resourceEntity,resourceTypeEntity);
}
