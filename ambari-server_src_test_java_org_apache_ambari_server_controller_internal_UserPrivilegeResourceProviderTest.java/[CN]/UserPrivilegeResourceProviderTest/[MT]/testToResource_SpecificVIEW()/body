{
  PermissionEntity permissionEntity=createMock(PermissionEntity.class);
  expect(permissionEntity.getPermissionName()).andReturn("CLUSTER.ADMINISTRATOR").atLeastOnce();
  expect(permissionEntity.getPermissionLabel()).andReturn("Cluster Administrator").atLeastOnce();
  PrincipalTypeEntity principalTypeEntity=createMock(PrincipalTypeEntity.class);
  expect(principalTypeEntity.getName()).andReturn("USER").atLeastOnce();
  PrincipalEntity principalEntity=createMock(PrincipalEntity.class);
  expect(principalEntity.getPrincipalType()).andReturn(principalTypeEntity).atLeastOnce();
  ViewEntity viewEntity=createMock(ViewEntity.class);
  expect(viewEntity.getCommonName()).andReturn("TestView").atLeastOnce();
  expect(viewEntity.getVersion()).andReturn("1.2.3.4").atLeastOnce();
  ViewInstanceEntity viewInstanceEntity=createMock(ViewInstanceEntity.class);
  expect(viewInstanceEntity.getViewEntity()).andReturn(viewEntity).atLeastOnce();
  expect(viewInstanceEntity.getName()).andReturn("Test View").atLeastOnce();
  ResourceTypeEntity resourceTypeEntity=createMock(ResourceTypeEntity.class);
  expect(resourceTypeEntity.getName()).andReturn("TestView{1.2.3.4}").atLeastOnce();
  ResourceEntity resourceEntity=createMock(ResourceEntity.class);
  expect(resourceEntity.getId()).andReturn(1L).atLeastOnce();
  expect(resourceEntity.getResourceType()).andReturn(resourceTypeEntity).atLeastOnce();
  PrivilegeEntity privilegeEntity=createMock(PrivilegeEntity.class);
  expect(privilegeEntity.getId()).andReturn(1).atLeastOnce();
  expect(privilegeEntity.getPermission()).andReturn(permissionEntity).atLeastOnce();
  expect(privilegeEntity.getPrincipal()).andReturn(principalEntity).atLeastOnce();
  expect(privilegeEntity.getResource()).andReturn(resourceEntity).atLeastOnce();
  UserEntity userEntity=createMock(UserEntity.class);
  expect(userEntity.getUserName()).andReturn("jdoe").atLeastOnce();
  ClusterDAO clusterDAO=createMock(ClusterDAO.class);
  GroupDAO groupDAO=createMock(GroupDAO.class);
  ViewInstanceDAO viewInstanceDAO=createMock(ViewInstanceDAO.class);
  expect(viewInstanceDAO.findByResourceId(1L)).andReturn(viewInstanceEntity).atLeastOnce();
  UserDAO userDAO=createMock(UserDAO.class);
  expect(userDAO.findUserByPrincipal(anyObject(PrincipalEntity.class))).andReturn(userEntity).anyTimes();
  replayAll();
  UserPrivilegeResourceProvider.init(userDAO,clusterDAO,groupDAO,viewInstanceDAO);
  UserPrivilegeResourceProvider provider=new UserPrivilegeResourceProvider();
  Resource resource=provider.toResource(privilegeEntity,"jdoe",provider.getPropertyIds());
  Assert.assertEquals("Test View",resource.getPropertyValue(ViewPrivilegeResourceProvider.PRIVILEGE_INSTANCE_NAME_PROPERTY_ID));
  Assert.assertEquals("TestView",resource.getPropertyValue(ViewPrivilegeResourceProvider.PRIVILEGE_VIEW_NAME_PROPERTY_ID));
  Assert.assertEquals("1.2.3.4",resource.getPropertyValue(ViewPrivilegeResourceProvider.PRIVILEGE_VIEW_VERSION_PROPERTY_ID));
  Assert.assertEquals(ResourceType.VIEW.name(),resource.getPropertyValue(UserPrivilegeResourceProvider.PRIVILEGE_TYPE_PROPERTY_ID));
  verifyAll();
}
