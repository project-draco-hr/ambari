{
  SecurityContextHolder.getContext().setAuthentication(TestAuthenticationFactory.createClusterAdministrator("jdoe",2L));
  PermissionEntity permissionEntity=createMock(PermissionEntity.class);
  expect(permissionEntity.getPermissionName()).andReturn("CLUSTER.ADMINISTRATOR").atLeastOnce();
  expect(permissionEntity.getPermissionLabel()).andReturn("Cluster Administrator").atLeastOnce();
  PrincipalTypeEntity principalTypeEntity=createMock(PrincipalTypeEntity.class);
  expect(principalTypeEntity.getName()).andReturn("USER").atLeastOnce();
  PrincipalEntity principalEntity=createMock(PrincipalEntity.class);
  expect(principalEntity.getPrincipalType()).andReturn(principalTypeEntity).atLeastOnce();
  PrincipalTypeEntity principalTypeWithAllClusterAdministrator=createNiceMock(PrincipalTypeEntity.class);
  expect(principalTypeWithAllClusterAdministrator.getName()).andReturn("ALL.CLUSTER.ADMINISTRATOR").atLeastOnce();
  PrincipalEntity principalEntityWithAllClusterAdministrator=createNiceMock(PrincipalEntity.class);
  expect(principalEntityWithAllClusterAdministrator.getPrincipalType()).andReturn(principalTypeWithAllClusterAdministrator).atLeastOnce();
  ViewEntity viewEntity=createMock(ViewEntity.class);
  expect(viewEntity.getCommonName()).andReturn("TestView").atLeastOnce();
  expect(viewEntity.getVersion()).andReturn("1.2.3.4").atLeastOnce();
  ResourceTypeEntity resourceTypeEntity=createMock(ResourceTypeEntity.class);
  expect(resourceTypeEntity.getName()).andReturn("TestView{1.2.3.4}").atLeastOnce();
  ResourceEntity resourceEntity=createMock(ResourceEntity.class);
  expect(resourceEntity.getId()).andReturn(1L).anyTimes();
  expect(resourceEntity.getResourceType()).andReturn(resourceTypeEntity).anyTimes();
  ViewInstanceEntity viewInstanceEntity=createMock(ViewInstanceEntity.class);
  expect(viewInstanceEntity.getViewEntity()).andReturn(viewEntity).atLeastOnce();
  expect(viewInstanceEntity.getName()).andReturn("Test View").atLeastOnce();
  expect(viewInstanceEntity.getClusterHandle()).andReturn(1L).atLeastOnce();
  expect(viewInstanceEntity.getResource()).andReturn(resourceEntity).atLeastOnce();
  PrivilegeEntity privilegeEntityViewWithClusterAdminAccess=createMock(PrivilegeEntity.class);
  expect(privilegeEntityViewWithClusterAdminAccess.getPrincipal()).andReturn(principalEntityWithAllClusterAdministrator).atLeastOnce();
  PrivilegeEntity privilegeEntity=createMock(PrivilegeEntity.class);
  expect(privilegeEntity.getId()).andReturn(1).atLeastOnce();
  expect(privilegeEntity.getPermission()).andReturn(permissionEntity).atLeastOnce();
  expect(privilegeEntity.getPrincipal()).andReturn(principalEntity).atLeastOnce();
  expect(privilegeEntity.getResource()).andReturn(resourceEntity).atLeastOnce();
  expect(principalEntity.getPrivileges()).andReturn(Sets.newHashSet(privilegeEntity)).atLeastOnce();
  UserEntity userEntity=createMock(UserEntity.class);
  expect(userEntity.getUserName()).andReturn("jdoe").atLeastOnce();
  expect(userEntity.getPrincipal()).andReturn(principalEntity).atLeastOnce();
  expect(userEntity.getMemberEntities()).andReturn(Sets.<MemberEntity>newHashSet()).atLeastOnce();
  ClusterDAO clusterDAO=createMock(ClusterDAO.class);
  GroupDAO groupDAO=createMock(GroupDAO.class);
  ViewInstanceDAO viewInstanceDAO=createMock(ViewInstanceDAO.class);
  expect(viewInstanceDAO.findByResourceId(1L)).andReturn(viewInstanceEntity).atLeastOnce();
  expect(viewInstanceDAO.findAll()).andReturn(Lists.newArrayList(viewInstanceEntity)).atLeastOnce();
  final UserDAO userDAO=createNiceMock(UserDAO.class);
  expect(userDAO.findLocalUserByName("jdoe")).andReturn(userEntity).anyTimes();
  expect(userDAO.findUserByPrincipal(anyObject(PrincipalEntity.class))).andReturn(userEntity).anyTimes();
  PrivilegeDAO privilegeDAO=createNiceMock(PrivilegeDAO.class);
  expect(privilegeDAO.findByResourceId(1L)).andReturn(Lists.newArrayList(privilegeEntity,privilegeEntityViewWithClusterAdminAccess)).anyTimes();
  replayAll();
  final Set<String> propertyIds=new HashSet<String>();
  propertyIds.add(UserPrivilegeResourceProvider.PRIVILEGE_USER_NAME_PROPERTY_ID);
  final Predicate predicate=new PredicateBuilder().property(UserPrivilegeResourceProvider.PRIVILEGE_USER_NAME_PROPERTY_ID).equals("jdoe").toPredicate();
  TestAuthenticationFactory.createClusterAdministrator("jdoe",2L);
  Request request=PropertyHelper.getReadRequest(propertyIds);
  UserPrivilegeResourceProvider.init(userDAO,clusterDAO,groupDAO,viewInstanceDAO,privilegeDAO);
  UserPrivilegeResourceProvider provider=new UserPrivilegeResourceProvider();
  Set<Resource> resources=provider.getResources(request,predicate);
  Assert.assertEquals(1,resources.size());
  for (  Resource resource : resources) {
    String userName=(String)resource.getPropertyValue(UserPrivilegeResourceProvider.PRIVILEGE_USER_NAME_PROPERTY_ID);
    Assert.assertEquals("jdoe",userName);
  }
  verifyAll();
}
