{
  Config config1=configFactory.createNew(c1,"hdfs-site",new HashMap<String,String>(){
{
      put("a","b");
    }
  }
,new HashMap<String,Map<String,String>>());
  config1.setTag("version1");
  c1.addConfig(config1);
  ServiceConfigVersionResponse scvResponse=c1.addDesiredConfig("admin",Collections.singleton(config1));
  assertEquals("SCV 1 should be created",Long.valueOf(1),scvResponse.getVersion());
  Map<String,Collection<ServiceConfigVersionResponse>> activeServiceConfigVersions=c1.getActiveServiceConfigVersions();
  Assert.assertEquals("Only one scv should be active",1,activeServiceConfigVersions.get("HDFS").size());
  Config config2=configFactory.createNew(c1,"hdfs-site",new HashMap<String,String>(){
{
      put("a","c");
    }
  }
,new HashMap<String,Map<String,String>>());
  config2.setTag("version2");
  ConfigGroup configGroup=configGroupFactory.createNew(c1,"test group","HDFS","descr",Collections.singletonMap("hdfs-site",config2),Collections.<String,Host>emptyMap());
  configGroup.persist();
  c1.addConfigGroup(configGroup);
  scvResponse=c1.createServiceConfigVersion("HDFS","admin","test note",configGroup);
  assertEquals("SCV 2 should be created",Long.valueOf(2),scvResponse.getVersion());
  activeServiceConfigVersions=c1.getActiveServiceConfigVersions();
  Assert.assertEquals("Two service config versions should be active, for default and test groups",2,activeServiceConfigVersions.get("HDFS").size());
  Config config3=configFactory.createNew(c1,"hdfs-site",new HashMap<String,String>(){
{
      put("a","d");
    }
  }
,new HashMap<String,Map<String,String>>());
  configGroup.setConfigurations(Collections.singletonMap("hdfs-site",config3));
  configGroup.persist();
  scvResponse=c1.createServiceConfigVersion("HDFS","admin","test note",configGroup);
  assertEquals("SCV 3 should be created",Long.valueOf(3),scvResponse.getVersion());
  activeServiceConfigVersions=c1.getActiveServiceConfigVersions();
  Assert.assertEquals("Two service config versions should be active, for default and test groups",2,activeServiceConfigVersions.get("HDFS").size());
  assertEquals(3,c1.getServiceConfigVersions().size());
  scvResponse=c1.setServiceConfigVersion("HDFS",2L,"admin","group rollback");
  assertEquals("SCV 4 should be created",Long.valueOf(4),scvResponse.getVersion());
  configGroup=c1.getConfigGroups().get(configGroup.getId());
  activeServiceConfigVersions=c1.getActiveServiceConfigVersions();
  Assert.assertEquals("Two service config versions should be active, for default and test groups",2,activeServiceConfigVersions.get("HDFS").size());
  assertEquals(4,c1.getServiceConfigVersions().size());
  Map<String,String> configProperties=configGroup.getConfigurations().get("hdfs-site").getProperties();
  assertEquals("Configurations should be rolled back to a:c ","c",configProperties.get("a"));
}
