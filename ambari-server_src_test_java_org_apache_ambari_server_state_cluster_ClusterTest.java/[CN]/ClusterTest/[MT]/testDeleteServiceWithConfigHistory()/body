{
  createDefaultCluster();
  c1.addService("HDFS");
  Config config1=configFactory.createNew(c1,"hdfs-site",new HashMap<String,String>(){
{
      put("a","b");
    }
  }
,new HashMap<String,Map<String,String>>());
  config1.setTag("version1");
  Config config2=configFactory.createNew(c1,"core-site",new HashMap<String,String>(){
{
      put("x","y");
    }
  }
,new HashMap<String,Map<String,String>>());
  config2.setTag("version2");
  config1.persist();
  c1.addConfig(config1);
  config2.persist();
  c1.addConfig(config2);
  Set<Config> configs=new HashSet<Config>();
  configs.add(config1);
  configs.add(config2);
  c1.addDesiredConfig("admin",configs);
  List<ServiceConfigVersionResponse> serviceConfigVersions=c1.getServiceConfigVersions();
  Assert.assertNotNull(serviceConfigVersions);
  Assert.assertEquals(1,serviceConfigVersions.size());
  Assert.assertEquals(Long.valueOf(1),serviceConfigVersions.get(0).getVersion());
  Assert.assertEquals(2,c1.getDesiredConfigs().size());
  Assert.assertEquals("version1",c1.getDesiredConfigByType("hdfs-site").getTag());
  Assert.assertEquals("version2",c1.getDesiredConfigByType("core-site").getTag());
  Map<String,Collection<ServiceConfigVersionResponse>> activeServiceConfigVersions=c1.getActiveServiceConfigVersions();
  Assert.assertEquals(1,activeServiceConfigVersions.size());
  c1.deleteService("HDFS");
  Assert.assertEquals(0,c1.getServices().size());
  Assert.assertEquals(0,c1.getServiceConfigVersions().size());
  EntityManager em=injector.getProvider(EntityManager.class).get();
  Assert.assertEquals(0,em.createQuery("SELECT serviceConfig from ServiceConfigEntity serviceConfig").getResultList().size());
  Assert.assertEquals(2,em.createQuery("SELECT config from ClusterConfigEntity config").getResultList().size());
  List<ClusterConfigMappingEntity> configMappingEntities=em.createQuery("SELECT configmapping from ClusterConfigMappingEntity configmapping",ClusterConfigMappingEntity.class).getResultList();
  Assert.assertEquals(2,configMappingEntities.size());
  for (  ClusterConfigMappingEntity configMappingEntity : configMappingEntities) {
    if (StringUtils.equals(configMappingEntity.getType(),"core-site")) {
      assertEquals("core-site is not part of HDFS in test stack, should remain mapped to cluster",1,configMappingEntity.isSelected());
    }
    if (StringUtils.equals(configMappingEntity.getType(),"hdfs-site")) {
      assertEquals("hdfs-site should be unmapped from cluster when HDFS service is removed",0,configMappingEntity.isSelected());
    }
  }
  Assert.assertEquals(0,em.createNativeQuery("SELECT * from serviceconfigmapping").getResultList().size());
}
