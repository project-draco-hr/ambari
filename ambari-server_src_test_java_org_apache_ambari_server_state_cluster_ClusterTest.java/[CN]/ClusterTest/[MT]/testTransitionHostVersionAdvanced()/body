{
  String clusterName="c1";
  String v1="2.2.0-123";
  StackId stackId=new StackId("HDP-2.2.0");
  RepositoryVersionEntity rv1=helper.getOrCreateRepositoryVersion(stackId,v1);
  Map<String,String> hostAttributes=new HashMap<String,String>();
  hostAttributes.put("os_family","redhat");
  hostAttributes.put("os_release_version","6.4");
  Cluster cluster=createClusterForRU(clusterName,stackId,hostAttributes);
  int versionedComponentCount=0;
  List<HostComponentStateEntity> hostComponentStates=hostComponentStateDAO.findAll();
  for (int i=0; i < hostComponentStates.size(); i++) {
    HostComponentStateEntity hce=hostComponentStates.get(i);
    ComponentInfo compInfo=metaInfo.getComponent(stackId.getStackName(),stackId.getStackVersion(),hce.getServiceName(),hce.getComponentName());
    if (compInfo.isVersionAdvertised()) {
      hce.setVersion(v1);
      hostComponentStateDAO.merge(hce);
      versionedComponentCount++;
    }
    Service svc=cluster.getService(hce.getServiceName());
    ServiceComponent svcComp=svc.getServiceComponent(hce.getComponentName());
    ServiceComponentHost scHost=svcComp.getServiceComponentHost(hce.getHostName());
    scHost.recalculateHostVersionState();
    cluster.recalculateClusterVersionState(rv1);
    Collection<ClusterVersionEntity> clusterVersions=cluster.getAllClusterVersions();
    if (versionedComponentCount > 0) {
      RepositoryVersionEntity repositoryVersion=repositoryVersionDAO.findByStackAndVersion(stackId,v1);
      Assert.assertNotNull(repositoryVersion);
      Assert.assertTrue(clusterVersions != null && clusterVersions.size() == 1);
      if (i == hostComponentStates.size() - 1) {
        Assert.assertEquals(clusterVersions.iterator().next().getState(),RepositoryVersionState.CURRENT);
      }
    }
  }
  addHost("h-4",hostAttributes);
  clusters.mapHostToCluster("h-4",clusterName);
  Service svc2=cluster.getService("ZOOKEEPER");
  Service svc3=cluster.getService("GANGLIA");
  ServiceComponent sc2CompA=svc2.getServiceComponent("ZOOKEEPER_SERVER");
  ServiceComponent sc2CompB=svc2.getServiceComponent("ZOOKEEPER_CLIENT");
  ServiceComponent sc3CompB=svc3.getServiceComponent("GANGLIA_MONITOR");
  ServiceComponentHost schHost4Serv2CompA=serviceComponentHostFactory.createNew(sc2CompA,"h-4");
  ServiceComponentHost schHost4Serv2CompB=serviceComponentHostFactory.createNew(sc2CompB,"h-4");
  ServiceComponentHost schHost4Serv3CompB=serviceComponentHostFactory.createNew(sc3CompB,"h-4");
  sc2CompA.addServiceComponentHost(schHost4Serv2CompA);
  sc2CompB.addServiceComponentHost(schHost4Serv2CompB);
  sc3CompB.addServiceComponentHost(schHost4Serv3CompB);
  simulateStackVersionListener(stackId,v1,cluster,hostComponentStateDAO.findByHost("h-4"));
  Collection<HostVersionEntity> hostVersions=hostVersionDAO.findAll();
  Assert.assertEquals(hostVersions.size(),clusters.getHosts().size());
  HostVersionEntity h4Version1=hostVersionDAO.findByClusterStackVersionAndHost(clusterName,stackId,v1,"h-4");
  Assert.assertNotNull(h4Version1);
  Assert.assertEquals(h4Version1.getState(),RepositoryVersionState.CURRENT);
  String v2="2.2.0-456";
  RepositoryVersionEntity rv2=helper.getOrCreateRepositoryVersion(stackId,v2);
  for (  String hostName : clusters.getHostsForCluster(clusterName).keySet()) {
    HostEntity host=hostDAO.findByName(hostName);
    HostVersionEntity hve=new HostVersionEntity(host,rv2,RepositoryVersionState.INSTALLED);
    hostVersionDAO.create(hve);
  }
  cluster.createClusterVersion(stackId,v2,"admin",RepositoryVersionState.INSTALLING);
  cluster.transitionClusterVersion(stackId,v2,RepositoryVersionState.INSTALLED);
  ClusterVersionEntity cv2=clusterVersionDAO.findByClusterAndStackAndVersion(clusterName,stackId,v2);
  Assert.assertNotNull(cv2);
  Assert.assertEquals(cv2.getState(),RepositoryVersionState.INSTALLED);
  addHost("h-5",hostAttributes);
  clusters.mapHostToCluster("h-5",clusterName);
  ServiceComponentHost schHost5Serv3CompB=serviceComponentHostFactory.createNew(sc3CompB,"h-5");
  sc3CompB.addServiceComponentHost(schHost5Serv3CompB);
  HostVersionEntity h5Version2=hostVersionDAO.findByClusterStackVersionAndHost(clusterName,stackId,v2,"h-5");
  Assert.assertNotNull(h5Version2);
  Assert.assertEquals(h5Version2.getState(),RepositoryVersionState.OUT_OF_SYNC);
  h5Version2.setState(RepositoryVersionState.INSTALLED);
  hostVersionDAO.merge(h5Version2);
  versionedComponentCount=0;
  hostComponentStates=hostComponentStateDAO.findAll();
  for (int i=0; i < hostComponentStates.size(); i++) {
    HostComponentStateEntity hce=hostComponentStates.get(i);
    ComponentInfo compInfo=metaInfo.getComponent(stackId.getStackName(),stackId.getStackVersion(),hce.getServiceName(),hce.getComponentName());
    if (compInfo.isVersionAdvertised()) {
      hce.setVersion(v2);
      hostComponentStateDAO.merge(hce);
      versionedComponentCount++;
    }
    Service svc=cluster.getService(hce.getServiceName());
    ServiceComponent svcComp=svc.getServiceComponent(hce.getComponentName());
    ServiceComponentHost scHost=svcComp.getServiceComponentHost(hce.getHostName());
    scHost.recalculateHostVersionState();
    cluster.recalculateClusterVersionState(rv2);
    Collection<ClusterVersionEntity> clusterVersions=cluster.getAllClusterVersions();
    if (versionedComponentCount > 0) {
      RepositoryVersionEntity repositoryVersion=repositoryVersionDAO.findByStackAndVersion(stackId,v2);
      Assert.assertNotNull(repositoryVersion);
      Assert.assertTrue(clusterVersions != null && clusterVersions.size() == 2);
    }
  }
  Collection<HostVersionEntity> v2HostVersions=hostVersionDAO.findByClusterStackAndVersion(clusterName,stackId,v2);
  Assert.assertEquals(v2HostVersions.size(),clusters.getHostsForCluster(clusterName).size());
  for (  HostVersionEntity hve : v2HostVersions) {
    Assert.assertTrue(TERMINAL_VERSION_STATES.contains(hve.getState()));
  }
}
