{
  String clusterName="c1";
  clusters.addCluster(clusterName);
  Cluster c1=clusters.getCluster(clusterName);
  Assert.assertEquals(clusterName,c1.getClusterName());
  Assert.assertEquals(1,c1.getClusterId());
  clusters.addHost("h-1");
  clusters.addHost("h-2");
  clusters.addHost("h-3");
  for (  String hostName : new String[]{"h-1","h-2","h-3"}) {
    Host h=clusters.getHost(hostName);
    h.setIPv4("ipv4");
    h.setIPv6("ipv6");
    Map<String,String> hostAttributes=new HashMap<String,String>();
    hostAttributes.put("os_family","redhat");
    hostAttributes.put("os_release_version","5.9");
    h.setHostAttributes(hostAttributes);
    h.persist();
  }
  String v1="2.0.5-1";
  String v2="2.0.5-2";
  StackId stackId=new StackId("HDP-2.0.5");
  c1.setDesiredStackVersion(stackId);
  RepositoryVersionEntity rve1=helper.getOrCreateRepositoryVersion(stackId.getStackName(),v1);
  RepositoryVersionEntity rve2=helper.getOrCreateRepositoryVersion(stackId.getStackName(),v2);
  c1.setCurrentStackVersion(stackId);
  c1.createClusterVersion(stackId.getStackName(),v1,"admin",RepositoryVersionState.UPGRADING);
  c1.transitionClusterVersion(stackId.getStackName(),v1,RepositoryVersionState.CURRENT);
  clusters.mapHostToCluster("h-1",clusterName);
  clusters.mapHostToCluster("h-2",clusterName);
  clusters.mapHostToCluster("h-3",clusterName);
  ClusterVersionDAOMock.failOnCurrentVersionState=false;
  Service service=c1.addService("ZOOKEEPER");
  ServiceComponent sc=service.addServiceComponent("ZOOKEEPER_SERVER");
  sc.addServiceComponentHost("h-1");
  sc.addServiceComponentHost("h-2");
  service=c1.addService("SQOOP");
  sc=service.addServiceComponent("SQOOP");
  sc.addServiceComponentHost("h-3");
  List<HostVersionEntity> entities=hostVersionDAO.findByClusterAndHost(clusterName,"h-3");
  assertTrue("Expected no host versions",null == entities || 0 == entities.size());
  c1.createClusterVersion(stackId.getStackName(),v2,"admin",RepositoryVersionState.INSTALLING);
  c1.transitionClusterVersion(stackId.getStackName(),v2,RepositoryVersionState.INSTALLED);
  c1.transitionClusterVersion(stackId.getStackName(),v2,RepositoryVersionState.UPGRADING);
  c1.transitionClusterVersion(stackId.getStackName(),v2,RepositoryVersionState.UPGRADED);
  c1.transitionClusterVersion(stackId.getStackName(),v2,RepositoryVersionState.CURRENT);
  entities=hostVersionDAO.findByClusterAndHost(clusterName,"h-3");
  assertEquals(1,entities.size());
}
