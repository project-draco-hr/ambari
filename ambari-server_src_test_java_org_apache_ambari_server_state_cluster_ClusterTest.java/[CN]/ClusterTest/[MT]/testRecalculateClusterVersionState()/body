{
  createDefaultCluster();
  Host h1=clusters.getHost("h1");
  h1.setState(HostState.HEALTHY);
  Host h2=clusters.getHost("h2");
  h2.setState(HostState.HEALTHY);
  StackId stackId=new StackId("HDP-0.1");
  final String stackVersion="1.0-1000";
  RepositoryVersionEntity repositoryVersionEntity=helper.getOrCreateRepositoryVersion(stackId,stackVersion);
  c1.createClusterVersion(stackId,stackVersion,"admin",RepositoryVersionState.INSTALLING);
  c1.setCurrentStackVersion(stackId);
  HostVersionEntity hv1=helper.createHostVersion("h1",repositoryVersionEntity,RepositoryVersionState.INSTALLING);
  HostVersionEntity hv2=helper.createHostVersion("h2",repositoryVersionEntity,RepositoryVersionState.INSTALLING);
  c1.recalculateClusterVersionState(c1.getDesiredStackVersion(),stackVersion);
  checkStackVersionState(stackId,stackVersion,RepositoryVersionState.INSTALLING);
  h2.setState(HostState.UNHEALTHY);
  c1.recalculateClusterVersionState(c1.getDesiredStackVersion(),stackVersion);
  checkStackVersionState(stackId,stackVersion,RepositoryVersionState.INSTALLING);
  c1.transitionClusterVersion(stackId,stackVersion,RepositoryVersionState.INSTALLING);
  h2.setState(HostState.HEALTHY);
  hv2.setState(RepositoryVersionState.INSTALLED);
  hostVersionDAO.merge(hv2);
  c1.recalculateClusterVersionState(c1.getDesiredStackVersion(),stackVersion);
  checkStackVersionState(stackId,stackVersion,RepositoryVersionState.INSTALLING);
  hv1.setState(RepositoryVersionState.INSTALL_FAILED);
  hostVersionDAO.merge(hv1);
  c1.recalculateClusterVersionState(c1.getDesiredStackVersion(),stackVersion);
  checkStackVersionState(stackId,stackVersion,RepositoryVersionState.INSTALL_FAILED);
  c1.transitionClusterVersion(stackId,stackVersion,RepositoryVersionState.INSTALLING);
  hv1.setState(RepositoryVersionState.INSTALLED);
  hostVersionDAO.merge(hv1);
  c1.recalculateClusterVersionState(c1.getDesiredStackVersion(),stackVersion);
  checkStackVersionState(stackId,stackVersion,RepositoryVersionState.INSTALLED);
  hv1.setState(RepositoryVersionState.UPGRADING);
  hostVersionDAO.merge(hv1);
  c1.recalculateClusterVersionState(c1.getDesiredStackVersion(),stackVersion);
  checkStackVersionState(stackId,stackVersion,RepositoryVersionState.UPGRADING);
  hv2.setState(RepositoryVersionState.UPGRADING);
  hostVersionDAO.merge(hv2);
  c1.recalculateClusterVersionState(c1.getDesiredStackVersion(),stackVersion);
  checkStackVersionState(stackId,stackVersion,RepositoryVersionState.UPGRADING);
  hv2.setState(RepositoryVersionState.UPGRADE_FAILED);
  hostVersionDAO.merge(hv2);
  c1.recalculateClusterVersionState(c1.getDesiredStackVersion(),stackVersion);
  checkStackVersionState(stackId,stackVersion,RepositoryVersionState.UPGRADE_FAILED);
  c1.transitionClusterVersion(stackId,stackVersion,RepositoryVersionState.UPGRADING);
  hv2.setState(RepositoryVersionState.UPGRADED);
  hostVersionDAO.merge(hv2);
  c1.recalculateClusterVersionState(c1.getDesiredStackVersion(),stackVersion);
  checkStackVersionState(stackId,stackVersion,RepositoryVersionState.UPGRADING);
  hv1.setState(RepositoryVersionState.UPGRADED);
  hostVersionDAO.merge(hv1);
  c1.recalculateClusterVersionState(c1.getDesiredStackVersion(),stackVersion);
  checkStackVersionState(stackId,stackVersion,RepositoryVersionState.UPGRADED);
  hv1.setState(RepositoryVersionState.CURRENT);
  hostVersionDAO.merge(hv1);
  hv2.setState(RepositoryVersionState.CURRENT);
  hostVersionDAO.merge(hv2);
  c1.recalculateClusterVersionState(c1.getDesiredStackVersion(),stackVersion);
  checkStackVersionState(stackId,stackVersion,RepositoryVersionState.CURRENT);
}
