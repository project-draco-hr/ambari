{
  createDefaultCluster();
  Config hdfsSiteConfigV1=configFactory.createNew(c1,"hdfs-site",ImmutableMap.of("p1","v1"),ImmutableMap.<String,Map<String,String>>of());
  hdfsSiteConfigV1.setTag("version1");
  hdfsSiteConfigV1.persist();
  c1.addConfig(hdfsSiteConfigV1);
  ServiceConfigVersionResponse hdfsSiteConfigResponseV1=c1.addDesiredConfig("admin",Collections.singleton(hdfsSiteConfigV1));
  List<ConfigurationResponse> configResponsesDefaultGroup=Collections.singletonList(new ConfigurationResponse(c1.getClusterName(),hdfsSiteConfigV1.getStackId(),hdfsSiteConfigV1.getType(),hdfsSiteConfigV1.getTag(),hdfsSiteConfigV1.getVersion(),hdfsSiteConfigV1.getProperties(),hdfsSiteConfigV1.getPropertiesAttributes(),hdfsSiteConfigV1.getPropertiesTypes()));
  hdfsSiteConfigResponseV1.setConfigurations(configResponsesDefaultGroup);
  Config hdfsSiteConfigV2=configFactory.createNew(c1,"hdfs-site",ImmutableMap.of("p1","v2"),ImmutableMap.<String,Map<String,String>>of());
  hdfsSiteConfigV2.setTag("version2");
  ConfigGroup configGroup=configGroupFactory.createNew(c1,"configGroup1","version1","test description",ImmutableMap.of(hdfsSiteConfigV2.getType(),hdfsSiteConfigV2),ImmutableMap.<Long,Host>of());
  configGroup.persist();
  c1.addConfigGroup(configGroup);
  ServiceConfigVersionResponse hdfsSiteConfigResponseV2=c1.createServiceConfigVersion("HDFS","admin","test note",configGroup);
  hdfsSiteConfigResponseV2.setConfigurations(Collections.singletonList(new ConfigurationResponse(c1.getClusterName(),hdfsSiteConfigV2.getStackId(),hdfsSiteConfigV2.getType(),hdfsSiteConfigV2.getTag(),hdfsSiteConfigV2.getVersion(),hdfsSiteConfigV2.getProperties(),hdfsSiteConfigV2.getPropertiesAttributes(),hdfsSiteConfigV2.getPropertiesTypes())));
  hdfsSiteConfigResponseV2.setIsCurrent(true);
  ServiceConfigVersionResponse hdfsSiteConfigResponseV3=c1.createServiceConfigVersion("HDFS","admin","new config in default group",null);
  hdfsSiteConfigResponseV3.setConfigurations(configResponsesDefaultGroup);
  hdfsSiteConfigResponseV3.setIsCurrent(true);
  List<ServiceConfigVersionResponse> expectedServiceConfigResponses=ImmutableList.of(hdfsSiteConfigResponseV1,hdfsSiteConfigResponseV2,hdfsSiteConfigResponseV3);
  List<ServiceConfigVersionResponse> allServiceConfigResponses=c1.getServiceConfigVersions();
  Collections.sort(allServiceConfigResponses,new Comparator<ServiceConfigVersionResponse>(){
    @Override public int compare(    ServiceConfigVersionResponse o1,    ServiceConfigVersionResponse o2){
      return o1.getVersion().compareTo(o2.getVersion());
    }
  }
);
  assertThat(allServiceConfigResponses,is(expectedServiceConfigResponses));
}
