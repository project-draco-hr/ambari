def search_mpacks(mpack_name, max_mpack_version=None):
    '\n  Search for all "mpack_name" management packs installed.\n  If "max_mpack_version" is specified return only management packs < max_mpack_version\n  :param mpack_name: Management pack name\n  :param max_mpack_version: Max management pack version number\n  :return: List of management pack\n  '
    (stack_location, service_definitions_location, mpacks_staging_location) = get_mpack_properties()
    results = []
    if (os.path.exists(mpacks_staging_location) and os.path.isdir(mpacks_staging_location)):
        staged_mpack_dirs = sorted(os.listdir(mpacks_staging_location))
        for dir in staged_mpack_dirs:
            if (dir == MPACKS_CACHE_DIRNAME):
                continue
            staged_mpack_dir = os.path.join(mpacks_staging_location, dir)
            if os.path.isdir(staged_mpack_dir):
                staged_mpack_metadata = read_mpack_metadata(staged_mpack_dir)
                if (not staged_mpack_metadata):
                    print_error_msg('Skipping malformed management pack in directory {0}.'.format(staged_mpack_dir))
                    continue
                staged_mpack_name = staged_mpack_metadata.name
                staged_mpack_version = staged_mpack_metadata.version
                if ((mpack_name == staged_mpack_name) and ((not max_mpack_version) or (compare_versions(staged_mpack_version, max_mpack_version, format=True) < 0))):
                    results.append((staged_mpack_name, staged_mpack_version))
    return results
