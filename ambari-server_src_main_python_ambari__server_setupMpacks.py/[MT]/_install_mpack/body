def _install_mpack(options, replay_mode=False, is_upgrade=False):
    '\n  Install management pack\n  :param options: Command line options\n  :param replay_mode: Flag to indicate if executing command in replay mode\n  '
    mpack_path = options.mpack_path
    if (not mpack_path):
        print_error_msg('Management pack not specified!')
        raise FatalException((-1), 'Management pack not specified!')
    print_info_msg('Installing management pack {0}'.format(mpack_path))
    tmp_archive_path = download_mpack(mpack_path)
    if (not (tmp_archive_path and os.path.exists(tmp_archive_path))):
        print_error_msg('Management pack could not be downloaded!')
        raise FatalException((-1), 'Management pack could not be downloaded!')
    tmp_root_dir = expand_mpack(tmp_archive_path)
    mpack_metadata = read_mpack_metadata(tmp_root_dir)
    if (not mpack_metadata):
        raise FatalException((-1), 'Malformed management pack {0}. Metadata file missing!'.format(mpack_path))
    if (not replay_mode):
        validate_mpack_prerequisites(mpack_metadata)
    if is_upgrade:
        _execute_hook(mpack_metadata, BEFORE_UPGRADE_HOOK_NAME, tmp_root_dir)
    else:
        _execute_hook(mpack_metadata, BEFORE_INSTALL_HOOK_NAME, tmp_root_dir)
    if (options.purge and options.purge_list):
        purge_stacks_and_mpacks(options.purge_list.split(','), replay_mode)
    (stack_location, extension_location, service_definitions_location, mpacks_staging_location) = get_mpack_properties()
    mpacks_cache_location = os.path.join(mpacks_staging_location, MPACKS_CACHE_DIRNAME)
    if (not os.path.exists(stack_location)):
        sudo.makedir(stack_location, 493)
    if (not os.path.exists(extension_location)):
        sudo.makedir(extension_location, 493)
    if (not os.path.exists(service_definitions_location)):
        sudo.makedir(service_definitions_location, 493)
    if (not os.path.exists(mpacks_staging_location)):
        sudo.makedir(mpacks_staging_location, 493)
    if (not os.path.exists(mpacks_cache_location)):
        sudo.makedir(mpacks_cache_location, 493)
    mpack_name = mpack_metadata.name
    mpack_version = mpack_metadata.version
    mpack_dirname = ((mpack_name + '-') + mpack_version)
    mpack_staging_dir = os.path.join(mpacks_staging_location, mpack_dirname)
    mpack_archive_path = os.path.join(mpacks_cache_location, os.path.basename(tmp_archive_path))
    print_info_msg('Stage management pack {0}-{1} to staging location {2}'.format(mpack_name, mpack_version, mpack_staging_dir))
    if os.path.exists(mpack_staging_dir):
        if options.force:
            print_info_msg('Force removing previously installed management pack from {0}'.format(mpack_staging_dir))
            sudo.rmtree(mpack_staging_dir)
        else:
            error_msg = 'Management pack {0}-{1} already installed!'.format(mpack_name, mpack_version)
            print_error_msg(error_msg)
            raise FatalException((-1), error_msg)
    shutil.move(tmp_root_dir, mpack_staging_dir)
    shutil.move(tmp_archive_path, mpack_archive_path)
    for artifact in mpack_metadata.artifacts:
        artifact_name = artifact.name
        artifact_type = artifact.type
        artifact_source_dir = os.path.join(mpack_staging_dir, artifact.source_dir)
        print_info_msg('Processing artifact {0} of type {1} in {2}'.format(artifact_name, artifact_type, artifact_source_dir))
        if (artifact.type == STACK_DEFINITIONS_ARTIFACT_NAME):
            process_stack_definitions_artifact(artifact, artifact_source_dir, options)
        elif (artifact.type == EXTENSION_DEFINITIONS_ARTIFACT_NAME):
            process_extension_definitions_artifact(artifact, artifact_source_dir, options)
        elif (artifact.type == SERVICE_DEFINITIONS_ARTIFACT_NAME):
            process_service_definitions_artifact(artifact, artifact_source_dir, options)
        elif (artifact.type == STACK_ADDON_SERVICE_DEFINITIONS_ARTIFACT_NAME):
            process_stack_addon_service_definitions_artifact(artifact, artifact_source_dir, options)
        else:
            print_info_msg('Unknown artifact {0} of type {1}'.format(artifact_name, artifact_type))
    print_info_msg('Management pack {0}-{1} successfully installed!'.format(mpack_name, mpack_version))
    return (mpack_metadata, mpack_name, mpack_version, mpack_staging_dir, mpack_archive_path)
