def process_stack_addon_service_definition_artifact(artifact, artifact_source_dir, options):
    '\n  Process stack addon service definition artifact\n  :param artifact: Artifact metadata\n  :param artifact_source_dir: Location of artifact in the management pack\n  :param options: Command line options\n  '
    (stack_location, extension_location, service_definitions_location, mpacks_staging_location) = get_mpack_properties()
    service_name = None
    if ('service_name' in artifact):
        service_name = artifact.service_name
    if (not service_name):
        print_error_msg('Must provide service name for stack-addon-service-definition artifact!')
        raise FatalException((-1), 'Must provide service name for stack-addon-service-definition artifact!')
    applicable_stacks = None
    if ('applicable_stacks' in artifact):
        applicable_stacks = artifact.applicable_stacks
    if (not applicable_stacks):
        print_error_msg('Must provide applicable stacks for stack-addon-service-definition artifact!')
        raise FatalException((-1), 'Must provide applicable stacks for stack-addon-service-definition artifact!')
    for applicable_stack in applicable_stacks:
        stack_name = applicable_stack.stack_name
        stack_version = applicable_stack.stack_version
        dest_stack_path = os.path.join(stack_location, stack_name)
        dest_stack_version_path = os.path.join(dest_stack_path, stack_version)
        dest_stack_services_path = os.path.join(dest_stack_version_path, 'services')
        dest_link = os.path.join(dest_stack_services_path, service_name)
        if (os.path.exists(dest_stack_path) and os.path.exists(dest_stack_version_path)):
            if (not os.path.exists(dest_stack_services_path)):
                sudo.makedir(dest_stack_services_path, 493)
            if (options.force and os.path.islink(dest_link)):
                sudo.unlink(dest_link)
            sudo.symlink(artifact_source_dir, dest_link)
