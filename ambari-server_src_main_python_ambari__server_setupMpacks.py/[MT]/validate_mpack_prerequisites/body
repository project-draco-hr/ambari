def validate_mpack_prerequisites(mpack_metadata):
    '\n  Validate management pack prerequisites\n  :param mpack_name: Management pack metadata\n  '
    properties = get_ambari_properties()
    if (properties == (-1)):
        print_error_msg('Error getting ambari properties')
        return (-1)
    stack_location = get_stack_location(properties)
    current_ambari_version = get_ambari_version(properties)
    fail = False
    mpack_prerequisites = mpack_metadata.prerequisites
    if ('min_ambari_version' in mpack_prerequisites):
        min_ambari_version = mpack_prerequisites.min_ambari_version
        if (compare_versions(min_ambari_version, current_ambari_version, format=True) > 0):
            print_error_msg('Prerequisite failure! Current Ambari Version = {0}, Min Ambari Version = {1}'.format(current_ambari_version, min_ambari_version))
            fail = True
    if ('max_ambari_version' in mpack_prerequisites):
        max_ambari_version = mpack_prerequisites.max_ambari_version
        if (compare_versions(max_ambari_version, current_ambari_version, format=True) < 0):
            print_error_msg('Prerequisite failure! Current Ambari Version = {0}, Max Ambari Version = {1}'.format(current_ambari_version, max_ambari_version))
    if ('min_stack_versions' in mpack_prerequisites):
        min_stack_versions = mpack_prerequisites.min_stack_versions
        stack_found = False
        for min_stack_version in min_stack_versions:
            stack_name = min_stack_version.stack_name
            stack_version = min_stack_version.stack_version
            stack_dir = os.path.join(stack_location, stack_name, stack_version)
            if (os.path.exists(stack_dir) and os.path.isdir(stack_dir)):
                stack_found = True
                break
        if (not stack_found):
            print_error_msg('Prerequisite failure! Min applicable stack not found')
            fail = True
    if fail:
        raise FatalException((-1), 'Prerequisites for management pack {0}-{1} failed!'.format(mpack_metadata.name, mpack_metadata.version))
