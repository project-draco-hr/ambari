{
  final RequestStageContainer requestStages;
  Map<String,Object> installProperties=new HashMap<String,Object>();
  installProperties.put(HOST_COMPONENT_STATE_PROPERTY_ID,"INSTALLED");
  Map<String,String> requestInfo=new HashMap<String,String>();
  requestInfo.put("context","Install and start components on added hosts");
  Request installRequest=PropertyHelper.getUpdateRequest(installProperties,requestInfo);
  Collection<EqualsPredicate> hostPredicates=new ArrayList<EqualsPredicate>();
  for (  String host : hosts) {
    hostPredicates.add(new EqualsPredicate<String>(HOST_COMPONENT_HOST_NAME_PROPERTY_ID,host));
  }
  Predicate statePredicate=new EqualsPredicate<String>(HOST_COMPONENT_STATE_PROPERTY_ID,"INIT");
  Predicate clusterPredicate=new EqualsPredicate<String>(HOST_COMPONENT_CLUSTER_NAME_PROPERTY_ID,cluster);
  Predicate hostPredicate=new OrPredicate(hostPredicates.toArray(new Predicate[hostPredicates.size()]));
  Predicate hostAndStatePredicate=new AndPredicate(statePredicate,hostPredicate);
  Predicate installPredicate=new AndPredicate(hostAndStatePredicate,clusterPredicate);
  try {
    LOG.info("Installing all components on added hosts");
    requestStages=doUpdateResources(null,installRequest,installPredicate,true);
    notifyUpdate(Resource.Type.HostComponent,installRequest,installPredicate);
    Map<String,Object> startProperties=new HashMap<String,Object>();
    startProperties.put(HOST_COMPONENT_STATE_PROPERTY_ID,"STARTED");
    Request startRequest=PropertyHelper.getUpdateRequest(startProperties,requestInfo);
    Predicate installedStatePredicate=new EqualsPredicate<String>(HOST_COMPONENT_DESIRED_STATE_PROPERTY_ID,"INSTALLED");
    Predicate notClientPredicate=new NotPredicate(new ClientComponentPredicate());
    Predicate clusterAndClientPredicate=new AndPredicate(clusterPredicate,notClientPredicate);
    hostAndStatePredicate=new AndPredicate(installedStatePredicate,hostPredicate);
    Predicate startPredicate=new AndPredicate(clusterAndClientPredicate,hostAndStatePredicate);
    LOG.info("Starting all non-client components on added hosts");
    doUpdateResources(requestStages,startRequest,startPredicate,true);
    notifyUpdate(Resource.Type.HostComponent,startRequest,startPredicate);
    try {
      requestStages.persist();
    }
 catch (    AmbariException e) {
      throw new SystemException(e.getMessage(),e);
    }
    return requestStages.getRequestStatusResponse();
  }
 catch (  NoSuchResourceException e) {
    throw new SystemException("An unexpected exception occurred while processing add hosts",e);
  }
}
