{
  Map<String,String> requestInfo=new HashMap<String,String>();
  requestInfo.put("context",String.format("Start components on host %s",hostName));
  requestInfo.put("phase","INITIAL_START");
  Predicate clusterPredicate=new EqualsPredicate<String>(HOST_COMPONENT_CLUSTER_NAME_PROPERTY_ID,cluster);
  Predicate hostPredicate=new EqualsPredicate<String>(HOST_COMPONENT_HOST_NAME_PROPERTY_ID,hostName);
  RequestStageContainer requestStages;
  try {
    Map<String,Object> startProperties=new HashMap<String,Object>();
    startProperties.put(HOST_COMPONENT_DESIRED_STATE_PROPERTY_ID,"STARTED");
    Request startRequest=PropertyHelper.getUpdateRequest(startProperties,requestInfo);
    Predicate installedStatePredicate=new EqualsPredicate<String>(HOST_COMPONENT_DESIRED_STATE_PROPERTY_ID,"INSTALLED");
    Predicate notClientPredicate=new NotPredicate(new ClientComponentPredicate());
    Predicate clusterAndClientPredicate=new AndPredicate(clusterPredicate,notClientPredicate);
    Predicate hostAndStatePredicate=new AndPredicate(installedStatePredicate,hostPredicate);
    Predicate startPredicate=new AndPredicate(clusterAndClientPredicate,hostAndStatePredicate);
    LOG.info("Starting all non-client components on host: " + hostName);
    requestStages=doUpdateResources(null,startRequest,startPredicate,true);
    notifyUpdate(Resource.Type.HostComponent,startRequest,startPredicate);
    try {
      requestStages.persist();
    }
 catch (    AmbariException e) {
      throw new SystemException(e.getMessage(),e);
    }
  }
 catch (  NoSuchResourceException e) {
    throw new SystemException("An unexpected exception occurred while processing start hosts",e);
  }
  return requestStages.getRequestStatusResponse();
}
