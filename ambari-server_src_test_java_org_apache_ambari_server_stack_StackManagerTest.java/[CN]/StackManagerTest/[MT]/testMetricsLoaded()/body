{
  String stackRoot=ClassLoader.getSystemClassLoader().getResource("stacks").getPath().replace("test-classes","classes");
  String commonServices=ClassLoader.getSystemClassLoader().getResource("common-services").getPath().replace("test-classes","classes");
  MetainfoDAO metaInfoDao=createNiceMock(MetainfoDAO.class);
  StackDAO stackDao=createNiceMock(StackDAO.class);
  ActionMetadata actionMetadata=createNiceMock(ActionMetadata.class);
  Configuration config=createNiceMock(Configuration.class);
  expect(config.getSharedResourcesDirPath()).andReturn(ClassLoader.getSystemClassLoader().getResource("").getPath()).anyTimes();
  replay(config,metaInfoDao,stackDao,actionMetadata);
  OsFamily osFamily=new OsFamily(config);
  StackManager stackManager=new StackManager(new File(stackRoot),new File(commonServices),osFamily,metaInfoDao,actionMetadata,stackDao);
  for (  StackInfo stackInfo : stackManager.getStacks()) {
    for (    ServiceInfo serviceInfo : stackInfo.getServices()) {
      Type type=new TypeToken<Map<String,Map<String,List<MetricDefinition>>>>(){
      }
.getType();
      Gson gson=new Gson();
      Map<String,Map<String,List<MetricDefinition>>> map=null;
      if (serviceInfo.getMetricsFile() != null) {
        try {
          map=gson.fromJson(new FileReader(serviceInfo.getMetricsFile()),type);
        }
 catch (        Exception e) {
          e.printStackTrace();
          throw new AmbariException("Failed to load metrics from file " + serviceInfo.getMetricsFile().getAbsolutePath());
        }
      }
    }
  }
}
