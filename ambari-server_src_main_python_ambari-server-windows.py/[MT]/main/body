def main():
    parser = init_options_parser()
    (options, args) = parser.parse_args()
    options.warnings = []
    options.must_set_database_options = False
    if are_cmd_line_db_args_blank(options):
        options.must_set_database_options = True
    elif (not are_cmd_line_db_args_valid(options)):
        parser.error('All database options should be set. Please see help for the options.')
    if options.debug:
        sys.frozen = 'windows_exe'
    if (len(args) == 0):
        print parser.print_help()
        parser.error('No action entered')
    action = args[0]
    if (action == UPGRADE_STACK_ACTION):
        possible_args_numbers = [2, 4]
    else:
        possible_args_numbers = [1]
    matches = 0
    for args_number_required in possible_args_numbers:
        matches += int((len(args) == args_number_required))
    if (matches == 0):
        print parser.print_help()
        possible_args = ' or '.join((str(x) for x in possible_args_numbers))
        parser.error(((('Invalid number of arguments. Entered: ' + str(len(args))) + ', required: ') + possible_args))
    options.exit_message = ("Ambari Server '%s' completed successfully." % action)
    need_restart = True
    try:
        if (action == SETUP_ACTION):
            setup(options)
            svcsetup()
        elif (action == START_ACTION):
            svcstart()
        elif (action == PSTART_ACTION):
            start(options)
        elif (action == STOP_ACTION):
            svcstop()
        elif (action == RESET_ACTION):
            reset(options, AmbariServerService)
        elif (action == STATUS_ACTION):
            svcstatus(options)
        elif (action == UPGRADE_ACTION):
            upgrade(options)
        elif (action == LDAP_SETUP_ACTION):
            setup_ldap()
        elif (action == SETUP_SECURITY_ACTION):
            need_restart = setup_security(options)
        else:
            parser.error('Invalid action')
        if ((action in ACTION_REQUIRE_RESTART) and need_restart):
            (status, stateDesc) = is_server_running(AmbariServerService)
            if status:
                print ('NOTE: Restart Ambari Server to apply changes' + ' ("ambari-server restart|stop|start")')
        if options.warnings:
            for warning in options.warnings:
                print_warning_msg(warning)
                pass
            options.exit_message = ("Ambari Server '%s' completed with warnings." % action)
            pass
    except FatalException as e:
        if (e.reason is not None):
            print_error_msg('Exiting with exit code {0}. \nREASON: {1}'.format(e.code, e.reason))
        sys.exit(e.code)
    except NonFatalException as e:
        options.exit_message = ("Ambari Server '%s' completed with warnings." % action)
        if (e.reason is not None):
            print_warning_msg(e.reason)
    if (options.exit_message is not None):
        print options.exit_message
