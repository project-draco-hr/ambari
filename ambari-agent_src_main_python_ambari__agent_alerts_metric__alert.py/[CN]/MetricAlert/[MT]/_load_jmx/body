def _load_jmx(self, ssl, host, port, jmx_metric):
    ' creates a JmxMetric object that holds info about jmx-based metrics '
    value_list = []
    kerberos_keytab = None
    kerberos_principal = None
    if logger.isEnabledFor(logging.DEBUG):
        logger.debug(str(jmx_metric.property_map))
    security_enabled = (str(self._get_configuration_value(SECURITY_ENABLED_KEY)).upper() == 'TRUE')
    if (self.uri_property_keys.kerberos_principal is not None):
        kerberos_principal = self._get_configuration_value(self.uri_property_keys.kerberos_principal)
        if (kerberos_principal is not None):
            kerberos_principal = kerberos_principal.replace('_HOST', self.host_name)
    if (self.uri_property_keys.kerberos_keytab is not None):
        kerberos_keytab = self._get_configuration_value(self.uri_property_keys.kerberos_keytab)
    if ('0.0.0.0' in str(host)):
        host = self.host_name
    for (jmx_property_key, jmx_property_value) in jmx_metric.property_map.iteritems():
        url = '{0}://{1}:{2}/jmx?qry={3}'.format(('https' if ssl else 'http'), host, str(port), jmx_property_key)
        response = None
        content = ''
        try:
            try:
                if ((kerberos_principal is not None) and (kerberos_keytab is not None) and security_enabled):
                    tmp_dir = Constants.AGENT_TMP_DIR
                    if (tmp_dir is None):
                        tmp_dir = gettempdir()
                    kerberos_executable_search_paths = self._get_configuration_value('{{kerberos-env/executable_search_paths}}')
                    smokeuser = self._get_configuration_value('{{cluster-env/smokeuser}}')
                    (response, error_msg, time_millis) = curl_krb_request(tmp_dir, kerberos_keytab, kerberos_principal, url, 'metric_alert', kerberos_executable_search_paths, False, self.get_name(), smokeuser, connection_timeout=self.curl_connection_timeout)
                    content = response
                else:
                    url_opener = urllib2.build_opener(RefreshHeaderProcessor())
                    response = url_opener.open(url, timeout=self.connection_timeout)
                    content = response.read()
            except Exception as exception:
                if logger.isEnabledFor(logging.DEBUG):
                    logger.exception('[Alert][{0}] Unable to make a web request: {1}'.format(self.get_name(), str(exception)))
        finally:
            if (response is not None):
                try:
                    response.close()
                except:
                    logger.debug('[Alert][{0}] Unable to close JMX URL connection to {1}'.format(self.get_name(), url))
        json_is_valid = True
        try:
            json_response = json.loads(content)
            json_data = json_response['beans'][0]
        except Exception as exception:
            json_is_valid = False
            if logger.isEnabledFor(logging.DEBUG):
                logger.exception("[Alert][{0}] Convert response to json failed or json doesn't contain needed data: {1}".format(self.get_name(), str(exception)))
        if json_is_valid:
            for attr in jmx_property_value:
                if (attr not in json_data):
                    beans = json_response['beans']
                    for jmx_prop_list_item in beans:
                        if (('name' in jmx_prop_list_item) and (jmx_prop_list_item['name'] == jmx_property_key)):
                            if (attr not in jmx_prop_list_item):
                                raise Exception('Unable to find {0} in JSON from {1} '.format(attr, url))
                            json_data = jmx_prop_list_item
                value_list.append(json_data[attr])
        http_response_code = None
        if ((not json_is_valid) and security_enabled and (kerberos_principal is not None) and (kerberos_keytab is not None)):
            (http_response_code, error_msg, time_millis) = curl_krb_request(tmp_dir, kerberos_keytab, kerberos_principal, url, 'metric_alert', kerberos_executable_search_paths, True, self.get_name(), smokeuser, connection_timeout=self.curl_connection_timeout)
    return (value_list, http_response_code)
