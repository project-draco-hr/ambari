def _collect(self):
    if (self.metric_info is None):
        raise Exception('Could not determine result. Specific metric collector is not defined.')
    if (self.uri_property_keys is None):
        raise Exception('Could not determine result. URL(s) were not defined.')
    alert_uri = self._get_uri_from_structure(self.uri_property_keys)
    logger.debug('[Alert][{0}] Calculated metric URI to be {1} (ssl={2})'.format(self.get_name(), alert_uri.uri, str(alert_uri.is_ssl_enabled)))
    host = BaseAlert.get_host_from_url(alert_uri.uri)
    if (host is None):
        host = self.host_name
    port = 80
    try:
        port = int(get_port_from_url(alert_uri.uri))
    except:
        pass
    collect_result = None
    value_list = []
    if isinstance(self.metric_info, JmxMetric):
        (jmx_property_values, http_code) = self._load_jmx(alert_uri.is_ssl_enabled, host, port, self.metric_info)
        if ((not jmx_property_values) and (http_code in [200, 307])):
            collect_result = self.RESULT_UNKNOWN
            value_list.append('HTTP {0} response (metrics unavailable)'.format(str(http_code)))
        elif ((not jmx_property_values) and (http_code not in [200, 307])):
            raise Exception('[Alert][{0}] Unable to get json from jmx response!'.format(self.get_name()))
        else:
            value_list.extend(jmx_property_values)
            check_value = self.metric_info.calculate(value_list)
            value_list.append(check_value)
            collect_result = self.__get_result((value_list[0] if (check_value is None) else check_value))
            logger.debug('[Alert][{0}] Resolved values = {1}'.format(self.get_name(), str(value_list)))
    return (collect_result, value_list)
