{
  Assert.assertNotNull(descriptor);
  Assert.assertTrue(descriptor.isContainer());
  Map<String,String> properties=descriptor.getProperties();
  Assert.assertNotNull(properties);
  Assert.assertEquals(2,properties.size());
  Assert.assertEquals("${cluster-env/kerberos_domain}",properties.get("realm"));
  Assert.assertEquals("/etc/security/keytabs",properties.get("keytab_dir"));
  Set<String> authToLocalProperties=descriptor.getAuthToLocalProperties();
  Assert.assertNotNull(authToLocalProperties);
  Assert.assertEquals(1,authToLocalProperties.size());
  Assert.assertTrue(authToLocalProperties.contains("generic.name.rules"));
  authToLocalProperties=descriptor.getAllAuthToLocalProperties();
  Assert.assertNotNull(authToLocalProperties);
  Assert.assertEquals(3,authToLocalProperties.size());
  Assert.assertTrue(authToLocalProperties.contains("component.name.rules1"));
  Assert.assertTrue(authToLocalProperties.contains("generic.name.rules"));
  Assert.assertTrue(authToLocalProperties.contains("service.name.rules1"));
  Map<String,KerberosServiceDescriptor> serviceDescriptors=descriptor.getServices();
  Assert.assertNotNull(serviceDescriptors);
  Assert.assertEquals(1,serviceDescriptors.size());
  for (  KerberosServiceDescriptor serviceDescriptor : serviceDescriptors.values()) {
    KerberosServiceDescriptorTest.validateFromJSON(serviceDescriptor);
  }
  Map<String,KerberosConfigurationDescriptor> configurations=descriptor.getConfigurations();
  Assert.assertNull(configurations);
}
