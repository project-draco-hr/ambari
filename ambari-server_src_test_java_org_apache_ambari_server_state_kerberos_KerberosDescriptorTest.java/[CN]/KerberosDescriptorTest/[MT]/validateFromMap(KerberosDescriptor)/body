{
  Assert.assertNotNull(descriptor);
  Assert.assertTrue(descriptor.isContainer());
  Map<String,String> properties=descriptor.getProperties();
  Assert.assertNotNull(properties);
  Assert.assertEquals(2,properties.size());
  Assert.assertEquals("EXAMPLE.COM",properties.get("realm"));
  Assert.assertEquals("Hello World",properties.get("some.property"));
  Set<String> authToLocalProperties=descriptor.getAuthToLocalProperties();
  Assert.assertNotNull(authToLocalProperties);
  Assert.assertEquals(1,authToLocalProperties.size());
  Assert.assertEquals("global.name.rules",authToLocalProperties.iterator().next());
  Map<String,KerberosServiceDescriptor> services=descriptor.getServices();
  Assert.assertNotNull(services);
  Assert.assertEquals(1,services.size());
  for (  KerberosServiceDescriptor service : services.values()) {
    KerberosComponentDescriptor component=service.getComponent("A_DIFFERENT_COMPONENT_NAME");
    Assert.assertNotNull(component);
    List<KerberosIdentityDescriptor> resolvedIdentities=component.getIdentities(true,null);
    KerberosIdentityDescriptor resolvedIdentity=null;
    Assert.assertNotNull(resolvedIdentities);
    Assert.assertEquals(3,resolvedIdentities.size());
    for (    KerberosIdentityDescriptor item : resolvedIdentities) {
      if ("/shared".equals(item.getReference())) {
        resolvedIdentity=item;
        break;
      }
    }
    Assert.assertNotNull(resolvedIdentity);
    List<KerberosIdentityDescriptor> identities=component.getIdentities(false,null);
    Assert.assertNotNull(identities);
    Assert.assertEquals(3,identities.size());
    KerberosIdentityDescriptor identityReference=component.getIdentity("shared_identity");
    Assert.assertNotNull(identityReference);
    KerberosIdentityDescriptor referencedIdentity=descriptor.getIdentity("shared");
    Assert.assertNotNull(referencedIdentity);
    Assert.assertEquals(identityReference.getKeytabDescriptor(),resolvedIdentity.getKeytabDescriptor());
    Assert.assertEquals(referencedIdentity.getPrincipalDescriptor(),resolvedIdentity.getPrincipalDescriptor());
    Map<String,KerberosConfigurationDescriptor> configurations=service.getConfigurations(true);
    Assert.assertNotNull(configurations);
    Assert.assertEquals(2,configurations.size());
    Assert.assertNotNull(configurations.get("service-site"));
    Assert.assertNotNull(configurations.get("cluster-conf"));
  }
  Map<String,KerberosConfigurationDescriptor> configurations=descriptor.getConfigurations();
  Assert.assertNotNull(configurations);
  Assert.assertEquals(1,configurations.size());
  KerberosConfigurationDescriptor configuration=configurations.get("cluster-conf");
  Assert.assertNotNull(configuration);
  Map<String,String> configProperties=configuration.getProperties();
  Assert.assertEquals("cluster-conf",configuration.getType());
  Assert.assertNotNull(configProperties);
  Assert.assertEquals(1,configProperties.size());
  Assert.assertEquals("red",configProperties.get("property1"));
}
