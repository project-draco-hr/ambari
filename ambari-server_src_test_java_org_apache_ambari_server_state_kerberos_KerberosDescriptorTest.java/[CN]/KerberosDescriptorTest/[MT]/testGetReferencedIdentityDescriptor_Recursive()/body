{
  boolean identityFound=false;
  List<KerberosIdentityDescriptor> identities;
  URL systemResourceURL=ClassLoader.getSystemResource("kerberos/test_get_referenced_identity_descriptor.json");
  Assert.assertNotNull(systemResourceURL);
  KerberosDescriptor descriptor=KERBEROS_DESCRIPTOR_FACTORY.createInstance(new File(systemResourceURL.getFile()));
  Assert.assertNotNull(descriptor);
  KerberosServiceDescriptor serviceDescriptor=descriptor.getService("SERVICE2");
  Assert.assertNotNull(serviceDescriptor);
  identities=serviceDescriptor.getIdentities(true,null);
  Assert.assertNotNull(identities);
  identityFound=false;
  for (  KerberosIdentityDescriptor identity : identities) {
    if ("service2_stack_reference".equals(identity.getName())) {
      Assert.assertEquals("stack@${realm}",identity.getPrincipalDescriptor().getValue());
      Assert.assertEquals("${keytab_dir}/service2_stack.keytab",identity.getKeytabDescriptor().getFile());
      Assert.assertEquals("/stack_identity",identity.getReference());
      Assert.assertEquals("service2/property1_principal",identity.getPrincipalDescriptor().getConfiguration());
      identityFound=true;
    }
  }
  Assert.assertTrue(identityFound);
  KerberosComponentDescriptor componentDescriptor=serviceDescriptor.getComponent("SERVICE2_COMPONENT1");
  Assert.assertNotNull(componentDescriptor);
  identities=componentDescriptor.getIdentities(true,null);
  Assert.assertNotNull(identities);
  identityFound=false;
  for (  KerberosIdentityDescriptor identity : identities) {
    if ("component1_service2_stack_reference".equals(identity.getName())) {
      Assert.assertEquals("stack@${realm}",identity.getPrincipalDescriptor().getValue());
      Assert.assertEquals("${keytab_dir}/service2_stack.keytab",identity.getKeytabDescriptor().getFile());
      Assert.assertEquals("/SERVICE2/service2_stack_reference",identity.getReference());
      Assert.assertEquals("component1_service2/property1_principal",identity.getPrincipalDescriptor().getConfiguration());
      identityFound=true;
    }
  }
  Assert.assertTrue(identityFound);
}
