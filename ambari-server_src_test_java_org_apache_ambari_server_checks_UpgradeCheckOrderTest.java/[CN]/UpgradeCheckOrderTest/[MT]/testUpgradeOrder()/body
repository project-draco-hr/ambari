{
  String sourceResourceDirectory="src" + File.separator + "test"+ File.separator+ "resources";
  Properties properties=new Properties();
  properties.setProperty(Configuration.SERVER_PERSISTENCE_TYPE_KEY,"in-memory");
  properties.setProperty(Configuration.OS_VERSION_KEY,"centos6");
  properties.setProperty(Configuration.SHARED_RESOURCES_DIR_KEY,sourceResourceDirectory);
  Injector injector=Guice.createInjector(new ControllerModule(properties));
  UpgradeCheckRegistry registry=injector.getInstance(UpgradeCheckRegistry.class);
  UpgradeCheckRegistry registry2=injector.getInstance(UpgradeCheckRegistry.class);
  Assert.assertEquals(registry,registry2);
  List<AbstractCheckDescriptor> checks=registry.getUpgradeChecks();
  ClassPathScanningCandidateComponentProvider scanner=new ClassPathScanningCandidateComponentProvider(false);
  AssignableTypeFilter filter=new AssignableTypeFilter(AbstractCheckDescriptor.class);
  scanner.addIncludeFilter(filter);
  Set<BeanDefinition> beanDefinitions=scanner.findCandidateComponents("org.apache.ambari.server");
  Assert.assertEquals(beanDefinitions.size(),checks.size());
  AbstractCheckDescriptor lastCheck=null;
  for (  AbstractCheckDescriptor check : checks) {
    UpgradeCheckGroup group=UpgradeCheckGroup.DEFAULT;
    UpgradeCheckGroup lastGroup=UpgradeCheckGroup.DEFAULT;
    Float order=1.0f;
    Float lastOrder=1.0f;
    if (null == lastCheck) {
      lastCheck=check;
    }
    UpgradeCheck annotation=check.getClass().getAnnotation(UpgradeCheck.class);
    UpgradeCheck lastAnnotation=lastCheck.getClass().getAnnotation(UpgradeCheck.class);
    if (null != annotation) {
      group=annotation.group();
      order=annotation.order();
    }
    if (null != lastAnnotation) {
      lastGroup=lastAnnotation.group();
      lastOrder=lastAnnotation.order();
    }
    Assert.assertTrue(lastGroup.getOrder().compareTo(group.getOrder()) <= 0);
    Assert.assertTrue(lastOrder.compareTo(order) <= 0);
  }
}
