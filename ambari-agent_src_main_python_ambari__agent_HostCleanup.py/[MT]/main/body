def main():
    h = HostCleanup()
    config = h.resolve_ambari_config()
    hostCheckFileDir = config.get('agent', 'prefix')
    hostCheckFilePath = os.path.join(hostCheckFileDir, HOST_CHECK_FILE_NAME)
    hostCheckResultPath = os.path.join(hostCheckFileDir, OUTPUT_FILE_NAME)
    parser = optparse.OptionParser()
    parser.add_option('-v', '--verbose', dest='verbose', action='store_false', default=False, help='output verbosity.')
    parser.add_option('-f', '--file', dest='inputfile', default=hostCheckFilePath, help='host check result file to read.', metavar='FILE')
    parser.add_option('-o', '--out', dest='outputfile', default=hostCheckResultPath, help='log file to store results.', metavar='FILE')
    parser.add_option('-k', '--skip', dest='skip', help=('(packages|users|directories|repositories|processes|alternatives).' + ' Use , as separator.'))
    parser.add_option('-s', '--silent', action='store_true', dest='silent', default=False, help='Silently accepts default prompt values')
    parser.add_option('-j', '--java-home', default='/usr/jdk64/jdk1.6.0_31', dest='java_home', help='Use specified java_home.')
    (options, args) = parser.parse_args()
    backup_file(options.outputfile)
    global logger
    logger = logging.getLogger('HostCleanup')
    handler = logging.FileHandler(options.outputfile)
    formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
    handler.setFormatter(formatter)
    logger.addHandler(handler)
    global JAVA_HOME
    JAVA_HOME = options.java_home
    if options.verbose:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)
    if (options.skip is not None):
        global SKIP_LIST
        SKIP_LIST = options.skip.split(',')
    is_root = h.is_current_user_root()
    if (not is_root):
        raise RuntimeError('HostCleanup needs to be run as root.')
    if (not options.silent):
        if ('users' not in SKIP_LIST):
            delete_users = get_YN_input('You have elected to remove all users as well. If it is not intended then use option --skip "users". Do you want to continue [y/n] (y)', True)
            if (not delete_users):
                print 'Exiting. Use option --skip="users" to skip deleting users'
                sys.exit(1)
    hostcheckfile = options.inputfile
    propMap = h.read_host_check_file(hostcheckfile)
    if propMap:
        h.do_cleanup(propMap)
    logger.info(('Clean-up completed. The output is at %s' % str(options.outputfile)))
