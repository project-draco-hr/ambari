def read_host_check_file(self, config_file_path):
    propertyMap = {}
    try:
        with open(config_file_path, 'r'):
            pass
    except Exception as e:
        logger.error(('Host check result not found at: ' + str(config_file_path)))
        return None
    try:
        config = ConfigParser.RawConfigParser()
        config.read(config_file_path)
    except Exception as e:
        logger.error(('Cannot read host check result: ' + str(e)))
        return None
    try:
        if config.has_option(PACKAGE_SECTION, PACKAGE_KEY):
            propertyMap[PACKAGE_SECTION] = config.get(PACKAGE_SECTION, PACKAGE_KEY).split(',')
    except:
        logger.warn(('Cannot read package list: ' + str(sys.exc_info()[0])))
    try:
        if config.has_option(PROCESS_SECTION, PROCESS_KEY):
            propertyMap[PROCESS_SECTION] = config.get(PROCESS_SECTION, PROCESS_KEY).split(',')
    except:
        logger.warn(('Cannot read process list: ' + str(sys.exc_info()[0])))
    try:
        if config.has_option(USER_SECTION, USER_KEY):
            propertyMap[USER_SECTION] = config.get(USER_SECTION, USER_KEY).split(',')
    except:
        logger.warn(('Cannot read user list: ' + str(sys.exc_info()[0])))
    try:
        if config.has_option(USER_SECTION, USER_HOMEDIR_KEY):
            propertyMap[USER_HOMEDIR_SECTION] = config.get(USER_SECTION, USER_HOMEDIR_KEY).split(',')
    except:
        logger.warn(('Cannot read user homedir list: ' + str(sys.exc_info()[0])))
    try:
        if config.has_option(REPO_SECTION, REPOS_KEY):
            propertyMap[REPO_SECTION] = config.get(REPO_SECTION, REPOS_KEY).split(',')
    except:
        logger.warn(('Cannot read repositories list: ' + str(sys.exc_info()[0])))
    try:
        if config.has_option(DIR_SECTION, DIR_KEY):
            propertyMap[DIR_SECTION] = config.get(DIR_SECTION, DIR_KEY).split(',')
    except:
        logger.warn(('Cannot read dir list: ' + str(sys.exc_info()[0])))
    try:
        alt_map = {}
        if config.has_option(ALT_SECTION, ALT_KEYS[0]):
            alt_map[ALT_KEYS[0]] = config.get(ALT_SECTION, ALT_KEYS[0]).split(',')
        if config.has_option(ALT_SECTION, ALT_KEYS[1]):
            alt_map[ALT_KEYS[1]] = config.get(ALT_SECTION, ALT_KEYS[1]).split(',')
        if alt_map:
            propertyMap[ALT_SECTION] = alt_map
    except:
        logger.warn(('Cannot read alternates list: ' + str(sys.exc_info()[0])))
    return propertyMap
