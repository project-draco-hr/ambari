{
  VersionEventPublisher publisher=createNiceMock(VersionEventPublisher.class);
  Cluster cluster=createNiceMock(Cluster.class);
  ServiceComponentHost sch=createNiceMock(ServiceComponentHost.class);
  RepositoryVersionEntity repositoryVersionEntity=createNiceMock(RepositoryVersionEntity.class);
  Service service=createNiceMock(Service.class);
  ServiceComponent serviceComponent=createNiceMock(ServiceComponent.class);
  expect(serviceComponent.getDesiredVersion()).andReturn(DESIRED_VERSION);
  expect(service.getServiceComponent(SERVICE_COMPONENT_NAME)).andReturn(serviceComponent);
  expect(cluster.getClusterId()).andReturn(99L);
  expect(cluster.getService(anyString())).andReturn(service);
  expect(sch.getServiceName()).andReturn(SERVICE_NAME);
  expect(sch.getServiceComponentName()).andReturn(SERVICE_COMPONENT_NAME);
  expect(sch.recalculateHostVersionState()).andReturn(repositoryVersionEntity).atLeastOnce();
  cluster.recalculateClusterVersionState(repositoryVersionEntity);
  EasyMock.expectLastCall().atLeastOnce();
  replay(cluster,sch,serviceComponent,service);
  HostComponentVersionAdvertisedEvent event=new HostComponentVersionAdvertisedEvent(cluster,sch,DESIRED_VERSION);
  StackVersionListener listener=new StackVersionListener(publisher);
  listener.onAmbariEvent(event);
  verify(cluster,sch);
}
