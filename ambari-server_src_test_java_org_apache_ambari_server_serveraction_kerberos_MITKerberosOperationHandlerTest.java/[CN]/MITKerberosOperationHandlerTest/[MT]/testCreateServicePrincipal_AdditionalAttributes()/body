{
  Method invokeKAdmin=MITKerberosOperationHandler.class.getDeclaredMethod("invokeKAdmin",String.class);
  Capture<? extends String> query=new Capture<String>();
  ShellCommandUtil.Result result1=createNiceMock(ShellCommandUtil.Result.class);
  expect(result1.getStderr()).andReturn("").anyTimes();
  expect(result1.getStdout()).andReturn("Principal \"" + DEFAULT_ADMIN_PRINCIPAL + "\" created\"").anyTimes();
  ShellCommandUtil.Result result2=createNiceMock(ShellCommandUtil.Result.class);
  expect(result2.getStderr()).andReturn("").anyTimes();
  expect(result2.getStdout()).andReturn("Key: vno 1").anyTimes();
  MITKerberosOperationHandler handler=createMockBuilder(MITKerberosOperationHandler.class).addMockedMethod(invokeKAdmin).createStrictMock();
  expect(handler.invokeKAdmin(capture(query))).andReturn(result1).once();
  expect(handler.invokeKAdmin("get_principal " + DEFAULT_ADMIN_PRINCIPAL)).andReturn(result2).once();
  replay(handler,result1,result2);
  handler.open(new KerberosCredential(DEFAULT_ADMIN_PRINCIPAL,DEFAULT_ADMIN_PASSWORD.toCharArray(),null),DEFAULT_REALM,KERBEROS_ENV_MAP);
  handler.createPrincipal(DEFAULT_ADMIN_PRINCIPAL,DEFAULT_ADMIN_PASSWORD,false);
  verify(handler,result1,result2);
  Assert.assertTrue(query.getValue().contains(" " + KERBEROS_ENV_MAP.get(MITKerberosOperationHandler.KERBEROS_ENV_KDC_CREATE_ATTRIBUTES) + " "));
}
