def setup_hadoop():
    '\n  Setup hadoop files and directories\n  '
    import params
    File(os.path.join(params.snmp_conf_dir, 'snmpd.conf'), content=Template('snmpd.conf.j2'))
    Service('snmpd', action='restart')
    Execute('/bin/echo 0 > /selinux/enforce', only_if='test -f /selinux/enforce')
    install_snappy()
    Directory(params.hadoop_conf_dir, recursive=True, owner='root', group='root')
    Directory(params.hdfs_log_dir_prefix, recursive=True, owner='root', group='root')
    Directory(params.hadoop_pid_dir_prefix, recursive=True, owner='root', group='root')
    Directory(os.path.dirname(params.hadoop_tmp_dir), recursive=True, owner=params.hdfs_user)
    File(os.path.join(params.limits_conf_dir, 'hdfs.conf'), owner='root', group='root', mode=420, content=Template('hdfs.conf.j2'))
    if params.security_enabled:
        File(os.path.join(params.hadoop_bin, 'task-controller'), owner='root', group=params.mapred_tt_group, mode=3112)
        tc_mode = 420
        tc_owner = 'root'
    else:
        tc_mode = None
        tc_owner = params.hdfs_user
    if tc_mode:
        File(os.path.join(params.hadoop_conf_dir, 'taskcontroller.cfg'), owner=tc_owner, mode=tc_mode, group=params.mapred_tt_group, content=Template('taskcontroller.cfg.j2'))
    else:
        File(os.path.join(params.hadoop_conf_dir, 'taskcontroller.cfg'), owner=tc_owner, content=Template('taskcontroller.cfg.j2'))
    for file in ['hadoop-env.sh', 'commons-logging.properties', 'slaves']:
        File(os.path.join(params.hadoop_conf_dir, file), owner=tc_owner, content=Template((file + '.j2')))
    health_check_template = 'health_check-v2'
    File(os.path.join(params.hadoop_conf_dir, 'health_check'), owner=tc_owner, content=Template((health_check_template + '.j2')))
    log4j_filename = os.path.join(params.hadoop_conf_dir, 'log4j.properties')
    if (params.log4j_props != None):
        PropertiesFile(log4j_filename, properties=params.log4j_props, mode=436, owner=params.hdfs_user, group=params.user_group)
    elif os.path.exists(format('{params.hadoop_conf_dir}/log4j.properties')):
        File(log4j_filename, mode=420, group=params.user_group, owner=params.hdfs_user)
    update_log4j_props(log4j_filename)
    File(os.path.join(params.hadoop_conf_dir, 'hadoop-metrics2.properties'), owner=params.hdfs_user, content=Template('hadoop-metrics2.properties.j2'))
    db_driver_dload_cmd = ''
    if ((params.server_db_name == 'oracle') and (params.oracle_driver_url != '')):
        db_driver_dload_cmd = format('curl -kf --retry 5 {oracle_driver_url} -o {hadoop_lib_home}/{db_driver_filename}')
    elif ((params.server_db_name == 'mysql') and (params.mysql_driver_url != '')):
        db_driver_dload_cmd = format('curl -kf --retry 5 {mysql_driver_url} -o {hadoop_lib_home}/{db_driver_filename}')
    if db_driver_dload_cmd:
        Execute(db_driver_dload_cmd, not_if=format('test -e {hadoop_lib_home}/{db_driver_filename}'))
