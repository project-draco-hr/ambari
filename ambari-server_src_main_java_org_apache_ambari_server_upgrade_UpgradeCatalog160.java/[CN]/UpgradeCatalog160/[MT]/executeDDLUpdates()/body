{
  List<DBAccessor.DBColumnInfo> columns=new ArrayList<DBAccessor.DBColumnInfo>();
  columns.clear();
  columns.add(new DBAccessor.DBColumnInfo("blueprint_name",String.class,255,null,false));
  columns.add(new DBAccessor.DBColumnInfo("hostgroup_name",String.class,255,null,false));
  columns.add(new DBAccessor.DBColumnInfo("type_name",String.class,255,null,false));
  columns.add(new DBAccessor.DBColumnInfo("config_data",byte[].class,null,null,false));
  dbAccessor.createTable("hostgroup_configuration",columns,"blueprint_name","hostgroup_name","type_name");
  columns=new ArrayList<DBAccessor.DBColumnInfo>();
  columns.add(new DBAccessor.DBColumnInfo("id",Long.class,null,null,false));
  columns.add(new DBAccessor.DBColumnInfo("view_name",String.class,255,null,false));
  columns.add(new DBAccessor.DBColumnInfo("view_instance_name",String.class,255,null,false));
  columns.add(new DBAccessor.DBColumnInfo("class_name",String.class,255,null,false));
  columns.add(new DBAccessor.DBColumnInfo("id_property",String.class,255,null,true));
  dbAccessor.createTable("viewentity",columns,"id");
  DBAccessor.DBColumnInfo restartRequiredColumn=new DBAccessor.DBColumnInfo("restart_required",Integer.class,1,0,false);
  dbAccessor.addColumn("hostcomponentdesiredstate",restartRequiredColumn);
  dbAccessor.addFKConstraint("hostgroup_configuration","FK_hg_config_blueprint_name",new String[]{"blueprint_name","hostgroup_name"},"hostgroup",new String[]{"blueprint_name","name"},true);
  dbAccessor.addFKConstraint("viewentity","FK_viewentity_view_name",new String[]{"view_name","view_instance_name"},"viewinstance",new String[]{"view_name","name"},true);
}
