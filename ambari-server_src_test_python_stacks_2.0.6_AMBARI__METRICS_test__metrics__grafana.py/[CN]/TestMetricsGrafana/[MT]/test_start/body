@patch('metrics_grafana_util.create_ams_datasource')
@patch('metrics_grafana_util.create_ams_dashboards')
def test_start(self, create_ams_datasource_mock, create_ams_dashboards_mock):
    self.executeScript((self.COMMON_SERVICES_PACKAGE_DIR + '/metrics_grafana.py'), classname='AmsGrafana', command='start', config_file='default.json', stack_version=self.STACK_VERSION, target=RMFTestCase.TARGET_COMMON_SERVICES)
    self.maxDiff = None
    self.assert_configure()
    self.assertResourceCalled('Execute', 'ambari-sudo.sh /usr/jdk64/jdk1.7.0_45/bin/keytool -importkeystore -srckeystore /etc/security/clientKeys/all.jks -destkeystore /some_tmp_dir/truststore.p12 -deststoretype PKCS12 -srcstorepass bigdata -deststorepass bigdata')
    self.assertResourceCalled('Execute', 'ambari-sudo.sh openssl pkcs12 -in /some_tmp_dir/truststore.p12 -out /etc/ambari-metrics-grafana/conf/ca.pem -cacerts -nokeys -passin pass:bigdata')
    self.assertResourceCalled('Execute', ('chown', u'ams', '/etc/ambari-metrics-grafana/conf/ca.pem'), sudo=True)
    self.assertResourceCalled('Execute', 'ambari-sudo.sh rm -rf /some_tmp_dir')
    self.assertResourceCalled('Execute', '/usr/sbin/ambari-metrics-grafana stop', user='ams')
    self.assertResourceCalled('Execute', '/usr/sbin/ambari-metrics-grafana start', user='ams')
    create_ams_datasource_mock.assertCalled()
    create_ams_dashboards_mock.assertCalled()
    self.assertNoMoreResources()
