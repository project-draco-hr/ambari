def get_stack_tool(name):
    '\n  Give a tool selector name get the stack-specific tool name, tool path, tool package\n  :param name: tool selector name\n  :return: tool_name, tool_path, tool_package\n  '
    from resource_management.libraries.functions.default import default
    stack_tools = None
    stack_tools_config = default('/configurations/cluster-env/stack_tools', None)
    if stack_tools_config:
        stack_tools = json.loads(stack_tools_config)
    if ((not stack_tools) or (not name) or (name.lower() not in stack_tools)):
        Logger.warning('Cannot find config for {0} stack tool in {1}'.format(str(name), str(stack_tools)))
        return (None, None, None)
    tool_config = stack_tools[name.lower()]
    return tuple(pad(tool_config[:3], 3))
