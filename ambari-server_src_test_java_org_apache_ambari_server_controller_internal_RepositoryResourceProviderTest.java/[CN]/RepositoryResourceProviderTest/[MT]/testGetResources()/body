{
  Resource.Type type=Resource.Type.Repository;
  AmbariManagementController managementController=EasyMock.createMock(AmbariManagementController.class);
  RepositoryResponse rr=new RepositoryResponse(VAL_BASE_URL,VAL_OS,VAL_REPO_ID,VAL_REPO_NAME,null);
  Set<RepositoryResponse> allResponse=new HashSet<RepositoryResponse>();
  allResponse.add(rr);
  expect(managementController.getRepositories(EasyMock.<Set<RepositoryRequest>>anyObject())).andReturn(allResponse).times(1);
  replay(managementController);
  ResourceProvider provider=AbstractControllerResourceProvider.getResourceProvider(type,PropertyHelper.getPropertyIds(type),PropertyHelper.getKeyPropertyIds(type),managementController);
  Set<String> propertyIds=new HashSet<String>();
  propertyIds.add(RepositoryResourceProvider.STACK_NAME_PROPERTY_ID);
  propertyIds.add(RepositoryResourceProvider.STACK_VERSION_PROPERTY_ID);
  propertyIds.add(RepositoryResourceProvider.REPOSITORY_NAME_PROPERTY_ID);
  propertyIds.add(RepositoryResourceProvider.REPOSITORY_BASE_URL_PROPERTY_ID);
  propertyIds.add(RepositoryResourceProvider.REPOSITORY_OS_TYPE_PROPERTY_ID);
  propertyIds.add(RepositoryResourceProvider.REPO_ID_PROPERTY_ID);
  Predicate predicate=new PredicateBuilder().property(RepositoryResourceProvider.STACK_NAME_PROPERTY_ID).equals(VAL_STACK_NAME).and().property(RepositoryResourceProvider.STACK_VERSION_PROPERTY_ID).equals(VAL_STACK_VERSION).toPredicate();
  Request request=PropertyHelper.getReadRequest(propertyIds);
  Set<Resource> resources=provider.getResources(request,predicate);
  Assert.assertEquals(allResponse.size(),resources.size());
  for (  Resource resource : resources) {
    Object o=resource.getPropertyValue(RepositoryResourceProvider.STACK_NAME_PROPERTY_ID);
    Assert.assertEquals(VAL_STACK_NAME,o);
    o=resource.getPropertyValue(RepositoryResourceProvider.STACK_VERSION_PROPERTY_ID);
    Assert.assertEquals(VAL_STACK_VERSION,o);
    o=resource.getPropertyValue(RepositoryResourceProvider.REPOSITORY_NAME_PROPERTY_ID);
    Assert.assertEquals(o,VAL_REPO_NAME);
    o=resource.getPropertyValue(RepositoryResourceProvider.REPOSITORY_BASE_URL_PROPERTY_ID);
    Assert.assertEquals(o,VAL_BASE_URL);
    o=resource.getPropertyValue(RepositoryResourceProvider.REPOSITORY_OS_TYPE_PROPERTY_ID);
    Assert.assertEquals(o,VAL_OS);
    o=resource.getPropertyValue(RepositoryResourceProvider.REPO_ID_PROPERTY_ID);
    Assert.assertEquals(o,VAL_REPO_ID);
  }
  verify(managementController);
}
