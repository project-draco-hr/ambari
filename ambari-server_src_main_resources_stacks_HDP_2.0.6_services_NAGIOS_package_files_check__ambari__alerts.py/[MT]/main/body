def main():
    parser = optparse.OptionParser()
    parser.add_option('-H', '--host', dest='host', default='localhost', help='NameNode host')
    parser.add_option('-n', '--name', dest='alert_name', help='Alert name to check')
    parser.add_option('-f', '--file', dest='alert_file', help='File containing the alert structure')
    (options, args) = parser.parse_args()
    if (options.alert_name is None):
        print 'Alert name is required (--name or -n)'
        exit((-1))
    if (options.alert_file is None):
        print 'Alert file is required (--file or -f)'
        exit((-1))
    if (not os.path.exists(options.alert_file)):
        print 'Alert file must exist'
        exit((-1))
    try:
        with open(options.alert_file, 'r') as f:
            data = json.load(f)
            first = True
            buf = ''
            for_hosts = data[options.alert_name]
            if for_hosts.has_key(options.host):
                for host_entry in for_hosts[options.host]:
                    alert_state = host_entry['state']
                    alert_text = host_entry['text']
                    if (alert_state == 'CRITICAL'):
                        print str(alert_text)
                        exit(2)
                    elif (alert_state == 'WARNING'):
                        print str(alert_text)
                        exit(1)
                    else:
                        if (not first):
                            buf = (buf + ', ')
                        buf = (buf + alert_text)
                        first = False
            print buf
            exit(0)
    except Exception:
        traceback.print_exc()
        exit(3)
