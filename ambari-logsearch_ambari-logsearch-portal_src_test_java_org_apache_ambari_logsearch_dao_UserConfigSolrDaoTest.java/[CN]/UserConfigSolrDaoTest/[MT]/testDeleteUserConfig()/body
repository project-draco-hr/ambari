{
  SolrClient mockSolrClient=EasyMock.strictMock(SolrClient.class);
  UpdateResponse updateResponse=new UpdateResponse();
  NamedList<Object> response=new NamedList<Object>();
  NamedList<Object> header=new NamedList<Object>();
  header.add("QTime",1);
  response.add("responseHeader",header);
  updateResponse.setResponse(response);
  EasyMock.expect(configMock.getSolrUrl()).andReturn(null);
  EasyMock.expect(configMock.getZkConnectString()).andReturn("dummyHost1:2181,dummyHost2:2181");
  EasyMock.expect(configMock.getConfigName()).andReturn("test_history_logs_config_name");
  EasyMock.expect(configMock.getCollection()).andReturn("test_history_logs_collection");
  EasyMock.expect(configMock.getSplitInterval()).andReturn("none");
  EasyMock.expect(configMock.getNumberOfShards()).andReturn(123);
  EasyMock.expect(configMock.getReplicationFactor()).andReturn(234);
  EasyMock.expect(kerbConfigMock.isEnabled()).andReturn(false);
  EasyMock.expect(kerbConfigMock.getJaasFile()).andReturn("jaas_file");
  EasyMock.expect(mockSolrClient.deleteByQuery("id:test_id")).andReturn(updateResponse);
  EasyMock.expect(mockSolrClient.commit()).andReturn(updateResponse);
  EasyMock.replay(mockSolrClient,configMock,kerbConfigMock);
  dao.postConstructor();
  dao.solrClient=mockSolrClient;
  dao.isZkConnectString=true;
  dao.deleteUserConfig("test_id");
  EasyMock.verify(mockSolrClient,configMock,kerbConfigMock);
}
