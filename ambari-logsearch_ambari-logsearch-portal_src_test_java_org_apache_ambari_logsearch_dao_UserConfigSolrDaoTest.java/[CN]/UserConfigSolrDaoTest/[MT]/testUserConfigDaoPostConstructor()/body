{
  SolrClient mockSolrClient=EasyMock.strictMock(SolrClient.class);
  NamedList<Object> requestResponse=new NamedList<Object>();
  NamedList<Object> requestResponseHeader=new NamedList<Object>();
  requestResponseHeader.add("status",0);
  requestResponse.add("responseHeader",requestResponseHeader);
  requestResponse.add("collections",new ArrayList<String>());
  QueryResponse queryResponse=new QueryResponse();
  UpdateResponse updateResponse=new UpdateResponse();
  NamedList<Object> updateResponseContent=new NamedList<Object>();
  NamedList<Object> updateResponseHeader=new NamedList<Object>();
  updateResponseHeader.add("QTime",1);
  updateResponseContent.add("responseHeader",updateResponseHeader);
  updateResponse.setResponse(updateResponseContent);
  Capture<CollectionAdminRequest.Create> captureCreateRequest=EasyMock.newCapture(CaptureType.LAST);
  Capture<SolrParams> captureSolrParams=EasyMock.newCapture(CaptureType.LAST);
  Capture<METHOD> captureMethod=EasyMock.newCapture(CaptureType.LAST);
  Capture<SolrInputDocument> captureSolrInputDocument=EasyMock.newCapture(CaptureType.LAST);
  EasyMock.expect(mockSolrClient.request(EasyMock.anyObject(CollectionAdminRequest.List.class),EasyMock.anyString())).andReturn(requestResponse);
  mockSolrClient.request(EasyMock.capture(captureCreateRequest),EasyMock.anyString());
  EasyMock.expectLastCall().andReturn(requestResponse);
  mockSolrClient.query(EasyMock.capture(captureSolrParams),EasyMock.capture(captureMethod));
  EasyMock.expectLastCall().andReturn(queryResponse);
  mockSolrClient.add(EasyMock.capture(captureSolrInputDocument));
  EasyMock.expectLastCall().andReturn(updateResponse);
  EasyMock.expect(mockSolrClient.commit()).andReturn(updateResponse);
  EasyMock.replay(mockSolrClient);
  UserConfigSolrDao dao=new UserConfigSolrDao();
  dao.postConstructor();
  dao.solrClient=mockSolrClient;
  dao.isZkConnectString=true;
  dao.postConstructor();
  EasyMock.verify(mockSolrClient);
  CollectionAdminRequest.Create createRequest=captureCreateRequest.getValue();
  Assert.assertEquals(createRequest.getConfigName(),"test_history_logs_config_name");
  Assert.assertEquals(createRequest.getReplicationFactor().intValue(),234);
  Assert.assertEquals(createRequest.getCollectionName(),"test_history_logs_collection");
  SolrParams solrParams=captureSolrParams.getValue();
  Assert.assertEquals(solrParams.get("q"),"*:*");
  Assert.assertEquals(solrParams.get("fq"),"rowtype:log_feeder_config");
  METHOD method=captureMethod.getValue();
  Assert.assertEquals(method,METHOD.POST);
  SolrInputDocument solrInputDocument=captureSolrInputDocument.getValue();
  Assert.assertNotNull(solrInputDocument.getFieldValue("id"));
  Assert.assertEquals(solrInputDocument.getFieldValue("rowtype"),"log_feeder_config");
  Assert.assertEquals(solrInputDocument.getFieldValue("jsons"),"{\"filter\":{\"test_component2\":{\"label\":\"test_component2\",\"hosts\":[],\"defaultLevels\":[\"FATAL\",\"ERROR\",\"WARN\",\"INFO\",\"DEBUG\",\"TRACE\"],\"overrideLevels\":[]},\"test_component1\":{\"label\":\"test_component1\",\"hosts\":[],\"defaultLevels\":[\"FATAL\",\"ERROR\",\"WARN\",\"INFO\",\"DEBUG\",\"TRACE\"],\"overrideLevels\":[]}},\"id\":\"" + solrInputDocument.getFieldValue("id") + "\"}");
  Assert.assertEquals(solrInputDocument.getFieldValue("username"),"log_feeder_config");
  Assert.assertEquals(solrInputDocument.getFieldValue("filtername"),"log_feeder_config");
}
