def getComponentLayoutValidations(self, services, hosts):
    'Returns array of Validation objects about issues with hostnames components assigned to'
    items = []
    hostsList = [host['Hosts']['host_name'] for host in hosts['items']]
    hostsCount = len(hostsList)
    componentsListList = [service['components'] for service in services['services']]
    componentsList = [item for sublist in componentsListList for item in sublist]
    nameNodeHosts = [component['StackServiceComponents']['hostnames'] for component in componentsList if (component['StackServiceComponents']['component_name'] == 'NAMENODE')]
    secondaryNameNodeHosts = [component['StackServiceComponents']['hostnames'] for component in componentsList if (component['StackServiceComponents']['component_name'] == 'SECONDARY_NAMENODE')]
    if ((hostsCount > 1) and (len(nameNodeHosts) > 0) and (len(secondaryNameNodeHosts) > 0)):
        nameNodeHosts = nameNodeHosts[0]
        secondaryNameNodeHosts = secondaryNameNodeHosts[0]
        commonHosts = list(set(nameNodeHosts).intersection(secondaryNameNodeHosts))
        for host in commonHosts:
            items.append({'type': 'host-component', 'level': 'WARN', 'message': 'NameNode and Secondary NameNode should not be hosted on same machine', 'component-name': 'NAMENODE', 'host': str(host), })
            items.append({'type': 'host-component', 'level': 'WARN', 'message': 'NameNode and Secondary NameNode should not be hosted on same machine', 'component-name': 'SECONDARY_NAMENODE', 'host': str(host), })
    for component in componentsList:
        if (component['StackServiceComponents']['cardinality'] is not None):
            componentName = component['StackServiceComponents']['component_name']
            componentHostsCount = 0
            if (component['StackServiceComponents']['hostnames'] is not None):
                componentHostsCount = len(component['StackServiceComponents']['hostnames'])
            cardinality = str(component['StackServiceComponents']['cardinality'])
            if ('+' in cardinality):
                hostsMin = int(cardinality[:(-1)])
                hostsMax = sys.maxint
            elif ('-' in cardinality):
                nums = cardinality.split('-')
                hostsMin = int(nums[0])
                hostsMax = int(nums[1])
            elif ('ALL' == cardinality):
                hostsMin = hostsCount
                hostsMax = hostsCount
            else:
                hostsMin = int(cardinality)
                hostsMax = int(cardinality)
            if ((componentHostsCount > hostsMax) or (componentHostsCount < hostsMin)):
                items.append({'type': 'host-component', 'level': 'ERROR', 'message': 'Cardinality violation, cardinality={0}, hosts count={1}'.format(cardinality, str(componentHostsCount)), 'component-name': str(componentName), })
    usedHostsListList = [component['StackServiceComponents']['hostnames'] for component in componentsList if (not self.isComponentNotValuable(component))]
    usedHostsList = [item for sublist in usedHostsListList for item in sublist]
    nonUsedHostsList = [item for item in hostsList if (item not in usedHostsList)]
    for host in nonUsedHostsList:
        items.append({'type': 'host-component', 'level': 'ERROR', 'message': 'Host is not used', 'host': str(host), })
    return items
