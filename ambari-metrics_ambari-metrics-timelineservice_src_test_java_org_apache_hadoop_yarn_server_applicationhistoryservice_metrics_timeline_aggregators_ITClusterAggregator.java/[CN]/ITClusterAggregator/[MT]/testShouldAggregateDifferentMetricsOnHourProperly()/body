{
  TimelineMetricAggregator agg=TimelineMetricAggregatorFactory.createTimelineClusterAggregatorHourly(hdb,getConfigurationForTest(false));
  long startTime=System.currentTimeMillis();
  long ctime=startTime;
  long minute=60 * 1000;
  Map<TimelineClusterMetric,MetricClusterAggregate> records=new HashMap<TimelineClusterMetric,MetricClusterAggregate>();
  records.put(createEmptyTimelineClusterMetric("disk_used",ctime),new MetricClusterAggregate(4.0,2,0.0,4.0,0.0));
  records.put(createEmptyTimelineClusterMetric("disk_free",ctime),new MetricClusterAggregate(1.0,2,0.0,1.0,1.0));
  records.put(createEmptyTimelineClusterMetric("disk_used",ctime+=minute),new MetricClusterAggregate(4.0,2,0.0,4.0,0.0));
  records.put(createEmptyTimelineClusterMetric("disk_free",ctime),new MetricClusterAggregate(1.0,2,0.0,1.0,1.0));
  records.put(createEmptyTimelineClusterMetric("disk_used",ctime+=minute),new MetricClusterAggregate(4.0,2,0.0,4.0,0.0));
  records.put(createEmptyTimelineClusterMetric("disk_free",ctime),new MetricClusterAggregate(1.0,2,0.0,1.0,1.0));
  records.put(createEmptyTimelineClusterMetric("disk_used",ctime+=minute),new MetricClusterAggregate(4.0,2,0.0,4.0,0.0));
  records.put(createEmptyTimelineClusterMetric("disk_free",ctime),new MetricClusterAggregate(1.0,2,0.0,1.0,1.0));
  hdb.saveClusterAggregateRecords(records);
  agg.doWork(startTime,ctime + minute);
  ResultSet rs=executeQuery("SELECT * FROM METRIC_AGGREGATE_HOURLY");
  int count=0;
  while (rs.next()) {
    if ("disk_used".equals(rs.getString("METRIC_NAME"))) {
      assertEquals("APP_ID","test_app",rs.getString("APP_ID"));
      assertEquals("METRIC_SUM",16.0,rs.getDouble("METRIC_SUM"));
      assertEquals("METRIC_COUNT",8,rs.getLong("METRIC_COUNT"));
      assertEquals("METRIC_MAX",4.0,rs.getDouble("METRIC_MAX"));
      assertEquals("METRIC_MIN",0.0,rs.getDouble("METRIC_MIN"));
    }
 else     if ("disk_free".equals(rs.getString("METRIC_NAME"))) {
      assertEquals("APP_ID","test_app",rs.getString("APP_ID"));
      assertEquals("METRIC_SUM",4.0,rs.getDouble("METRIC_SUM"));
      assertEquals("METRIC_COUNT",8,rs.getLong("METRIC_COUNT"));
      assertEquals("METRIC_MAX",1.0,rs.getDouble("METRIC_MAX"));
      assertEquals("METRIC_MIN",1.0,rs.getDouble("METRIC_MIN"));
    }
    count++;
  }
  assertEquals("Two hourly aggregated row expected ",2,count);
}
