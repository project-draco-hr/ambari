{
  TimelineMetricAggregator agg=TimelineMetricAggregatorFactory.createTimelineClusterAggregatorSecond(hdb,getConfigurationForTest(false),new TimelineMetricMetadataManager(hdb,new Configuration()),null);
  TimelineMetricReadHelper readHelper=new TimelineMetricReadHelper(false);
  long startTime=System.currentTimeMillis();
  long ctime=startTime;
  long minute=60 * 1000 * 2;
  hdb.insertMetricRecords(prepareSingleTimelineMetric(ctime - 100,"local1","i1","disk_free",1));
  hdb.insertMetricRecords(prepareSingleTimelineMetric(ctime - 100,"local2","i1","disk_free",2));
  hdb.insertMetricRecords(prepareSingleTimelineMetric(ctime + 100,"local1","i2","disk_free",3));
  hdb.insertMetricRecords(prepareSingleTimelineMetric(ctime + 100,"local2","i2","disk_free",4));
  ctime+=minute;
  hdb.insertMetricRecords(prepareSingleTimelineMetric(ctime - 100,"local1","i1","disk_free",1));
  hdb.insertMetricRecords(prepareSingleTimelineMetric(ctime - 100,"local2","i1","disk_free",3));
  hdb.insertMetricRecords(prepareSingleTimelineMetric(ctime + 100,"local1","i2","disk_free",2));
  hdb.insertMetricRecords(prepareSingleTimelineMetric(ctime + 100,"local2","i2","disk_free",4));
  long endTime=ctime + minute;
  boolean success=agg.doWork(startTime - 1000,endTime + 1000);
  Condition condition=new DefaultCondition(null,null,null,null,startTime,endTime,null,null,true);
  condition.setStatement(String.format(GET_CLUSTER_AGGREGATE_SQL,PhoenixTransactSQL.getNaiveTimeRangeHint(startTime,NATIVE_TIME_RANGE_DELTA),METRICS_CLUSTER_AGGREGATE_TABLE_NAME));
  PreparedStatement pstmt=PhoenixTransactSQL.prepareGetMetricsSqlStmt(conn,condition);
  ResultSet rs=pstmt.executeQuery();
  int recordCount=0;
  while (rs.next()) {
    TimelineClusterMetric currentMetric=metricReader.fromResultSet(rs);
    MetricClusterAggregate currentHostAggregate=readHelper.getMetricClusterAggregateFromResultSet(rs);
    if ("disk_free".equals(currentMetric.getMetricName())) {
      System.out.println("OUTPUT: " + currentMetric + " - "+ currentHostAggregate);
      assertEquals(2,currentHostAggregate.getNumberOfHosts());
      assertEquals(5.0,Math.floor(currentHostAggregate.getSum()));
      recordCount++;
    }
 else {
      fail("Unexpected entry");
    }
  }
  Assert.assertEquals(5,recordCount);
}
