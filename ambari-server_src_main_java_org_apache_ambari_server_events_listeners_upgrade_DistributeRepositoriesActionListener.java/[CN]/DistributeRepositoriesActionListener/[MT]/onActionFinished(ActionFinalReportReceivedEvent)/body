{
  if (!event.getRole().equals(INSTALL_PACKAGES)) {
    return;
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(event.toString());
  }
  RepositoryVersionState newHostState=RepositoryVersionState.INSTALL_FAILED;
  Long clusterId=event.getClusterId();
  if (clusterId == null) {
    LOG.error("Distribute Repositories expected a cluster Id for host " + event.getHostname());
    return;
  }
  String repositoryVersion=null;
  if (event.getCommandReport() == null) {
    LOG.error("Command report is null, will set all INSTALLING versions for host {} to INSTALL_FAILED.",event.getHostname());
  }
 else   if (!event.getCommandReport().getStatus().equals(HostRoleStatus.COMPLETED.toString())) {
    LOG.warn("Distribute repositories did not complete, will set all INSTALLING versions for host {} to INSTALL_FAILED.",event.getHostname());
  }
 else {
    try {
      newHostState=RepositoryVersionState.INSTALLED;
      DistributeRepositoriesStructuredOutput structuredOutput=StageUtils.getGson().fromJson(event.getCommandReport().getStructuredOut(),DistributeRepositoriesStructuredOutput.class);
      repositoryVersion=structuredOutput.getInstalledRepositoryVersion();
      if (null != structuredOutput.getActualVersion() && !structuredOutput.getActualVersion().isEmpty() && null != structuredOutput.getInstalledRepositoryVersion() && !structuredOutput.getInstalledRepositoryVersion().isEmpty() && null != structuredOutput.getStackId() && !structuredOutput.getStackId().isEmpty() && !structuredOutput.getActualVersion().equals(structuredOutput.getInstalledRepositoryVersion())) {
        StackId stackId=new StackId(structuredOutput.getStackId());
        RepositoryVersionEntity version=repoVersionDAO.findByStackAndVersion(stackId,structuredOutput.getInstalledRepositoryVersion());
        if (null != version) {
          LOG.info("Repository version {} was found, but {} is the actual value",structuredOutput.getInstalledRepositoryVersion(),structuredOutput.getActualVersion());
          version.setVersion(structuredOutput.getActualVersion());
          repoVersionDAO.merge(version);
          repositoryVersion=structuredOutput.getActualVersion();
        }
 else {
          stackId=new StackId(structuredOutput.getStackId());
          version=repoVersionDAO.findByStackAndVersion(stackId,structuredOutput.getActualVersion());
          LOG.debug("Repository version {} was not found, check for {}.  Found={}",structuredOutput.getInstalledRepositoryVersion(),structuredOutput.getActualVersion(),Boolean.valueOf(null != version));
          if (null != version) {
            repositoryVersion=structuredOutput.getActualVersion();
          }
        }
      }
    }
 catch (    JsonSyntaxException e) {
      LOG.error("Cannot parse structured output %s",e);
    }
  }
  List<HostVersionEntity> hostVersions=hostVersionDAO.get().findByHost(event.getHostname());
  for (  HostVersionEntity hostVersion : hostVersions) {
    if (!event.isEmulated() && !(repositoryVersion == null || hostVersion.getRepositoryVersion().getVersion().equals(repositoryVersion))) {
      continue;
    }
    if (hostVersion.getState() == RepositoryVersionState.INSTALLING) {
      hostVersion.setState(newHostState);
      hostVersionDAO.get().merge(hostVersion);
      try {
        Cluster cluster=clusters.get().getClusterById(clusterId);
        cluster.recalculateClusterVersionState(hostVersion.getRepositoryVersion());
      }
 catch (      AmbariException e) {
        LOG.error("Cannot get cluster with Id " + clusterId.toString() + " to recalculate its ClusterVersion.",e);
      }
    }
  }
}
