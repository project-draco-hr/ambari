'\nLicensed to the Apache Software Foundation (ASF) under one\nor more contributor license agreements.  See the NOTICE file\ndistributed with this work for additional information\nregarding copyright ownership.  The ASF licenses this file\nto you under the Apache License, Version 2.0 (the\n"License"); you may not use this file except in compliance\nwith the License.  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n'
import os
import platform
from mock.mock import patch, MagicMock, call
from unittest import TestCase
from ambari_commons.exceptions import FatalException
os.environ['ROOT'] = ''
from only_for_platform import get_platform, not_for_platform, only_for_platform, os_distro_value, PLATFORM_LINUX, PLATFORM_WINDOWS
from ambari_commons import os_utils
import shutil
project_dir = os.path.join(os.path.abspath(os.path.dirname(__file__)), os.path.normpath('../../../../'))
shutil.copyfile((project_dir + '/ambari-server/conf/unix/ambari.properties'), '/tmp/ambari.properties')
_search_file = os_utils.search_file
os_utils.search_file = MagicMock(return_value='/tmp/ambari.properties')
with patch.object(platform, 'linux_distribution', return_value=MagicMock(return_value=('Redhat', '6.4', 'Final'))):
    with patch('os.path.isdir', return_value=MagicMock(return_value=True)):
        with patch('os.access', return_value=MagicMock(return_value=True)):
            with patch.object(os_utils, 'parse_log4j_file', return_value={'ambari.log.dir': '/var/log/ambari-server', }):
                with patch('platform.linux_distribution', return_value=os_distro_value):
                    with patch('os.symlink'):
                        with patch('glob.glob', return_value=['/etc/init.d/postgresql-9.3']):
                            _ambari_server_ = __import__('ambari-server')
                            os_utils.search_file = _search_file
                            with patch('__builtin__.open'):
                                from ambari_commons.exceptions import FatalException, NonFatalException
                                from ambari_server import serverConfiguration
                                serverConfiguration.search_file = _search_file
from ambari_server.setupMpacks import install_mpack, upgrade_mpack, replay_mpack_logs, purge_stacks_and_mpacks, validate_purge, read_mpack_metadata, STACK_DEFINITIONS_RESOURCE_NAME, SERVICE_DEFINITIONS_RESOURCE_NAME, MPACKS_RESOURCE_NAME
with patch.object(os, 'geteuid', new=MagicMock(return_value=0)):
    from resource_management.core import sudo
    reload(sudo)
configs = get_configs()
