@patch('os.path.exists')
@patch('ambari_server.setupMpacks.extract_archive')
@patch('ambari_server.setupMpacks.get_archive_root_dir')
@patch('ambari_server.setupMpacks.download_mpack')
def test_install_mpack_with_malformed_mpack(self, download_mpack_mock, get_archive_root_dir_mock, extract_archive_mock, os_path_exists_mock):
    options = self._create_empty_options_mock()
    options.mpack_path = '/path/to/mpack.tar.gz'
    download_mpack_mock.return_value = '/tmp/mpack.tar.gz'
    os_path_exists_mock.return_value = True
    get_archive_root_dir_mock.return_value = None
    fail = False
    try:
        install_mpack(options)
    except FatalException as e:
        self.assertEquals('Malformed management pack. Root directory missing!', e.reason)
        fail = True
    self.assertTrue(fail)
    get_archive_root_dir_mock.return_value = 'mpack'
    os_path_exists_mock.side_effect = [True, False, False]
    extract_archive_mock.return_value = None
    fail = False
    try:
        install_mpack(options)
    except FatalException as e:
        self.assertEquals('Malformed management pack. Failed to expand management pack!', e.reason)
        fail = True
    self.assertTrue(fail)
    get_archive_root_dir_mock.return_value = 'mpack'
    os_path_exists_mock.side_effect = [True, False, True, False]
    extract_archive_mock.return_value = None
    fail = False
    try:
        install_mpack(options)
    except FatalException as e:
        self.assertEquals('Malformed management pack {0}. Metadata file missing!'.format(options.mpack_path), e.reason)
        fail = True
    self.assertTrue(fail)
