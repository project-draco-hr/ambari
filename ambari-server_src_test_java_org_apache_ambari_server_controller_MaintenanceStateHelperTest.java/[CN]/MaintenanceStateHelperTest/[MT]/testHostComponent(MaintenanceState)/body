{
  AmbariManagementController amc=createMock(AmbariManagementController.class);
  Capture<ExecuteActionRequest> earCapture=new Capture<ExecuteActionRequest>();
  Capture<Map<String,String>> rpCapture=new Capture<Map<String,String>>();
  expect(amc.createAction(capture(earCapture),capture(rpCapture))).andReturn(null);
  Injector injector=createStrictMock(Injector.class);
  MaintenanceStateHelper maintenanceStateHelper=createMockBuilder(MaintenanceStateHelper.class).withConstructor(injector).createMock();
  Clusters clusters=createMock(Clusters.class);
  Cluster cluster=createMock(Cluster.class);
  expect(amc.getClusters()).andReturn(clusters).anyTimes();
  expect(clusters.getClusterById(1L)).andReturn(cluster);
  expect(cluster.getClusterName()).andReturn("c1").anyTimes();
  ServiceComponentHost sch=createMock(ServiceComponentHost.class);
  expect(sch.getClusterName()).andReturn("c1");
  expect(sch.getClusterId()).andReturn(1L);
  expect(sch.getMaintenanceState()).andReturn(state);
  expect(sch.getServiceName()).andReturn("HDFS");
  expect(sch.getServiceComponentName()).andReturn("NAMENODE").anyTimes();
  expect(sch.getHostName()).andReturn("h1");
  replay(amc,clusters,cluster,sch,maintenanceStateHelper);
  Map<String,String> map=new HashMap<String,String>();
  map.put("context","abc");
  maintenanceStateHelper.createRequests(amc,map,Collections.singleton(sch.getClusterName()));
  ExecuteActionRequest ear=earCapture.getValue();
  map=rpCapture.getValue();
  Assert.assertEquals("nagios_update_ignore",ear.getActionName());
  Assert.assertEquals(null,ear.getCommandName());
  Assert.assertEquals(1,ear.getResourceFilters().size());
  RequestResourceFilter resourceFilter=ear.getResourceFilters().get(0);
  Assert.assertEquals("NAGIOS",resourceFilter.getServiceName());
  Assert.assertEquals("NAGIOS_SERVER",resourceFilter.getComponentName());
  Assert.assertEquals("c1",ear.getClusterName());
  Assert.assertTrue(map.containsKey("context"));
  Assert.assertEquals(ear.getOperationLevel().getLevel(),Type.HostComponent);
}
