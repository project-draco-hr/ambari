{
  AmbariManagementController amc=createMock(AmbariManagementController.class);
  Capture<ExecuteActionRequest> earCapture=new Capture<ExecuteActionRequest>();
  Capture<Map<String,String>> rpCapture=new Capture<Map<String,String>>();
  expect(amc.createAction(capture(earCapture),capture(rpCapture))).andReturn(null);
  Injector injector=createStrictMock(Injector.class);
  MaintenanceStateHelper maintenanceStateHelper=createMockBuilder(MaintenanceStateHelper.class).withConstructor(injector).createMock();
  Clusters clusters=createMock(Clusters.class);
  Cluster cluster=createMock(Cluster.class);
  Service service=createMock(Service.class);
  ServiceComponent sc1=createMock(ServiceComponent.class);
  ServiceComponent sc2=createMock(ServiceComponent.class);
  expect(sc1.isClientComponent()).andReturn(Boolean.FALSE).anyTimes();
  expect(sc2.isClientComponent()).andReturn(Boolean.TRUE).anyTimes();
  ServiceComponentHost sch1=createMock(ServiceComponentHost.class);
  Map<String,ServiceComponentHost> schMap=new HashMap<String,ServiceComponentHost>();
  schMap.put("h1",sch1);
  expect(sch1.getHostName()).andReturn("h1");
  expect(sch1.getServiceName()).andReturn("HDFS");
  expect(sch1.getServiceComponentName()).andReturn("NAMENODE");
  expect(sc1.getServiceComponentHosts()).andReturn(schMap);
  Map<String,ServiceComponent> scMap=new HashMap<String,ServiceComponent>();
  scMap.put("NAMENODE",sc1);
  scMap.put("HDFS_CLIENT",sc2);
  expect(amc.getClusters()).andReturn(clusters).anyTimes();
  expect(clusters.getClusterById(1L)).andReturn(cluster);
  expect(cluster.getClusterName()).andReturn("c1");
  expect(cluster.getClusterId()).andReturn(1L);
  expect(service.getCluster()).andReturn(cluster);
  expect(service.getServiceComponents()).andReturn(scMap);
  expect(service.getMaintenanceState()).andReturn(state);
  expect(service.getName()).andReturn("HDFS");
  replay(amc,clusters,cluster,service,sc1,sc2,sch1,maintenanceStateHelper);
  Map<String,String> map=new HashMap<String,String>();
  map.put("context","abc");
  maintenanceStateHelper.createRequests(amc,map,Collections.singleton("c1"));
  ExecuteActionRequest ear=earCapture.getValue();
  map=rpCapture.getValue();
  Assert.assertEquals("nagios_update_ignore",ear.getActionName());
  Assert.assertEquals(null,ear.getCommandName());
  Assert.assertEquals(1,ear.getResourceFilters().size());
  RequestResourceFilter resourceFilter=ear.getResourceFilters().get(0);
  Assert.assertEquals("NAGIOS",resourceFilter.getServiceName());
  Assert.assertEquals("NAGIOS_SERVER",resourceFilter.getComponentName());
  Assert.assertEquals("c1",ear.getClusterName());
  Assert.assertTrue(map.containsKey("context"));
}
