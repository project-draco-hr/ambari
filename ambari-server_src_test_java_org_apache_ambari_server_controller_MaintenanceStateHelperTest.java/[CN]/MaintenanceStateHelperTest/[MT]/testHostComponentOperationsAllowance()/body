{
  Injector injector=createStrictMock(Injector.class);
  MaintenanceStateHelper maintenanceStateHelper=createMockBuilder(MaintenanceStateHelper.class).withConstructor(injector).createNiceMock();
  ServiceComponentHost sch=createMock(ServiceComponentHost.class);
  expect(sch.getMaintenanceState()).andReturn(MaintenanceState.ON);
  expect(sch.getMaintenanceState()).andReturn(MaintenanceState.IMPLIED_FROM_HOST);
  expect(sch.getMaintenanceState()).andReturn(MaintenanceState.IMPLIED_FROM_SERVICE);
  expect(sch.getMaintenanceState()).andReturn(MaintenanceState.IMPLIED_FROM_SERVICE_AND_HOST);
  expect(sch.getMaintenanceState()).andReturn(MaintenanceState.OFF);
  expect(sch.getMaintenanceState()).andReturn(MaintenanceState.ON);
  expect(sch.getMaintenanceState()).andReturn(MaintenanceState.IMPLIED_FROM_HOST);
  expect(sch.getMaintenanceState()).andReturn(MaintenanceState.IMPLIED_FROM_SERVICE);
  expect(sch.getMaintenanceState()).andReturn(MaintenanceState.IMPLIED_FROM_SERVICE_AND_HOST);
  expect(sch.getMaintenanceState()).andReturn(MaintenanceState.OFF);
  expect(sch.getMaintenanceState()).andReturn(MaintenanceState.ON);
  expect(sch.getMaintenanceState()).andReturn(MaintenanceState.IMPLIED_FROM_HOST);
  expect(sch.getMaintenanceState()).andReturn(MaintenanceState.IMPLIED_FROM_SERVICE);
  expect(sch.getMaintenanceState()).andReturn(MaintenanceState.IMPLIED_FROM_SERVICE_AND_HOST);
  expect(sch.getMaintenanceState()).andReturn(MaintenanceState.OFF);
  expect(sch.getMaintenanceState()).andReturn(MaintenanceState.ON);
  expect(sch.getMaintenanceState()).andReturn(MaintenanceState.IMPLIED_FROM_HOST);
  expect(sch.getMaintenanceState()).andReturn(MaintenanceState.IMPLIED_FROM_SERVICE);
  expect(sch.getMaintenanceState()).andReturn(MaintenanceState.IMPLIED_FROM_SERVICE_AND_HOST);
  expect(sch.getMaintenanceState()).andReturn(MaintenanceState.OFF);
  replay(maintenanceStateHelper,sch);
  Assert.assertEquals(false,maintenanceStateHelper.isOperationAllowed(Resource.Type.Cluster,sch));
  Assert.assertEquals(false,maintenanceStateHelper.isOperationAllowed(Resource.Type.Cluster,sch));
  Assert.assertEquals(false,maintenanceStateHelper.isOperationAllowed(Resource.Type.Cluster,sch));
  Assert.assertEquals(false,maintenanceStateHelper.isOperationAllowed(Resource.Type.Cluster,sch));
  Assert.assertEquals(true,maintenanceStateHelper.isOperationAllowed(Resource.Type.Cluster,sch));
  Assert.assertEquals(false,maintenanceStateHelper.isOperationAllowed(Resource.Type.Service,sch));
  Assert.assertEquals(false,maintenanceStateHelper.isOperationAllowed(Resource.Type.Service,sch));
  Assert.assertEquals(true,maintenanceStateHelper.isOperationAllowed(Resource.Type.Service,sch));
  Assert.assertEquals(false,maintenanceStateHelper.isOperationAllowed(Resource.Type.Service,sch));
  Assert.assertEquals(true,maintenanceStateHelper.isOperationAllowed(Resource.Type.Service,sch));
  Assert.assertEquals(false,maintenanceStateHelper.isOperationAllowed(Resource.Type.Host,sch));
  Assert.assertEquals(true,maintenanceStateHelper.isOperationAllowed(Resource.Type.Host,sch));
  Assert.assertEquals(false,maintenanceStateHelper.isOperationAllowed(Resource.Type.Host,sch));
  Assert.assertEquals(false,maintenanceStateHelper.isOperationAllowed(Resource.Type.Host,sch));
  Assert.assertEquals(true,maintenanceStateHelper.isOperationAllowed(Resource.Type.Host,sch));
  Assert.assertEquals(true,maintenanceStateHelper.isOperationAllowed(Resource.Type.HostComponent,sch));
  Assert.assertEquals(true,maintenanceStateHelper.isOperationAllowed(Resource.Type.HostComponent,sch));
  Assert.assertEquals(true,maintenanceStateHelper.isOperationAllowed(Resource.Type.HostComponent,sch));
  Assert.assertEquals(true,maintenanceStateHelper.isOperationAllowed(Resource.Type.HostComponent,sch));
  Assert.assertEquals(true,maintenanceStateHelper.isOperationAllowed(Resource.Type.HostComponent,sch));
  verify(maintenanceStateHelper,sch);
}
