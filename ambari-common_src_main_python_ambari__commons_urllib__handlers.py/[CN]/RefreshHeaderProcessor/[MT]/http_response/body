def http_response(self, request, response):
    '\n    Inspect the http response from urllib2 and see if thers is a refresh\n    response header. If there is, then attempt to follow it and re-execute\n    the query using the new host.\n    :param request:\n    :param response:\n    :return:\n    '
    response_code = response.code
    if (response_code != 200):
        return response
    try:
        response_headers = response.info()
        refresh_header = None
        for response_header_key in response_headers.keys():
            if (response_header_key.lower() == REFRESH_HEADER.lower()):
                refresh_header = response_headers.getheader(response_header_key)
                break
        if (refresh_header is None):
            return response
        semicolon_index = string.find(refresh_header, ';')
        if (semicolon_index >= 0):
            redirect_url_key_value_pair = refresh_header[(semicolon_index + 1):]
        else:
            redirect_url_key_value_pair = refresh_header
        equals_index = string.find(redirect_url_key_value_pair, '=')
        key = redirect_url_key_value_pair[:equals_index]
        redirect_url = redirect_url_key_value_pair[(equals_index + 1):]
        if (key.strip().lower() != REFRESH_HEADER_URL_KEY):
            logger.warning('Unable to parse refresh header {0}'.format(refresh_header))
            return response
        redirect_netloc = urlparse(redirect_url).netloc
        original_url_parts = urlparse(request.get_full_url())
        redirect_url = urlunparse(ParseResult(original_url_parts.scheme, redirect_netloc, original_url_parts.path, original_url_parts.params, original_url_parts.query, original_url_parts.fragment))
        return self.parent.open(redirect_url)
    except Exception as exception:
        logger.error('Unable to follow refresh header {0}. {1}'.format(refresh_header, str(exception)))
    return response
