{
  try {
    writeLock.lock();
    for (    Entry<String,Config> entry : configs.entrySet()) {
      boolean contains=false;
      for (      HostComponentDesiredConfigMappingEntity desiredConfigMappingEntity : desiredStateEntity.getHostComponentDesiredConfigMappingEntities()) {
        if (entry.getKey().equals(desiredConfigMappingEntity.getConfigType())) {
          contains=true;
          desiredConfigMappingEntity.setVersionTag(entry.getValue().getVersionTag());
          desiredConfigMappingEntity.setTimestamp(new Date().getTime());
          break;
        }
      }
      if (!contains) {
        HostComponentDesiredConfigMappingEntity newEntity=new HostComponentDesiredConfigMappingEntity();
        newEntity.setClusterId(desiredStateEntity.getClusterId());
        newEntity.setServiceName(desiredStateEntity.getServiceName());
        newEntity.setComponentName(desiredStateEntity.getComponentName());
        newEntity.setHostName(desiredStateEntity.getHostName());
        newEntity.setConfigType(entry.getKey());
        newEntity.setVersionTag(entry.getValue().getVersionTag());
        newEntity.setTimestamp(new Date().getTime());
        newEntity.setHostComponentDesiredStateEntity(desiredStateEntity);
        desiredStateEntity.getHostComponentDesiredConfigMappingEntities().add(newEntity);
      }
      this.desiredConfigs.put(entry.getKey(),entry.getValue().getVersionTag());
    }
    saveIfPersisted();
  }
  finally {
    writeLock.unlock();
  }
}
