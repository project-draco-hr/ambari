{
  try {
    writeLock.lock();
    if (!persisted) {
      serviceComponent.persist();
      HostEntity hostEntity=hostDAO.findByName(getHostName());
      hostEntity.getHostComponentStateEntities().add(stateEntity);
      hostEntity.getHostComponentDesiredStateEntities().add(desiredStateEntity);
      ServiceComponentDesiredStateEntityPK dpk=new ServiceComponentDesiredStateEntityPK();
      dpk.setClusterId(serviceComponent.getClusterId());
      dpk.setServiceName(serviceComponent.getServiceName());
      dpk.setComponentName(serviceComponent.getName());
      ServiceComponentDesiredStateEntity serviceComponentDesiredStateEntity=serviceComponentDesiredStateDAO.findByPK(dpk);
      serviceComponentDesiredStateEntity.getHostComponentDesiredStateEntities().add(desiredStateEntity);
      desiredStateEntity.setServiceComponentDesiredStateEntity(serviceComponentDesiredStateEntity);
      desiredStateEntity.setHostEntity(hostEntity);
      stateEntity.setServiceComponentDesiredStateEntity(serviceComponentDesiredStateEntity);
      stateEntity.setHostEntity(hostEntity);
      hostComponentStateDAO.create(stateEntity);
      hostComponentDesiredStateDAO.create(desiredStateEntity);
      serviceComponentDesiredStateDAO.merge(serviceComponentDesiredStateEntity);
      hostDAO.merge(hostEntity);
      stateEntity=hostComponentStateDAO.merge(stateEntity);
      desiredStateEntity=hostComponentDesiredStateDAO.merge(desiredStateEntity);
      host.refresh();
      serviceComponent.refresh();
      persisted=true;
    }
 else {
      saveIfPersisted();
    }
  }
  finally {
    writeLock.unlock();
  }
}
