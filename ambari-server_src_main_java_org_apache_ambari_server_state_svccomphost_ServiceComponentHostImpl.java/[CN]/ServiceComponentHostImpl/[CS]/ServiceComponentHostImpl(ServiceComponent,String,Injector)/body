{
  injector.injectMembers(this);
  if (serviceComponent.isClientComponent()) {
    stateMachine=clientStateMachineFactory.make(this);
  }
 else {
    stateMachine=daemonStateMachineFactory.make(this);
  }
  this.serviceComponent=serviceComponent;
  clusterGlobalLock=serviceComponent.getClusterGlobalLock();
  HostEntity hostEntity=null;
  try {
    host=clusters.getHost(hostName);
    hostEntity=hostDAO.findByName(hostName);
    if (hostEntity == null) {
      throw new AmbariException("Could not find host " + hostName);
    }
  }
 catch (  AmbariException e) {
    LOG.error("Host '{}' was not found" + hostName);
    throw new RuntimeException(e);
  }
  StackId stackId=serviceComponent.getDesiredStackVersion();
  StackEntity stackEntity=stackDAO.find(stackId.getStackName(),stackId.getStackVersion());
  stateEntity=new HostComponentStateEntity();
  stateEntity.setClusterId(serviceComponent.getClusterId());
  stateEntity.setComponentName(serviceComponent.getName());
  stateEntity.setServiceName(serviceComponent.getServiceName());
  stateEntity.setVersion(State.UNKNOWN.toString());
  stateEntity.setHostEntity(hostEntity);
  stateEntity.setCurrentState(stateMachine.getCurrentState());
  stateEntity.setUpgradeState(UpgradeState.NONE);
  stateEntity.setCurrentStack(stackEntity);
  desiredStateEntity=new HostComponentDesiredStateEntity();
  desiredStateEntity.setClusterId(serviceComponent.getClusterId());
  desiredStateEntity.setComponentName(serviceComponent.getName());
  desiredStateEntity.setServiceName(serviceComponent.getServiceName());
  desiredStateEntity.setHostEntity(hostEntity);
  desiredStateEntity.setDesiredState(State.INIT);
  desiredStateEntity.setDesiredStack(stackEntity);
  if (!serviceComponent.isMasterComponent() && !serviceComponent.isClientComponent()) {
    desiredStateEntity.setAdminState(HostComponentAdminState.INSERVICE);
  }
 else {
    desiredStateEntity.setAdminState(null);
  }
  desiredStateEntityPK=getHostComponentDesiredStateEntityPK(desiredStateEntity);
  resetLastOpInfo();
}
