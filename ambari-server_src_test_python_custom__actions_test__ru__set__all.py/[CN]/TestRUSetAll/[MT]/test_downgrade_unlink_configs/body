@patch('os.path.islink')
@patch('os.path.isdir')
@patch('resource_management.core.shell.call')
@patch.object(Script, 'get_config')
@patch.object(OSCheck, 'is_redhat_family')
def test_downgrade_unlink_configs(self, family_mock, get_config_mock, call_mock, isdir_mock, islink_mock):
    '\n    Tests downgrading from 2.3 to 2.2 to ensure that conf symlinks are removed and the backup\n    directories restored.\n    '
    isdir_mock.return_value = True
    from resource_management.core.environment import Environment
    env = Environment(test_mode=True)
    with env:
        json_file_path = os.path.join(self.get_custom_actions_dir(), 'ru_execute_tasks_namenode_prepare.json')
        self.assertTrue(os.path.isfile(json_file_path))
        with open(json_file_path, 'r') as json_file:
            json_payload = json.load(json_file)
        json_payload['commandParams']['version'] = '2.2.0.0-1234'
        json_payload['commandParams']['downgrade_from_version'] = '2.3.0.0-1234'
        json_payload['commandParams']['original_stack'] = 'HDP-2.2'
        json_payload['commandParams']['target_stack'] = 'HDP-2.3'
        json_payload['commandParams']['upgrade_direction'] = 'downgrade'
        json_payload['hostLevelParams']['stack_version'] = '2.2'
        config_dict = ConfigDictionary(json_payload)
        family_mock.return_value = True
        get_config_mock.return_value = config_dict
        call_mock.side_effect = fake_call
        ru_execute = UpgradeSetAll()
        ru_execute.unlink_all_configs(None)
        self.assertTrue(islink_mock.called)
        for (key, value) in conf_select.get_package_dirs().iteritems():
            for directory_mapping in value:
                original_config_directory = directory_mapping['conf_dir']
                is_link_called = False
                for call in islink_mock.call_args_list:
                    call_tuple = call[0]
                    if (original_config_directory in call_tuple):
                        is_link_called = True
                if (not is_link_called):
                    self.fail('os.path.islink({0}) was never called'.format(original_config_directory))
        with open(json_file_path, 'r') as json_file:
            json_payload = json.load(json_file)
        json_payload['commandParams']['version'] = '2.3.0.0-1234'
        json_payload['commandParams']['downgrade_from_version'] = '2.3.0.0-5678'
        json_payload['commandParams']['original_stack'] = 'HDP-2.3'
        json_payload['commandParams']['target_stack'] = 'HDP-2.3'
        json_payload['commandParams']['upgrade_direction'] = 'downgrade'
        json_payload['hostLevelParams']['stack_version'] = '2.3'
        config_dict = ConfigDictionary(json_payload)
        family_mock.return_value = True
        get_config_mock.return_value = config_dict
        islink_mock.reset_mock()
        ru_execute = UpgradeSetAll()
        ru_execute.unlink_all_configs(None)
        self.assertFalse(islink_mock.called)
        with open(json_file_path, 'r') as json_file:
            json_payload = json.load(json_file)
        json_payload['commandParams']['version'] = '2.2.0.0-1234'
        json_payload['commandParams']['downgrade_from_version'] = '2.2.0.0-5678'
        json_payload['commandParams']['original_stack'] = 'HDP-2.2'
        json_payload['commandParams']['target_stack'] = 'HDP-2.2'
        json_payload['commandParams']['upgrade_direction'] = 'downgrade'
        json_payload['hostLevelParams']['stack_version'] = '2.2'
        config_dict = ConfigDictionary(json_payload)
        family_mock.return_value = True
        get_config_mock.return_value = config_dict
        islink_mock.reset_mock()
        ru_execute = UpgradeSetAll()
        ru_execute.unlink_all_configs(None)
        self.assertFalse(islink_mock.called)
