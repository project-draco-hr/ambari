@staticmethod
def create_model(member_cls, dic, resource_root, RESOURCE_KEY_WORD):
    rw_dict = {}
    LOG.debug(('    create_model : dic =   ' + str(dic)))
    if (isinstance(dic, dict) and dic.has_key(RESOURCE_KEY_WORD)):
        dic = dic[RESOURCE_KEY_WORD]
        LOG.debug(('    dic.items() 2   =   ' + str(dic.items())))
    for (k, v) in dic.items():
        LOG.debug(k)
        LOG.debug(v)
        if (k in member_cls.RW_ATTR):
            LOG.debug((k + ' is there in RW_ATTR'))
            rw_dict[k] = v
            del dic[k]
    rw_dict = get_unicode_kw(rw_dict)
    obj = member_cls(resource_root, **rw_dict)
    for attr in member_cls.RO_ATTR:
        obj._setattr(attr, None)
    for (k, v) in dic.items():
        if (k in member_cls.RO_ATTR):
            obj._setattr(k, v)
        else:
            LOG.debug(("Unexpected attribute '%s' in %s json" % (k, member_cls.__name__)))
    for attr in member_cls.REF_ATTR:
        LOG.debug(attr)
        obj._setattr(getREF_class_name(attr), None)
    for (k, v) in dic.items():
        if (k in member_cls.REF_ATTR):
            obj._setattr(getREF_class_name(k), v)
        else:
            LOG.debug(("Unexpected attribute '%s' in %s json" % (k, member_cls.__name__)))
    return obj
