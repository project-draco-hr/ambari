@staticmethod
def get_model_list(member_list_clss, member_cls, collection_dict, resource_root, RESOURCE_KEY_WORD):
    '\n    create a model.\n    @param member_list_clss : model_list class.\n    @param model_cls : model class.\n    @param collection_dict : collection dict used for creating the list of objects.\n    @param resource_root : resource object.\n    @param RESOURCE_KEY_WORD : tsake subset of model_dict based on this key.\n    @return: A  ModelList object.\n    '
    json_list = []
    if (isinstance(collection_dict, dict) and collection_dict.has_key(LIST_KEY)):
        json_list = collection_dict[LIST_KEY]
        LOG.debug(('get_model_list: collection_dict is dict ? %s ; has_key = %s' % (isinstance(collection_dict, dict), collection_dict.has_key(LIST_KEY))))
        LOG.debug(('get_model_list: collection_dict has %s ;subset = %s' % (LIST_KEY, str(json_list))))
    else:
        json_list = collection_dict
        LOG.error(('get_model_list: collection_dict is dict ? %s ; has_key = %s' % (isinstance(collection_dict, dict), collection_dict.has_key(LIST_KEY))))
    LOG.debug(('get_model_list: json_list  value : \n\t' + str(json_list)))
    if isinstance(json_list, list):
        json_list_new = [x.get(RESOURCE_KEY_WORD) for x in json_list]
        LOG.debug(('get_model_list: json_list is list ? %s ; ' % isinstance(json_list, list)))
    else:
        json_list_new = [json_list]
        LOG.error(('get_model_list: json_list is list ? %s ; ' % isinstance(json_list, list)))
    LOG.debug(('get_model_list: json_list_new used for creating ModelList  \n\t' + str(json_list_new)))
    objects = [ModelUtils.create_model(member_cls, x, resource_root, RESOURCE_KEY_WORD) for x in json_list_new]
    LOG.debug(objects)
    return member_list_clss(objects)
