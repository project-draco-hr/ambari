{
  HostRoleCommandDAO hostRoleCommandDAO=injector.getInstance(HostRoleCommandDAO.class);
  HostDAO hostDAO=injector.getInstance(HostDAO.class);
  HostRoleCommandFactory hostRoleCommandFactory=injector.getInstance(HostRoleCommandFactory.class);
  requestId=stageEntity.getRequestId();
  stageId=stageEntity.getStageId();
  logDir=stageEntity.getLogInfo();
  clusterName=stageEntity.getCluster().getClusterName();
  requestContext=stageEntity.getRequestContext();
  Map<String,List<HostRoleCommandEntity>> hostCommands=hostRoleCommandDAO.findSortedCommandsByStage(stageEntity);
  for (  Map.Entry<String,List<HostRoleCommandEntity>> entry : hostCommands.entrySet()) {
    String hostname=entry.getKey();
    commandsToSend.put(hostname,new ArrayList<ExecutionCommandWrapper>());
    hostRoleCommands.put(hostname,new TreeMap<String,HostRoleCommand>());
    for (    HostRoleCommandEntity hostRoleCommandEntity : entry.getValue()) {
      HostRoleCommand hostRoleCommand=hostRoleCommandFactory.createExisting(hostRoleCommandEntity);
      hostRoleCommands.get(hostname).put(hostRoleCommand.getRole().toString(),hostRoleCommand);
      commandsToSend.get(hostname).add(hostRoleCommand.getExecutionCommandWrapper());
    }
  }
  for (  RoleSuccessCriteriaEntity successCriteriaEntity : stageEntity.getRoleSuccessCriterias()) {
    successFactors.put(successCriteriaEntity.getRole(),successCriteriaEntity.getSuccessFactor().floatValue());
  }
}
