{
  StackId stackId=new StackId("HDP-0.1");
  Clusters clusters=injector.getInstance(Clusters.class);
  clusters.addHost(hostname1);
  setOsFamily(clusters.getHost(hostname1),"redhat","5.9");
  clusters.addCluster(clusterName,stackId);
  Cluster cluster=clusters.getCluster(clusterName);
  helper.getOrCreateRepositoryVersion(stackId,stackId.getStackVersion());
  cluster.createClusterVersion(stackId,stackId.getStackVersion(),"admin",RepositoryVersionState.INSTALLING);
  Set<String> hostNames=new HashSet<String>(){
{
      add(hostname1);
    }
  }
;
  clusters.mapHostsToCluster(hostNames,clusterName);
  Service hdfs=cluster.addService(serviceName);
  hdfs.addServiceComponent(Role.DATANODE.name());
  hdfs.getServiceComponent(Role.DATANODE.name()).addServiceComponentHost(hostname1);
  hdfs.addServiceComponent(Role.NAMENODE.name());
  hdfs.getServiceComponent(Role.NAMENODE.name()).addServiceComponentHost(hostname1);
  hdfs.addServiceComponent(Role.SECONDARY_NAMENODE.name());
  hdfs.getServiceComponent(Role.SECONDARY_NAMENODE.name()).addServiceComponentHost(hostname1);
  hdfs.getServiceComponent(Role.DATANODE.name()).getServiceComponentHost(hostname1).setState(State.INSTALLED);
  hdfs.getServiceComponent(Role.NAMENODE.name()).getServiceComponentHost(hostname1).setState(State.INSTALLED);
  hdfs.getServiceComponent(Role.SECONDARY_NAMENODE.name()).getServiceComponentHost(hostname1).setState(State.INSTALLED);
  ActionQueue aqMock=mock(ActionQueue.class);
  ArgumentCaptor<AgentCommand> commandCaptor=ArgumentCaptor.forClass(AgentCommand.class);
  ActionManager am=mock(ActionManager.class);
  HeartbeatMonitor hm=new HeartbeatMonitor(clusters,aqMock,am,heartbeatMonitorWakeupIntervalMS,injector);
  HeartBeatHandler handler=new HeartBeatHandler(clusters,aqMock,am,injector);
  Register reg=new Register();
  reg.setHostname(hostname1);
  reg.setResponseId(12);
  reg.setTimestamp(System.currentTimeMillis() - 15);
  reg.setAgentVersion(ambariMetaInfo.getServerVersion());
  HostInfo hi=new HostInfo();
  hi.setOS("Centos5");
  reg.setHardwareProfile(hi);
  handler.handleRegistration(reg);
  HeartBeat hb=new HeartBeat();
  hb.setHostname(hostname1);
  hb.setNodeStatus(new HostStatus(HostStatus.Status.HEALTHY,"cool"));
  hb.setTimestamp(System.currentTimeMillis());
  hb.setResponseId(13);
  handler.handleHeartBeat(hb);
  LOG.info("YYY");
  clusters.getHost(hostname1).setLastHeartbeatTime(System.currentTimeMillis() - 15);
  hm.start();
  Thread.sleep(3 * heartbeatMonitorWakeupIntervalMS);
  hm.shutdown();
  int tryNumber=0;
  while (hm.isAlive()) {
    hm.join(2 * heartbeatMonitorWakeupIntervalMS);
    tryNumber++;
    if (tryNumber >= 5) {
      fail("HeartbeatMonitor should be already stopped");
    }
  }
  verify(aqMock,atLeast(2)).enqueue(eq(hostname1),commandCaptor.capture());
  List<AgentCommand> cmds=commandCaptor.getAllValues();
  assertTrue("HeartbeatMonitor should generate StatusCommands for host1",cmds.size() >= 2);
  for (  AgentCommand command : cmds) {
    assertEquals("HDFS",((StatusCommand)command).getServiceName());
  }
}
