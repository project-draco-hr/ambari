def initiate_safe_zkfc_failover():
    '\n  If this is the active namenode, initiate a safe failover and wait for it to become the standby.\n\n  If an error occurs, force a failover to happen by killing zkfc on this host. In this case, during the Restart,\n  will also have to start ZKFC manually.\n  '
    import params
    if params.security_enabled:
        Execute(format('{kinit_path_local} -kt {hdfs_user_keytab} {hdfs_principal_name}'), user=params.hdfs_user)
    check_service_cmd = format('hdfs haadmin -getServiceState {namenode_id}')
    (code, out) = shell.call(check_service_cmd, logoutput=True, user=params.hdfs_user)
    original_state = 'unknown'
    if ((code == 0) and out):
        original_state = ('active' if ('active' in out) else ('standby' if ('standby' in out) else original_state))
        Logger.info(('Namenode service state: %s' % original_state))
        if (original_state == 'active'):
            msg = 'Rolling Upgrade - Initiating a ZKFC failover on {0} NameNode host {1}.'.format(original_state, params.hostname)
            Logger.info(msg)
            check_standby_cmd = format('hdfs haadmin -getServiceState {namenode_id} | grep standby')
            failover_command = format('hdfs haadmin -failover {namenode_id} {other_namenode_id}')
            (code, out) = shell.call(failover_command, user=params.hdfs_user, logoutput=True)
            Logger.info(format('Rolling Upgrade - failover command returned {code}'))
            wait_for_standby = False
            if (code == 0):
                wait_for_standby = True
            else:
                was_zkfc_killed = kill_zkfc(params.hdfs_user)
                (code, out) = shell.call(check_standby_cmd, user=params.hdfs_user, logoutput=True)
                Logger.info(format('Rolling Upgrade - check for standby returned {code}'))
                if ((code == 255) and out):
                    Logger.info('Rolling Upgrade - namenode is already down.')
                elif was_zkfc_killed:
                    wait_for_standby = True
            if wait_for_standby:
                Logger.info('Waiting for this NameNode to become the standby one.')
                Execute(check_standby_cmd, user=params.hdfs_user, tries=50, try_sleep=6, logoutput=True)
    else:
        raise Fail('Unable to determine NameNode HA states by calling command: {0}'.format(check_service_cmd))
