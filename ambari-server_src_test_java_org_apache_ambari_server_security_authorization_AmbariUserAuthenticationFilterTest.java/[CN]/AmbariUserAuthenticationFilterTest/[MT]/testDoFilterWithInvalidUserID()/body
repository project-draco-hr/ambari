{
  final Users users=createMock(Users.class);
  HttpServletRequest request=createMock(HttpServletRequest.class);
  HttpServletResponse response=createMock(HttpServletResponse.class);
  FilterChain chain=createMock(FilterChain.class);
  InternalTokenStorage tokenStorage=createMock(InternalTokenStorage.class);
  expect(request.getHeader(InternalTokenClientFilter.INTERNAL_TOKEN_HEADER)).andReturn(TEST_INTERNAL_TOKEN);
  expect(tokenStorage.isValidInternalToken(TEST_INTERNAL_TOKEN)).andReturn(true);
  expect(request.getHeader(ExecutionScheduleManager.USER_ID_HEADER)).andReturn("admin");
  response.sendError(HttpServletResponse.SC_FORBIDDEN,"Invalid user ID");
  expectLastCall();
  response.flushBuffer();
  expectLastCall();
  replay(users,request,response,chain,tokenStorage);
  AmbariUserAuthorizationFilter filter=new AmbariUserAuthorizationFilter(tokenStorage,users);
  filter.doFilter(request,response,chain);
  verify(users,request,response,chain,tokenStorage);
  Authentication authentication=SecurityContextHolder.getContext().getAuthentication();
  assertNull(authentication);
}
