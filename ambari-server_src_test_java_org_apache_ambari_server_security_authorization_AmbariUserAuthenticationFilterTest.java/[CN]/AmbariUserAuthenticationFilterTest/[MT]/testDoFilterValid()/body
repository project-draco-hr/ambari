{
  final Users users=createMock(Users.class);
  HttpServletRequest request=createMock(HttpServletRequest.class);
  HttpServletResponse response=createMock(HttpServletResponse.class);
  FilterChain chain=createMock(FilterChain.class);
  InternalTokenStorage tokenStorage=createMock(InternalTokenStorage.class);
  expect(request.getHeader(InternalTokenClientFilter.INTERNAL_TOKEN_HEADER)).andReturn(TEST_INTERNAL_TOKEN);
  expect(tokenStorage.isValidInternalToken(TEST_INTERNAL_TOKEN)).andReturn(true);
  expect(request.getHeader(ExecutionScheduleManager.USER_ID_HEADER)).andReturn(TEST_USER_ID_HEADER);
  User user=combineUser();
  expect(users.getUser(TEST_USER_ID)).andReturn(user);
  expect(users.getUserAuthorities(user.getUserName(),user.getUserType())).andReturn(new HashSet<AmbariGrantedAuthority>());
  Capture<String> userHeaderValue=newCapture();
  response.setHeader(eq("User"),capture(userHeaderValue));
  expectLastCall();
  chain.doFilter(request,response);
  expectLastCall();
  replay(users,request,response,chain,tokenStorage);
  AmbariUserAuthorizationFilter filter=new AmbariUserAuthorizationFilter(tokenStorage,users);
  filter.doFilter(request,response,chain);
  verify(users,request,response,chain,tokenStorage);
  Authentication authentication=SecurityContextHolder.getContext().getAuthentication();
  assertNotNull(authentication);
  assertEquals(true,authentication.isAuthenticated());
  assertEquals(TEST_USER_NAME,userHeaderValue.getValue());
}
