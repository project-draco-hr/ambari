{
  String portConfigType=null;
  String portPropertyName=null;
  if (metricsProperties.containsKey(PORT_CONFIG_TYPE_PROPERTY) && metricsProperties.containsKey(PORT_PROPERTY_NAME_PROPERTY)) {
    portConfigType=metricsProperties.get(PORT_CONFIG_TYPE_PROPERTY);
    portPropertyName=metricsProperties.get(PORT_PROPERTY_NAME_PROPERTY);
  }
  String portStr=null;
  if (portConfigType != null && portPropertyName != null) {
    try {
      Map<String,Map<String,String>> configTags=amc.findConfigurationTagsWithOverrides(cluster,hostname);
      if (configTags.containsKey(portConfigType)) {
        Map<String,Map<String,String>> properties=amc.getConfigHelper().getEffectiveConfigProperties(cluster,Collections.singletonMap(portConfigType,configTags.get(portConfigType)));
        Map<String,String> config=properties.get(portConfigType);
        if (config != null && config.containsKey(portPropertyName)) {
          portStr=config.get(portPropertyName);
        }
      }
    }
 catch (    AmbariException e) {
      String message=String.format("Can not extract configs for " + "component = %s, hostname = %s, config type = %s, property name = %s",componentName,hostname,portConfigType,portPropertyName);
      LOG.warn(message,e);
    }
    if (portStr == null) {
      String message=String.format("Can not extract REST port for " + "component %s from configurations. " + "Config tag = %s, config key name = %s, "+ "hostname = %s. Probably metrics.json file for "+ "service is misspelled. Trying default port",componentName,portConfigType,portPropertyName,hostname);
      LOG.debug(message);
    }
  }
  if (portStr == null && metricsProperties.containsKey(DEFAULT_PORT_PROPERTY)) {
    if (metricsProperties.containsKey(DEFAULT_PORT_PROPERTY)) {
      portStr=metricsProperties.get(DEFAULT_PORT_PROPERTY);
    }
 else {
      String message=String.format("Can not determine REST port for " + "component %s. " + "Default REST port property %s is not defined at metrics.json "+ "file for service, and there is no any other available ways "+ "to determine port information.",componentName,DEFAULT_PORT_PROPERTY);
      throw new AmbariException(message);
    }
  }
  return portStr;
}
