@patch('resource_management.core.providers.system._ensure_metadata')
@patch('__builtin__.open')
@patch.object(os.path, 'exists')
@patch.object(os.path, 'isdir')
def test_action_create_non_existent_file(self, isdir_mock, exists_mock, open_mock, ensure_mock):
    "\n    Tests if 'create' action create new non existent file and write proper data\n    "
    isdir_mock.side_effect = [False, True]
    exists_mock.return_value = False
    new_file = MagicMock()
    open_mock.return_value = new_file
    with Environment('/') as env:
        File('/directory/file', action='create', mode=511, content='file-content')
    env.run()
    open_mock.assert_called_with('/directory/file', 'wb')
    new_file.__enter__().write.assert_called_with('file-content')
    self.assertEqual(open_mock.call_count, 1)
    ensure_mock.assert_called()
