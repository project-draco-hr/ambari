@patch('resource_management.core.providers.system._coerce_uid')
@patch('resource_management.core.providers.system._coerce_gid')
@patch.object(os, 'chown')
@patch.object(os, 'chmod')
@patch.object(os, 'stat')
@patch('__builtin__.open')
@patch.object(os.path, 'exists')
@patch.object(os.path, 'isdir')
def test_ensure_metadata(self, isdir_mock, exists_mock, open_mock, stat_mock, chmod_mock, chown_mock, gid_mock, uid_mock):
    '\n    Tests if _ensure_metadata changes owner, usergroup and permissions of file to proper values\n    '
    isdir_mock.side_effect = [False, True, False, True]
    exists_mock.return_value = False


    class stat:

        def __init__(self):
            self.st_mode = 438
            self.st_uid = 1
            self.st_gid = 1
    stat_mock.return_value = stat()
    gid_mock.return_value = 0
    uid_mock.return_value = 0
    with Environment('/') as env:
        File('/directory/file', action='create', mode=511, content='file-content', owner='root', group='hdfs')
    open_mock.assert_called_with('/directory/file', 'wb')
    self.assertEqual(open_mock.call_count, 1)
    stat_mock.assert_called_with('/directory/file')
    self.assertEqual(chmod_mock.call_count, 1)
    self.assertEqual(chown_mock.call_count, 2)
    gid_mock.assert_called_once_with('hdfs')
    uid_mock.assert_called_once_with('root')
    chmod_mock.reset_mock()
    chown_mock.reset_mock()
    gid_mock.return_value = 1
    uid_mock.return_value = 1
    with Environment('/') as env:
        File('/directory/file', action='create', mode=511, content='file-content', owner='root', group='hdfs')
    self.assertEqual(chmod_mock.call_count, 1)
    self.assertEqual(chown_mock.call_count, 0)
