@patch('pwd.getpwnam')
@patch('grp.getgrnam')
@patch('resource_management.core.sudo.chown')
@patch('resource_management.core.sudo.chmod')
@patch('resource_management.core.sudo.stat')
@patch('resource_management.core.sudo.create_file')
@patch('resource_management.core.sudo.path_exists')
@patch('resource_management.core.sudo.path_isdir')
def test_ensure_metadata(self, isdir_mock, exists_mock, create_file_mock, stat_mock, chmod_mock, chown_mock, getgrnam_mock, getpwnam_mock):
    '\n    Tests if _ensure_metadata changes owner, usergroup and permissions of file to proper values\n    '
    isdir_mock.side_effect = [False, True, False, True]
    exists_mock.return_value = False


    class stat:

        def __init__(self):
            self.st_mode = 438
            self.st_uid = 1
            self.st_gid = 1
    stat_mock.return_value = stat()
    getpwnam_mock.return_value = MagicMock()
    getpwnam_mock.return_value.pw_uid = 0
    getgrnam_mock.return_value = MagicMock()
    getgrnam_mock.return_value.gr_gid = 0
    with Environment('/') as env:
        File('/directory/file', action='create', mode=511, content='file-content', owner='root', group='hdfs')
    create_file_mock.assert_called_with('/directory/file', 'file-content', encoding=None)
    self.assertEqual(create_file_mock.call_count, 1)
    stat_mock.assert_called_with('/directory/file')
    self.assertEqual(chmod_mock.call_count, 1)
    self.assertEqual(chown_mock.call_count, 1)
    getgrnam_mock.assert_called_once_with('hdfs')
    getpwnam_mock.assert_called_with('root')
    chmod_mock.reset_mock()
    chown_mock.reset_mock()
    getpwnam_mock.return_value = MagicMock()
    getpwnam_mock.return_value.pw_uid = 1
    getgrnam_mock.return_value = MagicMock()
    getgrnam_mock.return_value.gr_gid = 1
    with Environment('/') as env:
        File('/directory/file', action='create', mode=511, content='file-content', owner='root', group='hdfs')
    self.assertEqual(chmod_mock.call_count, 1)
    chown_mock.assert_called_with('/directory/file', None, None)
