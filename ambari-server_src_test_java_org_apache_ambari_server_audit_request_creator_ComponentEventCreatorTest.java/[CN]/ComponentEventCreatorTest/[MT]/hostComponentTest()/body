{
  ComponentEventCreator creator=new ComponentEventCreator();
  Map<String,Object> properties=new HashMap<>();
  properties.put(HostComponentResourceProvider.HOST_COMPONENT_HOST_NAME_PROPERTY_ID,"ambari1.example.com");
  properties.put(HostComponentResourceProvider.HOST_COMPONENT_CLUSTER_NAME_PROPERTY_ID,"mycluster");
  properties.put(HostComponentResourceProvider.HOST_COMPONENT_STATE_PROPERTY_ID,"STARTED");
  properties.put(HostComponentResourceProvider.HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID,"MYCOMPONENT");
  Request request=AuditEventCreatorTestHelper.createRequest(Request.Type.PUT,Resource.Type.HostComponent,properties,null);
  request.getBody().addRequestInfoProperty(RequestOperationLevel.OPERATION_LEVEL_ID,"HOST_COMPONENT");
  request.getBody().addRequestInfoProperty(RequestOperationLevel.OPERATION_SERVICE_ID,"MYSERVICE");
  request.getBody().addRequestInfoProperty(RequestOperationLevel.OPERATION_HOST_NAME,"ambari1.example.com");
  request.getBody().addRequestInfoProperty(RequestOperationLevel.OPERATION_CLUSTER_ID,"mycluster");
  TreeNode<Resource> resultTree=new TreeNodeImpl<>(null,null,null);
  addRequestId(resultTree,1L);
  Result result=AuditEventCreatorTestHelper.createResult(new ResultStatus(ResultStatus.STATUS.OK),resultTree);
  AuditEvent event=AuditEventCreatorTestHelper.getEvent(creator,request,result);
  String actual=event.getAuditMessage();
  String expected="User(" + userName + "), RemoteIp(1.2.3.4), Operation(STARTED: MYCOMPONENT/MYSERVICE on ambari1.example.com (mycluster)), Host name(ambari1.example.com), RequestId(1), Status(Successfully queued)";
  Assert.assertTrue("Class mismatch",event instanceof StartOperationRequestAuditEvent);
  Assert.assertEquals(expected,actual);
  Assert.assertTrue(actual.contains(userName));
}
