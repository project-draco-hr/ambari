def test_validateHAWQSiteConfigurations(self):
    services = self.load_json('services-hawq-3-hosts.json')
    configurations = services['configurations']
    configurations['hawq-site'] = {'properties': {'hawq_rm_yarn_address': 'localhost:8032', 'hawq_rm_yarn_scheduler_address': 'localhost:8030', }, }
    configurations['yarn-site'] = {'properties': {'yarn.resourcemanager.address': 'host1:8050', 'yarn.resourcemanager.scheduler.address': 'host1:8030', }, }
    services['services'].append({'StackServices': {'service_name': 'YARN', }, 'components': [], })
    properties = configurations['hawq-site']['properties']
    defaults = {}
    hosts = {}
    expected_warnings = {'hawq_rm_yarn_address': {'config-type': 'hawq-site', 'message': 'Expected value: host1:8050 (this property should have the same value as the property yarn.resourcemanager.address in yarn-site)', 'type': 'configuration', 'config-name': 'hawq_rm_yarn_address', 'level': 'WARN', }, 'hawq_rm_yarn_scheduler_address': {'config-type': 'hawq-site', 'message': 'Expected value: host1:8030 (this property should have the same value as the property yarn.resourcemanager.scheduler.address in yarn-site)', 'type': 'configuration', 'config-name': 'hawq_rm_yarn_scheduler_address', 'level': 'WARN', }, }
    problems = self.serviceAdvisor.validateHAWQSiteConfigurations(properties, defaults, configurations, services, hosts)
    problems_dict = {}
    for problem in problems:
        problems_dict[problem['config-name']] = problem
    self.assertEqual(len(problems), 2)
    self.assertEqual(problems_dict, expected_warnings)
    configurations['hawq-site'] = {'properties': {'hawq_master_directory': '/data/hawq/master', 'hawq_segment_directory': '/data/hawq/segment', }, }
    properties = configurations['hawq-site']['properties']
    problems = self.serviceAdvisor.validateHAWQSiteConfigurations(properties, defaults, configurations, services, hosts)
    problems_dict = {}
    self.assertEqual(len(problems), 0)
    expected_warnings = {}
    self.assertEqual(problems_dict, expected_warnings)
    configurations['hawq-site'] = {'properties': {'hawq_master_directory': '/data/hawq/master1,/data/hawq/master2', 'hawq_segment_directory': '/data/hawq/segment1 /data/hawq/segment2', }, }
    properties = configurations['hawq-site']['properties']
    problems = self.serviceAdvisor.validateHAWQSiteConfigurations(properties, defaults, configurations, services, hosts)
    problems_dict = {}
    for problem in problems:
        problems_dict[problem['config-name']] = problem
    self.assertEqual(len(problems), 2)
    expected_warnings = {'hawq_master_directory': {'config-type': 'hawq-site', 'message': 'Multiple directories for HAWQ Master directory are not allowed.', 'type': 'configuration', 'config-name': 'hawq_master_directory', 'level': 'ERROR', }, 'hawq_segment_directory': {'config-type': 'hawq-site', 'message': 'Multiple directories for HAWQ Segment directory are not allowed.', 'type': 'configuration', 'config-name': 'hawq_segment_directory', 'level': 'ERROR', }, }
    self.assertEqual(problems_dict, expected_warnings)
    services = {'services': [{'StackServices': {'service_name': 'HAWQ', }, 'components': [], }], 'configurations': {'hawq-site': {'properties': {'hawq_global_rm_type': 'yarn', }, }, }, }
    properties = services['configurations']['hawq-site']['properties']
    problems = self.serviceAdvisor.validateHAWQSiteConfigurations(properties, defaults, services['configurations'], services, hosts)
    self.assertEqual(len(problems), 1)
    expected = {'config-type': 'hawq-site', 'message': 'hawq_global_rm_type must be set to none if YARN service is not installed', 'type': 'configuration', 'config-name': 'hawq_global_rm_type', 'level': 'ERROR', }
    self.assertEqual(problems[0], expected)
    services['services'].append({'StackServices': {'service_name': 'YARN', }, 'components': [], })
    problems = self.serviceAdvisor.validateHAWQSiteConfigurations(properties, defaults, services['configurations'], services, hosts)
    self.assertEqual(len(problems), 0)
    self.serviceAdvisor.isHawqMasterComponentOnAmbariServer = MagicMock(return_value=True)
    configurations = {'hawq-site': {'properties': {'hawq_master_address_port': '5432', }, }, }
    problems = self.serviceAdvisor.validateHAWQSiteConfigurations(properties, defaults, configurations, services, hosts)
    self.assertEqual(len(problems), 1)
    expected = {'config-name': 'hawq_master_address_port', 'config-type': 'hawq-site', 'level': 'WARN', 'message': 'The default Postgres port (5432) on the Ambari Server conflicts with the default HAWQ Masters port. If you are using port 5432 for Postgres, you must either deploy the HAWQ Masters on a different host or configure a different port for the HAWQ Masters in the HAWQ Configuration page.', 'type': 'configuration', }
    self.assertEqual(problems[0], expected)
    self.serviceAdvisor.isHawqMasterComponentOnAmbariServer = MagicMock(return_value=True)
    configurations['hawq-site']['properties']['hawq_master_address_port'] = '10432'
    problems = self.serviceAdvisor.validateHAWQSiteConfigurations(properties, defaults, configurations, services, hosts)
    self.assertEqual(len(problems), 0)
    self.serviceAdvisor.isHawqMasterComponentOnAmbariServer = MagicMock(return_value=False)
    configurations['hawq-site']['properties']['hawq_master_address_port'] = '5432'
    problems = self.serviceAdvisor.validateHAWQSiteConfigurations(properties, defaults, configurations, services, hosts)
    self.assertEqual(len(problems), 0)
    self.serviceAdvisor.isHawqMasterComponentOnAmbariServer = MagicMock(return_value=False)
    configurations['hawq-site']['properties']['hawq_master_address_port'] = '10432'
    problems = self.serviceAdvisor.validateHAWQSiteConfigurations(properties, defaults, configurations, services, hosts)
    self.assertEqual(len(problems), 0)
    services = {'services': [{'StackServices': {'service_name': 'HAWQ', }, 'components': [{'StackServiceComponents': {'component_name': 'HAWQSEGMENT', 'hostnames': [], }, }], }], 'configurations': {}, }
    configurations = services['configurations']
    configurations['hawq-site'] = {'properties': {'default_hash_table_bucket_number': '600', 'hawq_rm_nvseg_perquery_limit': '500', 'hawq_rm_nvseg_perquery_perseg_limit': '6', }, }
    properties = configurations['hawq-site']['properties']
    defaults = {}
    hosts = {}
    expected = {'config-type': 'hawq-site', 'message': 'Default buckets for Hash Distributed tables parameter value should not be greater than the value of Virtual Segments Limit per Query (Total) parameter, currently set to 500.', 'type': 'configuration', 'config-name': 'default_hash_table_bucket_number', 'level': 'ERROR', }
    problems = self.serviceAdvisor.validateHAWQSiteConfigurations(properties, defaults, configurations, services, hosts)
    self.assertEqual(len(problems), 1)
    self.assertEqual(problems[0], expected)
    configurations['hawq-site'] = {'properties': {'default_hash_table_bucket_number': '500', 'hawq_rm_nvseg_perquery_limit': '500', }, }
    properties = configurations['hawq-site']['properties']
    problems = self.serviceAdvisor.validateHAWQSiteConfigurations(properties, defaults, configurations, services, hosts)
    self.assertEqual(len(problems), 0)
    configurations['hawq-site'] = {'properties': {'hawq_global_rm_type': 'none', 'hawq_rm_memory_limit_perseg': '1023MB', }, }
    expected = {'config-type': 'hawq-site', 'message': 'HAWQ Segment Memory less than 1GB is not sufficient', 'type': 'configuration', 'config-name': 'hawq_global_rm_type', 'level': 'ERROR', }
    properties = configurations['hawq-site']['properties']
    problems = self.serviceAdvisor.validateHAWQSiteConfigurations(properties, defaults, configurations, services, hosts)
    self.assertEqual(len(problems), 1)
    self.assertEqual(problems[0], expected)
    configurations['hawq-site']['properties']['hawq_rm_memory_limit_perseg'] = '1GB'
    properties = configurations['hawq-site']['properties']
    problems = self.serviceAdvisor.validateHAWQSiteConfigurations(properties, defaults, configurations, services, hosts)
    self.assertEqual(len(problems), 0)
