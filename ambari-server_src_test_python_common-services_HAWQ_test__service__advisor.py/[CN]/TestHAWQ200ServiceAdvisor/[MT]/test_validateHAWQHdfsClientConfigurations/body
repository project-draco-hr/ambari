def test_validateHAWQHdfsClientConfigurations(self):
    services = {'services': [{'StackServices': {'service_name': 'HAWQ', }, 'components': [{'StackServiceComponents': {'component_name': 'HAWQSEGMENT', 'hostnames': [], }, }], }], 'configurations': {}, }
    configurations = services['configurations']
    configurations['hdfs-client'] = {'properties': {'output.replace-datanode-on-failure': 'true', }, }
    properties = configurations['hdfs-client']['properties']
    defaults = {}
    hosts = {}
    expected = {'config-type': 'hdfs-client', 'message': 'output.replace-datanode-on-failure should be set to false (unchecked) for clusters with 3 or less HAWQ Segments', 'type': 'configuration', 'config-name': 'output.replace-datanode-on-failure', 'level': 'WARN', }
    problems = self.serviceAdvisor.validateHAWQHdfsClientConfigurations(properties, defaults, configurations, services, hosts)
    self.assertEqual(len(problems), 1)
    self.assertEqual(problems[0], expected)
    services['services'][0]['components'][0]['StackServiceComponents']['hostnames'] = ['host1', 'host2', 'host3']
    problems = self.serviceAdvisor.validateHAWQHdfsClientConfigurations(properties, defaults, configurations, services, hosts)
    self.assertEqual(len(problems), 1)
    self.assertEqual(problems[0], expected)
    services['services'][0]['components'][0]['StackServiceComponents']['hostnames'] = ['host1', 'host2', 'host3', 'host4']
    problems = self.serviceAdvisor.validateHAWQHdfsClientConfigurations(properties, defaults, configurations, services, hosts)
    self.assertEqual(len(problems), 0)
    properties = {'output.replace-datanode-on-failure': 'false', }
    expected = {'config-type': 'hdfs-client', 'message': 'output.replace-datanode-on-failure should be set to true (checked) for clusters with more than 3 HAWQ Segments', 'type': 'configuration', 'config-name': 'output.replace-datanode-on-failure', 'level': 'WARN', }
    problems = self.serviceAdvisor.validateHAWQHdfsClientConfigurations(properties, defaults, configurations, services, hosts)
    self.assertEqual(len(problems), 1)
    self.assertEqual(problems[0], expected)
