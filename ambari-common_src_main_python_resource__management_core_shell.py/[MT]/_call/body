def _call(command, logoutput=False, throw_on_failure=True, cwd=None, env=None, preexec_fn=None, user=None, wait_for_finish=True, timeout=None, path=None):
    "\n  Execute shell command\n  \n  @param command: list/tuple of arguments (recommended as more safe - don't need to escape) \n  or string of the command to execute\n  @param logoutput: boolean, whether command output should be logged of not\n  @param throw_on_failure: if true, when return code is not zero exception is thrown\n  \n  @return: retrun_code, stdout\n  "
    if isinstance(command, (list, tuple)):
        command = ' '.join((quote_bash_args(x) for x in command))
    if path:
        export_path_command = ((('export PATH=$PATH' + os.pathsep) + os.pathsep.join(path)) + ' ; ')
    else:
        export_path_command = ''
    if user:
        if env:
            export_path_command += 'export '
            for var in env:
                export_path_command += (((' ' + var) + '=') + env[var])
            export_path_command += ' ; '
        subprocess_command = ['su', '-s', '/bin/bash', '-', user, '-c', (export_path_command + command)]
    else:
        subprocess_command = ['/bin/bash', '--login', '-c', (export_path_command + command)]
    proc = subprocess.Popen(subprocess_command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, cwd=cwd, env=env, shell=False, preexec_fn=preexec_fn)
    if (not wait_for_finish):
        return (None, None)
    if timeout:
        q = Queue()
        t = threading.Timer(timeout, on_timeout, [proc, q])
        t.start()
    out = proc.communicate()[0].strip('\n')
    if timeout:
        if q.empty():
            t.cancel()
        else:
            raise ExecuteTimeoutException()
    code = proc.returncode
    if (logoutput and out):
        Logger.info(out)
    if (throw_on_failure and code):
        err_msg = Logger.get_protected_text(("Execution of '%s' returned %d. %s" % (command, code, out)))
        raise Fail(err_msg)
    return (code, out)
