def _call(command, verbose=False, logoutput=False, throw_on_failure=True, cwd=None, env=None, preexec_fn=None, user=None, wait_for_finish=True, timeout=None, path=None, output_file=None, sudo=False):
    "\n  Execute shell command\n  \n  @param command: list/tuple of arguments (recommended as more safe - don't need to escape) \n  or string of the command to execute\n  @param logoutput: boolean, whether command output should be logged of not\n  @param throw_on_failure: if true, when return code is not zero exception is thrown\n  \n  @return: return_code, stdout\n  "
    env = ({} if (not env) else env)
    env['PATH'] = (os.pathsep.join([os.environ['PATH'], env['PATH']]) if ('PATH' in env) else os.environ['PATH'])
    if path:
        path = (os.pathsep.join(path) if isinstance(path, (list, tuple)) else path)
        env['PATH'] = os.pathsep.join([env['PATH'], path])
    if sudo:
        command = as_sudo(command, env=env)
    elif user:
        command = as_user(command, user, env=env)
    if isinstance(command, (list, tuple)):
        command = string_cmd_from_args_list(command)
    command = command.replace(SUDO_ENVIRONMENT_PLACEHOLDER, get_environment_str(env), 1)
    if verbose:
        Logger.info(('Call command: ' + Logger.get_protected_text(command)))
    subprocess_command = ['/bin/bash', '--login', '--noprofile', '-c', command]
    proc = subprocess.Popen(subprocess_command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, cwd=cwd, env=env, shell=False, preexec_fn=preexec_fn)
    if (not wait_for_finish):
        return (None, None)
    if timeout:
        q = Queue()
        t = threading.Timer(timeout, on_timeout, [proc, q])
        t.start()
    out = proc.communicate()[0].strip('\n')
    if timeout:
        if q.empty():
            t.cancel()
        else:
            raise ExecuteTimeoutException()
    code = proc.returncode
    if (logoutput and out):
        Logger.info(out)
    if (throw_on_failure and code):
        err_msg = Logger.get_protected_text(("Execution of '%s' returned %d. %s" % (command, code, out)))
        raise Fail(err_msg)
    return (code, out)
