def _call(command, logoutput=False, throw_on_failure=True, cwd=None, env=None, preexec_fn=None, user=None, wait_for_finish=True, timeout=None, path=None, sudo=False):
    "\n  Execute shell command\n  \n  @param command: list/tuple of arguments (recommended as more safe - don't need to escape) \n  or string of the command to execute\n  @param logoutput: boolean, whether command output should be logged of not\n  @param throw_on_failure: if true, when return code is not zero exception is thrown\n  \n  @return: retrun_code, stdout\n  "
    if isinstance(command, (list, tuple)):
        command = ' '.join((quote_bash_args(x) for x in command))
    export_command = ((reduce((lambda str, x: '{0} {1}={2}'.format(str, x, quote_bash_args(env[x]))), env, 'export') + '; ') if env else '')
    if user:
        bash_run_command = '/usr/bin/sudo -Hsu {0} <<< {1}'.format(quote_bash_args(user), quote_bash_args((export_command + command)))
        cwd = (os.path.expanduser(('~' + user)) if ((not cwd) and os.path.exists(os.path.expanduser(('~' + user)))) else cwd)
    elif sudo:
        bash_run_command = '/usr/bin/sudo -s <<< {0}'.format(quote_bash_args((export_command + command)))
    else:
        bash_run_command = command
    subprocess_command = ['/bin/bash', '--login', '-c', bash_run_command]
    proc = subprocess.Popen(subprocess_command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, cwd=cwd, env=env, shell=False, preexec_fn=preexec_fn)
    if (not wait_for_finish):
        return (None, None)
    if timeout:
        q = Queue()
        t = threading.Timer(timeout, on_timeout, [proc, q])
        t.start()
    out = proc.communicate()[0].strip('\n')
    if timeout:
        if q.empty():
            t.cancel()
        else:
            raise ExecuteTimeoutException()
    code = proc.returncode
    if (logoutput and out):
        Logger.info(out)
    if (throw_on_failure and code):
        err_msg = Logger.get_protected_text(("Execution of '%s' returned %d. %s" % (command, code, out)))
        raise Fail(err_msg)
    return (code, out)
