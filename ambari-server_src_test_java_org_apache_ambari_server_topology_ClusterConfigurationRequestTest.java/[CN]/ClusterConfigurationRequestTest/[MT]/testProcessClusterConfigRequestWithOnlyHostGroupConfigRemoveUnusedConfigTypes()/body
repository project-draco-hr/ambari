{
  Map<String,Map<String,String>> config=Maps.newHashMap();
  config.put("cluster-env",new HashMap<String,String>());
  config.put("global",new HashMap<String,String>());
  Map<String,Map<String,Map<String,String>>> attributes=Maps.newHashMap();
  Configuration configuration=new Configuration(config,attributes);
  Set<String> services=new HashSet<>();
  services.add("HDFS");
  services.add("RANGER");
  Map<String,HostGroupInfo> hostGroupInfoMap=Maps.newHashMap();
  HostGroupInfo hg1=new HostGroupInfo("hg1");
  hg1.setConfiguration(createConfigurationsForHostGroup());
  hostGroupInfoMap.put("hg1",hg1);
  expect(topology.getConfiguration()).andReturn(configuration).anyTimes();
  expect(topology.getBlueprint()).andReturn(blueprint).anyTimes();
  expect(topology.getHostGroupInfo()).andReturn(hostGroupInfoMap);
  expect(blueprint.getStack()).andReturn(stack).anyTimes();
  expect(blueprint.getServices()).andReturn(services).anyTimes();
  expect(stack.getServiceForConfigType("hdfs-site")).andReturn("HDFS").anyTimes();
  expect(stack.getServiceForConfigType("admin-properties")).andReturn("RANGER").anyTimes();
  expect(stack.getServiceForConfigType("yarn-site")).andReturn("YARN").anyTimes();
  EasyMock.replay(stack,blueprint,topology);
  new ClusterConfigurationRequest(ambariContext,topology,false,stackAdvisorBlueprintProcessor);
  assertTrue("'cluster-env' config type should not be removed from configuration.",configuration.getFullProperties().containsKey("cluster-env"));
  assertTrue("'global' config type should not be removed from configuration.",configuration.getFullProperties().containsKey("global"));
  assertFalse("SPARK service not present in topology host group config thus 'spark-env' config type should be removed from config.",hg1.getConfiguration().getFullAttributes().containsKey("spark-env"));
  assertTrue("HDFS service is present in topology host group config thus 'hdfs-site' config type should be left in the config.",hg1.getConfiguration().getFullAttributes().containsKey("hdfs-site"));
  verify(stack,blueprint,topology);
}
