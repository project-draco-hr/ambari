def execute(parameters=None, host_name=None):
    '\n  Returns a tuple containing the result code and a pre-formatted result label\n\n  Keyword arguments:\n  parameters (dictionary): a mapping of parameter key to value\n  host_name (string): the name of this host where the alert is running\n  '
    result_code = RESULT_CODE_UNKNOWN
    if (parameters is None):
        return (result_code, ['There were no parameters supplied to the script.'])
    webhcat_port = WEBHCAT_PORT_DEFAULT
    if (TEMPLETON_PORT_KEY in parameters):
        webhcat_port = int(parameters[TEMPLETON_PORT_KEY])
    security_enabled = False
    if (SECURITY_ENABLED_KEY in parameters):
        security_enabled = (parameters[SECURITY_ENABLED_KEY].lower() == 'true')
    if (host_name is None):
        host_name = socket.getfqdn()
    query_url = 'http://{0}:{1}/templeton/v1/status'.format(host_name, webhcat_port)
    total_time = 0
    json_response = {}
    if security_enabled:
        if ((WEBHCAT_KEYTAB_KEY not in parameters) or (WEBHCAT_PRINCIPAL_KEY not in parameters)):
            return (RESULT_CODE_UNKNOWN, [str(parameters)])
        try:
            webhcat_keytab = parameters[WEBHCAT_KEYTAB_KEY]
            webhcat_principal = parameters[WEBHCAT_PRINCIPAL_KEY]
            webhcat_principal = webhcat_principal.replace('_HOST', host_name)
            env = Environment.get_instance()
            ccache_file = '{0}{1}webhcat_alert_cc_{2}'.format(env.tmp_dir, sep, getpid())
            kerberos_env = {'KRB5CCNAME': ccache_file, }
            klist_path_local = get_klist_path()
            klist_command = format('{klist_path_local} -s {ccache_file}')
            (return_code, _) = call(klist_command)
            if (return_code != 0):
                kinit_path_local = get_kinit_path()
                kinit_command = format('{kinit_path_local} -l 5m -c {ccache_file} -kt {webhcat_keytab} {webhcat_principal}; ')
                Execute(kinit_command)
            curl = subprocess.Popen(['curl', '--negotiate', '-u', ':', '-sL', '-w', '%{http_code}', '--connect-timeout', CURL_CONNECTION_TIMEOUT, '-o', '/dev/null', query_url], stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=kerberos_env)
            (stdout, stderr) = curl.communicate()
            if (stderr != ''):
                raise Exception(stderr)
            response_code = int(stdout)
            if (response_code == 0):
                label = CRITICAL_CONNECTION_MESSAGE.format(query_url)
                return (RESULT_CODE_CRITICAL, [label])
            if (response_code != 200):
                label = CRITICAL_HTTP_MESSAGE.format(response_code, query_url)
                return (RESULT_CODE_CRITICAL, [label])
            start_time = time.time()
            curl = subprocess.Popen(['curl', '--negotiate', '-u', ':', '-sL', '--connect-timeout', CURL_CONNECTION_TIMEOUT, query_url], stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=kerberos_env)
            (stdout, stderr) = curl.communicate()
            total_time = (time.time() - start_time)
            if (stderr != ''):
                raise Exception(stderr)
            json_response = json.loads(stdout)
        except Exception as exception:
            return (RESULT_CODE_CRITICAL, [str(exception)])
    else:
        url_response = None
        try:
            try:
                start_time = time.time()
                url_response = urllib2.urlopen(query_url)
                total_time = (time.time() - start_time)
                json_response = json.loads(url_response.read())
            except urllib2.HTTPError as httpError:
                label = CRITICAL_HTTP_MESSAGE.format(httpError.code, query_url)
                return (RESULT_CODE_CRITICAL, [label])
            except:
                label = CRITICAL_CONNECTION_MESSAGE.format(query_url)
                return (RESULT_CODE_CRITICAL, [label])
        finally:
            if (url_response is not None):
                try:
                    url_response.close()
                except:
                    pass
    if ('status' not in json_response):
        return (RESULT_CODE_CRITICAL, [CRITICAL_WEBHCAT_UNKNOWN_JSON_MESSAGE])
    try:
        webhcat_status = json_response['status']
    except:
        return (RESULT_CODE_CRITICAL, [CRITICAL_WEBHCAT_UNKNOWN_JSON_MESSAGE])
    if (webhcat_status.lower() == WEBHCAT_OK_RESPONSE):
        result_code = RESULT_CODE_OK
        label = OK_MESSAGE.format(total_time, query_url)
    else:
        result_code = RESULT_CODE_CRITICAL
        label = CRITICAL_WEBHCAT_STATUS_MESSAGE.format(webhcat_status)
    return (result_code, [label])
