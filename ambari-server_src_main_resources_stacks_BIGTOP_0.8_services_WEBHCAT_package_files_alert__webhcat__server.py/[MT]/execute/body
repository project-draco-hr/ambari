def execute(parameters=None, host_name=None):
    '\n  Returns a tuple containing the result code and a pre-formatted result label\n\n  Keyword arguments:\n  parameters (dictionary): a mapping of parameter key to value\n  host_name (string): the name of this host where the alert is running\n  '
    result_code = RESULT_CODE_UNKNOWN
    if (parameters is None):
        return (result_code, ['There were no parameters supplied to the script.'])
    templeton_port = TEMPLETON_PORT_DEFAULT
    if (TEMPLETON_PORT_KEY in parameters):
        templeton_port = int(parameters[TEMPLETON_PORT_KEY])
    security_enabled = False
    if (SECURITY_ENABLED_KEY in parameters):
        security_enabled = (parameters[SECURITY_ENABLED_KEY].lower() == 'true')
    scheme = 'http'
    if (security_enabled is True):
        scheme = 'https'
    label = ''
    url_response = None
    templeton_status = ''
    total_time = 0
    try:
        if (host_name is None):
            host_name = socket.getfqdn()
        query = '{0}://{1}:{2}/templeton/v1/status'.format(scheme, host_name, templeton_port)
        start_time = time.time()
        url_response = urllib2.urlopen(query)
        total_time = (time.time() - start_time)
    except:
        label = CRITICAL_CONNECTION_MESSAGE.format(host_name, templeton_port)
        return (RESULT_CODE_CRITICAL, [label])
    try:
        json_response = json.loads(url_response.read())
        templeton_status = json_response['status']
    except:
        return (RESULT_CODE_CRITICAL, [CRITICAL_TEMPLETON_UNKNOWN_JSON_MESSAGE])
    if (templeton_status.lower() == TEMPLETON_OK_RESPONSE):
        result_code = RESULT_CODE_OK
        label = OK_MESSAGE.format(total_time, templeton_port)
    else:
        result_code = RESULT_CODE_CRITICAL
        label = CRITICAL_TEMPLETON_STATUS_MESSAGE.format(templeton_status)
    return (result_code, [label])
