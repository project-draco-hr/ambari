{
  try {
    Cluster cluster=getCluster(clusterName);
    if (cluster != null && managementControllerProvider != null) {
      AmbariMetaInfo ambariMetaInfo=managementControllerProvider.get().getAmbariMetaInfo();
      StackId stackId=cluster.getDesiredStackVersion();
      ServiceComponentHostRequest request=new ServiceComponentHostRequest(clusterName,serviceName,null,null,null);
      Set<ServiceComponentHostResponse> hostComponentResponses=managementControllerProvider.get().getHostComponents(Collections.singleton(request));
      int nameNodeCount=0;
      int nameNodeActiveCount=0;
      boolean hasSecondary=false;
      boolean hasJournal=false;
      State nonStartedState=null;
      for (      ServiceComponentHostResponse hostComponentResponse : hostComponentResponses) {
        try {
          ComponentInfo componentInfo=ambariMetaInfo.getComponent(stackId.getStackName(),stackId.getStackVersion(),hostComponentResponse.getServiceName(),hostComponentResponse.getComponentName());
          if (componentInfo.isMaster()) {
            String componentName=hostComponentResponse.getComponentName();
            boolean isNameNode=false;
switch (componentName) {
case "NAMENODE":
              ++nameNodeCount;
            isNameNode=true;
          break;
case "SECONDARY_NAMENODE":
        hasSecondary=true;
      break;
case "JOURNALNODE":
    hasJournal=true;
  break;
}
State state=getHostComponentState(hostComponentResponse);
switch (state) {
case STARTED:
case DISABLED:
if (isNameNode) {
  ++nameNodeActiveCount;
}
break;
default :
nonStartedState=state;
}
}
}
 catch (ObjectNotFoundException e) {
}
}
if (nonStartedState == null || ((nameNodeCount > 0 && !hasSecondary || hasJournal) && nameNodeActiveCount > 0)) {
return State.STARTED;
}
return nonStartedState;
}
}
 catch (AmbariException e) {
LOG.error("Can't determine service state.",e);
}
return State.UNKNOWN;
}
