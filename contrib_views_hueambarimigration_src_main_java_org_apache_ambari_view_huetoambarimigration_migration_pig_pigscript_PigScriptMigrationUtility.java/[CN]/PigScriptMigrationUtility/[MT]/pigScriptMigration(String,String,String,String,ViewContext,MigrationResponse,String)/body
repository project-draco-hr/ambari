{
  long startTime=System.currentTimeMillis();
  final Logger logger=Logger.getLogger(PigScriptMigrationUtility.class);
  Connection connectionHuedb=null;
  Connection connectionAmbaridb=null;
  logger.info("-------------------------------------");
  logger.info("pig saved script Migration started");
  logger.info("-------------------------------------");
  int i=0;
  logger.info("start date: " + startDate);
  logger.info("enddate date: " + endDate);
  logger.info("instance is: " + username);
  logger.info("hue username is : " + instance);
  PigScriptMigrationImplementation pigsavedscriptmigration=new PigScriptMigrationImplementation();
  QuerySet huedatabase=null;
  if (view.getProperties().get("huedrivername").contains("mysql")) {
    huedatabase=new MysqlQuerySet();
  }
 else   if (view.getProperties().get("huedrivername").contains("postgresql")) {
    huedatabase=new PostgressQuerySet();
  }
 else   if (view.getProperties().get("huedrivername").contains("sqlite")) {
    huedatabase=new SqliteQuerySet();
  }
 else   if (view.getProperties().get("huedrivername").contains("oracle")) {
    huedatabase=new OracleQuerySet();
  }
  QuerySetAmbariDB ambaridatabase=null;
  if (view.getProperties().get("ambaridrivername").contains("mysql")) {
    ambaridatabase=new MysqlQuerySetAmbariDB();
  }
 else   if (view.getProperties().get("ambaridrivername").contains("postgresql")) {
    ambaridatabase=new PostgressQuerySetAmbariDB();
  }
 else   if (view.getProperties().get("ambaridrivername").contains("oracle")) {
    ambaridatabase=new OracleQuerySetAmbariDB();
  }
  int maxcountforsavequery=0, maxcountforpigsavedscript=0;
  String time=null, timetobeInorder=null;
  Long epochTime=null;
  String dirNameForPigScript, completeDirandFilePath, pigscriptFilename="";
  int pigInstanceTableName, sequence;
  ArrayList<PigModel> dbpojoPigSavedscript=new ArrayList<PigModel>();
  try {
    connectionHuedb=DataSourceHueDatabase.getInstance(view.getProperties().get("huedrivername"),view.getProperties().get("huejdbcurl"),view.getProperties().get("huedbusername"),view.getProperties().get("huedbpassword")).getConnection();
    dbpojoPigSavedscript=pigsavedscriptmigration.fetchFromHueDatabase(username,startDate,endDate,connectionHuedb,huedatabase);
    for (int j=0; j < dbpojoPigSavedscript.size(); j++) {
      logger.info("the query fetched from hue=" + dbpojoPigSavedscript.get(j).getScript());
    }
    if (dbpojoPigSavedscript.size() == 0) {
      migrationresult.setIsNoQuerySelected("yes");
      migrationresult.setProgressPercentage(0);
      migrationresult.setNumberOfQueryTransfered(0);
      migrationresult.setTotalNoQuery(dbpojoPigSavedscript.size());
      getResourceManager(view).update(migrationresult,jobid);
      logger.info("no pig script has been selected from hue according to your criteria of searching");
    }
 else {
      connectionAmbaridb=DataSourceAmbariDatabase.getInstance(view.getProperties().get("ambaridrivername"),view.getProperties().get("ambarijdbcurl"),view.getProperties().get("ambaridbusername"),view.getProperties().get("ambaridbpassword")).getConnection();
      connectionAmbaridb.setAutoCommit(false);
      logger.info("loop will continue for " + dbpojoPigSavedscript.size() + "times");
      pigInstanceTableName=pigsavedscriptmigration.fetchInstanceTablenamePigScript(connectionAmbaridb,instance,ambaridatabase);
      sequence=pigsavedscriptmigration.fetchSequenceno(connectionAmbaridb,pigInstanceTableName,ambaridatabase);
      for (i=0; i < dbpojoPigSavedscript.size(); i++) {
        float calc=((float)(i + 1)) / dbpojoPigSavedscript.size() * 100;
        int progressPercentage=Math.round(calc);
        migrationresult.setIsNoQuerySelected("no");
        migrationresult.setProgressPercentage(progressPercentage);
        migrationresult.setNumberOfQueryTransfered(i + 1);
        migrationresult.setTotalNoQuery(dbpojoPigSavedscript.size());
        getResourceManager(view).update(migrationresult,jobid);
        logger.info("Loop No." + (i + 1));
        logger.info("________________");
        logger.info("the title of script:  " + dbpojoPigSavedscript.get(i).getTitle());
        time=pigsavedscriptmigration.getTime();
        timetobeInorder=pigsavedscriptmigration.getTimeInorder();
        epochTime=pigsavedscriptmigration.getEpochTime();
        maxcountforpigsavedscript=i + sequence + 1;
        dirNameForPigScript="/user/" + username + "/pig/scripts/";
        pigscriptFilename=dbpojoPigSavedscript.get(i).getTitle() + "-" + time+ ".pig";
        completeDirandFilePath=dirNameForPigScript + pigscriptFilename;
        pigsavedscriptmigration.writetPigScripttoLocalFile(dbpojoPigSavedscript.get(i).getScript(),dbpojoPigSavedscript.get(i).getTitle(),dbpojoPigSavedscript.get(i).getDt(),ConfigurationCheckImplementation.getHomeDir(),pigscriptFilename);
        pigsavedscriptmigration.insertRowForPigScript(completeDirandFilePath,maxcountforsavequery,maxcountforpigsavedscript,time,timetobeInorder,epochTime,dbpojoPigSavedscript.get(i).getTitle(),connectionAmbaridb,pigInstanceTableName,instance,i,ambaridatabase,username);
        if (view.getProperties().get("KerberoseEnabled").equals("y")) {
          pigsavedscriptmigration.createDirPigScriptSecured(dirNameForPigScript,view.getProperties().get("namenode_URI_Ambari"),username,view.getProperties().get("PrincipalUserName"));
          pigsavedscriptmigration.putFileinHdfsSecured(ConfigurationCheckImplementation.getHomeDir() + pigscriptFilename,dirNameForPigScript,view.getProperties().get("namenode_URI_Ambari"),username,view.getProperties().get("PrincipalUserName"));
        }
 else {
          pigsavedscriptmigration.createDirPigScript(dirNameForPigScript,view.getProperties().get("namenode_URI_Ambari"),username);
          pigsavedscriptmigration.putFileinHdfs(ConfigurationCheckImplementation.getHomeDir() + pigscriptFilename,dirNameForPigScript,view.getProperties().get("namenode_URI_Ambari"),username);
        }
        logger.info(dbpojoPigSavedscript.get(i).getTitle() + "Migrated to Ambari");
        pigsavedscriptmigration.deletePigScriptLocalFile(ConfigurationCheckImplementation.getHomeDir(),pigscriptFilename);
      }
      pigsavedscriptmigration.updateSequenceno(connectionAmbaridb,maxcountforpigsavedscript,pigInstanceTableName,ambaridatabase);
      connectionAmbaridb.commit();
    }
  }
 catch (  SQLException e) {
    logger.error("Sql exception in ambari database",e);
    try {
      connectionAmbaridb.rollback();
      logger.info("rollback done");
    }
 catch (    SQLException e1) {
      logger.error("Sql exception while doing roll back",e);
    }
  }
catch (  ClassNotFoundException e2) {
    logger.error("class not found exception",e2);
  }
catch (  ParseException e) {
    logger.error("ParseException: ",e);
  }
catch (  PropertyVetoException e) {
    logger.error("PropertyVetoException: ",e);
  }
catch (  URISyntaxException e) {
    e.printStackTrace();
  }
 finally {
    if (null != connectionAmbaridb)     try {
      connectionAmbaridb.close();
    }
 catch (    SQLException e) {
      logger.error("connection close exception: ",e);
    }
  }
  long stopTime=System.currentTimeMillis();
  long elapsedTime=stopTime - startTime;
  migrationresult.setJobtype("hivehistoryquerymigration");
  migrationresult.setTotalTimeTaken(String.valueOf(elapsedTime));
  getResourceManager(view).update(migrationresult,jobid);
  logger.info("----------------------------------");
  logger.info("pig saved script Migration ends");
  logger.info("----------------------------------");
}
