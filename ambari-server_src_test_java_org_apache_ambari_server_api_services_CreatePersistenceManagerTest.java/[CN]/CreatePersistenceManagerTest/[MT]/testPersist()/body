{
  ResourceDefinition resource=createMock(ResourceDefinition.class);
  ClusterController controller=createMock(ClusterController.class);
  Schema schema=createMock(Schema.class);
  PropertyId clusterId=createStrictMock(PropertyId.class);
  PropertyId serviceId=createStrictMock(PropertyId.class);
  Request serverRequest=createStrictMock(Request.class);
  Map<Resource.Type,String> mapResourceIds=new HashMap<Resource.Type,String>();
  mapResourceIds.put(Resource.Type.Cluster,"clusterId");
  mapResourceIds.put(Resource.Type.Service,"serviceId");
  Set<Map<PropertyId,Object>> setProperties=new HashSet<Map<PropertyId,Object>>();
  Map<PropertyId,Object> mapProperties=new HashMap<PropertyId,Object>();
  mapProperties.put(clusterId,"clusterId");
  mapProperties.put(serviceId,"serviceId");
  mapProperties.put(PropertyHelper.getPropertyId("bar","foo"),"value");
  setProperties.add(mapProperties);
  expect(resource.getResourceIds()).andReturn(mapResourceIds);
  expect(resource.getType()).andReturn(Resource.Type.Component);
  expect(controller.getSchema(Resource.Type.Component)).andReturn(schema);
  expect(schema.getKeyPropertyId(Resource.Type.Cluster)).andReturn(clusterId);
  expect(schema.getKeyPropertyId(Resource.Type.Service)).andReturn(serviceId);
  expect(controller.createResources(Resource.Type.Component,serverRequest)).andReturn(new RequestStatusImpl(null));
  replay(resource,controller,schema,clusterId,serviceId,serverRequest);
  new TestCreatePersistenceManager(controller,setProperties,serverRequest).persist(resource,setProperties);
  verify(resource,controller,schema,clusterId,serviceId,serverRequest);
}
