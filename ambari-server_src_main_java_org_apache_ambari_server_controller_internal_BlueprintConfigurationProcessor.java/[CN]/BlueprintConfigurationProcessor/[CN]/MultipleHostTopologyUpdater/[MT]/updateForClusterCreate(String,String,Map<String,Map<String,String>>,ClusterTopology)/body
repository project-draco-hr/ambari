{
  StringBuilder sb=new StringBuilder();
  if (!origValue.contains("%HOSTGROUP") && (!origValue.contains("localhost"))) {
    return origValue;
  }
  if (origValue.contains("localhost") && topology.getHostGroupsForComponent(component).size() == 1) {
    return origValue.replace("localhost",topology.getHostAssignmentsForComponent(component).iterator().next());
  }
  String prefix=null;
  Collection<String> hostStrings=getHostStrings(origValue,topology);
  if (hostStrings.isEmpty()) {
    String port;
    for (    String urlScheme : setOfKnownURLSchemes) {
      if (origValue.startsWith(urlScheme)) {
        prefix=urlScheme;
      }
    }
    if (prefix != null) {
      String valueWithoutPrefix=origValue.substring(prefix.length());
      port=calculatePort(valueWithoutPrefix);
      sb.append(prefix);
    }
 else {
      port=calculatePort(origValue);
    }
    for (    String host : topology.getHostAssignmentsForComponent(component)) {
      if (port != null) {
        host+=":" + port;
      }
      hostStrings.add(host);
    }
  }
  String suffix=null;
  Matcher matcher=HOSTGROUP_PORT_REGEX.matcher(origValue);
  if (matcher.find()) {
    int indexOfStart=matcher.start();
    if ((indexOfStart > 0) && (!origValue.substring(0,indexOfStart).equals("['"))) {
      prefix=origValue.substring(0,indexOfStart);
      sb.append(prefix);
    }
    int indexOfEnd;
    do {
      indexOfEnd=matcher.end();
    }
 while (matcher.find());
    if (indexOfEnd < (origValue.length() - 1)) {
      suffix=origValue.substring(indexOfEnd);
    }
  }
  boolean firstHost=true;
  for (  String host : hostStrings) {
    if (!firstHost) {
      sb.append(separator);
      if (usePrefixForEachHost && (prefix != null)) {
        sb.append(prefix);
      }
    }
 else {
      firstHost=false;
    }
    sb.append(host);
  }
  if ((suffix != null) && (!suffix.equals("']"))) {
    sb.append(suffix);
  }
  return sb.toString();
}
