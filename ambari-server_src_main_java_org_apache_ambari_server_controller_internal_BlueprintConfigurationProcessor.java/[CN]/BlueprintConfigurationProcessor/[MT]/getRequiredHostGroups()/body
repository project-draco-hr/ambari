{
  Collection<String> requiredHostGroups=new HashSet<String>();
  for (  Map<String,Map<String,PropertyUpdater>> updaterMap : createCollectionOfUpdaters()) {
    for (    Map.Entry<String,Map<String,PropertyUpdater>> entry : updaterMap.entrySet()) {
      String type=entry.getKey();
      for (      Map.Entry<String,PropertyUpdater> updaterEntry : entry.getValue().entrySet()) {
        String propertyName=updaterEntry.getKey();
        PropertyUpdater updater=updaterEntry.getValue();
        Map<String,Map<String,String>> clusterProps=clusterTopology.getConfiguration().getFullProperties();
        Map<String,String> typeMap=clusterProps.get(type);
        if (typeMap != null && typeMap.containsKey(propertyName) && typeMap.get(propertyName) != null) {
          requiredHostGroups.addAll(updater.getRequiredHostGroups(propertyName,typeMap.get(propertyName),clusterProps,clusterTopology));
        }
        for (        HostGroupInfo groupInfo : clusterTopology.getHostGroupInfo().values()) {
          Map<String,Map<String,String>> hgConfigProps=groupInfo.getConfiguration().getProperties();
          Map<String,String> hgTypeMap=hgConfigProps.get(type);
          if (hgTypeMap != null && hgTypeMap.containsKey(propertyName)) {
            requiredHostGroups.addAll(updater.getRequiredHostGroups(propertyName,hgTypeMap.get(propertyName),hgConfigProps,clusterTopology));
          }
        }
      }
    }
  }
  return requiredHostGroups;
}
