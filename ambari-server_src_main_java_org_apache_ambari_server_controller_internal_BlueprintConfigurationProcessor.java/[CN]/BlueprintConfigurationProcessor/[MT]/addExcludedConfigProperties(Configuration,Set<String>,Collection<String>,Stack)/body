{
  LOG.debug("Handling excluded properties for blueprint services: {}",blueprintServices);
  for (  String blueprintService : blueprintServices) {
    LOG.debug("Handling excluded properties for blueprint service: {}",blueprintService);
    Set<String> excludedConfigTypes=stack.getExcludedConfigurationTypes(blueprintService);
    if (excludedConfigTypes.isEmpty()) {
      LOG.debug("There are no excluded config types for blueprint service: {}",blueprintService);
      continue;
    }
    for (    String configType : excludedConfigTypes) {
      LOG.debug("Handling excluded config type [{}] for blueprint service: [{}]",configType,blueprintService);
      String blueprintServiceForExcludedConfig;
      try {
        blueprintServiceForExcludedConfig=stack.getServiceForConfigType(configType);
      }
 catch (      IllegalArgumentException illegalArgumentException) {
        LOG.warn("Error encountered while trying to obtain the service name for config type [" + configType + "].  Further processing on this excluded config type will be skipped.  "+ "This usually means that a service's definitions have been manually removed from the Ambari stack definitions.  "+ "If the stack definitions have not been changed manually, this may indicate a stack definition error in Ambari.  ",illegalArgumentException);
        continue;
      }
      if (!blueprintServices.contains(blueprintServiceForExcludedConfig)) {
        LOG.debug("Service [{}] for excluded config type [{}] is not present in the blueprint. " + "Ignoring excluded config entries.",blueprintServiceForExcludedConfig,configType);
        continue;
      }
      Map<String,String> configProperties=stack.getConfigurationProperties(blueprintService,configType);
      for (      Map.Entry<String,String> entry : configProperties.entrySet()) {
        LOG.debug("ADD property " + configType + " "+ entry.getKey()+ " "+ entry.getValue());
        ensureProperty(configuration,configType,entry.getKey(),entry.getValue(),configTypesUpdated);
      }
    }
  }
}
