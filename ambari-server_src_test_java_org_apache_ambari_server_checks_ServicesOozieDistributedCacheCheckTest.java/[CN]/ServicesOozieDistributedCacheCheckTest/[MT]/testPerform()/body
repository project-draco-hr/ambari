{
  final Cluster cluster=Mockito.mock(Cluster.class);
  Mockito.when(cluster.getClusterId()).thenReturn(1L);
  Mockito.when(clusters.getClusters()).thenReturn(Collections.singletonMap("cluster",cluster));
  servicesOozieDistributedCacheCheck.mapReduceCheck=new Provider<ServicesMapReduceDistributedCacheCheck>(){
    @Override public ServicesMapReduceDistributedCacheCheck get(){
      final ServicesMapReduceDistributedCacheCheck check=Mockito.mock(ServicesMapReduceDistributedCacheCheck.class);
      return check;
    }
  }
;
  PrerequisiteCheck check=new PrerequisiteCheck(null,null,null,null);
  servicesOozieDistributedCacheCheck.perform(check,new PrereqCheckRequest("cluster"));
  Assert.assertEquals(PrereqCheckStatus.PASS,check.getStatus());
  servicesOozieDistributedCacheCheck.mapReduceCheck=new Provider<ServicesMapReduceDistributedCacheCheck>(){
    @Override public ServicesMapReduceDistributedCacheCheck get(){
      final ServicesMapReduceDistributedCacheCheck check=Mockito.mock(ServicesMapReduceDistributedCacheCheck.class);
      try {
        Mockito.doAnswer(new Answer<Void>(){
          @Override public Void answer(          InvocationOnMock invocation) throws Throwable {
            PrerequisiteCheck check=(PrerequisiteCheck)invocation.getArguments()[0];
            check.setStatus(PrereqCheckStatus.FAIL);
            return null;
          }
        }
).when(check).perform(Mockito.<PrerequisiteCheck>anyObject(),Mockito.<PrereqCheckRequest>anyObject());
      }
 catch (      AmbariException e) {
      }
      return check;
    }
  }
;
  check=new PrerequisiteCheck(null,null,null,null);
  servicesOozieDistributedCacheCheck.perform(check,new PrereqCheckRequest("cluster"));
  Assert.assertEquals(PrereqCheckStatus.FAIL,check.getStatus());
}
