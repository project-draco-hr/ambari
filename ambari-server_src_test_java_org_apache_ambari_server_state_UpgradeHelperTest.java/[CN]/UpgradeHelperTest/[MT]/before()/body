{
  m_configHelper=EasyMock.createNiceMock(ConfigHelper.class);
  expect(m_configHelper.getPlaceholderValueFromDesiredConfigurations(EasyMock.anyObject(Cluster.class),EasyMock.eq("{{foo/bar}}"))).andReturn("placeholder-rendered-properly").anyTimes();
  expect(m_configHelper.getEffectiveDesiredTags(EasyMock.anyObject(Cluster.class),EasyMock.anyObject(String.class))).andReturn(new HashMap<String,Map<String,String>>()).anyTimes();
  replay(m_configHelper);
  final InMemoryDefaultTestModule injectorModule=new InMemoryDefaultTestModule(){
    @Override protected void configure(){
      super.configure();
    }
  }
;
  MockModule mockModule=new MockModule();
  injector=Guice.createInjector(Modules.override(injectorModule).with(mockModule));
  injector.getInstance(GuiceJpaInitializer.class);
  EventBusSynchronizer.synchronizeAmbariEventPublisher(injector);
  EventBusSynchronizer.synchronizeAlertEventPublisher(injector);
  helper=injector.getInstance(OrmTestHelper.class);
  ambariMetaInfo=injector.getInstance(AmbariMetaInfo.class);
  m_upgradeHelper=injector.getInstance(UpgradeHelper.class);
  m_masterHostResolver=EasyMock.createMock(MasterHostResolver.class);
  m_managementController=injector.getInstance(AmbariManagementController.class);
  SecurityContextHolder.getContext().setAuthentication(TestAuthenticationFactory.createAdministrator("admin"));
}
