{
  Clusters clusters=injector.getInstance(Clusters.class);
  ServiceFactory serviceFactory=injector.getInstance(ServiceFactory.class);
  String clusterName="c1";
  String version="2.1.1.0-1234";
  StackId stackId=new StackId("HDP-2.1.1");
  clusters.addCluster(clusterName,stackId);
  Cluster c=clusters.getCluster(clusterName);
  helper.getOrCreateRepositoryVersion(stackId,c.getDesiredStackVersion().getStackVersion());
  c.createClusterVersion(stackId,c.getDesiredStackVersion().getStackVersion(),"admin",RepositoryVersionState.INSTALLING);
  for (int i=0; i < 2; i++) {
    String hostName="h" + (i + 1);
    clusters.addHost(hostName);
    Host host=clusters.getHost(hostName);
    Map<String,String> hostAttributes=new HashMap<String,String>();
    hostAttributes.put("os_family","redhat");
    hostAttributes.put("os_release_version","6");
    host.setHostAttributes(hostAttributes);
    host.persist();
    clusters.mapHostToCluster(hostName,clusterName);
  }
  c.addService(serviceFactory.createNew(c,"HDFS"));
  Service s=c.getService("HDFS");
  ServiceComponent sc=s.addServiceComponent("NAMENODE");
  sc.addServiceComponentHost("h1");
  sc.addServiceComponentHost("h2");
  List<ServiceComponentHost> schs=c.getServiceComponentHosts("HDFS","NAMENODE");
  assertEquals(2,schs.size());
  setConfigMocks();
  expect(m_configHelper.getValueFromDesiredConfigurations(c,"hdfs-site","dfs.internal.nameservices")).andReturn("ha").anyTimes();
  expect(m_configHelper.getValueFromDesiredConfigurations(c,"hdfs-site","dfs.ha.namenodes.ha")).andReturn("nn1,nn2").anyTimes();
  expect(m_configHelper.getValueFromDesiredConfigurations(c,"hdfs-site","dfs.http.policy")).andReturn("HTTP_ONLY").anyTimes();
  expect(m_configHelper.getValueFromDesiredConfigurations(c,"hdfs-site","dfs.namenode.http-address.ha.nn1")).andReturn("H1:50070").anyTimes();
  expect(m_configHelper.getValueFromDesiredConfigurations(c,"hdfs-site","dfs.namenode.http-address.ha.nn2")).andReturn("H2:50070").anyTimes();
  replay(m_configHelper);
  MasterHostResolver mhr=new BadMasterHostResolver(m_configHelper,c,version);
  HostsType ht=mhr.getMasterAndHosts("HDFS","NAMENODE");
  assertNotNull(ht.master);
  assertNotNull(ht.secondary);
  assertEquals(2,ht.hosts.size());
  assertTrue(ht.hosts.contains("h1"));
  assertTrue(ht.hosts.contains("h2"));
}
