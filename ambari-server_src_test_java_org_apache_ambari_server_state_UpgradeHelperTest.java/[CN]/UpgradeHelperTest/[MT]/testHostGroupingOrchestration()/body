{
  Clusters clusters=injector.getInstance(Clusters.class);
  ServiceFactory serviceFactory=injector.getInstance(ServiceFactory.class);
  String clusterName="c1";
  StackId stackId=new StackId("HDP-2.1.1");
  StackId stackId2=new StackId("HDP-2.2.0");
  clusters.addCluster(clusterName,stackId);
  Cluster c=clusters.getCluster(clusterName);
  helper.getOrCreateRepositoryVersion(stackId,c.getDesiredStackVersion().getStackVersion());
  helper.getOrCreateRepositoryVersion(stackId2,"2.2.0");
  c.createClusterVersion(stackId,c.getDesiredStackVersion().getStackVersion(),"admin",RepositoryVersionState.INSTALLING);
  for (int i=0; i < 2; i++) {
    String hostName="h" + (i + 1);
    clusters.addHost(hostName);
    Host host=clusters.getHost(hostName);
    Map<String,String> hostAttributes=new HashMap<String,String>();
    hostAttributes.put("os_family","redhat");
    hostAttributes.put("os_release_version","6");
    host.setHostAttributes(hostAttributes);
    clusters.mapHostToCluster(hostName,clusterName);
  }
  c.addService(serviceFactory.createNew(c,"ZOOKEEPER"));
  Service s=c.getService("ZOOKEEPER");
  ServiceComponent sc=s.addServiceComponent("ZOOKEEPER_SERVER");
  ServiceComponentHost sch1=sc.addServiceComponentHost("h1");
  ServiceComponentHost sch2=sc.addServiceComponentHost("h2");
  UpgradePack upgradePack=new UpgradePack(){
    @Override public List<Grouping> getGroups(    Direction direction){
      HostOrderItem hostItem=new HostOrderItem(HostOrderActionType.HOST_UPGRADE,Lists.newArrayList("h1","h2"));
      HostOrderItem checkItem=new HostOrderItem(HostOrderActionType.SERVICE_CHECK,Lists.newArrayList("ZOOKEEPER","STORM"));
      Grouping g=new HostOrderGrouping();
      ((HostOrderGrouping)g).setHostOrderItems(Lists.newArrayList(hostItem,checkItem));
      g.title="Some Title";
      return Lists.newArrayList(g);
    }
    @Override public Map<String,Map<String,ProcessingComponent>> getTasks(){
      return new HashMap<>();
    }
  }
;
  MasterHostResolver resolver=new MasterHostResolver(m_configHelper,c);
  UpgradeContext context=new UpgradeContext(c,UpgradeType.HOST_ORDERED,Direction.UPGRADE,new HashMap<String,Object>());
  context.setResolver(resolver);
  context.setSourceAndTargetStacks(stackId,stackId2);
  context.setVersion("2.2.0");
  List<UpgradeGroupHolder> groups=m_upgradeHelper.createSequence(upgradePack,context);
  assertEquals(1,groups.size());
  UpgradeGroupHolder holder=groups.get(0);
  assertEquals(7,holder.items.size());
  for (int i=0; i < 6; i++) {
    StageWrapper w=holder.items.get(i);
    if (i == 0 || i == 3) {
      assertEquals(StageWrapper.Type.STOP,w.getType());
    }
 else     if (i == 1 || i == 4) {
      assertEquals(StageWrapper.Type.SERVER_SIDE_ACTION,w.getType());
      assertEquals(1,w.getTasks().size());
      assertEquals(1,w.getTasks().get(0).getTasks().size());
      Task t=w.getTasks().get(0).getTasks().get(0);
      assertEquals(ManualTask.class,t.getClass());
      ManualTask mt=(ManualTask)t;
      assertNotNull(mt.structuredOut);
      assertTrue(mt.structuredOut.contains("type"));
      assertTrue(mt.structuredOut.contains(HostOrderItem.HostOrderActionType.HOST_UPGRADE.toString()));
      assertTrue(mt.structuredOut.contains("host"));
      assertTrue(mt.structuredOut.contains(i == 1 ? "h1" : "h2"));
    }
 else {
      assertEquals(StageWrapper.Type.RESTART,w.getType());
    }
  }
  assertEquals(StageWrapper.Type.SERVICE_CHECK,holder.items.get(6).getType());
  sch1.setVersion("2.1.1");
  sch2.setVersion("2.1.1");
  resolver=new MasterHostResolver(m_configHelper,c,"2.1.1");
  context=new UpgradeContext(c,UpgradeType.HOST_ORDERED,Direction.DOWNGRADE,new HashMap<String,Object>());
  context.setResolver(resolver);
  context.setSourceAndTargetStacks(stackId2,stackId);
  context.setVersion("2.1.1");
  groups=m_upgradeHelper.createSequence(upgradePack,context);
  assertEquals(1,groups.size());
  assertEquals(1,groups.get(0).items.size());
  sch1.setVersion("2.1.1");
  sch2.setVersion("2.2.0");
  resolver=new MasterHostResolver(m_configHelper,c,"2.1.1");
  context=new UpgradeContext(c,UpgradeType.HOST_ORDERED,Direction.DOWNGRADE,new HashMap<String,Object>());
  context.setResolver(resolver);
  context.setSourceAndTargetStacks(stackId2,stackId);
  context.setVersion("2.1.1");
  groups=m_upgradeHelper.createSequence(upgradePack,context);
  assertEquals(1,groups.size());
  assertEquals(4,groups.get(0).items.size());
}
