{
  Clusters clusters=injector.getInstance(Clusters.class);
  ServiceFactory serviceFactory=injector.getInstance(ServiceFactory.class);
  String clusterName="c1";
  clusters.addCluster(clusterName);
  Cluster c=clusters.getCluster(clusterName);
  c.setDesiredStackVersion(new StackId("HDP-2.1.1"));
  c.createClusterVersion(c.getDesiredStackVersion().getStackName(),c.getDesiredStackVersion().getStackVersion(),"admin",RepositoryVersionState.CURRENT);
  for (int i=0; i < 3; i++) {
    String hostName="h" + (i + 1);
    clusters.addHost(hostName);
    Host host=clusters.getHost(hostName);
    Map<String,String> hostAttributes=new HashMap<String,String>();
    hostAttributes.put("os_family","redhat");
    hostAttributes.put("os_release_version","6");
    host.setHostAttributes(hostAttributes);
    host.persist();
    clusters.mapHostToCluster(hostName,clusterName);
  }
  c.addService(serviceFactory.createNew(c,"HDFS"));
  c.addService(serviceFactory.createNew(c,"YARN"));
  c.addService(serviceFactory.createNew(c,"ZOOKEEPER"));
  Service s=c.getService("HDFS");
  ServiceComponent sc=s.addServiceComponent("NAMENODE");
  sc.addServiceComponentHost("h1");
  sc.addServiceComponentHost("h2");
  sc=s.addServiceComponent("DATANODE");
  sc.addServiceComponentHost("h2");
  sc.addServiceComponentHost("h3");
  s=c.getService("ZOOKEEPER");
  sc=s.addServiceComponent("ZOOKEEPER_SERVER");
  sc.addServiceComponentHost("h1");
  sc.addServiceComponentHost("h2");
  sc.addServiceComponentHost("h3");
  s=c.getService("YARN");
  sc=s.addServiceComponent("RESOURCEMANAGER");
  sc.addServiceComponentHost("h2");
  sc=s.addServiceComponent("NODEMANAGER");
  sc.addServiceComponentHost("h1");
  sc.addServiceComponentHost("h3");
  return c;
}
