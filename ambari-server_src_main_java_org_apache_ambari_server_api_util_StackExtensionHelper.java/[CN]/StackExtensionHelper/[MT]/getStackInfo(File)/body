{
  StackInfo stackInfo=new StackInfo();
  stackInfo.setName(stackVersionFolder.getParentFile().getName());
  stackInfo.setVersion(stackVersionFolder.getName());
  File stackMetainfoFile=new File(stackVersionFolder.getAbsolutePath() + File.separator + AmbariMetaInfo.STACK_METAINFO_FILE_NAME);
  if (stackMetainfoFile.exists()) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Reading stack version metainfo from file " + stackMetainfoFile.getAbsolutePath());
    }
    StackMetainfoXml smx=unmarshal(StackMetainfoXml.class,stackMetainfoFile);
    stackInfo.setMinUpgradeVersion(smx.getVersion().getUpgrade());
    stackInfo.setActive(smx.getVersion().isActive());
    stackInfo.setParentStackVersion(smx.getExtends());
    String hooksSubPath=stackInfo.getName() + File.separator + stackInfo.getVersion()+ File.separator+ HOOKS_FOLDER_NAME;
    String hooksAbsPath=stackVersionFolder.getAbsolutePath() + File.separator + HOOKS_FOLDER_NAME;
    if (new File(hooksAbsPath).exists()) {
      stackInfo.setStackHooksFolder(hooksSubPath);
    }
 else {
      String message=String.format("Hooks folder %s does not exist",hooksAbsPath);
      LOG.debug(message);
    }
    String rcoFileLocation=stackVersionFolder.getAbsolutePath() + File.separator + AmbariMetaInfo.RCO_FILE_NAME;
    if (new File(rcoFileLocation).exists())     stackInfo.setRcoFileLocation(rcoFileLocation);
  }
  try {
    populateServicesForStack(stackInfo);
  }
 catch (  Exception e) {
    LOG.error("Exception caught while populating services for stack: " + stackInfo.getName() + "-"+ stackInfo.getVersion());
    e.printStackTrace();
  }
  return stackInfo;
}
