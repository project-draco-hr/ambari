{
  ServiceInfo mergedServiceInfo=new ServiceInfo();
  mergedServiceInfo.setSchemaVersion(childService.getSchemaVersion());
  mergedServiceInfo.setName(childService.getName());
  mergedServiceInfo.setComment(childService.getComment() != null ? childService.getComment() : parentService.getComment());
  mergedServiceInfo.setVersion(childService.getVersion());
  mergedServiceInfo.setDisplayName(childService.getDisplayName() != null ? childService.getDisplayName() : parentService.getDisplayName());
  mergedServiceInfo.setConfigDependencies(childService.getConfigDependencies() != null ? childService.getConfigDependencies() : parentService.getConfigDependencies() != null ? parentService.getConfigDependencies() : Collections.<String>emptyList());
  mergedServiceInfo.setExcludedConfigTypes(childService.getExcludedConfigTypes() != null ? childService.getExcludedConfigTypes() : parentService.getExcludedConfigTypes() != null ? parentService.getExcludedConfigTypes() : Collections.<String>emptySet());
  mergedServiceInfo.setRequiredServices(childService.getRequiredServices() != null ? childService.getRequiredServices() : parentService.getRequiredServices() != null ? parentService.getRequiredServices() : Collections.<String>emptyList());
  mergedServiceInfo.setRestartRequiredAfterChange((childService.isRestartRequiredAfterChange() != null) ? childService.isRestartRequiredAfterChange() : parentService.isRestartRequiredAfterChange());
  mergedServiceInfo.setMonitoringService((childService.isMonitoringService() != null) ? childService.isMonitoringService() : parentService.isMonitoringService());
  Map<String,ServiceOsSpecific> osSpecific=childService.getOsSpecifics();
  if (!osSpecific.isEmpty()) {
    mergedServiceInfo.setOsSpecifics(childService.getOsSpecifics());
  }
 else {
    mergedServiceInfo.setOsSpecifics(parentService.getOsSpecifics());
  }
  mergedServiceInfo.setConfigTypes(new HashMap<String,Map<String,Map<String,String>>>());
  if (childService.getConfigTypes() != null) {
    mergedServiceInfo.getConfigTypes().putAll(childService.getConfigTypes());
  }
  if (parentService.getConfigTypes() != null) {
    mergedServiceInfo.getConfigTypes().putAll(parentService.getConfigTypes());
  }
  CommandScriptDefinition commandScript=childService.getCommandScript();
  if (commandScript != null) {
    mergedServiceInfo.setCommandScript(childService.getCommandScript());
  }
 else {
    mergedServiceInfo.setCommandScript(parentService.getCommandScript());
  }
  String servicePackageFolder=childService.getServicePackageFolder();
  if (servicePackageFolder != null) {
    mergedServiceInfo.setServicePackageFolder(servicePackageFolder);
  }
 else {
    mergedServiceInfo.setServicePackageFolder(parentService.getServicePackageFolder());
  }
  List<CustomCommandDefinition> mergedCustomCommands=mergeCustomCommandLists(parentService.getCustomCommands(),childService.getCustomCommands());
  mergedServiceInfo.setCustomCommands(mergedCustomCommands);
  if (null != childService.getMetricsFile())   mergedServiceInfo.setMetricsFile(childService.getMetricsFile());
 else   if (null != parentService.getMetricsFile())   mergedServiceInfo.setMetricsFile(parentService.getMetricsFile());
  if (null != childService.getAlertsFile())   mergedServiceInfo.setAlertsFile(childService.getAlertsFile());
 else   if (null != parentService.getAlertsFile())   mergedServiceInfo.setAlertsFile(parentService.getAlertsFile());
  populateComponents(mergedServiceInfo,parentService,childService);
  mergeProperties(childService.getProperties(),parentService.getProperties(),mergedServiceInfo.getProperties());
  if (parentService.getConfigDependencies() != null && !parentService.getConfigDependencies().isEmpty()) {
    for (    String configDep : parentService.getConfigDependencies()) {
      if (!mergedServiceInfo.getConfigDependencies().contains(configDep)) {
        mergedServiceInfo.getConfigDependencies().add(configDep);
      }
    }
  }
  return mergedServiceInfo;
}
