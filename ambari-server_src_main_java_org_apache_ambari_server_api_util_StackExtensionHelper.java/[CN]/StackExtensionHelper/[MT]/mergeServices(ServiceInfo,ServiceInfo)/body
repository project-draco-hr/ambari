{
  ServiceInfo mergedServiceInfo=new ServiceInfo();
  mergedServiceInfo.setSchemaVersion(childService.getSchemaVersion());
  mergedServiceInfo.setName(childService.getName());
  mergedServiceInfo.setComment(childService.getComment());
  mergedServiceInfo.setVersion(childService.getVersion());
  mergedServiceInfo.setDisplayName(childService.getDisplayName() != null ? childService.getDisplayName() : parentService.getDisplayName());
  mergedServiceInfo.setConfigDependencies(childService.getConfigDependencies() != null ? childService.getConfigDependencies() : parentService.getConfigDependencies() != null ? parentService.getConfigDependencies() : Collections.<String>emptyList());
  mergedServiceInfo.setExcludedConfigTypes(childService.getExcludedConfigTypes() != null ? childService.getExcludedConfigTypes() : parentService.getExcludedConfigTypes() != null ? parentService.getExcludedConfigTypes() : Collections.<String>emptySet());
  mergedServiceInfo.setRequiredServices(childService.getRequiredServices() != null ? childService.getRequiredServices() : parentService.getRequiredServices() != null ? parentService.getRequiredServices() : Collections.<String>emptyList());
  mergedServiceInfo.setRestartRequiredAfterChange((childService.isRestartRequiredAfterChange() != null) ? childService.isRestartRequiredAfterChange() : parentService.isRestartRequiredAfterChange());
  mergedServiceInfo.setMonitoringService((childService.isMonitoringService() != null) ? childService.isMonitoringService() : parentService.isMonitoringService());
  Map<String,ServiceOsSpecific> osSpecific=childService.getOsSpecifics();
  if (!osSpecific.isEmpty()) {
    mergedServiceInfo.setOsSpecifics(childService.getOsSpecifics());
  }
 else {
    mergedServiceInfo.setOsSpecifics(parentService.getOsSpecifics());
  }
  mergedServiceInfo.setConfigTypes(new HashMap<String,Map<String,Map<String,String>>>());
  if (childService.getConfigTypes() != null) {
    mergedServiceInfo.getConfigTypes().putAll(childService.getConfigTypes());
  }
  if (parentService.getConfigTypes() != null) {
    mergedServiceInfo.getConfigTypes().putAll(parentService.getConfigTypes());
  }
  CommandScriptDefinition commandScript=childService.getCommandScript();
  if (commandScript != null) {
    mergedServiceInfo.setCommandScript(childService.getCommandScript());
  }
 else {
    mergedServiceInfo.setCommandScript(parentService.getCommandScript());
  }
  String servicePackageFolder=childService.getServicePackageFolder();
  if (servicePackageFolder != null) {
    mergedServiceInfo.setServicePackageFolder(servicePackageFolder);
  }
 else {
    mergedServiceInfo.setServicePackageFolder(parentService.getServicePackageFolder());
  }
  List<CustomCommandDefinition> mergedCustomCommands=mergeCustomCommandLists(parentService.getCustomCommands(),childService.getCustomCommands());
  mergedServiceInfo.setCustomCommands(mergedCustomCommands);
  if (null == childService.getMetricsFile() && null != parentService.getMetricsFile())   mergedServiceInfo.setMetricsFile(parentService.getMetricsFile());
  if (null == childService.getAlertsFile() && null != parentService.getAlertsFile())   mergedServiceInfo.setAlertsFile(parentService.getAlertsFile());
  populateComponents(mergedServiceInfo,parentService,childService);
  Map<String,Set<String>> deleteMap=new HashMap<String,Set<String>>();
  Map<String,Set<String>> appendMap=new HashMap<String,Set<String>>();
  for (  PropertyInfo propertyInfo : childService.getProperties()) {
    if (!propertyInfo.isDeleted()) {
      mergedServiceInfo.getProperties().add(propertyInfo);
      if (appendMap.containsKey(propertyInfo.getName())) {
        appendMap.get(propertyInfo.getName()).add(propertyInfo.getFilename());
      }
 else {
        Set<String> filenames=new HashSet<String>();
        filenames.add(propertyInfo.getFilename());
        appendMap.put(propertyInfo.getName(),filenames);
      }
    }
 else {
      if (deleteMap.containsKey(propertyInfo.getName())) {
        deleteMap.get(propertyInfo.getName()).add(propertyInfo.getFilename());
      }
 else {
        Set<String> filenames=new HashSet<String>();
        filenames.add(propertyInfo.getFilename());
        deleteMap.put(propertyInfo.getName(),filenames);
      }
    }
  }
  for (  PropertyInfo parentPropertyInfo : parentService.getProperties()) {
    if (!deleteMap.containsKey(parentPropertyInfo.getName()) && !(appendMap.containsKey(parentPropertyInfo.getName()) && appendMap.get(parentPropertyInfo.getName()).contains(parentPropertyInfo.getFilename()))) {
      mergedServiceInfo.getProperties().add(parentPropertyInfo);
    }
  }
  if (parentService.getConfigDependencies() != null && !parentService.getConfigDependencies().isEmpty()) {
    for (    String configDep : parentService.getConfigDependencies()) {
      if (!mergedServiceInfo.getConfigDependencies().contains(configDep)) {
        mergedServiceInfo.getConfigDependencies().add(configDep);
      }
    }
  }
  return mergedServiceInfo;
}
