{
  Map<String,Set<String>> deleteMap=new HashMap<String,Set<String>>();
  Map<String,Set<String>> appendMap=new HashMap<String,Set<String>>();
  for (  PropertyInfo propertyInfo : childProperties) {
    if (!propertyInfo.isDeleted()) {
      mergedProperties.add(propertyInfo);
      if (appendMap.containsKey(propertyInfo.getName())) {
        appendMap.get(propertyInfo.getName()).add(propertyInfo.getFilename());
      }
 else {
        Set<String> filenames=new HashSet<String>();
        filenames.add(propertyInfo.getFilename());
        appendMap.put(propertyInfo.getName(),filenames);
      }
    }
 else {
      if (deleteMap.containsKey(propertyInfo.getName())) {
        deleteMap.get(propertyInfo.getName()).add(propertyInfo.getFilename());
      }
 else {
        Set<String> filenames=new HashSet<String>();
        filenames.add(propertyInfo.getFilename());
        deleteMap.put(propertyInfo.getName(),filenames);
      }
    }
  }
  for (  PropertyInfo parentPropertyInfo : parentProperties) {
    String configType=ConfigHelper.fileNameToConfigType(parentPropertyInfo.getFilename());
    boolean disableInherit=false;
    if (childConfigTypes.containsKey(configType)) {
      disableInherit=childConfigTypes.get(configType).get(Supports.KEYWORD).get(Supports.DO_NOT_EXTEND.getPropertyName()).equals("true");
    }
    if (!deleteMap.containsKey(parentPropertyInfo.getName()) && !(appendMap.containsKey(parentPropertyInfo.getName()) && appendMap.get(parentPropertyInfo.getName()).contains(parentPropertyInfo.getFilename())) && !disableInherit) {
      mergedProperties.add(parentPropertyInfo);
    }
  }
}
