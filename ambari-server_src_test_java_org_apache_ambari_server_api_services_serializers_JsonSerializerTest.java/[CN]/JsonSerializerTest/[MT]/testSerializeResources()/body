{
  UriInfo uriInfo=createMock(UriInfo.class);
  Resource resource=createMock(Resource.class);
  Result result=new ResultImpl(true);
  result.setResultStatus(new ResultStatus(ResultStatus.STATUS.OK));
  TreeNode<Resource> tree=result.getResultTree();
  TreeNode<Resource> resourcesNode=tree.addChild(null,"resources");
  resourcesNode.addChild(resource,"resource1");
  HashMap<String,Object> mapRootProps=new HashMap<String,Object>();
  mapRootProps.put("prop1","value1");
  mapRootProps.put("prop2","value2");
  HashMap<String,Object> mapCategoryProps=new HashMap<String,Object>();
  mapCategoryProps.put("catProp1","catValue1");
  mapCategoryProps.put("catProp2","catValue2");
  Map<String,Map<String,Object>> propertyMap=new HashMap<String,Map<String,Object>>();
  propertyMap.put(null,mapRootProps);
  propertyMap.put("category",mapCategoryProps);
  expect(resource.getPropertiesMap()).andReturn(propertyMap).anyTimes();
  expect(resource.getType()).andReturn(Resource.Type.Cluster).anyTimes();
  replay(uriInfo,resource);
  Object o=new JsonSerializer().serialize(result,false);
  String expected="{\n" + "  \"resources\" : [\n" + "    {\n"+ "      \"prop2\" : \"value2\",\n"+ "      \"prop1\" : \"value1\",\n"+ "      \"category\" : {\n"+ "        \"catProp1\" : \"catValue1\",\n"+ "        \"catProp2\" : \"catValue2\"\n"+ "      }\n"+ "    }\n"+ "  ]\n"+ "}";
  assertEquals(expected,o);
  verify(uriInfo,resource);
}
