def wait_procs(procs, timeout=None, callback=None):
    'Convenience function which waits for a list of processes to\n    terminate.\n\n    Return a (gone, alive) tuple indicating which processes\n    are gone and which ones are still alive.\n\n    The gone ones will have a new \'returncode\' attribute indicating\n    process exit status (may be None).\n\n    \'callback\' is a function which gets called every time a process\n    terminates (a Process instance is passed as callback argument).\n\n    Function will return as soon as all processes terminate or when\n    timeout occurs.\n\n    Typical use case is:\n\n     - send SIGTERM to a list of processes\n     - give them some time to terminate\n     - send SIGKILL to those ones which are still alive\n\n    Example:\n\n    >>> def on_terminate(proc):\n    ...     print("process {} terminated".format(proc))\n    ...\n    >>> for p in procs:\n    ...    p.terminate()\n    ...\n    >>> gone, alive = wait_procs(procs, timeout=3, callback=on_terminate)\n    >>> for p in alive:\n    ...     p.kill()\n    '

    def check_gone(proc, timeout):
        try:
            returncode = proc.wait(timeout=timeout)
        except TimeoutExpired:
            pass
        else:
            if ((returncode is not None) or (not proc.is_running())):
                proc.returncode = returncode
                gone.add(proc)
                if (callback is not None):
                    callback(proc)
    if ((timeout is not None) and (not (timeout >= 0))):
        msg = ('timeout must be a positive integer, got %s' % timeout)
        raise ValueError(msg)
    gone = set()
    alive = set(procs)
    if ((callback is not None) and (not callable(callback))):
        raise TypeError(('callback %r is not a callable' % callable))
    if (timeout is not None):
        deadline = (_timer() + timeout)
    while alive:
        if ((timeout is not None) and (timeout <= 0)):
            break
        for proc in alive:
            max_timeout = (1.0 / len(alive))
            if (timeout is not None):
                timeout = min((deadline - _timer()), max_timeout)
                if (timeout <= 0):
                    break
                check_gone(proc, timeout)
            else:
                check_gone(proc, max_timeout)
        alive = (alive - gone)
    if alive:
        for proc in alive:
            check_gone(proc, 0)
        alive = (alive - gone)
    return (list(gone), list(alive))
