def memory_maps(self, grouped=True):
    "Return process' mapped memory regions as a list of nameduples\n        whose fields are variable depending on the platform.\n\n        If 'grouped' is True the mapped regions with the same 'path'\n        are grouped together and the different memory fields are summed.\n\n        If 'grouped' is False every mapped region is shown as a single\n        entity and the namedtuple will also include the mapped region's\n        address space ('addr') and permission set ('perms').\n        "
    it = self._proc.memory_maps()
    if grouped:
        d = {}
        for tupl in it:
            path = tupl[2]
            nums = tupl[3:]
            try:
                d[path] = map((lambda x, y: (x + y)), d[path], nums)
            except KeyError:
                d[path] = nums
        nt = _psplatform.pmmap_grouped
        return [nt(path, *d[path]) for path in d]
    else:
        nt = _psplatform.pmmap_ext
        return [nt(*x) for x in it]
