{
synchronized (this) {
    if (database.equals("none")) {
      logStore=nullStore;
      LOG.info("database set to 'none'");
    }
 else {
      try {
        LOG.info("Connecting to database " + database + " as user "+ user+ " password "+ password+ " and driver "+ driver);
        logStore=new DatabaseStore(driver,database,user,password,new MapReduceJobHistoryUpdater());
      }
 catch (      IOException ioe) {
        LOG.info("Failed to connect to db " + database,ioe);
        System.err.println("Failed to connect to db " + database + " as user "+ user+ " password "+ password+ " and driver "+ driver+ " with "+ StringUtils.stringifyException(ioe));
        throw new RuntimeException("Failed to create database store for " + database,ioe);
      }
catch (      Exception e) {
        LOG.info("Failed to connect to db " + database,e);
        System.err.println("Failed to connect to db " + database + " as user "+ user+ " password "+ password+ " and driver "+ driver+ " with "+ StringUtils.stringifyException(e));
        throw new RuntimeException("Failed to create database store for " + database,e);
      }
    }
    logThreadRunnable=new LoggingThreadRunnable(events,logParser,logStore);
    logThread=new Thread(logThreadRunnable);
    logThread.start();
    super.activateOptions();
  }
}
