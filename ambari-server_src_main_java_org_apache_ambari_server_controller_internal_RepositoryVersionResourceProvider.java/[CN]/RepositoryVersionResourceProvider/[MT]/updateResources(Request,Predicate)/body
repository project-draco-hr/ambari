{
  final Set<Map<String,Object>> propertyMaps=request.getProperties();
  modifyResources(new Command<Void>(){
    @Override public Void invoke() throws AmbariException {
      for (      Map<String,Object> propertyMap : propertyMaps) {
        final Long id;
        try {
          id=Long.parseLong(propertyMap.get(REPOSITORY_VERSION_ID_PROPERTY_ID).toString());
        }
 catch (        Exception ex) {
          throw new AmbariException("Repository version should have numerical id");
        }
        final RepositoryVersionEntity entity=repositoryVersionDAO.findByPK(id);
        if (entity == null) {
          throw new ObjectNotFoundException("There is no repository version with id " + id);
        }
        StackEntity stackEntity=entity.getStack();
        String stackName=stackEntity.getStackName();
        String stackVersion=stackEntity.getStackVersion();
        final List<ClusterVersionEntity> clusterVersionEntities=clusterVersionDAO.findByStackAndVersion(stackName,stackVersion,entity.getVersion());
        if (!clusterVersionEntities.isEmpty()) {
          final ClusterVersionEntity firstClusterVersion=clusterVersionEntities.get(0);
          throw new AmbariException("Upgrade pack can't be changed for repository version which has a state of " + firstClusterVersion.getState().name() + " on cluster "+ firstClusterVersion.getClusterEntity().getClusterName());
        }
        List<OperatingSystemEntity> operatingSystemEntities=null;
        if (StringUtils.isNotBlank(ObjectUtils.toString(propertyMap.get(SUBRESOURCE_OPERATING_SYSTEMS_PROPERTY_ID)))) {
          final Object operatingSystems=propertyMap.get(SUBRESOURCE_OPERATING_SYSTEMS_PROPERTY_ID);
          final String operatingSystemsJson=gson.toJson(operatingSystems);
          try {
            operatingSystemEntities=repositoryVersionHelper.parseOperatingSystems(operatingSystemsJson);
          }
 catch (          Exception ex) {
            throw new AmbariException("Json structure for operating systems is incorrect",ex);
          }
          entity.setOperatingSystems(operatingSystemsJson);
        }
        if (StringUtils.isNotBlank(ObjectUtils.toString(propertyMap.get(REPOSITORY_VERSION_DISPLAY_NAME_PROPERTY_ID)))) {
          entity.setDisplayName(propertyMap.get(REPOSITORY_VERSION_DISPLAY_NAME_PROPERTY_ID).toString());
        }
        validateRepositoryVersion(entity);
        repositoryVersionDAO.merge(entity);
        if (operatingSystemEntities != null) {
          String entityStackName=entity.getStackName();
          String entityStackVersion=entity.getStackVersion();
          for (          OperatingSystemEntity osEntity : operatingSystemEntities) {
            List<RepositoryEntity> repositories=osEntity.getRepositories();
            for (            RepositoryEntity repository : repositories) {
              ambariMetaInfo.updateRepoBaseURL(entityStackName,entityStackVersion,osEntity.getOsType(),repository.getRepositoryId(),repository.getBaseUrl());
            }
          }
        }
      }
      return null;
    }
  }
);
  return getRequestStatus(null);
}
