{
  final Set<Map<String,Object>> propertyMaps=request.getProperties();
  modifyResources(new Command<Void>(){
    @Override public Void invoke() throws AmbariException {
      for (      Map<String,Object> propertyMap : propertyMaps) {
        final Long id;
        try {
          id=Long.parseLong(propertyMap.get(REPOSITORY_VERSION_ID_PROPERTY_ID).toString());
        }
 catch (        Exception ex) {
          throw new AmbariException("Repository version should have numerical id");
        }
        final RepositoryVersionEntity entity=repositoryVersionDAO.findByPK(id);
        if (entity == null) {
          throw new ObjectNotFoundException("There is no repository version with id " + id);
        }
        if (propertyMap.get(REPOSITORY_VERSION_OPERATING_SYSTEMS_PROPERTY_ID) != null) {
          final List<ClusterVersionEntity> clusterVersionEntities=clusterVersionDAO.findByStackAndVersion(entity.getStack(),entity.getVersion());
          if (!clusterVersionEntities.isEmpty()) {
            final ClusterVersionEntity firstClusterVersion=clusterVersionEntities.get(0);
            throw new AmbariException("Repository version can't be updated as it is " + firstClusterVersion.getState().name() + " on cluster "+ firstClusterVersion.getClusterEntity().getClusterName());
          }
          if (propertyMap.get(REPOSITORY_VERSION_OPERATING_SYSTEMS_PROPERTY_ID) != null) {
            final Object repositories=propertyMap.get(REPOSITORY_VERSION_OPERATING_SYSTEMS_PROPERTY_ID);
            entity.setOperatingSystems(gson.toJson(repositories));
          }
        }
        if (propertyMap.get(REPOSITORY_VERSION_DISPLAY_NAME_PROPERTY_ID) != null) {
          entity.setDisplayName(propertyMap.get(REPOSITORY_VERSION_DISPLAY_NAME_PROPERTY_ID).toString());
        }
        validateRepositoryVersion(entity);
        repositoryVersionDAO.merge(entity);
      }
      return null;
    }
  }
);
  return getRequestStatus(null);
}
