{
  final Set<Map<String,Object>> propertyMaps=request.getProperties();
  modifyResources(new Command<Void>(){
    @Override public Void invoke() throws AmbariException {
      for (      Map<String,Object> propertyMap : propertyMaps) {
        final Long id;
        try {
          id=Long.parseLong(propertyMap.get(REPOSITORY_VERSION_ID_PROPERTY_ID).toString());
        }
 catch (        Exception ex) {
          throw new AmbariException("Repository version should have numerical id");
        }
        final RepositoryVersionEntity entity=repositoryVersionDAO.findByPK(id);
        if (entity == null) {
          throw new ObjectNotFoundException("There is no repository version with id " + id);
        }
        if (StringUtils.isNotBlank(ObjectUtils.toString(propertyMap.get(REPOSITORY_VERSION_UPGRADE_PACK_PROPERTY_ID)))) {
          StackEntity stackEntity=entity.getStack();
          String stackName=stackEntity.getStackName();
          String stackVersion=stackEntity.getStackVersion();
          final List<ClusterVersionEntity> clusterVersionEntities=clusterVersionDAO.findByStackAndVersion(stackName,stackVersion,entity.getVersion());
          if (!clusterVersionEntities.isEmpty()) {
            final ClusterVersionEntity firstClusterVersion=clusterVersionEntities.get(0);
            throw new AmbariException("Upgrade pack can't be changed for repository version which is " + firstClusterVersion.getState().name() + " on cluster "+ firstClusterVersion.getClusterEntity().getClusterName());
          }
          final String upgradePackage=propertyMap.get(REPOSITORY_VERSION_UPGRADE_PACK_PROPERTY_ID).toString();
          entity.setUpgradePackage(upgradePackage);
        }
        if (StringUtils.isNotBlank(ObjectUtils.toString(propertyMap.get(SUBRESOURCE_OPERATING_SYSTEMS_PROPERTY_ID)))) {
          final Object operatingSystems=propertyMap.get(SUBRESOURCE_OPERATING_SYSTEMS_PROPERTY_ID);
          final String operatingSystemsJson=gson.toJson(operatingSystems);
          try {
            repositoryVersionHelper.parseOperatingSystems(operatingSystemsJson);
          }
 catch (          Exception ex) {
            throw new AmbariException("Json structure for operating systems is incorrect",ex);
          }
          entity.setOperatingSystems(operatingSystemsJson);
        }
        if (StringUtils.isNotBlank(ObjectUtils.toString(propertyMap.get(REPOSITORY_VERSION_DISPLAY_NAME_PROPERTY_ID)))) {
          entity.setDisplayName(propertyMap.get(REPOSITORY_VERSION_DISPLAY_NAME_PROPERTY_ID).toString());
        }
        validateRepositoryVersion(entity);
        repositoryVersionDAO.merge(entity);
      }
      return null;
    }
  }
);
  return getRequestStatus(null);
}
