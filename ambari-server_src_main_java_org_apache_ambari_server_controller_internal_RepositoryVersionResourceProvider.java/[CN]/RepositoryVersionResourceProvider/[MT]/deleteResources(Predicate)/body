{
  final Set<Map<String,Object>> propertyMaps=getPropertyMaps(predicate);
  final List<RepositoryVersionEntity> entitiesToBeRemoved=new ArrayList<RepositoryVersionEntity>();
  for (  Map<String,Object> propertyMap : propertyMaps) {
    final Long id;
    try {
      id=Long.parseLong(propertyMap.get(REPOSITORY_VERSION_ID_PROPERTY_ID).toString());
    }
 catch (    Exception ex) {
      throw new SystemException("Repository version should have numerical id");
    }
    final RepositoryVersionEntity entity=repositoryVersionDAO.findByPK(id);
    if (entity == null) {
      throw new NoSuchResourceException("There is no repository version with id " + id);
    }
    final List<ClusterVersionEntity> clusterVersionEntities=clusterVersionDAO.findByStackAndVersion(entity.getStack(),entity.getVersion());
    if (!clusterVersionEntities.isEmpty()) {
      final ClusterVersionEntity firstClusterVersion=clusterVersionEntities.get(0);
      throw new SystemException("Repository version can't be deleted as it is " + firstClusterVersion.getState().name() + " on cluster "+ firstClusterVersion.getClusterEntity().getClusterName());
    }
    entitiesToBeRemoved.add(entity);
  }
  for (  RepositoryVersionEntity entity : entitiesToBeRemoved) {
    repositoryVersionDAO.remove(entity);
  }
  return getRequestStatus(null);
}
