{
  final RepositoryVersionEntity entity=new RepositoryVersionEntity();
  final String stackName=properties.get(REPOSITORY_VERSION_STACK_NAME_PROPERTY_ID).toString();
  final String stackVersion=properties.get(REPOSITORY_VERSION_STACK_VERSION_PROPERTY_ID).toString();
  StackEntity stackEntity=stackDAO.find(stackName,stackVersion);
  entity.setDisplayName(properties.get(REPOSITORY_VERSION_DISPLAY_NAME_PROPERTY_ID).toString());
  entity.setStack(stackEntity);
  entity.setVersion(properties.get(REPOSITORY_VERSION_REPOSITORY_VERSION_PROPERTY_ID).toString());
  final Object operatingSystems=properties.get(SUBRESOURCE_OPERATING_SYSTEMS_PROPERTY_ID);
  final String operatingSystemsJson=gson.toJson(operatingSystems);
  try {
    repositoryVersionHelper.parseOperatingSystems(operatingSystemsJson);
  }
 catch (  Exception ex) {
    throw new AmbariException("Json structure for operating systems is incorrect",ex);
  }
  entity.setOperatingSystems(operatingSystemsJson);
  entity.setUpgradePackage(repositoryVersionHelper.getUpgradePackageName(stackName,stackVersion,entity.getVersion()));
  List<RepositoryVersionEntity.Component> components=null;
  int i=1;
  for (  Entry<String,Object> entry : properties.entrySet()) {
    if (entry.getKey().startsWith(REPOSITORY_VERSION_COMPONENTS)) {
      if (null == components) {
        components=new ArrayList<>();
      }
      String serviceName=PropertyHelper.getPropertyName(entry.getKey());
      Collection<String> componentNames=(Collection<String>)entry.getValue();
      for (      String componentName : componentNames) {
        components.add(new RepositoryVersionEntity.Component(serviceName,componentName,i++));
      }
    }
  }
  if (null != components) {
    entity.setType(RepositoryType.PATCH);
    entity.setComponents(components);
  }
  return entity;
}
