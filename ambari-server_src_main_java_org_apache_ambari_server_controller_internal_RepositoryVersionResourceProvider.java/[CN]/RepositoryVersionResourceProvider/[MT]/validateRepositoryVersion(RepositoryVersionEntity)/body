{
  final StackId requiredStack=new StackId(repositoryVersion.getStack());
  final String stackName=requiredStack.getStackName();
  final String stackMajorVersion=requiredStack.getStackVersion();
  final String stackFullName=requiredStack.getStackId();
  final StackInfo stackInfo=ambariMetaInfo.getStack(stackName,stackMajorVersion);
  if (stackInfo.getUpgradePacks() == null) {
    throw new AmbariException("Stack " + stackFullName + " doesn't have upgrade packages");
  }
  final Set<String> osSupported=new HashSet<String>();
  for (  OperatingSystemInfo osInfo : ambariMetaInfo.getOperatingSystems(stackName,stackMajorVersion)) {
    osSupported.add(osInfo.getOsType());
  }
  final Set<String> osRepositoryVersion=new HashSet<String>();
  for (  OperatingSystemEntity os : repositoryVersion.getOperatingSystems()) {
    osRepositoryVersion.add(os.getOsType());
  }
  if (osRepositoryVersion.isEmpty()) {
    throw new AmbariException("At least one set of repositories for OS should be provided");
  }
  for (  String os : osRepositoryVersion) {
    if (!osSupported.contains(os)) {
      throw new AmbariException("Operating system type " + os + " is not supported by stack "+ stackFullName);
    }
  }
}
