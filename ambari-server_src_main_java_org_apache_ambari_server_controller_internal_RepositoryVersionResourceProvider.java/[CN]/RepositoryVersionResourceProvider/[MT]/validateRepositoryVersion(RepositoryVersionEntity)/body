{
  final StackId requiredStack=new StackId(repositoryVersion.getStack());
  final String stackName=requiredStack.getStackName();
  final String stackMajorVersion=requiredStack.getStackVersion();
  final String stackFullName=requiredStack.getStackId();
  final StackInfo stackInfo=ambariMetaInfo.getStack(stackName,stackMajorVersion);
  if (stackInfo.getUpgradePacks() == null) {
    throw new AmbariException("Stack " + stackFullName + " doesn't have upgrade packages");
  }
  Set<String> existingRepoUrls=new HashSet<String>();
  List<RepositoryVersionEntity> existingRepoVersions=repositoryVersionDAO.findByStack(requiredStack.getStackId());
  for (  RepositoryVersionEntity existingRepoVersion : existingRepoVersions) {
    for (    OperatingSystemEntity operatingSystemEntity : existingRepoVersion.getOperatingSystems()) {
      for (      RepositoryEntity repositoryEntity : operatingSystemEntity.getRepositories()) {
        if (!repositoryEntity.getRepositoryId().startsWith("HDP-UTILS") && !existingRepoVersion.getId().equals(repositoryVersion.getId())) {
          existingRepoUrls.add(repositoryEntity.getBaseUrl());
        }
      }
    }
  }
  final Set<String> osSupported=new HashSet<String>();
  for (  OperatingSystemInfo osInfo : ambariMetaInfo.getOperatingSystems(stackName,stackMajorVersion)) {
    osSupported.add(osInfo.getOsType());
  }
  final Set<String> osRepositoryVersion=new HashSet<String>();
  for (  OperatingSystemEntity os : repositoryVersion.getOperatingSystems()) {
    osRepositoryVersion.add(os.getOsType());
    for (    RepositoryEntity repositoryEntity : os.getRepositories()) {
      String baseUrl=repositoryEntity.getBaseUrl();
      if (existingRepoUrls.contains(baseUrl)) {
        throw new AmbariException("Base url " + baseUrl + " is already defined for another repository version. "+ "Setting up base urls that contain the same versions of components will cause rolling upgrade to fail.");
      }
    }
  }
  if (osRepositoryVersion.isEmpty()) {
    throw new AmbariException("At least one set of repositories for OS should be provided");
  }
  for (  String os : osRepositoryVersion) {
    if (!osSupported.contains(os)) {
      throw new AmbariException("Operating system type " + os + " is not supported by stack "+ stackFullName);
    }
  }
}
