{
  final Set<Resource> resources=new HashSet<Resource>();
  final Set<String> requestedIds=getRequestPropertyIds(request,predicate);
  final Set<Map<String,Object>> propertyMaps=getPropertyMaps(predicate);
  List<RepositoryVersionEntity> requestedEntities=new ArrayList<RepositoryVersionEntity>();
  if (propertyMaps.isEmpty()) {
    requestedEntities=repositoryVersionDAO.findAll();
  }
 else {
    for (    Map<String,Object> propertyMap : propertyMaps) {
      final Long id;
      try {
        id=Long.parseLong(propertyMap.get(REPOSITORY_VERSION_ID_PROPERTY_ID).toString());
      }
 catch (      Exception ex) {
        throw new SystemException("Repository version should have numerical id");
      }
      final RepositoryVersionEntity entity=repositoryVersionDAO.findByPK(id);
      if (entity == null) {
        throw new NoSuchResourceException("There is no repository version with id " + id);
      }
 else {
        requestedEntities.add(entity);
      }
    }
  }
  for (  RepositoryVersionEntity entity : requestedEntities) {
    final Resource resource=new ResourceImpl(Resource.Type.RepositoryVersion);
    setResourceProperty(resource,REPOSITORY_VERSION_ID_PROPERTY_ID,entity.getId(),requestedIds);
    setResourceProperty(resource,REPOSITORY_VERSION_DISPLAY_NAME_PROPERTY_ID,entity.getDisplayName(),requestedIds);
    setResourceProperty(resource,REPOSITORY_VERSION_REPOSITORIES_PROPERTY_ID,new Gson().fromJson(entity.getRepositories(),Object.class),requestedIds);
    setResourceProperty(resource,REPOSITORY_VERSION_STACK_PROPERTY_ID,entity.getStack(),requestedIds);
    setResourceProperty(resource,REPOSITORY_VERSION_UPGRADE_PACK_PROPERTY_ID,entity.getUpgradePackage(),requestedIds);
    setResourceProperty(resource,REPOSITORY_VERSION_VERSION_PROPERTY_ID,entity.getVersion(),requestedIds);
    if (predicate == null || predicate.evaluate(resource)) {
      resources.add(resource);
    }
  }
  return resources;
}
