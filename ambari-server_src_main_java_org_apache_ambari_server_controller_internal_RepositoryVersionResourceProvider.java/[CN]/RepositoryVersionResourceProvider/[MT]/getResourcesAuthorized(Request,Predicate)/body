{
  final Set<Resource> resources=new HashSet<Resource>();
  final Set<String> requestedIds=getRequestPropertyIds(request,predicate);
  final Set<Map<String,Object>> propertyMaps=getPropertyMaps(predicate);
  List<RepositoryVersionEntity> requestedEntities=new ArrayList<RepositoryVersionEntity>();
  for (  Map<String,Object> propertyMap : propertyMaps) {
    final StackId stackId=getStackInformationFromUrl(propertyMap);
    if (stackId != null && propertyMaps.size() == 1 && propertyMap.get(REPOSITORY_VERSION_ID_PROPERTY_ID) == null) {
      requestedEntities.addAll(repositoryVersionDAO.findByStack(stackId));
    }
 else {
      final Long id;
      try {
        id=Long.parseLong(propertyMap.get(REPOSITORY_VERSION_ID_PROPERTY_ID).toString());
      }
 catch (      Exception ex) {
        throw new SystemException("Repository version should have numerical id");
      }
      final RepositoryVersionEntity entity=repositoryVersionDAO.findByPK(id);
      if (entity == null) {
        throw new NoSuchResourceException("There is no repository version with id " + id);
      }
 else {
        requestedEntities.add(entity);
      }
    }
  }
  for (  RepositoryVersionEntity entity : requestedEntities) {
    final Resource resource=new ResourceImpl(Resource.Type.RepositoryVersion);
    setResourceProperty(resource,REPOSITORY_VERSION_ID_PROPERTY_ID,entity.getId(),requestedIds);
    setResourceProperty(resource,REPOSITORY_VERSION_STACK_NAME_PROPERTY_ID,entity.getStackName(),requestedIds);
    setResourceProperty(resource,REPOSITORY_VERSION_STACK_VERSION_PROPERTY_ID,entity.getStackVersion(),requestedIds);
    setResourceProperty(resource,REPOSITORY_VERSION_DISPLAY_NAME_PROPERTY_ID,entity.getDisplayName(),requestedIds);
    setResourceProperty(resource,REPOSITORY_VERSION_REPOSITORY_VERSION_PROPERTY_ID,entity.getVersion(),requestedIds);
    setResourceProperty(resource,REPOSITORY_VERSION_TYPE_PROPERTY_ID,entity.getType(),requestedIds);
    final VersionDefinitionXml xml;
    try {
      xml=entity.getRepositoryXml();
    }
 catch (    Exception e) {
      throw new SystemException(String.format("Could not load xml for Repository %s",entity.getId()),e);
    }
    if (null != xml) {
      final StackInfo stack;
      try {
        stack=ambariMetaInfo.getStack(entity.getStackName(),entity.getStackVersion());
      }
 catch (      AmbariException e) {
        throw new SystemException(String.format("Could not load stack %s for Repository %s",entity.getStackId().toString(),entity.getId()));
      }
      setResourceProperty(resource,REPOSITORY_VERSION_RELEASE_VERSION,xml.release.version,requestedIds);
      setResourceProperty(resource,REPOSITORY_VERSION_RELEASE_BUILD,xml.release.build,requestedIds);
      setResourceProperty(resource,REPOSITORY_VERSION_RELEASE_COMPATIBLE_WITH,xml.release.compatibleWith,requestedIds);
      setResourceProperty(resource,REPOSITORY_VERSION_RELEASE_NOTES,xml.release.releaseNotes,requestedIds);
      setResourceProperty(resource,REPOSITORY_VERSION_AVAILABLE_SERVICES,xml.getAvailableServices(stack),requestedIds);
    }
    resources.add(resource);
  }
  return resources;
}
