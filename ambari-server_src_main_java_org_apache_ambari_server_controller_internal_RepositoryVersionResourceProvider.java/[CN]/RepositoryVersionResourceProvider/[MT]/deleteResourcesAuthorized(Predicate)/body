{
  final Set<Map<String,Object>> propertyMaps=getPropertyMaps(predicate);
  final List<RepositoryVersionEntity> entitiesToBeRemoved=new ArrayList<RepositoryVersionEntity>();
  for (  Map<String,Object> propertyMap : propertyMaps) {
    final Long id;
    try {
      id=Long.parseLong(propertyMap.get(REPOSITORY_VERSION_ID_PROPERTY_ID).toString());
    }
 catch (    Exception ex) {
      throw new SystemException("Repository version should have numerical id");
    }
    final RepositoryVersionEntity entity=repositoryVersionDAO.findByPK(id);
    if (entity == null) {
      throw new NoSuchResourceException("There is no repository version with id " + id);
    }
    StackEntity stackEntity=entity.getStack();
    String stackName=stackEntity.getStackName();
    String stackVersion=stackEntity.getStackVersion();
    final List<ClusterVersionEntity> clusterVersionEntities=clusterVersionDAO.findByStackAndVersion(stackName,stackVersion,entity.getVersion());
    final List<RepositoryVersionState> forbiddenToDeleteStates=Lists.newArrayList(RepositoryVersionState.CURRENT,RepositoryVersionState.INSTALLED,RepositoryVersionState.INSTALLING,RepositoryVersionState.UPGRADED,RepositoryVersionState.UPGRADING);
    for (    ClusterVersionEntity clusterVersionEntity : clusterVersionEntities) {
      if (clusterVersionEntity.getRepositoryVersion().getId().equals(id) && forbiddenToDeleteStates.contains(clusterVersionEntity.getState())) {
        throw new SystemException("Repository version can't be deleted as it is " + clusterVersionEntity.getState().name() + " on cluster "+ clusterVersionEntity.getClusterEntity().getClusterName());
      }
    }
    entitiesToBeRemoved.add(entity);
  }
  for (  RepositoryVersionEntity entity : entitiesToBeRemoved) {
    repositoryVersionDAO.remove(entity);
  }
  return getRequestStatus(null);
}
