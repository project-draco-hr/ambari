def execute(configurations={}, parameters={}, host_name=None):
    '\n  Returns a tuple containing the result code and a pre-formatted result label\n\n  Keyword arguments:\n  configurations (dictionary): a mapping of configuration key to value\n  parameters (dictionary): a mapping of script parameter key to value\n  host_name (string): the name of this host where the alert is running\n  '
    if (configurations is None):
        return (RESULT_CODE_UNKNOWN, ['There were no configurations supplied to the script.'])
    if set([AMS_MONITOR_PID_DIR]).issubset(configurations):
        AMS_MONITOR_PID_PATH = os.path.join(configurations[AMS_MONITOR_PID_DIR], 'ambari-metrics-monitor.pid')
    else:
        return (RESULT_CODE_UNKNOWN, ['The ams_monitor_pid_dir is a required parameter.'])
    if (host_name is None):
        host_name = socket.getfqdn()
    ams_monitor_process_running = is_monitor_process_live(AMS_MONITOR_PID_PATH)
    alert_state = (RESULT_CODE_OK if ams_monitor_process_running else RESULT_CODE_CRITICAL)
    alert_label = ('Ambari Monitor is running on {0}' if ams_monitor_process_running else 'Ambari Monitor is NOT running on {0}')
    alert_label = alert_label.format(host_name)
    return (alert_state, [alert_label])
