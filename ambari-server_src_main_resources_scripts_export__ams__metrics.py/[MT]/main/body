def main():
    parser = optparse.OptionParser(usage='usage: %prog [options]')
    parser.set_description('This python program is a Ambari thin client and supports export of ambari metric data for an app from Ambari Metrics Service to a output dir. The metrics will be exported to a file with name of the metric and in a directory with the name as the hostname under the output dir.')
    d = datetime.datetime.now()
    time_suffix = '{0}-{1}-{2}-{3}-{4}-{5}'.format(d.year, d.month, d.day, d.hour, d.minute, d.second)
    print ('Time: %s' % time_suffix)
    logfile = os.path.join('/tmp', 'ambari_metrics_export.out')
    parser.add_option('-v', '--verbose', dest='verbose', action='store_false', default=False, help='output verbosity.')
    parser.add_option('-s', '--host', dest='server_hostname', help='AMS host name.')
    parser.add_option('-p', '--port', dest='server_port', default='6188', help='AMS port. [default: 6188]')
    parser.add_option('-a', '--app-id', dest='app_id', help='AMS app id.')
    parser.add_option('-m', '--metrics-file', dest='metrics_file', help='Metrics file with metric names to query. New line separated.')
    parser.add_option('-f', '--host-file', dest='hosts_file', help='Host file with hostnames to query. New line separated.')
    parser.add_option('-l', '--logfile', dest='log_file', default=logfile, metavar='FILE', help=('Log file. [default: %s]' % logfile))
    parser.add_option('-r', '--precision', dest='precision', default='minutes', help='AMS API precision, default = minutes.')
    parser.add_option('-b', '--start_time', dest='start_time', help='Start time in milliseconds since epoch or UTC timestamp in YYYY-MM-DDTHH:mm:ssZ format.')
    parser.add_option('-e', '--end_time', dest='end_time', help='End time in milliseconds since epoch or UTC timestamp in YYYY-MM-DDTHH:mm:ssZ format.')
    parser.add_option('-n', '--flask-server_name', dest='server_name', help='Flask server name, default = 127.0.0.1', default='127.0.0.1')
    (options, args) = parser.parse_args()
    Params.AMS_HOSTNAME = options.server_hostname
    Params.AMS_PORT = options.server_port
    Params.AMS_APP_ID = options.app_id
    Params.METRICS_FILE = options.metrics_file
    Params.HOSTS_FILE = options.hosts_file
    Params.PRECISION = options.precision
    Params.FLASK_SERVER_NAME = options.server_name
    Utils.setup_logger(options.verbose, options.log_file)
    Params.START_TIME = Utils.get_epoch(options.start_time)
    if (Params.START_TIME == (-1)):
        logger.warn('No start time provided, or it is in the wrong format. Please provide milliseconds since epoch or a value in YYYY-MM-DDTHH:mm:ssZ format')
        logger.info('Aborting...')
        sys.exit(1)
    Params.END_TIME = Utils.get_epoch(options.end_time)
    if (Params.END_TIME == (-1)):
        logger.warn('No end time provided, or it is in the wrong format. Please provide milliseconds since epoch or a value in YYYY-MM-DDTHH:mm:ssZ format')
        logger.info('Aborting...')
        sys.exit(1)
    ams_metrics_processor = AmsMetricsProcessor()
    ams_metrics_processor.process()
    FlaskServer(ams_metrics_processor)
