def main():
    parser = optparse.OptionParser(usage='usage: %prog [options]')
    parser.set_description('This python program is a Ambari thin client and supports export of ambari metric data for an app from Ambari Metrics Service to a output dir. The metrics will be exported to a file with name of the metric and in a directory with the name as the hostname under the output dir. Also this python program is a thin REST server that implements a subset of the Ambari Metrics Service metrics server interfaces. You can use it to visualize information exported by the AMS thin client')
    d = datetime.datetime.now()
    time_suffix = '{0}-{1}-{2}-{3}-{4}-{5}'.format(d.year, d.month, d.day, d.hour, d.minute, d.second)
    print ('Time: %s' % time_suffix)
    logfile = os.path.join('/tmp', 'ambari_metrics_export.out')
    output_dir = os.path.join('/tmp', ('ambari_metrics_export_' + time_suffix))
    parser.add_option('-a', '--action', dest='action', default='set_action', help="Use action 'export' for exporting AMS metrics. Use action 'run' for run REST server")
    parser.add_option('-v', '--verbose', dest='verbose', action='store_true', default=False, help='output verbosity.')
    parser.add_option('-l', '--logfile', dest='log_file', default=logfile, metavar='FILE', help=('Log file. [default: %s]' % logfile))
    export_options_group = OptionGroup(parser, "Required options for action 'export'")
    export_options_group.add_option('-s', '--host', dest='server_hostname', help='AMS host name.')
    export_options_group.add_option('-p', '--port', dest='server_port', default='6188', help='AMS port. [default: 6188]')
    export_options_group.add_option('-c', '--app-id', dest='app_id', help='AMS app id.')
    export_options_group.add_option('-m', '--metrics-file', dest='metrics_file', help='Metrics file with metric names to query. New line separated.')
    export_options_group.add_option('-f', '--host-file', dest='hosts_file', help='Host file with hostnames to query. New line separated.')
    export_options_group.add_option('-r', '--precision', dest='precision', default='minutes', help='AMS API precision, default = minutes.')
    export_options_group.add_option('-b', '--start_time', dest='start_time', help='Start time in milliseconds since epoch or UTC timestamp in YYYY-MM-DDTHH:mm:ssZ format.')
    export_options_group.add_option('-e', '--end_time', dest='end_time', help='End time in milliseconds since epoch or UTC timestamp in YYYY-MM-DDTHH:mm:ssZ format.')
    export_options_group.add_option('-o', '--output-dir', dest='output_dir', default=output_dir, help=('Output dir. [default: %s]' % output_dir))
    parser.add_option_group(export_options_group)
    run_server_option_group = OptionGroup(parser, "Required options for action 'run'")
    run_server_option_group.add_option('-i', '--input-dir', dest='input_dir', default='/tmp', help='Input directory for AMS metrics exports. [default: /tmp]')
    run_server_option_group.add_option('-n', '--flask-server_name', dest='server_name', help='Flask server name, default = 127.0.0.1', default='127.0.0.1')
    parser.add_option_group(run_server_option_group)
    (options, args) = parser.parse_args()
    Params.ACTION = options.action
    Params.VERBOSE = options.verbose
    Utils.setup_logger(options.verbose, options.log_file)
    if (Params.ACTION == 'export'):
        Params.AMS_HOSTNAME = options.server_hostname
        Params.AMS_PORT = options.server_port
        Params.AMS_APP_ID = options.app_id
        if (Params.AMS_APP_ID != 'HOST'):
            Params.AMS_APP_ID = Params.AMS_APP_ID.lower()
        Params.METRICS_FILE = options.metrics_file
        Params.HOSTS_FILE = options.hosts_file
        Params.PRECISION = options.precision
        Params.OUT_DIR = options.output_dir
        if (Params.START_TIME == (-1)):
            logger.warn('No start time provided, or it is in the wrong format. Please provide milliseconds since epoch or a value in YYYY-MM-DDTHH:mm:ssZ format')
            logger.info('Aborting...')
            sys.exit(1)
        Params.END_TIME = Utils.get_epoch(options.end_time)
        if (Params.END_TIME == (-1)):
            logger.warn('No end time provided, or it is in the wrong format. Please provide milliseconds since epoch or a value in YYYY-MM-DDTHH:mm:ssZ format')
            logger.info('Aborting...')
            sys.exit(1)
        Params.START_TIME = Utils.get_epoch(options.start_time)
        ams_metrics_processor = AmsMetricsProcessor()
        ams_metrics_processor.process()
    elif (Params.ACTION == 'run'):
        Params.INPUT_DIR = options.input_dir
        Params.FLASK_SERVER_NAME = options.server_name
        ams_metrics_processor = AmsMetricsProcessor()
        ams_metrics_processor.process()
        FlaskServer(ams_metrics_processor)
    else:
        logger.warn("Action '{0}' not supported. Please use action 'export' for exporting AMS metrics or use action 'run' for starting REST server".format(Params.ACTION))
        logger.info('Aborting...')
        sys.exit(1)
