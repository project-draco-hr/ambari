{
  Map<String,Set<String>> componentHostsMap=request.getComponentHostsMap();
  try {
    JsonNode root=this.mapper.readTree(data.servicesJSON);
    ArrayNode services=(ArrayNode)root.get(SERVICES_PROPETRY);
    Iterator<JsonNode> servicesIter=services.getElements();
    while (servicesIter.hasNext()) {
      JsonNode service=servicesIter.next();
      ArrayNode components=(ArrayNode)service.get(SERVICES_COMPONENTS_PROPETRY);
      Iterator<JsonNode> componentsIter=components.getElements();
      while (componentsIter.hasNext()) {
        JsonNode component=componentsIter.next();
        ObjectNode componentInfo=(ObjectNode)component.get(COMPONENT_INFO_PROPETRY);
        String componentName=componentInfo.get(COMPONENT_NAME_PROPERTY).getTextValue();
        Set<String> componentHosts=componentHostsMap.get(componentName);
        ArrayNode hostnames=componentInfo.putArray(COMPONENT_HOSTNAMES_PROPETRY);
        if (null != componentHosts) {
          for (          String hostName : componentHosts) {
            hostnames.add(hostName);
          }
        }
      }
    }
    data.servicesJSON=mapper.writeValueAsString(root);
  }
 catch (  Exception e) {
    String message="Error parsing services.json file content: " + e.getMessage();
    LOG.warn(message,e);
    throw new WebApplicationException(Response.status(Status.BAD_REQUEST).entity(message).build());
  }
  return data;
}
