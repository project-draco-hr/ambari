{
  RepositoryVersionEventCreator creator=new RepositoryVersionEventCreator();
  Map<String,Object> properties=new HashMap<>();
  properties.put(RepositoryVersionResourceProvider.REPOSITORY_VERSION_STACK_NAME_PROPERTY_ID,"StackName");
  properties.put(RepositoryVersionResourceProvider.REPOSITORY_VERSION_STACK_VERSION_PROPERTY_ID,"1.9");
  properties.put(RepositoryVersionResourceProvider.REPOSITORY_VERSION_DISPLAY_NAME_PROPERTY_ID,"MyStack");
  properties.put(RepositoryVersionResourceProvider.REPOSITORY_VERSION_REPOSITORY_VERSION_PROPERTY_ID,"1.2-56");
  properties.put("operating_systems",createOperatingSystems());
  Request request=AuditEventCreatorTestHelper.createRequest(Request.Type.PUT,Resource.Type.RepositoryVersion,properties,null);
  Result result=AuditEventCreatorTestHelper.createResult(new ResultStatus(ResultStatus.STATUS.OK));
  AuditEvent event=AuditEventCreatorTestHelper.getEvent(creator,request,result);
  String actual=event.getAuditMessage();
  String expected="User(" + userName + "), RemoteIp(1.2.3.4), Operation(Repository version change), RequestType(PUT), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Stack(StackName), Stack version(1.9), Display name(MyStack), Repo version(1.2-56), Repositories(\n"+ "Operating system: redhat6\n"+ "    Repository ID(2), Repository name(MyRepo6), Base url(http://example6.com)\n"+ "Operating system: redhat7\n"+ "    Repository ID(1), Repository name(MyRepo), Base url(http://example.com)\n"+ ")";
  Assert.assertTrue("Class mismatch",event instanceof ChangeRepositoryVersionRequestAuditEvent);
  Assert.assertEquals(expected,actual);
  Assert.assertTrue(actual.contains(userName));
}
