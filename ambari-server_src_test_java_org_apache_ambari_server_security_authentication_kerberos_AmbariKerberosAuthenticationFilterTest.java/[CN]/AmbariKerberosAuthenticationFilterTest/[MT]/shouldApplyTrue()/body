{
  HttpServletRequest httpServletRequest=createMock(HttpServletRequest.class);
  expect(httpServletRequest.getHeader("Authorization")).andReturn("Negotiate .....").once();
  AmbariKerberosAuthenticationProperties properties=createMock(AmbariKerberosAuthenticationProperties.class);
  expect(properties.isKerberosAuthenticationEnabled()).andReturn(true).once();
  Configuration configuration=createMock(Configuration.class);
  expect(configuration.getKerberosAuthenticationProperties()).andReturn(properties).once();
  AuthenticationManager authenticationManager=createMock(AuthenticationManager.class);
  AuthenticationEntryPoint entryPoint=createMock(AuthenticationEntryPoint.class);
  AuditLogger auditLogger=createMock(AuditLogger.class);
  PermissionHelper permissionHelper=createMock(PermissionHelper.class);
  replayAll();
  AmbariKerberosAuthenticationFilter filter=new AmbariKerberosAuthenticationFilter(authenticationManager,entryPoint,configuration,auditLogger,permissionHelper);
  Assert.assertTrue(filter.shouldApply(httpServletRequest));
  verifyAll();
}
