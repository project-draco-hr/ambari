@patch.object(HostCleanup.HostCleanup, 'do_delete_by_owner')
@patch.object(HostCleanup.HostCleanup, 'get_user_ids')
@patch.object(HostCleanup.HostCleanup, 'do_erase_alternatives')
@patch.object(HostCleanup.HostCleanup, 'find_repo_files_for_repos')
@patch.object(HostCleanup.HostCleanup, 'get_os_type')
@patch.object(HostCleanup.HostCleanup, 'do_kill_processes')
@patch.object(HostCleanup.HostCleanup, 'do_erase_files_silent')
@patch.object(HostCleanup.HostCleanup, 'do_erase_dir_silent')
@patch.object(HostCleanup.HostCleanup, 'do_delete_users')
@patch.object(HostCleanup.HostCleanup, 'do_erase_packages')
def test_do_cleanup_default(self, do_erase_packages_method, do_delete_users_method, do_erase_dir_silent_method, do_erase_files_silent_method, do_kill_processes_method, get_os_type_method, find_repo_files_for_repos_method, do_erase_alternatives_method, get_user_ids_method, do_delete_by_owner_method):
    global SKIP_LIST
    oldSkipList = HostCleanup.SKIP_LIST
    HostCleanup.SKIP_LIST = ['users']
    out = StringIO.StringIO()
    sys.stdout = out
    propertyMap = {PACKAGE_SECTION: ['abcd', 'pqrst'], USER_SECTION: ['abcd', 'pqrst'], REPO_SECTION: ['abcd', 'pqrst'], DIR_SECTION: ['abcd', 'pqrst'], PROCESS_SECTION: ['abcd', 'pqrst'], ALT_SECTION: {ALT_KEYS[0]: ['alt1', 'alt2'], ALT_KEYS[1]: ['dir1'], }, }
    get_os_type_method.return_value = 'redhat'
    find_repo_files_for_repos_method.return_value = ['abcd', 'pqrst']
    self.hostcleanup.do_cleanup(propertyMap)
    self.assertFalse(do_delete_by_owner_method.called)
    self.assertFalse(get_user_ids_method.called)
    self.assertFalse(do_delete_users_method.called)
    self.assertTrue(do_erase_dir_silent_method.called)
    self.assertTrue(do_erase_files_silent_method.called)
    self.assertTrue(do_erase_packages_method.called)
    self.assertTrue(do_kill_processes_method.called)
    self.assertTrue(do_erase_alternatives_method.called)
    HostCleanup.SKIP_LIST = oldSkipList
    sys.stdout = sys.__stdout__
