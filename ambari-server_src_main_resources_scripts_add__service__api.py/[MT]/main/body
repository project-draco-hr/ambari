def main():
    checked_call('curl -H \'X-Requested-By:anything\' -i -X POST -d \'[{{"ServiceInfo":{{"service_name":"{service_name}"}}}}]\' -u admin:admin {server_url}/api/v1/clusters/{cluster_name}/services'.format(service_name=SERVICE_NAME, server_url=SERVER_URL, cluster_name=CLUSTER_NAME))
    for component in COMPONENTS:
        checked_call('curl -H \'X-Requested-By:anything\' -i -X POST -d \'{{"components":[{{"ServiceComponentInfo":{{"component_name":"{component}"}}}}]}}\' -u admin:admin {server_url}/api/v1/clusters/{cluster_name}/services?ServiceInfo/service_name={service_name}'.format(service_name=SERVICE_NAME, component=component, server_url=SERVER_URL, cluster_name=CLUSTER_NAME))
    for x in COMPONENTS_TO_HOSTS:
        for (component, host) in x.iteritems():
            checked_call('curl -H \'X-Requested-By:anything\' -i -X POST -d \'{{"host_components":[{{"HostRoles":{{"component_name":"{component}"}}}}]}}\' -u admin:admin {server_url}/api/v1/clusters/{cluster_name}/hosts?Hosts/host_name={host}'.format(host=host, component=component, server_url=SERVER_URL, cluster_name=CLUSTER_NAME))
    checked_call("curl -H 'X-Requested-By:anything'-X GET -u admin:admin {server_url}/api/v1/stacks2/HDP/versions/{stack_version}/stackServices/{service_name}/configurations?fields=* > /tmp/config.json".format(server_url=SERVER_URL, stack_version=STACK_VERSION, service_name=SERVICE_NAME))
    with open('/tmp/config.json', 'r') as f:
        d = json.load(f)
    configs = {}
    for x in d['items']:
        site_name = x['StackConfigurations']['type'][:(-4)]
        if (not (site_name in configs)):
            configs[site_name] = {}
        config = configs[site_name]
        config[x['StackConfigurations']['property_name']] = x['StackConfigurations']['property_value']
    for (site_name, site_content) in configs.iteritems():
        code = call('/var/lib/ambari-server/resources/scripts/configs.sh get {hostname} {cluster_name} {site_name}'.format(hostname=HOSTNAME, cluster_name=CLUSTER_NAME, site_name=site_name))[0]
        if code:
            print ('Adding new site: ' + site_name)
            checked_call('curl -i -H \'X-Requested-By:anything\' -X PUT -d \'{{"Clusters":{{"desired_configs":{{"type":"{site_name}","tag":"version1","properties":{site_content}}}}}}}\' -u admin:admin {server_url}/api/v1/clusters/{cluster_name}'.format(site_name=site_name, site_content=json.dumps(site_content), server_url=SERVER_URL, cluster_name=CLUSTER_NAME))
        else:
            timestamp = int(time.time())
            print ((('Modifiying site: ' + site_name) + ' version') + str(timestamp))
            checked_call('/var/lib/ambari-server/resources/scripts/configs.sh get {hostname} {cluster_name} {site_name} /tmp/current_site.json'.format(hostname=HOSTNAME, cluster_name=CLUSTER_NAME, site_name=site_name))
            with open('/tmp/current_site.json', 'r') as f:
                fcontent = f.read()
                d = json.loads((('{' + fcontent) + '}'))
            for (k, v) in site_content.iteritems():
                d['properties'][k] = v
            checked_call('curl -i -H \'X-Requested-By:anything\' -X PUT -d \'{{"Clusters":{{"desired_configs":{{"type":"{site_name}","tag":"version{timestamp}","properties":{site_content}}}}}}}\' -u admin:admin {server_url}/api/v1/clusters/{cluster_name}'.format(site_name=site_name, timestamp=timestamp, site_content=json.dumps(d['properties']), server_url=SERVER_URL, cluster_name=CLUSTER_NAME))
    for (site_name, site_configs) in CONFIGS_TO_CHANGE.iteritems():
        for (config_name, config_value) in site_configs.iteritems():
            print ((((('Adding config ' + config_name) + '=') + config_value) + ' to ') + site_name)
            checked_call('/var/lib/ambari-server/resources/scripts/configs.sh set {hostname} {cluster_name} {site_name} {config_name} {config_value}'.format(config_name=config_name, config_value=config_value, hostname=HOSTNAME, cluster_name=CLUSTER_NAME, site_name=site_name))
    checked_call('curl -H \'X-Requested-By:anything\' -i -X PUT -d  \'{{"RequestInfo": {{"context" :"Installing Services"}}, "Body": {{"ServiceInfo": {{"state": "INSTALLED"}}}}}}\' -u admin:admin {server_url}/api/v1/clusters/{cluster_name}/services?ServiceInfo/state=INIT'.format(server_url=SERVER_URL, cluster_name=CLUSTER_NAME))
