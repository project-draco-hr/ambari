{
  final ResourceProvider provider=injector.getInstance(ResourceProviderFactory.class).getRepositoryVersionResourceProvider();
  final Set<Map<String,Object>> propertySet=new LinkedHashSet<Map<String,Object>>();
  final Map<String,Object> properties=new LinkedHashMap<String,Object>();
  properties.put(RepositoryVersionResourceProvider.REPOSITORY_VERSION_DISPLAY_NAME_PROPERTY_ID,"name");
  properties.put(RepositoryVersionResourceProvider.SUBRESOURCE_OPERATING_SYSTEMS_PROPERTY_ID,new Gson().fromJson("[{\"OperatingSystems/os_type\":\"redhat6\",\"repositories\":[{\"Repositories/repo_id\":\"1\",\"Repositories/repo_name\":\"1\",\"Repositories/base_url\":\"1\"}]}]",Object.class));
  properties.put(RepositoryVersionResourceProvider.REPOSITORY_VERSION_STACK_NAME_PROPERTY_ID,"HDP");
  properties.put(RepositoryVersionResourceProvider.REPOSITORY_VERSION_UPGRADE_PACK_PROPERTY_ID,"pack1");
  properties.put(RepositoryVersionResourceProvider.REPOSITORY_VERSION_STACK_VERSION_PROPERTY_ID,"1.1");
  properties.put(RepositoryVersionResourceProvider.REPOSITORY_VERSION_REPOSITORY_VERSION_PROPERTY_ID,"1.1.1.1");
  properties.put(RepositoryVersionResourceProvider.REPOSITORY_VERSION_COMPONENTS + "/HDFS",Arrays.asList("NAMENODE","DATANODE"));
  propertySet.add(properties);
  final Predicate predicateStackName=new PredicateBuilder().property(RepositoryVersionResourceProvider.REPOSITORY_VERSION_STACK_NAME_PROPERTY_ID).equals("HDP").toPredicate();
  final Predicate predicateStackVersion=new PredicateBuilder().property(RepositoryVersionResourceProvider.REPOSITORY_VERSION_STACK_VERSION_PROPERTY_ID).equals("1.1").toPredicate();
  final Request getRequest=PropertyHelper.getReadRequest("RepositoryVersions");
  Assert.assertEquals(0,provider.getResources(getRequest,new AndPredicate(predicateStackName,predicateStackVersion)).size());
  final Request createRequest=PropertyHelper.getCreateRequest(propertySet,null);
  provider.createResources(createRequest);
  Set<Resource> resources=provider.getResources(getRequest,new AndPredicate(predicateStackName,predicateStackVersion));
  Assert.assertEquals(1,resources.size());
  Resource r=resources.iterator().next();
  Assert.assertEquals(RepositoryType.PATCH,r.getPropertyValue(RepositoryVersionResourceProvider.REPOSITORY_VERSION_TYPE_PROPERTY_ID));
  Object o=r.getPropertyValue(RepositoryVersionResourceProvider.REPOSITORY_VERSION_COMPONENTS + "/HDFS");
  Assert.assertTrue(Collection.class.isInstance(o));
  Assert.assertTrue(((Collection)o).contains("NAMENODE"));
  Assert.assertTrue(((Collection)o).contains("DATANODE"));
}
