{
  final ResourceProvider provider=injector.getInstance(ResourceProviderFactory.class).getRepositoryVersionResourceProvider();
  final Set<Map<String,Object>> propertySet=new LinkedHashSet<Map<String,Object>>();
  final Map<String,Object> properties=new LinkedHashMap<String,Object>();
  properties.put(RepositoryVersionResourceProvider.REPOSITORY_VERSION_DISPLAY_NAME_PROPERTY_ID,"name");
  properties.put(RepositoryVersionResourceProvider.SUBRESOURCE_OPERATING_SYSTEMS_PROPERTY_ID,new Gson().fromJson("[{\"OperatingSystems/os_type\":\"redhat6\",\"repositories\":[{\"Repositories/repo_id\":\"1\",\"Repositories/repo_name\":\"1\",\"Repositories/base_url\":\"1\"}]}]",Object.class));
  properties.put(RepositoryVersionResourceProvider.REPOSITORY_VERSION_STACK_NAME_PROPERTY_ID,"HDP");
  properties.put(RepositoryVersionResourceProvider.REPOSITORY_VERSION_UPGRADE_PACK_PROPERTY_ID,"pack1");
  properties.put(RepositoryVersionResourceProvider.REPOSITORY_VERSION_STACK_VERSION_PROPERTY_ID,"1.1");
  properties.put(RepositoryVersionResourceProvider.REPOSITORY_VERSION_REPOSITORY_VERSION_PROPERTY_ID,"1.1.1.1");
  propertySet.add(properties);
  final Predicate predicateStackName=new PredicateBuilder().property(RepositoryVersionResourceProvider.REPOSITORY_VERSION_STACK_NAME_PROPERTY_ID).equals("HDP").toPredicate();
  final Predicate predicateStackVersion=new PredicateBuilder().property(RepositoryVersionResourceProvider.REPOSITORY_VERSION_STACK_VERSION_PROPERTY_ID).equals("1.1").toPredicate();
  final Request getRequest=PropertyHelper.getReadRequest(RepositoryVersionResourceProvider.REPOSITORY_VERSION_DISPLAY_NAME_PROPERTY_ID,RepositoryVersionResourceProvider.SUBRESOURCE_OPERATING_SYSTEMS_PROPERTY_ID,RepositoryVersionResourceProvider.REPOSITORY_VERSION_UPGRADE_PACK_PROPERTY_ID);
  Assert.assertEquals(0,provider.getResources(getRequest,new AndPredicate(predicateStackName,predicateStackVersion)).size());
  final Request createRequest=PropertyHelper.getCreateRequest(propertySet,null);
  provider.createResources(createRequest);
  Assert.assertEquals(1,provider.getResources(getRequest,new AndPredicate(predicateStackName,predicateStackVersion)).size());
  Assert.assertEquals("name",provider.getResources(getRequest,new AndPredicate(predicateStackName,predicateStackVersion)).iterator().next().getPropertyValue(RepositoryVersionResourceProvider.REPOSITORY_VERSION_DISPLAY_NAME_PROPERTY_ID));
  properties.put(RepositoryVersionResourceProvider.REPOSITORY_VERSION_UPGRADE_PACK_PROPERTY_ID,null);
  properties.put(RepositoryVersionResourceProvider.REPOSITORY_VERSION_ID_PROPERTY_ID,"1");
  properties.put(RepositoryVersionResourceProvider.REPOSITORY_VERSION_DISPLAY_NAME_PROPERTY_ID,"name2");
  final Request updateRequest=PropertyHelper.getUpdateRequest(properties,null);
  provider.updateResources(updateRequest,new AndPredicate(predicateStackName,predicateStackVersion));
  Assert.assertEquals("name2",provider.getResources(getRequest,new AndPredicate(predicateStackName,predicateStackVersion)).iterator().next().getPropertyValue(RepositoryVersionResourceProvider.REPOSITORY_VERSION_DISPLAY_NAME_PROPERTY_ID));
  properties.put(RepositoryVersionResourceProvider.SUBRESOURCE_OPERATING_SYSTEMS_PROPERTY_ID,new Gson().fromJson("[{\"OperatingSystems/os_type\":\"redhat6\",\"repositories\":[{\"Repositories/repo_id\":\"2\",\"Repositories/repo_name\":\"2\",\"Repositories/base_url\":\"2\"}]}]",Object.class));
  provider.updateResources(updateRequest,new AndPredicate(predicateStackName,predicateStackVersion));
  properties.put(RepositoryVersionResourceProvider.REPOSITORY_VERSION_UPGRADE_PACK_PROPERTY_ID,"pack2");
  try {
    provider.updateResources(updateRequest,new AndPredicate(predicateStackName,predicateStackVersion));
    Assert.fail("Update of upgrade pack should not be allowed when repo version is installed on any cluster");
  }
 catch (  Exception ex) {
  }
}
