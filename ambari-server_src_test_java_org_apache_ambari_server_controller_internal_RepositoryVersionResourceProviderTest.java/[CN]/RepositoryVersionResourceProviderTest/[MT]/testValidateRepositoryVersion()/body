{
  final RepositoryVersionResourceProvider provider=(RepositoryVersionResourceProvider)injector.getInstance(ResourceProviderFactory.class).getRepositoryVersionResourceProvider();
  final RepositoryVersionEntity entity=new RepositoryVersionEntity();
  entity.setDisplayName("name");
  entity.setStack("HDP-1.1");
  entity.setUpgradePackage("pack1");
  entity.setVersion("1.1");
  entity.setOperatingSystems("[{\"OperatingSystems/os_type\":\"redhat6\",\"repositories\":[{\"Repositories/repo_id\":\"1\",\"Repositories/repo_name\":\"1\",\"Repositories/base_url\":\"1\"}]}]");
  provider.validateRepositoryVersion(entity);
  entity.setVersion("1.1-17");
  provider.validateRepositoryVersion(entity);
  entity.setVersion("1.1.1.1");
  provider.validateRepositoryVersion(entity);
  entity.setVersion("1.1.343432.2");
  provider.validateRepositoryVersion(entity);
  entity.setVersion("1.1.343432.2-234234324");
  provider.validateRepositoryVersion(entity);
  entity.setOperatingSystems(jsonStringRedhat7);
  try {
    provider.validateRepositoryVersion(entity);
    Assert.fail("Should throw exception");
  }
 catch (  Exception ex) {
  }
  entity.setOperatingSystems("");
  try {
    provider.validateRepositoryVersion(entity);
    Assert.fail("Should throw exception");
  }
 catch (  Exception ex) {
  }
  entity.setUpgradePackage("pack2");
  try {
    provider.validateRepositoryVersion(entity);
    Assert.fail("Should throw exception");
  }
 catch (  Exception ex) {
  }
  entity.setStack("BIGTOP");
  try {
    provider.validateRepositoryVersion(entity);
    Assert.fail("Should throw exception");
  }
 catch (  Exception ex) {
  }
}
