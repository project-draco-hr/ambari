{
  ViewInstanceEntity viewInstanceEntity=createNiceMock(ViewInstanceEntity.class);
  ViewEntity viewEntity=createNiceMock(ViewEntity.class);
  ViewURLResourceProvider provider=new ViewURLResourceProvider();
  ViewURLDAO viewURLDAO=createNiceMock(ViewURLDAO.class);
  setDao(ViewURLResourceProvider.class.getDeclaredField("viewURLDAO"),viewURLDAO);
  Set<Map<String,Object>> properties=new HashSet<>();
  Map<String,Object> propertyMap=new HashMap<>();
  propertyMap.put(ViewURLResourceProvider.URL_NAME_PROPERTY_ID,"test");
  propertyMap.put(ViewURLResourceProvider.URL_SUFFIX_PROPERTY_ID,"suffix");
  propertyMap.put(ViewURLResourceProvider.VIEW_INSTANCE_COMMON_NAME_PROPERTY_ID,"FILES");
  propertyMap.put(ViewURLResourceProvider.VIEW_INSTANCE_NAME_PROPERTY_ID,"test");
  propertyMap.put(ViewURLResourceProvider.VIEW_INSTANCE_VERSION_PROPERTY_ID,"1.0.0");
  expect(viewregistry.getInstanceDefinition("FILES","1.0.0","test")).andReturn(viewInstanceEntity);
  expect(viewregistry.getDefinition("FILES","1.0.0")).andReturn(viewEntity);
  expect(viewInstanceEntity.getViewEntity()).andReturn(viewEntity).once();
  expect(viewEntity.getCommonName()).andReturn("FILES").once();
  expect(viewEntity.isDeployed()).andReturn(true).once();
  expect(viewEntity.getVersion()).andReturn("1.0.0").once();
  expect(viewInstanceEntity.getName()).andReturn("test").once();
  expect(viewInstanceEntity.getViewUrl()).andReturn(null).once();
  expect(viewURLDAO.findByName("test")).andReturn(Optional.of(new ViewURLEntity()));
  replay(viewregistry,viewEntity,viewInstanceEntity,viewURLDAO);
  properties.add(propertyMap);
  SecurityContextHolder.getContext().setAuthentication(TestAuthenticationFactory.createAdministrator());
  provider.createResources(PropertyHelper.getCreateRequest(properties,null));
}
