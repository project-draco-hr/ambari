{
  ViewInstanceEntity viewInstanceEntity=createNiceMock(ViewInstanceEntity.class);
  ViewEntity viewEntity=createNiceMock(ViewEntity.class);
  ViewURLResourceProvider provider=new ViewURLResourceProvider();
  ViewURLEntity viewURLEntity=createNiceMock(ViewURLEntity.class);
  ViewURLDAO viewURLDAO=createNiceMock(ViewURLDAO.class);
  setDao(ViewURLResourceProvider.class.getDeclaredField("viewURLDAO"),viewURLDAO);
  Set<Map<String,Object>> properties=new HashSet<>();
  Map<String,Object> propertyMap=new HashMap<>();
  propertyMap.put(ViewURLResourceProvider.URL_NAME_PROPERTY_ID,"test");
  propertyMap.put(ViewURLResourceProvider.URL_SUFFIX_PROPERTY_ID,"suffix2");
  expect(viewURLDAO.findByName("test")).andReturn(Optional.of(viewURLEntity));
  expect(viewURLEntity.getViewInstanceEntity()).andReturn(viewInstanceEntity).once();
  expect(viewURLEntity.getUrlName()).andReturn("test").once();
  expect(viewURLEntity.getUrlSuffix()).andReturn("suffix2").once();
  expect(viewURLEntity.getViewInstanceEntity()).andReturn(viewInstanceEntity).once();
  viewURLEntity.setUrlSuffix("suffix2");
  Capture<ViewURLEntity> urlEntityCapture=newCapture();
  viewURLDAO.update(capture(urlEntityCapture));
  viewregistry.updateViewInstance(viewInstanceEntity);
  viewregistry.updateView(viewInstanceEntity);
  replay(viewregistry,viewEntity,viewInstanceEntity,viewURLDAO,viewURLEntity);
  properties.add(propertyMap);
  SecurityContextHolder.getContext().setAuthentication(TestAuthenticationFactory.createAdministrator());
  PredicateBuilder predicateBuilder=new PredicateBuilder();
  Predicate predicate=predicateBuilder.property(ViewURLResourceProvider.URL_NAME_PROPERTY_ID).equals("test").toPredicate();
  provider.updateResources(PropertyHelper.getCreateRequest(properties,null),predicate);
  ViewURLEntity urlEntity=urlEntityCapture.getValue();
  assertEquals(urlEntity.getUrlName(),"test");
  assertEquals(urlEntity.getUrlSuffix(),"suffix2");
  assertEquals(urlEntity.getViewInstanceEntity(),viewInstanceEntity);
}
