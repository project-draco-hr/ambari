{
  String clusterName=(String)requestMap.get(ALERT_DEF_CLUSTER_NAME);
  if (null == clusterName || clusterName.isEmpty()) {
    throw new IllegalArgumentException("Invalid argument, cluster name is required");
  }
  if (!requestMap.containsKey(ALERT_DEF_INTERVAL)) {
    throw new IllegalArgumentException("Check interval must be specified");
  }
  Integer interval=Integer.valueOf((String)requestMap.get(ALERT_DEF_INTERVAL));
  if (!requestMap.containsKey(ALERT_DEF_NAME)) {
    throw new IllegalArgumentException("Definition name must be specified");
  }
  if (!requestMap.containsKey(ALERT_DEF_SERVICE_NAME)) {
    throw new IllegalArgumentException("Service name must be specified");
  }
  if (!requestMap.containsKey(ALERT_DEF_SOURCE_TYPE)) {
    throw new IllegalArgumentException(String.format("Source type must be specified and one of %s",EnumSet.allOf(SourceType.class)));
  }
  JsonObject source=new JsonObject();
  JsonObject reporting=new JsonObject();
  JsonObject reportingOk=new JsonObject();
  JsonObject reportingWarning=new JsonObject();
  JsonObject reportingCritical=new JsonObject();
  for (  Entry<String,Object> entry : requestMap.entrySet()) {
    String propCat=PropertyHelper.getPropertyCategory(entry.getKey());
    String propName=PropertyHelper.getPropertyName(entry.getKey());
    if (propCat.equals(ALERT_DEF) && "source".equals(propName)) {
      source.addProperty(propName,entry.getValue().toString());
    }
    if (propCat.equals(ALERT_DEF_SOURCE)) {
      source.addProperty(propName,entry.getValue().toString());
    }
    if (propCat.equals(ALERT_DEF_SOURCE_REPORTING)) {
      reporting.addProperty(propName,entry.getValue().toString());
    }
    if (propCat.equals(ALERT_DEF_SOURCE_REPORTING_OK)) {
      reportingOk.addProperty(propName,entry.getValue().toString());
    }
    if (propCat.equals(ALERT_DEF_SOURCE_REPORTING_WARNING)) {
      reportingWarning.addProperty(propName,entry.getValue().toString());
    }
    if (propCat.equals(ALERT_DEF_SOURCE_REPORTING_CRITICAL)) {
      reportingCritical.addProperty(propName,entry.getValue().toString());
    }
  }
  if (0 == source.entrySet().size()) {
    throw new IllegalArgumentException("Source must be specified");
  }
  if (reportingOk.entrySet().size() > 0) {
    reporting.add("ok",reportingOk);
  }
  if (reportingWarning.entrySet().size() > 0) {
    reporting.add("warning",reportingWarning);
  }
  if (reportingCritical.entrySet().size() > 0) {
    reporting.add("critical",reportingCritical);
  }
  if (reporting.entrySet().size() > 0) {
    source.add("reporting",reporting);
  }
  Cluster cluster=getManagementController().getClusters().getCluster(clusterName);
  AlertDefinitionEntity entity=new AlertDefinitionEntity();
  entity.setClusterId(Long.valueOf(cluster.getClusterId()));
  entity.setComponentName((String)requestMap.get(ALERT_DEF_COMPONENT_NAME));
  entity.setDefinitionName((String)requestMap.get(ALERT_DEF_NAME));
  entity.setLabel((String)requestMap.get(ALERT_DEF_LABEL));
  boolean enabled=requestMap.containsKey(ALERT_DEF_ENABLED) ? Boolean.parseBoolean((String)requestMap.get(ALERT_DEF_ENABLED)) : true;
  entity.setEnabled(enabled);
  entity.setHash(UUID.randomUUID().toString());
  entity.setScheduleInterval(interval);
  entity.setServiceName((String)requestMap.get(ALERT_DEF_SERVICE_NAME));
  entity.setSourceType((String)requestMap.get(ALERT_DEF_SOURCE_TYPE));
  entity.setSource(source.toString());
  Scope scope=null;
  String desiredScope=(String)requestMap.get(ALERT_DEF_SCOPE);
  if (null != desiredScope && desiredScope.length() > 0) {
    scope=Scope.valueOf(desiredScope);
  }
  entity.setScope(scope);
  return entity;
}
