def assert_configure_default(self, no_tmp=False, default_fs_default='hdfs://c6401.ambari.apache.org:8020'):
    self.assertResourceCalled('HdfsResource', '/apps/webhcat', security_enabled=False, hadoop_bin_dir='/usr/bin', keytab=UnknownConfigurationMock(), kinit_path_local='/usr/bin/kinit', user='hdfs', dfs_type='', owner='hcat', hadoop_conf_dir='/etc/hadoop/conf', type='directory', action=['create_on_execute'], hdfs_site=self.getConfig()['configurations']['hdfs-site'], principal_name='missing_principal', default_fs=default_fs_default, mode=493)
    self.assertResourceCalled('HdfsResource', '/user/hcat', security_enabled=False, hadoop_bin_dir='/usr/bin', keytab=UnknownConfigurationMock(), kinit_path_local='/usr/bin/kinit', user='hdfs', dfs_type='', owner='hcat', hadoop_conf_dir='/etc/hadoop/conf', type='directory', action=['create_on_execute'], hdfs_site=self.getConfig()['configurations']['hdfs-site'], principal_name='missing_principal', default_fs=default_fs_default, mode=493)
    if (self._testMethodName == 'test_socket_timeout'):
        return
    self.assertResourceCalled('HdfsResource', '/apps/hive/warehouse', security_enabled=False, hadoop_bin_dir='/usr/bin', keytab=UnknownConfigurationMock(), kinit_path_local='/usr/bin/kinit', user='hdfs', dfs_type='', owner='hive', hadoop_conf_dir='/etc/hadoop/conf', type='directory', action=['create_on_execute'], hdfs_site=self.getConfig()['configurations']['hdfs-site'], principal_name='missing_principal', default_fs=default_fs_default, mode=511)
    self.assertResourceCalled('HdfsResource', '/user/hive', security_enabled=False, hadoop_bin_dir='/usr/bin', keytab=UnknownConfigurationMock(), kinit_path_local='/usr/bin/kinit', user='hdfs', dfs_type='', owner='hive', hadoop_conf_dir='/etc/hadoop/conf', type='directory', action=['create_on_execute'], hdfs_site=self.getConfig()['configurations']['hdfs-site'], principal_name='missing_principal', default_fs=default_fs_default, mode=448)
    if (not no_tmp):
        self.assertResourceCalled('HdfsResource', '/custompath/tmp/hive', security_enabled=False, hadoop_conf_dir='/etc/hadoop/conf', keytab=UnknownConfigurationMock(), kinit_path_local='/usr/bin/kinit', user='hdfs', dfs_type='', owner='hive', group='hdfs', hadoop_bin_dir='/usr/bin', type='directory', action=['create_on_execute'], hdfs_site=self.getConfig()['configurations']['hdfs-site'], principal_name='missing_principal', default_fs=default_fs_default, mode=511)
    self.assertResourceCalled('HdfsResource', None, security_enabled=False, hadoop_bin_dir='/usr/bin', keytab=UnknownConfigurationMock(), kinit_path_local='/usr/bin/kinit', user='hdfs', dfs_type='', action=['execute'], hdfs_site=self.getConfig()['configurations']['hdfs-site'], principal_name='missing_principal', default_fs=default_fs_default, hadoop_conf_dir='/etc/hadoop/conf')
    self.assertResourceCalled('Directory', '/etc/hive', mode=493)
    self.assertResourceCalled('Directory', '/etc/hive/conf', owner='hive', group='hadoop', recursive=True)
    self.assertResourceCalled('XmlConfig', 'mapred-site.xml', group='hadoop', conf_dir='/etc/hive/conf', mode=420, configuration_attributes={u'final': {u'mapred.healthChecker.script.path': u'true', u'mapreduce.jobtracker.staging.root.dir': u'true', }, }, owner='hive', configurations=self.getConfig()['configurations']['mapred-site'])
    self.assertResourceCalled('File', '/etc/hive/conf/hive-default.xml.template', owner='hive', group='hadoop')
    self.assertResourceCalled('File', '/etc/hive/conf/hive-env.sh.template', owner='hive', group='hadoop')
    self.assertResourceCalled('File', '/etc/hive/conf/hive-exec-log4j.properties', content='log4jproperties\nline2', owner='hive', group='hadoop', mode=420)
    self.assertResourceCalled('File', '/etc/hive/conf/hive-log4j.properties', content='log4jproperties\nline2', owner='hive', group='hadoop', mode=420)
    self.assertResourceCalled('XmlConfig', 'hive-site.xml', group='hadoop', conf_dir='/etc/hive/conf.server', mode=420, configuration_attributes={u'final': {u'hive.optimize.bucketmapjoin.sortedmerge': u'true', u'javax.jdo.option.ConnectionDriverName': u'true', u'javax.jdo.option.ConnectionPassword': u'true', }, }, owner='hive', configurations=self.getConfig()['configurations']['hive-site'])
    self.assertResourceCalled('File', '/etc/hive/conf.server/hive-env.sh', content=InlineTemplate(self.getConfig()['configurations']['hive-env']['content']), owner='hive', group='hadoop')
    self.assertResourceCalled('Directory', '/etc/security/limits.d', owner='root', group='root', recursive=True)
    self.assertResourceCalled('File', '/etc/security/limits.d/hive.conf', content=Template('hive.conf.j2'), owner='root', group='root', mode=420)
    self.assertResourceCalled('Execute', ('cp', '--remove-destination', '/usr/share/java/mysql-connector-java.jar', '/usr/lib/hive/lib//mysql-connector-java.jar'), path=['/bin', '/usr/bin/'], sudo=True)
    self.assertResourceCalled('File', '/usr/lib/hive/lib//mysql-connector-java.jar', mode=420)
    self.assertResourceCalled('File', '/usr/lib/ambari-agent/DBConnectionVerification.jar', content=DownloadSource('http://c6401.ambari.apache.org:8080/resources/DBConnectionVerification.jar'), mode=420)
    self.assertResourceCalled('File', '/tmp/start_hiveserver2_script', content=Template('startHiveserver2.sh.j2'), mode=493)
    self.assertResourceCalled('Directory', '/var/run/hive', owner='hive', mode=493, group='hadoop', recursive=True, cd_access='a')
    self.assertResourceCalled('Directory', '/var/log/hive', owner='hive', mode=493, group='hadoop', recursive=True, cd_access='a')
    self.assertResourceCalled('Directory', '/var/lib/hive', owner='hive', mode=493, group='hadoop', recursive=True, cd_access='a')
