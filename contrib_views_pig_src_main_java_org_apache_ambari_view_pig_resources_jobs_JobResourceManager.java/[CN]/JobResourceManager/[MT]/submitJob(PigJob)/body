{
  String date=new SimpleDateFormat("dd-MM-yyyy-HH-mm-ss").format(new Date());
  String statusdir=String.format(context.getProperties().get("dataworker.jobs.path") + "/%s/%s_%s",getUsername(),job.getTitle().toLowerCase().replaceAll("[^a-zA-Z0-9 ]+","").replace(" ","_"),date);
  String newPigScriptPath=statusdir + "/script.pig";
  String newSourceFilePath=statusdir + "/source.pig";
  String newPythonScriptPath=statusdir + "/udf.py";
  String templetonParamsFilePath=statusdir + "/params";
  try {
    if (job.getSourceFileContent() != null && !job.getSourceFileContent().isEmpty()) {
      String sourceFileContent=job.getSourceFileContent();
      job.setSourceFileContent(null);
      save(job);
      FSDataOutputStream stream=BaseService.getHdfsApi(context).create(newSourceFilePath,true);
      stream.writeBytes(sourceFileContent);
      stream.close();
    }
 else {
      if (job.getSourceFile() != null && !job.getSourceFile().isEmpty()) {
        if (!BaseService.getHdfsApi(context).copy(job.getSourceFile(),newSourceFilePath)) {
          throw new ServiceFormattedException("Can't copy source file from " + job.getSourceFile() + " to "+ newPigScriptPath);
        }
      }
    }
  }
 catch (  IOException e) {
    throw new ServiceFormattedException("Can't create/copy source file: " + e.toString(),e);
  }
catch (  InterruptedException e) {
    throw new ServiceFormattedException("Can't create/copy source file: " + e.toString(),e);
  }
  try {
    if (job.getForcedContent() != null && !job.getForcedContent().isEmpty()) {
      String forcedContent=job.getForcedContent();
      forcedContent=forcedContent.replace("${sourceFile}",context.getProperties().get("dataworker.defaultFs") + newSourceFilePath);
      job.setForcedContent(null);
      save(job);
      FSDataOutputStream stream=BaseService.getHdfsApi(context).create(newPigScriptPath,true);
      stream.writeBytes(forcedContent);
      stream.close();
    }
 else {
      if (!BaseService.getHdfsApi(context).copy(job.getPigScript(),newPigScriptPath)) {
        throw new ServiceFormattedException("Can't copy pig script file from " + job.getPigScript() + " to "+ newPigScriptPath);
      }
    }
  }
 catch (  IOException e) {
    throw new ServiceFormattedException("Can't create/copy pig script file: " + e.toString(),e);
  }
catch (  InterruptedException e) {
    throw new ServiceFormattedException("Can't create/copy pig script file: " + e.toString(),e);
  }
  if (job.getPythonScript() != null && !job.getPythonScript().isEmpty()) {
    try {
      if (!BaseService.getHdfsApi(context).copy(job.getPythonScript(),newPythonScriptPath)) {
        throw new ServiceFormattedException("Can't copy python udf script file from " + job.getPythonScript() + " to "+ newPythonScriptPath);
      }
    }
 catch (    IOException e) {
      throw new ServiceFormattedException("Can't create/copy python udf file: " + e.toString(),e);
    }
catch (    InterruptedException e) {
      throw new ServiceFormattedException("Can't create/copy python udf file: " + e.toString(),e);
    }
  }
  try {
    FSDataOutputStream stream=BaseService.getHdfsApi(context).create(templetonParamsFilePath,true);
    if (job.getTempletonArguments() != null) {
      stream.writeBytes(job.getTempletonArguments());
    }
    stream.close();
  }
 catch (  IOException e) {
    throw new ServiceFormattedException("Can't create params file: " + e.toString(),e);
  }
catch (  InterruptedException e) {
    throw new ServiceFormattedException("Can't create params file: " + e.toString(),e);
  }
  job.setPigScript(newPigScriptPath);
  job.setStatusDir(statusdir);
  job.setDateStarted(System.currentTimeMillis() / 1000L);
  TempletonApi.JobData data=null;
  try {
    data=getTempletonApi().runPigQuery(new File(job.getPigScript()),statusdir,job.getTempletonArguments());
  }
 catch (  IOException templetonBadResponse) {
    String msg=String.format("Templeton bad response: %s",templetonBadResponse.toString());
    LOG.debug(msg);
    throw new ServiceFormattedException(msg,templetonBadResponse);
  }
  job.setJobId(data.id);
  JobPolling.pollJob(context,job);
}
