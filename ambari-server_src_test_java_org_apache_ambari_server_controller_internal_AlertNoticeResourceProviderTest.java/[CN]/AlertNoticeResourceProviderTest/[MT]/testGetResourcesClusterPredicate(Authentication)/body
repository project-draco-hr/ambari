{
  Request request=PropertyHelper.getReadRequest(AlertNoticeResourceProvider.ALERT_NOTICE_CLUSTER_NAME,AlertNoticeResourceProvider.ALERT_NOTICE_ID,AlertNoticeResourceProvider.ALERT_NOTICE_HISTORY_ID,AlertNoticeResourceProvider.ALERT_NOTICE_SERVICE_NAME,AlertNoticeResourceProvider.ALERT_NOTICE_TARGET_ID,AlertNoticeResourceProvider.ALERT_NOTICE_TARGET_NAME,AlertNoticeResourceProvider.ALERT_NOTICE_STATE);
  Predicate predicate=new PredicateBuilder().property(AlertNoticeResourceProvider.ALERT_NOTICE_CLUSTER_NAME).equals("c1").toPredicate();
  expect(m_dao.findAllNotices(EasyMock.anyObject(AlertNoticeRequest.class))).andReturn(getMockEntities());
  Cluster cluster=createMock(Cluster.class);
  expect(cluster.getResourceId()).andReturn(4L).anyTimes();
  expect(cluster.getClusterId()).andReturn(2L).anyTimes();
  Clusters clusters=m_injector.getInstance(Clusters.class);
  expect(clusters.getCluster("c1")).andReturn(cluster).anyTimes();
  AmbariManagementController amc=m_injector.getInstance(AmbariManagementController.class);
  replay(m_dao,amc,clusters,cluster);
  SecurityContextHolder.getContext().setAuthentication(authentication);
  AlertNoticeResourceProvider provider=createProvider();
  Set<Resource> results=provider.getResources(request,predicate);
  assertEquals(1,results.size());
  Resource r=results.iterator().next();
  Assert.assertEquals("Administrators",r.getPropertyValue(AlertNoticeResourceProvider.ALERT_NOTICE_TARGET_NAME));
  Assert.assertEquals(NotificationState.FAILED,r.getPropertyValue(AlertNoticeResourceProvider.ALERT_NOTICE_STATE));
  verify(m_dao,amc,clusters,cluster);
}
