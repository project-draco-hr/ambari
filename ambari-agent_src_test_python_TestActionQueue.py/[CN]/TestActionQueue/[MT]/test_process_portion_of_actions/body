@patch.object(ActionDependencyManager, 'read_dependencies')
@patch.object(ActionQueue, 'execute_command')
@patch.object(ActionQueue, 'execute_status_command')
def test_process_portion_of_actions(self, execute_status_command_mock, executeCommand_mock, read_dependencies_mock):
    actionQueue = ActionQueue(AmbariConfig().getConfig(), 'dummy_controller')
    max = 3
    actionQueue.MAX_CONCURRENT_ACTIONS = max
    unfreeze_flag = threading.Event()
    sync_lock = threading.RLock()
    stats = {'waiting_threads': 0, }

    def side_effect(self):
        with sync_lock:
            stats['waiting_threads'] += 1
        unfreeze_flag.wait()
    executeCommand_mock.side_effect = side_effect
    portion = [self.datanode_install_command, self.namenode_install_command, self.snamenode_install_command, self.nagios_install_command, self.hbase_install_command]
    action_thread = Thread(target=actionQueue.process_portion_of_actions, args=(portion,))
    action_thread.start()
    while (stats['waiting_threads'] != max):
        time.sleep(0.1)
    self.assertEqual(stats['waiting_threads'], max)
    unfreeze_flag.set()
    action_thread.join()
    self.assertTrue((executeCommand_mock.call_count == 5))
    self.assertFalse(execute_status_command_mock.called)
    executeCommand_mock.reset_mock()
    execute_status_command_mock.reset_mock()
    n = 5
    portion = []
    for i in range(0, n):
        status_command = {'componentName': 'DATANODE', 'commandType': 'STATUS_COMMAND', }
        portion.append(status_command)
    actionQueue.process_portion_of_actions(portion)
    self.assertTrue((execute_status_command_mock.call_count == n))
    self.assertFalse(executeCommand_mock.called)
    unknown_command = {'commandType': 'WRONG_COMMAND', }
    portion = [unknown_command]
    actionQueue.process_portion_of_actions(portion)
    pass
