@patch.object(ActionQueue, 'executeCommand')
@patch.object(ActionQueue, 'stopped')
def test_upgradeCommand_dispatching(self, stopped_method, executeCommand_method):
    queue = ActionQueue(config=MagicMock())
    command = {'commandId': 17, 'role': 'role', 'taskId': 'taskId', 'clusterName': 'clusterName', 'serviceName': 'serviceName', 'roleCommand': 'UPGRADE', 'hostname': 'localhost.localdomain', 'hostLevelParams': 'hostLevelParams', 'clusterHostInfo': 'clusterHostInfo', 'configurations': 'configurations', 'commandType': 'EXECUTION_COMMAND', 'configurations': {'global': {}, }, 'roleParams': {}, 'commandParams': {'source_stack_version': 'HDP-1.2.1', 'target_stack_version': 'HDP-1.3.0', }, }
    result = [{'exitcode': 0, 'stdout': 'abc', 'stderr': 'def', }]
    executeCommand_method.return_value = result
    stopped_method.side_effect = [False, False, True, True, True]
    queue.stopped = stopped_method
    queue.IDLE_SLEEP_TIME = 0.001
    queue.put(command)
    queue.run()
    self.assertTrue(executeCommand_method.called)
    self.assertEquals(queue.resultQueue.qsize(), 1)
    returned_result = queue.resultQueue.get()
    self.assertIs(returned_result[1], result[0])
