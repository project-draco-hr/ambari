{
  LOG.debug("Reading file " + filePath);
  try {
    FileResource file=new FileResource();
    if (page == null)     page=0L;
    if (filePath.startsWith(FAKE_FILE)) {
      if (page > 1)       throw new IllegalArgumentException("There's only one page in fake files");
      String encodedContent=filePath.substring(FAKE_FILE.length());
      String content=new String(Base64.decodeBase64(encodedContent));
      fillFakeFileObject(filePath,file,content);
    }
 else     if (filePath.startsWith(JSON_PATH_FILE)) {
      if (page > 1)       throw new IllegalArgumentException("There's only one page in fake files");
      String content=getJsonPathContentByUrl(filePath);
      fillFakeFileObject(filePath,file,content);
    }
 else {
      if (!filePath.startsWith("/") && !filePath.startsWith(".")) {
        filePath="/" + filePath;
      }
      FilePaginator paginator=new FilePaginator(filePath,getSharedObjectsFactory().getHdfsApi());
      fillRealFileObject(filePath,page,file,paginator);
    }
    JSONObject object=new JSONObject();
    object.put("file",file);
    return Response.ok(object).status(200).build();
  }
 catch (  WebApplicationException ex) {
    throw ex;
  }
catch (  FileNotFoundException ex) {
    throw new NotFoundFormattedException(ex.getMessage(),ex);
  }
catch (  IllegalArgumentException ex) {
    throw new BadRequestFormattedException(ex.getMessage(),ex);
  }
catch (  Exception ex) {
    throw new ServiceFormattedException(ex.getMessage(),ex);
  }
}
