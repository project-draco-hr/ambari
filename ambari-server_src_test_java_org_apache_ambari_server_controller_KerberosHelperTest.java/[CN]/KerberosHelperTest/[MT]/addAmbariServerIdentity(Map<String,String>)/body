{
  KerberosHelperImpl kerberosHelper=injector.getInstance(KerberosHelperImpl.class);
  boolean createAmbariIdentities=kerberosHelper.createAmbariIdentities(kerberosEnvProperties);
  KerberosIdentityDescriptor ambariKerberosIdentity=null;
  KerberosDescriptor kerberosDescriptor=createMock(KerberosDescriptor.class);
  if (createAmbariIdentities) {
    String ambariServerPrincipalName="ambari-server-${cluster_name}@${realm}";
    KerberosPrincipalType ambariServerPrincipalType=KerberosPrincipalType.USER;
    String ambariServerKeytabFilePath=new File("ambari.server.keytab").getAbsolutePath();
    ambariKerberosIdentity=createMockIdentityDescriptor(KerberosHelper.AMBARI_SERVER_KERBEROS_IDENTITY_NAME,createMockPrincipalDescriptor(ambariServerPrincipalName,ambariServerPrincipalType,"ambari",null),createMockKeytabDescriptor(ambariServerKeytabFilePath,null));
    ArrayList<KerberosIdentityDescriptor> ambarServerComponent1Identities=new ArrayList<KerberosIdentityDescriptor>();
    ambarServerComponent1Identities.add(ambariKerberosIdentity);
    ambarServerComponent1Identities.add(createMockIdentityDescriptor("ambari-server_spnego",createMockPrincipalDescriptor("HTTP/_HOST@${realm}",KerberosPrincipalType.SERVICE,null,null),createMockKeytabDescriptor("spnego.service.keytab",null)));
    HashMap<String,KerberosComponentDescriptor> ambariServerComponentDescriptorMap=new HashMap<String,KerberosComponentDescriptor>();
    KerberosComponentDescriptor componentDescrptor=createMockComponentDescriptor("AMBARI_SERVER",ambarServerComponent1Identities,null);
    ambariServerComponentDescriptorMap.put("AMBARI_SERVER",componentDescrptor);
    KerberosServiceDescriptor ambariServiceKerberosDescriptor=createMockServiceDescriptor("AMBARI",ambariServerComponentDescriptorMap,null);
    expect(ambariServiceKerberosDescriptor.getComponent("AMBARI_SERVER")).andReturn(componentDescrptor).once();
    expect(kerberosDescriptor.getService("AMBARI")).andReturn(ambariServiceKerberosDescriptor).once();
  }
  replayAll();
  injector.getInstance(AmbariMetaInfo.class).init();
  List<KerberosIdentityDescriptor> identities=(createAmbariIdentities) ? kerberosHelper.getAmbariServerIdentities(kerberosDescriptor) : new ArrayList<KerberosIdentityDescriptor>();
  verifyAll();
  if (createAmbariIdentities) {
    Assert.assertEquals(2,identities.size());
    Assert.assertSame(ambariKerberosIdentity,identities.get(0));
  }
 else {
    Assert.assertTrue(identities.isEmpty());
  }
}
