{
  reset(clusterController);
  reset(metaInfo);
  final KerberosOperationHandlerFactory kerberosOperationHandlerFactory=createMock(KerberosOperationHandlerFactory.class);
  expect(kerberosOperationHandlerFactory.getKerberosOperationHandler(KDCType.NONE)).andReturn(null).anyTimes();
  expect(kerberosOperationHandlerFactory.getKerberosOperationHandler(KDCType.MIT_KDC)).andReturn(new KerberosOperationHandler(){
    @Override public void open(    PrincipalKeyCredential administratorCredentials,    String defaultRealm,    Map<String,String> kerberosConfiguration) throws KerberosOperationException {
      setAdministratorCredential(administratorCredentials);
      setDefaultRealm(defaultRealm);
      setOpen(true);
    }
    @Override public void close() throws KerberosOperationException {
    }
    @Override public boolean principalExists(    String principal) throws KerberosOperationException {
      return "principal".equals(principal);
    }
    @Override public Integer createPrincipal(    String principal,    String password,    boolean service) throws KerberosOperationException {
      return null;
    }
    @Override public Integer setPrincipalPassword(    String principal,    String password) throws KerberosOperationException {
      return null;
    }
    @Override public boolean removePrincipal(    String principal) throws KerberosOperationException {
      return false;
    }
  }
).anyTimes();
  injector=Guice.createInjector(new AbstractModule(){
    @Override protected void configure(){
      bind(EntityManager.class).toInstance(createNiceMock(EntityManager.class));
      bind(DBAccessor.class).toInstance(createNiceMock(DBAccessor.class));
      bind(ClusterFactory.class).toInstance(createNiceMock(ClusterFactory.class));
      bind(HostFactory.class).toInstance(createNiceMock(HostFactory.class));
      bind(SecurityHelper.class).toInstance(createNiceMock(SecurityHelper.class));
      bind(OsFamily.class).toInstance(createNiceMock(OsFamily.class));
      bind(AmbariCustomCommandExecutionHelper.class).toInstance(createNiceMock(AmbariCustomCommandExecutionHelper.class));
      bind(AmbariManagementController.class).toInstance(createNiceMock(AmbariManagementController.class));
      bind(AmbariMetaInfo.class).toInstance(metaInfo);
      bind(ActionManager.class).toInstance(createNiceMock(ActionManager.class));
      bind(RequestFactory.class).toInstance(createNiceMock(RequestFactory.class));
      bind(StageFactory.class).toInstance(createNiceMock(StageFactory.class));
      bind(RoleGraphFactory.class).to(RoleGraphFactoryImpl.class);
      bind(Clusters.class).toInstance(createNiceMock(ClustersImpl.class));
      bind(ConfigHelper.class).toInstance(createNiceMock(ConfigHelper.class));
      bind(KerberosOperationHandlerFactory.class).toInstance(kerberosOperationHandlerFactory);
      bind(ClusterController.class).toInstance(clusterController);
      bind(KerberosDescriptorFactory.class).toInstance(kerberosDescriptorFactory);
      bind(KerberosConfigDataFileWriterFactory.class).toInstance(kerberosConfigDataFileWriterFactory);
      bind(StackManagerFactory.class).toInstance(createNiceMock(StackManagerFactory.class));
      bind(KerberosHelper.class).to(KerberosHelperImpl.class);
      bind(CredentialStoreService.class).to(CredentialStoreServiceImpl.class);
    }
  }
);
  setClusterController();
  StageUtils.setTopologyManager(topologyManager);
  expect(topologyManager.getProjectedTopology()).andReturn(Collections.<String,Collection<String>>emptyMap()).anyTimes();
  CredentialStoreService credentialStoreService=injector.getInstance(CredentialStoreService.class);
  if (!credentialStoreService.isInitialized(CredentialStoreType.TEMPORARY)) {
    ((CredentialStoreServiceImpl)credentialStoreService).initializeTemporaryCredentialStore(10,TimeUnit.MINUTES,false);
  }
}
