{
  KerberosHelper kerberosHelper=injector.getInstance(KerberosHelper.class);
  final Map<String,String> clusterEnvProperties=createNiceMock(Map.class);
  expect(clusterEnvProperties.get("security_enabled")).andReturn("true").once();
  expect(clusterEnvProperties.get("kerberos_domain")).andReturn("FOOBAR.COM").once();
  final Config clusterEnvConfig=createNiceMock(Config.class);
  expect(clusterEnvConfig.getProperties()).andReturn(clusterEnvProperties).once();
  final Map<String,String> krb5ConfProperties=createNiceMock(Map.class);
  expect(clusterEnvProperties.get("kdc_host")).andReturn("10.0.100.1").once();
  expect(clusterEnvProperties.get("kadmin_host")).andReturn("10.0.100.1").once();
  expect(clusterEnvProperties.get("realm")).andReturn("EXAMPLE.COM").once();
  final Config krb5ConfConfig=createNiceMock(Config.class);
  expect(krb5ConfConfig.getProperties()).andReturn(krb5ConfProperties).once();
  final Cluster cluster=createNiceMock(Cluster.class);
  expect(cluster.getDesiredConfigByType("cluster-env")).andReturn(clusterEnvConfig).once();
  expect(cluster.getDesiredConfigByType("krb5-conf")).andReturn(krb5ConfConfig).once();
  final KerberosDescriptor kerberosDescriptor=createNiceMock(KerberosDescriptor.class);
  replayAll();
  kerberosHelper.toggleKerberos(cluster,kerberosDescriptor,null);
  verifyAll();
}
