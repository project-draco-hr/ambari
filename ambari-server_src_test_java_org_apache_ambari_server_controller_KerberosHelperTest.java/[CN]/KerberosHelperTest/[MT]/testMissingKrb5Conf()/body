{
  KerberosHelper kerberosHelper=injector.getInstance(KerberosHelper.class);
  final Map<String,String> clusterEnvProperties=createNiceMock(Map.class);
  expect(clusterEnvProperties.get("security_enabled")).andReturn("true").once();
  expect(clusterEnvProperties.get("kerberos_domain")).andReturn("FOOBAR.COM").once();
  final Config clusterEnvConfig=createNiceMock(Config.class);
  expect(clusterEnvConfig.getProperties()).andReturn(clusterEnvProperties).once();
  final Map<String,String> kerberosEnvProperties=createNiceMock(Map.class);
  expect(clusterEnvProperties.get("ldap_url")).andReturn("").once();
  expect(clusterEnvProperties.get("container_dn")).andReturn("").once();
  final Config kerberosEnvConfig=createNiceMock(Config.class);
  expect(kerberosEnvConfig.getProperties()).andReturn(kerberosEnvProperties).once();
  final Cluster cluster=createNiceMock(Cluster.class);
  expect(cluster.getDesiredConfigByType("cluster-env")).andReturn(clusterEnvConfig).once();
  expect(cluster.getDesiredConfigByType("kerberos-env")).andReturn(kerberosEnvConfig).once();
  final KerberosDescriptor kerberosDescriptor=createNiceMock(KerberosDescriptor.class);
  replayAll();
  kerberosHelper.toggleKerberos(cluster,kerberosDescriptor,null);
  verifyAll();
}
