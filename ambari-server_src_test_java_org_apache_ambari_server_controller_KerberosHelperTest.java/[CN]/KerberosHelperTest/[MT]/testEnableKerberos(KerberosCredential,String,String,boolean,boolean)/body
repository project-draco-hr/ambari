{
  KerberosHelper kerberosHelper=injector.getInstance(KerberosHelper.class);
  boolean identitiesManaged=(manageIdentities == null) || !"false".equalsIgnoreCase(manageIdentities);
  final StackId stackVersion=createMock(StackId.class);
  final ServiceComponentHost schKerberosClient=createMock(ServiceComponentHost.class);
  expect(schKerberosClient.getServiceName()).andReturn(Service.Type.KERBEROS.name()).anyTimes();
  expect(schKerberosClient.getServiceComponentName()).andReturn(Role.KERBEROS_CLIENT.name()).anyTimes();
  expect(schKerberosClient.getSecurityState()).andReturn(SecurityState.UNSECURED).anyTimes();
  expect(schKerberosClient.getDesiredSecurityState()).andReturn(SecurityState.UNSECURED).anyTimes();
  expect(schKerberosClient.getStackVersion()).andReturn(stackVersion).anyTimes();
  expect(schKerberosClient.getHostName()).andReturn("host1").anyTimes();
  expect(schKerberosClient.getState()).andReturn(State.INSTALLED).anyTimes();
  final ServiceComponentHost sch1=createMock(ServiceComponentHost.class);
  expect(sch1.getServiceName()).andReturn("SERVICE1").anyTimes();
  expect(sch1.getServiceComponentName()).andReturn("COMPONENT1").anyTimes();
  expect(sch1.getSecurityState()).andReturn(SecurityState.UNSECURED).anyTimes();
  expect(sch1.getDesiredSecurityState()).andReturn(SecurityState.UNSECURED).anyTimes();
  expect(sch1.getStackVersion()).andReturn(stackVersion).anyTimes();
  expect(sch1.getHostName()).andReturn("host1").anyTimes();
  expect(sch1.getState()).andReturn(State.INSTALLED).anyTimes();
  sch1.setDesiredSecurityState(SecurityState.SECURED_KERBEROS);
  expect(expectLastCall()).once();
  sch1.setSecurityState(SecurityState.SECURING);
  expect(expectLastCall()).once();
  final ServiceComponentHost sch2=createMock(ServiceComponentHost.class);
  expect(sch2.getServiceName()).andReturn("SERVICE2").anyTimes();
  expect(sch2.getServiceComponentName()).andReturn("COMPONENT2").anyTimes();
  expect(sch2.getSecurityState()).andReturn(SecurityState.UNSECURED).anyTimes();
  expect(sch2.getDesiredSecurityState()).andReturn(SecurityState.UNSECURED).anyTimes();
  expect(sch2.getStackVersion()).andReturn(stackVersion).anyTimes();
  expect(sch2.getHostName()).andReturn("host1").anyTimes();
  expect(sch2.getState()).andReturn(State.INSTALLED).anyTimes();
  sch2.setDesiredSecurityState(SecurityState.SECURED_KERBEROS);
  expect(expectLastCall()).once();
  sch2.setSecurityState(SecurityState.SECURING);
  expect(expectLastCall()).once();
  final Host host=createNiceMock(Host.class);
  expect(host.getHostName()).andReturn("host1").anyTimes();
  expect(host.getState()).andReturn(HostState.HEALTHY).anyTimes();
  final ServiceComponent serviceComponentKerberosClient=createNiceMock(ServiceComponent.class);
  expect(serviceComponentKerberosClient.getName()).andReturn(Role.KERBEROS_CLIENT.name()).anyTimes();
  expect(serviceComponentKerberosClient.getServiceComponentHosts()).andReturn(Collections.singletonMap("host1",schKerberosClient)).anyTimes();
  final Service serviceKerberos=createStrictMock(Service.class);
  expect(serviceKerberos.getName()).andReturn(Service.Type.KERBEROS.name()).anyTimes();
  expect(serviceKerberos.getServiceComponents()).andReturn(Collections.singletonMap(Role.KERBEROS_CLIENT.name(),serviceComponentKerberosClient)).times(1);
  serviceKerberos.setSecurityState(SecurityState.SECURED_KERBEROS);
  expectLastCall().once();
  final Service service1=createStrictMock(Service.class);
  expect(service1.getName()).andReturn("SERVICE1").anyTimes();
  expect(service1.getServiceComponents()).andReturn(Collections.<String,ServiceComponent>emptyMap()).times(1);
  service1.setSecurityState(SecurityState.SECURED_KERBEROS);
  expectLastCall().once();
  final Service service2=createStrictMock(Service.class);
  expect(service2.getName()).andReturn("SERVICE2").anyTimes();
  expect(service2.getServiceComponents()).andReturn(Collections.<String,ServiceComponent>emptyMap()).times(1);
  service2.setSecurityState(SecurityState.SECURED_KERBEROS);
  expectLastCall().once();
  final Map<String,String> kerberosEnvProperties=createMock(Map.class);
  expect(kerberosEnvProperties.get("kdc_type")).andReturn(kdcType).anyTimes();
  expect(kerberosEnvProperties.get("manage_identities")).andReturn(manageIdentities).anyTimes();
  expect(kerberosEnvProperties.get("realm")).andReturn("FOOBAR.COM").anyTimes();
  final Config kerberosEnvConfig=createMock(Config.class);
  expect(kerberosEnvConfig.getProperties()).andReturn(kerberosEnvProperties).anyTimes();
  final Map<String,String> krb5ConfProperties=createMock(Map.class);
  final Config krb5ConfConfig=createMock(Config.class);
  expect(krb5ConfConfig.getProperties()).andReturn(krb5ConfProperties).anyTimes();
  final Cluster cluster=createMock(Cluster.class);
  expect(cluster.getHosts()).andReturn(Arrays.asList(host)).anyTimes();
  expect(cluster.getClusterId()).andReturn(1L).anyTimes();
  expect(cluster.getSecurityType()).andReturn(SecurityType.KERBEROS).anyTimes();
  expect(cluster.getDesiredConfigByType("krb5-conf")).andReturn(krb5ConfConfig).anyTimes();
  expect(cluster.getDesiredConfigByType("kerberos-env")).andReturn(kerberosEnvConfig).anyTimes();
  expect(cluster.getClusterName()).andReturn("c1").anyTimes();
  expect(cluster.getServices()).andReturn(new HashMap<String,Service>(){
{
      put(Service.Type.KERBEROS.name(),serviceKerberos);
      put("SERVICE1",service1);
      put("SERVICE2",service2);
    }
  }
).anyTimes();
  expect(cluster.getServiceComponentHosts("host1")).andReturn(new ArrayList<ServiceComponentHost>(){
{
      add(schKerberosClient);
      add(sch1);
      add(sch2);
    }
  }
).once();
  expect(cluster.getCurrentStackVersion()).andReturn(new StackId("HDP","2.2")).anyTimes();
  expect(cluster.getSessionAttributes()).andReturn(new HashMap<String,Object>(){
{
      if (kerberosCredential != null) {
        put("kerberos_admin/" + KerberosCredential.KEY_NAME_PRINCIPAL,kerberosCredential.getPrincipal());
        put("kerberos_admin/" + KerberosCredential.KEY_NAME_PASSWORD,kerberosCredential.getPassword());
        put("kerberos_admin/" + KerberosCredential.KEY_NAME_KEYTAB,kerberosCredential.getKeytab());
      }
    }
  }
).anyTimes();
  expect(cluster.getServiceComponentHosts("KERBEROS","KERBEROS_CLIENT")).andReturn(Arrays.asList(schKerberosClient)).once();
  if (identitiesManaged) {
    final Clusters clusters=injector.getInstance(Clusters.class);
    expect(clusters.getHost("host1")).andReturn(host).once();
  }
  final AmbariManagementController ambariManagementController=injector.getInstance(AmbariManagementController.class);
  expect(ambariManagementController.findConfigurationTagsWithOverrides(cluster,null)).andReturn(Collections.<String,Map<String,String>>emptyMap()).once();
  expect(ambariManagementController.getRoleCommandOrder(cluster)).andReturn(createMock(RoleCommandOrder.class)).once();
  final KerberosIdentityDescriptor identityDescriptor1=createMock(KerberosIdentityDescriptor.class);
  final KerberosIdentityDescriptor identityDescriptor2=createMock(KerberosIdentityDescriptor.class);
  final KerberosComponentDescriptor componentDescriptor1=createMock(KerberosComponentDescriptor.class);
  expect(componentDescriptor1.getIdentities(false)).andReturn(new ArrayList<KerberosIdentityDescriptor>(){
{
      add(identityDescriptor1);
    }
  }
).once();
  final KerberosComponentDescriptor componentDescriptor2=createMock(KerberosComponentDescriptor.class);
  expect(componentDescriptor2.getIdentities(false)).andReturn(new ArrayList<KerberosIdentityDescriptor>(){
{
      add(identityDescriptor2);
    }
  }
).once();
  final KerberosServiceDescriptor serviceDescriptor1=createMock(KerberosServiceDescriptor.class);
  expect(serviceDescriptor1.getComponent("COMPONENT1")).andReturn(componentDescriptor1).once();
  expect(serviceDescriptor1.getIdentities(false)).andReturn(null).once();
  final KerberosServiceDescriptor serviceDescriptor2=createMock(KerberosServiceDescriptor.class);
  expect(serviceDescriptor2.getComponent("COMPONENT2")).andReturn(componentDescriptor2).once();
  expect(serviceDescriptor2.getIdentities(false)).andReturn(null).once();
  final KerberosDescriptor kerberosDescriptor=createMock(KerberosDescriptor.class);
  expect(kerberosDescriptor.getService("KERBEROS")).andReturn(null).once();
  expect(kerberosDescriptor.getService("SERVICE1")).andReturn(serviceDescriptor1).once();
  expect(kerberosDescriptor.getService("SERVICE2")).andReturn(serviceDescriptor2).once();
  if (getClusterDescriptor) {
    setupGetDescriptorFromCluster(kerberosDescriptor);
  }
 else   if (getStackDescriptor) {
    setupGetDescriptorFromStack(kerberosDescriptor);
  }
  final StageFactory stageFactory=injector.getInstance(StageFactory.class);
  expect(stageFactory.createNew(anyLong(),anyObject(String.class),anyObject(String.class),anyLong(),anyObject(String.class),anyObject(String.class),anyObject(String.class),anyObject(String.class))).andAnswer(new IAnswer<Stage>(){
    @Override public Stage answer() throws Throwable {
      Stage stage=createNiceMock(Stage.class);
      expect(stage.getHostRoleCommands()).andReturn(Collections.<String,Map<String,HostRoleCommand>>emptyMap()).anyTimes();
      replay(stage);
      return stage;
    }
  }
).anyTimes();
  final RequestStageContainer requestStageContainer=createStrictMock(RequestStageContainer.class);
  expect(requestStageContainer.getLastStageId()).andReturn(-1L).anyTimes();
  expect(requestStageContainer.getId()).andReturn(1L).once();
  requestStageContainer.addStages(anyObject(List.class));
  expectLastCall().once();
  if (identitiesManaged) {
    expect(requestStageContainer.getLastStageId()).andReturn(-1L).anyTimes();
    expect(requestStageContainer.getId()).andReturn(1L).once();
    requestStageContainer.addStages(anyObject(List.class));
    expectLastCall().once();
    expect(requestStageContainer.getLastStageId()).andReturn(0L).anyTimes();
    expect(requestStageContainer.getId()).andReturn(1L).once();
    requestStageContainer.addStages(anyObject(List.class));
    expectLastCall().once();
    expect(requestStageContainer.getLastStageId()).andReturn(1L).anyTimes();
    expect(requestStageContainer.getId()).andReturn(1L).once();
    requestStageContainer.addStages(anyObject(List.class));
    expectLastCall().once();
  }
  expect(requestStageContainer.getLastStageId()).andReturn(2L).anyTimes();
  expect(requestStageContainer.getId()).andReturn(1L).once();
  requestStageContainer.addStages(anyObject(List.class));
  expectLastCall().once();
  expect(requestStageContainer.getLastStageId()).andReturn(3L).anyTimes();
  expect(requestStageContainer.getId()).andReturn(1L).once();
  requestStageContainer.addStages(anyObject(List.class));
  expectLastCall().once();
  replayAll();
  metaInfo.init();
  kerberosHelper.toggleKerberos(cluster,SecurityType.KERBEROS,requestStageContainer,null);
  verifyAll();
}
