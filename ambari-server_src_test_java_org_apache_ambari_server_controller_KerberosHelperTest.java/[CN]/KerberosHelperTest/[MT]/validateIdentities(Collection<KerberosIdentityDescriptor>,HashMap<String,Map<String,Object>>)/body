{
  Assert.assertEquals(expectedDataMap.size(),identities.size());
  for (  KerberosIdentityDescriptor identity : identities) {
    Map<String,Object> expectedData=expectedDataMap.get(identity.getName());
    Assert.assertNotNull(expectedData);
    KerberosPrincipalDescriptor principal=identity.getPrincipalDescriptor();
    Assert.assertNotNull(principal);
    Assert.assertEquals(expectedData.get("principal_name"),principal.getName());
    Assert.assertEquals(expectedData.get("principal_type"),principal.getType());
    Assert.assertEquals(expectedData.get("principal_configuration"),principal.getConfiguration());
    Assert.assertEquals(expectedData.get("principal_local_username"),principal.getLocalUsername());
    KerberosKeytabDescriptor keytab=identity.getKeytabDescriptor();
    Assert.assertNotNull(keytab);
    Assert.assertEquals(expectedData.get("keytab_file"),keytab.getFile());
    Assert.assertEquals(expectedData.get("keytab_owner_name"),keytab.getOwnerName());
    Assert.assertEquals(expectedData.get("keytab_owner_access"),keytab.getOwnerAccess());
    Assert.assertEquals(expectedData.get("keytab_group_name"),keytab.getGroupName());
    Assert.assertEquals(expectedData.get("keytab_group_access"),keytab.getGroupAccess());
    Assert.assertEquals(expectedData.get("keytab_configuration"),keytab.getConfiguration());
    Assert.assertEquals(Boolean.TRUE.equals(expectedData.get("keytab_cachable")),keytab.isCachable());
  }
}
