@patch('socket.socket')
@patch('time.time')
def test_collect_noUrl(self, time, socket):
    alert_meta = {'name': 'alert1', 'label': 'label1', 'serviceName': 'service1', 'componentName': 'component1', 'uuid': '123', 'enabled': 'true', }
    alert_source_meta = {'default_port': 80, }
    cluster = 'c1'
    host = 'host1'
    expected_state = 'CRITICAL'
    expected_text = 'Connection failed: Socket Timeout to host1:80'
    time.side_effect = [123, 5240, 567]
    alert = PortAlert(alert_meta, alert_source_meta, self.config)
    alert.set_cluster(cluster, host)

    def collector_side_effect(clus, data):
        self.assertEquals(data['name'], alert_meta['name'])
        self.assertEquals(data['label'], alert_meta['label'])
        self.assertEquals(data['service'], alert_meta['serviceName'])
        self.assertEquals(data['component'], alert_meta['componentName'])
        self.assertEquals(data['uuid'], alert_meta['uuid'])
        self.assertEquals(data['enabled'], alert_meta['enabled'])
        self.assertEquals(data['state'], expected_state)
        self.assertEquals(data['text'], expected_text)
        self.assertEquals(data['cluster'], cluster)
        self.assertEquals(clus, cluster)
    alert.collector = MagicMock()
    alert.collector.put = Mock(side_effect=collector_side_effect)
    alert.collect()
