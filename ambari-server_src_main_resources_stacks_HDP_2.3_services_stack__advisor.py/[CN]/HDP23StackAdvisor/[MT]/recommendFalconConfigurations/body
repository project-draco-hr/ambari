def recommendFalconConfigurations(self, configurations, clusterData, services, hosts):
    if hasattr(self, 'atlasFalconHookClassName'):
        atlas_application_class = self.atlasFalconHookClassName
    else:
        atlas_application_class = 'org.apache.falcon.atlas.service.AtlasService'
    putFalconStartupProperty = self.putProperty(configurations, 'falcon-startup.properties', services)
    servicesList = [service['StackServices']['service_name'] for service in services['services']]
    application_services_property = '*.application.services'
    if (('falcon-startup.properties' in services['configurations']) and (application_services_property in services['configurations']['falcon-startup.properties']['properties'])):
        application_services_value = services['configurations']['falcon-startup.properties']['properties'][application_services_property]
    else:
        application_services_value = ' '
    include_atlas = ('ATLAS' in servicesList)
    if (include_atlas and (atlas_application_class not in application_services_value)):
        if (application_services_value == ' '):
            application_services_value = atlas_application_class
        else:
            application_services_value = ((application_services_value + ',') + atlas_application_class)
    if ((not include_atlas) and (atlas_application_class in application_services_value)):
        application_classes = []
        for application_class in application_services_value.split(','):
            if ((application_class != atlas_application_class) and (application_class != ' ')):
                application_classes.append(application_class)
        if application_classes:
            application_services_value = ','.join(application_classes)
        else:
            application_services_value = ' '
    putFalconStartupProperty(application_services_property, application_services_value)
