def recommendStormConfigurations(self, configurations, clusterData, services, hosts):
    super(HDP23StackAdvisor, self).recommendStormConfigurations(configurations, clusterData, services, hosts)
    putStormStartupProperty = self.putProperty(configurations, 'storm-site', services)
    servicesList = [service['StackServices']['service_name'] for service in services['services']]
    if ('storm-site' in services['configurations']):
        notifier_plugin_property = 'storm.topology.submission.notifier.plugin.class'
        if ((notifier_plugin_property in services['configurations']['storm-site']['properties']) and (services['configurations']['storm-site']['properties'][notifier_plugin_property] is not None)):
            notifier_plugin_value = services['configurations']['storm-site']['properties'][notifier_plugin_property]
        else:
            notifier_plugin_value = ' '
        atlas_is_present = ('ATLAS' in servicesList)
        atlas_hook_class = 'org.apache.atlas.storm.hook.StormAtlasHook'
        atlas_hook_is_set = (atlas_hook_class in notifier_plugin_value)
        if (atlas_is_present and (not atlas_hook_is_set)):
            notifier_plugin_value = (atlas_hook_class if (notifier_plugin_value == ' ') else ','.join([notifier_plugin_value, atlas_hook_class]))
        if ((not atlas_is_present) and atlas_hook_is_set):
            application_classes = [item for item in notifier_plugin_value.split(',') if ((item != atlas_hook_class) and (item != ' '))]
            notifier_plugin_value = (','.join(application_classes) if application_classes else ' ')
        if ((notifier_plugin_value != ' ') or ((not atlas_is_present) and atlas_hook_is_set)):
            putStormStartupProperty(notifier_plugin_property, notifier_plugin_value)
