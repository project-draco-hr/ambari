def recommendStormConfigurations(self, configurations, clusterData, services, hosts):
    putStormStartupProperty = self.putProperty(configurations, 'storm-site', services)
    servicesList = [service['StackServices']['service_name'] for service in services['services']]
    if ('storm-site' in services['configurations']):
        notifier_plugin_property = 'storm.topology.submission.notifier.plugin.class'
        if (notifier_plugin_property in services['configurations']['storm-site']['properties']):
            notifier_plugin_value = services['configurations']['storm-site']['properties'][notifier_plugin_property]
            if (notifier_plugin_value is None):
                notifier_plugin_value = ' '
        else:
            notifier_plugin_value = ' '
        include_atlas = ('ATLAS' in servicesList)
        atlas_hook_class = 'org.apache.atlas.storm.hook.StormAtlasHook'
        if (include_atlas and (atlas_hook_class not in notifier_plugin_value)):
            if (notifier_plugin_value == ' '):
                notifier_plugin_value = atlas_hook_class
            else:
                notifier_plugin_value = ((notifier_plugin_value + ',') + atlas_hook_class)
        if ((not include_atlas) and (atlas_hook_class in notifier_plugin_value)):
            application_classes = []
            for application_class in notifier_plugin_value.split(','):
                if ((application_class != atlas_hook_class) and (application_class != ' ')):
                    application_classes.append(application_class)
            if application_classes:
                notifier_plugin_value = ','.join(application_classes)
            else:
                notifier_plugin_value = ' '
        if (notifier_plugin_value != ' '):
            putStormStartupProperty(notifier_plugin_property, notifier_plugin_value)
