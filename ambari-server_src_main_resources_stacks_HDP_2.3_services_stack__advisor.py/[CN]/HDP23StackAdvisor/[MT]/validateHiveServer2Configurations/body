def validateHiveServer2Configurations(self, properties, recommendedDefaults, configurations, services, hosts):
    super(HDP23StackAdvisor, self).validateHiveServer2Configurations(properties, recommendedDefaults, configurations, services, hosts)
    hive_server2 = properties
    validationItems = []
    ranger_plugin_properties = getSiteProperties(configurations, 'ranger-hive-plugin-properties')
    hive_env_properties = getSiteProperties(configurations, 'hive-env')
    ranger_plugin_enabled = (('hive_security_authorization' in hive_env_properties) and (hive_env_properties['hive_security_authorization'].lower() == 'ranger'))
    servicesList = [service['StackServices']['service_name'] for service in services['services']]
    if ('RANGER' in servicesList):
        if ranger_plugin_enabled:
            prop_name = 'hive.security.authorization.manager'
            prop_val = 'org.apache.ranger.authorization.hive.authorizer.RangerHiveAuthorizerFactory'
            if ((prop_name in hive_server2) and (hive_server2[prop_name] != prop_val)):
                validationItems.append({'config-name': prop_name, 'item': self.getWarnItem('If Ranger Hive Plugin is enabled. {0} under hiveserver2-site needs to be set to {1}'.format(prop_name, prop_val)), })
            prop_name = 'hive.security.authenticator.manager'
            prop_val = 'org.apache.hadoop.hive.ql.security.SessionStateUserAuthenticator'
            if ((prop_name in hive_server2) and (hive_server2[prop_name] != prop_val)):
                validationItems.append({'config-name': prop_name, 'item': self.getWarnItem('If Ranger Hive Plugin is enabled. {0} under hiveserver2-site needs to be set to {1}'.format(prop_name, prop_val)), })
            prop_name = 'hive.security.authorization.enabled'
            prop_val = 'true'
            if ((prop_name in hive_server2) and (hive_server2[prop_name] != prop_val)):
                validationItems.append({'config-name': prop_name, 'item': self.getWarnItem('If Ranger Hive Plugin is enabled. {0} under hiveserver2-site needs to be set to {1}'.format(prop_name, prop_val)), })
            prop_name = 'hive.conf.restricted.list'
            prop_vals = 'hive.security.authorization.enabled,hive.security.authorization.manager,hive.security.authenticator.manager'.split(',')
            current_vals = []
            missing_vals = []
            if (hive_server2 and (prop_name in hive_server2)):
                current_vals = hive_server2[prop_name].split(',')
                current_vals = [x.strip() for x in current_vals]
            for val in prop_vals:
                if (not (val in current_vals)):
                    missing_vals.append(val)
            if missing_vals:
                validationItems.append({'config-name': prop_name, 'item': self.getWarnItem('If Ranger Hive Plugin is enabled. {0} under hiveserver2-site needs to contain missing value {1}'.format(prop_name, ','.join(missing_vals))), })
        elif (not ranger_plugin_enabled):
            prop_name = 'hive.security.authorization.manager'
            prop_val = 'org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactory'
            if ((prop_name in hive_server2) and (hive_server2[prop_name] != prop_val)):
                validationItems.append({'config-name': prop_name, 'item': self.getWarnItem('If Ranger Hive Plugin is disabled. {0} needs to be set to {1}'.format(prop_name, prop_val)), })
            prop_name = 'hive.security.authenticator.manager'
            prop_val = 'org.apache.hadoop.hive.ql.security.SessionStateUserAuthenticator'
            if ((prop_name in hive_server2) and (hive_server2[prop_name] != prop_val)):
                validationItems.append({'config-name': prop_name, 'item': self.getWarnItem('If Ranger Hive Plugin is disabled. {0} needs to be set to {1}'.format(prop_name, prop_val)), })
    return self.toConfigurationValidationProblems(validationItems, 'hiveserver2-site')
