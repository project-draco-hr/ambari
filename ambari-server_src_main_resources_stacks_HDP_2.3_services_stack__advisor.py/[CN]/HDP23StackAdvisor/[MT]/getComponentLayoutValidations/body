def getComponentLayoutValidations(self, services, hosts):
    parentItems = super(HDP23StackAdvisor, self).getComponentLayoutValidations(services, hosts)
    servicesList = [service['StackServices']['service_name'] for service in services['services']]
    componentsListList = [service['components'] for service in services['services']]
    componentsList = [item['StackServiceComponents'] for sublist in componentsListList for item in sublist]
    childItems = []
    if ('HAWQ' in servicesList):
        hostsList = [host['Hosts']['host_name'] for host in hosts['items']]
        hostsCount = len(hostsList)
        hawqMasterHosts = self.__getHosts(componentsList, 'HAWQMASTER')
        hawqStandbyHosts = self.__getHosts(componentsList, 'HAWQSTANDBY')
        hawqSegmentHosts = self.__getHosts(componentsList, 'HAWQSEGMENT')
        datanodeHosts = self.__getHosts(componentsList, 'DATANODE')
        mismatchHosts = set(hawqSegmentHosts).symmetric_difference(set(datanodeHosts))
        if (len(mismatchHosts) > 0):
            hostsString = ', '.join(mismatchHosts)
            message = 'HAWQSEGMENT is not co-located with DATANODE on the following {0} host(s): {1}'.format(len(mismatchHosts), hostsString)
            childItems.append({'type': 'host-component', 'level': 'WARN', 'message': message, 'component-name': 'HAWQSEGMENT', })
        if ((len(hawqMasterHosts) == 1) and (len(hawqStandbyHosts) == 1) and (hawqMasterHosts == hawqStandbyHosts)):
            message = 'HAWQ Standby Master and HAWQ Master should not be deployed on the same host.'
            childItems.append({'type': 'host-component', 'level': 'ERROR', 'message': message, 'component-name': 'HAWQSTANDBY', 'host': hawqStandbyHosts[0], })
        if ((len(hawqMasterHosts) == 1) and (hostsCount > 1) and self.isLocalHost(hawqMasterHosts[0])):
            message = 'HAWQ Master and Ambari Server should not be deployed on the same host. If you leave them collocated, make sure to set HAWQ Master Port property to a value different from the port number used by Ambari Server database.'
            childItems.append({'type': 'host-component', 'level': 'WARN', 'message': message, 'component-name': 'HAWQMASTER', 'host': hawqMasterHosts[0], })
        if ((len(hawqStandbyHosts) == 1) and (hostsCount > 1) and self.isLocalHost(hawqStandbyHosts[0])):
            message = 'HAWQ Standby Master and Ambari Server should not be deployed on the same host. If you leave them collocated, make sure to set HAWQ Master Port property to a value different from the port number used by Ambari Server database.'
            childItems.append({'type': 'host-component', 'level': 'WARN', 'message': message, 'component-name': 'HAWQSTANDBY', 'host': hawqStandbyHosts[0], })
    if ('PXF' in servicesList):
        pxfHosts = self.__getHosts(componentsList, 'PXF')
        namenodeHosts = self.__getHosts(componentsList, 'NAMENODE')
        datanodeHosts = self.__getHosts(componentsList, 'DATANODE')
        mismatchHosts = sorted(set(namenodeHosts).difference(set(pxfHosts)))
        if (len(mismatchHosts) > 0):
            hostsString = ', '.join(mismatchHosts)
            message = 'PXF is not co-located with NAMENODE on the following {0} host(s): {1}'.format(len(mismatchHosts), hostsString)
            childItems.append({'type': 'host-component', 'level': 'WARN', 'message': message, 'component-name': 'PXF', })
        mismatchHosts = sorted(set(datanodeHosts).difference(set(pxfHosts)))
        if (len(mismatchHosts) > 0):
            hostsString = ', '.join(mismatchHosts)
            message = 'PXF is not co-located with DATANODE on the following {0} host(s): {1}'.format(len(mismatchHosts), hostsString)
            childItems.append({'type': 'host-component', 'level': 'WARN', 'message': message, 'component-name': 'PXF', })
        mismatchHosts = sorted(set(pxfHosts).difference(set(namenodeHosts).union(set(datanodeHosts))))
        if (len(mismatchHosts) > 0):
            hostsString = ', '.join(mismatchHosts)
            message = 'PXF is not co-located with NAMENODE or DATANODE on the following {0} host(s): {1}'.format(len(mismatchHosts), hostsString)
            childItems.append({'type': 'host-component', 'level': 'WARN', 'message': message, 'component-name': 'PXF', })
    if ('SPARK' in servicesList):
        if ('SPARK_THRIFTSERVER' in servicesList):
            if (not ('HIVE_SERVER' in servicesList)):
                message = 'SPARK_THRIFTSERVER requires HIVE services to be selected.'
                childItems.append({'type': 'host-component', 'level': 'ERROR', 'message': message, 'component-name': 'SPARK_THRIFTSERVER', })
        hmsHosts = (self.__getHosts(componentsList, 'HIVE_METASTORE') if ('HIVE' in servicesList) else [])
        sparkTsHosts = (self.__getHosts(componentsList, 'SPARK_THRIFTSERVER') if ('SPARK' in servicesList) else [])
        if ((len(sparkTsHosts) > 0) and (len(hmsHosts) == 0)):
            message = 'SPARK_THRIFTSERVER requires HIVE_METASTORE to be selected/deployed.'
            childItems.append({'type': 'host-component', 'level': 'ERROR', 'message': message, 'component-name': 'SPARK_THRIFTSERVER', })
    parentItems.extend(childItems)
    return parentItems
