def recommendRangerKMSConfigurations(self, configurations, clusterData, services, hosts):
    servicesList = [service['StackServices']['service_name'] for service in services['services']]
    putRangerKmsDbksProperty = self.putProperty(configurations, 'dbks-site', services)
    putRangerKmsProperty = self.putProperty(configurations, 'kms-properties', services)
    kmsEnvProperties = getSiteProperties(services['configurations'], 'kms-env')
    putCoreSiteProperty = self.putProperty(configurations, 'core-site', services)
    putCoreSitePropertyAttribute = self.putPropertyAttribute(configurations, 'core-site')
    putRangerKmsAuditProperty = self.putProperty(configurations, 'ranger-kms-audit', services)
    security_enabled = self.isSecurityEnabled(services)
    putRangerKmsSiteProperty = self.putProperty(configurations, 'kms-site', services)
    putRangerKmsSitePropertyAttribute = self.putPropertyAttribute(configurations, 'kms-site')
    if (('kms-properties' in services['configurations']) and ('DB_FLAVOR' in services['configurations']['kms-properties']['properties'])):
        rangerKmsDbFlavor = services['configurations']['kms-properties']['properties']['DB_FLAVOR']
        if (('db_host' in services['configurations']['kms-properties']['properties']) and ('db_name' in services['configurations']['kms-properties']['properties'])):
            rangerKmsDbHost = services['configurations']['kms-properties']['properties']['db_host']
            rangerKmsDbName = services['configurations']['kms-properties']['properties']['db_name']
            ranger_kms_db_url_dict = {'MYSQL': {'ranger.ks.jpa.jdbc.driver': 'com.mysql.jdbc.Driver', 'ranger.ks.jpa.jdbc.url': ((('jdbc:mysql://' + self.getDBConnectionHostPort(rangerKmsDbFlavor, rangerKmsDbHost)) + '/') + rangerKmsDbName), }, 'ORACLE': {'ranger.ks.jpa.jdbc.driver': 'oracle.jdbc.driver.OracleDriver', 'ranger.ks.jpa.jdbc.url': ('jdbc:oracle:thin:@' + self.getOracleDBConnectionHostPort(rangerKmsDbFlavor, rangerKmsDbHost, rangerKmsDbName)), }, 'POSTGRES': {'ranger.ks.jpa.jdbc.driver': 'org.postgresql.Driver', 'ranger.ks.jpa.jdbc.url': ((('jdbc:postgresql://' + self.getDBConnectionHostPort(rangerKmsDbFlavor, rangerKmsDbHost)) + '/') + rangerKmsDbName), }, 'MSSQL': {'ranger.ks.jpa.jdbc.driver': 'com.microsoft.sqlserver.jdbc.SQLServerDriver', 'ranger.ks.jpa.jdbc.url': ((('jdbc:sqlserver://' + self.getDBConnectionHostPort(rangerKmsDbFlavor, rangerKmsDbHost)) + ';databaseName=') + rangerKmsDbName), }, 'SQLA': {'ranger.ks.jpa.jdbc.driver': 'sap.jdbc4.sqlanywhere.IDriver', 'ranger.ks.jpa.jdbc.url': ((('jdbc:sqlanywhere:host=' + self.getDBConnectionHostPort(rangerKmsDbFlavor, rangerKmsDbHost)) + ';database=') + rangerKmsDbName), }, }
            rangerKmsDbProperties = ranger_kms_db_url_dict.get(rangerKmsDbFlavor, ranger_kms_db_url_dict['MYSQL'])
            for key in rangerKmsDbProperties:
                putRangerKmsDbksProperty(key, rangerKmsDbProperties.get(key))
    if (kmsEnvProperties and self.checkSiteProperties(kmsEnvProperties, 'kms_user') and ('KERBEROS' in servicesList)):
        kmsUser = kmsEnvProperties['kms_user']
        kmsUserOld = getOldValue(self, services, 'kms-env', 'kms_user')
        putCoreSiteProperty('hadoop.proxyuser.{0}.groups'.format(kmsUser), '*')
        if ((kmsUserOld is not None) and (kmsUser != kmsUserOld)):
            putCoreSitePropertyAttribute('hadoop.proxyuser.{0}.groups'.format(kmsUserOld), 'delete', 'true')
            services['forced-configurations'].append({'type': 'core-site', 'name': 'hadoop.proxyuser.{0}.groups'.format(kmsUserOld), })
            services['forced-configurations'].append({'type': 'core-site', 'name': 'hadoop.proxyuser.{0}.groups'.format(kmsUser), })
    if ('HDFS' in servicesList):
        if (('core-site' in services['configurations']) and ('fs.defaultFS' in services['configurations']['core-site']['properties'])):
            default_fs = services['configurations']['core-site']['properties']['fs.defaultFS']
            putRangerKmsAuditProperty('xasecure.audit.destination.hdfs.dir', '{0}/{1}/{2}'.format(default_fs, 'ranger', 'audit'))
    required_services = [{'service': 'YARN', 'config-type': 'yarn-env', 'property-name': 'yarn_user', 'proxy-category': ['hosts', 'users', 'groups'], }, {'service': 'SPARK', 'config-type': 'livy-env', 'property-name': 'livy_user', 'proxy-category': ['hosts', 'users', 'groups'], }]
    required_services_for_secure = [{'service': 'HIVE', 'config-type': 'hive-env', 'property-name': 'hive_user', 'proxy-category': ['hosts', 'users'], }, {'service': 'OOZIE', 'config-type': 'oozie-env', 'property-name': 'oozie_user', 'proxy-category': ['hosts', 'users'], }]
    if security_enabled:
        required_services.extend(required_services_for_secure)
    self.recommendKMSProxyUsers(configurations, services, hosts, required_services)
    ambari_user = self.getAmbariUser(services)
    if security_enabled:
        putRangerKmsSiteProperty('hadoop.kms.proxyuser.{0}.users'.format(ambari_user), '*')
        putRangerKmsSiteProperty('hadoop.kms.proxyuser.{0}.hosts'.format(ambari_user), '*')
        putRangerKmsSiteProperty('hadoop.kms.proxyuser.HTTP.users', '*')
        putRangerKmsSiteProperty('hadoop.kms.proxyuser.HTTP.hosts', '*')
    else:
        self.deleteKMSProxyUsers(configurations, services, hosts, required_services_for_secure)
        putRangerKmsSitePropertyAttribute('hadoop.kms.proxyuser.{0}.hosts'.format(ambari_user), 'delete', 'true')
        putRangerKmsSitePropertyAttribute('hadoop.kms.proxyuser.{0}.users'.format(ambari_user), 'delete', 'true')
        putRangerKmsSitePropertyAttribute('hadoop.kms.proxyuser.HTTP.hosts', 'delete', 'true')
        putRangerKmsSitePropertyAttribute('hadoop.kms.proxyuser.HTTP.users', 'delete', 'true')
