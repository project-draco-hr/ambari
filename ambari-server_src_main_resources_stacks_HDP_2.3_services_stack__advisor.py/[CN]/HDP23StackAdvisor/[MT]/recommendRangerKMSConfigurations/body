def recommendRangerKMSConfigurations(self, configurations, clusterData, services, hosts):
    servicesList = [service['StackServices']['service_name'] for service in services['services']]
    putRangerKmsDbksProperty = self.putProperty(configurations, 'dbks-site', services)
    putRangerKmsProperty = self.putProperty(configurations, 'kms-properties', services)
    kmsEnvProperties = getSiteProperties(services['configurations'], 'kms-env')
    putCoreSiteProperty = self.putProperty(configurations, 'core-site', services)
    putCoreSitePropertyAttribute = self.putPropertyAttribute(configurations, 'core-site')
    if (('kms-properties' in services['configurations']) and ('DB_FLAVOR' in services['configurations']['kms-properties']['properties'])):
        rangerKmsDbFlavor = services['configurations']['kms-properties']['properties']['DB_FLAVOR']
        if (('db_host' in services['configurations']['kms-properties']['properties']) and ('db_name' in services['configurations']['kms-properties']['properties'])):
            rangerKmsDbHost = services['configurations']['kms-properties']['properties']['db_host']
            rangerKmsDbName = services['configurations']['kms-properties']['properties']['db_name']
            ranger_kms_db_url_dict = {'MYSQL': {'ranger.ks.jpa.jdbc.driver': 'com.mysql.jdbc.Driver', 'ranger.ks.jpa.jdbc.url': ((('jdbc:mysql://' + self.getDBConnectionHostPort(rangerKmsDbFlavor, rangerKmsDbHost)) + '/') + rangerKmsDbName), }, 'ORACLE': {'ranger.ks.jpa.jdbc.driver': 'oracle.jdbc.driver.OracleDriver', 'ranger.ks.jpa.jdbc.url': ((('jdbc:oracle:thin:@//' + self.getDBConnectionHostPort(rangerKmsDbFlavor, rangerKmsDbHost)) + '/') + rangerKmsDbName), }, 'POSTGRES': {'ranger.ks.jpa.jdbc.driver': 'org.postgresql.Driver', 'ranger.ks.jpa.jdbc.url': ((('jdbc:postgresql://' + self.getDBConnectionHostPort(rangerKmsDbFlavor, rangerKmsDbHost)) + '/') + rangerKmsDbName), }, 'MSSQL': {'ranger.ks.jpa.jdbc.driver': 'com.microsoft.sqlserver.jdbc.SQLServerDriver', 'ranger.ks.jpa.jdbc.url': ((('jdbc:sqlserver://' + self.getDBConnectionHostPort(rangerKmsDbFlavor, rangerKmsDbHost)) + ';databaseName=') + rangerKmsDbName), }, 'SQLA': {'ranger.ks.jpa.jdbc.driver': 'sap.jdbc4.sqlanywhere.IDriver', 'ranger.ks.jpa.jdbc.url': ((('jdbc:sqlanywhere:host=' + self.getDBConnectionHostPort(rangerKmsDbFlavor, rangerKmsDbHost)) + ';database=') + rangerKmsDbName), }, }
            rangerKmsDbProperties = ranger_kms_db_url_dict.get(rangerKmsDbFlavor, ranger_kms_db_url_dict['MYSQL'])
            for key in rangerKmsDbProperties:
                putRangerKmsDbksProperty(key, rangerKmsDbProperties.get(key))
    if (kmsEnvProperties and self.checkSiteProperties(kmsEnvProperties, 'kms_user') and ('KERBEROS' in servicesList)):
        kmsUser = kmsEnvProperties['kms_user']
        kmsUserOld = getOldValue(self, services, 'kms-env', 'kms_user')
        putCoreSiteProperty('hadoop.proxyuser.{0}.groups'.format(kmsUser), '*')
        if ((kmsUserOld is not None) and (kmsUser != kmsUserOld)):
            putCoreSitePropertyAttribute('hadoop.proxyuser.{0}.groups'.format(kmsUserOld), 'delete', 'true')
            services['forced-configurations'].append({'type': 'core-site', 'name': 'hadoop.proxyuser.{0}.groups'.format(kmsUserOld), })
            services['forced-configurations'].append({'type': 'core-site', 'name': 'hadoop.proxyuser.{0}.groups'.format(kmsUser), })
