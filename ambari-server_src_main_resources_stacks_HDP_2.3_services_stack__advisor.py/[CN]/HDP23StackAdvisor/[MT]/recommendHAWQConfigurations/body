def recommendHAWQConfigurations(self, configurations, clusterData, services, hosts):
    if any(((x in services['configurations']) for x in ['hawq-site', 'hdfs-client'])):
        componentsListList = [service['components'] for service in services['services']]
        componentsList = [item['StackServiceComponents'] for sublist in componentsListList for item in sublist]
        servicesList = [service['StackServices']['service_name'] for service in services['services']]
        numSegments = len(self.__getHosts(componentsList, 'HAWQSEGMENT'))
    if ('hawq-site' in services['configurations']):
        hawq_site = services['configurations']['hawq-site']['properties']
        putHawqSiteProperty = self.putProperty(configurations, 'hawq-site', services)
        if (self.isHawqMasterComponentOnAmbariServer(services) and ('hawq_master_address_port' in hawq_site)):
            putHawqSiteProperty('hawq_master_address_port', '')
        if (numSegments and ('default_hash_table_bucket_number' in hawq_site)):
            putHawqSiteProperty('default_hash_table_bucket_number', (numSegments * 6))
        if (('YARN' in servicesList) and ('yarn-site' in services['configurations'])):
            yarn_site = services['configurations']['yarn-site']['properties']
            for (hs_prop, ys_prop) in self.getHAWQYARNPropertyMapping().items():
                if ((hs_prop in hawq_site) and (ys_prop in yarn_site)):
                    putHawqSiteProperty(hs_prop, yarn_site[ys_prop])
    if ('hdfs-client' in services['configurations']):
        hdfs_client = services['configurations']['hdfs-client']['properties']
        if ('output.replace-datanode-on-failure' in hdfs_client):
            propertyValue = ('true' if (numSegments > 4) else 'false')
            putHdfsClientProperty = self.putProperty(configurations, 'hdfs-client', services)
            putHdfsClientProperty('output.replace-datanode-on-failure', propertyValue)
