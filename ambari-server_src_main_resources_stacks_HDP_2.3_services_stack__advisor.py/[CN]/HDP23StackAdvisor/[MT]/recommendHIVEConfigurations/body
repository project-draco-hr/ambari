def recommendHIVEConfigurations(self, configurations, clusterData, services, hosts):
    super(HDP23StackAdvisor, self).recommendHIVEConfigurations(configurations, clusterData, services, hosts)
    putHiveSiteProperty = self.putProperty(configurations, 'hive-site', services)
    putHiveServerProperty = self.putProperty(configurations, 'hiveserver2-site', services)
    putHiveSitePropertyAttribute = self.putPropertyAttribute(configurations, 'hive-site')
    servicesList = [service['StackServices']['service_name'] for service in services['services']]
    if (str(configurations['hive-env']['properties']['hive_security_authorization']).lower() == 'ranger'):
        putHiveServerProperty('hive.security.authorization.manager', 'org.apache.ranger.authorization.hive.authorizer.RangerHiveAuthorizerFactory')
    jvmGCParams = '-XX:+UseParallelGC'
    if (('ambari-server-properties' in services) and ('java.home' in services['ambari-server-properties'])):
        match = re.match('.*\\/jdk(1\\.\\d+)[\\-\\_\\.][^/]*$', services['ambari-server-properties']['java.home'])
        if (match and (len(match.groups()) > 0)):
            versionSplits = re.split('\\.', match.group(1))
            if (versionSplits and (len(versionSplits) > 1) and (int(versionSplits[0]) > 0) and (int(versionSplits[1]) > 7)):
                jvmGCParams = '-XX:+UseG1GC -XX:+ResizeTLAB'
    putHiveSiteProperty('hive.tez.java.opts', (('-server -Djava.net.preferIPv4Stack=true -XX:NewRatio=8 -XX:+UseNUMA ' + jvmGCParams) + ' -XX:+PrintGCDetails -verbose:gc -XX:+PrintGCTimeStamps'))
    sqla_db_used = (('hive-env' in services['configurations']) and ('hive_database' in services['configurations']['hive-env']['properties']) and (services['configurations']['hive-env']['properties']['hive_database'] == 'Existing SQL Anywhere Database'))
    if sqla_db_used:
        putHiveSiteProperty('datanucleus.rdbms.datastoreAdapterClassName', 'org.datanucleus.store.rdbms.adapter.SQLAnywhereAdapter')
    else:
        putHiveSitePropertyAttribute('datanucleus.rdbms.datastoreAdapterClassName', 'delete', 'true')
    hooks_property = 'hive.exec.post.hooks'
    if (hooks_property in configurations['hive-site']['properties']):
        hooks_value = configurations['hive-site']['properties'][hooks_property]
    else:
        hooks_value = ' '
    include_atlas = ('ATLAS' in servicesList)
    atlas_hook_class = 'org.apache.atlas.hive.hook.HiveHook'
    if (include_atlas and (atlas_hook_class not in hooks_value)):
        if (hooks_value == ' '):
            hooks_value = atlas_hook_class
        else:
            hooks_value = ((hooks_value + ',') + atlas_hook_class)
    if ((not include_atlas) and (atlas_hook_class in hooks_value)):
        hooks_classes = []
        for hook_class in hooks_value.split(','):
            if ((hook_class != atlas_hook_class) and (hook_class != ' ')):
                hooks_classes.append(hook_class)
        if hooks_classes:
            hooks_value = ','.join(hooks_classes)
        else:
            hooks_value = ' '
    putHiveSiteProperty(hooks_property, hooks_value)
    atlas_server_host_info = self.getHostWithComponent('ATLAS', 'ATLAS_SERVER', services, hosts)
    if (include_atlas and atlas_server_host_info):
        atlas_rest_host = atlas_server_host_info['Hosts']['host_name']
        scheme = 'http'
        metadata_port = '21000'
        atlas_server_default_https_port = '21443'
        tls_enabled = 'false'
        if ('application-properties' in services['configurations']):
            if ('atlas.enableTLS' in services['configurations']['application-properties']['properties']):
                tls_enabled = services['configurations']['application-properties']['properties']['atlas.enableTLS']
            if ('atlas.server.http.port' in services['configurations']['application-properties']['properties']):
                metadata_port = services['configurations']['application-properties']['properties']['atlas.server.http.port']
            if (tls_enabled.lower() == 'true'):
                scheme = 'https'
                if ('atlas.server.https.port' in services['configurations']['atlas.server.https.port']['properties']):
                    metadata_port = services['configurations']['application-properties']['properties']['atlas.server.https.port']
                else:
                    metadata_port = atlas_server_default_https_port
        putHiveSiteProperty('atlas.rest.address', '{0}://{1}:{2}'.format(scheme, atlas_rest_host, metadata_port))
    else:
        putHiveSitePropertyAttribute('atlas.cluster.name', 'delete', 'true')
        putHiveSitePropertyAttribute('atlas.rest.address', 'delete', 'true')
