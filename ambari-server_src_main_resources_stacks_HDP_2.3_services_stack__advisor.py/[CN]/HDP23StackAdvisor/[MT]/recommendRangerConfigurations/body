def recommendRangerConfigurations(self, configurations, clusterData, services, hosts):
    super(HDP23StackAdvisor, self).recommendRangerConfigurations(configurations, clusterData, services, hosts)
    servicesList = [service['StackServices']['service_name'] for service in services['services']]
    putRangerAdminProperty = self.putProperty(configurations, 'ranger-admin-site', services)
    putRangerEnvProperty = self.putProperty(configurations, 'ranger-env', services)
    putRangerUgsyncSite = self.putProperty(configurations, 'ranger-ugsync-site', services)
    if (('admin-properties' in services['configurations']) and ('DB_FLAVOR' in services['configurations']['admin-properties']['properties']) and ('db_host' in services['configurations']['admin-properties']['properties']) and ('db_name' in services['configurations']['admin-properties']['properties'])):
        rangerDbFlavor = services['configurations']['admin-properties']['properties']['DB_FLAVOR']
        rangerDbHost = services['configurations']['admin-properties']['properties']['db_host']
        rangerDbName = services['configurations']['admin-properties']['properties']['db_name']
        ranger_db_url_dict = {'MYSQL': {'ranger.jpa.jdbc.driver': 'com.mysql.jdbc.Driver', 'ranger.jpa.jdbc.url': ((('jdbc:mysql://' + self.getDBConnectionHostPort(rangerDbFlavor, rangerDbHost)) + '/') + rangerDbName), }, 'ORACLE': {'ranger.jpa.jdbc.driver': 'oracle.jdbc.driver.OracleDriver', 'ranger.jpa.jdbc.url': ('jdbc:oracle:thin:@' + self.getOracleDBConnectionHostPort(rangerDbFlavor, rangerDbHost, rangerDbName)), }, 'POSTGRES': {'ranger.jpa.jdbc.driver': 'org.postgresql.Driver', 'ranger.jpa.jdbc.url': ((('jdbc:postgresql://' + self.getDBConnectionHostPort(rangerDbFlavor, rangerDbHost)) + '/') + rangerDbName), }, 'MSSQL': {'ranger.jpa.jdbc.driver': 'com.microsoft.sqlserver.jdbc.SQLServerDriver', 'ranger.jpa.jdbc.url': ((('jdbc:sqlserver://' + self.getDBConnectionHostPort(rangerDbFlavor, rangerDbHost)) + ';databaseName=') + rangerDbName), }, 'SQLA': {'ranger.jpa.jdbc.driver': 'sap.jdbc4.sqlanywhere.IDriver', 'ranger.jpa.jdbc.url': ((('jdbc:sqlanywhere:host=' + self.getDBConnectionHostPort(rangerDbFlavor, rangerDbHost)) + ';database=') + rangerDbName), }, }
        rangerDbProperties = ranger_db_url_dict.get(rangerDbFlavor, ranger_db_url_dict['MYSQL'])
        for key in rangerDbProperties:
            putRangerAdminProperty(key, rangerDbProperties.get(key))
        if (('admin-properties' in services['configurations']) and ('DB_FLAVOR' in services['configurations']['admin-properties']['properties']) and ('db_host' in services['configurations']['admin-properties']['properties'])):
            rangerDbFlavor = services['configurations']['admin-properties']['properties']['DB_FLAVOR']
            rangerDbHost = services['configurations']['admin-properties']['properties']['db_host']
            ranger_db_privelege_url_dict = {'MYSQL': {'ranger_privelege_user_jdbc_url': ('jdbc:mysql://' + self.getDBConnectionHostPort(rangerDbFlavor, rangerDbHost)), }, 'ORACLE': {'ranger_privelege_user_jdbc_url': ('jdbc:oracle:thin:@' + self.getOracleDBConnectionHostPort(rangerDbFlavor, rangerDbHost, None)), }, 'POSTGRES': {'ranger_privelege_user_jdbc_url': (('jdbc:postgresql://' + self.getDBConnectionHostPort(rangerDbFlavor, rangerDbHost)) + '/postgres'), }, 'MSSQL': {'ranger_privelege_user_jdbc_url': (('jdbc:sqlserver://' + self.getDBConnectionHostPort(rangerDbFlavor, rangerDbHost)) + ';'), }, 'SQLA': {'ranger_privelege_user_jdbc_url': (('jdbc:sqlanywhere:host=' + self.getDBConnectionHostPort(rangerDbFlavor, rangerDbHost)) + ';'), }, }
            rangerPrivelegeDbProperties = ranger_db_privelege_url_dict.get(rangerDbFlavor, ranger_db_privelege_url_dict['MYSQL'])
            for key in rangerPrivelegeDbProperties:
                putRangerEnvProperty(key, rangerPrivelegeDbProperties.get(key))
    if (('ambari-server-properties' in services) and ('ambari.ldap.isConfigured' in services['ambari-server-properties']) and (services['ambari-server-properties']['ambari.ldap.isConfigured'].lower() == 'true')):
        serverProperties = services['ambari-server-properties']
        if ('authentication.ldap.baseDn' in serverProperties):
            putRangerUgsyncSite('ranger.usersync.ldap.searchBase', serverProperties['authentication.ldap.baseDn'])
        if ('authentication.ldap.groupMembershipAttr' in serverProperties):
            putRangerUgsyncSite('ranger.usersync.group.memberattributename', serverProperties['authentication.ldap.groupMembershipAttr'])
        if ('authentication.ldap.groupNamingAttr' in serverProperties):
            putRangerUgsyncSite('ranger.usersync.group.nameattribute', serverProperties['authentication.ldap.groupNamingAttr'])
        if ('authentication.ldap.groupObjectClass' in serverProperties):
            putRangerUgsyncSite('ranger.usersync.group.objectclass', serverProperties['authentication.ldap.groupObjectClass'])
        if ('authentication.ldap.managerDn' in serverProperties):
            putRangerUgsyncSite('ranger.usersync.ldap.binddn', serverProperties['authentication.ldap.managerDn'])
        if ('authentication.ldap.primaryUrl' in serverProperties):
            ldap_protocol = 'ldap://'
            if (('authentication.ldap.useSSL' in serverProperties) and (serverProperties['authentication.ldap.useSSL'] == 'true')):
                ldap_protocol = 'ldaps://'
            ldapUrl = ((ldap_protocol + serverProperties['authentication.ldap.primaryUrl']) if serverProperties['authentication.ldap.primaryUrl'] else serverProperties['authentication.ldap.primaryUrl'])
            putRangerUgsyncSite('ranger.usersync.ldap.url', ldapUrl)
        if ('authentication.ldap.userObjectClass' in serverProperties):
            putRangerUgsyncSite('ranger.usersync.ldap.user.objectclass', serverProperties['authentication.ldap.userObjectClass'])
        if ('authentication.ldap.usernameAttribute' in serverProperties):
            putRangerUgsyncSite('ranger.usersync.ldap.user.nameattribute', serverProperties['authentication.ldap.usernameAttribute'])
    authMap = {'org.apache.ranger.unixusersync.process.UnixUserGroupBuilder': 'UNIX', 'org.apache.ranger.ldapusersync.process.LdapUserGroupBuilder': 'LDAP', }
    if (('ranger-ugsync-site' in services['configurations']) and ('ranger.usersync.source.impl.class' in services['configurations']['ranger-ugsync-site']['properties'])):
        rangerUserSyncClass = services['configurations']['ranger-ugsync-site']['properties']['ranger.usersync.source.impl.class']
        if (rangerUserSyncClass in authMap):
            rangerSqlConnectorProperty = authMap.get(rangerUserSyncClass)
            putRangerAdminProperty('ranger.authentication.method', rangerSqlConnectorProperty)
    if (('ranger-env' in services['configurations']) and ('is_solrCloud_enabled' in services['configurations']['ranger-env']['properties'])):
        isSolrCloudEnabled = (services['configurations']['ranger-env']['properties']['is_solrCloud_enabled'] == 'true')
    else:
        isSolrCloudEnabled = False
    if isSolrCloudEnabled:
        zookeeper_host_port = self.getZKHostPortString(services)
        ranger_audit_zk_port = ''
        if zookeeper_host_port:
            ranger_audit_zk_port = '{0}/{1}'.format(zookeeper_host_port, 'ranger_audits')
            putRangerAdminProperty('ranger.audit.solr.zookeepers', ranger_audit_zk_port)
    else:
        putRangerAdminProperty('ranger.audit.solr.zookeepers', 'NONE')
    include_hdfs = ('HDFS' in servicesList)
    if include_hdfs:
        if (('core-site' in services['configurations']) and ('fs.defaultFS' in services['configurations']['core-site']['properties'])):
            default_fs = services['configurations']['core-site']['properties']['fs.defaultFS']
            putRangerEnvProperty('xasecure.audit.destination.hdfs.dir', '{0}/{1}/{2}'.format(default_fs, 'ranger', 'audit'))
    ranger_services = [{'service_name': 'HDFS', 'audit_file': 'ranger-hdfs-audit', }, {'service_name': 'YARN', 'audit_file': 'ranger-yarn-audit', }, {'service_name': 'HBASE', 'audit_file': 'ranger-hbase-audit', }, {'service_name': 'HIVE', 'audit_file': 'ranger-hive-audit', }, {'service_name': 'KNOX', 'audit_file': 'ranger-knox-audit', }, {'service_name': 'KAFKA', 'audit_file': 'ranger-kafka-audit', }, {'service_name': 'STORM', 'audit_file': 'ranger-storm-audit', }]
    for item in range(len(ranger_services)):
        if (ranger_services[item]['service_name'] in servicesList):
            component_audit_file = ranger_services[item]['audit_file']
            if (component_audit_file in services['configurations']):
                ranger_audit_dict = [{'filename': 'ranger-env', 'configname': 'xasecure.audit.destination.db', 'target_configname': 'xasecure.audit.destination.db', }, {'filename': 'ranger-env', 'configname': 'xasecure.audit.destination.hdfs', 'target_configname': 'xasecure.audit.destination.hdfs', }, {'filename': 'ranger-env', 'configname': 'xasecure.audit.destination.hdfs.dir', 'target_configname': 'xasecure.audit.destination.hdfs.dir', }, {'filename': 'ranger-env', 'configname': 'xasecure.audit.destination.solr', 'target_configname': 'xasecure.audit.destination.solr', }, {'filename': 'ranger-admin-site', 'configname': 'ranger.audit.solr.urls', 'target_configname': 'xasecure.audit.destination.solr.urls', }, {'filename': 'ranger-admin-site', 'configname': 'ranger.audit.solr.zookeepers', 'target_configname': 'xasecure.audit.destination.solr.zookeepers', }]
                putRangerAuditProperty = self.putProperty(configurations, component_audit_file, services)
                for item in ranger_audit_dict:
                    if ((item['filename'] in services['configurations']) and (item['configname'] in services['configurations'][item['filename']]['properties'])):
                        if ((item['filename'] in configurations) and (item['configname'] in configurations[item['filename']]['properties'])):
                            rangerAuditProperty = configurations[item['filename']]['properties'][item['configname']]
                        else:
                            rangerAuditProperty = services['configurations'][item['filename']]['properties'][item['configname']]
                        putRangerAuditProperty(item['target_configname'], rangerAuditProperty)
    audit_solr_flag = 'false'
    audit_db_flag = 'false'
    ranger_audit_source_type = 'solr'
    if (('ranger-env' in services['configurations']) and ('xasecure.audit.destination.solr' in services['configurations']['ranger-env']['properties'])):
        audit_solr_flag = services['configurations']['ranger-env']['properties']['xasecure.audit.destination.solr']
    if (('ranger-env' in services['configurations']) and ('xasecure.audit.destination.db' in services['configurations']['ranger-env']['properties'])):
        audit_db_flag = services['configurations']['ranger-env']['properties']['xasecure.audit.destination.db']
    if ((audit_db_flag == 'true') and (audit_solr_flag == 'false')):
        ranger_audit_source_type = 'db'
    putRangerAdminProperty('ranger.audit.source.type', ranger_audit_source_type)
    knox_host = 'localhost'
    knox_port = '8443'
    if ('KNOX' in servicesList):
        knox_hosts = self.getComponentHostNames(services, 'KNOX', 'KNOX_GATEWAY')
        knox_host = knox_hosts[0]
        if (('gateway-site' in services['configurations']) and ('gateway.port' in services['configurations']['gateway-site']['properties'])):
            knox_port = services['configurations']['gateway-site']['properties']['gateway.port']
        putRangerAdminProperty('ranger.sso.providerurl', 'https://{0}:{1}/gateway/knoxsso/api/v1/websso'.format(knox_host, knox_port))
