{
  if (!isInitializedForHA) {
    init();
  }
  if (targetCollectorHostSupplier != null) {
    String targetCollector=targetCollectorHostSupplier.get();
    if (targetCollector != null) {
      return targetCollector;
    }
  }
  Collection<String> collectorHosts=getConfiguredCollectorHosts();
  LOG.debug("Trying to find live collector host from : " + collectorHosts);
  if (collectorHosts != null && !collectorHosts.isEmpty()) {
    for (    String hostStr : collectorHosts) {
      hostStr=hostStr.trim();
      if (!hostStr.isEmpty()) {
        try {
          Collection<String> liveHosts=findLiveCollectorHostsFromKnownCollector(hostStr,getCollectorPort());
          for (          String host : liveHosts) {
            allKnownLiveCollectors.add(host);
          }
          break;
        }
 catch (        MetricCollectorUnavailableException e) {
          LOG.info("Collector " + hostStr + " is not longer live. Removing "+ "it from list of know live collector hosts : "+ allKnownLiveCollectors);
          allKnownLiveCollectors.remove(hostStr);
        }
      }
    }
  }
  if (allKnownLiveCollectors.size() == 0 && getZookeeperQuorum() != null) {
    allKnownLiveCollectors.addAll(collectorHAHelper.findLiveCollectorHostsFromZNode());
  }
  if (allKnownLiveCollectors.size() != 0) {
    targetCollectorHostSupplier=Suppliers.memoizeWithExpiration(new Supplier<String>(){
      @Override public String get(){
        return metricSinkWriteShardStrategy.findCollectorShard(new ArrayList<>(allKnownLiveCollectors));
      }
    }
,rand.nextInt(COLLECTOR_HOST_CACHE_MAX_EXPIRATION_MINUTES - COLLECTOR_HOST_CACHE_MIN_EXPIRATION_MINUTES + 1) + COLLECTOR_HOST_CACHE_MIN_EXPIRATION_MINUTES,TimeUnit.MINUTES);
    return targetCollectorHostSupplier.get();
  }
  LOG.warn("Couldn't find any live collectors. Returning null");
  return null;
}
