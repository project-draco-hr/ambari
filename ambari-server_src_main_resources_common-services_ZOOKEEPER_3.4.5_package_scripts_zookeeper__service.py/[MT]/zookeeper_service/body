@OsFamilyFuncImpl(os_family=OsFamilyImpl.DEFAULT)
def zookeeper_service(action='start', upgrade_type=None):
    import params
    if ((upgrade_type is None) and (not os.path.exists(os.path.join(params.stack_root, '/current/zookeeper-server'))) and params.current_version and check_stack_feature(StackFeature.ROLLING_UPGRADE, format_stack_version(params.version))):
        conf_select.select(params.stack_name, 'zookeeper', params.current_version)
        stack_select.select('zookeeper-server', params.version)
    cmd = format('env ZOOCFGDIR={config_dir} ZOOCFG=zoo.cfg {zk_bin}/zkServer.sh')
    if (action == 'start'):
        daemon_cmd = format('source {config_dir}/zookeeper-env.sh ; {cmd} start')
        no_op_test = format('ls {zk_pid_file} >/dev/null 2>&1 && ps -p `cat {zk_pid_file}` >/dev/null 2>&1')
        try:
            Execute(daemon_cmd, not_if=no_op_test, user=params.zk_user)
        except:
            show_logs(params.zk_log_dir, params.zk_user)
            raise
        if params.security_enabled:
            kinit_cmd = format('{kinit_path_local} -kt {smoke_user_keytab} {smokeuser_principal};')
            Execute(kinit_cmd, user=params.smokeuser)
    elif (action == 'stop'):
        daemon_cmd = format('source {config_dir}/zookeeper-env.sh ; {cmd} stop')
        try:
            Execute(daemon_cmd, user=params.zk_user)
        except:
            show_logs(params.zk_log_dir, params.zk_user)
            raise
        File(params.zk_pid_file, action='delete')
