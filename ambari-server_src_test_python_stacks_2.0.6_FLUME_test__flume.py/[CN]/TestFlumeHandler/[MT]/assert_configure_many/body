def assert_configure_many(self):
    self.assertResourceCalled('Directory', '/etc/flume/conf', recursive=True)
    self.assertResourceCalled('Directory', '/var/log/flume', owner='flume')
    self.assertResourceCalled('File', '/etc/flume/conf/flume-env.sh', owner='flume', content=InlineTemplate(self.getConfig()['configurations']['flume-env']['content']))
    top = build_flume(self.getConfig()['configurations']['flume-conf']['content'])
    self.assertResourceCalled('Directory', '/etc/flume/conf/a1')
    self.assertResourceCalled('PropertiesFile', '/etc/flume/conf/a1/flume.conf', mode=420, properties=top['a1'])
    self.assertResourceCalled('File', '/etc/flume/conf/a1/log4j.properties', content=Template('log4j.properties.j2', agent_name='a1'), mode=420)
    self.assertResourceCalled('File', '/etc/flume/conf/a1/ambari-meta.json', content='{"channels_count": 1, "sinks_count": 1, "sources_count": 1}', mode=420)
    self.assertResourceCalled('Directory', '/etc/flume/conf/b1')
    self.assertResourceCalled('PropertiesFile', '/etc/flume/conf/b1/flume.conf', mode=420, properties=top['b1'])
    self.assertResourceCalled('File', '/etc/flume/conf/b1/log4j.properties', content=Template('log4j.properties.j2', agent_name='b1'), mode=420)
    self.assertResourceCalled('File', '/etc/flume/conf/b1/ambari-meta.json', content='{"channels_count": 1, "sinks_count": 1, "sources_count": 1}', mode=420)
