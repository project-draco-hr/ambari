@patch('os.path.isfile')
@patch('flume.cmd_target_names')
@patch('flume._set_desired_state')
def test_start_default(self, set_desired_mock, cmd_target_names_mock, os_path_isfile_mock):
    os_path_isfile_mock.side_effect = [True, False]
    cmd_target_names_mock.return_value = ['a1']
    self.executeScript('2.0.6/services/FLUME/package/scripts/flume_handler.py', classname='FlumeHandler', command='start', config_file='default.json')
    self.assert_configure_default()
    self.assertTrue(set_desired_mock.called)
    self.assertTrue((set_desired_mock.call_args[0][0] == 'STARTED'))
    self.assertResourceCalled('Execute', "/usr/bin/sudo su flume -l -s /bin/bash -c 'export  PATH=/bin JAVA_HOME=/usr/jdk64/jdk1.7.0_45 > /dev/null ; /usr/bin/flume-ng agent --name a1 --conf /etc/flume/conf/a1 --conf-file /etc/flume/conf/a1/flume.conf -Dflume.monitoring.type=ganglia -Dflume.monitoring.hosts=c6401.ambari.apache.org:8655' &", environment={'JAVA_HOME': u'/usr/jdk64/jdk1.7.0_45', }, wait_for_finish=False)
    self.assertResourceCalled('Execute', 'pgrep -o -u flume -f ^/usr/jdk64/jdk1.7.0_45.*a1.* > /var/run/flume/a1.pid', logoutput=True, tries=20, try_sleep=6)
    self.assertNoMoreResources()
