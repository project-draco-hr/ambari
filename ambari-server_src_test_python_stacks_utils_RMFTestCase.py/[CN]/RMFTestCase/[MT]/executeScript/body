def executeScript(self, path, classname=None, command=None, config_file=None, config_dict=None, config_overrides=None, hdp_stack_version=None, checked_call_mocks=itertools.cycle([(0, 'OK.')]), call_mocks=itertools.cycle([(0, 'OK.')]), os_type=('Suse', '11', 'Final'), kinit_path_local='/usr/bin/kinit', os_env={'PATH': '/bin', }, target=TARGET_STACKS, mocks_dict={}):
    norm_path = os.path.normpath(path)
    src_dir = RMFTestCase.get_src_folder()
    if (target == self.TARGET_STACKS):
        stack_version = norm_path.split(os.sep)[0]
        base_path = os.path.join(src_dir, PATH_TO_STACKS)
        configs_path = os.path.join(src_dir, PATH_TO_STACK_TESTS, stack_version, 'configs')
    elif (target == self.TARGET_CUSTOM_ACTIONS):
        base_path = os.path.join(src_dir, PATH_TO_CUSTOM_ACTIONS)
        configs_path = os.path.join(src_dir, PATH_TO_CUSTOM_ACTION_TESTS, 'configs')
    elif (target == self.TARGET_COMMON_SERVICES):
        base_path = os.path.join(src_dir, PATH_TO_COMMON_SERVICES)
        configs_path = os.path.join(src_dir, PATH_TO_STACK_TESTS, hdp_stack_version, 'configs')
    else:
        raise RuntimeError('Wrong target value %s', target)
    script_path = os.path.join(base_path, norm_path)
    if ((config_file is not None) and (config_dict is None)):
        config_file_path = os.path.join(configs_path, config_file)
        try:
            with open(config_file_path, 'r') as f:
                self.config_dict = json.load(f)
        except IOError:
            raise RuntimeError(('Can not read config file: ' + config_file_path))
    elif ((config_dict is not None) and (config_file is None)):
        self.config_dict = config_dict
    else:
        raise RuntimeError('Please specify either config_file_path or config_dict parameter')
    if config_overrides:
        for (key, value) in config_overrides.iteritems():
            self.config_dict[key] = value
    self.config_dict = ConfigDictionary(self.config_dict)
    scriptsdir = os.path.dirname(script_path)
    basedir = os.path.dirname(scriptsdir)
    sys.path.append(scriptsdir)
    try:
        with patch.object(platform, 'linux_distribution', return_value=os_type):
            script_module = imp.load_source(classname, script_path)
    except IOError as err:
        raise RuntimeError(('Cannot load class %s from %s: %s' % (classname, norm_path, err.message)))
    script_class_inst = RMFTestCase._get_attr(script_module, classname)()
    method = RMFTestCase._get_attr(script_class_inst, command)
    if ('params' in sys.modules):
        del sys.modules['params']
    if ('params_windows' in sys.modules):
        del sys.modules['params_windows']
    if ('params_linux' in sys.modules):
        del sys.modules['params_linux']
    if ('status_params' in sys.modules):
        del sys.modules['status_params']
    with Environment(basedir, test_mode=True) as RMFTestCase.env:
        with patch('resource_management.core.shell.checked_call', side_effect=checked_call_mocks) as mocks_dict['checked_call']:
            with patch('resource_management.core.shell.call', side_effect=call_mocks) as mocks_dict['call']:
                with patch.object(Script, 'get_config', return_value=self.config_dict) as mocks_dict['get_config']:
                    with patch.object(Script, 'get_tmp_dir', return_value='/tmp') as mocks_dict['get_tmp_dir']:
                        with patch.object(Script, 'install_packages') as mocks_dict['install_packages']:
                            with patch('resource_management.libraries.functions.get_kinit_path', return_value=kinit_path_local) as mocks_dict['get_kinit_path']:
                                with patch.object(platform, 'linux_distribution', return_value=os_type) as mocks_dict['linux_distribution']:
                                    with patch.object(os, 'environ', new=os_env) as mocks_dict['environ']:
                                        method(RMFTestCase.env)
    sys.path.remove(scriptsdir)
