{
  if (cdef.getName() == null || cdef.getName().equals("")) {
    String msg="Cluster Name must be specified and must be non-empty string";
    throw new WebApplicationException((new ExceptionResponse(msg,Response.Status.BAD_REQUEST)).get());
  }
  if (cdef.getNodes() == null || cdef.getNodes().equals("")) {
    String msg="Cluster node range must be specified and must be non-empty string";
    throw new WebApplicationException((new ExceptionResponse(msg,Response.Status.BAD_REQUEST)).get());
  }
  if (cdef.getBlueprintName() == null || cdef.getBlueprintName().equals("")) {
    String msg="Cluster blueprint must be specified and must be non-empty string";
    throw new WebApplicationException((new ExceptionResponse(msg,Response.Status.BAD_REQUEST)).get());
  }
  if (cdef.getBlueprintRevision() == null || cdef.getBlueprintRevision().equals("")) {
    String msg="Cluster blueprint revision must be specified";
    throw new WebApplicationException((new ExceptionResponse(msg,Response.Status.BAD_REQUEST)).get());
  }
  Stack bp=Blueprints.getInstance().getStack(cdef.getBlueprintName(),Integer.parseInt(cdef.getBlueprintRevision()));
  while (bp.getParentName() != null) {
    if (bp.getParentRevision() == null) {
      bp=Blueprints.getInstance().getStack(bp.getParentName(),-1);
    }
 else {
      bp=Blueprints.getInstance().getStack(bp.getParentName(),Integer.parseInt(bp.getParentRevision()));
    }
  }
  if (cdef.getDescription() == null) {
    cdef.setDescription("Ambari cluster : " + cdef.getName());
  }
  if (cdef.getGoalState() == null) {
    cdef.setGoalState(cdef.GOAL_STATE_INACTIVE);
  }
  if (cdef.getActiveServices() == null) {
    List<String> services=new ArrayList<String>();
    services.add("ALL");
    cdef.setActiveServices(services);
  }
  List<String> cluster_node_range=new ArrayList<String>();
  cluster_node_range.addAll(getHostnamesFromRangeExpressions(cdef.getNodes()));
  if (cdef.getRoleToNodes() != null) {
    List<String> nodes_specified_using_role_association=new ArrayList<String>();
    for (    RoleToNodes e : cdef.getRoleToNodes()) {
      List<String> hosts=getHostnamesFromRangeExpressions(e.getNodes());
      nodes_specified_using_role_association.addAll(hosts);
    }
    nodes_specified_using_role_association.removeAll(cluster_node_range);
    if (!nodes_specified_using_role_association.isEmpty()) {
      String msg="Some nodes explicityly associated with roles using RoleToNodesMap do not belong in the " + "golbal node range specified for the cluster : [" + nodes_specified_using_role_association + "]";
      throw new WebApplicationException((new ExceptionResponse(msg,Response.Status.BAD_REQUEST)).get());
    }
  }
}
