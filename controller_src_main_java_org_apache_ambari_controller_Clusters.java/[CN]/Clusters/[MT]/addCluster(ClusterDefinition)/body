{
  if (c.getName() == null || c.getName().equals("")) {
    Exception e=new Exception("Cluster Name must be specified and must be non-empty string");
    throw new WebApplicationException(e,Response.Status.INTERNAL_SERVER_ERROR);
  }
synchronized (operational_clusters) {
    if (operational_clusters.containsKey(c.getName())) {
      Exception e=new Exception("Cluster [" + c.getName() + "] already exists");
      throw new WebApplicationException(e,Response.Status.CONFLICT);
    }
    Date requestTime=new Date();
    Cluster cls=new Cluster();
    ClusterState clsState=new ClusterState();
    clsState.setCreationTime(requestTime);
    clsState.setLastUpdateTime(requestTime);
    clsState.setDeployTime((Date)null);
    clsState.setState(ClusterState.CLUSTER_STATE_INACTIVE);
    cls.setID(UUID.randomUUID().toString());
    cls.setClusterDefinition(c);
    cls.setClusterState(clsState);
    if (c.getNodeRangeExpressions() != null) {
      updateClusterNodesReservation(cls,c.getNodeRangeExpressions());
    }
    if (c.getRoleToNodesMap() != null) {
      updateNodeToRolesAssociation(c,c.getRoleToNodesMap());
    }
 else {
    }
    this.operational_clusters.put(c.getName(),cls);
    this.operational_clusters_id_to_name.put(cls.getID(),c.getName());
  }
  return c;
}
