{
  if (!clusterExists(clusterName)) {
    return addCluster(clusterName,c,dry_run);
  }
  Cluster cls=getClusterByName(clusterName);
  ClusterDefinition newcd=new ClusterDefinition();
  newcd.setName(clusterName);
  boolean clsDefChanged=false;
  boolean configChanged=false;
  if (c.getStackName() != null && !c.getStackName().equals(cls.getClusterDefinition(-1).getStackName())) {
    newcd.setStackName(c.getStackName());
    clsDefChanged=true;
    configChanged=true;
  }
 else {
    newcd.setStackName(cls.getClusterDefinition(-1).getStackName());
  }
  if (c.getStackRevision() != null && !c.getStackRevision().equals(cls.getClusterDefinition(-1).getStackRevision())) {
    newcd.setStackRevision(c.getStackRevision());
    clsDefChanged=true;
    configChanged=true;
  }
 else {
    newcd.setStackRevision(cls.getClusterDefinition(-1).getStackRevision());
  }
  if (c.getDescription() != null && !c.getDescription().equals(cls.getClusterDefinition(-1).getDescription())) {
    newcd.setDescription(c.getDescription());
    clsDefChanged=true;
  }
 else {
    newcd.setDescription(cls.getClusterDefinition(-1).getDescription());
  }
  if (c.getGoalState() != null && !c.getGoalState().equals(cls.getClusterDefinition(-1).getGoalState())) {
    newcd.setGoalState(c.getGoalState());
    clsDefChanged=true;
  }
 else {
    newcd.setGoalState(cls.getClusterDefinition(-1).getGoalState());
  }
  if (c.getEnabledServices() != null && !c.getEnabledServices().equals(cls.getClusterDefinition(-1).getEnabledServices())) {
    newcd.setEnabledServices(c.getEnabledServices());
    clsDefChanged=true;
  }
 else {
    newcd.setEnabledServices(cls.getClusterDefinition(-1).getEnabledServices());
  }
  boolean updateNodesReservation=false;
  boolean updateNodeToRolesAssociation=false;
  if (c.getNodes() != null && !c.getNodes().equals(cls.getClusterDefinition(-1).getNodes())) {
    newcd.setNodes(c.getNodes());
    updateNodesReservation=true;
    clsDefChanged=true;
  }
 else {
    newcd.setNodes(cls.getClusterDefinition(-1).getNodes());
  }
  if (c.getRoleToNodesMap() != null && !c.getRoleToNodesMap().toString().equals(cls.getClusterDefinition(-1).getRoleToNodesMap().toString())) {
    newcd.setRoleToNodesMap(c.getRoleToNodesMap());
    updateNodeToRolesAssociation=true;
    clsDefChanged=true;
  }
 else {
    newcd.setRoleToNodesMap(cls.getClusterDefinition(-1).getRoleToNodesMap());
  }
  if (!clsDefChanged) {
    return cls.getClusterDefinition(-1);
  }
  if (cls.getClusterState().getState().equals(ClusterState.CLUSTER_STATE_ATTIC) && newcd.getGoalState().equals(ClusterState.CLUSTER_STATE_ATTIC)) {
    ClusterState cs=cls.getClusterState();
    cs.setLastUpdateTime(Util.getXMLGregorianCalendar(new Date()));
    cls.updateClusterDefinition(newcd);
    cls.updateClusterState(cs);
    return cls.getClusterDefinition(-1);
  }
  validateClusterDefinition(clusterName,newcd);
  if (dry_run) {
    System.out.println("Dry run for update cluster..");
    return newcd;
  }
  ClusterState cs=cls.getClusterState();
  cs.setLastUpdateTime(Util.getXMLGregorianCalendar(new Date()));
  cls.updateClusterDefinition(newcd);
  cls.updateClusterState(cs);
  if (updateNodesReservation) {
    updateClusterNodesReservation(cls.getName(),c);
  }
  if (updateNodeToRolesAssociation) {
    updateNodeToRolesAssociation(newcd.getNodes(),c.getRoleToNodesMap());
  }
  System.out.println(getInstallAndConfigureScript(clusterName,-1));
  if (c.getGoalState().equals(ClusterState.CLUSTER_STATE_ACTIVE)) {
    fsmDriver.startCluster(cls.getName());
  }
 else   if (c.getGoalState().equals(ClusterState.CLUSTER_STATE_INACTIVE)) {
    fsmDriver.stopCluster(cls.getName());
  }
 else   if (c.getGoalState().equals(ClusterState.CLUSTER_STATE_ATTIC)) {
    fsmDriver.stopCluster(cls.getName());
  }
  return cls.getClusterDefinition(-1);
}
