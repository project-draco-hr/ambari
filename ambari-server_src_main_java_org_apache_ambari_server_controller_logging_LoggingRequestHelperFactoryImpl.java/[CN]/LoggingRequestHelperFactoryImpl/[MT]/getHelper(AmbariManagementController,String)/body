{
  Clusters clusters=ambariManagementController.getClusters();
  try {
    Cluster cluster=clusters.getCluster(clusterName);
    if (cluster != null) {
      boolean isLogSearchEnabled=cluster.getServices().containsKey(LOGSEARCH_SERVICE_NAME);
      if (!isLogSearchEnabled) {
        return null;
      }
      Config logSearchEnvConfig=cluster.getDesiredConfigByType(LOGSEARCH_ENV_CONFIG_TYPE_NAME);
      List<ServiceComponentHost> listOfMatchingHosts=cluster.getServiceComponentHosts(LOGSEARCH_SERVICE_NAME,LOGSEARCH_SERVER_COMPONENT_NAME);
      if (listOfMatchingHosts.size() == 0) {
        LOG.warn("No matching LOGSEARCH_SERVER instances found, this may indicate a deployment problem.  Please verify that LogSearch is deployed and running.");
        return null;
      }
      if (listOfMatchingHosts.size() > 1) {
        LOG.warn("More than one LOGSEARCH_SERVER instance found, this may be a deployment error.  Only the first LOGSEARCH_SERVER instance will be used.");
      }
      ServiceComponentHost serviceComponentHost=listOfMatchingHosts.get(0);
      if (serviceComponentHost.getState() != State.STARTED) {
        return null;
      }
      final String logSearchHostName=serviceComponentHost.getHostName();
      final String logSearchPortNumber=logSearchEnvConfig.getProperties().get(LOGSEARCH_UI_PORT_PROPERTY_NAME);
      return new LoggingRequestHelperImpl(logSearchHostName,logSearchPortNumber,ambariManagementController.getCredentialStoreService(),cluster);
    }
  }
 catch (  AmbariException ambariException) {
    LOG.error("Error occurred while trying to obtain the cluster, cluster name = " + clusterName,ambariException);
  }
  return null;
}
