{
  String solrUrl=PropertiesHelper.getProperty("logsearch.solr.audit.logs.url");
  String zkConnectString=PropertiesHelper.getProperty("logsearch.solr.audit.logs.zk_connect_string");
  String collection=PropertiesHelper.getProperty("logsearch.solr.collection.audit.logs","audit_logs");
  String aliasNameIn=PropertiesHelper.getProperty("logsearch.solr.audit.logs.alias.name","audit_logs_alias");
  String rangerAuditCollection=PropertiesHelper.getProperty("logsearch.ranger.audit.logs.collection.name");
  String splitInterval=PropertiesHelper.getProperty("logsearch.audit.logs.split.interval.mins","none");
  String configName=PropertiesHelper.getProperty("logsearch.solr.audit.logs.config.name","audit_logs");
  int numberOfShards=PropertiesHelper.getIntProperty("logsearch.collection.audit.logs.numshards",1);
  int replicationFactor=PropertiesHelper.getIntProperty("logsearch.collection.audit.logs.replication.factor",1);
  try {
    connectToSolr(solrUrl,zkConnectString,collection);
    boolean createAlias=(aliasNameIn != null && !StringUtils.isBlank(rangerAuditCollection));
    boolean needToPopulateSchemaField=!createAlias;
    setupCollections(splitInterval,configName,numberOfShards,replicationFactor,needToPopulateSchemaField);
    if (createAlias) {
      Collection<String> collectionsIn=Arrays.asList(collection,rangerAuditCollection.trim());
      setupAlias(aliasNameIn,collectionsIn);
    }
  }
 catch (  Exception e) {
    logger.error("Error while connecting to Solr for audit logs : solrUrl=" + solrUrl + ", zkConnectString="+ zkConnectString+ ", collection="+ collection,e);
  }
}
