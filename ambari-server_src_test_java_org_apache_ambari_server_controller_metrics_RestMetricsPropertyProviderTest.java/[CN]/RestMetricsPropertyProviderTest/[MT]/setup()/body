{
  injector=Guice.createInjector(new InMemoryDefaultTestModule());
  injector.getInstance(GuiceJpaInitializer.class);
  clusters=injector.getInstance(Clusters.class);
  clusters.addCluster("c1",new StackId("HDP-2.1.1"));
  c1=clusters.getCluster("c1");
  Configuration configuration=injector.getInstance(Configuration.class);
  configuration.setProperty(Configuration.METRIC_RETRIEVAL_SERVICE_REQUEST_TTL_ENABLED.getKey(),"false");
  JMXPropertyProvider.init(configuration);
  MetricsRetrievalService metricsRetrievalService=injector.getInstance(MetricsRetrievalService.class);
  metricsRetrievalService.start();
  metricsRetrievalService.setThreadPoolExecutor(new SynchronousThreadPoolExecutor());
  amc=createNiceMock(AmbariManagementController.class);
  Field field=AmbariServer.class.getDeclaredField("clusterController");
  field.setAccessible(true);
  field.set(null,amc);
  ConfigHelper configHelperMock=createNiceMock(ConfigHelper.class);
  expect(amc.getClusters()).andReturn(clusters).anyTimes();
  expect(amc.findConfigurationTagsWithOverrides(eq(c1),anyString())).andReturn(Collections.singletonMap("storm-site",Collections.singletonMap("tag","version1"))).anyTimes();
  expect(amc.getConfigHelper()).andReturn(configHelperMock).anyTimes();
  expect(configHelperMock.getEffectiveConfigProperties(eq(c1),EasyMock.<Map<String,Map<String,String>>>anyObject())).andReturn(Collections.singletonMap("storm-site",Collections.singletonMap("ui.port",DEFAULT_STORM_UI_PORT))).anyTimes();
  replay(amc,configHelperMock);
}
