{
  MetricDefinition metricDefinition=createNiceMock(MetricDefinition.class);
  expect(metricDefinition.getMetrics()).andReturn(componentMetrics);
  expect(metricDefinition.getType()).andReturn("org.apache.ambari.server.controller.metrics.RestMetricsPropertyProvider");
  expect(metricDefinition.getProperties()).andReturn(metricsProperties);
  replay(metricDefinition);
  Map<String,PropertyInfo> metrics=StackDefinedPropertyProvider.getPropertyInfo(metricDefinition);
  HashMap<String,Map<String,PropertyInfo>> componentMetrics=new HashMap<String,Map<String,PropertyInfo>>();
  componentMetrics.put(WRAPPED_METRICS_KEY,metrics);
  TestStreamProvider streamProvider=new TestStreamProvider(100L);
  TestMetricsHostProvider metricsHostProvider=new TestMetricsHostProvider();
  Set<Resource> resources=new HashSet<Resource>();
  RestMetricsPropertyProvider restMetricsPropertyProvider=createRestMetricsPropertyProvider(metricDefinition,componentMetrics,streamProvider,metricsHostProvider);
  restMetricsPropertyProvider.setPopulateTimeout(50L);
  Resource resource=new ResourceImpl(Resource.Type.HostComponent);
  resource.setProperty("HostRoles/cluster_name","c1");
  resource.setProperty(HOST_COMPONENT_HOST_NAME_PROPERTY_ID,"domu-12-31-39-0e-34-e1.compute-1.internal");
  resource.setProperty(HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID,"STORM_REST_API");
  resources.add(resource);
  Request request=PropertyHelper.getReadRequest(Collections.<String>emptySet());
  Set<Resource> resourceSet=restMetricsPropertyProvider.populateResources(resources,request,null);
  Thread.sleep(150L);
  Assert.assertEquals(0,resourceSet.size());
  Assert.assertNull(resource.getPropertyValue("metrics/api/cluster/summary/tasks.total"));
  Assert.assertNull(resource.getPropertyValue("metrics/api/cluster/summary/supervisors"));
}
