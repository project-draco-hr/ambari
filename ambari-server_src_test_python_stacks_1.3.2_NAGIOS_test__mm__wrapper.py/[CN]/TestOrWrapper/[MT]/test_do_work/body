@patch('mm_wrapper.ignored_host_list')
@patch('mm_wrapper.work_in_or_mode')
@patch('mm_wrapper.work_in_and_mode')
@patch('mm_wrapper.work_in_env_only_mode')
@patch('mm_wrapper.work_in_filter_mm_mode')
@patch('mm_wrapper.work_in_legacy_check_wrapper_mode')
def test_do_work(self, work_in_legacy_check_wrapper_mode, work_in_filter_mm_mode_mock, work_in_env_only_mode_mock, work_in_and_mode_mock, work_in_or_mode_mock, ignored_host_list_mock):
    hostnames = ['h1', 'h2', 'h3', 'h4']
    ignored_host_list_mock.return_value = ['h2', 'h3']
    command_line = ['prog', '-h', '^^', '-opt', 'yet', 'another', 'opt']
    work_in_or_mode_mock.return_value = {'message': 'or_mode mode result', 'retcode': 0, 'real_retcode': None, }
    work_in_and_mode_mock.return_value = {'message': 'and_mode mode result', 'retcode': 0, 'real_retcode': None, }
    work_in_env_only_mode_mock.return_value = {'message': 'env_only mode result', 'retcode': 0, 'real_retcode': None, }
    work_in_filter_mm_mode_mock.return_value = {'message': 'filter_mm mode result', 'retcode': 0, 'real_retcode': None, }
    work_in_legacy_check_wrapper_mode.return_value = {'message': 'legacy_check_wrapper mode result', 'retcode': 0, 'real_retcode': None, }
    result = mm_wrapper.do_work(mm_wrapper.OR, hostnames, command_line)
    self.assertEquals(str(result), "(['or_mode mode result'], 0)")
    result = mm_wrapper.do_work(mm_wrapper.AND, hostnames, command_line)
    self.assertEquals(str(result), "(['and_mode mode result'], 0)")
    result = mm_wrapper.do_work(mm_wrapper.ENV_ONLY, hostnames, command_line)
    self.assertEquals(str(result), "(['env_only mode result'], 0)")
    result = mm_wrapper.do_work(mm_wrapper.FILTER_MM, hostnames, command_line)
    self.assertEquals(str(result), "(['filter_mm mode result'], 0)")
    result = mm_wrapper.do_work(mm_wrapper.LEGACY_CHECK_WRAPPER, hostnames, command_line)
    self.assertEquals(str(result), "(['legacy_check_wrapper mode result'], 0)")
    work_in_or_mode_mock.return_value = {'message': 'or_mode mode result', 'retcode': 0, 'real_retcode': 1, }
    result = mm_wrapper.do_work(mm_wrapper.OR, hostnames, command_line)
    self.assertEquals(str(result), "(['or_mode mode result', 'AMBARIPASSIVE=1'], 0)")
