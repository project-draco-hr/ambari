{
  UriInfo uriInfo=createMock(UriInfo.class);
  Resource resource=createMock(Resource.class);
  Result result=new ResultImpl(true);
  result.setResultStatus(new ResultStatus(ResultStatus.STATUS.OK));
  TreeNode<Resource> tree=result.getResultTree();
  TreeNode<Resource> child=tree.addChild(resource,"resource1");
  child.setProperty("href","this is an href");
  HashMap<String,Object> mapRootProps=new HashMap<String,Object>();
  mapRootProps.put("prop1","value1");
  mapRootProps.put("prop2","value2");
  HashMap<String,Object> mapCategoryProps=new HashMap<String,Object>();
  mapCategoryProps.put("catProp1","catValue1");
  mapCategoryProps.put("catProp2","catValue2");
  Map<String,Map<String,Object>> propertyMap=new HashMap<String,Map<String,Object>>();
  propertyMap.put(null,mapRootProps);
  propertyMap.put("category",mapCategoryProps);
  expect(resource.getPropertiesMap()).andReturn(propertyMap).anyTimes();
  expect(resource.getType()).andReturn(Resource.Type.Cluster).anyTimes();
  replay(uriInfo,resource);
  ViewInstanceEntity viewInstanceEntity=ViewInstanceEntityTest.getViewInstanceEntity();
  Resource.Type type=new Resource.Type("subResource");
  ViewSubResourceService service=new ViewSubResourceService(type,viewInstanceEntity);
  ResultSerializer serializer=service.getResultSerializer(MediaType.APPLICATION_JSON_TYPE);
  Object o=serializer.serialize(result);
  assertTrue(o instanceof Map);
  Map map=(Map)o;
  assertEquals(4,map.size());
  assertEquals("value1",map.get("prop1"));
  assertEquals("value2",map.get("prop2"));
  assertEquals("this is an href",map.get("href"));
  Object o2=map.get("category");
  assertNotNull(o2);
  assertTrue(o2 instanceof Map);
  Map subMap=(Map)o2;
  assertEquals(2,subMap.size());
  assertEquals("catValue1",subMap.get("catProp1"));
  assertEquals("catValue2",subMap.get("catProp2"));
  verify(uriInfo,resource);
}
