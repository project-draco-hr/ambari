{
  UriInfo uriInfo=createMock(UriInfo.class);
  Resource resource=createMock(Resource.class);
  Result result=new ResultImpl(true);
  result.setResultStatus(new ResultStatus(ResultStatus.STATUS.OK));
  TreeNode<Resource> tree=result.getResultTree();
  TreeNode<Resource> child=tree.addChild(resource,"resource1");
  child.setProperty("href","this is an href");
  Map<String,Object> mapRootProps=new LinkedHashMap<String,Object>();
  mapRootProps.put("prop2","value2");
  mapRootProps.put("prop1","value1");
  Map<String,Object> mapCategoryProps=new LinkedHashMap<String,Object>();
  mapCategoryProps.put("catProp1","catValue1");
  mapCategoryProps.put("catProp2","catValue2");
  Map<String,Map<String,Object>> propertyMap=new LinkedHashMap<>();
  propertyMap.put(null,mapRootProps);
  propertyMap.put("category",mapCategoryProps);
  expect(resource.getPropertiesMap()).andReturn(propertyMap).anyTimes();
  expect(resource.getType()).andReturn(Resource.Type.Cluster).anyTimes();
  replay(uriInfo,resource);
  ViewInstanceEntity viewInstanceEntity=ViewInstanceEntityTest.getViewInstanceEntity();
  Resource.Type type=new Resource.Type("subResource");
  ViewSubResourceService service=new ViewSubResourceService(type,viewInstanceEntity);
  ResultSerializer serializer=service.getResultSerializer(MediaType.TEXT_PLAIN_TYPE);
  Object o=serializer.serialize(result);
  String expected="{\n" + "  \"href\" : \"this is an href\",\n" + "  \"prop2\" : \"value2\",\n"+ "  \"prop1\" : \"value1\",\n"+ "  \"category\" : {\n"+ "    \"catProp1\" : \"catValue1\",\n"+ "    \"catProp2\" : \"catValue2\"\n"+ "  }\n"+ "}";
  assertEquals(expected,o.toString().replace("\r",""));
  verify(uriInfo,resource);
}
