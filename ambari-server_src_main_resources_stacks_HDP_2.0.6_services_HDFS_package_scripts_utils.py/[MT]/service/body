def service(action=None, name=None, user=None, create_pid_dir=False, create_log_dir=False):
    import params
    pid_dir = format('{hadoop_pid_dir_prefix}/{user}')
    pid_file = format('{pid_dir}/hadoop-{user}-{name}.pid')
    log_dir = format('{hdfs_log_dir_prefix}/{user}')
    check_process = format('ls {pid_file} >/dev/null 2>&1 && ps -p `cat {pid_file}` >/dev/null 2>&1')
    if create_pid_dir:
        Directory(pid_dir, owner=user, recursive=True)
    if create_log_dir:
        Directory(log_dir, owner=user, recursive=True)
    hadoop_env_exports = {'HADOOP_LIBEXEC_DIR': params.hadoop_libexec_dir, }
    if (params.security_enabled and (name == 'datanode')):
        hadoop_secure_dn_pid_dir = format('{hadoop_pid_dir_prefix}/{hdfs_user}')
        hadoop_secure_dn_pid_file = format('{hadoop_secure_dn_pid_dir}/hadoop_secure_dn.pid')
        if ((not ((params.hdp_stack_version != '') and (compare_versions(params.hdp_stack_version, '2.2') >= 0))) or params.secure_dn_ports_are_in_use):
            user = 'root'
            pid_file = format('{hadoop_pid_dir_prefix}/{hdfs_user}/hadoop-{hdfs_user}-{name}.pid')
        if ((action == 'stop') and ((params.hdp_stack_version != '') and (compare_versions(params.hdp_stack_version, '2.2') >= 0)) and os.path.isfile(hadoop_secure_dn_pid_file)):
            user = 'root'
            try:
                check_process_status()
                custom_export = {'HADOOP_SECURE_DN_USER': params.hdfs_user, }
                hadoop_env_exports.update(custom_export)
            except ComponentIsNotRunning:
                pass
    hadoop_env_exports_str = ''
    for exp in hadoop_env_exports.items():
        hadoop_env_exports_str += 'export {0}={1} && '.format(exp[0], exp[1])
    hadoop_daemon = format('{hadoop_env_exports_str}{hadoop_bin}/hadoop-daemon.sh')
    cmd = format('{hadoop_daemon} --config {hadoop_conf_dir}')
    daemon_cmd = format('{ulimit_cmd} {cmd} {action} {name}')
    service_is_up = (check_process if (action == 'start') else None)
    File(pid_file, action='delete', not_if=check_process)
    Execute(daemon_cmd, not_if=service_is_up, user=user)
    '\n  if action == "start":\n    Execute("hdfs dfsadmin -report -live",\n            user=params.hdfs_principal_name if params.security_enabled else params.hdfs_user\n    )\n  '
    if (action == 'stop'):
        File(pid_file, action='delete')
