def service(action=None, name=None, user=None, create_pid_dir=False, create_log_dir=False, keytab=None, principal=None):
    import params
    kinit_cmd = 'true'
    pid_dir = format('{hadoop_pid_dir_prefix}/{user}')
    pid_file = format('{pid_dir}/hadoop-{user}-{name}.pid')
    log_dir = format('{hdfs_log_dir_prefix}/{user}')
    hadoop_daemon = format('{ulimit_cmd} export HADOOP_LIBEXEC_DIR={hadoop_libexec_dir} && {hadoop_bin}/hadoop-daemon.sh')
    cmd = format('{hadoop_daemon} --config {hadoop_conf_dir}')
    if create_pid_dir:
        Directory(pid_dir, owner=user, recursive=True)
    if create_log_dir:
        Directory(log_dir, owner=user, recursive=True)
    if (params.security_enabled and (name != 'zkfc')):
        principal_replaced = principal.replace('_HOST', params.hostname)
        kinit_cmd = format('kinit -kt {keytab} {principal_replaced}')
        if (name == 'datanode'):
            user = 'root'
            pid_file = format('{hadoop_pid_dir_prefix}/{hdfs_user}/hadoop-{hdfs_user}-{name}.pid')
    daemon_cmd = format('{cmd} {action} {name}')
    service_is_up = (format('ls {pid_file} >/dev/null 2>&1 && ps `cat {pid_file}` >/dev/null 2>&1') if (action == 'start') else None)
    Execute(kinit_cmd)
    Execute(daemon_cmd, user=user, not_if=service_is_up)
    if (action == 'stop'):
        File(pid_file, action='delete', ignore_failures=True)
