{
  AlertDefinitionEntity definition=new AlertDefinitionEntity();
  definition.setDefinitionName("to_aggregate");
  definition.setLabel("My Label");
  definition.setServiceName("SERVICE");
  definition.setComponentName(null);
  definition.setClusterId(clusterId);
  definition.setHash(UUID.randomUUID().toString());
  definition.setScheduleInterval(Integer.valueOf(60));
  definition.setScope(Scope.HOST);
  definition.setSource("{\"type\" : \"SCRIPT\"}");
  definition.setSourceType(SourceType.SCRIPT);
  definitionDao.create(definition);
  AlertDefinitionEntity aggDef=new AlertDefinitionEntity();
  aggDef.setDefinitionName("aggregate_test");
  aggDef.setServiceName("SERVICE");
  aggDef.setComponentName(null);
  aggDef.setClusterId(clusterId);
  aggDef.setHash(UUID.randomUUID().toString());
  aggDef.setScheduleInterval(Integer.valueOf(60));
  aggDef.setScope(Scope.SERVICE);
  AggregateSource source=new AggregateSource();
  source.setAlertName("to_aggregate");
  Field field=Source.class.getDeclaredField("type");
  field.setAccessible(true);
  field.set(source,SourceType.AGGREGATE);
  Reporting reporting=new Reporting();
  ReportTemplate template=new ReportTemplate();
  template.setText("You are good {1}/{0}");
  reporting.setOk(template);
  template=new ReportTemplate();
  template.setText("Going bad {1}/{0}");
  template.setValue(Double.valueOf(0.33d));
  reporting.setWarning(template);
  template=new ReportTemplate();
  template.setText("On fire! {1}/{0}");
  template.setValue(Double.valueOf(0.66d));
  reporting.setCritical(template);
  source.setReporting(reporting);
  Gson gson=new Gson();
  aggDef.setSource(gson.toJson(source));
  aggDef.setSourceType(SourceType.AGGREGATE);
  definitionDao.create(aggDef);
  for (int i=0; i < 4; i++) {
    AlertHistoryEntity history=new AlertHistoryEntity();
    history.setAlertDefinition(definition);
    history.setAlertInstance(null);
    history.setAlertLabel(definition.getLabel());
    history.setAlertState(AlertState.OK);
    history.setAlertText("OK");
    history.setAlertTimestamp(Long.valueOf(1));
    history.setClusterId(clusterId);
    history.setComponentName(definition.getComponentName());
    history.setHostName("h" + (i + 1));
    history.setServiceName(definition.getServiceName());
    dao.create(history);
    AlertCurrentEntity current=new AlertCurrentEntity();
    current.setAlertHistory(history);
    current.setLatestText(history.getAlertText());
    current.setLatestTimestamp(Long.valueOf(1L));
    current.setOriginalTimestamp(Long.valueOf(1L));
    dao.merge(current);
  }
  AlertEventPublisher publisher=injector.getInstance(AlertEventPublisher.class);
  field=AlertEventPublisher.class.getDeclaredField("m_eventBus");
  field.setAccessible(true);
  field.set(publisher,new EventBus());
  final AtomicReference<Alert> ref=new AtomicReference<Alert>();
  publisher.register(new TestListener(){
    @Override @Subscribe public void catchIt(    AlertReceivedEvent event){
      ref.set(event.getAlert());
    }
  }
);
  AlertAggregateListener listener=injector.getInstance(AlertAggregateListener.class);
  AlertDefinitionFactory factory=new AlertDefinitionFactory();
  AggregateDefinitionMapping aggregateMapping=injector.getInstance(AggregateDefinitionMapping.class);
  AlertDefinition aggregateDefinition=factory.coerce(aggDef);
  aggregateMapping.addAggregateType(clusterId.longValue(),aggregateDefinition);
  AggregateSource as=(AggregateSource)aggregateDefinition.getSource();
  AlertDefinition aggregatedDefinition=aggregateMapping.getAggregateDefinition(clusterId.longValue(),as.getAlertName());
  assertNotNull(aggregatedDefinition);
  Alert alert=new Alert(definition.getDefinitionName(),null,definition.getServiceName(),definition.getComponentName(),"h1",AlertState.OK);
  AlertReceivedEvent event=new AlertReceivedEvent(clusterId.longValue(),alert);
  listener.onAlertEvent(event);
  assertNotNull(ref.get());
  assertEquals(AlertState.OK,ref.get().getState());
  assertTrue(ref.get().getText().indexOf("0/4") > -1);
  AlertCurrentEntity current=dao.findCurrentByHostAndName(clusterId.longValue(),"h1",definition.getDefinitionName());
  current.getAlertHistory().setAlertState(AlertState.CRITICAL);
  dao.merge(current.getAlertHistory());
  listener.onAlertEvent(event);
  assertEquals("aggregate_test",ref.get().getName());
  assertEquals(AlertState.OK,ref.get().getState());
  assertTrue(ref.get().getText().indexOf("1/4") > -1);
  current=dao.findCurrentByHostAndName(clusterId.longValue(),"h2",definition.getDefinitionName());
  current.getAlertHistory().setAlertState(AlertState.WARNING);
  dao.merge(current.getAlertHistory());
  listener.onAlertEvent(event);
  assertEquals("aggregate_test",ref.get().getName());
  assertEquals(AlertState.WARNING,ref.get().getState());
  assertTrue(ref.get().getText().indexOf("2/4") > -1);
  current=dao.findCurrentByHostAndName(clusterId.longValue(),"h3",definition.getDefinitionName());
  current.getAlertHistory().setAlertState(AlertState.CRITICAL);
  dao.merge(current.getAlertHistory());
  listener.onAlertEvent(event);
  assertEquals("aggregate_test",ref.get().getName());
  assertEquals(AlertState.CRITICAL,ref.get().getState());
  assertTrue(ref.get().getText().indexOf("3/4") > -1);
}
