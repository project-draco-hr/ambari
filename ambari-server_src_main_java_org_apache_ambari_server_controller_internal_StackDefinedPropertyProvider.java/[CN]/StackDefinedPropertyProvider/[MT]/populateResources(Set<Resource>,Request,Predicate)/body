{
  Map<String,Map<String,PropertyInfo>> gangliaMap=new HashMap<String,Map<String,PropertyInfo>>();
  Map<String,Map<String,PropertyInfo>> jmxMap=new HashMap<String,Map<String,PropertyInfo>>();
  List<PropertyProvider> additional=new ArrayList<PropertyProvider>();
  try {
    for (    Resource r : resources) {
      String clusterName=r.getPropertyValue(clusterNamePropertyId).toString();
      String componentName=r.getPropertyValue(componentNamePropertyId).toString();
      Cluster cluster=clusters.getCluster(clusterName);
      StackId stack=cluster.getDesiredStackVersion();
      String svc=metaInfo.getComponentToService(stack.getStackName(),stack.getStackVersion(),componentName);
      List<MetricDefinition> defs=metaInfo.getMetrics(stack.getStackName(),stack.getStackVersion(),svc,componentName,type.name());
      if (null == defs || 0 == defs.size())       continue;
      for (      MetricDefinition m : defs) {
        if (m.getType().equals("ganglia")) {
          gangliaMap.put(componentName,getPropertyInfo(m));
        }
 else         if (m.getType().equals("jmx")) {
          jmxMap.put(componentName,getPropertyInfo(m));
        }
 else {
          PropertyProvider pp=getDelegate(m,streamProvider,metricHostProvider,clusterNamePropertyId,hostNamePropertyId,componentNamePropertyId,resourceStatePropertyId,componentName);
          if (pp == null) {
            pp=getDelegate(m);
          }
          if (pp != null) {
            additional.add(pp);
          }
        }
      }
    }
    if (gangliaMap.size() > 0) {
      PropertyProvider propertyProvider=MetricsPropertyProvider.createInstance(type,gangliaMap,streamProvider,sslConfig,cacheProvider,metricHostProvider,metricsServiceProvider,clusterNamePropertyId,hostNamePropertyId,componentNamePropertyId);
      propertyProvider.populateResources(resources,request,predicate);
    }
 else {
      defaultGanglia.populateResources(resources,request,predicate);
    }
    if (jmxMap.size() > 0) {
      JMXPropertyProvider jpp=new JMXPropertyProvider(jmxMap,streamProvider,jmxHostProvider,metricHostProvider,clusterNamePropertyId,hostNamePropertyId,componentNamePropertyId,resourceStatePropertyId);
      jpp.populateResources(resources,request,predicate);
    }
 else {
      defaultJmx.populateResources(resources,request,predicate);
    }
    for (    PropertyProvider pp : additional) {
      pp.populateResources(resources,request,predicate);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new SystemException("Error loading deferred resources",e);
  }
  return resources;
}
