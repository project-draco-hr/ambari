{
  final Set<RequestScheduleRequest> requests=new HashSet<RequestScheduleRequest>();
  for (  Map<String,Object> propertyMap : getPropertyMaps(predicate)) {
    requests.add(getRequestScheduleRequest(propertyMap));
  }
  Set<RequestScheduleResponse> responses=getResources(new Command<Set<RequestScheduleResponse>>(){
    @Override public Set<RequestScheduleResponse> invoke() throws AmbariException {
      return getRequestSchedules(requests);
    }
  }
);
  Set<String> requestedIds=getRequestPropertyIds(request,predicate);
  Set<Resource> resources=new HashSet<Resource>();
  for (  RequestScheduleResponse response : responses) {
    Resource resource=new ResourceImpl(Resource.Type.RequestSchedule);
    setResourceProperty(resource,REQUEST_SCHEDULE_ID_PROPERTY_ID,response.getId(),requestedIds);
    setResourceProperty(resource,REQUEST_SCHEDULE_CLUSTER_NAME_PROPERTY_ID,response.getClusterName(),requestedIds);
    setResourceProperty(resource,REQUEST_SCHEDULE_DESC_PROPERTY_ID,response.getDescription(),requestedIds);
    setResourceProperty(resource,REQUEST_SCHEDULE_STATUS_PROPERTY_ID,response.getStatus(),requestedIds);
    setResourceProperty(resource,REQUEST_SCHEDULE_BATCH_PROPERTY_ID,response.getBatch(),requestedIds);
    setResourceProperty(resource,REQUEST_SCHEDULE_SCHEDULE_PROPERTY_ID,response.getSchedule(),requestedIds);
    setResourceProperty(resource,REQUEST_SCHEDULE_CREATE_USER_PROPERTY_ID,response.getCreateUser(),requestedIds);
    setResourceProperty(resource,REQUEST_SCHEDULE_CREATE_TIME_PROPERTY_ID,response.getCreateTime(),requestedIds);
    setResourceProperty(resource,REQUEST_SCHEDULE_UPDATE_USER_PROPERTY_ID,response.getUpdateUser(),requestedIds);
    setResourceProperty(resource,REQUEST_SCHEDULE_UPDATE_TIME_PROPERTY_ID,response.getUpdateTime(),requestedIds);
    resources.add(resource);
  }
  return resources;
}
