def _merge_env(env1, env2, merge_keys=['PYTHONPATH']):
    '\n  Merge env2 into env1. Also current python instance variables from merge_keys list taken into account and they will be\n  merged with equivalent keys from env1 and env2 using system path separator.\n  :param env1: first environment, usually returned by CreateEnvironmentBlock\n  :param env2: custom environment\n  :param merge_keys: env variables to merge as PATH\n  :return: merged environment\n  '
    env1 = dict(env1)
    if env2:
        for (key, value) in env2.iteritems():
            if (not (key in merge_keys)):
                env1[key] = value
    result_env = {}
    for (key, value) in env1.iteritems():
        if (not (key in merge_keys)):
            result_env[str(key)] = str(value)

    def put_values(key, env, result):
        if (env and (key in env)):
            result.extend(env[key].split(os.pathsep))
    for key in merge_keys:
        all_values = []
        for env in [env1, env2, os.environ]:
            put_values(key, env, all_values)
        result_env[str(key)] = str(os.pathsep.join(set(all_values)))
    return result_env
