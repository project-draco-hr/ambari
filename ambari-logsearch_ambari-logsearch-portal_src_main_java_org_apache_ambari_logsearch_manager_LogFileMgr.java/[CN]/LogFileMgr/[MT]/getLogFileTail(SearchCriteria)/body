{
  String host=(String)searchCriteria.getParamValue("host");
  String logFile=(String)searchCriteria.getParamValue("name");
  String component=(String)searchCriteria.getParamValue("component");
  String tailSize=(String)searchCriteria.getParamValue("tailSize");
  if (StringUtils.isBlank(host)) {
    throw restErrorUtil.createRESTException("missing Host Name",MessageEnums.ERROR_SYSTEM);
  }
  tailSize=(StringUtils.isBlank(tailSize)) ? "10" : tailSize;
  SolrQuery logFileTailQuery=new SolrQuery();
  try {
    int tail=Integer.parseInt(tailSize);
    tail=tail > 100 ? 100 : tail;
    queryGenerator.setMainQuery(logFileTailQuery,null);
    queryGenerator.setSingleIncludeFilter(logFileTailQuery,LogSearchConstants.SOLR_HOST,host);
    if (!StringUtils.isBlank(logFile)) {
      queryGenerator.setSingleIncludeFilter(logFileTailQuery,LogSearchConstants.SOLR_PATH,solrUtil.makeSolrSearchString(logFile));
    }
 else     if (!StringUtils.isBlank(component)) {
      queryGenerator.setSingleIncludeFilter(logFileTailQuery,LogSearchConstants.SOLR_COMPONENT,component);
    }
 else {
      throw restErrorUtil.createRESTException("component or logfile parameter must be present",MessageEnums.ERROR_SYSTEM);
    }
    queryGenerator.setRowCount(logFileTailQuery,tail);
    queryGenerator.setSortOrderDefaultServiceLog(logFileTailQuery,new SearchCriteria());
    VSolrLogList solrLogList=getLogAsPaginationProvided(logFileTailQuery,serviceLogsSolrDao);
    return convertObjToString(solrLogList);
  }
 catch (  NumberFormatException ne) {
    throw restErrorUtil.createRESTException(ne.getMessage(),MessageEnums.ERROR_SYSTEM);
  }
}
