{
  EasyMockSupport mockSupport=new EasyMockSupport();
  AmbariManagementController mockController=mockSupport.createMock(AmbariManagementController.class);
  AmbariMetaInfo mockMetaInfo=mockSupport.createMock(AmbariMetaInfo.class);
  BaseBlueprintProcessor.stackInfo=mockMetaInfo;
  ServiceInfo serviceInfo=new ServiceInfo();
  serviceInfo.setName("HDFS");
  StackServiceResponse stackServiceResponse=new StackServiceResponse(serviceInfo);
  ComponentInfo componentInfo=new ComponentInfo();
  componentInfo.setName("SECONDARY_NAMENODE");
  componentInfo.setCardinality("1");
  StackServiceComponentResponse stackComponentResponse=new StackServiceComponentResponse(componentInfo);
  ComponentInfo componentInfoNameNode=new ComponentInfo();
  componentInfoNameNode.setName("NAMENODE");
  componentInfo.setCardinality("1-2");
  StackServiceComponentResponse stackServiceComponentResponseTwo=new StackServiceComponentResponse(componentInfoNameNode);
  Set<StackServiceComponentResponse> responses=new HashSet<StackServiceComponentResponse>();
  responses.add(stackComponentResponse);
  responses.add(stackServiceComponentResponseTwo);
  expect(mockController.getStackServices(isA(Set.class))).andReturn(Collections.singleton(stackServiceResponse));
  expect(mockController.getStackComponents(isA(Set.class))).andReturn(responses);
  expect(mockController.getStackConfigurations(isA(Set.class))).andReturn(Collections.<StackConfigurationResponse>emptySet());
  expect(mockController.getStackLevelConfigurations(isA(Set.class))).andReturn(Collections.<StackConfigurationResponse>emptySet());
  expect(mockMetaInfo.getComponentDependencies("HDP","2.0.6","HDFS","SECONDARY_NAMENODE")).andReturn(Collections.<DependencyInfo>emptyList());
  expect(mockMetaInfo.getComponentDependencies("HDP","2.0.6","HDFS","NAMENODE")).andReturn(Collections.<DependencyInfo>emptyList());
  mockSupport.replayAll();
  BaseBlueprintProcessor baseBlueprintProcessor=new BaseBlueprintProcessor(Collections.<String>emptySet(),Collections.<Resource.Type,String>emptyMap(),mockController){
    @Override protected Set<String> getPKPropertyIds(){
      return null;
    }
    @Override public RequestStatus createResources(    Request request) throws SystemException, UnsupportedPropertyException, ResourceAlreadyExistsException, NoSuchParentResourceException {
      return null;
    }
    @Override public Set<Resource> getResources(    Request request,    Predicate predicate) throws SystemException, UnsupportedPropertyException, NoSuchResourceException, NoSuchParentResourceException {
      return null;
    }
    @Override public RequestStatus updateResources(    Request request,    Predicate predicate) throws SystemException, UnsupportedPropertyException, NoSuchResourceException, NoSuchParentResourceException {
      return null;
    }
    @Override public RequestStatus deleteResources(    Predicate predicate) throws SystemException, UnsupportedPropertyException, NoSuchResourceException, NoSuchParentResourceException {
      return null;
    }
  }
;
  HostGroupComponentEntity hostGroupComponentEntity=new HostGroupComponentEntity();
  hostGroupComponentEntity.setName("NAMENODE");
  HostGroupEntity hostGroupEntity=new HostGroupEntity();
  hostGroupEntity.setName("host-group-one");
  hostGroupEntity.setComponents(Collections.singleton(hostGroupComponentEntity));
  hostGroupEntity.setConfigurations(Collections.<HostGroupConfigEntity>emptyList());
  BlueprintConfigEntity configEntity=new BlueprintConfigEntity();
  configEntity.setConfigData("{\"dfs.nameservices\":\"mycluster\",\"key4\":\"value4\"}");
  configEntity.setType("hdfs-site");
  BlueprintEntity testEntity=new BlueprintEntity();
  testEntity.setBlueprintName("test-blueprint");
  testEntity.setStackName("HDP");
  testEntity.setStackVersion("2.0.6");
  testEntity.setHostGroups(Collections.singleton(hostGroupEntity));
  testEntity.setConfigurations(Collections.singleton(configEntity));
  baseBlueprintProcessor.validateTopology(testEntity);
  mockSupport.verifyAll();
}
