{
  final DBAccessor dbAccessor=createNiceMock(DBAccessor.class);
  Configuration configuration=createNiceMock(Configuration.class);
  ResultSet resultSet=createNiceMock(ResultSet.class);
  expect(configuration.getDatabaseUrl()).andReturn(Configuration.JDBC_IN_MEMORY_URL).anyTimes();
  Capture<DBAccessor.DBColumnInfo> clusterConfigAttributesColumnCapture=new Capture<DBAccessor.DBColumnInfo>();
  Capture<DBAccessor.DBColumnInfo> maskColumnCapture=new Capture<DBAccessor.DBColumnInfo>();
  Capture<DBAccessor.DBColumnInfo> maskedColumnCapture=new Capture<DBAccessor.DBColumnInfo>();
  Capture<List<DBAccessor.DBColumnInfo>> alertDefinitionColumnCapture=new Capture<List<DBAccessor.DBColumnInfo>>();
  Capture<List<DBAccessor.DBColumnInfo>> alertHistoryColumnCapture=new Capture<List<DBAccessor.DBColumnInfo>>();
  Capture<List<DBAccessor.DBColumnInfo>> alertCurrentColumnCapture=new Capture<List<DBAccessor.DBColumnInfo>>();
  Capture<List<DBAccessor.DBColumnInfo>> alertGroupColumnCapture=new Capture<List<DBAccessor.DBColumnInfo>>();
  Capture<List<DBAccessor.DBColumnInfo>> alertTargetCapture=new Capture<List<DBAccessor.DBColumnInfo>>();
  Capture<List<DBAccessor.DBColumnInfo>> alertGroupTargetCapture=new Capture<List<DBAccessor.DBColumnInfo>>();
  Capture<List<DBAccessor.DBColumnInfo>> alertGroupingCapture=new Capture<List<DBAccessor.DBColumnInfo>>();
  Capture<List<DBAccessor.DBColumnInfo>> alertNoticeCapture=new Capture<List<DBAccessor.DBColumnInfo>>();
  Capture<List<DBAccessor.DBColumnInfo>> serviceConfigCapture=new Capture<List<DBAccessor.DBColumnInfo>>();
  Capture<List<DBAccessor.DBColumnInfo>> serviceConfigMappingCapture=new Capture<List<DBAccessor.DBColumnInfo>>();
  setViewExpectations(dbAccessor,maskColumnCapture);
  setViewParameterExpectations(dbAccessor,maskedColumnCapture);
  setClusterConfigExpectations(dbAccessor,clusterConfigAttributesColumnCapture);
  dbAccessor.createTable(eq("alert_definition"),capture(alertDefinitionColumnCapture),eq("definition_id"));
  dbAccessor.createTable(eq("alert_history"),capture(alertHistoryColumnCapture),eq("alert_id"));
  dbAccessor.createTable(eq("alert_current"),capture(alertCurrentColumnCapture),eq("alert_id"));
  dbAccessor.createTable(eq("alert_group"),capture(alertGroupColumnCapture),eq("group_id"));
  dbAccessor.createTable(eq("alert_target"),capture(alertTargetCapture),eq("target_id"));
  dbAccessor.createTable(eq("alert_group_target"),capture(alertGroupTargetCapture),eq("group_id"),eq("target_id"));
  dbAccessor.createTable(eq("alert_grouping"),capture(alertGroupingCapture),eq("group_id"),eq("definition_id"));
  dbAccessor.createTable(eq("alert_notice"),capture(alertNoticeCapture),eq("notification_id"));
  dbAccessor.createTable(eq("serviceconfig"),capture(serviceConfigCapture),eq("service_config_id"));
  dbAccessor.createTable(eq("serviceconfigmapping"),capture(serviceConfigMappingCapture),eq("service_config_id"),eq("config_id"));
  dbAccessor.executeSelect(anyObject(String.class));
  expectLastCall().andReturn(resultSet).anyTimes();
  resultSet.next();
  expectLastCall().andReturn(false).anyTimes();
  resultSet.close();
  expectLastCall().anyTimes();
  replay(dbAccessor,configuration,resultSet);
  AbstractUpgradeCatalog upgradeCatalog=getUpgradeCatalog(dbAccessor);
  Class<?> c=AbstractUpgradeCatalog.class;
  Field f=c.getDeclaredField("configuration");
  f.setAccessible(true);
  f.set(upgradeCatalog,configuration);
  upgradeCatalog.executeDDLUpdates();
  verify(dbAccessor,configuration,resultSet);
  assertClusterConfigColumns(clusterConfigAttributesColumnCapture);
  assertViewColumns(maskColumnCapture);
  assertViewParameterColumns(maskedColumnCapture);
  assertEquals(11,alertDefinitionColumnCapture.getValue().size());
  assertEquals(11,alertHistoryColumnCapture.getValue().size());
  assertEquals(6,alertCurrentColumnCapture.getValue().size());
  assertEquals(4,alertGroupColumnCapture.getValue().size());
  assertEquals(5,alertTargetCapture.getValue().size());
  assertEquals(2,alertGroupTargetCapture.getValue().size());
  assertEquals(2,alertGroupingCapture.getValue().size());
  assertEquals(4,alertNoticeCapture.getValue().size());
  assertEquals(2,serviceConfigCapture.getValue().size());
  assertEquals(2,serviceConfigMappingCapture.getValue().size());
}
