{
  final DBAccessor dbAccessor=createNiceMock(DBAccessor.class);
  Statement statement=createNiceMock(Statement.class);
  Connection connection=createNiceMock(Connection.class);
  PreparedStatement stmt=createNiceMock(PreparedStatement.class);
  Configuration configuration=createNiceMock(Configuration.class);
  ResultSet resultSet=createNiceMock(ResultSet.class);
  expect(configuration.getDatabaseUrl()).andReturn(Configuration.JDBC_IN_MEMORY_URL).anyTimes();
  expect(dbAccessor.getNewConnection()).andReturn(connection);
  expect(connection.prepareStatement("SELECT config_id FROM clusterconfig " + "WHERE type_name = ? ORDER BY create_timestamp")).andReturn(stmt);
  expect(connection.prepareStatement("UPDATE clusterconfig SET version = ? " + "WHERE config_id = ?")).andReturn(stmt);
  stmt.close();
  expectLastCall().times(2);
  connection.close();
  expectLastCall();
  Capture<DBAccessor.DBColumnInfo> clusterConfigAttributesColumnCapture=new Capture<DBAccessor.DBColumnInfo>();
  Capture<DBAccessor.DBColumnInfo> hostgroupConfigAttributesColumnCapture=new Capture<DBAccessor.DBColumnInfo>();
  Capture<DBAccessor.DBColumnInfo> blueprintConfigAttributesColumnCapture=new Capture<DBAccessor.DBColumnInfo>();
  Capture<DBAccessor.DBColumnInfo> maskColumnCapture=new Capture<DBAccessor.DBColumnInfo>();
  Capture<DBAccessor.DBColumnInfo> systemColumnCapture=new Capture<DBAccessor.DBColumnInfo>();
  Capture<DBAccessor.DBColumnInfo> maskedColumnCapture=new Capture<DBAccessor.DBColumnInfo>();
  Capture<DBAccessor.DBColumnInfo> stageCommandParamsColumnCapture=new Capture<DBAccessor.DBColumnInfo>();
  Capture<DBAccessor.DBColumnInfo> stageHostParamsColumnCapture=new Capture<DBAccessor.DBColumnInfo>();
  Capture<List<DBAccessor.DBColumnInfo>> groupsCapture=new Capture<List<DBAccessor.DBColumnInfo>>();
  Capture<List<DBAccessor.DBColumnInfo>> alertDefinitionColumnCapture=new Capture<List<DBAccessor.DBColumnInfo>>();
  Capture<List<DBAccessor.DBColumnInfo>> alertHistoryColumnCapture=new Capture<List<DBAccessor.DBColumnInfo>>();
  Capture<List<DBAccessor.DBColumnInfo>> alertCurrentColumnCapture=new Capture<List<DBAccessor.DBColumnInfo>>();
  Capture<List<DBAccessor.DBColumnInfo>> alertGroupColumnCapture=new Capture<List<DBAccessor.DBColumnInfo>>();
  Capture<List<DBAccessor.DBColumnInfo>> alertTargetCapture=new Capture<List<DBAccessor.DBColumnInfo>>();
  Capture<List<DBAccessor.DBColumnInfo>> alertGroupTargetCapture=new Capture<List<DBAccessor.DBColumnInfo>>();
  Capture<List<DBAccessor.DBColumnInfo>> alertGroupingCapture=new Capture<List<DBAccessor.DBColumnInfo>>();
  Capture<List<DBAccessor.DBColumnInfo>> alertNoticeCapture=new Capture<List<DBAccessor.DBColumnInfo>>();
  Capture<List<DBAccessor.DBColumnInfo>> serviceConfigCapture=new Capture<List<DBAccessor.DBColumnInfo>>();
  Capture<List<DBAccessor.DBColumnInfo>> serviceConfigMappingCapture=new Capture<List<DBAccessor.DBColumnInfo>>();
  Capture<DBAccessor.DBColumnInfo> configDataClusterConfigCapture=new Capture<DBAccessor.DBColumnInfo>();
  Capture<DBAccessor.DBColumnInfo> configDataBlueprintConfigurationCapture=new Capture<DBAccessor.DBColumnInfo>();
  Capture<DBAccessor.DBColumnInfo> configDataHostGroupConfigurationCapture=new Capture<DBAccessor.DBColumnInfo>();
  dbAccessor.createTable(eq("groups"),capture(groupsCapture),eq("group_id"));
  setViewExpectations(dbAccessor,maskColumnCapture,systemColumnCapture);
  setViewParameterExpectations(dbAccessor,maskedColumnCapture);
  setConfigAttributesColumnExpectations(dbAccessor,clusterConfigAttributesColumnCapture,"clusterconfig");
  setConfigAttributesColumnExpectations(dbAccessor,hostgroupConfigAttributesColumnCapture,"hostgroup_configuration");
  setConfigAttributesColumnExpectations(dbAccessor,blueprintConfigAttributesColumnCapture,"blueprint_configuration");
  setStageExpectations(dbAccessor,stageCommandParamsColumnCapture,stageHostParamsColumnCapture);
  dbAccessor.createTable(eq("alert_definition"),capture(alertDefinitionColumnCapture),eq("definition_id"));
  dbAccessor.createTable(eq("alert_history"),capture(alertHistoryColumnCapture),eq("alert_id"));
  dbAccessor.createTable(eq("alert_current"),capture(alertCurrentColumnCapture),eq("alert_id"));
  dbAccessor.createTable(eq("alert_group"),capture(alertGroupColumnCapture),eq("group_id"));
  dbAccessor.createTable(eq("alert_target"),capture(alertTargetCapture),eq("target_id"));
  dbAccessor.createTable(eq("alert_group_target"),capture(alertGroupTargetCapture),eq("group_id"),eq("target_id"));
  dbAccessor.createTable(eq("alert_grouping"),capture(alertGroupingCapture),eq("group_id"),eq("definition_id"));
  dbAccessor.createTable(eq("alert_notice"),capture(alertNoticeCapture),eq("notification_id"));
  dbAccessor.alterColumn(eq("clusterconfig"),capture(configDataClusterConfigCapture));
  dbAccessor.alterColumn(eq("blueprint_configuration"),capture(configDataBlueprintConfigurationCapture));
  dbAccessor.alterColumn(eq("hostgroup_configuration"),capture(configDataHostGroupConfigurationCapture));
  dbAccessor.createTable(eq("serviceconfig"),capture(serviceConfigCapture),eq("service_config_id"));
  dbAccessor.createTable(eq("serviceconfigmapping"),capture(serviceConfigMappingCapture),eq("service_config_id"),eq("config_id"));
  dbAccessor.getConnection();
  expectLastCall().andReturn(connection).anyTimes();
  connection.createStatement();
  expectLastCall().andReturn(statement).anyTimes();
  statement.executeQuery(anyObject(String.class));
  expectLastCall().andReturn(resultSet).anyTimes();
  resultSet.next();
  expectLastCall().andReturn(false).anyTimes();
  resultSet.close();
  expectLastCall().anyTimes();
  replay(dbAccessor,configuration,resultSet,connection,stmt,statement);
  AbstractUpgradeCatalog upgradeCatalog=getUpgradeCatalog(dbAccessor);
  Class<?> c=AbstractUpgradeCatalog.class;
  Field f=c.getDeclaredField("configuration");
  f.setAccessible(true);
  f.set(upgradeCatalog,configuration);
  upgradeCatalog.executeDDLUpdates();
  verify(dbAccessor,configuration,resultSet,connection,stmt,statement);
  assertClusterConfigColumns(clusterConfigAttributesColumnCapture);
  assertHostgroupConfigColumns(hostgroupConfigAttributesColumnCapture);
  assertBlueprintConfigColumns(blueprintConfigAttributesColumnCapture);
  assertViewColumns(maskColumnCapture,systemColumnCapture);
  assertViewParameterColumns(maskedColumnCapture);
  assertStageColumns(stageCommandParamsColumnCapture,stageHostParamsColumnCapture);
  assertEquals(4,groupsCapture.getValue().size());
  List<DBAccessor.DBColumnInfo> columnInfoList=groupsCapture.getValue();
  for (  DBAccessor.DBColumnInfo info : columnInfoList) {
    if (info.getName().equals("group_name")) {
      assertEquals(Integer.valueOf(255),info.getLength());
      break;
    }
  }
  assertEquals(12,alertDefinitionColumnCapture.getValue().size());
  assertEquals(11,alertHistoryColumnCapture.getValue().size());
  assertEquals(7,alertCurrentColumnCapture.getValue().size());
  assertEquals(5,alertGroupColumnCapture.getValue().size());
  assertEquals(5,alertTargetCapture.getValue().size());
  assertEquals(2,alertGroupTargetCapture.getValue().size());
  assertEquals(2,alertGroupingCapture.getValue().size());
  assertEquals(5,alertNoticeCapture.getValue().size());
  assertEquals(2,serviceConfigCapture.getValue().size());
  assertEquals(2,serviceConfigMappingCapture.getValue().size());
}
