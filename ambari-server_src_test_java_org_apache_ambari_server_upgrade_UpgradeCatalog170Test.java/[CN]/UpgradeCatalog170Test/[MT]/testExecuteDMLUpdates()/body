{
  Configuration configuration=createNiceMock(Configuration.class);
  DBAccessor dbAccessor=createNiceMock(DBAccessor.class);
  Injector injector=createNiceMock(Injector.class);
  ConfigHelper configHelper=createNiceMock(ConfigHelper.class);
  AmbariManagementController amc=createNiceMock(AmbariManagementController.class);
  Cluster cluster=createStrictMock(Cluster.class);
  Clusters clusters=createStrictMock(Clusters.class);
  Config config=createStrictMock(Config.class);
  Config pigConfig=createStrictMock(Config.class);
  UserDAO userDAO=createNiceMock(UserDAO.class);
  PrincipalDAO principalDAO=createNiceMock(PrincipalDAO.class);
  PrincipalTypeDAO principalTypeDAO=createNiceMock(PrincipalTypeDAO.class);
  ClusterDAO clusterDAO=createNiceMock(ClusterDAO.class);
  ResourceTypeDAO resourceTypeDAO=createNiceMock(ResourceTypeDAO.class);
  ResourceDAO resourceDAO=createNiceMock(ResourceDAO.class);
  ViewDAO viewDAO=createNiceMock(ViewDAO.class);
  ViewInstanceDAO viewInstanceDAO=createNiceMock(ViewInstanceDAO.class);
  PermissionDAO permissionDAO=createNiceMock(PermissionDAO.class);
  PrivilegeDAO privilegeDAO=createNiceMock(PrivilegeDAO.class);
  EntityTransaction trans=createNiceMock(EntityTransaction.class);
  CriteriaBuilder cb=createNiceMock(CriteriaBuilder.class);
  CriteriaQuery<HostRoleCommandEntity> cq=createNiceMock(CriteriaQuery.class);
  Root<HostRoleCommandEntity> hrc=createNiceMock(Root.class);
  Path<Long> taskId=null;
  Path<String> outputLog=null;
  Path<String> errorLog=null;
  Order o=createNiceMock(Order.class);
  TypedQuery<HostRoleCommandEntity> q=createNiceMock(TypedQuery.class);
  List<HostRoleCommandEntity> r=new ArrayList<HostRoleCommandEntity>();
  Method m=AbstractUpgradeCatalog.class.getDeclaredMethod("updateConfigurationProperties",String.class,Map.class,boolean.class,boolean.class);
  Method n=AbstractUpgradeCatalog.class.getDeclaredMethod("getEntityManagerProvider");
  UpgradeCatalog170 upgradeCatalog=createMockBuilder(UpgradeCatalog170.class).addMockedMethod(m).addMockedMethod(n).createMock();
  Map<String,Cluster> clustersMap=new HashMap<String,Cluster>();
  clustersMap.put("c1",cluster);
  Map<String,String> globalConfigs=new HashMap<String,String>();
  globalConfigs.put("prop1","val1");
  globalConfigs.put("smokeuser_keytab","val2");
  Map<String,String> pigSettings=new HashMap<String,String>();
  pigSettings.put("pig-content","foo");
  Set<String> envDicts=new HashSet<String>();
  envDicts.add("hadoop-env");
  envDicts.add("global");
  Map<String,String> contentOfHadoopEnv=new HashMap<String,String>();
  contentOfHadoopEnv.put("content","env file contents");
  upgradeCatalog.updateConfigurationProperties("hadoop-env",globalConfigs,true,true);
  expectLastCall();
  upgradeCatalog.updateConfigurationProperties("hadoop-env",contentOfHadoopEnv,true,true);
  expectLastCall();
  upgradeCatalog.updateConfigurationProperties("hbase-env",Collections.singletonMap("hbase_regionserver_xmn_max","512"),false,false);
  expectLastCall();
  upgradeCatalog.updateConfigurationProperties("hbase-env",Collections.singletonMap("hbase_regionserver_xmn_ratio","0.2"),false,false);
  expectLastCall();
  upgradeCatalog.updateConfigurationProperties("yarn-env",Collections.singletonMap("min_user_id","1000"),false,false);
  expectLastCall();
  expect(entityManager.getTransaction()).andReturn(trans).anyTimes();
  expect(entityManager.getCriteriaBuilder()).andReturn(cb).anyTimes();
  expect(entityManager.createQuery(cq)).andReturn(q).anyTimes();
  expect(trans.isActive()).andReturn(true).anyTimes();
  expect(upgradeCatalog.getEntityManagerProvider()).andReturn(entityManagerProvider).anyTimes();
  expect(cb.createQuery(HostRoleCommandEntity.class)).andReturn(cq).anyTimes();
  expect(cb.desc(taskId)).andReturn(o).anyTimes();
  expect(cq.from(HostRoleCommandEntity.class)).andReturn(hrc).anyTimes();
  expect(cq.select(hrc)).andReturn(cq).anyTimes();
  expect(cq.where(anyObject(Predicate.class))).andReturn(cq).anyTimes();
  expect(hrc.get(isA(SingularAttribute.class))).andReturn(taskId).times(2);
  expect(hrc.get(isA(SingularAttribute.class))).andReturn(outputLog).once();
  expect(hrc.get(isA(SingularAttribute.class))).andReturn(errorLog).once();
  expect(q.setMaxResults(1000)).andReturn(q).anyTimes();
  expect(q.getResultList()).andReturn(r).anyTimes();
  expect(configuration.getDatabaseUrl()).andReturn(Configuration.JDBC_IN_MEMORY_URL).anyTimes();
  expect(injector.getInstance(ConfigHelper.class)).andReturn(configHelper).anyTimes();
  expect(injector.getInstance(AmbariManagementController.class)).andReturn(amc).anyTimes();
  expect(amc.getClusters()).andReturn(clusters).anyTimes();
  expect(clusters.getClusters()).andReturn(clustersMap).anyTimes();
  expect(cluster.getDesiredConfigByType("global")).andReturn(config).anyTimes();
  expect(config.getProperties()).andReturn(globalConfigs).anyTimes();
  expect(cluster.getCurrentStackVersion()).andReturn(new StackId("HDP","2.1")).anyTimes();
  expect(configHelper.findConfigTypesByPropertyName(new StackId("HDP","2.1"),"prop1")).andReturn(envDicts).once();
  expect(configHelper.findConfigTypesByPropertyName(new StackId("HDP","2.1"),"smokeuser_keytab")).andReturn(new HashSet<String>()).once();
  expect(configHelper.findConfigTypesByPropertyName(new StackId("HDP","2.1"),"content")).andReturn(envDicts).once();
  expect(configHelper.getPropertyValueFromStackDefenitions(cluster,"hadoop-env","content")).andReturn("env file contents").once();
  expect(injector.getInstance(UserDAO.class)).andReturn(userDAO).once();
  expect(injector.getInstance(PrincipalDAO.class)).andReturn(principalDAO).once();
  expect(injector.getInstance(PrincipalTypeDAO.class)).andReturn(principalTypeDAO).once();
  expect(injector.getInstance(ClusterDAO.class)).andReturn(clusterDAO).once();
  expect(injector.getInstance(ResourceTypeDAO.class)).andReturn(resourceTypeDAO).once();
  expect(injector.getInstance(ResourceDAO.class)).andReturn(resourceDAO).once();
  expect(injector.getInstance(ViewDAO.class)).andReturn(viewDAO).once();
  expect(injector.getInstance(ViewInstanceDAO.class)).andReturn(viewInstanceDAO).once();
  expect(injector.getInstance(PermissionDAO.class)).andReturn(permissionDAO).once();
  expect(injector.getInstance(PrivilegeDAO.class)).andReturn(privilegeDAO).once();
  expect(userDAO.findAll()).andReturn(Collections.<UserEntity>emptyList()).anyTimes();
  expect(clusterDAO.findAll()).andReturn(Collections.<ClusterEntity>emptyList()).anyTimes();
  expect(viewDAO.findAll()).andReturn(Collections.<ViewEntity>emptyList()).anyTimes();
  expect(viewInstanceDAO.findAll()).andReturn(Collections.<ViewInstanceEntity>emptyList()).anyTimes();
  expect(permissionDAO.findAmbariAdminPermission()).andReturn(null);
  expect(permissionDAO.findClusterOperatePermission()).andReturn(null);
  expect(permissionDAO.findClusterReadPermission()).andReturn(null);
  expect(cluster.getDesiredConfigByType("pig-properties")).andReturn(pigConfig).anyTimes();
  expect(pigConfig.getProperties()).andReturn(pigSettings).anyTimes();
  replay(entityManager,trans,upgradeCatalog,cb,cq,hrc,q);
  replay(dbAccessor,configuration,injector,cluster,clusters,amc,config,configHelper,pigConfig);
  replay(userDAO,clusterDAO,viewDAO,viewInstanceDAO,permissionDAO);
  Class<?> c=AbstractUpgradeCatalog.class;
  Field f=c.getDeclaredField("configuration");
  f.setAccessible(true);
  f.set(upgradeCatalog,configuration);
  f=c.getDeclaredField("dbAccessor");
  f.setAccessible(true);
  f.set(upgradeCatalog,dbAccessor);
  f=c.getDeclaredField("injector");
  f.setAccessible(true);
  f.set(upgradeCatalog,injector);
  upgradeCatalog.executeDMLUpdates();
  verify(upgradeCatalog,dbAccessor,configuration,injector,cluster,clusters,amc,config,configHelper);
}
