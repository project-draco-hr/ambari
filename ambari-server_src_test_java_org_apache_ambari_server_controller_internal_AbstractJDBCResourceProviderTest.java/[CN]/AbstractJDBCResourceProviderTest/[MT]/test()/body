{
  Set<String> requestedIds=new TreeSet<String>();
  requestedIds.add(property1);
  requestedIds.add("none1");
  requestedIds.add(property2);
  AbstractJDBCResourceProvider<TestFields> provider=new TestAbstractJDBCResourceProviderImpl(requestedIds,null);
  Assert.assertEquals(TestFields.field1.toString() + "," + TestFields.field2.toString(),provider.getDBFieldString(requestedIds));
  Assert.assertEquals(TestFields.field1.toString(),provider.getDBFieldString(Collections.singleton(property1)));
  Assert.assertEquals("",provider.getDBFieldString(Collections.singleton("none1")));
  Assert.assertEquals(TestFields.field1,provider.getDBField(property1));
  Assert.assertEquals(TestFields.field2,provider.getDBField(property2));
  ResultSet rs=createMock(ResultSet.class);
  expect(rs.getString(TestFields.field1.toString())).andReturn("1").once();
  expect(rs.getLong(TestFields.field2.toString())).andReturn(2l).once();
  expect(rs.getInt(TestFields.field1.toString())).andReturn(3).once();
  replay(rs);
  Resource r=new ResourceImpl((Resource.Type)null);
  provider.setString(r,property1,rs,requestedIds);
  provider.setString(r,"none2",rs,requestedIds);
  Assert.assertEquals("1",r.getPropertyValue(property1));
  r=new ResourceImpl((Resource.Type)null);
  provider.setLong(r,property2,rs,requestedIds);
  provider.setLong(r,"none2",rs,requestedIds);
  Assert.assertEquals(2l,r.getPropertyValue(property2));
  r=new ResourceImpl((Resource.Type)null);
  provider.setInt(r,property1,rs,requestedIds);
  provider.setInt(r,"none2",rs,requestedIds);
  Assert.assertEquals(3,r.getPropertyValue(property1));
  verify(rs);
}
