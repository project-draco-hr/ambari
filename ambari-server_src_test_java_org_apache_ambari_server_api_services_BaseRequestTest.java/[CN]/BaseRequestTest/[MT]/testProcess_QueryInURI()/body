{
  HttpHeaders headers=createNiceMock(HttpHeaders.class);
  String path=URLEncoder.encode("http://localhost.com:8080/api/v1/clusters/c1","UTF-8");
  String query=URLEncoder.encode("foo=foo-value&bar=bar-value","UTF-8");
  URI uri=new URI(path + "?" + query);
  PredicateCompiler compiler=createStrictMock(PredicateCompiler.class);
  Predicate predicate=createNiceMock(Predicate.class);
  UriInfo uriInfo=createMock(UriInfo.class);
  @SuppressWarnings("unchecked") MultivaluedMap<String,String> queryParams=createMock(MultivaluedMap.class);
  RequestHandler handler=createStrictMock(RequestHandler.class);
  Result result=createMock(Result.class);
  ResultStatus resultStatus=createMock(ResultStatus.class);
  ResultPostProcessor processor=createStrictMock(ResultPostProcessor.class);
  RequestBody body=createNiceMock(RequestBody.class);
  ResourceInstance resource=createNiceMock(ResourceInstance.class);
  ResourceDefinition resourceDefinition=createNiceMock(ResourceDefinition.class);
  Renderer renderer=new DefaultRenderer();
  Request request=getTestRequest(headers,body,uriInfo,compiler,handler,processor,resource);
  expect(uriInfo.getQueryParameters()).andReturn(queryParams).anyTimes();
  expect(queryParams.getFirst(QueryLexer.QUERY_MINIMAL)).andReturn(null);
  expect(queryParams.getFirst(QueryLexer.QUERY_FORMAT)).andReturn(null);
  expect(resource.getResourceDefinition()).andReturn(resourceDefinition);
  expect(resourceDefinition.getRenderer(null)).andReturn(renderer);
  expect(uriInfo.getRequestUri()).andReturn(uri).anyTimes();
  expect(body.getQueryString()).andReturn(null);
  expect(compiler.compile("foo=foo-value&bar=bar-value")).andReturn(predicate);
  expect(handler.handleRequest(request)).andReturn(result);
  expect(result.getStatus()).andReturn(resultStatus).anyTimes();
  expect(resultStatus.isErrorState()).andReturn(false).anyTimes();
  processor.process(result);
  replay(headers,compiler,uriInfo,handler,queryParams,resource,resourceDefinition,result,resultStatus,processor,predicate,body);
  Result processResult=request.process();
  verify(headers,compiler,uriInfo,handler,queryParams,resource,resourceDefinition,result,resultStatus,processor,predicate,body);
  assertSame(processResult,result);
  assertSame(predicate,request.getQueryPredicate());
}
