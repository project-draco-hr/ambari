{
  UriInfo uriInfo=createMock(UriInfo.class);
  String uriString="http://localhost.com:8080/api/v1/clusters/c1";
  @SuppressWarnings("unchecked") MultivaluedMap<String,String> queryParams=createMock(MultivaluedMap.class);
  URI uri=new URI(URLEncoder.encode(uriString,"UTF-8"));
  PredicateCompiler compiler=createStrictMock(PredicateCompiler.class);
  RequestBody body=createNiceMock(RequestBody.class);
  Exception exception=new InvalidQueryException("test");
  ResourceInstance resource=createNiceMock(ResourceInstance.class);
  ResourceDefinition resourceDefinition=createNiceMock(ResourceDefinition.class);
  Renderer renderer=new DefaultRenderer();
  Request request=getTestRequest(null,body,uriInfo,compiler,null,null,resource);
  expect(uriInfo.getQueryParameters()).andReturn(queryParams).anyTimes();
  expect(queryParams.getFirst(QueryLexer.QUERY_MINIMAL)).andReturn(null);
  expect(queryParams.getFirst(QueryLexer.QUERY_FORMAT)).andReturn(null);
  expect(resource.getResourceDefinition()).andReturn(resourceDefinition).anyTimes();
  expect(resourceDefinition.getRenderer(null)).andReturn(renderer);
  expect(uriInfo.getRequestUri()).andReturn(uri).anyTimes();
  expect(body.getQueryString()).andReturn("blahblahblah");
  expect(compiler.compile("blahblahblah")).andThrow(exception);
  replay(compiler,uriInfo,queryParams,resource,resourceDefinition,body);
  Result processResult=request.process();
  verify(compiler,uriInfo,queryParams,resource,resourceDefinition,body);
  assertEquals(400,processResult.getStatus().getStatusCode());
  assertTrue(processResult.getStatus().isErrorState());
  assertEquals("Unable to compile query predicate: test",processResult.getStatus().getMessage());
}
