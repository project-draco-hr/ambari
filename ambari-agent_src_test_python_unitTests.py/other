'\nLicensed to the Apache Software Foundation (ASF) under one\nor more contributor license agreements.  See the NOTICE file\ndistributed with this work for additional information\nregarding copyright ownership.  The ASF licenses this file\nto you under the Apache License, Version 2.0 (the\n"License"); you may not use this file except in compliance\nwith the License.  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n'
'\nSAMPLE USAGE:\n\npython unitTests.py\npython unitTests.py NameOfFile.py\npython unitTests.py NameOfFileWithoutExtension  (this will append .* to the end, so it can match other file names too)\n\nSETUP:\nTo run in Linux from command line,\ncd to this same directory. Then make sure PYTHONPATH is correct.\n\nexport PYTHONPATH=$PYTHONPATH:$(pwd)/ambari-agent/src/test/python:\n$(pwd)/ambari-common/src/test/python:\n$(pwd)/ambari-agent/src/test/python/ambari_agent:\n$(pwd)/ambari-common/src/main/python:\n$(pwd)/ambari-server/src/main/resources/common-services/HDFS/2.1.0.2.0/package/files:\n$(pwd)/ambari-agent/src/test/python/resource_management:\n$(pwd)/ambari-common/src/main/python/ambari_jinja2\n'
import unittest
import fnmatch
from os.path import isdir
import logging
from only_for_platform import get_platform, PLATFORM_WINDOWS
LOG_FILE_NAME = 'tests.log'
SELECTED_PREFIX = '_'
PY_EXT = '.py'
if (get_platform() == PLATFORM_WINDOWS):
    IGNORE_FOLDERS = ['resource_management']
else:
    IGNORE_FOLDERS = ['resource_management_windows']
TEST_MASK = '[Tt]est*.py'
if (__name__ == '__main__'):
    import os
    import sys
    sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))
    sys.path.insert(0, ((((os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))) + os.sep) + 'main') + os.sep) + 'python'))
    sys.path.insert(0, ((((((os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))) + os.sep) + 'main') + os.sep) + 'python') + os.sep) + 'ambari_agent'))
    logger = logging.getLogger()
    logger.setLevel(logging.INFO)
    formatter = logging.Formatter('[%(levelname)s] %(message)s')
    src_dir = os.getcwd()
    target_dir = ((parent_dir(parent_dir(parent_dir(src_dir))) + os.sep) + 'target')
    if (not os.path.exists(target_dir)):
        os.mkdir(target_dir)
    path = ((target_dir + os.sep) + LOG_FILE_NAME)
    file = open(path, 'w')
    consoleLog = logging.StreamHandler(file)
    consoleLog.setFormatter(formatter)
    logger.addHandler(consoleLog)
    main()
