{
  ResourceProvider provider=getResourceProvider(Resource.Type.Cluster);
  Request request=PropertyHelper.getReadRequest(CLUSTER_NAME_PROPERTY_ID);
  try {
    Set<Resource> clusters=provider.getResources(request,null);
    provider=getResourceProvider(Resource.Type.Host);
    request=PropertyHelper.getReadRequest(HOST_NAME_PROPERTY_ID,HOST_IP_PROPERTY_ID,HOST_ATTRIBUTES_PROPERTY_ID);
    ObjectMapper mapper=new ObjectMapper();
    hostMapping=new HashMap<String,Map<String,String>>();
    hostComponentMapping=new HashMap<String,Map<String,String>>();
    for (    Resource cluster : clusters) {
      String clusterName=(String)cluster.getPropertyValue(CLUSTER_NAME_PROPERTY_ID);
      Predicate predicate=new PredicateBuilder().property(HOST_CLUSTER_NAME_PROPERTY_ID).equals(clusterName).toPredicate();
      Set<Resource> hosts=provider.getResources(request,predicate);
      Map<String,String> map=hostMapping.get(clusterName);
      if (map == null) {
        map=new HashMap<String,String>();
        hostMapping.put(clusterName,map);
      }
      for (      Resource host : hosts) {
        String attributes=(String)host.getPropertyValue(HOST_ATTRIBUTES_PROPERTY_ID);
        if (attributes != null && !attributes.startsWith("[]")) {
          try {
            Map<String,String> attributeMap=mapper.readValue(attributes,new TypeReference<Map<String,String>>(){
            }
);
            map.put(attributeMap.get("privateFQDN"),attributeMap.get("publicFQDN"));
          }
 catch (          IOException e) {
            throw new IllegalStateException("Can't read hosts " + attributes,e);
          }
        }
 else {
          String hostName=(String)host.getPropertyValue(HOST_NAME_PROPERTY_ID);
          String ip=(String)host.getPropertyValue(HOST_IP_PROPERTY_ID);
          map.put(hostName,ip);
        }
      }
      request=PropertyHelper.getReadRequest(HOST_COMPONENT_HOST_NAME_PROPERTY_ID,HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID);
      predicate=new PredicateBuilder().property(HOST_COMPONENT_CLUSTER_NAME_PROPERTY_ID).equals(clusterName).toPredicate();
      provider=getResourceProvider(Resource.Type.HostComponent);
      Set<Resource> hostComponents=provider.getResources(request,predicate);
      Map<String,String> cmap=hostComponentMapping.get(clusterName);
      if (cmap == null) {
        cmap=new HashMap<String,String>();
        hostComponentMapping.put(clusterName,cmap);
      }
      for (      Resource hostComponent : hostComponents) {
        String componentName=(String)hostComponent.getPropertyValue(HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID);
        String hostName=(String)hostComponent.getPropertyValue(HOST_COMPONENT_HOST_NAME_PROPERTY_ID);
        if (componentName.equals("NAMENODE")) {
          cmap.put(componentName,map.get(hostName));
        }
      }
    }
  }
 catch (  AmbariException e) {
  }
}
