{
  Set<String> propertyIds=PropertyHelper.getPropertyIds(type);
  Map<Resource.Type,String> keyPropertyIds=PropertyHelper.getKeyPropertyIds(type);
switch (type.getInternalType()) {
case Workflow:
    return new WorkflowResourceProvider(propertyIds,keyPropertyIds);
case Job:
  return new JobResourceProvider(propertyIds,keyPropertyIds);
case TaskAttempt:
return new TaskAttemptResourceProvider(propertyIds,keyPropertyIds);
case View:
return new ViewResourceProvider();
case ViewVersion:
return new ViewVersionResourceProvider();
case ViewInstance:
return new ViewInstanceResourceProvider();
case StackServiceComponentDependency:
return new StackDependencyResourceProvider(propertyIds,keyPropertyIds);
case Permission:
return new PermissionResourceProvider();
case AmbariPrivilege:
return new AmbariPrivilegeResourceProvider();
case ViewPrivilege:
return new ViewPrivilegeResourceProvider();
case ViewPermission:
return new ViewPermissionResourceProvider();
case ClusterPrivilege:
return new ClusterPrivilegeResourceProvider();
case LdapSyncEvent:
return new LdapSyncEventResourceProvider(managementController);
case UserPrivilege:
return new UserPrivilegeResourceProvider();
case GroupPrivilege:
return new GroupPrivilegeResourceProvider();
case Alert:
return new AlertResourceProvider(managementController);
case AlertDefinition:
return new AlertDefinitionResourceProvider(managementController);
case AlertHistory:
return new AlertHistoryResourceProvider(managementController);
case AlertTarget:
return new AlertTargetResourceProvider();
case AlertGroup:
return new AlertGroupResourceProvider(managementController);
case AlertNotice:
return new AlertNoticeResourceProvider(managementController);
case UpgradeGroup:
return new UpgradeGroupResourceProvider(managementController);
case UpgradeItem:
return new UpgradeItemResourceProvider(managementController);
case UpgradeSummary:
return new UpgradeSummaryResourceProvider(managementController);
case ClusterStackVersion:
return new ClusterStackVersionResourceProvider(managementController);
case PreUpgradeCheck:
return new PreUpgradeCheckResourceProvider(managementController);
case HostStackVersion:
return new HostStackVersionResourceProvider(managementController);
case Stage:
return new StageResourceProvider(managementController);
case OperatingSystem:
return new OperatingSystemResourceProvider(managementController);
case Repository:
return new RepositoryResourceProvider(managementController);
case Setting:
return new SettingResourceProvider();
case Artifact:
return new ArtifactResourceProvider(managementController);
default :
return AbstractControllerResourceProvider.getResourceProvider(type,propertyIds,keyPropertyIds,managementController);
}
}
