{
  Set<String> propertyIds=PropertyHelper.getPropertyIds(type);
  Map<Resource.Type,String> keyPropertyIds=PropertyHelper.getKeyPropertyIds(type);
switch (type.getInternalType()) {
case Workflow:
    return new WorkflowResourceProvider(propertyIds,keyPropertyIds);
case Job:
  return new JobResourceProvider(propertyIds,keyPropertyIds);
case TaskAttempt:
return new TaskAttemptResourceProvider(propertyIds,keyPropertyIds);
case View:
return new ViewResourceProvider();
case ViewVersion:
return new ViewVersionResourceProvider();
case ViewInstance:
return new ViewInstanceResourceProvider();
case StackServiceComponentDependency:
return new StackDependencyResourceProvider(propertyIds,keyPropertyIds);
case Permission:
return new PermissionResourceProvider();
case AmbariPrivilege:
return new AmbariPrivilegeResourceProvider();
case ViewPrivilege:
return new ViewPrivilegeResourceProvider();
case ViewPermission:
return new ViewPermissionResourceProvider();
case ClusterPrivilege:
return new ClusterPrivilegeResourceProvider();
case LdapSyncEvent:
return new LdapSyncEventResourceProvider(managementController);
case UserPrivilege:
return new UserPrivilegeResourceProvider();
default :
return AbstractControllerResourceProvider.getResourceProvider(type,propertyIds,keyPropertyIds,managementController);
}
}
