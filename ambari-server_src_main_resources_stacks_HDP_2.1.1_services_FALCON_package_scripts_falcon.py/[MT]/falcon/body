def falcon(type, action=None):
    import params
    Directory(params.falcon_pid_dir, owner=params.falcon_user)
    Directory(params.falcon_log_dir, owner=params.falcon_user)
    if (type == 'client'):
        if (action == 'config'):
            File((params.falcon_conf_dir + '/client.properties'), content=Template('client.properties.j2'), mode=420)
    elif (type == 'server'):
        if (action == 'config'):
            if (params.store_uri[0:4] == 'hdfs'):
                params.HdfsDirectory(params.store_uri, action='create', owner=params.falcon_user, mode=493)
            Directory(params.falcon_local_dir, owner=params.falcon_user, recursive=True)
            Directory(params.falcon_data_dir, owner=params.falcon_user, recursive=True)
            PropertiesFile((params.falcon_conf_dir + '/runtime.properties'), properties=params.falcon_runtime_properties, mode=420)
            PropertiesFile((params.falcon_conf_dir + '/startup.properties'), properties=params.falcon_startup_properties, mode=420)
        if (action == 'start'):
            Execute(format('env JAVA_HOME={java_home} FALCON_LOG_DIR={falcon_log_dir} FALCON_PID_DIR=/var/run/falcon FALCON_DATA_DIR={falcon_data_dir} {falcon_home}/bin/falcon-start -port {falcon_port}'), user=params.falcon_user)
        if (action == 'stop'):
            Execute(format('env JAVA_HOME={java_home} FALCON_LOG_DIR={falcon_log_dir} FALCON_PID_DIR=/var/run/falcon FALCON_DATA_DIR={falcon_data_dir} {falcon_home}/bin/falcon-stop'), user=params.falcon_user)
            File(params.server_pid_file, action='delete')
