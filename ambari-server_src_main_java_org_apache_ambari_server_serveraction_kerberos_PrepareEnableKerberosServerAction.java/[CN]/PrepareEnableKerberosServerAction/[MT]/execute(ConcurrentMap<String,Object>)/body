{
  Cluster cluster=getCluster();
  if (cluster == null) {
    throw new AmbariException("Missing cluster object");
  }
  KerberosDescriptor kerberosDescriptor=kerberosHelper.getKerberosDescriptor(cluster);
  Collection<String> identityFilter=getIdentityFilter();
  List<ServiceComponentHost> schToProcess=kerberosHelper.getServiceComponentHostsToProcess(cluster,kerberosDescriptor,getServiceComponentFilter(),identityFilter,new KerberosHelper.Command<Boolean,ServiceComponentHost>(){
    @Override public Boolean invoke(    ServiceComponentHost sch) throws AmbariException {
      return (sch.getDesiredSecurityState() == SecurityState.SECURED_KERBEROS) && (sch.getSecurityState() != SecurityState.SECURED_KERBEROS);
    }
  }
);
  Map<String,String> commandParameters=getCommandParameters();
  String dataDirectory=getCommandParameterValue(commandParameters,DATA_DIRECTORY);
  Map<String,Map<String,String>> kerberosConfigurations=new HashMap<String,Map<String,String>>();
  int schCount=schToProcess.size();
  if (schCount == 0) {
    actionLog.writeStdOut("There are no components to process");
  }
 else   if (schCount == 1) {
    actionLog.writeStdOut(String.format("Processing %d component",schCount));
  }
 else {
    actionLog.writeStdOut(String.format("Processing %d components",schCount));
  }
  processServiceComponentHosts(cluster,kerberosDescriptor,schToProcess,identityFilter,dataDirectory,kerberosConfigurations);
  if (!schToProcess.isEmpty()) {
    actionLog.writeStdOut("Creating auth-to-local rules");
    kerberosHelper.setAuthToLocalRules(kerberosDescriptor,cluster,getDefaultRealm(commandParameters),kerberosHelper.calculateConfigurations(cluster,null,kerberosDescriptor.getProperties()),kerberosConfigurations);
  }
  actionLog.writeStdOut("Determining configuration changes");
  Map<String,String> clusterEnvProperties=kerberosConfigurations.get(KerberosHelper.SECURITY_ENABLED_CONFIG_TYPE);
  if (clusterEnvProperties == null) {
    clusterEnvProperties=new HashMap<String,String>();
    kerberosConfigurations.put(KerberosHelper.SECURITY_ENABLED_CONFIG_TYPE,clusterEnvProperties);
  }
  clusterEnvProperties.put(KerberosHelper.SECURITY_ENABLED_PROPERTY_NAME,"true");
  if (!kerberosConfigurations.isEmpty()) {
    if (dataDirectory == null) {
      String message="The data directory has not been set.  Generated data can not be stored.";
      LOG.error(message);
      throw new AmbariException(message);
    }
    File configFile=new File(dataDirectory,KerberosConfigDataFileWriter.DATA_FILE_NAME);
    KerberosConfigDataFileWriter kerberosConfDataFileWriter=null;
    actionLog.writeStdOut(String.format("Writing configuration changes metadata file to %s",configFile.getAbsolutePath()));
    try {
      kerberosConfDataFileWriter=kerberosConfigDataFileWriterFactory.createKerberosConfigDataFileWriter(configFile);
      for (      Map.Entry<String,Map<String,String>> entry : kerberosConfigurations.entrySet()) {
        String type=entry.getKey();
        Map<String,String> properties=entry.getValue();
        if (properties != null) {
          for (          Map.Entry<String,String> configTypeEntry : properties.entrySet()) {
            kerberosConfDataFileWriter.addRecord(type,configTypeEntry.getKey(),configTypeEntry.getValue(),KerberosConfigDataFileWriter.OPERATION_TYPE_SET);
          }
        }
      }
    }
 catch (    IOException e) {
      String message=String.format("Failed to write kerberos configurations file - %s",configFile.getAbsolutePath());
      LOG.error(message,e);
      actionLog.writeStdOut(message);
      actionLog.writeStdErr(message + "\n" + e.getLocalizedMessage());
      throw new AmbariException(message,e);
    }
 finally {
      if (kerberosConfDataFileWriter != null) {
        try {
          kerberosConfDataFileWriter.close();
        }
 catch (        IOException e) {
          String message="Failed to close the kerberos configurations file writer";
          LOG.warn(message,e);
          actionLog.writeStdOut(message);
          actionLog.writeStdErr(message + "\n" + e.getLocalizedMessage());
        }
      }
    }
  }
  return createCommandReport(0,HostRoleStatus.COMPLETED,"{}",actionLog.getStdOut(),actionLog.getStdErr());
}
