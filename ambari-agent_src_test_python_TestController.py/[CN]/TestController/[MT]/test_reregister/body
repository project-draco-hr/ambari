def test_reregister(self):
    '\n      test to make sure if we can get a re register command, we register with the server\n    '
    netutil = NetUtil()
    netutil.HEARTBEAT_IDDLE_INTERVAL_SEC = 0.05
    netutil.HEARTBEAT_NOT_IDDLE_INTERVAL_SEC = 0.05
    responces = Queue.Queue()
    responce1 = {'responseId': 8, 'executionCommands': [], 'statusCommands': [], 'restartAgent': 'true', }
    responce1 = json.dumps(responce1)
    responces.put(responce1)
    testsPath = os.path.dirname(os.path.realpath(__file__))
    dictPath = ((((((((((((testsPath + os.sep) + '..') + os.sep) + '..') + os.sep) + 'main') + os.sep) + 'python') + os.sep) + 'ambari_agent') + os.sep) + 'servicesToPidNames.dict')
    AmbariConfig.config.set('services', 'serviceToPidMapFile', dictPath)
    actionQueue = ActionQueue(AmbariConfig.AmbariConfig().getConfig())
    heartbeat = Heartbeat(actionQueue)
    controller = self.ControllerMock_fake_restartAgent(AmbariConfig.config, responces)
    controller.heartbeat = heartbeat
    controller.actionQueue = actionQueue
    controller.logger = logger
    controller.netutil = netutil
    controller.heartbeatWithServer()
    restarts = controller.restartCount
    self.assertEquals(restarts, 1, 'Agent should restart if we get a re register command')
