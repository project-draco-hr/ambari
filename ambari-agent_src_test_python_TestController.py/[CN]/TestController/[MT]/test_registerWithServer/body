@patch('json.dumps')
@patch('json.loads')
@patch('time.sleep')
@patch('pprint.pformat')
@patch.object(Controller, 'randint')
def test_registerWithServer(self, randintMock, pformatMock, sleepMock, loadsMock, dumpsMock):
    out = StringIO.StringIO()
    sys.stdout = out
    register = MagicMock()
    self.controller.register = register
    sendRequest = MagicMock()
    self.controller.sendRequest = sendRequest
    dumpsMock.return_value = 'request'
    response = {'responseId': 1, }
    loadsMock.return_value = response
    self.assertEqual(response, self.controller.registerWithServer())
    response['statusCommands'] = 'commands'
    self.controller.addToQueue = MagicMock(name='addToQueue')
    self.assertEqual(response, self.controller.registerWithServer())
    self.controller.addToQueue.assert_called_with('commands')
    calls = []

    def side_effect(*args):
        if (len(calls) == 0):
            calls.append(1)
            raise Exception('test')
        return 'request'
    del response['statusCommands']
    dumpsMock.side_effect = side_effect
    self.assertEqual(response, self.controller.registerWithServer())
    self.assertTrue(randintMock.called)
    self.assertTrue(sleepMock.called)
    sys.stdout = sys.__stdout__
    self.controller.sendRequest = Controller.Controller.sendRequest
    self.controller.addToQueue = Controller.Controller.addToQueue
