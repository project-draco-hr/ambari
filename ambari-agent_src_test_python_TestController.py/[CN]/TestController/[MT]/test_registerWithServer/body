@patch('json.dumps')
@patch('time.sleep')
@patch('pprint.pformat')
@patch.object(Controller, 'randint')
def test_registerWithServer(self, randintMock, pformatMock, sleepMock, dumpsMock):
    out = StringIO.StringIO()
    sys.stdout = out
    register = MagicMock()
    self.controller.register = register
    self.controller.sendRequest = MagicMock()
    dumpsMock.return_value = 'request'
    self.controller.sendRequest.return_value = '{"errors":"Error text"}'
    self.assertEqual({'errors': 'Error text', }, self.controller.registerWithServer())
    self.controller.sendRequest.return_value = '{"responseId":1}'
    self.assertEqual({'responseId': 1, }, self.controller.registerWithServer())
    self.controller.sendRequest.return_value = '{"responseId":1, "statusCommands": "commands"}'
    self.controller.addToQueue = MagicMock(name='addToQueue')
    self.assertEqual({'responseId': 1, 'statusCommands': 'commands', }, self.controller.registerWithServer())
    self.controller.addToQueue.assert_called_with('commands')
    calls = []

    def side_effect(*args):
        if (len(calls) == 0):
            calls.append(1)
            raise Exception('test')
        return 'request'
    self.controller.sendRequest.return_value = '{"responseId":1}'
    dumpsMock.side_effect = side_effect
    self.assertEqual({'responseId': 1, }, self.controller.registerWithServer())
    self.assertTrue(randintMock.called)
    self.assertTrue(sleepMock.called)
    sys.stdout = sys.__stdout__
    self.controller.sendRequest = Controller.Controller.sendRequest
    self.controller.addToQueue = Controller.Controller.addToQueue
