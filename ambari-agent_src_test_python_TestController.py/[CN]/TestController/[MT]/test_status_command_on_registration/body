def test_status_command_on_registration(self):
    '\n    test to make sure if we get a status check command from the server, we are able to evaluate and register at the server\n    '
    netutil = NetUtil()
    netutil.HEARTBEAT_IDDLE_INTERVAL_SEC = 0.05
    netutil.HEARTBEAT_NOT_IDDLE_INTERVAL_SEC = 0.05
    responces = Queue.Queue()
    responce1 = {'response': 'OK', 'responseId': 8, 'statusCommands': [{'clusterName': 'c1', 'commandType': 'STATUS_COMMAND', 'componentName': 'NAMENODE', 'serviceName': 'HDFS', }], }
    responce1 = json.dumps(responce1)
    responces.put(responce1)
    testsPath = os.path.dirname(os.path.realpath(__file__))
    dictPath = ((((((((((((testsPath + os.sep) + '..') + os.sep) + '..') + os.sep) + 'main') + os.sep) + 'python') + os.sep) + 'ambari_agent') + os.sep) + 'servicesToPidNames.dict')
    AmbariConfig.config.set('services', 'serviceToPidMapFile', dictPath)
    actionQueue = ActionQueue(AmbariConfig.AmbariConfig().getConfig())
    heartbeat = Heartbeat(actionQueue)
    controller = self.ControllerMock_fake_restartAgent(AmbariConfig.config, responces)
    controller.heartbeat = heartbeat
    controller.actionQueue = actionQueue
    controller.logger = logger
    controller.netutil = netutil
    controller.registerWithServer()
    queue = controller.actionQueue.getCommandQueue()
    self.assertEquals(queue.qsize(), 1, 'Status command should be queued once')
    command = queue.get()
    self.assertEquals(command['clusterName'], 'c1')
    self.assertEquals(command['commandType'], 'STATUS_COMMAND')
    self.assertEquals(command['componentName'], 'NAMENODE')
    self.assertEquals(command['serviceName'], 'HDFS')
