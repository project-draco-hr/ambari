def queue_callback(self, zh, rc, data):
    if (zookeeper.OK == rc):
        try:
            for child in sorted(data):
                action = ((self.actionNode + '/') + child)
                workLog = (((self.actionNode + '/') + child) + '/worklog')
                statusLog = (self.statusNode + '/status-')
                ' Launch the task if the task has not been executed '
                if (zookeeper.exists(zh, workLog, None) == None):
                    self.launch(zh, workLog, action, statusLog)
                else:
                    ' If task has been previous launched, check for partial execution '
                    buffer = zookeeper.get(zh, workLog, 0)
                    state = simplejson.loads(buffer[0])
                    ' If task is incompleted in execution, launch again '
                    if (('status' in state) and (state['status'] == 'STARTING')):
                        logger.info(('Relaunch ' + child))
                        self.launch(zh, workLog, action, statusLog)
                    else:
                        ' If the task has been launched, and completed, update status queue '
                        if (zookeeper.exists(zh, statusLog, None) == None):
                            logger.info('Update status.')
                            self.update(zh, statusLog, state)
        except NoNodeException as err:
            ' Skip no node exception '
        except Exception as err:
            logger.exception(err)
    elif (zookeeper.NONODE == rc):
        self.safeMode = True
    if self.lock.locked():
        self.lock.release()
