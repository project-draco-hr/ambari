def parse_statements(self, end_tokens, drop_needle=False):
    'Parse multiple statements into a list until one of the end tokens\n        is reached.  This is used to parse the body of statements as it also\n        parses template data if appropriate.  The parser checks first if the\n        current token is a colon and skips it if there is one.  Then it checks\n        for the block end and parses until if one of the `end_tokens` is\n        reached.  Per default the active token in the stream at the end of\n        the call is the matched end token.  If this is not wanted `drop_needle`\n        can be set to `True` and the end token is removed.\n        '
    self.stream.skip_if('colon')
    self.stream.expect('block_end')
    result = self.subparse(end_tokens)
    if (self.stream.current.type == 'eof'):
        self.fail_eof(end_tokens)
    if drop_needle:
        next(self.stream)
    return result
