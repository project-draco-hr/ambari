{
  List<BlueprintServiceConfigRequest> configurationRequests=new LinkedList<BlueprintServiceConfigRequest>();
  Blueprint blueprint=clusterTopology.getBlueprint();
  Configuration clusterConfiguration=clusterTopology.getConfiguration();
  for (  String service : blueprint.getServices()) {
    BlueprintServiceConfigRequest blueprintConfigRequest=new BlueprintServiceConfigRequest(service);
    for (    String serviceConfigType : stack.getAllConfigurationTypes(service)) {
      Set<String> excludedConfigTypes=stack.getExcludedConfigurationTypes(service);
      if (!excludedConfigTypes.contains(serviceConfigType)) {
        if (!serviceConfigType.equals("cluster-env")) {
          if (clusterConfiguration.getFullProperties().containsKey(serviceConfigType)) {
            blueprintConfigRequest.addConfigElement(serviceConfigType,clusterConfiguration.getFullProperties().get(serviceConfigType),clusterConfiguration.getFullAttributes().get(serviceConfigType));
          }
        }
      }
    }
    configurationRequests.add(blueprintConfigRequest);
  }
  BlueprintServiceConfigRequest globalConfigRequest=new BlueprintServiceConfigRequest("GLOBAL-CONFIG");
  Map<String,String> clusterEnvProps=clusterConfiguration.getFullProperties().get("cluster-env");
  Map<String,Map<String,String>> clusterEnvAttributes=clusterConfiguration.getFullAttributes().get("cluster-env");
  globalConfigRequest.addConfigElement("cluster-env",clusterEnvProps,clusterEnvAttributes);
  configurationRequests.add(globalConfigRequest);
  setConfigurationsOnCluster(configurationRequests,tag);
}
