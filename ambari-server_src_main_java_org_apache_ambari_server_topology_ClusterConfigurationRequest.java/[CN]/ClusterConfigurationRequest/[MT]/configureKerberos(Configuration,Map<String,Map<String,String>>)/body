{
  Set<String> updatedConfigTypes=new HashSet<>();
  Cluster cluster=getCluster();
  Blueprint blueprint=clusterTopology.getBlueprint();
  Configuration stackDefaults=blueprint.getStack().getConfiguration(blueprint.getServices());
  Map<String,Map<String,String>> stackDefaultProps=stackDefaults.getProperties();
  Map<String,String> componentHostsMap=createComponentHostMap(blueprint);
  existingConfigurations.put("clusterHostInfo",componentHostsMap);
  try {
    AmbariContext.getController().getKerberosHelper().ensureHeadlessIdentities(cluster,existingConfigurations,new HashSet<String>(blueprint.getServices()));
    Map<String,Map<String,String>> updatedConfigs=AmbariContext.getController().getKerberosHelper().getServiceConfigurationUpdates(cluster,existingConfigurations,createServiceComponentMap(blueprint),null,null,true,false);
    Map<String,String> clusterEnv=updatedConfigs.get("cluster-env");
    if (clusterEnv == null) {
      clusterEnv=new HashMap<String,String>();
      updatedConfigs.put("cluster-env",clusterEnv);
    }
    clusterEnv.put("security_enabled","true");
    for (    String configType : updatedConfigs.keySet()) {
      if (!isOrphanedConfigType(configType,blueprint)) {
        Map<String,String> propertyMap=updatedConfigs.get(configType);
        Map<String,String> clusterConfigProperties=existingConfigurations.get(configType);
        Map<String,String> stackDefaultConfigProperties=stackDefaultProps.get(configType);
        for (        String property : propertyMap.keySet()) {
          String currentValue=clusterConfiguration.getPropertyValue(configType,property);
          String newValue=propertyMap.get(property);
          if (!propertyHasCustomValue(clusterConfigProperties,stackDefaultConfigProperties,property) && (currentValue == null || !currentValue.equals(newValue))) {
            LOG.debug("Update Kerberos related config property: {} {} {}",configType,property,propertyMap.get(property));
            clusterConfiguration.setProperty(configType,property,newValue);
            updatedConfigTypes.add(configType);
          }
        }
      }
    }
  }
 catch (  KerberosInvalidConfigurationException e) {
    LOG.error("An exception occurred while doing Kerberos related configuration update: " + e,e);
  }
  return updatedConfigTypes;
}
