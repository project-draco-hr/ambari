{
  File fileToUpload=mock(File.class);
  String fileName="hdfs_namenode.log.123343493473948";
  expect(fileToUpload.getName()).andReturn(fileName);
  final File compressedFile=mock(File.class);
  Map<String,Object> configs=setupS3Configs();
  S3OutputConfiguration s3OutputConfiguration=new S3OutputConfiguration(configs);
  S3Util s3Util=mock(S3Util.class);
  String s3Key=String.format("%s/%s/%s.%s",TEST_PATH,LOG_TYPE,fileName,GZ);
  s3Util.uploadFileTos3(TEST_BUCKET,s3Key,compressedFile,ACCESS_KEY_VALUE,SECRET_KEY_VALUE);
  expect(compressedFile.delete()).andReturn(true);
  expect(fileToUpload.delete()).andReturn(true);
  replay(fileToUpload,compressedFile,s3Util);
  S3Uploader s3Uploader=new S3Uploader(s3OutputConfiguration,s3Util,true,LOG_TYPE){
    @Override protected File createCompressedFileForUpload(    File fileToUpload,    String compressionAlgo){
      return compressedFile;
    }
  }
;
  s3Uploader.uploadFile(fileToUpload,LOG_TYPE);
  verify(fileToUpload);
  verify(compressedFile);
}
