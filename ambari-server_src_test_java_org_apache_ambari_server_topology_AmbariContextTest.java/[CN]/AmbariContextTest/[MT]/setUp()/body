{
  Class clazz=AmbariContext.class;
  Field f=clazz.getDeclaredField("controller");
  f.setAccessible(true);
  f.set(null,controller);
  f=clazz.getDeclaredField("clusterController");
  f.setAccessible(true);
  f.set(null,clusterController);
  f=clazz.getDeclaredField("hostResourceProvider");
  f.setAccessible(true);
  f.set(null,hostResourceProvider);
  f=clazz.getDeclaredField("serviceResourceProvider");
  f.setAccessible(true);
  f.set(null,serviceResourceProvider);
  f=clazz.getDeclaredField("componentResourceProvider");
  f.setAccessible(true);
  f.set(null,componentResourceProvider);
  f=clazz.getDeclaredField("hostComponentResourceProvider");
  f.setAccessible(true);
  f.set(null,hostComponentResourceProvider);
  Map<String,Map<String,String>> bpProperties=new HashMap<String,Map<String,String>>();
  Map<String,String> bpType1Props=new HashMap<String,String>();
  bpProperties.put("type1",bpType1Props);
  bpType1Props.put("prop1","val1");
  bpType1Props.put("prop2","val2");
  bpConfiguration=new Configuration(bpProperties,null);
  Map<String,Map<String,String>> group1Properties=new HashMap<String,Map<String,String>>();
  Map<String,String> type1Props=new HashMap<String,String>();
  group1Properties.put("type1",type1Props);
  type1Props.put("prop1","val1.2");
  type1Props.put("prop3","val3");
  group1Configuration=new Configuration(group1Properties,null,bpConfiguration);
  Map<String,String> configTypeServiceMapping=new HashMap<String,String>();
  configTypeServiceMapping.put("type1","service1");
  configGroups.put(1L,configGroup1);
  configGroups.put(2L,configGroup2);
  blueprintServices.add("service1");
  blueprintServices.add("service2");
  expect(topology.getClusterName()).andReturn(CLUSTER_NAME).anyTimes();
  expect(topology.getBlueprint()).andReturn(blueprint).anyTimes();
  expect(topology.getHostGroupInfo()).andReturn(Collections.singletonMap(HOST_GROUP_1,group1Info)).anyTimes();
  expect(blueprint.getName()).andReturn(BP_NAME).anyTimes();
  expect(blueprint.getStack()).andReturn(stack).anyTimes();
  expect(blueprint.getServices()).andReturn(blueprintServices).anyTimes();
  expect(blueprint.getComponents("service1")).andReturn(Arrays.asList("s1Component1","s1Component2")).anyTimes();
  expect(blueprint.getComponents("service2")).andReturn(Collections.singleton("s2Component1")).anyTimes();
  expect(blueprint.getConfiguration()).andReturn(bpConfiguration).anyTimes();
  expect(stack.getName()).andReturn(STACK_NAME).anyTimes();
  expect(stack.getVersion()).andReturn(STACK_VERSION).anyTimes();
  for (  Map.Entry<String,String> entry : configTypeServiceMapping.entrySet()) {
    expect(stack.getServiceForConfigType(entry.getKey())).andReturn(entry.getValue()).anyTimes();
  }
  expect(controller.getClusters()).andReturn(clusters).anyTimes();
  expect(controller.getConfigHelper()).andReturn(configHelper).anyTimes();
  expect(clusters.getCluster(CLUSTER_NAME)).andReturn(cluster).anyTimes();
  expect(clusters.getHost(HOST1)).andReturn(host1).anyTimes();
  expect(clusters.getHost(HOST2)).andReturn(host2).anyTimes();
  expect(host1.getHostId()).andReturn(1L).anyTimes();
  expect(host2.getHostId()).andReturn(2L).anyTimes();
  expect(group1Info.getConfiguration()).andReturn(group1Configuration).anyTimes();
  expect(group1Info.getHostNames()).andReturn(group1Hosts).anyTimes();
  expect(configGroup1.getName()).andReturn(String.format("%s:%s",BP_NAME,HOST_GROUP_1)).anyTimes();
  expect(configGroup2.getName()).andReturn(String.format("%s:%s",BP_NAME,HOST_GROUP_2)).anyTimes();
}
