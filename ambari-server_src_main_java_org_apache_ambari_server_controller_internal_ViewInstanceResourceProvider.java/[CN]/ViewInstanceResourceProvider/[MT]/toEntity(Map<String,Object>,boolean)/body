{
  String name=(String)properties.get(INSTANCE_NAME_PROPERTY_ID);
  if (name == null || name.isEmpty()) {
    throw new IllegalArgumentException("View instance name must be provided");
  }
  String version=(String)properties.get(VIEW_VERSION_PROPERTY_ID);
  if (version == null || version.isEmpty()) {
    throw new IllegalArgumentException("View version must be provided");
  }
  String commonViewName=(String)properties.get(VIEW_NAME_PROPERTY_ID);
  if (commonViewName == null || commonViewName.isEmpty()) {
    throw new IllegalArgumentException("View name must be provided");
  }
  ViewRegistry viewRegistry=ViewRegistry.getInstance();
  ViewEntity viewEntity=viewRegistry.getDefinition(commonViewName,version);
  String viewName=ViewEntity.getViewName(commonViewName,version);
  if (viewEntity == null) {
    throw new IllegalArgumentException("View name " + viewName + " does not exist.");
  }
  ViewInstanceEntity viewInstanceEntity=null;
  if (update) {
    viewInstanceEntity=viewRegistry.getViewInstanceEntity(viewName,name);
  }
  if (viewInstanceEntity == null) {
    viewInstanceEntity=new ViewInstanceEntity();
    viewInstanceEntity.setName(name);
    viewInstanceEntity.setViewName(viewName);
    viewInstanceEntity.setViewEntity(viewEntity);
  }
  if (properties.containsKey(LABEL_PROPERTY_ID)) {
    viewInstanceEntity.setLabel((String)properties.get(LABEL_PROPERTY_ID));
  }
  if (properties.containsKey(DESCRIPTION_PROPERTY_ID)) {
    viewInstanceEntity.setDescription((String)properties.get(DESCRIPTION_PROPERTY_ID));
  }
  String visible=(String)properties.get(VISIBLE_PROPERTY_ID);
  viewInstanceEntity.setVisible(visible == null ? true : Boolean.valueOf(visible));
  if (properties.containsKey(ICON_PATH_ID)) {
    viewInstanceEntity.setIcon((String)properties.get(ICON_PATH_ID));
  }
  if (properties.containsKey(ICON64_PATH_ID)) {
    viewInstanceEntity.setIcon64((String)properties.get(ICON64_PATH_ID));
  }
  if (properties.containsKey(CLUSTER_HANDLE_PROPERTY_ID)) {
    viewInstanceEntity.setClusterHandle((String)properties.get(CLUSTER_HANDLE_PROPERTY_ID));
  }
  Map<String,String> instanceProperties=new HashMap<String,String>();
  boolean isUserAdmin=viewRegistry.checkAdmin();
  for (  Map.Entry<String,Object> entry : properties.entrySet()) {
    String propertyName=entry.getKey();
    if (propertyName.startsWith(PROPERTIES_PREFIX)) {
      if (isUserAdmin) {
        instanceProperties.put(entry.getKey().substring(PROPERTIES_PREFIX.length()),(String)entry.getValue());
      }
    }
 else     if (propertyName.startsWith(DATA_PREFIX)) {
      viewInstanceEntity.putInstanceData(entry.getKey().substring(DATA_PREFIX.length()),(String)entry.getValue());
    }
  }
  if (!instanceProperties.isEmpty()) {
    try {
      viewRegistry.setViewInstanceProperties(viewInstanceEntity,instanceProperties,viewEntity.getConfiguration(),viewEntity.getClassLoader());
    }
 catch (    org.apache.ambari.view.SystemException e) {
      throw new AmbariException("Caught exception trying to set view properties.",e);
    }
  }
  return viewInstanceEntity;
}
