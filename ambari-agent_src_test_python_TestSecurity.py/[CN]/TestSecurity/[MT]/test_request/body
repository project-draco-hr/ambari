@patch.object(security.CachedHTTPSConnection, 'connect')
def test_request(self, connect_mock):
    httpsconn_mock = MagicMock(create=True)
    self.cachedHTTPSConnection.httpsconn = httpsconn_mock
    dummy_request = MagicMock(create=True)
    dummy_request.get_method.return_value = 'dummy_get_method'
    dummy_request.get_full_url.return_value = 'dummy_full_url'
    dummy_request.get_data.return_value = 'dummy_get_data'
    dummy_request.headers = 'dummy_headers'
    responce_mock = MagicMock(create=True)
    responce_mock.read.return_value = 'dummy responce'
    httpsconn_mock.getresponse.return_value = responce_mock
    responce = self.cachedHTTPSConnection.request(dummy_request)
    self.assertEqual(responce, responce_mock.read.return_value)
    httpsconn_mock.request.assert_called_once_with(dummy_request.get_method.return_value, dummy_request.get_full_url.return_value, dummy_request.get_data.return_value, dummy_request.headers)
    try:

        def side_eff():
            raise Exception('Dummy exception')
        httpsconn_mock.read.side_effect = side_eff
        responce = self.cachedHTTPSConnection.request(dummy_request)
        self.fail('Should raise IOError')
    except Exception as err:
        pass
