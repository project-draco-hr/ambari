@patch('ambari_agent.hostname.hostname')
@patch('__builtin__.open', create=True, autospec=True)
@patch.dict('os.environ', {'DUMMY_PASSPHRASE': 'dummy-passphrase', })
@patch('json.dumps')
@patch('urllib2.Request')
@patch('urllib2.urlopen')
@patch('json.loads')
def test_reqSignCrt(self, loads_mock, urlopen_mock, request_mock, dumps_mock, open_mock, hostname_mock):
    self.config.set('security', 'keysdir', '/dummy-keysdir')
    self.config.set('security', 'passphrase_env_var_name', 'DUMMY_PASSPHRASE')
    man = CertificateManager(self.config)
    hostname_mock.return_value = 'dummy-hostname'
    open_mock.return_value.read.return_value = 'dummy_request'
    urlopen_mock.return_value.read.return_value = 'dummy_server_request'
    loads_mock.return_value = {'result': 'OK', 'signedCa': 'dummy-crt', }
    man.reqSignCrt()
    self.assertEqual(dumps_mock.call_args[0][0], {'csr': 'dummy_request', 'passphrase': 'dummy-passphrase', })
    self.assertEqual(open_mock.return_value.write.call_args[0][0], 'dummy-crt')
    dumps_mock.reset_mock()
    open_mock.return_value.write.reset_mock()
    loads_mock.return_value = {'result': 'FAIL', 'signedCa': 'fail-crt', }
    try:
        man.reqSignCrt()
        self.fail()
    except ssl.SSLError:
        pass
    self.assertFalse(open_mock.return_value.write.called)
    dumps_mock.reset_mock()
    open_mock.return_value.write.reset_mock()
    try:
        man.reqSignCrt()
        self.fail('Expected exception here')
    except Exception as err:
        pass
