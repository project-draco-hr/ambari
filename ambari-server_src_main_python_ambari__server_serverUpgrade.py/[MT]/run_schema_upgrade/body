def run_schema_upgrade(args):
    db_title = get_db_type(get_ambari_properties()).title
    confirm = get_YN_input(('Ambari Server configured for %s. Confirm you have made a backup of the Ambari Server database [y/n] (y)? ' % db_title), True)
    if (not confirm):
        print_error_msg('Database backup is not confirmed')
        return 1
    jdk_path = get_java_exe_path()
    if (jdk_path is None):
        print_error_msg(('No JDK found, please run the "setup" command to install a JDK automatically or install any JDK manually to ' + configDefaults.JDK_INSTALL_DIR))
        return 1
    ensure_jdbc_driver_is_installed(args, get_ambari_properties())
    print 'Upgrading database schema'
    serverClassPath = ServerClassPath(get_ambari_properties(), args)
    class_path = serverClassPath.get_full_ambari_classpath_escaped_for_shell(validate_classpath=True)
    command = SCHEMA_UPGRADE_HELPER_CMD.format(jdk_path, class_path)
    ambari_user = read_ambari_user()
    current_user = ensure_can_start_under_current_user(ambari_user)
    environ = generate_env(args, ambari_user, current_user)
    (retcode, stdout, stderr) = run_os_command(command, env=environ)
    print_info_msg(('Return code from schema upgrade command, retcode = ' + str(retcode)))
    if stdout:
        print 'Console output from schema upgrade command:'
        print stdout
        print 
    if stderr:
        print 'Error output from schema upgrade command:'
        print stderr
        print 
    if (retcode > 0):
        print_error_msg('Error executing schema upgrade, please check the server logs.')
    else:
        print_info_msg('Schema upgrade completed')
    return retcode
