def upgrade(args):
    if (not is_root()):
        err = configDefaults.MESSAGE_ERROR_UPGRADE_NOT_ROOT
        raise FatalException(4, err)
    print (('Updating properties in ' + AMBARI_PROPERTIES_FILE) + ' ...')
    retcode = update_ambari_properties()
    if (not (retcode == 0)):
        err = (AMBARI_PROPERTIES_FILE + " file can't be updated. Exiting")
        raise FatalException(retcode, err)
    retcode = update_ambari_env()
    if (not (retcode == 0)):
        err = (AMBARI_ENV_FILE + " file can't be updated. Exiting")
        raise FatalException(retcode, err)
    retcode = update_krb_jaas_login_properties()
    if (retcode == (-2)):
        pass
    elif (retcode == 0):
        print (('File ' + AMBARI_KRB_JAAS_LOGIN_FILE) + ' updated.')
    elif (not (retcode == 0)):
        err = (AMBARI_KRB_JAAS_LOGIN_FILE + " file can't be updated. Exiting")
        raise FatalException(retcode, err)
    restore_custom_services()
    try:
        update_database_name_property(upgrade=True)
    except FatalException:
        return (-1)
    parse_properties_file(args)
    change_objects_owner(args)
    retcode = run_schema_upgrade(args)
    if (not (retcode == 0)):
        print_error_msg('Ambari server upgrade failed. Please look at {0}, for more details.'.format(configDefaults.SERVER_LOG_FILE))
        raise FatalException(11, 'Schema upgrade failed.')
    user = read_ambari_user()
    if (user is None):
        warn = ('Can not determine custom ambari user.\n' + SETUP_OR_UPGRADE_MSG)
        print_warning_msg(warn)
    else:
        adjust_directory_permissions(user)
    upgrade_local_repo(args)
    check_jdbc_drivers(args)
    properties = get_ambari_properties()
    if (properties == (-1)):
        err = 'Error getting ambari properties'
        print_error_msg(err)
        raise FatalException((-1), err)
    ambari_version = get_ambari_version(properties)
    if (ambari_version is None):
        args.warnings.append('*.py files were not moved from custom_actions to custom_actions/scripts.')
    elif (compare_versions(ambari_version, '2.0.0') == 0):
        move_user_custom_actions()
    admin_views_dirs = get_admin_views_dir(properties)
    for admin_views_dir in admin_views_dirs:
        shutil.rmtree(admin_views_dir)
    views_dir = get_views_dir(properties)
    for views in views_dir:
        shutil.rmtree(views)
    if (properties.get_property(LDAP_PRIMARY_URL_PROPERTY) and (not properties.get_property(IS_LDAP_CONFIGURED))):
        args.warnings.append('Existing LDAP configuration is detected. You must run the "ambari-server setup-ldap" command to adjust existing LDAP configuration.')
