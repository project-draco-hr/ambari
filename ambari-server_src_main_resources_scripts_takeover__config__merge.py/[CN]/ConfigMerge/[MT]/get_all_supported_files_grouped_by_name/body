@staticmethod
def get_all_supported_files_grouped_by_name(extensions=SUPPORTED_EXTENSIONS):
    filePaths = {}
    for (dirName, subdirList, fileList) in os.walk(ConfigMerge.INPUT_DIR, followlinks=True):
        for file in fileList:
            (root, ext) = os.path.splitext(file)
            if (ext in extensions):
                file_path = os.path.join(dirName, file)
                if ((ext in ConfigMerge.SUPPORTED_FILENAME_ENDINGS) and (not (ConfigMerge.SUPPORTED_FILENAME_ENDINGS[ext] in root))):
                    logger.warn('File {0} is not configurable by Ambari. Skipping...'.format(file_path))
                    continue
                config_name = None
                if ConfigMerge.UNKNOWN_FILES_MAPPING_FILE:
                    for (path_regex, name) in ConfigMerge.CONTENT_UNKNOWN_FILES_MAPPING_FILE.iteritems():
                        match = re.match(path_regex, os.path.relpath(file_path, ConfigMerge.INPUT_DIR))
                        if match:
                            config_name = name
                            break
                if (not config_name):
                    if (file in ConfigMerge.NOT_MAPPED_FILES):
                        if ConfigMerge.UNKNOWN_FILES_MAPPING_FILE:
                            logger.error("File {0} doesn't match any regex from {1}".format(file_path, ConfigMerge.UNKNOWN_FILES_MAPPING_FILE))
                        else:
                            logger.error('Cannot map {0} to Ambari config type. Please use -u option to specify config mapping for this file. \nFor more information use --help option for script'.format(file_path))
                        continue
                    else:
                        config_name = file
                if (not (config_name in filePaths)):
                    filePaths[config_name] = []
                filePaths[config_name].append((file_path, ConfigMerge.PARSER_BY_EXTENSIONS[ext]))
    return filePaths
