def main():
    tempDir = tempfile.gettempdir()
    outputDir = os.path.join(tempDir)
    parser = optparse.OptionParser(usage='usage: %prog [options]')
    parser.set_description('This python program is an Ambari thin client and supports Ambari cluster takeover by generating a configuration json that can be used with a blueprint.\n\nIt reads actual hadoop configs from a target directory and produces an out file with problems found that need to be addressed and the json file which can be used to create the blueprint.\n\nThis script only works with *-site.xml files for now.')
    parser.add_option('-v', '--verbose', dest='verbose', action='store_true', default=False, help='output verbosity.')
    parser.add_option('-o', '--outputdir', dest='outputDir', default=outputDir, metavar='FILE', help='Output directory. [default: /tmp]')
    parser.add_option('-i', '--inputdir', dest='inputDir', help='Input directory.')
    (options, args) = parser.parse_args()
    if options.verbose:
        logger.setLevel(logging.DEBUG)
    else:
        logger.setLevel(logging.INFO)
    ConfigMerge.INPUT_DIR = options.inputDir
    ConfigMerge.OUTPUT_DIR = options.outputDir
    logegr_file_name = os.path.join(ConfigMerge.OUTPUT_DIR, 'takeover_config_merge.log')
    file_handler = logging.FileHandler(logegr_file_name, mode='w')
    formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
    file_handler.setFormatter(formatter)
    logger.addHandler(file_handler)
    stdout_handler = logging.StreamHandler(sys.stdout)
    stdout_handler.setLevel(logging.INFO)
    stdout_handler.setFormatter(formatter)
    logger.addHandler(stdout_handler)
    filePaths = ConfigMerge.get_all_supported_files_grouped_by_name()
    logger.info("Writing logs into '{0}' file".format(logegr_file_name))
    logger.debug('Following configuration files found:\n{0}'.format(filePaths.items()))
    configMerge = ConfigMerge(filePaths)
    return configMerge.perform_merge()
