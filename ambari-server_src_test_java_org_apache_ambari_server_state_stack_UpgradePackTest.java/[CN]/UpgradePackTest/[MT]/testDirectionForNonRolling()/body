{
  Map<String,UpgradePack> upgrades=ambariMetaInfo.getUpgradePacks("HDP","2.1.1");
  assertTrue(upgrades.size() > 0);
  assertTrue(upgrades.containsKey("upgrade_test_nonrolling"));
  UpgradePack upgrade=upgrades.get("upgrade_test_nonrolling");
  assertTrue(upgrade.getType() == UpgradeType.NON_ROLLING);
  List<Grouping> groups=upgrade.getGroups(Direction.UPGRADE);
  assertEquals(10,groups.size());
  Grouping group=null;
  ClusterGrouping clusterGroup=null;
  UpdateStackGrouping updateStackGroup=null;
  StopGrouping stopGroup=null;
  RestartGrouping restartGroup=null;
  group=groups.get(0);
  assertEquals(ClusterGrouping.class,group.getClass());
  clusterGroup=(ClusterGrouping)group;
  assertEquals("Prepare Upgrade",clusterGroup.title);
  assertNull(clusterGroup.parallelScheduler);
  group=groups.get(1);
  assertEquals(StopGrouping.class,group.getClass());
  stopGroup=(StopGrouping)group;
  assertEquals("Stop Daemons for High-Level Services",stopGroup.title);
  assertNotNull(stopGroup.parallelScheduler);
  assertEquals(ParallelScheduler.DEFAULT_MAX_DEGREE_OF_PARALLELISM,stopGroup.parallelScheduler.maxDegreeOfParallelism);
  group=groups.get(2);
  assertEquals(ClusterGrouping.class,group.getClass());
  clusterGroup=(ClusterGrouping)group;
  assertEquals("Take Backups",clusterGroup.title);
  assertNull(clusterGroup.parallelScheduler);
  group=groups.get(3);
  assertEquals(StopGrouping.class,group.getClass());
  stopGroup=(StopGrouping)group;
  assertEquals("Stop Daemons for Low-Level Services",stopGroup.title);
  assertNotNull(stopGroup.parallelScheduler);
  assertEquals(ParallelScheduler.DEFAULT_MAX_DEGREE_OF_PARALLELISM,stopGroup.parallelScheduler.maxDegreeOfParallelism);
  group=groups.get(4);
  assertEquals(UpdateStackGrouping.class,group.getClass());
  updateStackGroup=(UpdateStackGrouping)group;
  assertEquals("Update Desired Stack Id",updateStackGroup.title);
  assertNull(updateStackGroup.parallelScheduler);
  group=groups.get(5);
  assertEquals(ClusterGrouping.class,group.getClass());
  clusterGroup=(ClusterGrouping)group;
  assertEquals("Set Version On All Hosts",clusterGroup.title);
  assertNull(clusterGroup.parallelScheduler);
  group=groups.get(6);
  assertEquals(RestartGrouping.class,group.getClass());
  restartGroup=(RestartGrouping)group;
  assertEquals("Zookeeper",restartGroup.title);
  assertNull(restartGroup.parallelScheduler);
  group=groups.get(7);
  assertEquals(RestartGrouping.class,group.getClass());
  restartGroup=(RestartGrouping)group;
  assertEquals("HDFS",restartGroup.title);
  assertNotNull(restartGroup.parallelScheduler);
  assertEquals(2,restartGroup.parallelScheduler.maxDegreeOfParallelism);
  group=groups.get(8);
  assertEquals(RestartGrouping.class,group.getClass());
  restartGroup=(RestartGrouping)group;
  assertEquals("MR and YARN",restartGroup.title);
  assertNotNull(restartGroup.parallelScheduler);
  assertEquals(ParallelScheduler.DEFAULT_MAX_DEGREE_OF_PARALLELISM,restartGroup.parallelScheduler.maxDegreeOfParallelism);
  group=groups.get(9);
  assertEquals(ClusterGrouping.class,group.getClass());
  clusterGroup=(ClusterGrouping)group;
  assertEquals("Finalize {{direction.text.proper}}",clusterGroup.title);
  assertNull(clusterGroup.parallelScheduler);
}
