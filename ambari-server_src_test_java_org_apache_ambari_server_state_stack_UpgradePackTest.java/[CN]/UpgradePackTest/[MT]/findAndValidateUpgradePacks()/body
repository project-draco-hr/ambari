{
  IOFileFilter filter=new IOFileFilter(){
    @Override public boolean accept(    File dir,    String name){
      return false;
    }
    @Override public boolean accept(    File file){
      if (file.getAbsolutePath().contains("upgrades") && file.getAbsolutePath().endsWith(".xml") && !file.getAbsolutePath().contains("config-upgrade.xml")) {
        return true;
      }
      return false;
    }
  }
;
  List<File> files=new ArrayList<>();
  files.addAll(FileUtils.listFiles(new File("src/main/resources/stacks"),filter,FileFilterUtils.directoryFileFilter()));
  files.addAll(FileUtils.listFiles(new File("src/test/resources/stacks"),filter,FileFilterUtils.directoryFileFilter()));
  files.addAll(FileUtils.listFiles(new File("src/test/resources/stacks_with_upgrade_cycle"),filter,FileFilterUtils.directoryFileFilter()));
  ModuleFileUnmarshaller unmarshaller=new ModuleFileUnmarshaller();
  for (  File file : files) {
    String fileContent=FileUtils.readFileToString(file,"UTF-8");
    if (fileContent.contains("<upgrade") && fileContent.contains("xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"")) {
      if (!fileContent.contains("xsi:noNamespaceSchemaLocation=\"upgrade-pack.xsd\"")) {
        String msg=String.format("File %s appears to be an upgrade pack, but does not define 'upgrade-pack.xsd' as its schema",file.getAbsolutePath());
        Assert.fail(msg);
      }
 else {
        unmarshaller.unmarshal(UpgradePack.class,file,true);
      }
    }
  }
}
