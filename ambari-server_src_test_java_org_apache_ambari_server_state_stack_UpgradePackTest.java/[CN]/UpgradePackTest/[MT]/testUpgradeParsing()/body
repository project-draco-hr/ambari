{
  Map<String,UpgradePack> upgrades=ambariMetaInfo.getUpgradePacks("HDP","2.1.1");
  assertTrue(upgrades.size() > 0);
  assertTrue(upgrades.containsKey("upgrade_test"));
  UpgradePack up=upgrades.get("upgrade_test");
  assertEquals("2.2.*",up.getTarget());
  Map<String,List<String>> expectedStages=new LinkedHashMap<String,List<String>>(){
{
      put("ZOOKEEPER",Arrays.asList("ZOOKEEPER_SERVER"));
      put("HDFS",Arrays.asList("NAMENODE","DATANODE"));
    }
  }
;
  int i=0;
  for (  Entry<String,List<String>> entry : expectedStages.entrySet()) {
    assertTrue(up.getTasks().containsKey(entry.getKey()));
    assertEquals(i++,indexOf(up.getTasks(),entry.getKey()));
    assertEquals(entry.getValue().size(),up.getTasks().get(entry.getKey()).size());
    int j=0;
    for (    String comp : entry.getValue()) {
      assertEquals(j++,indexOf(up.getTasks().get(entry.getKey()),comp));
    }
  }
  assertTrue(up.getTasks().containsKey("HDFS"));
  assertTrue(up.getTasks().get("HDFS").containsKey("NAMENODE"));
  ProcessingComponent pc=up.getTasks().get("HDFS").get("NAMENODE");
  assertNotNull(pc.preTasks);
  assertNotNull(pc.postTasks);
  assertNotNull(pc.tasks);
  assertNull(pc.preDowngradeTasks);
  assertNull(pc.postDowngradeTasks);
  assertEquals(1,pc.tasks.size());
  assertEquals(Task.Type.RESTART,pc.tasks.get(0).getType());
  assertEquals(RestartTask.class,pc.tasks.get(0).getClass());
  assertTrue(up.getTasks().containsKey("ZOOKEEPER"));
  assertTrue(up.getTasks().get("ZOOKEEPER").containsKey("ZOOKEEPER_SERVER"));
  pc=up.getTasks().get("HDFS").get("DATANODE");
  assertNotNull(pc.preDowngradeTasks);
  assertEquals(0,pc.preDowngradeTasks.size());
  assertNotNull(pc.postDowngradeTasks);
  assertEquals(1,pc.postDowngradeTasks.size());
  pc=up.getTasks().get("ZOOKEEPER").get("ZOOKEEPER_SERVER");
  assertNotNull(pc.preTasks);
  assertEquals(1,pc.preTasks.size());
  assertNotNull(pc.postTasks);
  assertEquals(1,pc.postTasks.size());
  assertNotNull(pc.tasks);
  assertEquals(1,pc.tasks.size());
  pc=up.getTasks().get("YARN").get("NODEMANAGER");
  assertNotNull(pc.preTasks);
  assertEquals(2,pc.preTasks.size());
  Task t=pc.preTasks.get(1);
  assertEquals(ConfigureTask.class,t.getClass());
  ConfigureTask ct=(ConfigureTask)t;
  assertEquals("core-site",ct.getConfigType());
  assertEquals(4,ct.getTransfers().size());
  Transfer t1=ct.getTransfers().get(0);
  assertEquals(TransferOperation.COPY,t1.operation);
  assertEquals("copy-key",t1.fromKey);
  assertEquals("copy-key-to",t1.toKey);
  Transfer t2=ct.getTransfers().get(1);
  assertEquals(TransferOperation.COPY,t2.operation);
  assertEquals("my-site",t2.fromType);
  assertEquals("my-copy-key",t2.fromKey);
  assertEquals("my-copy-key-to",t2.toKey);
  assertTrue(t2.keepKeys.isEmpty());
  Transfer t3=ct.getTransfers().get(2);
  assertEquals(TransferOperation.MOVE,t3.operation);
  assertEquals("move-key",t3.fromKey);
  assertEquals("move-key-to",t3.toKey);
  Transfer t4=ct.getTransfers().get(3);
  assertEquals(TransferOperation.DELETE,t4.operation);
  assertEquals("delete-key",t4.deleteKey);
  assertNull(t4.toKey);
  assertTrue(t4.preserveEdits);
  assertEquals(1,t4.keepKeys.size());
  assertEquals("important-key",t4.keepKeys.get(0));
}
