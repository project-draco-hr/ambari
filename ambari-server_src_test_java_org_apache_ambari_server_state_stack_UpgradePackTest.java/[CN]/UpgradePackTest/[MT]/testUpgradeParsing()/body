{
  Map<String,UpgradePack> upgrades=ambariMetaInfo.getUpgradePacks("HDP","2.1.1");
  assertTrue(upgrades.size() > 0);
  Map<String,List<String>> expectedOrder=new LinkedHashMap<String,List<String>>(){
{
      put("ZOOKEEPER",Arrays.asList("ZOOKEEPER_SERVER","ZOOKEEPER_CLIENT"));
      put("HDFS",Arrays.asList("JOURNALNODE","NAMENODE","DATANODE"));
    }
  }
;
  UpgradePack up=upgrades.values().iterator().next();
  assertEquals("2.2.*",up.getTarget());
  assertEquals(expectedOrder.size(),up.getOrder().size());
  int i=0;
  for (  Entry<String,List<String>> entry : expectedOrder.entrySet()) {
    assertTrue(up.getOrder().containsKey(entry.getKey()));
    assertEquals(i++,indexOf(up.getOrder(),entry.getKey()));
    int j=0;
    for (    String comp : entry.getValue()) {
      assertEquals(comp,up.getOrder().get(entry.getKey()).get(j++));
    }
  }
  Map<String,List<String>> expectedStages=new LinkedHashMap<String,List<String>>(){
{
      put("ZOOKEEPER",Arrays.asList("ZOOKEEPER_SERVER"));
      put("HDFS",Arrays.asList("NAMENODE","DATANODE"));
    }
  }
;
  i=0;
  for (  Entry<String,List<String>> entry : expectedStages.entrySet()) {
    assertTrue(up.getTasks().containsKey(entry.getKey()));
    assertEquals(i++,indexOf(up.getTasks(),entry.getKey()));
    assertEquals(entry.getValue().size(),up.getTasks().get(entry.getKey()).size());
    int j=0;
    for (    String comp : entry.getValue()) {
      assertEquals(j++,indexOf(up.getTasks().get(entry.getKey()),comp));
    }
  }
  assertTrue(up.getTasks().containsKey("HDFS"));
  assertTrue(up.getTasks().get("HDFS").containsKey("NAMENODE"));
  ProcessingComponent pc=up.getTasks().get("HDFS").get("NAMENODE");
  assertNull(pc.batch);
  assertNull(pc.preTasks);
  assertNull(pc.postTasks);
  assertNotNull(pc.tasks);
  assertEquals(3,pc.tasks.size());
  assertEquals(Task.Type.EXECUTE,pc.tasks.get(0).getType());
  assertEquals(ExecuteTask.class,pc.tasks.get(0).getClass());
  assertEquals("su - {hdfs-user} -c 'dosomething'",ExecuteTask.class.cast(pc.tasks.get(0)).command);
  assertEquals(Task.Type.CONFIGURE,pc.tasks.get(1).getType());
  assertEquals(ConfigureTask.class,pc.tasks.get(1).getClass());
  assertEquals("hdfs-site",ConfigureTask.class.cast(pc.tasks.get(1)).configType);
  assertEquals("myproperty",ConfigureTask.class.cast(pc.tasks.get(1)).key);
  assertEquals("mynewvalue",ConfigureTask.class.cast(pc.tasks.get(1)).value);
  assertEquals(Task.Type.MANUAL,pc.tasks.get(2).getType());
  assertEquals(ManualTask.class,pc.tasks.get(2).getClass());
  assertEquals("Update your database",ManualTask.class.cast(pc.tasks.get(2)).message);
  assertTrue(up.getTasks().containsKey("ZOOKEEPER"));
  assertTrue(up.getTasks().get("ZOOKEEPER").containsKey("ZOOKEEPER_SERVER"));
  pc=up.getTasks().get("HDFS").get("DATANODE");
  assertNotNull(pc.batch);
  assertEquals(Batch.Type.CONDITIONAL,pc.batch.getType());
  assertEquals(15,ConditionalBatch.class.cast(pc.batch).initial);
  assertEquals(50,ConditionalBatch.class.cast(pc.batch).remaining);
  pc=up.getTasks().get("ZOOKEEPER").get("ZOOKEEPER_SERVER");
  assertNotNull(pc.preTasks);
  assertEquals(1,pc.preTasks.size());
  assertNotNull(pc.postTasks);
  assertEquals(1,pc.postTasks.size());
  assertNotNull(pc.tasks);
  assertEquals(1,pc.tasks.size());
  assertNotNull(pc.batch);
  assertEquals(Batch.Type.COUNT,pc.batch.getType());
  assertEquals(2,CountBatch.class.cast(pc.batch).count);
}
