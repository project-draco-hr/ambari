{
  Map<String,UpgradePack> upgrades=ambariMetaInfo.getUpgradePacks("HDP","2.1.1");
  assertTrue(upgrades.size() > 0);
  assertTrue(upgrades.containsKey("upgrade_test_checks"));
  UpgradePack up=upgrades.get("upgrade_test_checks");
  List<String> expected_up=Arrays.asList("PRE_CLUSTER","ZOOKEEPER","CORE_MASTER","SERVICE_CHECK_1","CORE_SLAVES","SERVICE_CHECK_2","POST_CLUSTER");
  List<String> expected_down=Arrays.asList("PRE_CLUSTER","CORE_SLAVES","SERVICE_CHECK_2","CORE_MASTER","SERVICE_CHECK_1","ZOOKEEPER","POST_CLUSTER");
  Grouping serviceCheckGroup=null;
  int i=0;
  List<Grouping> groups=up.getGroups(Direction.UPGRADE);
  for (  Grouping g : groups) {
    assertEquals(expected_up.get(i),g.name);
    i++;
    if (g.name.equals("SERVICE_CHECK_1")) {
      serviceCheckGroup=g;
    }
  }
  List<String> expected_priority=Arrays.asList("HDFS","HBASE","YARN");
  assertNotNull(serviceCheckGroup);
  assertEquals(ServiceCheckGrouping.class,serviceCheckGroup.getClass());
  ServiceCheckGrouping scg=(ServiceCheckGrouping)serviceCheckGroup;
  Set<String> priorities=scg.getPriorities();
  assertEquals(3,priorities.size());
  i=0;
  for (  String s : priorities) {
    assertEquals(expected_priority.get(i++),s);
  }
  i=0;
  groups=up.getGroups(Direction.DOWNGRADE);
  for (  Grouping g : groups) {
    assertEquals(expected_down.get(i),g.name);
    i++;
  }
}
