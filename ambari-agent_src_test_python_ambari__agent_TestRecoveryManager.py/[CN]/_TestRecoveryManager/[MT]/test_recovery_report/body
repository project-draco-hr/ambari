@patch.object(RecoveryManager, '_now_')
def test_recovery_report(self, time_mock):
    time_mock.side_effect = [1000, 1071, 1072, 1470, 1471, 1472, 1543, 1644, 1815]
    rm = RecoveryManager(tempfile.mktemp())
    rec_st = rm.get_recovery_status()
    self.assertEquals(rec_st, {'summary': 'DISABLED', })
    rm.update_config(2, 5, 1, 4, True, True, False, '', (-1))
    rec_st = rm.get_recovery_status()
    self.assertEquals(rec_st, {'summary': 'RECOVERABLE', 'componentReports': [], })
    rm.execute('PUMA')
    rec_st = rm.get_recovery_status()
    self.assertEquals(rec_st, {'summary': 'RECOVERABLE', 'componentReports': [{'name': 'PUMA', 'numAttempts': 1, 'limitReached': False, }], })
    rm.execute('PUMA')
    rm.execute('LION')
    rec_st = rm.get_recovery_status()
    self.assertEquals(rec_st, {'summary': 'RECOVERABLE', 'componentReports': [{'name': 'LION', 'numAttempts': 1, 'limitReached': False, }, {'name': 'PUMA', 'numAttempts': 2, 'limitReached': False, }], })
    rm.execute('PUMA')
    rm.execute('LION')
    rm.execute('PUMA')
    rm.execute('PUMA')
    rm.execute('LION')
    rec_st = rm.get_recovery_status()
    self.assertEquals(rec_st, {'summary': 'PARTIALLY_RECOVERABLE', 'componentReports': [{'name': 'LION', 'numAttempts': 3, 'limitReached': False, }, {'name': 'PUMA', 'numAttempts': 4, 'limitReached': True, }], })
    rm.execute('LION')
    rec_st = rm.get_recovery_status()
    self.assertEquals(rec_st, {'summary': 'UNRECOVERABLE', 'componentReports': [{'name': 'LION', 'numAttempts': 4, 'limitReached': True, }, {'name': 'PUMA', 'numAttempts': 4, 'limitReached': True, }], })
    pass
