@patch.object(RecoveryManager, 'update_config')
def test_update_rm_config(self, mock_uc):
    rm = RecoveryManager(tempfile.mktemp())
    rm.update_configuration_from_registration(None)
    mock_uc.assert_has_calls([call(6, 60, 5, 12, False, True, '', (-1))])
    mock_uc.reset_mock()
    rm.update_configuration_from_registration({})
    mock_uc.assert_has_calls([call(6, 60, 5, 12, False, True, '', (-1))])
    mock_uc.reset_mock()
    rm.update_configuration_from_registration({'recoveryConfig': {'type': 'DEFAULT', }, })
    mock_uc.assert_has_calls([call(6, 60, 5, 12, False, True, '', (-1))])
    mock_uc.reset_mock()
    rm.update_configuration_from_registration({'recoveryConfig': {'type': 'FULL', }, })
    mock_uc.assert_has_calls([call(6, 60, 5, 12, True, False, '', (-1))])
    mock_uc.reset_mock()
    rm.update_configuration_from_registration({'recoveryConfig': {'type': 'AUTO_START', 'max_count': 'med', }, })
    mock_uc.assert_has_calls([call(6, 60, 5, 12, True, True, '', (-1))])
    mock_uc.reset_mock()
    rm.update_configuration_from_registration({'recoveryConfig': {'type': 'AUTO_START', 'maxCount': '5', 'windowInMinutes': 20, 'retryGap': 2, 'maxLifetimeCount': 5, 'components': ' A,B', 'recoveryTimestamp': 1, }, })
    mock_uc.assert_has_calls([call(5, 20, 2, 5, True, True, ' A,B', 1)])
