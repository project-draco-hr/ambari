@patch.object(RecoveryManager, '_now_')
def test_sliding_window(self, time_mock):
    time_mock.side_effect = [1000, 1001, 1002, 1003, 1004, 1071, 1150, 1151, 1152, 1153, 1400, 1401, 1500, 1571, 1572, 1653, 1900, 1971, 2300, 2301]
    rm = RecoveryManager(tempfile.mktemp(), True, False)
    self.assertTrue(rm.enabled())
    config = rm.update_config(0, 60, 5, 12, True, False, '')
    self.assertFalse(rm.enabled())
    rm.update_config(6, 60, 5, 12, True, False, '')
    self.assertTrue(rm.enabled())
    rm.update_config(6, 0, 5, 12, True, False, '')
    self.assertFalse(rm.enabled())
    rm.update_config(6, 60, 0, 12, True, False, '')
    self.assertFalse(rm.enabled())
    rm.update_config(6, 60, 1, 12, True, False, None)
    self.assertTrue(rm.enabled())
    rm.update_config(6, 60, 61, 12, True, False, None)
    self.assertFalse(rm.enabled())
    rm.update_config(6, 60, 5, 4, True, False, '')
    self.assertFalse(rm.enabled())
    rm.update_config(2, 5, 1, 4, True, False, '')
    self.assertTrue(rm.enabled())
    self.assertTrue(rm.may_execute('NODEMANAGER'))
    self.assertTrue(rm.may_execute('NODEMANAGER'))
    self.assertTrue(rm.may_execute('NODEMANAGER'))
    self.assertTrue(rm.execute('NODEMANAGER'))
    self.assertFalse(rm.execute('NODEMANAGER'))
    self.assertTrue(rm.execute('NODEMANAGER'))
    self.assertFalse(rm.execute('NODEMANAGER'))
    self.assertFalse(rm.may_execute('NODEMANAGER'))
    self.assertTrue(rm.execute('DATANODE'))
    self.assertTrue(rm.may_execute('NAMENODE'))
    self.assertTrue(rm.execute('NODEMANAGER'))
    self.assertFalse(rm.may_execute('NODEMANAGER'))
    rm.update_config(2, 5, 1, 5, True, True, '')
    self.assertTrue(rm.execute('NODEMANAGER2'))
    self.assertTrue(rm.may_execute('NODEMANAGER2'))
    self.assertTrue(rm.execute('NODEMANAGER2'))
    self.assertFalse(rm.execute('NODEMANAGER2'))
    self.assertTrue(rm.execute('NODEMANAGER2'))
    self.assertTrue(rm.execute('NODEMANAGER2'))
    self.assertTrue(rm.execute('NODEMANAGER2'))
    self.assertFalse(rm.execute('NODEMANAGER2'))
    pass
