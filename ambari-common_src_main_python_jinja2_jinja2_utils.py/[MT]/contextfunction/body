def contextfunction(f):
    'This decorator can be used to mark a function or method context callable.\n    A context callable is passed the active :class:`Context` as first argument when\n    called from the template.  This is useful if a function wants to get access\n    to the context or functions provided on the context object.  For example\n    a function that returns a sorted list of template variables the current\n    template exports could look like this::\n\n        @contextfunction\n        def get_exported_names(context):\n            return sorted(context.exported_vars)\n    '
    f.contextfunction = True
    return f
