{
  injector=createNiceMock(Injector.class);
  configHelper=createNiceMock(ConfigHelper.class);
  amc=createNiceMock(AmbariManagementController.class);
  cluster=createNiceMock(Cluster.class);
  clusters=createStrictMock(Clusters.class);
  serviceInfo=createNiceMock(ServiceInfo.class);
  oldConfig=createNiceMock(Config.class);
  expect(injector.getInstance(ConfigHelper.class)).andReturn(configHelper).anyTimes();
  expect(injector.getInstance(AmbariManagementController.class)).andReturn(amc).anyTimes();
  expect(amc.getClusters()).andReturn(clusters).anyTimes();
  HashMap<String,Cluster> clusterMap=new HashMap<>();
  clusterMap.put(CLUSTER_NAME,cluster);
  expect(clusters.getClusters()).andReturn(clusterMap).anyTimes();
  HashSet<PropertyInfo> stackProperties=new HashSet<>();
  expect(configHelper.getStackProperties(cluster)).andReturn(stackProperties).anyTimes();
  HashMap<String,Service> serviceMap=new HashMap<>();
  serviceMap.put(SERVICE_NAME,null);
  expect(cluster.getServices()).andReturn(serviceMap).anyTimes();
  HashSet<PropertyInfo> serviceProperties=new HashSet<>();
  serviceProperties.add(createProperty(CONFIG_TYPE,"prop1",true,false,false));
  serviceProperties.add(createProperty(CONFIG_TYPE,"prop2",false,true,false));
  serviceProperties.add(createProperty(CONFIG_TYPE,"prop3",false,false,true));
  serviceProperties.add(createProperty(CONFIG_TYPE,"prop4",true,false,false));
  expect(configHelper.getServiceProperties(cluster,SERVICE_NAME)).andReturn(serviceProperties).anyTimes();
  expect(configHelper.getPropertyValueFromStackDefinitions(cluster,"hdfs-site","prop1")).andReturn("v1").anyTimes();
  expect(configHelper.getPropertyValueFromStackDefinitions(cluster,"hdfs-site","prop2")).andReturn("v2").anyTimes();
  expect(configHelper.getPropertyValueFromStackDefinitions(cluster,"hdfs-site","prop3")).andReturn("v3").anyTimes();
  expect(configHelper.getPropertyValueFromStackDefinitions(cluster,"hdfs-site","prop4")).andReturn("v4").anyTimes();
  expect(configHelper.getPropertyOwnerService(eq(cluster),eq("hdfs-site"),anyString())).andReturn(serviceInfo).anyTimes();
  expect(serviceInfo.getName()).andReturn(SERVICE_NAME).anyTimes();
  expect(cluster.getDesiredConfigByType("hdfs-site")).andReturn(oldConfig).anyTimes();
  oldProperties=new HashMap<>();
  expect(oldConfig.getProperties()).andReturn(oldProperties).anyTimes();
  upgradeCatalog=new AbstractUpgradeCatalog(injector){
    @Override protected void executeDDLUpdates() throws AmbariException, SQLException {
    }
    @Override protected void executePreDMLUpdates() throws AmbariException, SQLException {
    }
    @Override protected void executeDMLUpdates() throws AmbariException, SQLException {
    }
    @Override public String getTargetVersion(){
      return null;
    }
  }
;
}
