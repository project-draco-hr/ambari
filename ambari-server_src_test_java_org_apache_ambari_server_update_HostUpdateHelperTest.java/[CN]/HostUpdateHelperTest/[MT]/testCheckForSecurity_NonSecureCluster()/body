{
  EasyMockSupport easyMockSupport=new EasyMockSupport();
  final AmbariManagementController mockAmbariManagementController=easyMockSupport.createNiceMock(AmbariManagementController.class);
  Clusters mockClusters=easyMockSupport.createStrictMock(Clusters.class);
  Cluster mockCluster=easyMockSupport.createNiceMock(Cluster.class);
  Config mockConfig=easyMockSupport.createNiceMock(Config.class);
  Map<String,Map<String,String>> clusterHostsToChange=new HashMap<>();
  Map<String,String> clusterEnvProperties=new HashMap<>();
  clusterHostsToChange.put("cl1",null);
  clusterEnvProperties.put("security_enabled","false");
  final Injector mockInjector=Guice.createInjector(new AbstractModule(){
    @Override protected void configure(){
      bind(AmbariManagementController.class).toInstance(mockAmbariManagementController);
    }
  }
);
  expect(mockAmbariManagementController.getClusters()).andReturn(mockClusters).once();
  expect(mockClusters.getCluster("cl1")).andReturn(mockCluster).once();
  expect(mockCluster.getDesiredConfigByType("cluster-env")).andReturn(mockConfig).once();
  expect(mockConfig.getProperties()).andReturn(clusterEnvProperties).once();
  HostUpdateHelper hostUpdateHelper=new HostUpdateHelper(null,null,mockInjector);
  hostUpdateHelper.setHostChangesFileMap(clusterHostsToChange);
  easyMockSupport.replayAll();
  hostUpdateHelper.checkForSecurity();
  easyMockSupport.verifyAll();
}
