def setup_master_key():
    if (not is_root()):
        err = 'Ambari-server setup should be run with root-level privileges'
        raise FatalException(4, err)
    properties = get_ambari_properties()
    if (properties == (-1)):
        raise FatalException(1, 'Failed to read properties file.')
    db_windows_auth_prop = properties.get_property(JDBC_USE_INTEGRATED_AUTH_PROPERTY)
    db_sql_auth = (False if (db_windows_auth_prop and (db_windows_auth_prop.lower() == 'true')) else True)
    db_password = properties.get_property(JDBC_PASSWORD_PROPERTY)
    if (db_sql_auth and (not db_password)):
        print 'Please call "setup" before "encrypt-passwords". Exiting...'
        return 1
    isSecure = get_is_secure(properties)
    (isPersisted, masterKeyFile) = get_is_persisted(properties)
    if (db_sql_auth and (not is_alias_string(db_password)) and os.path.isfile(db_password)):
        with open(db_password, 'r') as passwdfile:
            db_password = passwdfile.read()
    ldap_password = properties.get_property(LDAP_MGR_PASSWORD_PROPERTY)
    if ldap_password:
        if ((not is_alias_string(ldap_password)) and os.path.isfile(ldap_password)):
            with open(ldap_password, 'r') as passwdfile:
                ldap_password = passwdfile.read()
    ts_password = properties.get_property(SSL_TRUSTSTORE_PASSWORD_PROPERTY)
    resetKey = False
    masterKey = None
    if isSecure:
        print 'Password encryption is enabled.'
        resetKey = get_YN_input('Do you want to reset Master Key? [y/n] (n): ', False)
    if (isSecure and (not isPersisted) and (not resetKey)):
        print 'Master Key not persisted.'
        masterKey = get_original_master_key(properties)
    pass
    if resetKey:
        if (not isPersisted):
            print 'Master Key not persisted.'
            masterKey = get_original_master_key(properties)
            if (not masterKey):
                print 'To disable encryption, do the following:'
                print ((((('- Edit ' + find_properties_file()) + ' and set ') + SECURITY_IS_ENCRYPTION_ENABLED) + ' = ') + 'false.')
                err = "{0} is already encrypted. Please call {1} to store unencrypted password and call 'encrypt-passwords' again."
                if (db_sql_auth and db_password and is_alias_string(db_password)):
                    print err.format('- Database password', (("'" + SETUP_ACTION) + "'"))
                if (ldap_password and is_alias_string(ldap_password)):
                    print err.format('- LDAP manager password', (("'" + LDAP_SETUP_ACTION) + "'"))
                if (ts_password and is_alias_string(ts_password)):
                    print err.format('TrustStore password', (("'" + LDAP_SETUP_ACTION) + "'"))
                return 1
            pass
        pass
    pass
    if (db_sql_auth and db_password and is_alias_string(db_password)):
        db_password = read_passwd_for_alias(JDBC_RCA_PASSWORD_ALIAS, masterKey)
    if (ldap_password and is_alias_string(ldap_password)):
        ldap_password = read_passwd_for_alias(LDAP_MGR_PASSWORD_ALIAS, masterKey)
    if (ts_password and is_alias_string(ts_password)):
        ts_password = read_passwd_for_alias(SSL_TRUSTSTORE_PASSWORD_ALIAS, masterKey)
    if (resetKey or (not isSecure)):
        masterKey = read_master_key(resetKey)
        persist = get_YN_input((('Do you want to persist master key. If you choose not to persist, you need to provide the Master Key while starting the ambari server as an env variable named ' + SECURITY_KEY_ENV_VAR_NAME) + ' or the start will prompt for the master key. Persist [y/n] (y)? '), True)
        if persist:
            save_master_key(masterKey, ((get_master_key_location(properties) + os.sep) + SECURITY_MASTER_KEY_FILENAME), persist)
        elif ((not persist) and masterKeyFile):
            try:
                os.remove(masterKeyFile)
                print_info_msg(('Deleting master key file at location: ' + str(masterKeyFile)))
            except Exception as e:
                print ('ERROR: Could not remove master key file. %s' % e)
        store_file = get_credential_store_location(properties)
        if os.path.exists(store_file):
            try:
                os.remove(store_file)
            except:
                print_warning_msg('Failed to remove credential store file.')
            pass
        pass
    pass
    propertyMap = {SECURITY_IS_ENCRYPTION_ENABLED: 'true', }
    if (db_password and (not is_alias_string(db_password))):
        retCode = save_passwd_for_alias(JDBC_RCA_PASSWORD_ALIAS, db_password, masterKey)
        if (retCode != 0):
            print 'Failed to save secure database password.'
        else:
            propertyMap[JDBC_PASSWORD_PROPERTY] = get_alias_string(JDBC_RCA_PASSWORD_ALIAS)
            remove_password_file(JDBC_PASSWORD_FILENAME)
            if properties.get_property(JDBC_RCA_PASSWORD_FILE_PROPERTY):
                propertyMap[JDBC_RCA_PASSWORD_FILE_PROPERTY] = get_alias_string(JDBC_RCA_PASSWORD_ALIAS)
    pass
    if (ldap_password and (not is_alias_string(ldap_password))):
        retCode = save_passwd_for_alias(LDAP_MGR_PASSWORD_ALIAS, ldap_password, masterKey)
        if (retCode != 0):
            print 'Failed to save secure LDAP password.'
        else:
            propertyMap[LDAP_MGR_PASSWORD_PROPERTY] = get_alias_string(LDAP_MGR_PASSWORD_ALIAS)
            remove_password_file(LDAP_MGR_PASSWORD_FILENAME)
    pass
    if (ts_password and (not is_alias_string(ts_password))):
        retCode = save_passwd_for_alias(SSL_TRUSTSTORE_PASSWORD_ALIAS, ts_password, masterKey)
        if (retCode != 0):
            print 'Failed to save secure TrustStore password.'
        else:
            propertyMap[SSL_TRUSTSTORE_PASSWORD_PROPERTY] = get_alias_string(SSL_TRUSTSTORE_PASSWORD_ALIAS)
    pass
    update_properties_2(properties, propertyMap)
    ambari_user = read_ambari_user()
    if ambari_user:
        adjust_directory_permissions(ambari_user)
    return 0
