def sync_ldap(options):
    if (not is_root()):
        err = 'Ambari-server sync-ldap should be run with root-level privileges'
        raise FatalException(4, err)
    (server_status, pid) = is_server_runing()
    if (not server_status):
        err = 'Ambari Server is not running.'
        raise FatalException(1, err)
    ldap_configured = get_ambari_properties().get_property(IS_LDAP_CONFIGURED)
    if (ldap_configured != 'true'):
        err = "LDAP is not configured. Run 'ambari-server setup-ldap' first."
        raise FatalException(1, err)
    ldap_sync_options = LdapSyncOptions(options)
    if ldap_sync_options.no_ldap_sync_options_set():
        err = 'Must specify a sync option.  Please see help for more information.'
        raise FatalException(1, err)
    admin_login = get_validated_string_input(prompt='Enter Ambari Admin login: ', default=None, pattern=None, description=None, is_pass=False, allowEmpty=False)
    admin_password = get_validated_string_input(prompt='Enter Ambari Admin password: ', default=None, pattern=None, description=None, is_pass=True, allowEmpty=False)
    url = '{0}://{1}:{2!s}{3}'.format(SERVER_API_PROTOCOL, SERVER_API_HOST, SERVER_API_PORT, SERVER_API_LDAP_URL)
    admin_auth = base64.encodestring(('%s:%s' % (admin_login, admin_password))).replace('\n', '')
    request = urllib2.Request(url)
    request.add_header('Authorization', ('Basic %s' % admin_auth))
    request.add_header('X-Requested-By', 'ambari')
    if ldap_sync_options.ldap_sync_all:
        sys.stdout.write('Syncing all.')
        bodies = [{'Event': {'specs': [{'principal_type': 'users', 'sync_type': 'all', }, {'principal_type': 'groups', 'sync_type': 'all', }], }, }]
    elif ldap_sync_options.ldap_sync_existing:
        sys.stdout.write('Syncing existing.')
        bodies = [{'Event': {'specs': [{'principal_type': 'users', 'sync_type': 'existing', }, {'principal_type': 'groups', 'sync_type': 'existing', }], }, }]
    else:
        sys.stdout.write('Syncing specified users and groups.')
        bodies = [{'Event': {'specs': [], }, }]
        body = bodies[0]
        events = body['Event']
        specs = events['specs']
        if (ldap_sync_options.ldap_sync_users is not None):
            new_specs = [{'principal_type': 'users', 'sync_type': 'specific', 'names': '', }]
        if (ldap_sync_options.ldap_sync_groups is not None):
            new_specs = [{'principal_type': 'groups', 'sync_type': 'specific', 'names': '', }]
            get_ldap_event_spec_names(ldap_sync_options.ldap_sync_groups, specs, new_specs)
    if get_verbose():
        sys.stdout.write((((('\nCalling API ' + SERVER_API_LDAP_URL) + ' : ') + str(bodies)) + '\n'))
    request.add_data(json.dumps(bodies))
    request.get_method = (lambda : 'POST')
    try:
        response = urllib2.urlopen(request)
    except Exception as e:
        err = ('Sync event creation failed. Error details: %s' % e)
        raise FatalException(1, err)
    response_status_code = response.getcode()
    if (response_status_code != 201):
        err = ('Error during syncing. Http status code - ' + str(response_status_code))
        raise FatalException(1, err)
    response_body = json.loads(response.read())
    url = response_body['resources'][0]['href']
    request = urllib2.Request(url)
    request.add_header('Authorization', ('Basic %s' % admin_auth))
    request.add_header('X-Requested-By', 'ambari')
    body = [{'LDAP': {'synced_groups': '*', 'synced_users': '*', }, }]
    request.add_data(json.dumps(body))
    request.get_method = (lambda : 'GET')
    request_in_progress = True
    while request_in_progress:
        sys.stdout.write('.')
        sys.stdout.flush()
        try:
            response = urllib2.urlopen(request)
        except Exception as e:
            request_in_progress = False
            err = ('Sync event check failed. Error details: %s' % e)
            raise FatalException(1, err)
        response_status_code = response.getcode()
        if (response_status_code != 200):
            err = ('Error during syncing. Http status code - ' + str(response_status_code))
            raise FatalException(1, err)
        response_body = json.loads(response.read())
        sync_info = response_body['Event']
        if (sync_info['status'] == 'ERROR'):
            raise FatalException(1, str(sync_info['status_detail']))
        elif (sync_info['status'] == 'COMPLETE'):
            print '\n\nCompleted LDAP Sync.'
            print 'Summary:'
            for (principal_type, summary) in sync_info['summary'].iteritems():
                print '  {0}:'.format(principal_type)
                for (action, amount) in summary.iteritems():
                    print '    {0} = {1!s}'.format(action, amount)
            request_in_progress = False
        else:
            time.sleep(1)
    sys.stdout.write('\n')
    sys.stdout.flush()
