def import_cert_and_key(security_server_keys_dir):
    import_cert_path = get_validated_filepath_input('Enter path to Certificate: ', 'Certificate not found')
    import_key_path = get_validated_filepath_input('Enter path to Private Key: ', 'Private Key not found')
    pem_password = get_validated_string_input('Please enter password for Private Key: ', '', None, None, True)
    certInfoDict = get_cert_info(import_cert_path)
    if (not certInfoDict):
        print_warning_msg('Unable to get Certificate information')
    else:
        if (not is_valid_cert_host(certInfoDict)):
            print_warning_msg('Unable to validate Certificate hostname')
        if (not is_valid_cert_exp(certInfoDict)):
            print_warning_msg('Unable to validate Certificate issue and expiration dates')
    retcode = 0
    err = ''
    if (not pem_password):
        print 'Generating random password for HTTPS keystore...done.'
        pem_password = generate_random_string()
        (retcode, out, err) = run_os_command(CHANGE_KEY_PWD_CND.format(import_key_path, pem_password))
        import_key_path += '.secured'
    if (retcode == 0):
        keystoreFilePath = os.path.join(security_server_keys_dir, SSL_KEYSTORE_FILE_NAME)
        keystoreFilePathTmp = os.path.join(tempfile.gettempdir(), SSL_KEYSTORE_FILE_NAME)
        passFilePath = os.path.join(security_server_keys_dir, SSL_KEY_PASSWORD_FILE_NAME)
        passFilePathTmp = os.path.join(tempfile.gettempdir(), SSL_KEY_PASSWORD_FILE_NAME)
        passinFilePath = os.path.join(tempfile.gettempdir(), SSL_PASSIN_FILE)
        passwordFilePath = os.path.join(tempfile.gettempdir(), SSL_PASSWORD_FILE)
        with open(passFilePathTmp, 'w+') as passFile:
            passFile.write(pem_password)
            passFile.close
            pass
        set_file_permissions(passFilePath, '660', read_ambari_user(), False)
        copy_file(passFilePathTmp, passinFilePath)
        copy_file(passFilePathTmp, passwordFilePath)
        (retcode, out, err) = run_os_command(EXPRT_KSTR_CMD.format(import_cert_path, import_key_path, passwordFilePath, passinFilePath, keystoreFilePathTmp))
    if (retcode == 0):
        print 'Importing and saving Certificate...done.'
        import_file_to_keystore(keystoreFilePathTmp, keystoreFilePath)
        import_file_to_keystore(passFilePathTmp, passFilePath)
        import_file_to_keystore(import_cert_path, os.path.join(security_server_keys_dir, SSL_CERT_FILE_NAME))
        import_file_to_keystore(import_key_path, os.path.join(security_server_keys_dir, SSL_KEY_FILE_NAME))
        (retcode, out, err) = run_os_command(VALIDATE_KEYSTORE_CMD.format(keystoreFilePath, passwordFilePath, passinFilePath))
        remove_file(passinFilePath)
        remove_file(passwordFilePath)
        if (not (retcode == 0)):
            print 'Error during keystore validation occured!:'
            print err
            return False
        return True
    else:
        print_error_msg('Could not import Certificate and Private Key.')
        print ((('SSL error on exporting keystore: ' + err.rstrip()) + '.\nPlease ensure that provided Private Key password is correct and ') + 're-import Certificate.')
        return False
