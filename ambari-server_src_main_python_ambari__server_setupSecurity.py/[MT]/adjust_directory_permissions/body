def adjust_directory_permissions(ambari_user):
    properties = get_ambari_properties()
    bootstrap_dir = os.path.abspath(get_value_from_properties(properties, BOOTSTRAP_DIR_PROPERTY))
    print_info_msg('Cleaning bootstrap directory ({0}) contents...'.format(bootstrap_dir))
    if os.path.exists(bootstrap_dir):
        shutil.rmtree(bootstrap_dir)
    if (not os.path.exists(bootstrap_dir)):
        try:
            os.makedirs(bootstrap_dir)
        except Exception as ex:
            print_warning_msg('Failed recreating the bootstrap directory: {0}'.format(str(ex)))
            pass
    else:
        print_warning_msg('Bootstrap directory lingering around after 5s. Unable to complete the cleanup.')
    pass
    keyLocation = get_master_key_location(properties)
    masterKeyFile = search_file(SECURITY_MASTER_KEY_FILENAME, keyLocation)
    if masterKeyFile:
        configDefaults.NR_ADJUST_OWNERSHIP_LIST.append((masterKeyFile, configDefaults.MASTER_KEY_FILE_PERMISSIONS, '{0}', False))
    credStoreFile = get_credential_store_location(properties)
    if os.path.exists(credStoreFile):
        configDefaults.NR_ADJUST_OWNERSHIP_LIST.append((credStoreFile, configDefaults.CREDENTIALS_STORE_FILE_PERMISSIONS, '{0}', False))
    trust_store_location = properties[SSL_TRUSTSTORE_PATH_PROPERTY]
    if trust_store_location:
        configDefaults.NR_ADJUST_OWNERSHIP_LIST.append((trust_store_location, configDefaults.TRUST_STORE_LOCATION_PERMISSIONS, '{0}', False))
    resources_dir = get_resources_location(properties)
    jdk_file_name = properties.get_property(JDK_NAME_PROPERTY)
    jce_file_name = properties.get_property(JCE_NAME_PROPERTY)
    java_home = properties.get_property(JAVA_HOME_PROPERTY)
    if jdk_file_name:
        jdk_file_path = os.path.abspath(os.path.join(resources_dir, jdk_file_name))
        if os.path.exists(jdk_file_path):
            configDefaults.NR_ADJUST_OWNERSHIP_LIST.append((jdk_file_path, '644', '{0}', False))
    if jce_file_name:
        jce_file_path = os.path.abspath(os.path.join(resources_dir, jce_file_name))
        if os.path.exists(jce_file_path):
            configDefaults.NR_ADJUST_OWNERSHIP_LIST.append((jce_file_path, '644', '{0}', False))
    if java_home:
        jdk_security_dir = os.path.abspath(os.path.join(java_home, configDefaults.JDK_SECURITY_DIR))
        if os.path.exists(jdk_security_dir):
            configDefaults.NR_ADJUST_OWNERSHIP_LIST.append(((jdk_security_dir + '/*'), '644', '{0}', True))
            configDefaults.NR_ADJUST_OWNERSHIP_LIST.append((jdk_security_dir, '755', '{0}', False))
    ambari_repo_file = get_ambari_repo_file_full_name()
    if ambari_repo_file:
        if os.path.exists(ambari_repo_file):
            ambari_repo_file_owner = get_file_owner(ambari_repo_file)
            configDefaults.NR_ADJUST_OWNERSHIP_LIST.append((ambari_repo_file, '644', ambari_repo_file_owner, False))
    print 'Adjusting ambari-server permissions and ownership...'
    for pack in configDefaults.NR_ADJUST_OWNERSHIP_LIST:
        file = pack[0]
        mod = pack[1]
        user = pack[2].format(ambari_user)
        recursive = pack[3]
        print_info_msg('Setting file permissions: {0} {1} {2} {3}'.format(file, mod, user, recursive))
        set_file_permissions(file, mod, user, recursive)
    for pack in configDefaults.NR_CHANGE_OWNERSHIP_LIST:
        path = pack[0]
        user = pack[1].format(ambari_user)
        recursive = pack[2]
        print_info_msg('Changing ownership: {0} {1} {2}'.format(path, user, recursive))
        change_owner(path, user, recursive)
