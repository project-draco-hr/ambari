def adjust_directory_permissions(ambari_user):
    properties = get_ambari_properties()
    bootstrap_dir = os.path.abspath(get_value_from_properties(properties, BOOTSTRAP_DIR_PROPERTY))
    print_info_msg('Cleaning bootstrap directory ({0}) contents...'.format(bootstrap_dir))
    shutil.rmtree(bootstrap_dir, True)
    del_attempts = 0
    while (os.path.exists(bootstrap_dir) and (del_attempts < 100)):
        time.sleep(50)
        del_attempts += 1
    if (not os.path.exists(bootstrap_dir)):
        try:
            os.makedirs(bootstrap_dir)
        except Exception as ex:
            print_warning_msg('Failed recreating the bootstrap directory: {0}'.format(str(ex)))
            pass
    else:
        print_warning_msg('Bootstrap directory lingering around after 5s. Unable to complete the cleanup.')
    keyLocation = get_master_key_location(properties)
    masterKeyFile = search_file(SECURITY_MASTER_KEY_FILENAME, keyLocation)
    if masterKeyFile:
        configDefaults.NR_ADJUST_OWNERSHIP_LIST.append((masterKeyFile, configDefaults.MASTER_KEY_FILE_PERMISSIONS, '{0}', '{0}', False))
    credStoreFile = get_credential_store_location(properties)
    if os.path.exists(credStoreFile):
        configDefaults.NR_ADJUST_OWNERSHIP_LIST.append((credStoreFile, configDefaults.CREDENTIALS_STORE_FILE_PERMISSIONS, '{0}', '{0}', False))
    trust_store_location = properties[SSL_TRUSTSTORE_PATH_PROPERTY]
    if trust_store_location:
        configDefaults.NR_ADJUST_OWNERSHIP_LIST.append((trust_store_location, configDefaults.TRUST_STORE_LOCATION_PERMISSIONS, '{0}', '{0}', False))
    print 'Adjusting ambari-server permissions and ownership...'
    for pack in configDefaults.NR_ADJUST_OWNERSHIP_LIST:
        file = pack[0]
        mod = pack[1]
        user = pack[2].format(ambari_user)
        recursive = pack[3]
        set_file_permissions(file, mod, user, recursive)
