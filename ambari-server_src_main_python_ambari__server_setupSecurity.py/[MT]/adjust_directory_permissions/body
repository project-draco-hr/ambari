def adjust_directory_permissions(ambari_user):
    properties = get_ambari_properties()
    bootstrap_dir = get_value_from_properties(properties, BOOTSTRAP_DIR_PROPERTY)
    print_info_msg('Cleaning bootstrap directory ({0}) contents...'.format(bootstrap_dir))
    shutil.rmtree(bootstrap_dir, True)
    retry_makedirs = 0
    while True:
        try:
            os.makedirs(bootstrap_dir)
        except OSError as e:
            time.sleep(0.01)
            retry_makedirs += 1
            if (retry_makedirs == 3):
                raise
            continue
        break
    ownership_list = configDefaults.NR_ADJUST_OWNERSHIP_LIST
    keyLocation = get_master_key_location(properties)
    masterKeyFile = search_file(SECURITY_MASTER_KEY_FILENAME, keyLocation)
    if masterKeyFile:
        ownership_list.append((masterKeyFile, configDefaults.MASTER_KEY_FILE_PERMISSIONS, '{0}', '{0}', False))
    credStoreFile = get_credential_store_location(properties)
    if os.path.exists(credStoreFile):
        ownership_list.append((credStoreFile, configDefaults.CREDENTIALS_STORE_FILE_PERMISSIONS, '{0}', '{0}', False))
    trust_store_location = get_value_from_properties(properties, SSL_TRUSTSTORE_PATH_PROPERTY, None)
    if trust_store_location:
        ownership_list.append((trust_store_location, configDefaults.TRUST_STORE_LOCATION_PERMISSIONS, '{0}', '{0}', False))
    print 'Adjusting ambari-server permissions and ownership...'
    for pack in ownership_list:
        file = pack[0]
        mod = pack[1]
        user = pack[2].format(ambari_user)
        recursive = pack[3]
        set_file_permissions(file, mod, user, recursive)
