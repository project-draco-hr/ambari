@patch('os.path.isfile')
@patch('os.path.isdir')
@patch('os.unlink')
@patch('shutil.rmtree')
@patch('os.makedirs')
def test_invalidate_directory(self, makedirs_mock, rmtree_mock, unlink_mock, isdir_mock, isfile_mock):
    fileCache = FileCache(self.config)
    isfile_mock.return_value = True
    isdir_mock.return_value = False
    fileCache.invalidate_directory('dummy-dir')
    self.assertTrue(unlink_mock.called)
    self.assertFalse(rmtree_mock.called)
    self.assertTrue(makedirs_mock.called)
    unlink_mock.reset_mock()
    rmtree_mock.reset_mock()
    makedirs_mock.reset_mock()
    isfile_mock.return_value = False
    isdir_mock.return_value = True
    fileCache.invalidate_directory('dummy-dir')
    self.assertFalse(unlink_mock.called)
    self.assertTrue(rmtree_mock.called)
    self.assertTrue(makedirs_mock.called)
    unlink_mock.reset_mock()
    rmtree_mock.reset_mock()
    makedirs_mock.reset_mock()
    makedirs_mock.side_effect = self.exc_side_effect
    try:
        fileCache.invalidate_directory('dummy-dir')
        self.fail('CachingException not thrown')
    except CachingException:
        pass
    except Exception as e:
        self.fail(('Unexpected exception thrown:' + str(e)))
