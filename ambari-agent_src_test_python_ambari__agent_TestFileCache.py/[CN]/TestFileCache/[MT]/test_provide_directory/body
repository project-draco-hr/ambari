@patch.object(FileCache, 'build_download_url')
@patch.object(FileCache, 'fetch_url')
@patch.object(FileCache, 'read_hash_sum')
@patch.object(FileCache, 'invalidate_directory')
@patch.object(FileCache, 'unpack_archive')
@patch.object(FileCache, 'write_hash_sum')
def test_provide_directory(self, write_hash_sum_mock, unpack_archive_mock, invalidate_directory_mock, read_hash_sum_mock, fetch_url_mock, build_download_url_mock):
    build_download_url_mock.return_value = 'http://dummy-url/'
    HASH1 = 'hash1'
    membuffer = MagicMock()
    membuffer.getvalue.return_value.strip.return_value = HASH1
    fileCache = FileCache(self.config)
    self.assertFalse(fileCache.uptodate_paths)
    path = os.path.join('cache_path', 'subdirectory')
    fetch_url_mock.return_value = membuffer
    read_hash_sum_mock.return_value = 'hash2'
    res = fileCache.provide_directory('cache_path', 'subdirectory', 'server_url_prefix')
    self.assertTrue(invalidate_directory_mock.called)
    self.assertTrue(write_hash_sum_mock.called)
    self.assertEquals(fetch_url_mock.call_count, 2)
    self.assertEquals(pprint.pformat(fileCache.uptodate_paths), pprint.pformat([path]))
    self.assertEquals(res, path)
    fetch_url_mock.reset_mock()
    write_hash_sum_mock.reset_mock()
    invalidate_directory_mock.reset_mock()
    unpack_archive_mock.reset_mock()
    fetch_url_mock.return_value = membuffer
    read_hash_sum_mock.return_value = HASH1
    fileCache.reset()
    res = fileCache.provide_directory('cache_path', 'subdirectory', 'server_url_prefix')
    self.assertFalse(invalidate_directory_mock.called)
    self.assertFalse(write_hash_sum_mock.called)
    self.assertEquals(fetch_url_mock.call_count, 1)
    self.assertEquals(pprint.pformat(fileCache.uptodate_paths), pprint.pformat([path]))
    self.assertEquals(res, path)
    fetch_url_mock.reset_mock()
    write_hash_sum_mock.reset_mock()
    invalidate_directory_mock.reset_mock()
    unpack_archive_mock.reset_mock()
    res = fileCache.provide_directory('cache_path', 'subdirectory', 'server_url_prefix')
    self.assertFalse(invalidate_directory_mock.called)
    self.assertFalse(write_hash_sum_mock.called)
    self.assertEquals(fetch_url_mock.call_count, 0)
    self.assertEquals(pprint.pformat(fileCache.uptodate_paths), pprint.pformat([path]))
    self.assertEquals(res, path)
    self.config.set('agent', 'tolerate_download_failures', 'false')
    fetch_url_mock.side_effect = self.caching_exc_side_effect
    fileCache = FileCache(self.config)
    try:
        fileCache.provide_directory('cache_path', 'subdirectory', 'server_url_prefix')
        self.fail('CachingException not thrown')
    except CachingException:
        pass
    except Exception as e:
        self.fail(('Unexpected exception thrown:' + str(e)))
    self.config.set('agent', 'tolerate_download_failures', 'false')
    fetch_url_mock.side_effect = self.exc_side_effect
    fileCache = FileCache(self.config)
    try:
        fileCache.provide_directory('cache_path', 'subdirectory', 'server_url_prefix')
        self.fail('Exception not thrown')
    except Exception:
        pass
    self.config.set('agent', 'tolerate_download_failures', 'true')
    fetch_url_mock.side_effect = self.caching_exc_side_effect
    fileCache = FileCache(self.config)
    res = fileCache.provide_directory('cache_path', 'subdirectory', 'server_url_prefix')
    self.assertEquals(res, path)
    fetch_url_mock.reset_mock()
    build_download_url_mock.reset_mock()
    read_hash_sum_mock.reset_mock()
    invalidate_directory_mock.reset_mock()
    unpack_archive_mock.reset_mock()
    fileCache.reset()
    fetch_url_mock.side_effect = None
    membuffer_empty = MagicMock()
    membuffer_empty.getvalue.return_value.strip.return_value = ''
    fetch_url_mock.return_value = membuffer_empty
    read_hash_sum_mock.return_value = 'hash2'
    res = fileCache.provide_directory('cache_path', 'subdirectory', 'server_url_prefix')
    self.assertTrue((fetch_url_mock.return_value.strip() != read_hash_sum_mock.return_value.strip()))
    self.assertEquals(build_download_url_mock.call_count, 2)
    self.assertEquals(fetch_url_mock.call_count, 2)
    self.assertFalse(invalidate_directory_mock.called)
    self.assertFalse(unpack_archive_mock.called)
    self.assertFalse(write_hash_sum_mock.called)
    self.assertEquals(pprint.pformat(fileCache.uptodate_paths), pprint.pformat([path]))
    self.assertEquals(res, path)
    pass
