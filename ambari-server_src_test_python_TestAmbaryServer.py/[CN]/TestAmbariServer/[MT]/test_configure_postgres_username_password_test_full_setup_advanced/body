@patch.object(ambari_server, 'get_pass_file_path', autospec=True)
@patch('os.chmod', autospec=True)
@patch.object(ambari_server, 'write_property', autospec=True)
@patch.object(ambari_server, 'configure_postgres_password')
@patch.object(ambari_server, 'get_validated_string_input')
@patch.object(ambari_server, 'get_YN_input')
@patch('__builtin__.file')
@patch('__builtin__.open')
@patch.object(ambari_server, 'Properties')
@patch.object(ambari_server, 'search_file')
def test_configure_postgres_username_password_test_full_setup_advanced(self, search_file_message, properties_mock, open_method, file_obj, get_YN_input_method, get_validated_string_input_method, configure_postgres_password_method, write_property_method, os_chmod_method, get_pass_file_path_method):
    '\n      Tests situation when database username + password are not\n      already configured. Includes advanced DB configuration\n    '
    out = StringIO.StringIO()
    sys.stdout = out
    search_file_message.return_value = 'blablabla-properties'
    pm = properties_mock.return_value

    def tf(self, key):
        return {ambari_server.JDBC_USER_NAME_PROPERTY: 'fake_user', ambari_server.JDBC_PASSWORD_FILE_PROPERTY: False, }[key]
        pass
    pm.__getitem__ = tf
    options = MagicMock()
    open_method.return_value = file_obj
    file_obj.read.return_value = 'fake_password'
    file_obj.write.return_value = None
    get_YN_input_method.return_value = True
    get_validated_string_input_method.return_value = 'blablabla-input'
    get_pass_file_path_method.return_value = 'blablabla-path'
    ambari_server.configure_postgres_username_password(options)
    self.assertTrue(get_YN_input_method.called)
    self.assertEquals(write_property_method.call_args_list, [((ambari_server.JDBC_USER_NAME_PROPERTY, get_validated_string_input_method.return_value),), ((ambari_server.JDBC_PASSWORD_FILE_PROPERTY, get_pass_file_path_method.return_value),)])
    get_pass_file_path_method.assert_called_once_with(search_file_message.return_value)
    os_chmod_method.assert_called_once_with('blablabla-path', 384)
    self.assertTrue(pm.load.called)
    self.assertTrue(get_validated_string_input_method.called)
    self.assertTrue(configure_postgres_password_method.called)
    sys.stdout = sys.__stdout__
