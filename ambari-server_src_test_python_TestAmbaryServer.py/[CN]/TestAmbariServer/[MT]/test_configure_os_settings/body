@patch('platform.linux_distribution')
@patch('platform.system')
@patch('__builtin__.open')
@patch.object(ambari_server, 'Properties')
@patch.object(ambari_server, 'print_info_msg')
@patch.object(ambari_server, 'print_error_msg')
@patch.object(ambari_server, 'search_file')
@patch.object(ambari_server, 'get_conf_dir')
def test_configure_os_settings(self, get_conf_dir_mock, search_file_mock, print_error_msg_mock, print_info_msg_mock, Properties_mock, openMock, systemMock, distMock):
    search_file_mock.return_value = None
    rcode = ambari_server.configure_os_settings()
    self.assertEqual((-1), rcode)
    search_file_mock.return_value = 'something'
    p = MagicMock()
    Properties_mock.return_value = p
    openMock.side_effect = Exception('exception')
    rcode = ambari_server.configure_os_settings()
    self.assertEqual((-1), rcode)
    p.__getitem__.return_value = 'something'
    openMock.side_effect = None
    rcode = ambari_server.configure_os_settings()
    self.assertEqual(0, rcode)
    p.__getitem__.return_value = ''
    systemMock.return_value = 'NonLinux'
    rcode = ambari_server.configure_os_settings()
    self.assertEqual((-1), rcode)
    systemMock.return_value = 'Linux'
    distMock.return_value = ('CentOS', '6.3', None)
    f = MagicMock()
    openMock.return_value = f
    rcode = ambari_server.configure_os_settings()
    self.assertEqual(0, rcode)
