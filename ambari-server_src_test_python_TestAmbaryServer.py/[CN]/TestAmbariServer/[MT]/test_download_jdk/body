@patch('os.stat')
@patch('os.path.isfile')
@patch('os.path.exists')
@patch.object(ambari_server, 'track_jdk')
@patch.object(ambari_server, 'get_YN_input')
@patch.object(ambari_server, 'run_os_command')
@patch.object(ambari_server, 'write_property')
@patch.object(ambari_server, 'print_info_msg')
@patch.object(ambari_server, 'get_JAVA_HOME')
@patch.object(ambari_server, 'get_ambari_properties')
def test_download_jdk(self, get_ambari_properties_mock, get_JAVA_HOME_mock, print_info_msg_mock, write_property_mock, run_os_command_mock, get_YN_input_mock, track_jdk_mock, path_existsMock, path_isfileMock, statMock):
    args = MagicMock()
    args.java_home = 'somewhere'
    path_existsMock.return_value = False
    get_JAVA_HOME_mock.return_value = False
    get_ambari_properties_mock.return_value = (-1)
    try:
        ambari_server.download_jdk(args)
        self.fail('Should throw exception because of not found ambari.properties')
    except FatalException:
        self.assertTrue(get_ambari_properties_mock.called)
        pass
    get_JAVA_HOME_mock.return_value = True
    path_existsMock.return_value = True
    rcode = ambari_server.download_jdk(args)
    self.assertEqual(0, rcode)
    get_JAVA_HOME_mock.return_value = False
    rcode = ambari_server.download_jdk(args)
    self.assertEqual(0, rcode)
    self.assertTrue(write_property_mock.called)
    path_existsMock.return_value = False
    p = MagicMock()
    get_ambari_properties_mock.return_value = p
    p.__getitem__.side_effect = KeyError('test exception')
    try:
        ambari_server.download_jdk(args)
        self.fail('Should throw exception')
    except FatalException:
        pass
    p.__getitem__.return_value = 'somewhere'
    p.__getitem__.side_effect = None
    path_existsMock.return_value = False
    run_os_command_mock.return_value = (0, 'Wrong out', None)
    try:
        ambari_server.download_jdk(args)
        self.fail('Should throw exception')
    except FatalException:
        pass
    ambari_server.JDK_INSTALL_DIR = os.getcwd()
    get_YN_input_mock.return_value = True
    run_os_command_mock.return_value = (0, 'Creating jdk-1.2/jreContent-Length: 32000\r\n', None)
    statResult = MagicMock()
    statResult.st_size = 32000
    statMock.return_value = statResult
    rcode = ambari_server.download_jdk(args)
    self.assertEqual(0, rcode)
