@patch.object(ambari_server, 'get_db_cli_tool')
@patch.object(ambari_server, 'run_in_shell')
def test_execute_remote_script(self, run_in_shell_mock, get_db_cli_tool_mock):
    args = MagicMock()
    script = 'script'
    run_in_shell_mock.return_value = (0, None, None)
    get_db_cli_tool_mock.return_value = 'tool'
    args.database = 'postgres'
    args.database_password = 'some_password'
    (retcode, out, err) = ambari_server.execute_remote_script(args, script)
    self.assertEquals(retcode, 0)
    self.assertTrue(get_db_cli_tool_mock.called)
    self.assertTrue(run_in_shell_mock.called)
    get_db_cli_tool_mock.return_value = None
    get_db_cli_tool_mock.called = False
    run_in_shell_mock.called = False
    (retcode, out, err) = ambari_server.execute_remote_script(args, script)
    self.assertEquals(retcode, (-1))
    self.assertTrue(get_db_cli_tool_mock.called)
    self.assertFalse(run_in_shell_mock.called)
    errcode = 1
    get_db_cli_tool_mock.return_value = 'tool'
    run_in_shell_mock.return_value = (errcode, None, None)
    get_db_cli_tool_mock.called = False
    run_in_shell_mock.called = False
    (retcode, out, err) = ambari_server.execute_remote_script(args, script)
    self.assertEquals(retcode, errcode)
    self.assertTrue(get_db_cli_tool_mock.called)
    self.assertTrue(run_in_shell_mock.called)
    get_db_cli_tool_mock.return_value = 'tool'
    run_in_shell_mock.return_value = (0, None, None)
    get_db_cli_tool_mock.called = False
    run_in_shell_mock.called = False
    args.database = 'unknown'
    (retcode, out, err) = ambari_server.execute_remote_script(args, script)
    self.assertEquals(retcode, (-2))
    self.assertTrue(get_db_cli_tool_mock.called)
    self.assertFalse(run_in_shell_mock.called)
    pass
