@patch.object(ambari_server, 'save_passwd_for_alias')
@patch.object(ambari_server, 'get_YN_input')
@patch.object(ambari_server, 'update_properties')
@patch.object(ambari_server, 'configure_ldap_password')
@patch.object(ambari_server, 'get_validated_string_input')
@patch.object(ambari_server, 'setup_master_key')
@patch.object(ambari_server, 'search_file')
@patch.object(ambari_server, 'get_ambari_properties')
def test_setup_ldap(self, get_ambari_properties_method, search_file_message, setup_master_key_method, get_validated_string_input_method, configure_ldap_password_method, update_properties_method, get_YN_input_method, save_passwd_for_alias_method):
    out = StringIO.StringIO()
    sys.stdout = out
    search_file_message.return_value = 'filepath'
    configs = {ambari_server.SECURITY_MASTER_KEY_LOCATION: 'filepath', ambari_server.SECURITY_KEYS_DIR: tempfile.gettempdir(), ambari_server.SECURITY_KEY_IS_PERSISTED: 'true', }
    get_ambari_properties_method.return_value = configs
    configure_ldap_password_method.return_value = 'password'
    setup_master_key_method.return_value = (None, True, True)
    get_YN_input_method.return_value = True
    save_passwd_for_alias_method.return_value = 0

    def side_effect(*args, **kwargs):
        if ('Bind anonymously' in args[0]):
            return 'true'
        if ((args[1] == 'true') or (args[1] == 'false')):
            return args[1]
        else:
            return 'test'
    get_validated_string_input_method.side_effect = side_effect
    ambari_server.setup_ldap()
    ldap_properties_map = {'authentication.ldap.primaryUrl': 'test', 'authentication.ldap.secondaryUrl': 'test', 'authentication.ldap.useSSL': 'false', 'authentication.ldap.usernameAttribute': 'test', 'authentication.ldap.baseDn': 'test', 'authorization.userRoleName': 'test', 'authorization.adminRoleName': 'test', 'authentication.ldap.bindAnonymously': 'true', 'authentication.ldap.managerDn': 'test', 'authentication.ldap.managerPassword': '${alias=ambari.ldap.manager.password}', 'client.security': 'ldap', }
    sorted_x = sorted(ldap_properties_map.iteritems(), key=operator.itemgetter(0))
    sorted_y = sorted(update_properties_method.call_args[0][0].iteritems(), key=operator.itemgetter(0))
    self.assertEquals(sorted_x, sorted_y)
    self.assertTrue(update_properties_method.called)
    self.assertTrue(configure_ldap_password_method.called)
    self.assertTrue(get_validated_string_input_method.called)
    self.assertTrue(get_YN_input_method.called)
    sys.stdout = sys.__stdout__
