@patch('__builtin__.file')
@patch('__builtin__.open')
@patch.object(ambari_server, 'Properties')
@patch.object(ambari_server, 'search_file')
def test_configure_postgres_username_password_test_configured(self, search_file_message, properties_mock, open_method, file_obj):
    '\n      Tests situation when database username + password are already configured\n    '
    out = StringIO.StringIO()
    sys.stdout = out
    search_file_message.return_value = 'blablabla-properties'
    pm = properties_mock.return_value

    def tf(self, key):
        return {ambari_server.JDBC_USER_NAME_PROPERTY: 'fake_username', ambari_server.JDBC_PASSWORD_FILE_PROPERTY: 'fake_passwd_file', }[key]
        pass
    pm.__getitem__ = tf
    options = MagicMock()
    open_method.return_value = file_obj
    file_obj.read.return_value = 'fake_password'
    ambari_server.configure_postgres_username_password(options)
    self.assertTrue(pm.load.called)
    self.assertTrue(file_obj.read.called)
    self.assertEquals(options.postgres_username, pm[ambari_server.JDBC_USER_NAME_PROPERTY])
    self.assertEquals(options.postgres_password, file_obj.read.return_value)
    sys.stdout = sys.__stdout__
