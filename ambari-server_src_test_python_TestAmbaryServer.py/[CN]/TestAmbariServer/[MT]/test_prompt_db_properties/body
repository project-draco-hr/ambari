@patch.object(ambari_server, 'load_default_db_properties')
@patch.object(ambari_server, 'get_YN_input')
@patch.object(ambari_server, 'get_validated_string_input')
@patch.object(ambari_server, 'setup_master_key')
@patch.object(ambari_server, 'configure_database_password')
def test_prompt_db_properties(self, configure_database_password_mock, setup_master_key_mock, get_validated_string_input_mock, get_YN_input_mock, load_default_db_properties_mock):
    args = MagicMock()
    ambari_server.PROMPT_DATABASE_OPTIONS = False
    ambari_server.prompt_db_properties(args)
    self.assertFalse(load_default_db_properties_mock.called)
    self.assertFalse(get_validated_string_input_mock.called)
    self.assertFalse(get_YN_input_mock.called)
    load_default_db_properties_mock.reset_mock()
    get_validated_string_input_mock.reset_mock()
    get_YN_input_mock.reset_mock()
    get_YN_input_mock.return_value = False
    ambari_server.PROMPT_DATABASE_OPTIONS = True
    ambari_server.prompt_db_properties(args)
    self.assertTrue(get_YN_input_mock.called)
    self.assertFalse(get_validated_string_input_mock.called)
    self.assertTrue(load_default_db_properties_mock.called)
    load_default_db_properties_mock.reset_mock()
    get_validated_string_input_mock.reset_mock()
    get_YN_input_mock.reset_mock()
    get_YN_input_mock.return_value = True
    ambari_server.PROMPT_DATABASE_OPTIONS = True
    setup_master_key_mock.return_value = (None, False, True)
    configure_database_password_mock.return_value = ('test', None)
    ambari_server.prompt_db_properties(args)
    self.assertTrue(get_YN_input_mock.called)
    self.assertTrue(get_validated_string_input_mock.called)
    self.assertTrue(load_default_db_properties_mock.called)
    self.assertEquals(args.database, 'postgres')
    load_default_db_properties_mock.reset_mock()
    get_validated_string_input_mock.reset_mock()
    get_YN_input_mock.reset_mock()
