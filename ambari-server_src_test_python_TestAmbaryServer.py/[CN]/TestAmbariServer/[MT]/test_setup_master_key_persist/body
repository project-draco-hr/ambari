@patch.object(ambari_server, 'read_master_key')
@patch.object(ambari_server, 'read_ambari_user')
@patch.object(ambari_server, 'get_master_key_location')
@patch.object(ambari_server, 'update_properties')
@patch.object(ambari_server, 'save_master_key')
@patch.object(ambari_server, 'get_YN_input')
@patch.object(ambari_server, 'search_file')
@patch.object(ambari_server, 'get_ambari_properties')
@patch.object(ambari_server, 'is_root')
def test_setup_master_key_persist(self, is_root_method, get_ambari_properties_method, search_file_message, get_YN_input_method, save_master_key_method, update_properties_method, get_master_key_location_method, read_ambari_user_method, read_master_key_method):
    out = StringIO.StringIO()
    sys.stdout = out
    is_root_method.return_value = True
    p = get_ambari_properties_method.return_value
    p.get_property.side_effect = [None, 'fakepasswd', None]
    read_master_key_method.return_value = 'aaa'
    get_YN_input_method.side_effect = [True, False]
    read_ambari_user_method.return_value = None
    ambari_server.setup_master_key()
    self.assertTrue(get_YN_input_method.called)
    self.assertTrue(read_master_key_method.called)
    self.assertTrue(read_ambari_user_method.called)
    self.assertTrue(update_properties_method.called)
    self.assertTrue(save_master_key_method.called)
    result_expected = {ambari_server.JDBC_PASSWORD_PROPERTY: ambari_server.get_alias_string(ambari_server.JDBC_RCA_PASSWORD_ALIAS), ambari_server.SECURITY_IS_ENCRYPTION_ENABLED: 'true', }
    sorted_x = sorted(result_expected.iteritems(), key=operator.itemgetter(0))
    sorted_y = sorted(update_properties_method.call_args[0][0].iteritems(), key=operator.itemgetter(0))
    self.assertEquals(sorted_x, sorted_y)
    sys.stdout = sys.__stdout__
