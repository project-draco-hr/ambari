@patch.object(ambari_server, 'get_YN_input')
@patch.object(ambari_server, 'setup_db')
@patch.object(ambari_server, 'print_info_msg')
@patch.object(ambari_server, 'run_os_command')
@patch.object(ambari_server, 'configure_database_username_password')
@patch.object(ambari_server, 'parse_properties_file')
def test_reset(self, parse_properties_file_mock, configure_database_username_password_mock, run_os_command_mock, print_info_msg_mock, setup_db_mock, get_YN_inputMock):
    out = StringIO.StringIO()
    sys.stdout = out
    parse_properties_file_mock.return_value = 0
    args = MagicMock()
    args.persistence_type = 'local'
    get_YN_inputMock.return_value = False
    rcode = ambari_server.reset(args)
    self.assertEqual((-1), rcode)
    get_YN_inputMock.return_value = True
    run_os_command_mock.return_value = (1, None, None)
    rcode = ambari_server.reset(args)
    self.assertEqual(1, rcode)
    run_os_command_mock.return_value = (0, None, None)
    rcode = ambari_server.reset(args)
    self.assertEqual(None, rcode)
    self.assertTrue(setup_db_mock.called)
    sys.stdout = sys.__stdout__
