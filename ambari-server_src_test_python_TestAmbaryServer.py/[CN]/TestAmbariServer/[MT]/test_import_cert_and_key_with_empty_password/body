@patch.object(ambari_server, 'remove_file')
@patch.object(ambari_server, 'copy_file')
@patch.object(ambari_server, 'generate_random_string')
@patch.object(ambari_server, 'read_ambari_user')
@patch.object(ambari_server, 'set_file_permissions')
@patch.object(ambari_server, 'import_file_to_keystore')
@patch('__builtin__.open')
@patch.object(ambari_server, 'run_os_command')
@patch('os.path.join')
@patch.object(ambari_server, 'get_validated_filepath_input')
@patch.object(ambari_server, 'get_validated_string_input')
@patch.object(ambari_server, 'is_valid_cert_host')
@patch.object(ambari_server, 'is_valid_cert_exp')
def test_import_cert_and_key_with_empty_password(self, is_valid_cert_exp_mock, is_valid_cert_host_mock, get_validated_string_input_mock, get_validated_filepath_input_mock, os_path_join_mock, run_os_command_mock, open_mock, import_file_to_keystore_mock, set_file_permissions_mock, read_ambari_user_mock, generate_random_string_mock, copy_file_mock, remove_file_mock):
    is_valid_cert_exp_mock.return_value = True
    is_valid_cert_host_mock.return_value = True
    get_validated_string_input_mock.return_value = ''
    get_validated_filepath_input_mock.side_effect = ['cert_file_path', 'key_file_path']
    os_path_join_mock.side_effect = ['keystore_file_path', 'pass_file_path', 'passin_file_path', 'password_file_path', 'keystore_cert_file_path', 'keystore_cert_key_file_path']
    run_os_command_mock.return_value = (0, '', '')
    expect_import_file_to_keystore = ((("[call('cert_file_path'," + " 'keystore_cert_file_path'),\n") + " call('key_file_path.secured',") + " 'keystore_cert_key_file_path')]")
    ambari_server.import_cert_and_key('key_dir')
    self.assertEquals(get_validated_filepath_input_mock.call_count, 2)
    self.assertTrue(get_validated_string_input_mock.called)
    self.assertEquals(os_path_join_mock.call_count, 6)
    self.assertEquals(set_file_permissions_mock.call_count, 2)
    self.assertEqual(str(import_file_to_keystore_mock.call_args_list), expect_import_file_to_keystore)
    self.assertTrue(generate_random_string_mock.called)
