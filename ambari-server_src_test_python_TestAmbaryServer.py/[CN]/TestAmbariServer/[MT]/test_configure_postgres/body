@patch.object(ambari_server, 'restart_postgres')
@patch.object(ambari_server, 'get_postgre_status')
@patch.object(ambari_server, 'configure_postgresql_conf')
@patch.object(ambari_server, 'configure_pg_hba_ambaridb_users')
@patch.object(ambari_server, 'configure_pg_hba_postgres_user')
def test_configure_postgres(self, configure_pg_hba_postgres_user_mock, configure_pg_hba_ambaridb_users_mock, configure_postgresql_conf_mock, get_postgre_status_mock, restart_postgres_mock):
    tf1 = tempfile.NamedTemporaryFile()
    tf2 = tempfile.NamedTemporaryFile()
    ambari_server.PG_HBA_CONF_FILE = tf1.name
    ambari_server.PG_HBA_CONF_FILE_BACKUP = tf2.name
    args = MagicMock()
    out = StringIO.StringIO()
    sys.stdout = out
    rcode = ambari_server.configure_postgres()
    sys.stdout = sys.__stdout__
    self.assertEqual(0, rcode)
    self.assertEqual('Backup for pg_hba found, reconfiguration not required\n', out.getvalue())
    ambari_server.PG_HBA_CONF_FILE_BACKUP = tempfile.mktemp()
    get_postgre_status_mock.return_value = ambari_server.PG_STATUS_RUNNING
    restart_postgres_mock.return_value = 0
    rcode = ambari_server.configure_postgres()
    self.assertTrue(os.path.isfile(ambari_server.PG_HBA_CONF_FILE_BACKUP), 'postgresql.conf backup not created')
    self.assertTrue(configure_pg_hba_postgres_user_mock.called)
    self.assertTrue(configure_pg_hba_ambaridb_users_mock.called)
    mode = oct(os.stat(ambari_server.PG_HBA_CONF_FILE)[stat.ST_MODE])
    str_mode = str(mode)[(-4):]
    self.assertEqual('0644', str_mode, 'Wrong file permissions')
    self.assertTrue(configure_postgresql_conf_mock.called)
    self.assertEqual(0, rcode)
    os.unlink(ambari_server.PG_HBA_CONF_FILE_BACKUP)
    get_postgre_status_mock.return_value = 'stopped'
    rcode = ambari_server.configure_postgres()
    self.assertEqual(0, rcode)
    os.unlink(ambari_server.PG_HBA_CONF_FILE_BACKUP)
    sys.stdout = sys.__stdout__
