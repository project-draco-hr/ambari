{
  for (  Resource resource : resources) {
    final String componentName=(String)resource.getPropertyValue(PropertyHelper.getPropertyId("HostRoles","component_name"));
    final String hostName=(String)resource.getPropertyValue(PropertyHelper.getPropertyId("HostRoles","host_name"));
    final String clusterName=(String)resource.getPropertyValue(PropertyHelper.getPropertyId("HostRoles","cluster_name"));
    if (!AuthorizationHelper.isAuthorized(ResourceType.CLUSTER,getClusterResourceID(clusterName),REQUIRED_AUTHORIZATIONS)) {
      if (LOG.isDebugEnabled()) {
        LOG.debug(String.format("The authenticated user (%s) is not authorized to access LogSearch data for the cluster named %s",AuthorizationHelper.getAuthenticatedName(),clusterName));
      }
      continue;
    }
    if (!logSearchServerRunning(clusterName)) {
      continue;
    }
    final String mappedComponentNameForLogSearch=getMappedComponentNameForSearch(clusterName,componentName,ambariManagementController);
    if (mappedComponentNameForLogSearch != null) {
      Set<String> logFileNames=logSearchDataRetrievalService.getLogFileNames(mappedComponentNameForLogSearch,hostName,clusterName);
      if ((logFileNames != null) && (!logFileNames.isEmpty())) {
        HostComponentLoggingInfo loggingInfo=new HostComponentLoggingInfo();
        loggingInfo.setComponentName(mappedComponentNameForLogSearch);
        List<LogFileDefinitionInfo> listOfFileDefinitions=new LinkedList<LogFileDefinitionInfo>();
        for (        String fileName : logFileNames) {
          final String searchEngineURI=ambariManagementController.getAmbariServerURI(getFullPathToSearchEngine(clusterName));
          final String logFileTailURI=logSearchDataRetrievalService.getLogFileTailURI(searchEngineURI,mappedComponentNameForLogSearch,hostName,clusterName);
          if (logFileTailURI != null) {
            listOfFileDefinitions.add(new LogFileDefinitionInfo(fileName,LogFileType.SERVICE,searchEngineURI,logFileTailURI));
          }
        }
        loggingInfo.setListOfLogFileDefinitions(listOfFileDefinitions);
        LOG.debug("Adding logging info for component name = " + componentName + " on host name = "+ hostName);
        resource.setProperty("logging",loggingInfo);
      }
 else {
        Utils.logErrorMessageWithCounter(LOG,errorLogCounterForLogSearchConnectionExceptions,"Error occurred while making request to LogSearch service, unable to populate logging properties on this resource");
      }
    }
  }
  return resources;
}
