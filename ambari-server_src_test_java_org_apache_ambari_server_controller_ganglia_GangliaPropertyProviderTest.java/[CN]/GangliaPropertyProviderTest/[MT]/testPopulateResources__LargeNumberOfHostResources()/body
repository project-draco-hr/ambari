{
  TestStreamProvider streamProvider=new TestStreamProvider("temporal_ganglia_data.txt");
  TestGangliaHostProvider hostProvider=new TestGangliaHostProvider();
  GangliaPropertyProvider propertyProvider=new GangliaHostPropertyProvider(PropertyHelper.getGangliaPropertyIds(Resource.Type.Host),streamProvider,hostProvider,CLUSTER_NAME_PROPERTY_ID,HOST_NAME_PROPERTY_ID);
  Set<Resource> resources=new HashSet<Resource>();
  for (int i=0; i < 150; ++i) {
    Resource resource=new ResourceImpl(Resource.Type.Host);
    resource.setProperty(HOST_NAME_PROPERTY_ID,"host" + i);
    resources.add(resource);
  }
  Map<String,TemporalInfo> temporalInfoMap=new HashMap<String,TemporalInfo>();
  temporalInfoMap.put(PROPERTY_ID,new TemporalInfoImpl(10L,20L,1L));
  Request request=PropertyHelper.getReadRequest(Collections.singleton(PROPERTY_ID),temporalInfoMap);
  Assert.assertEquals(150,propertyProvider.populateResources(resources,request,null).size());
  Assert.assertEquals("http://domU-12-31-39-0E-34-E1.compute-1.internal/cgi-bin/rrd.py?c=HDPJobTracker,HDPHBaseMaster,HDPSlaves,HDPNameNode&m=jvm.metrics.gcCount&s=10&e=20&r=1",streamProvider.getLastSpec());
}
