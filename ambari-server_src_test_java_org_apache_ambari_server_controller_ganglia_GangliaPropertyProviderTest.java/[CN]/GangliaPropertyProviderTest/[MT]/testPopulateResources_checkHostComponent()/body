{
  TestStreamProvider streamProvider=new TestStreamProvider("temporal_ganglia_data.txt");
  GangliaHostProvider hostProvider=PowerMock.createPartialMock(GangliaHostProvider.class,"isGangliaCollectorHostLive","isGangliaCollectorComponentLive");
  GangliaPropertyProvider propertyProvider=new GangliaHostComponentPropertyProvider(PropertyHelper.getGangliaPropertyIds(Resource.Type.HostComponent,PropertyHelper.MetricsVersion.HDP1),streamProvider,configuration,hostProvider,CLUSTER_NAME_PROPERTY_ID,HOST_NAME_PROPERTY_ID,COMPONENT_NAME_PROPERTY_ID);
  Resource resource=new ResourceImpl(Resource.Type.HostComponent);
  resource.setProperty(HOST_NAME_PROPERTY_ID,"domU-12-31-39-0E-34-E1.compute-1.internal");
  resource.setProperty(COMPONENT_NAME_PROPERTY_ID,"DATANODE");
  Map<String,TemporalInfo> temporalInfoMap=new HashMap<String,TemporalInfo>();
  temporalInfoMap.put(PROPERTY_ID,new TemporalInfoImpl(10L,20L,1L));
  Request request=PropertyHelper.getReadRequest(Collections.singleton(PROPERTY_ID),temporalInfoMap);
  expect(hostProvider.getGangliaCollectorHostName(anyObject(String.class))).andReturn("ganglia-host");
  expect(hostProvider.isGangliaCollectorComponentLive(anyObject(String.class))).andReturn(true).once();
  expect(hostProvider.isGangliaCollectorHostLive(anyObject(String.class))).andReturn(true).once();
  PowerMock.replay(hostProvider);
  Set<Resource> populateResources=propertyProvider.populateResources(Collections.singleton(resource),request,null);
  PowerMock.verify(hostProvider);
  Assert.assertEquals(1,populateResources.size());
}
