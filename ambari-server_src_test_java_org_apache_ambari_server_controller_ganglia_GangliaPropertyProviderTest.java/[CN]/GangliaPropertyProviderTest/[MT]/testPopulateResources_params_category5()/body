{
  TestStreamProvider streamProvider=new TestStreamProvider("temporal_ganglia_data_yarn_queues.txt");
  TestGangliaHostProvider hostProvider=new TestGangliaHostProvider();
  Map<String,Map<String,PropertyInfo>> gangliaPropertyIds=PropertyHelper.getGangliaPropertyIds(Resource.Type.HostComponent,MetricsVersion.HDP2);
  GangliaPropertyProvider propertyProvider=new GangliaHostComponentPropertyProvider(gangliaPropertyIds,streamProvider,configuration,hostProvider,CLUSTER_NAME_PROPERTY_ID,HOST_NAME_PROPERTY_ID,COMPONENT_NAME_PROPERTY_ID);
  Resource resource=new ResourceImpl(Resource.Type.HostComponent);
  resource.setProperty(HOST_NAME_PROPERTY_ID,"dev01.ambari.apache.org");
  resource.setProperty(COMPONENT_NAME_PROPERTY_ID,"RESOURCEMANAGER");
  Map<String,TemporalInfo> temporalInfoMap=new HashMap<String,TemporalInfo>();
  temporalInfoMap.put(RM_CATEGORY_1,new TemporalInfoImpl(10L,20L,1L));
  Request request=PropertyHelper.getReadRequest(Collections.singleton(RM_CATEGORY_1),temporalInfoMap);
  Assert.assertEquals(1,propertyProvider.populateResources(Collections.singleton(resource),request,null).size());
  List<String> metricsRegexes=new ArrayList<String>();
  metricsRegexes.add("metrics/yarn/Queue/$1.replaceAll(\"([.])\",\"/\")/");
  String metricsList=getMetricsRegexes(metricsRegexes,gangliaPropertyIds,"RESOURCEMANAGER");
  URIBuilder expectedUri=new URIBuilder();
  expectedUri.setScheme((configuration.isGangliaSSL() ? "https" : "http"));
  expectedUri.setHost("domU-12-31-39-0E-34-E1.compute-1.internal");
  expectedUri.setPath("/cgi-bin/rrd.py");
  expectedUri.setParameter("c","HDPResourceManager");
  expectedUri.setParameter("h","dev01.ambari.apache.org");
  expectedUri.setParameter("m",metricsList);
  expectedUri.setParameter("s","10");
  expectedUri.setParameter("e","20");
  expectedUri.setParameter("r","1");
  URIBuilder actualUri=new URIBuilder(streamProvider.getLastSpec());
  Assert.assertEquals(expectedUri.getScheme(),actualUri.getScheme());
  Assert.assertEquals(expectedUri.getHost(),actualUri.getHost());
  Assert.assertEquals(expectedUri.getPath(),actualUri.getPath());
  Assert.assertTrue(isUrlParamsEquals(actualUri,expectedUri));
  Assert.assertTrue(PropertyHelper.getProperties(resource).size() > 2);
  Assert.assertNotNull(resource.getPropertyValue(RM_AVAILABLE_MEMORY_PROPERTY));
}
