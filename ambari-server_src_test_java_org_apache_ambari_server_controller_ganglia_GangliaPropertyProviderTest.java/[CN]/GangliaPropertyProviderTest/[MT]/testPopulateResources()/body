{
  TestStreamProvider streamProvider=new TestStreamProvider("temporal_ganglia_data.txt");
  TestGangliaHostProvider hostProvider=new TestGangliaHostProvider();
  GangliaPropertyProvider propertyProvider=new GangliaHostComponentPropertyProvider(PropertyHelper.getGangliaPropertyIds(Resource.Type.HostComponent),streamProvider,hostProvider,CLUSTER_NAME_PROPERTY_ID,HOST_NAME_PROPERTY_ID,COMPONENT_NAME_PROPERTY_ID);
  Resource resource=new ResourceImpl(Resource.Type.HostComponent);
  resource.setProperty(HOST_NAME_PROPERTY_ID,"domU-12-31-39-0E-34-E1.compute-1.internal");
  resource.setProperty(COMPONENT_NAME_PROPERTY_ID,"DATANODE");
  Map<String,TemporalInfo> temporalInfoMap=new HashMap<String,TemporalInfo>();
  temporalInfoMap.put(PROPERTY_ID,new TemporalInfoImpl(10L,20L,1L));
  Request request=PropertyHelper.getReadRequest(Collections.singleton(PROPERTY_ID),temporalInfoMap);
  Assert.assertEquals(1,propertyProvider.populateResources(Collections.singleton(resource),request,null).size());
  Assert.assertEquals("http://domU-12-31-39-0E-34-E1.compute-1.internal/cgi-bin/rrd.py?c=HDPSlaves&h=domU-12-31-39-0E-34-E1.compute-1.internal&m=jvm.metrics.gcCount&s=10&e=20&r=1",streamProvider.getLastSpec());
  Assert.assertEquals(3,PropertyHelper.getProperties(resource).size());
  Assert.assertNotNull(resource.getPropertyValue(PROPERTY_ID));
  resource=new ResourceImpl(Resource.Type.HostComponent);
  resource.setProperty(HOST_NAME_PROPERTY_ID,"domU-12-31-39-0E-34-E1.compute-1.internal");
  resource.setProperty(COMPONENT_NAME_PROPERTY_ID,"TASKTRACKER");
  temporalInfoMap=new HashMap<String,TemporalInfo>();
  Set<String> properties=new HashSet<String>();
  String shuffle_exceptions_caught=PropertyHelper.getPropertyId("metrics/mapred/shuffleOutput","shuffle_exceptions_caught");
  String shuffle_failed_outputs=PropertyHelper.getPropertyId("metrics/mapred/shuffleOutput","shuffle_failed_outputs");
  String shuffle_output_bytes=PropertyHelper.getPropertyId("metrics/mapred/shuffleOutput","shuffle_output_bytes");
  String shuffle_success_outputs=PropertyHelper.getPropertyId("metrics/mapred/shuffleOutput","shuffle_success_outputs");
  properties.add(shuffle_exceptions_caught);
  properties.add(shuffle_failed_outputs);
  properties.add(shuffle_output_bytes);
  properties.add(shuffle_success_outputs);
  request=PropertyHelper.getReadRequest(properties,temporalInfoMap);
  temporalInfoMap.put(shuffle_exceptions_caught,new TemporalInfoImpl(10L,20L,1L));
  temporalInfoMap.put(shuffle_failed_outputs,new TemporalInfoImpl(10L,20L,1L));
  temporalInfoMap.put(shuffle_output_bytes,new TemporalInfoImpl(10L,20L,1L));
  temporalInfoMap.put(shuffle_success_outputs,new TemporalInfoImpl(10L,20L,1L));
  Assert.assertEquals(1,propertyProvider.populateResources(Collections.singleton(resource),request,null).size());
  Assert.assertEquals("http://domU-12-31-39-0E-34-E1.compute-1.internal/cgi-bin/rrd.py?c=HDPSlaves&h=domU-12-31-39-0E-34-E1.compute-1.internal&m=mapred.shuffleOutput.shuffle_output_bytes,mapred.shuffleOutput.shuffle_success_outputs,mapred.shuffleOutput.shuffle_failed_outputs,mapred.shuffleOutput.shuffle_exceptions_caught&s=10&e=20&r=1",streamProvider.getLastSpec());
  Assert.assertEquals(6,PropertyHelper.getProperties(resource).size());
  Assert.assertNotNull(resource.getPropertyValue(shuffle_exceptions_caught));
  Assert.assertNotNull(resource.getPropertyValue(shuffle_failed_outputs));
  Assert.assertNotNull(resource.getPropertyValue(shuffle_output_bytes));
  Assert.assertNotNull(resource.getPropertyValue(shuffle_success_outputs));
}
