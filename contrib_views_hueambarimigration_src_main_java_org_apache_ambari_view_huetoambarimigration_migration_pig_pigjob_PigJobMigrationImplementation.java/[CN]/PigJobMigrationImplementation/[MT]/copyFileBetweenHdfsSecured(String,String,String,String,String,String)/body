{
  try {
    final Configuration confAmbari=new Configuration();
    confAmbari.set("fs.defaultFS",nameNodeuriAmbari);
    confAmbari.set("hadoop.job.ugi","hdfs");
    final Configuration confHue=new Configuration();
    confHue.set("fs.defaultFS",nameNodeuriAmbari);
    confHue.set("hadoop.job.ugi","hdfs");
    confAmbari.set("hadoop.security.authentication","Kerberos");
    confHue.set("hadoop.security.authentication","Kerberos");
    UserGroupInformation.setConfiguration(confAmbari);
    UserGroupInformation proxyUser;
    proxyUser=UserGroupInformation.createRemoteUser(pricipalName);
    UserGroupInformation ugi=UserGroupInformation.createProxyUser("hdfs",proxyUser);
    ugi.doAs(new PrivilegedExceptionAction<Void>(){
      public Void run() throws Exception {
        FileSystem fileSystemAmbari=FileSystem.get(confAmbari);
        FileSystem fileSystemHue=FileSystem.get(confHue);
        String filename=source.substring(source.lastIndexOf('/') + 1,source.length());
        String dest1;
        if (dest.charAt(dest.length() - 1) != '/') {
          dest1=dest + "/" + filename;
        }
 else {
          dest1=dest + filename;
        }
        Path path1=new Path(source);
        FSDataInputStream in1=fileSystemHue.open(path1);
        Path path=new Path(dest1);
        if (fileSystemAmbari.exists(path)) {
        }
        FSDataOutputStream out=fileSystemAmbari.create(path);
        byte[] b=new byte[1024];
        int numBytes=0;
        while ((numBytes=in1.read(b)) > 0) {
          out.write(b,0,numBytes);
        }
        in1.close();
        out.close();
        fileSystemAmbari.setOwner(path,username,"hadoop");
        fileSystemAmbari.close();
        return null;
      }
    }
);
  }
 catch (  Exception e) {
    logger.error("Webhdfs exception: ",e);
  }
}
