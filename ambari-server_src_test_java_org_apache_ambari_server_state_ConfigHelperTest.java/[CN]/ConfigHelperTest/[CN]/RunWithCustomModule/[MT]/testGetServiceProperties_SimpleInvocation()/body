{
  Cluster mockCluster=createStrictMock(Cluster.class);
  StackId mockStackVersion=createStrictMock(StackId.class);
  AmbariMetaInfo mockAmbariMetaInfo=injector.getInstance(AmbariMetaInfo.class);
  ServiceInfo mockServiceInfo=createStrictMock(ServiceInfo.class);
  PropertyInfo mockPropertyInfo1=createStrictMock(PropertyInfo.class);
  PropertyInfo mockPropertyInfo2=createStrictMock(PropertyInfo.class);
  List<PropertyInfo> serviceProperties=Arrays.asList(mockPropertyInfo1,mockPropertyInfo2);
  expect(mockCluster.getCurrentStackVersion()).andReturn(mockStackVersion).once();
  expect(mockStackVersion.getStackName()).andReturn("HDP").once();
  expect(mockStackVersion.getStackVersion()).andReturn("2.2").once();
  expect(mockAmbariMetaInfo.getService("HDP","2.2","SERVICE")).andReturn(mockServiceInfo).once();
  expect(mockServiceInfo.getProperties()).andReturn(serviceProperties).once();
  replay(mockAmbariMetaInfo,mockCluster,mockStackVersion,mockServiceInfo,mockPropertyInfo1,mockPropertyInfo2);
  mockAmbariMetaInfo.init();
  Set<PropertyInfo> result=injector.getInstance(ConfigHelper.class).getServiceProperties(mockCluster,"SERVICE");
  Assert.assertNotNull(result);
  Assert.assertEquals(2,result.size());
  verify(mockAmbariMetaInfo,mockCluster,mockStackVersion,mockServiceInfo,mockPropertyInfo1,mockPropertyInfo2);
}
