{
  final Config config1=new ConfigImpl("core-site");
  config1.setTag("version122");
  Map<String,String> attributes=new HashMap<String,String>();
  attributes.put("fs.trash.interval","11");
  attributes.put("b","y");
  Map<String,Map<String,String>> config1Attributes=new HashMap<String,Map<String,String>>();
  config1Attributes.put("attribute1",attributes);
  config1.setPropertiesAttributes(config1Attributes);
  final Config config2=new ConfigImpl("global");
  config2.setTag("version122");
  attributes=new HashMap<String,String>();
  attributes.put("namenode_heapsize","z");
  attributes.put("c","q");
  Map<String,Map<String,String>> config2Attributes=new HashMap<String,Map<String,String>>();
  config2Attributes.put("attribute2",attributes);
  config2.setPropertiesAttributes(config2Attributes);
  Long groupId=addConfigGroup("g1","t1",new ArrayList<String>(){
{
      add("h1");
    }
  }
,new ArrayList<Config>(){
{
      add(config1);
      add(config2);
    }
  }
);
  Assert.assertNotNull(groupId);
  Map<String,Map<String,Map<String,String>>> effectiveAttributes=configHelper.getEffectiveConfigAttributes(cluster,configHelper.getEffectiveDesiredTags(cluster,"h1"));
  Assert.assertNotNull(effectiveAttributes);
  Assert.assertEquals(3,effectiveAttributes.size());
  Assert.assertTrue(effectiveAttributes.containsKey("global"));
  Map<String,Map<String,String>> globalAttrs=effectiveAttributes.get("global");
  Assert.assertEquals(1,globalAttrs.size());
  Assert.assertTrue(globalAttrs.containsKey("attribute2"));
  Map<String,String> attribute2Occurances=globalAttrs.get("attribute2");
  Assert.assertEquals(3,attribute2Occurances.size());
  Assert.assertTrue(attribute2Occurances.containsKey("namenode_heapsize"));
  Assert.assertEquals("z",attribute2Occurances.get("namenode_heapsize"));
  Assert.assertTrue(attribute2Occurances.containsKey("dfs_namenode_name_dir"));
  Assert.assertEquals("3",attribute2Occurances.get("dfs_namenode_name_dir"));
  Assert.assertTrue(attribute2Occurances.containsKey("c"));
  Assert.assertEquals("q",attribute2Occurances.get("c"));
  Assert.assertTrue(effectiveAttributes.containsKey("core-site"));
  Map<String,Map<String,String>> coreAttrs=effectiveAttributes.get("core-site");
  Assert.assertEquals(1,coreAttrs.size());
  Assert.assertTrue(coreAttrs.containsKey("attribute1"));
  Map<String,String> attribute1Occurances=coreAttrs.get("attribute1");
  Assert.assertEquals(3,attribute1Occurances.size());
  Assert.assertTrue(attribute1Occurances.containsKey("ipc.client.connect.max.retries"));
  Assert.assertEquals("1",attribute1Occurances.get("ipc.client.connect.max.retries"));
  Assert.assertTrue(attribute1Occurances.containsKey("fs.trash.interval"));
  Assert.assertEquals("11",attribute1Occurances.get("fs.trash.interval"));
  Assert.assertTrue(attribute1Occurances.containsKey("b"));
  Assert.assertEquals("y",attribute1Occurances.get("b"));
}
