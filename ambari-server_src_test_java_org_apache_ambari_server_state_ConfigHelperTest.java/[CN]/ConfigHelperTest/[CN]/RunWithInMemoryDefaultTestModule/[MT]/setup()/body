{
  SecurityContextHolder.getContext().setAuthentication(TestAuthenticationFactory.createAdministrator("admin"));
  injector=Guice.createInjector(new InMemoryDefaultTestModule());
  injector.getInstance(GuiceJpaInitializer.class);
  clusters=injector.getInstance(Clusters.class);
  configGroupFactory=injector.getInstance(ConfigGroupFactory.class);
  configHelper=injector.getInstance(ConfigHelper.class);
  managementController=injector.getInstance(AmbariManagementController.class);
  metaInfo=injector.getInstance(AmbariMetaInfo.class);
  clusterName="c1";
  clusters.addCluster(clusterName,new StackId("HDP-2.0.6"));
  cluster=clusters.getCluster(clusterName);
  Assert.assertNotNull(cluster);
  clusters.addHost("h1");
  clusters.addHost("h2");
  Assert.assertNotNull(clusters.getHost("h1"));
  Assert.assertNotNull(clusters.getHost("h2"));
  clusters.getHost("h1").persist();
  clusters.getHost("h2").persist();
  ConfigurationRequest cr=new ConfigurationRequest();
  cr.setClusterName(clusterName);
  cr.setType("core-site");
  cr.setVersionTag("version1");
  cr.setProperties(new HashMap<String,String>(){
{
      put("ipc.client.connect.max.retries","30");
      put("fs.trash.interval","30");
    }
  }
);
  cr.setPropertiesAttributes(new HashMap<String,Map<String,String>>(){
{
      Map<String,String> attrs=new HashMap<String,String>();
      attrs.put("ipc.client.connect.max.retries","1");
      attrs.put("fs.trash.interval","2");
      put("attribute1",attrs);
    }
  }
);
  final ClusterRequest clusterRequest1=new ClusterRequest(cluster.getClusterId(),clusterName,cluster.getDesiredStackVersion().getStackVersion(),null);
  clusterRequest1.setDesiredConfig(Collections.singletonList(cr));
  managementController.updateClusters(new HashSet<ClusterRequest>(){
{
      add(clusterRequest1);
    }
  }
,null);
  ConfigurationRequest cr2=new ConfigurationRequest();
  cr2.setClusterName(clusterName);
  cr2.setType("flume-conf");
  cr2.setVersionTag("version1");
  final ClusterRequest clusterRequest2=new ClusterRequest(cluster.getClusterId(),clusterName,cluster.getDesiredStackVersion().getStackVersion(),null);
  clusterRequest2.setDesiredConfig(Collections.singletonList(cr2));
  managementController.updateClusters(new HashSet<ClusterRequest>(){
{
      add(clusterRequest2);
    }
  }
,null);
  cr.setType("global");
  cr.setVersionTag("version1");
  cr.setProperties(new HashMap<String,String>(){
{
      put("dfs_namenode_name_dir","/hadoop/hdfs/namenode");
      put("namenode_heapsize","1024");
    }
  }
);
  cr.setPropertiesAttributes(new HashMap<String,Map<String,String>>(){
{
      Map<String,String> attrs=new HashMap<String,String>();
      attrs.put("dfs_namenode_name_dir","3");
      attrs.put("namenode_heapsize","4");
      put("attribute2",attrs);
    }
  }
);
  final ClusterRequest clusterRequest3=new ClusterRequest(cluster.getClusterId(),clusterName,cluster.getDesiredStackVersion().getStackVersion(),null);
  clusterRequest3.setDesiredConfig(Collections.singletonList(cr));
  managementController.updateClusters(new HashSet<ClusterRequest>(){
{
      add(clusterRequest3);
    }
  }
,null);
  ConfigurationRequest cr4=new ConfigurationRequest();
  cr4.setClusterName(clusterName);
  cr4.setType("oozie-site");
  cr4.setVersionTag("version1");
  cr4.setProperties(new HashMap<String,String>(){
{
      put("oozie.authentication.type","simple");
      put("oozie.service.HadoopAccessorService.kerberos.enabled","false");
    }
  }
);
  cr4.setPropertiesAttributes(null);
  final ClusterRequest clusterRequest4=new ClusterRequest(cluster.getClusterId(),clusterName,cluster.getDesiredStackVersion().getStackVersion(),null);
  clusterRequest4.setDesiredConfig(Collections.singletonList(cr4));
  managementController.updateClusters(new HashSet<ClusterRequest>(){
{
      add(clusterRequest4);
    }
  }
,null);
  Field field=ConfigHelper.class.getDeclaredField("cacheInvalidationExecutor");
  field.setAccessible(true);
  field.set(configHelper,new SynchronousThreadPoolExecutor());
}
