{
  Map<String,HostConfig> schReturn=new HashMap<String,HostConfig>();
  HostConfig hc=new HostConfig();
  hc.setDefaultVersionTag("version2");
  schReturn.put("flume-conf",hc);
  final ServiceComponentHost sch=createNiceMock(ServiceComponentHost.class);
  expect(sch.getActualConfigs()).andReturn(schReturn).anyTimes();
  expect(sch.getHostName()).andReturn("h1").anyTimes();
  expect(sch.getClusterId()).andReturn(1l).anyTimes();
  expect(sch.getServiceName()).andReturn("FLUME").anyTimes();
  expect(sch.getServiceComponentName()).andReturn("FLUME_HANDLER").anyTimes();
  replay(sch);
  final Config config1=cluster.getDesiredConfigByType("flume-conf");
  applyConfig(new HashMap<String,String>(){
{
      put("property","1");
    }
  }
,"flume-conf","version2");
  final Config config2=cluster.getDesiredConfigByType("flume-conf");
  applyConfig(new HashMap<String,String>(){
{
      put("property","2");
    }
  }
,"flume-conf","version3");
  final Config config3=cluster.getDesiredConfigByType("flume-conf");
  cluster.addDesiredConfig("admin",new HashSet<Config>(){
{
      add(config1);
    }
  }
);
  final AtomicBoolean mustBeStale=new AtomicBoolean();
  mustBeStale.set(false);
  final AtomicBoolean failed=new AtomicBoolean();
  failed.set(false);
  final AtomicBoolean finished=new AtomicBoolean();
  finished.set(false);
  final Lock checkLock=new ReentrantLock();
  Thread parallel=new Thread(new Runnable(){
    @Override public void run(){
      while (!finished.get()) {
        checkLock.lock();
        try {
          boolean isStale=configHelper.isStaleConfigs(sch,null);
          if (mustBeStale.get() != isStale) {
            failed.set(true);
            break;
          }
        }
 catch (        AmbariException e) {
          e.printStackTrace();
        }
 finally {
          checkLock.unlock();
        }
      }
    }
  }
);
  parallel.start();
  Random r=new Random();
  for (int i=0; i < 1000; i++) {
    try {
      checkLock.lock();
switch (r.nextInt(3)) {
case 0:
{
          cluster.addDesiredConfig("admin",new HashSet<Config>(){
{
              add(config1);
            }
          }
);
          mustBeStale.set(true);
          checkLock.unlock();
          break;
        }
case 1:
{
        cluster.addDesiredConfig("admin",new HashSet<Config>(){
{
            add(config2);
          }
        }
);
        mustBeStale.set(false);
        checkLock.unlock();
        break;
      }
case 2:
{
      cluster.addDesiredConfig("admin",new HashSet<Config>(){
{
          add(config3);
        }
      }
);
      mustBeStale.set(true);
      checkLock.unlock();
      break;
    }
}
}
 catch (Exception e) {
checkLock.unlock();
}
if (!parallel.isAlive()) {
break;
}
}
finished.set(true);
parallel.join();
Assert.assertFalse(failed.get());
}
