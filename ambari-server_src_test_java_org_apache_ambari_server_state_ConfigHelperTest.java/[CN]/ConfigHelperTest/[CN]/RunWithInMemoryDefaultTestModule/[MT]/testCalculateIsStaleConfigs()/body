{
  Map<String,HostConfig> schReturn=new HashMap<String,HostConfig>();
  HostConfig hc=new HostConfig();
  hc.setDefaultVersionTag("version2");
  schReturn.put("flume-conf",hc);
  ServiceComponentHost sch=createNiceMock(ServiceComponentHost.class);
  expect(sch.getActualConfigs()).andReturn(schReturn).times(6);
  expect(sch.getHostName()).andReturn("h1").anyTimes();
  expect(sch.getClusterId()).andReturn(1l).anyTimes();
  expect(sch.getServiceName()).andReturn("FLUME").anyTimes();
  expect(sch.getServiceComponentName()).andReturn("FLUME_HANDLER").anyTimes();
  replay(sch);
  Assert.assertTrue(configHelper.isStaleConfigs(sch,null));
  HostConfig hc2=new HostConfig();
  hc2.setDefaultVersionTag("version1");
  schReturn.put("flume-conf",hc2);
  Assert.assertFalse(configHelper.isStaleConfigs(sch,null));
  List<String> hosts=new ArrayList<String>();
  hosts.add("h1");
  List<Config> configs=new ArrayList<Config>();
  ConfigImpl configImpl=new ConfigImpl("flume-conf");
  configImpl.setTag("FLUME1");
  configs.add(configImpl);
  addConfigGroup("configGroup1","FLUME",hosts,configs);
  Assert.assertTrue(configHelper.isStaleConfigs(sch,null));
  HostConfig hc3=new HostConfig();
  hc3.setDefaultVersionTag("version1");
  hc3.getConfigGroupOverrides().put(1l,"FLUME1");
  schReturn.put("flume-conf",hc3);
  Assert.assertFalse(configHelper.isStaleConfigs(sch,null));
  HostConfig hc4=new HostConfig();
  hc4.setDefaultVersionTag("version1");
  hc4.getConfigGroupOverrides().put(1l,"FLUME2");
  schReturn.put("flume-conf",hc4);
  Assert.assertTrue(configHelper.isStaleConfigs(sch,null));
  HostConfig hc5=new HostConfig();
  hc5.setDefaultVersionTag("version3");
  hc5.getConfigGroupOverrides().put(1l,"FLUME1");
  schReturn.put("flume-conf",hc5);
  Assert.assertTrue(configHelper.isStaleConfigs(sch,null));
  verify(sch);
}
