def recommendOozieConfigurations(self, configurations, clusterData, services, hosts):
    oozieSiteProperties = getSiteProperties(services['configurations'], 'oozie-site')
    oozieEnvProperties = getSiteProperties(services['configurations'], 'oozie-env')
    putOozieProperty = self.putProperty(configurations, 'oozie-site', services)
    putOozieEnvProperty = self.putProperty(configurations, 'oozie-env', services)
    if ('FALCON_SERVER' in clusterData['components']):
        putOozieSiteProperty = self.putProperty(configurations, 'oozie-site', services)
        falconUser = None
        if (('falcon-env' in services['configurations']) and ('falcon_user' in services['configurations']['falcon-env']['properties'])):
            falconUser = services['configurations']['falcon-env']['properties']['falcon_user']
            if (falconUser is not None):
                putOozieSiteProperty('oozie.service.ProxyUserService.proxyuser.{0}.groups'.format(falconUser), '*')
                putOozieSiteProperty('oozie.service.ProxyUserService.proxyuser.{0}.hosts'.format(falconUser), '*')
            falconUserOldValue = getOldValue(self, services, 'falcon-env', 'falcon_user')
            if (falconUserOldValue is not None):
                if ('forced-configurations' not in services):
                    services['forced-configurations'] = []
                putOozieSitePropertyAttribute = self.putPropertyAttribute(configurations, 'oozie-site')
                putOozieSitePropertyAttribute('oozie.service.ProxyUserService.proxyuser.{0}.groups'.format(falconUserOldValue), 'delete', 'true')
                putOozieSitePropertyAttribute('oozie.service.ProxyUserService.proxyuser.{0}.hosts'.format(falconUserOldValue), 'delete', 'true')
                services['forced-configurations'].append({'type': 'oozie-site', 'name': 'oozie.service.ProxyUserService.proxyuser.{0}.hosts'.format(falconUserOldValue), })
                services['forced-configurations'].append({'type': 'oozie-site', 'name': 'oozie.service.ProxyUserService.proxyuser.{0}.groups'.format(falconUserOldValue), })
                if (falconUser is not None):
                    services['forced-configurations'].append({'type': 'oozie-site', 'name': 'oozie.service.ProxyUserService.proxyuser.{0}.hosts'.format(falconUser), })
                    services['forced-configurations'].append({'type': 'oozie-site', 'name': 'oozie.service.ProxyUserService.proxyuser.{0}.groups'.format(falconUser), })
        putMapredProperty = self.putProperty(configurations, 'oozie-site')
        putMapredProperty('oozie.services.ext', (('org.apache.oozie.service.JMSAccessorService,' + 'org.apache.oozie.service.PartitionDependencyManagerService,') + 'org.apache.oozie.service.HCatAccessorService'))
    if (oozieEnvProperties and oozieSiteProperties and self.checkSiteProperties(oozieSiteProperties, 'oozie.service.JPAService.jdbc.driver') and self.checkSiteProperties(oozieEnvProperties, 'oozie_database')):
        putOozieProperty('oozie.service.JPAService.jdbc.driver', self.getDBDriver(oozieEnvProperties['oozie_database']))
    if (oozieSiteProperties and oozieEnvProperties and self.checkSiteProperties(oozieSiteProperties, 'oozie.db.schema.name', 'oozie.service.JPAService.jdbc.url') and self.checkSiteProperties(oozieEnvProperties, 'oozie_database')):
        oozieServerHost = self.getHostWithComponent('OOZIE', 'OOZIE_SERVER', services, hosts)
        oozieDBConnectionURL = oozieSiteProperties['oozie.service.JPAService.jdbc.url']
        protocol = self.getProtocol(oozieEnvProperties['oozie_database'])
        oldSchemaName = getOldValue(self, services, 'oozie-site', 'oozie.db.schema.name')
        if (oozieServerHost is not None):
            if (oldSchemaName or (protocol and oozieDBConnectionURL and (not oozieDBConnectionURL.startswith(protocol)))):
                dbConnection = self.getDBConnectionString(oozieEnvProperties['oozie_database']).format(oozieServerHost['Hosts']['host_name'], oozieSiteProperties['oozie.db.schema.name'])
                putOozieProperty('oozie.service.JPAService.jdbc.url', dbConnection)
