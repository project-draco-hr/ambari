def upgrade_schema(self, env):
    "\n    Executes the schema upgrade binary.  This is its own function because it could\n    be called as a standalone task from the upgrade pack, but is safe to run it for each\n    metastore instance. The schema upgrade on an already upgraded metastore is a NOOP.\n\n    The metastore schema upgrade requires a database driver library for most\n    databases. During an upgrade, it's possible that the library is not present,\n    so this will also attempt to copy/download the appropriate driver.\n\n    This function will also ensure that configurations are written out to disk before running\n    since the new configs will most likely not yet exist on an upgrade.\n\n    Should not be invoked for a DOWNGRADE; Metastore only supports schema upgrades.\n    "
    Logger.info('Upgrading Hive Metastore Schema')
    import params
    env.set_params(params)
    self.configure(env)
    if params.security_enabled:
        kinit_command = format('{kinit_path_local} -kt {smoke_user_keytab} {smokeuser_principal}; ')
        Execute(kinit_command, user=params.smokeuser)
    if (params.hive_jdbc_driver in params.hive_jdbc_drivers_list):
        target_directory = format('{stack_root}/{version}/hive/lib')
        if (not os.path.exists(params.source_jdbc_file)):
            jdbc_connector()
        target_directory_and_filename = os.path.join(target_directory, os.path.basename(params.source_jdbc_file))
        if params.sqla_db_used:
            target_native_libs_directory = format('{target_directory}/native/lib64')
            Execute(format('yes | {sudo} cp {jars_in_hive_lib} {target_directory}'))
            Directory(target_native_libs_directory, create_parents=True)
            Execute(format('yes | {sudo} cp {libs_in_hive_lib} {target_native_libs_directory}'))
            Execute(format('{sudo} chown -R {hive_user}:{user_group} {hive_lib}/*'))
        elif (not os.path.exists(target_directory_and_filename)):
            Execute(('cp', params.source_jdbc_file, target_directory), path=['/bin', '/usr/bin/'], sudo=True)
        File(target_directory_and_filename, mode=420)
    binary = format('{stack_root}/{version}/hive/bin/schematool')
    schematool_hive_server_conf_dir = params.hive_server_conf_dir
    if (params.current_version is not None):
        current_version = format_stack_version(params.current_version)
        if (not check_stack_feature(StackFeature.CONFIG_VERSIONING, current_version)):
            schematool_hive_server_conf_dir = LEGACY_HIVE_SERVER_CONF
    env_dict = {'HIVE_CONF_DIR': schematool_hive_server_conf_dir, }
    command = format('{binary} -dbType {hive_metastore_db_type} -upgradeSchema')
    Execute(command, user=params.hive_user, tries=1, environment=env_dict, logoutput=True)
