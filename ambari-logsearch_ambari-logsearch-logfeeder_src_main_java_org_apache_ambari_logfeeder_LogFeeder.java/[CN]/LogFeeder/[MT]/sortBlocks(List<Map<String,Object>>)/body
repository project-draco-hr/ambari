{
  Collections.sort(blockList,new Comparator<Map<String,Object>>(){
    @Override public int compare(    Map<String,Object> o1,    Map<String,Object> o2){
      Object o1Sort=o1.get("sort_order");
      Object o2Sort=o2.get("sort_order");
      if (o1Sort == null) {
        return 0;
      }
      if (o2Sort == null) {
        return 0;
      }
      int o1Value=0;
      if (!(o1Sort instanceof Number)) {
        try {
          o1Value=(new Double(Double.parseDouble(o1Sort.toString()))).intValue();
        }
 catch (        Throwable t) {
          logger.error("Value is not of type Number. class=" + o1Sort.getClass().getName() + ", value="+ o1Sort.toString()+ ", map="+ o1.toString());
        }
      }
 else {
        o1Value=((Number)o1Sort).intValue();
      }
      int o2Value=0;
      if (!(o2Sort instanceof Integer)) {
        try {
          o2Value=(new Double(Double.parseDouble(o2Sort.toString()))).intValue();
        }
 catch (        Throwable t) {
          logger.error("Value is not of type Number. class=" + o2Sort.getClass().getName() + ", value="+ o2Sort.toString()+ ", map="+ o2.toString());
        }
      }
 else {
      }
      return o1Value - o2Value;
    }
  }
);
}
