{
  LogFeederUtil.loadProperties("logfeeder.properties",inputParams);
  String configFiles=LogFeederUtil.getStringProperty("logfeeder.config.files");
  logger.info("logfeeder.config.files=" + configFiles);
  String[] configFileList=null;
  if (configFiles != null) {
    configFileList=configFiles.split(",");
  }
  String[] cmdLineConfigs=getConfigFromCmdLine();
  String mergedConfigList[]=LogFeederUtil.mergeArray(configFileList,cmdLineConfigs);
  if (mergedConfigList == null || mergedConfigList.length == 0) {
    mergedConfigList=LogFeederUtil.getStringProperty("config.file","config.json").split(",");
  }
  for (  String configFileName : mergedConfigList) {
    logger.info("Going to load config file:" + configFileName);
    configFileName=configFileName.replace("\\ ","%20");
    File configFile=new File(configFileName);
    if (configFile.exists() && configFile.isFile()) {
      logger.info("Config file exists in path." + configFile.getAbsolutePath());
      loadConfigsUsingFile(configFile);
    }
 else {
      logger.info("Trying to load config file from classloader: " + configFileName);
      loadConfigsUsingClassLoader(configFileName);
      logger.info("Loaded config file from classloader: " + configFileName);
    }
  }
  mergeAllConfigs();
  LogfeederScheduler.INSTANCE.start();
  outMgr.setOutputList(outputList);
  for (  Output output : outputList) {
    output.init();
  }
  inputMgr.init();
  metricsMgr.init();
  logger.debug("==============");
}
