{
  Collections.sort(filterConfigList,new Comparator<Map<String,Object>>(){
    @Override public int compare(    Map<String,Object> o1,    Map<String,Object> o2){
      Object o1Sort=o1.get("sort_order");
      Object o2Sort=o2.get("sort_order");
      if (o1Sort == null || o2Sort == null) {
        return 0;
      }
      int o1Value=parseSort(o1,o1Sort);
      int o2Value=parseSort(o2,o2Sort);
      return o1Value - o2Value;
    }
    private int parseSort(    Map<String,Object> map,    Object o){
      if (!(o instanceof Number)) {
        try {
          return (new Double(Double.parseDouble(o.toString()))).intValue();
        }
 catch (        Throwable t) {
          LOG.error("Value is not of type Number. class=" + o.getClass().getName() + ", value="+ o.toString()+ ", map="+ map.toString());
          return 0;
        }
      }
 else {
        return ((Number)o).intValue();
      }
    }
  }
);
}
