{
  Map<String,Cluster> clusterMap=clusters.getClusters();
  if (null == clusterMap || clusterMap.size() == 0) {
    return;
  }
  for (  Cluster cluster : clusterMap.values()) {
    long clusterId=cluster.getClusterId();
    StackId stackId=cluster.getDesiredStackVersion();
    StackInfo stackInfo=getStack(stackId.getStackName(),stackId.getStackVersion());
    Collection<ServiceInfo> stackServices=stackInfo.getServices();
    Map<String,ServiceInfo> stackServiceMap=new HashMap<String,ServiceInfo>();
    Map<String,ComponentInfo> stackComponentMap=new HashMap<String,ComponentInfo>();
    for (    ServiceInfo stackService : stackServices) {
      stackServiceMap.put(stackService.getName(),stackService);
      List<ComponentInfo> components=stackService.getComponents();
      for (      ComponentInfo component : components) {
        stackComponentMap.put(component.getName(),component);
      }
    }
    Map<String,Service> clusterServiceMap=cluster.getServices();
    Set<String> clusterServiceNames=clusterServiceMap.keySet();
    List<AlertDefinition> stackDefinitions=new ArrayList<AlertDefinition>(50);
    for (    String clusterServiceName : clusterServiceNames) {
      ServiceInfo stackService=stackServiceMap.get(clusterServiceName);
      if (null == stackService) {
        continue;
      }
      Set<AlertDefinition> serviceDefinitions=getAlertDefinitions(stackService);
      stackDefinitions.addAll(serviceDefinitions);
    }
    List<AlertDefinitionEntity> persist=new ArrayList<AlertDefinitionEntity>();
    List<AlertDefinitionEntity> entities=alertDefinitionDao.findAll(clusterId);
    Map<String,AlertDefinitionEntity> mappedEntities=new HashMap<String,AlertDefinitionEntity>(100);
    for (    AlertDefinitionEntity entity : entities) {
      mappedEntities.put(entity.getDefinitionName(),entity);
    }
    for (    AlertDefinition stackDefinition : stackDefinitions) {
      AlertDefinitionEntity entity=mappedEntities.get(stackDefinition.getName());
      if (null == entity) {
        entity=alertDefinitionFactory.coerce(clusterId,stackDefinition);
        persist.add(entity);
        continue;
      }
      AlertDefinition databaseDefinition=alertDefinitionFactory.coerce(entity);
      if (!stackDefinition.deeplyEquals(databaseDefinition)) {
        LOG.debug("The alert named {} has been modified from the stack definition and will not be merged",stackDefinition.getName());
      }
    }
    List<AlertDefinition> agentDefinitions=ambariServiceAlertDefinitions.getAgentDefinitions();
    for (    AlertDefinition agentDefinition : agentDefinitions) {
      AlertDefinitionEntity entity=mappedEntities.get(agentDefinition.getName());
      if (null == entity) {
        entity=alertDefinitionFactory.coerce(clusterId,agentDefinition);
        persist.add(entity);
      }
    }
    List<AlertDefinition> serverDefinitions=ambariServiceAlertDefinitions.getServerDefinitions();
    for (    AlertDefinition serverDefinition : serverDefinitions) {
      AlertDefinitionEntity entity=mappedEntities.get(serverDefinition.getName());
      if (null == entity) {
        entity=alertDefinitionFactory.coerce(clusterId,serverDefinition);
        persist.add(entity);
      }
    }
    for (    AlertDefinitionEntity entity : persist) {
      if (LOG.isDebugEnabled()) {
        LOG.info("Merging Alert Definition {} into the database",entity.getDefinitionName());
      }
      alertDefinitionDao.createOrUpdate(entity);
    }
    for (    AlertDefinitionEntity def : alertDefinitionDao.findAll(cluster.getClusterId())) {
      AlertDefinition realDef=alertDefinitionFactory.coerce(def);
      AlertDefinitionRegistrationEvent event=new AlertDefinitionRegistrationEvent(cluster.getClusterId(),realDef);
      eventPublisher.publish(event);
    }
    List<AlertDefinitionEntity> definitions=alertDefinitionDao.findAllEnabled(clusterId);
    List<AlertDefinitionEntity> definitionsToDisable=new ArrayList<AlertDefinitionEntity>();
    for (    AlertDefinitionEntity definition : definitions) {
      String serviceName=definition.getServiceName();
      String componentName=definition.getComponentName();
      if (Services.AMBARI.name().equals(serviceName)) {
        continue;
      }
      if (!stackServiceMap.containsKey(serviceName)) {
        LOG.info("The {} service has been marked as deleted for stack {}, disabling alert {}",serviceName,stackId,definition.getDefinitionName());
        definitionsToDisable.add(definition);
      }
 else       if (null != componentName && !stackComponentMap.containsKey(componentName)) {
        LOG.info("The {} component {} has been marked as deleted for stack {}, disabling alert {}",serviceName,componentName,stackId,definition.getDefinitionName());
        definitionsToDisable.add(definition);
      }
    }
    for (    AlertDefinitionEntity definition : definitionsToDisable) {
      definition.setEnabled(false);
      alertDefinitionDao.merge(definition);
      AlertDefinitionDisabledEvent event=new AlertDefinitionDisabledEvent(clusterId,definition.getDefinitionId());
      eventPublisher.publish(event);
    }
  }
}
