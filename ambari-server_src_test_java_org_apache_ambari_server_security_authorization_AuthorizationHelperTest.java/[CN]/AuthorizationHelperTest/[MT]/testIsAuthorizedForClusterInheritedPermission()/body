{
  ResourceTypeEntity clusterResourceTypeEntity=new ResourceTypeEntity();
  clusterResourceTypeEntity.setId(1);
  clusterResourceTypeEntity.setName(ResourceType.CLUSTER.name());
  ResourceEntity clusterResourceEntity=new ResourceEntity();
  clusterResourceEntity.setResourceType(clusterResourceTypeEntity);
  clusterResourceEntity.setId(1L);
  PermissionEntity clusterPermissionEntity=new PermissionEntity();
  clusterPermissionEntity.setPermissionName("CLUSTER.ADMINISTRATOR");
  RoleAuthorizationEntity readOnlyRoleAuthorizationEntity=new RoleAuthorizationEntity();
  readOnlyRoleAuthorizationEntity.setAuthorizationId(RoleAuthorization.CLUSTER_VIEW_METRICS.getId());
  RoleAuthorizationEntity privilegedRoleAuthorizationEntity=new RoleAuthorizationEntity();
  privilegedRoleAuthorizationEntity.setAuthorizationId(RoleAuthorization.CLUSTER_TOGGLE_KERBEROS.getId());
  clusterPermissionEntity.setAuthorizations(Arrays.asList(readOnlyRoleAuthorizationEntity,privilegedRoleAuthorizationEntity));
  PrivilegeEntity clusterPrivilegeEntity=new PrivilegeEntity();
  clusterPrivilegeEntity.setPermission(clusterPermissionEntity);
  clusterPrivilegeEntity.setResource(clusterResourceEntity);
  GrantedAuthority clusterAuthority=new AmbariGrantedAuthority(clusterPrivilegeEntity);
  Authentication clusterUser=new TestAuthentication(Collections.singleton(clusterAuthority));
  Provider viewInstanceDAOProvider=createNiceMock(Provider.class);
  Provider privilegeDAOProvider=createNiceMock(Provider.class);
  ViewInstanceDAO viewInstanceDAO=createNiceMock(ViewInstanceDAO.class);
  PrivilegeDAO privilegeDAO=createNiceMock(PrivilegeDAO.class);
  ViewInstanceEntity viewInstanceEntity=createNiceMock(ViewInstanceEntity.class);
  expect(viewInstanceEntity.getClusterHandle()).andReturn("c1").anyTimes();
  PrivilegeEntity privilegeEntity=createNiceMock(PrivilegeEntity.class);
  PrincipalEntity principalEntity=createNiceMock(PrincipalEntity.class);
  PrincipalTypeEntity principalTypeEntity=createNiceMock(PrincipalTypeEntity.class);
  expect(viewInstanceDAOProvider.get()).andReturn(viewInstanceDAO).anyTimes();
  expect(privilegeDAOProvider.get()).andReturn(privilegeDAO).anyTimes();
  expect(viewInstanceDAO.findByResourceId(2L)).andReturn(viewInstanceEntity).anyTimes();
  expect(privilegeDAO.findByResourceId(2L)).andReturn(Lists.newArrayList(privilegeEntity)).anyTimes();
  expect(principalTypeEntity.getName()).andReturn("ALL.CLUSTER.ADMINISTRATOR").anyTimes();
  expect(principalEntity.getPrincipalType()).andReturn(principalTypeEntity).anyTimes();
  expect(privilegeEntity.getPrincipal()).andReturn(principalEntity).anyTimes();
  replayAll();
  AuthorizationHelper.viewInstanceDAOProvider=viewInstanceDAOProvider;
  AuthorizationHelper.privilegeDAOProvider=privilegeDAOProvider;
  SecurityContext context=SecurityContextHolder.getContext();
  context.setAuthentication(clusterUser);
  assertTrue(AuthorizationHelper.isAuthorized(ResourceType.VIEW,2L,EnumSet.of(RoleAuthorization.VIEW_USE)));
}
