{
  RoleAuthorizationEntity readOnlyRoleAuthorizationEntity=new RoleAuthorizationEntity();
  readOnlyRoleAuthorizationEntity.setAuthorizationId(RoleAuthorization.CLUSTER_VIEW_METRICS.getId());
  RoleAuthorizationEntity privilegedRoleAuthorizationEntity=new RoleAuthorizationEntity();
  privilegedRoleAuthorizationEntity.setAuthorizationId(RoleAuthorization.CLUSTER_TOGGLE_KERBEROS.getId());
  RoleAuthorizationEntity administratorRoleAuthorizationEntity=new RoleAuthorizationEntity();
  administratorRoleAuthorizationEntity.setAuthorizationId(RoleAuthorization.AMBARI_MANAGE_USERS.getId());
  ResourceTypeEntity clusterResourceTypeEntity=new ResourceTypeEntity();
  clusterResourceTypeEntity.setId(1);
  clusterResourceTypeEntity.setName(ResourceType.CLUSTER.name());
  ResourceTypeEntity cluster2ResourceTypeEntity=new ResourceTypeEntity();
  cluster2ResourceTypeEntity.setId(2);
  cluster2ResourceTypeEntity.setName(ResourceType.CLUSTER.name());
  ResourceEntity clusterResourceEntity=new ResourceEntity();
  clusterResourceEntity.setResourceType(clusterResourceTypeEntity);
  clusterResourceEntity.setId(1L);
  ResourceEntity cluster2ResourceEntity=new ResourceEntity();
  cluster2ResourceEntity.setResourceType(cluster2ResourceTypeEntity);
  cluster2ResourceEntity.setId(2L);
  PermissionEntity readOnlyPermissionEntity=new PermissionEntity();
  readOnlyPermissionEntity.setAuthorizations(Collections.singleton(readOnlyRoleAuthorizationEntity));
  PermissionEntity privilegedPermissionEntity=new PermissionEntity();
  privilegedPermissionEntity.setAuthorizations(Arrays.asList(readOnlyRoleAuthorizationEntity,privilegedRoleAuthorizationEntity));
  PermissionEntity administratorPermissionEntity=new PermissionEntity();
  administratorPermissionEntity.setAuthorizations(Arrays.asList(readOnlyRoleAuthorizationEntity,privilegedRoleAuthorizationEntity,administratorRoleAuthorizationEntity));
  PrivilegeEntity readOnlyPrivilegeEntity=new PrivilegeEntity();
  readOnlyPrivilegeEntity.setPermission(readOnlyPermissionEntity);
  readOnlyPrivilegeEntity.setResource(clusterResourceEntity);
  PrivilegeEntity readOnly2PrivilegeEntity=new PrivilegeEntity();
  readOnly2PrivilegeEntity.setPermission(readOnlyPermissionEntity);
  readOnly2PrivilegeEntity.setResource(cluster2ResourceEntity);
  PrivilegeEntity privilegedPrivilegeEntity=new PrivilegeEntity();
  privilegedPrivilegeEntity.setPermission(privilegedPermissionEntity);
  privilegedPrivilegeEntity.setResource(clusterResourceEntity);
  PrivilegeEntity privileged2PrivilegeEntity=new PrivilegeEntity();
  privileged2PrivilegeEntity.setPermission(privilegedPermissionEntity);
  privileged2PrivilegeEntity.setResource(cluster2ResourceEntity);
  PrivilegeEntity administratorPrivilegeEntity=new PrivilegeEntity();
  administratorPrivilegeEntity.setPermission(administratorPermissionEntity);
  administratorPrivilegeEntity.setResource(clusterResourceEntity);
  GrantedAuthority readOnlyAuthority=new AmbariGrantedAuthority(readOnlyPrivilegeEntity);
  GrantedAuthority readOnly2Authority=new AmbariGrantedAuthority(readOnly2PrivilegeEntity);
  GrantedAuthority privilegedAuthority=new AmbariGrantedAuthority(privilegedPrivilegeEntity);
  GrantedAuthority privileged2Authority=new AmbariGrantedAuthority(privileged2PrivilegeEntity);
  GrantedAuthority administratorAuthority=new AmbariGrantedAuthority(administratorPrivilegeEntity);
  Authentication noAccessUser=new TestAuthentication(Collections.<AmbariGrantedAuthority>emptyList());
  Authentication readOnlyUser=new TestAuthentication(Collections.singleton(readOnlyAuthority));
  Authentication privilegedUser=new TestAuthentication(Arrays.asList(readOnlyAuthority,privilegedAuthority));
  Authentication privileged2User=new TestAuthentication(Arrays.asList(readOnly2Authority,privileged2Authority));
  Authentication administratorUser=new TestAuthentication(Collections.singleton(administratorAuthority));
  SecurityContext context=SecurityContextHolder.getContext();
  assertFalse(AuthorizationHelper.isAuthorized(null,ResourceType.CLUSTER,1L,EnumSet.of(RoleAuthorization.CLUSTER_VIEW_METRICS)));
  assertFalse(AuthorizationHelper.isAuthorized(ResourceType.CLUSTER,1L,EnumSet.of(RoleAuthorization.CLUSTER_VIEW_METRICS)));
  assertFalse(AuthorizationHelper.isAuthorized(noAccessUser,ResourceType.CLUSTER,1L,EnumSet.of(RoleAuthorization.CLUSTER_VIEW_METRICS)));
  assertFalse(AuthorizationHelper.isAuthorized(noAccessUser,ResourceType.CLUSTER,1L,EnumSet.of(RoleAuthorization.CLUSTER_TOGGLE_KERBEROS)));
  assertFalse(AuthorizationHelper.isAuthorized(noAccessUser,ResourceType.CLUSTER,1L,EnumSet.of(RoleAuthorization.AMBARI_MANAGE_USERS)));
  assertTrue(AuthorizationHelper.isAuthorized(readOnlyUser,ResourceType.CLUSTER,1L,EnumSet.of(RoleAuthorization.CLUSTER_VIEW_METRICS)));
  assertFalse(AuthorizationHelper.isAuthorized(readOnlyUser,ResourceType.CLUSTER,1L,EnumSet.of(RoleAuthorization.CLUSTER_TOGGLE_KERBEROS)));
  assertFalse(AuthorizationHelper.isAuthorized(readOnlyUser,ResourceType.CLUSTER,1L,EnumSet.of(RoleAuthorization.AMBARI_MANAGE_USERS)));
  assertTrue(AuthorizationHelper.isAuthorized(privilegedUser,ResourceType.CLUSTER,1L,EnumSet.of(RoleAuthorization.CLUSTER_VIEW_METRICS)));
  assertTrue(AuthorizationHelper.isAuthorized(privilegedUser,ResourceType.CLUSTER,1L,EnumSet.of(RoleAuthorization.CLUSTER_TOGGLE_KERBEROS)));
  assertFalse(AuthorizationHelper.isAuthorized(privilegedUser,ResourceType.CLUSTER,1L,EnumSet.of(RoleAuthorization.AMBARI_MANAGE_USERS)));
  assertFalse(AuthorizationHelper.isAuthorized(privileged2User,ResourceType.CLUSTER,1L,EnumSet.of(RoleAuthorization.CLUSTER_VIEW_METRICS)));
  assertFalse(AuthorizationHelper.isAuthorized(privileged2User,ResourceType.CLUSTER,1L,EnumSet.of(RoleAuthorization.CLUSTER_TOGGLE_KERBEROS)));
  assertFalse(AuthorizationHelper.isAuthorized(privileged2User,ResourceType.CLUSTER,1L,EnumSet.of(RoleAuthorization.AMBARI_MANAGE_USERS)));
  assertTrue(AuthorizationHelper.isAuthorized(administratorUser,ResourceType.CLUSTER,1L,EnumSet.of(RoleAuthorization.CLUSTER_VIEW_METRICS)));
  assertTrue(AuthorizationHelper.isAuthorized(administratorUser,ResourceType.CLUSTER,1L,EnumSet.of(RoleAuthorization.CLUSTER_TOGGLE_KERBEROS)));
  assertTrue(AuthorizationHelper.isAuthorized(administratorUser,ResourceType.CLUSTER,1L,EnumSet.of(RoleAuthorization.AMBARI_MANAGE_USERS)));
  context.setAuthentication(noAccessUser);
  assertFalse(AuthorizationHelper.isAuthorized(ResourceType.CLUSTER,1L,EnumSet.of(RoleAuthorization.CLUSTER_VIEW_METRICS)));
  assertFalse(AuthorizationHelper.isAuthorized(ResourceType.CLUSTER,1L,EnumSet.of(RoleAuthorization.CLUSTER_TOGGLE_KERBEROS)));
  assertFalse(AuthorizationHelper.isAuthorized(ResourceType.CLUSTER,1L,EnumSet.of(RoleAuthorization.CLUSTER_TOGGLE_KERBEROS)));
  context.setAuthentication(readOnlyUser);
  assertTrue(AuthorizationHelper.isAuthorized(ResourceType.CLUSTER,1L,EnumSet.of(RoleAuthorization.CLUSTER_VIEW_METRICS)));
  assertFalse(AuthorizationHelper.isAuthorized(ResourceType.CLUSTER,1L,EnumSet.of(RoleAuthorization.CLUSTER_TOGGLE_KERBEROS)));
  assertFalse(AuthorizationHelper.isAuthorized(ResourceType.CLUSTER,1L,EnumSet.of(RoleAuthorization.AMBARI_MANAGE_USERS)));
  context.setAuthentication(privilegedUser);
  assertTrue(AuthorizationHelper.isAuthorized(ResourceType.CLUSTER,1L,EnumSet.of(RoleAuthorization.CLUSTER_VIEW_METRICS)));
  assertTrue(AuthorizationHelper.isAuthorized(ResourceType.CLUSTER,1L,EnumSet.of(RoleAuthorization.CLUSTER_TOGGLE_KERBEROS)));
  assertFalse(AuthorizationHelper.isAuthorized(ResourceType.CLUSTER,1L,EnumSet.of(RoleAuthorization.AMBARI_MANAGE_USERS)));
  context.setAuthentication(privileged2User);
  assertFalse(AuthorizationHelper.isAuthorized(ResourceType.CLUSTER,1L,EnumSet.of(RoleAuthorization.CLUSTER_VIEW_METRICS)));
  assertFalse(AuthorizationHelper.isAuthorized(ResourceType.CLUSTER,1L,EnumSet.of(RoleAuthorization.CLUSTER_TOGGLE_KERBEROS)));
  assertFalse(AuthorizationHelper.isAuthorized(ResourceType.CLUSTER,1L,EnumSet.of(RoleAuthorization.AMBARI_MANAGE_USERS)));
  context.setAuthentication(administratorUser);
  assertTrue(AuthorizationHelper.isAuthorized(ResourceType.CLUSTER,1L,EnumSet.of(RoleAuthorization.CLUSTER_VIEW_METRICS)));
  assertTrue(AuthorizationHelper.isAuthorized(ResourceType.CLUSTER,1L,EnumSet.of(RoleAuthorization.CLUSTER_TOGGLE_KERBEROS)));
  assertTrue(AuthorizationHelper.isAuthorized(ResourceType.CLUSTER,1L,EnumSet.of(RoleAuthorization.AMBARI_MANAGE_USERS)));
}
