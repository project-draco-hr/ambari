def finalize(self):
    '\n    Check any versions in UPGRADING/UPGRADED, ask the user to pick the one they want CURRENT, and all others\n    will go to INSTALLED.\n    This will also update the hostcomponentstate with that version for all components that advertise a version.\n    Further, it will set the upgrade_state to None.\n    Next, it will update the host_version and cluster_version accordingly.\n    And pick the CURRENT cluster version, and change it to INSTALLED.\n    If this was a manual stack upgrade, will need to fix the Current and Desired Stack version.\n    If there are any pending RU requests, will mark them as ABORTED.\n    '
    query = 'SELECT rv.repo_version_id, rv.version, rv.display_name, cv.state FROM cluster_version cv JOIN repo_version rv ON cv.repo_version_id = rv.repo_version_id ORDER BY rv.repo_version_id;'
    self.cursor.execute(query)
    rows = self.cursor.fetchall()
    if ((rows is None) or (len(rows) == 0)):
        Logger.warning('Did not find any Cluster Versions, nothing to do. Query: {0}'.format(query))
        return
    current_cluster_version = self.__get_current_cluster_version()
    if ((current_cluster_version is None) or ('version' not in current_cluster_version)):
        Logger.error('Unable to find a Cluster Version that is CURRENT. Please resolve this with help from support.\n')
        return
    question1 = 'Which Cluster Version would you like to make CURRENT?\n'
    for i in range(0, len(rows)):
        version = rows[i][1]
        state = rows[i][3]
        question1 += '{0}) {1} in state {2}\n'.format((i + 1), version, state)
    answer1 = None
    while (answer1 is None):
        answer1 = self.ask_question(question1, numeric=True)
        if ((answer1 >= 1) and (answer1 <= len(rows))):
            desired_current_version = rows[(answer1 - 1)][1]
            if (current_cluster_version['version'] == desired_current_version):
                Logger.info('Version {0} is already CURRENT, nothing to do.\n'.format(desired_current_version))
            else:
                question2 = 'Will make version {0} CURRENT, and change version {1} to INSTALLED. Is that your final answer?\n1) Yes. I already ran or plan to run "HDFS Finalize".\n2) No\n'.format(desired_current_version, current_cluster_version['version'])
                answer2 = None
                while (answer2 is None):
                    answer2 = self.ask_question(question2, numeric=True)
                    if (answer2 == 1):
                        Logger.info('Your wish is my command!\n')
                        self.__finalize_version(current_cluster_version, desired_current_version)
                    elif (answer2 == 2):
                        Logger.info("Ok, we'll leave it as is.\n")
                    else:
                        Logger.error('Invalid option "{0}", please try again.\n'.format(answer2))
                        answer2 = None
        else:
            Logger.error('Invalid option "{0}", please try again.\n'.format(answer1))
            answer1 = None
