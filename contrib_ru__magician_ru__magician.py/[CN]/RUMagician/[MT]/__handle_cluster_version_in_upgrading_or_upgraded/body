def __handle_cluster_version_in_upgrading_or_upgraded(self, repo_version_id, version, display_name, state):
    '\n    In some cases, installing hdp-select can flip the symlinks, so that restarting components will actually\n    cause them to start on the newer version without the user\'s knowledge.\n    In this case, the version in UPGRADING/UPGRADED has not been used in an upgrade yet, so we must revert\n    to a good known state if the user intends on making an automated RU.\n    Before doing so, the user will have to call "hdp-select set all <current_version>" on all affected hosts.\n    '
    attempted_rolling_upgrade = False
    query1 = "SELECT COUNT(*) FROM upgrade WHERE to_version = '{0}';".format(version)
    self.cursor.execute(query1)
    row = self.cursor.fetchone()
    if (row and (len(row) == 1)):
        attempted_rolling_upgrade = (True if (int(row[0]) > 0) else False)
    else:
        Logger.error('Unable to run query: {0}'.format(query1))
        return
    if (not attempted_rolling_upgrade):
        host_names_already_upgrading = set()
        if (self.compare_versions(self.ambari_version, '2.1.0') < 0):
            query2 = "SELECT hv.host_name, hv.state FROM host_version hv WHERE hv.repo_version_id = {0} AND hv.state IN ('UPGRADING', 'UPGRADED');".format(repo_version_id)
        else:
            query2 = "SELECT h.host_name, hv.state FROM hosts h JOIN host_version hv ON h.host_id = hv.host_id WHERE hv.repo_version_id = {0} AND hv.state IN ('UPGRADING', 'UPGRADED');".format(repo_version_id)
        self.cursor.execute(query2)
        rows = self.cursor.fetchall()
        if (rows and (len(rows) > 0)):
            host_names_already_upgrading = set([row[0] for row in rows if (len(row) == 2)])
        question = None
        answer = None
        if (len(host_names_already_upgrading) > 0):
            question = 'We noticed that you did not launch an Automated Rolling Upgrade to version {0},\nbut its state is {1} and some host(s) are already upgrading to it.\nDid you intend to perform a manual upgrade already?\n1) Yes, I already started changing versions manually. Leave it as is.\n2) No, should not have started yet. Please revert it back to INSTALLED.\n'.format(version, state)
        else:
            question = 'We noticed that you did not launch an Automated Rolling Upgrade to version {0},\nbut its state is {1}.\nDid you intend to perform a manual upgrade?\n1) Yes, I already started changing versions manually. Leave it as is.\n2) No, should not have started yet. Please revert it back to INSTALLED.\n'.format(version, state)
        while (answer is None):
            answer = self.ask_question(question, numeric=True)
            if (answer == 1):
                Logger.info('Ok\n')
            elif (answer == 2):
                current_cluster_version = self.__get_current_cluster_version()
                if ((current_cluster_version is not None) and ('version' in current_cluster_version)):
                    Logger.info('IMPORTANT: We are forcing the Cluster Version and Host Versions back to INSTALLED. Before starting ambari-server,\nplease ensure that all hosts are indeed on the original version, by running "hdp-select set all {0}" on each host.\n'.format(current_cluster_version['version']))
                else:
                    Logger.error('Unable to find a Cluster Version that is CURRENT\n.')
                    return
                statement1 = "UPDATE cluster_version SET state = 'INSTALLED' WHERE repo_version_id = {0} AND state = '{1}';".format(repo_version_id, state)
                statement2 = "UPDATE host_version SET state = 'INSTALLED' WHERE repo_version_id = {0} AND state IN ('UPGRADING', 'UPGRADED');".format(repo_version_id)
                statement3 = "UPDATE hostcomponentstate set version = '{0}' WHERE version = '{1}';".format(current_cluster_version['version'], version)
                statement4 = "UPDATE hostcomponentstate set upgrade_state = 'NONE';"
                Logger.info('Will run update statements:\n{0}\n{1}\n{2}\n{3}\n'.format(statement1, statement2, statement3, statement4))
                self.cursor.execute(statement1)
                self.cursor.execute(statement2)
                self.cursor.execute(statement3)
                self.cursor.execute(statement4)
                self.conn.commit()
            else:
                Logger.error('Invalid option "{0}", please try again.\n'.format(answer))
                answer = None
