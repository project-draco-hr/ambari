def check_all_hosts_current(self, repo_version_id, version_name):
    "\n    Ensure that all of the hosts in the cluster have a state of CURRENT for the host_version that corresponds to the id.\n    :param repo_version_id: repo_version table's repo_version_id column\n    :param version_name: repo_version table's version column\n    "
    if (self.compare_versions(self.ambari_version, '2.1.0') < 0):
        query1 = "SELECT chm.host_name from ClusterHostMapping chm JOIN clusters c ON c.cluster_name = '{0}';".format(self.cluster_name)
    else:
        query1 = "SELECT h.host_name from ClusterHostMapping chm JOIN clusters c ON c.cluster_name = '{0}' JOIN hosts h ON chm.host_id = h.host_id;".format(self.cluster_name)
    if (self.compare_versions(self.ambari_version, '2.1.0') < 0):
        query2 = 'SELECT hv.host_name, hv.state FROM host_version hv WHERE hv.repo_version_id = {0};'.format(repo_version_id)
    else:
        query2 = 'SELECT h.host_name, hv.state FROM hosts h JOIN host_version hv ON h.host_id = hv.host_id WHERE hv.repo_version_id = {0};'.format(repo_version_id)
    host_names = set()
    self.cursor.execute(query1)
    rows = self.cursor.fetchall()
    if self.options.verbose:
        Logger.debug((query1 + '\n'))
    if (rows and (len(rows) > 0)):
        host_names = set([row[0] for row in rows if (len(row) == 1)])
        Logger.debug('Hosts: {0}'.format(', '.join(host_names)))
    host_name_to_state = {}
    hosts_with_repo_version_state_not_in_current = set()
    self.cursor.execute((query2 + '\n'))
    rows = self.cursor.fetchall()
    Logger.debug(query2)
    if (rows and (len(rows) > 0)):
        for row in rows:
            if (len(row) == 2):
                host_name = row[0]
                state = row[1]
                host_name_to_state[host_name] = state
                if (state.upper() != 'CURRENT'):
                    hosts_with_repo_version_state_not_in_current.add(host_name)
    host_names_with_version = set(host_name_to_state.keys())
    host_names_without_version = (host_names - host_names_with_version)
    if (len(host_names) > 0):
        if (len(host_names_without_version) > 0):
            Logger.error('{0} host(s) do not have a Host Version for Repo Version {1}.\nHost(s):\n{2}\n'.format(len(host_names_without_version), version_name, ', '.join(host_names_without_version)))
        if (len(hosts_with_repo_version_state_not_in_current) > 0):
            Logger.error('{0} host(s) have a Host Version for Repo Version {1} but the state is not CURRENT.\nHost(s):\n{2}\n'.format(len(hosts_with_repo_version_state_not_in_current), version_name, ', '.join(hosts_with_repo_version_state_not_in_current)))
        if ((len(host_names_without_version) == 0) and (len(hosts_with_repo_version_state_not_in_current) == 0)):
            Logger.info('Found {0} host(s) in the cluster, and all have a Host Version of CURRENT for Repo Version {1}. Things look good.\n'.format(len(host_names), version_name))
        else:
            Logger.error('Make sure that all of these hosts are heartbeating, that they have the packages installed, the\nhdp-select symlinks are correct, and that the services on these hosts have been restarated.\n')
    pass
