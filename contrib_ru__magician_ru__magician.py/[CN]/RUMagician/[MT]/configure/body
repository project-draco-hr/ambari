def configure(self):
    '\n    Read configurations and ensure can connect to database.\n    '
    self.db_type = DB_TYPE.POSTGRES
    self.db_name = 'ambari'
    self.db_user = 'ambari'
    self.db_password = 'bigdata'
    self.db_host = 'localhost'
    self.db_url = None
    if os.path.exists(AMBARI_PROPERTIES_LOCATION):
        self.ambari_props = self.read_conf_file(AMBARI_PROPERTIES_LOCATION)
        if ('server.jdbc.database' in self.ambari_props):
            self.db_type = self.ambari_props['server.jdbc.database'].upper()
        if ('server.jdbc.database_name' in self.ambari_props):
            self.db_name = self.ambari_props['server.jdbc.database_name']
        if ('server.jdbc.user.name' in self.ambari_props):
            self.db_user = self.ambari_props['server.jdbc.user.name']
        if ('server.jdbc.user.passwd' in self.ambari_props):
            self.db_password = self.read_file(self.ambari_props['server.jdbc.user.passwd'])
        if ('server.jdbc.hostname' in self.ambari_props):
            self.db_host = self.ambari_props['server.jdbc.hostname']
        if ('server.jdbc.url' in self.ambari_props):
            self.db_url = self.ambari_props['server.jdbc.url']
        Logger.info('Using database type: {0}, name: {1}, host: {2}'.format(self.db_type, self.db_name, self.db_host))
        connection_string = "dbname='{0}' user='{1}' host='{2}' password='{3}'".format(self.db_name, self.db_user, self.db_host, self.db_password)
        if (self.db_type == DB_TYPE.POSTGRES):
            try:
                import psycopg2
            except Exception as e:
                Logger.error('Need to install python-psycopg2 package for Postgres DB. E.g., yum install python-psycopg2\n')
                self.terminate()
        elif (self.db_type == DB_TYPE.MYSQL):
            try:
                import pymysql
            except Exception as e:
                Logger.error('Need to install PyMySQL package for Python. E.g., yum install python-setuptools && easy_install pip && pip install PyMySQL\n')
                self.terminate()
        else:
            Logger.error('Unknown database type: {0}.'.format(self.db_type))
            self.terminate()
        self.conn = None
        self.cursor = None
        try:
            Logger.debug('Initializing database connection and cursor.')
            if (self.db_type == DB_TYPE.POSTGRES):
                self.conn = psycopg2.connect(connection_string)
                self.cursor = self.conn.cursor()
            elif (self.db_type == DB_TYPE.MYSQL):
                self.conn = pymysql.connect(self.db_host, self.db_user, self.db_password, self.db_name)
                self.cursor = self.conn.cursor()
            Logger.debug('Created database connection and cursor.')
            self.cursor.execute("SELECT metainfo_key, metainfo_value FROM metainfo WHERE metainfo_key='version';")
            rows = self.cursor.fetchall()
            if (rows and (len(rows) == 1)):
                self.ambari_version = rows[0][1]
                Logger.info('Connected to database!!! Ambari version is {0}\n'.format(self.ambari_version))
                if (self.compare_versions(self.ambari_version, MIN_AMBARI_VERSION) < 0):
                    Logger.error('Must be running Ambari Version {0} or higher.\n'.format(MIN_AMBARI_VERSION))
                    self.terminate()
            else:
                Logger.error('Unable to determine Ambari version.')
                self.terminate()
            self.set_cluster()
        except Exception as e:
            Logger.error('I am unable to connect to the database. Error: {0}\n'.format(e))
            self.terminate()
    else:
        raise Exception('Could not find file {0}'.format(AMBARI_PROPERTIES_LOCATION))
