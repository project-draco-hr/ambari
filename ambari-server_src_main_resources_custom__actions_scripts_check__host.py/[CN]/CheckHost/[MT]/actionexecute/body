def actionexecute(self, env):
    Logger.info('Host checks started.')
    config = Script.get_config()
    tmp_dir = Script.get_tmp_dir()
    report_file_handler_dict = {}
    check_execute_list = config['commandParams']['check_execute_list']
    if (check_execute_list == '*BEFORE_CLEANUP_HOST_CHECKS*'):
        check_execute_list = BEFORE_CLEANUP_HOST_CHECKS
    structured_output = {}
    Logger.info(('Check execute list: ' + str(check_execute_list)))
    if (CHECK_JAVA_HOME in check_execute_list):
        try:
            java_home_check_structured_output = self.execute_java_home_available_check(config)
            structured_output[CHECK_JAVA_HOME] = java_home_check_structured_output
        except Exception as exception:
            Logger.exception(('There was an unexpected error while checking for the Java home location: ' + str(exception)))
            structured_output[CHECK_JAVA_HOME] = {'exit_code': 1, 'message': str(exception), }
    if (CHECK_DB_CONNECTION in check_execute_list):
        try:
            db_connection_check_structured_output = self.execute_db_connection_check(config, tmp_dir)
            structured_output[CHECK_DB_CONNECTION] = db_connection_check_structured_output
        except Exception as exception:
            Logger.exception(('There was an unknown error while checking database connectivity: ' + str(exception)))
            structured_output[CHECK_DB_CONNECTION] = {'exit_code': 1, 'message': str(exception), }
    if (CHECK_HOST_RESOLUTION in check_execute_list):
        try:
            host_resolution_structured_output = self.execute_host_resolution_check(config)
            structured_output[CHECK_HOST_RESOLUTION] = host_resolution_structured_output
        except Exception as exception:
            Logger.exception(('There was an unknown error while checking IP address lookups: ' + str(exception)))
            structured_output[CHECK_HOST_RESOLUTION] = {'exit_code': 1, 'message': str(exception), }
    if (CHECK_LAST_AGENT_ENV in check_execute_list):
        try:
            last_agent_env_structured_output = self.execute_last_agent_env_check()
            structured_output[CHECK_LAST_AGENT_ENV] = last_agent_env_structured_output
        except Exception as exception:
            Logger.exception(('There was an unknown error while checking last host environment details: ' + str(exception)))
            structured_output[CHECK_LAST_AGENT_ENV] = {'exit_code': 1, 'message': str(exception), }
    if ((CHECK_INSTALLED_PACKAGES in check_execute_list) and (CHECK_EXISTING_REPOS in check_execute_list)):
        try:
            (installed_packages, repos) = self.execute_existing_repos_and_installed_packages_check(config)
            structured_output[CHECK_INSTALLED_PACKAGES] = installed_packages
            structured_output[CHECK_EXISTING_REPOS] = repos
        except Exception as exception:
            Logger.exception(('There was an unknown error while checking installed packages and existing repositories: ' + str(exception)))
            structured_output[CHECK_INSTALLED_PACKAGES] = {'exit_code': 1, 'message': str(exception), }
            structured_output[CHECK_EXISTING_REPOS] = {'exit_code': 1, 'message': str(exception), }
    if (CHECK_TRANSPARENT_HUGE_PAGE in check_execute_list):
        try:
            transparent_huge_page_structured_output = self.execute_transparent_huge_page_check(config)
            structured_output[CHECK_TRANSPARENT_HUGE_PAGE] = transparent_huge_page_structured_output
        except Exception as exception:
            Logger.exception(('There was an unknown error while getting transparent huge page data: ' + str(exception)))
            structured_output[CHECK_TRANSPARENT_HUGE_PAGE] = {'exit_code': 1, 'message': str(exception), }
    self.reportFileHandler.writeHostChecksCustomActionsFile(structured_output)
    self.put_structured_out(structured_output)
    error_message = ''
    for check_name in FALLIBLE_CHECKS:
        if ((check_name in structured_output) and ('exit_code' in structured_output[check_name]) and (structured_output[check_name]['exit_code'] != 0)):
            error_message += 'Check {0} was unsuccessful. Exit code: {1}.'.format(check_name, structured_output[check_name]['exit_code'])
            if ('message' in structured_output[check_name]):
                error_message += ' Message: {0}'.format(structured_output[check_name]['message'])
            error_message += '\n'
    Logger.info('Host checks completed.')
    Logger.debug(('Structured output: ' + str(structured_output)))
    if error_message:
        Logger.error(error_message)
        raise Fail(error_message)
