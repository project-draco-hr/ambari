{
  parseCommandLine();
  ClientConfig config=new DefaultClientConfig();
  Client client=Client.create(config);
  WebResource service=client.resource(getBaseURI());
  String location=line.getOptionValue("location");
  String name=line.getOptionValue("name");
  File f=new File(location);
  ClientResponse response=null;
  if (!f.exists()) {
    try {
      URL urlx=new URL(location);
    }
 catch (    MalformedURLException x) {
      System.out.println("Specified location is either a non-existing file path or a malformed URL");
      System.exit(-1);
    }
    Stack bp=new Stack();
    response=service.path("stacks/" + name).queryParam("url",location).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON).put(ClientResponse.class,bp);
  }
 else {
    Stack bp=null;
    if (f.getName().endsWith(".json")) {
      bp=this.readStackFromJSONFile(f);
      response=service.path("stacks/" + name).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON).put(ClientResponse.class,bp);
    }
 else     if (f.getName().endsWith(".xml")) {
      bp=this.readStackFromXMLFile(f);
      response=service.path("stacks/" + name).accept(MediaType.APPLICATION_XML).type(MediaType.APPLICATION_XML).put(ClientResponse.class,bp);
    }
 else {
      System.out.println("Specified stack file does not end with .json or .xml");
      System.exit(-1);
    }
  }
  if (response.getStatus() != 200) {
    System.err.println("Stack add command failed. Reason [Code: <" + response.getStatus() + ">, Message: <"+ response.getHeaders().getFirst("ErrorMessage")+ ">]");
    System.exit(-1);
  }
  Stack bp_return=response.getEntity(Stack.class);
  System.out.println("Stack added.\n");
  printStack(bp_return,null);
}
