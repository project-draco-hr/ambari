{
  List<ShortTaskStatus> tasks=new ArrayList<>();
  ShortTaskStatus t1=new ShortTaskStatus();
  t1.setStatus(HostRoleStatus.COMPLETED.toString());
  tasks.add(t1);
  ShortTaskStatus t2=new ShortTaskStatus();
  t2.setStatus(HostRoleStatus.COMPLETED.toString());
  tasks.add(t2);
  ShortTaskStatus t3=new ShortTaskStatus();
  t3.setStatus(HostRoleStatus.COMPLETED.toString());
  tasks.add(t3);
  Map<ClusterTopology,List<LogicalRequest>> allRequests=new HashMap<>();
  List<LogicalRequest> logicalRequests=new ArrayList<>();
  logicalRequests.add(logicalRequest);
  ClusterTopology clusterTopologyMock=EasyMock.createNiceMock(ClusterTopology.class);
  expect(clusterTopologyMock.getClusterId()).andReturn(CLUSTER_ID).anyTimes();
  expect(ambariContext.isTopologyResolved(EasyMock.anyLong())).andReturn(true).anyTimes();
  allRequests.put(clusterTopologyMock,logicalRequests);
  expect(persistedState.getAllRequests()).andReturn(allRequests).anyTimes();
  expect(persistedState.getProvisionRequest(CLUSTER_ID)).andReturn(logicalRequest).anyTimes();
  expect(logicalRequest.hasCompleted()).andReturn(true).anyTimes();
  expect(requestStatusResponse.getTasks()).andReturn(tasks).anyTimes();
  replayAll();
  EasyMock.replay(clusterTopologyMock);
  topologyManagerReplay.getRequest(1L);
  Assert.assertTrue(topologyManagerReplay.isClusterProvisionWithBlueprintFinished(CLUSTER_ID));
}
