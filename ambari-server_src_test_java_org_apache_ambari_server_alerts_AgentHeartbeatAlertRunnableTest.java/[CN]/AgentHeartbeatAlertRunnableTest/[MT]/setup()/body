{
  m_injector=Guice.createInjector(new MockModule());
  m_definitionDao=m_injector.getInstance(AlertDefinitionDAO.class);
  m_clusters=m_injector.getInstance(Clusters.class);
  m_cluster=m_injector.getInstance(Cluster.class);
  m_eventPublisher=m_injector.getInstance(AlertEventPublisher.class);
  m_listener=m_injector.getInstance(MockEventListener.class);
  m_definition=EasyMock.createNiceMock(AlertDefinitionEntity.class);
  m_host=EasyMock.createNiceMock(Host.class);
  m_synchronizedBus=new EventBus();
  Field field=AlertEventPublisher.class.getDeclaredField("m_eventBus");
  field.setAccessible(true);
  field.set(m_eventPublisher,m_synchronizedBus);
  m_synchronizedBus.register(m_listener);
  Map<String,Cluster> clusterMap=new HashMap<String,Cluster>();
  clusterMap.put(CLUSTER_NAME,m_cluster);
  Map<String,Host> hostMap=new HashMap<String,Host>();
  hostMap.put(HOSTNAME,m_host);
  expect(m_definition.getDefinitionName()).andReturn(DEFINITION_NAME).atLeastOnce();
  expect(m_definition.getServiceName()).andReturn(DEFINITION_SERVICE).atLeastOnce();
  expect(m_definition.getComponentName()).andReturn(DEFINITION_COMPONENT).atLeastOnce();
  expect(m_definition.getLabel()).andReturn(DEFINITION_LABEL).atLeastOnce();
  expect(m_definition.getEnabled()).andReturn(true).atLeastOnce();
  expect(m_host.getState()).andReturn(HostState.HEALTHY);
  expect(m_cluster.getClusterId()).andReturn(CLUSTER_ID).atLeastOnce();
  expect(m_cluster.getClusterName()).andReturn(CLUSTER_NAME).atLeastOnce();
  expect(m_cluster.getHosts()).andReturn(Collections.singleton(m_host)).atLeastOnce();
  expect(m_clusters.getClusters()).andReturn(clusterMap).atLeastOnce();
  expect(m_definitionDao.findByName(CLUSTER_ID,DEFINITION_NAME)).andReturn(m_definition).atLeastOnce();
  EasyMock.replay(m_definition,m_host,m_cluster,m_clusters,m_definitionDao);
}
