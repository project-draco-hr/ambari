def assert_hbase_configure(self, name=None, distributed=False):
    self.assertResourceCalled('Directory', '/etc/ams-hbase/conf', owner='ams', group='hadoop', recursive=True)
    self.assertResourceCalled('Directory', '/var/lib/ambari-metrics-collector/hbase-tmp', owner='ams', cd_access='a', recursive=True)
    self.assertResourceCalled('Directory', '/var/lib/ambari-metrics-collector/hbase-tmp/local/jars', owner='ams', cd_access='a', group='hadoop', mode=509, recursive=True)
    self.assertResourceCalled('XmlConfig', 'hbase-site.xml', owner='ams', group='hadoop', conf_dir='/etc/ams-hbase/conf', configurations=self.getConfig()['configurations']['ams-hbase-site'], configuration_attributes=self.getConfig()['configuration_attributes']['ams-hbase-site'])
    self.assertResourceCalled('XmlConfig', 'hbase-policy.xml', owner='ams', group='hadoop', conf_dir='/etc/ams-hbase/conf', configurations=self.getConfig()['configurations']['ams-hbase-policy'], configuration_attributes=self.getConfig()['configuration_attributes']['ams-hbase-site'])
    self.assertResourceCalled('File', '/etc/ams-hbase/conf/hbase-env.sh', owner='ams', content=InlineTemplate(self.getConfig()['configurations']['ams-hbase-env']['content']))
    self.assertResourceCalled('File', '/etc/ams-hbase/conf/hadoop-metrics2-hbase.properties', owner='ams', group='hadoop', content=Template('hadoop-metrics2-hbase.properties.j2'))
    self.assertResourceCalled('TemplateConfig', '/etc/ams-hbase/conf/regionservers', owner='ams', template_tag=None)
    self.assertResourceCalled('Directory', '/var/run/ambari-metrics-collector/', owner='ams', recursive=True)
    self.assertResourceCalled('Directory', '/var/log/ambari-metrics-collector', owner='ams', recursive=True)
    if (name == 'master'):
        if distributed:
            self.assertResourceCalled('HdfsResource', 'hdfs://localhost:8020/apps/hbase/data', security_enabled=False, hadoop_bin_dir='/usr/bin', keytab=UnknownConfigurationMock(), kinit_path_local='/usr/bin/kinit', user='hdfs', dfs_type='', owner='ams', mode=509, hadoop_conf_dir='/etc/hadoop/conf', type='directory', action=['create_on_execute'], hdfs_site=self.getConfig()['configurations']['hdfs-site'], principal_name=UnknownConfigurationMock(), default_fs='hdfs://c6401.ambari.apache.org:8020')
            self.assertResourceCalled('HdfsResource', '/amshbase/staging', security_enabled=False, hadoop_bin_dir='/usr/bin', keytab=UnknownConfigurationMock(), kinit_path_local='/usr/bin/kinit', user='hdfs', dfs_type='', owner='ams', mode=457, hadoop_conf_dir='/etc/hadoop/conf', type='directory', action=['create_on_execute'], hdfs_site=self.getConfig()['configurations']['hdfs-site'], principal_name=UnknownConfigurationMock(), default_fs='hdfs://c6401.ambari.apache.org:8020')
            self.assertResourceCalled('HdfsResource', None, security_enabled=False, hadoop_bin_dir='/usr/bin', keytab=UnknownConfigurationMock(), kinit_path_local='/usr/bin/kinit', user='hdfs', hadoop_conf_dir='/etc/hadoop/conf', action=['execute'], hdfs_site=self.getConfig()['configurations']['hdfs-site'], principal_name=UnknownConfigurationMock(), default_fs='hdfs://c6401.ambari.apache.org:8020')
            self.assertResourceCalled('File', '/var/run/ambari-metrics-collector//distributed_mode', action=['create'], mode=420, owner='ams')
        else:
            self.assertResourceCalled('Directory', '/var/lib/ambari-metrics-collector/hbase', owner='ams', cd_access='a', recursive=True)
            self.assertResourceCalled('File', '/var/run/ambari-metrics-collector//distributed_mode', owner='ams', action=['delete'])
    self.assertResourceCalled('File', '/etc/ams-hbase/conf/log4j.properties', owner='ams', group='hadoop', mode=420, content='\n')
