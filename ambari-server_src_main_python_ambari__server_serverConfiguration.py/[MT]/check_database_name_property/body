def check_database_name_property(upgrade=False):
    '\n  :param upgrade: If Ambari is being upgraded.\n  :return:\n  '
    properties = get_ambari_properties()
    if (properties == (-1)):
        print_error_msg('Error getting ambari properties')
        return (-1)
    version = get_ambari_version(properties)
    if (upgrade and ((properties[JDBC_DATABASE_PROPERTY] not in ServerDatabases.databases()) or properties.has_key(JDBC_RCA_SCHEMA_PROPERTY))):
        persistence_type = properties[PERSISTENCE_TYPE_PROPERTY]
        if (persistence_type == 'remote'):
            db_name = properties[JDBC_RCA_SCHEMA_PROPERTY]
            if db_name:
                write_property(JDBC_DATABASE_NAME_PROPERTY, db_name)
            db_type = properties[JDBC_DATABASE_PROPERTY]
            if ((db_type is None) or (db_type.strip().lower() not in ServerDatabases.databases())):
                db_type = get_db_type(properties).name
                if db_type:
                    write_property(JDBC_DATABASE_PROPERTY, db_type)
            properties = get_ambari_properties()
        elif (persistence_type == 'local'):
            db_name = properties[JDBC_DATABASE_PROPERTY]
            if db_name:
                write_property(JDBC_DATABASE_NAME_PROPERTY, db_name)
                write_property(JDBC_DATABASE_PROPERTY, 'postgres')
                properties = get_ambari_properties()
    dbname = properties[JDBC_DATABASE_NAME_PROPERTY]
    if ((dbname is None) or (dbname == '')):
        err = ('DB Name property not set in config file.\n' + SETUP_OR_UPGRADE_MSG)
        raise FatalException((-1), err)
