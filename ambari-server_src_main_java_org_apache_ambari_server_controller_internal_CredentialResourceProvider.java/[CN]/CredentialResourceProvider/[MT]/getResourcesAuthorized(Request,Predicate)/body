{
  Set<String> requestedIds=getRequestPropertyIds(request,predicate);
  Set<Resource> resources=new HashSet<Resource>();
  boolean sendNotFoundErrorIfEmpty=false;
  for (  Map<String,Object> propertyMap : getPropertyMaps(predicate)) {
    String clusterName=(String)propertyMap.get(CREDENTIAL_CLUSTER_NAME_PROPERTY_ID);
    if (null == clusterName || clusterName.isEmpty()) {
      throw new IllegalArgumentException("Invalid argument, cluster name is required");
    }
    String alias=(String)propertyMap.get(CREDENTIAL_ALIAS_PROPERTY_ID);
    if (!StringUtils.isEmpty(alias)) {
      try {
        if (credentialStoreService.containsCredential(clusterName,alias)) {
          resources.add(toResource(clusterName,alias,credentialStoreService.getCredentialStoreType(clusterName,alias),requestedIds));
        }
 else {
          sendNotFoundErrorIfEmpty=true;
        }
      }
 catch (      AmbariException e) {
        throw new SystemException(e.getLocalizedMessage(),e);
      }
    }
 else {
      try {
        Map<String,CredentialStoreType> results=credentialStoreService.listCredentials(clusterName);
        if (results != null) {
          for (          Map.Entry<String,CredentialStoreType> entry : results.entrySet()) {
            resources.add(toResource(clusterName,entry.getKey(),entry.getValue(),requestedIds));
          }
        }
      }
 catch (      AmbariException e) {
        throw new SystemException(e.getLocalizedMessage(),e);
      }
    }
  }
  if (sendNotFoundErrorIfEmpty && resources.isEmpty()) {
    throw new NoSuchResourceException("The requested resource doesn't exist: Credential not found, " + predicate);
  }
  return resources;
}
