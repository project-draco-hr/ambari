def execute(configurations={}, parameters={}, host_name=None):
    '\n  Returns a tuple containing the result code and a pre-formatted result label\n\n  Keyword arguments:\n  configurations (dictionary): a mapping of configuration key to value\n  parameters (dictionary): a mapping of script parameter key to value\n  host_name (string): the name of this host where the alert is running\n  '
    if (configurations is None):
        return (RESULT_CODE_UNKNOWN, ['There were no configurations supplied to the script.'])
    if (not (OOZIE_URL_KEY in configurations)):
        return (RESULT_CODE_UNKNOWN, ['The Oozie URL is a required parameter.'])
    localhost_address = ('localhost' if (OSCheck.get_os_family() == OSConst.WINSRV_FAMILY) else '0.0.0.0')
    https_port = None
    if (OOZIE_ENV_CONTENT in configurations):
        for line in configurations[OOZIE_ENV_CONTENT].splitlines():
            result = re.match(OOZIE_ENV_HTTPS_RE, line)
            if (result is not None):
                https_port = result.group(1)
    if ((https_port is None) and (OOZIE_HTTPS_PORT in configurations)):
        https_port = configurations[OOZIE_HTTPS_PORT]
    oozie_url = configurations[OOZIE_URL_KEY]
    if (https_port is not None):
        parsed_url = urlparse(oozie_url)
        oozie_url = oozie_url.replace(parsed_url.scheme, 'https')
        if (parsed_url.port is None):
            oozie_url.replace(parsed_url.hostname, ':'.join([parsed_url.hostname, https_port]))
        else:
            oozie_url = oozie_url.replace(str(parsed_url.port), https_port)
    oozie_url = oozie_url.replace(urlparse(oozie_url).hostname, localhost_address)
    try:
        (command, env, oozie_user) = get_check_command(oozie_url, host_name, configurations)
        Execute(command, environment=env, user=oozie_user)
        return (RESULT_CODE_OK, ['Successful connection to {0}'.format(oozie_url)])
    except KerberosPropertiesNotFound as ex:
        return (RESULT_CODE_UNKNOWN, [str(ex)])
    except Exception as ex:
        return (RESULT_CODE_CRITICAL, [str(ex)])
