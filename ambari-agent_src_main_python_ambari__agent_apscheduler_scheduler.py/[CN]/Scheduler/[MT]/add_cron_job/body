def add_cron_job(self, func, year=None, month=None, day=None, week=None, day_of_week=None, hour=None, minute=None, second=None, start_date=None, args=None, kwargs=None, **options):
    '\n        Schedules a job to be completed on times that match the given\n        expressions.\n        Any extra keyword arguments are passed along to the constructor of the\n        :class:`~apscheduler.job.Job` class (see :ref:`job_options`).\n\n        :param func: callable to run\n        :param year: year to run on\n        :param month: month to run on\n        :param day: day of month to run on\n        :param week: week of the year to run on\n        :param day_of_week: weekday to run on (0 = Monday)\n        :param hour: hour to run on\n        :param second: second to run on\n        :param args: list of positional arguments to call func with\n        :param kwargs: dict of keyword arguments to call func with\n        :param name: name of the job\n        :param jobstore: alias of the job store to add the job to\n        :param misfire_grace_time: seconds after the designated run time that\n            the job is still allowed to be run\n        :return: the scheduled job\n        :rtype: :class:`~apscheduler.job.Job`\n        '
    trigger = CronTrigger(year=year, month=month, day=day, week=week, day_of_week=day_of_week, hour=hour, minute=minute, second=second, start_date=start_date)
    return self.add_job(trigger, func, args, kwargs, **options)
