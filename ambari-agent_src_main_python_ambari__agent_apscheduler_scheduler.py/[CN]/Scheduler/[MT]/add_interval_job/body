def add_interval_job(self, func, weeks=0, days=0, hours=0, minutes=0, seconds=0, start_date=None, args=None, kwargs=None, **options):
    '\n        Schedules a job to be completed on specified intervals.\n        Any extra keyword arguments are passed along to the constructor of the\n        :class:`~apscheduler.job.Job` class (see :ref:`job_options`).\n\n        :param func: callable to run\n        :param weeks: number of weeks to wait\n        :param days: number of days to wait\n        :param hours: number of hours to wait\n        :param minutes: number of minutes to wait\n        :param seconds: number of seconds to wait\n        :param start_date: when to first execute the job and start the\n            counter (default is after the given interval)\n        :param args: list of positional arguments to call func with\n        :param kwargs: dict of keyword arguments to call func with\n        :param name: name of the job\n        :param jobstore: alias of the job store to add the job to\n        :param misfire_grace_time: seconds after the designated run time that\n            the job is still allowed to be run\n        :rtype: :class:`~apscheduler.job.Job`\n        '
    interval = timedelta(weeks=weeks, days=days, hours=hours, minutes=minutes, seconds=seconds)
    trigger = IntervalTrigger(interval, start_date)
    return self.add_job(trigger, func, args, kwargs, **options)
