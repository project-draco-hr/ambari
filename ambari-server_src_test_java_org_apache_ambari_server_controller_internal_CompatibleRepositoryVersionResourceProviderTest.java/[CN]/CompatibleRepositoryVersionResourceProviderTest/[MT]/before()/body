{
  final AmbariMetaInfo ambariMetaInfo=EasyMock.createMock(AmbariMetaInfo.class);
  final ClusterVersionDAO clusterVersionDAO=EasyMock.createMock(ClusterVersionDAO.class);
  StackEntity hdp11Stack=new StackEntity();
  hdp11Stack.setStackName("HDP");
  hdp11Stack.setStackVersion("1.1");
  RepositoryVersionEntity entity1=new RepositoryVersionEntity();
  entity1.setDisplayName("name1");
  entity1.setOperatingSystems(jsonStringRedhat6);
  entity1.setStack(hdp11Stack);
  entity1.setVersion("1.1.1.1");
  entity1.setId(1L);
  StackEntity hdp22Stack=new StackEntity();
  hdp22Stack.setStackName("HDP");
  hdp22Stack.setStackVersion("2.2");
  RepositoryVersionEntity entity2=new RepositoryVersionEntity();
  entity2.setDisplayName("name2");
  entity2.setOperatingSystems(jsonStringRedhat6);
  entity2.setStack(hdp22Stack);
  entity2.setVersion("2.2.2.2");
  entity2.setId(2L);
  final RepositoryVersionDAO repoVersionDAO=EasyMock.createMock(RepositoryVersionDAO.class);
  StackId stackId11=new StackId("HDP","1.1");
  StackId stackId22=new StackId("HDP","2.2");
  expect(repoVersionDAO.findByStack(stackId11)).andReturn(Collections.singletonList(entity1)).atLeastOnce();
  expect(repoVersionDAO.findByStack(stackId22)).andReturn(Collections.singletonList(entity2)).atLeastOnce();
  replay(repoVersionDAO);
  final StackInfo stack1=new StackInfo(){
    @Override public Map<String,UpgradePack> getUpgradePacks(){
      Map<String,UpgradePack> map=new HashMap<String,UpgradePack>();
      UpgradePack pack1=new UpgradePack(){
        @Override public String getName(){
          return "pack1";
        }
        @Override public String getTarget(){
          return "1.1.*.*";
        }
        @Override public UpgradeType getType(){
          return UpgradeType.ROLLING;
        }
      }
;
      UpgradePack pack2=new UpgradePack(){
        @Override public String getName(){
          return "pack2";
        }
        @Override public String getTarget(){
          return "2.2.*.*";
        }
        @Override public String getTargetStack(){
          return "HDP-2.2";
        }
        @Override public UpgradeType getType(){
          return UpgradeType.NON_ROLLING;
        }
      }
;
      UpgradePack pack3=new UpgradePack(){
        @Override public String getName(){
          return "pack2";
        }
        @Override public String getTarget(){
          return "2.2.*.*";
        }
        @Override public String getTargetStack(){
          return "HDP-2.2";
        }
        @Override public UpgradeType getType(){
          return UpgradeType.ROLLING;
        }
      }
;
      map.put("pack1",pack1);
      map.put("pack2",pack2);
      map.put("pack3",pack3);
      return map;
    }
  }
;
  final StackInfo stack2=new StackInfo(){
    @Override public Map<String,UpgradePack> getUpgradePacks(){
      Map<String,UpgradePack> map=new HashMap<String,UpgradePack>();
      UpgradePack pack=new UpgradePack(){
        @Override public String getName(){
          return "pack2";
        }
        @Override public String getTarget(){
          return "2.2.*.*";
        }
        @Override public UpgradeType getType(){
          return UpgradeType.NON_ROLLING;
        }
      }
;
      map.put("pack2",pack);
      return map;
    }
  }
;
  InMemoryDefaultTestModule injectorModule=new InMemoryDefaultTestModule(){
    @Override protected void configure(){
      super.configure();
      bind(AmbariMetaInfo.class).toInstance(ambariMetaInfo);
      bind(ClusterVersionDAO.class).toInstance(clusterVersionDAO);
      bind(RepositoryVersionDAO.class).toInstance(repoVersionDAO);
      requestStaticInjection(CompatibleRepositoryVersionResourceProvider.class);
    }
  }
;
  injector=Guice.createInjector(injectorModule);
  expect(ambariMetaInfo.getStack("HDP","1.1")).andReturn(stack1).atLeastOnce();
  expect(ambariMetaInfo.getStack("HDP","2.2")).andReturn(stack2).atLeastOnce();
  expect(ambariMetaInfo.getUpgradePacks("HDP","1.1")).andReturn(stack1.getUpgradePacks());
  expect(ambariMetaInfo.getUpgradePacks("HDP","2.2")).andReturn(stack2.getUpgradePacks());
  replay(ambariMetaInfo);
  injector.getInstance(GuiceJpaInitializer.class);
}
