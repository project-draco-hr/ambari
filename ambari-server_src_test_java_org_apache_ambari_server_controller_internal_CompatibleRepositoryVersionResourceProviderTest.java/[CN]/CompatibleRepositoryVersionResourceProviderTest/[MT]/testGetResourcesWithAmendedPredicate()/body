{
  SecurityContextHolder.getContext().setAuthentication(TestAuthenticationFactory.createClusterAdministrator("admin",2L));
  final ResourceProvider provider=injector.getInstance(ResourceProviderFactory.class).getRepositoryVersionResourceProvider();
  Request getRequest=PropertyHelper.getReadRequest(RepositoryVersionResourceProvider.REPOSITORY_VERSION_ID_PROPERTY_ID,RepositoryVersionResourceProvider.REPOSITORY_VERSION_STACK_NAME_PROPERTY_ID,RepositoryVersionResourceProvider.REPOSITORY_VERSION_STACK_VERSION_PROPERTY_ID,CompatibleRepositoryVersionResourceProvider.REPOSITORY_UPGRADES_SUPPORTED_TYPES_ID);
  Predicate predicateStackName=new PredicateBuilder().property(RepositoryVersionResourceProvider.REPOSITORY_VERSION_STACK_NAME_PROPERTY_ID).equals("HDP").toPredicate();
  Predicate predicateStackVersion=new PredicateBuilder().property(RepositoryVersionResourceProvider.REPOSITORY_VERSION_STACK_VERSION_PROPERTY_ID).equals("1.1").toPredicate();
  assertEquals(1,provider.getResources(getRequest,new AndPredicate(predicateStackName,predicateStackVersion)).size());
  CompatibleRepositoryVersionResourceProvider compatibleProvider=new CompatibleRepositoryVersionResourceProvider(null);
  getRequest=PropertyHelper.getReadRequest(CompatibleRepositoryVersionResourceProvider.REPOSITORY_VERSION_ID_PROPERTY_ID,CompatibleRepositoryVersionResourceProvider.REPOSITORY_VERSION_STACK_NAME_PROPERTY_ID,CompatibleRepositoryVersionResourceProvider.REPOSITORY_VERSION_STACK_VERSION_PROPERTY_ID,CompatibleRepositoryVersionResourceProvider.REPOSITORY_UPGRADES_SUPPORTED_TYPES_ID);
  predicateStackName=new PredicateBuilder().property(CompatibleRepositoryVersionResourceProvider.REPOSITORY_VERSION_STACK_NAME_PROPERTY_ID).equals("HDP").toPredicate();
  predicateStackVersion=new PredicateBuilder().property(CompatibleRepositoryVersionResourceProvider.REPOSITORY_VERSION_STACK_VERSION_PROPERTY_ID).equals("1.1").toPredicate();
  Predicate newPredicate=compatibleProvider.amendPredicate(new AndPredicate(predicateStackName,predicateStackVersion));
  assertEquals(OrPredicate.class,newPredicate.getClass());
  Set<Resource> resources=compatibleProvider.getResources(getRequest,newPredicate);
  assertEquals(2,resources.size());
  Map<String,List<UpgradeType>> versionToUpgradeTypesMap=new HashMap<>();
  versionToUpgradeTypesMap.put("1.1",Arrays.asList(UpgradeType.ROLLING));
  versionToUpgradeTypesMap.put("2.2",Arrays.asList(UpgradeType.NON_ROLLING,UpgradeType.ROLLING));
  assertEquals(versionToUpgradeTypesMap.size(),checkUpgradeTypes(resources,versionToUpgradeTypesMap));
}
