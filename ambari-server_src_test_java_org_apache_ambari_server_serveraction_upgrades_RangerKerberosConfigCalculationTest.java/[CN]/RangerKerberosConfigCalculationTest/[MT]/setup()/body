{
  m_injector=EasyMock.createMock(Injector.class);
  m_clusters=EasyMock.createMock(Clusters.class);
  Cluster cluster=EasyMock.createMock(Cluster.class);
  Config hadoopConfig=new ConfigImpl("hadoop-env"){
    Map<String,String> mockProperties=new HashMap<String,String>(){
{
        put("hdfs_user","hdfs");
      }
    }
;
    @Override public Map<String,String> getProperties(){
      return mockProperties;
    }
  }
;
  Config hiveConfig=new ConfigImpl("hive-env"){
    Map<String,String> mockProperties=new HashMap<String,String>(){
{
        put("hive_user","hive");
      }
    }
;
    @Override public Map<String,String> getProperties(){
      return mockProperties;
    }
  }
;
  Config yarnConfig=new ConfigImpl("yarn-env"){
    Map<String,String> mockProperties=new HashMap<String,String>(){
{
        put("yarn_user","yarn");
      }
    }
;
    @Override public Map<String,String> getProperties(){
      return mockProperties;
    }
  }
;
  Config hbaseConfig=new ConfigImpl("hbase-env"){
    Map<String,String> mockProperties=new HashMap<String,String>(){
{
        put("hbase_user","hbase");
      }
    }
;
    @Override public Map<String,String> getProperties(){
      return mockProperties;
    }
  }
;
  Config knoxConfig=new ConfigImpl("knox-env"){
    Map<String,String> mockProperties=new HashMap<String,String>(){
{
        put("knox_user","knox");
      }
    }
;
    @Override public Map<String,String> getProperties(){
      return mockProperties;
    }
  }
;
  Config stormConfig=new ConfigImpl("storm-env"){
    Map<String,String> mockProperties=new HashMap<String,String>(){
{
        put("storm_user","storm");
        put("storm_principal_name","storm-c1@EXAMLE.COM");
      }
    }
;
    @Override public Map<String,String> getProperties(){
      return mockProperties;
    }
  }
;
  Config kafkaConfig=new ConfigImpl("kafka-env"){
    Map<String,String> mockProperties=new HashMap<String,String>(){
{
        put("kafka_user","kafka");
      }
    }
;
    @Override public Map<String,String> getProperties(){
      return mockProperties;
    }
  }
;
  Config kmsConfig=new ConfigImpl("kms-env"){
    Map<String,String> mockProperties=new HashMap<String,String>(){
{
        put("kms_user","kms");
      }
    }
;
    @Override public Map<String,String> getProperties(){
      return mockProperties;
    }
  }
;
  Config hdfsSiteConfig=new ConfigImpl("hdfs-site"){
    Map<String,String> mockProperties=new HashMap<String,String>(){
{
        put("dfs.web.authentication.kerberos.keytab","/etc/security/keytabs/spnego.kytab");
      }
    }
;
    @Override public Map<String,String> getProperties(){
      return mockProperties;
    }
  }
;
  Config adminSiteConfig=new ConfigImpl("ranger-admin-site"){
    Map<String,String> mockProperties=new HashMap<String,String>();
    @Override public Map<String,String> getProperties(){
      return mockProperties;
    }
    @Override public void setProperties(    Map<String,String> properties){
      mockProperties.putAll(properties);
    }
    @Override public void persist(    boolean newConfig){
    }
  }
;
  expect(cluster.getDesiredConfigByType("hadoop-env")).andReturn(hadoopConfig).atLeastOnce();
  expect(cluster.getDesiredConfigByType("hive-env")).andReturn(hiveConfig).atLeastOnce();
  expect(cluster.getDesiredConfigByType("yarn-env")).andReturn(yarnConfig).atLeastOnce();
  expect(cluster.getDesiredConfigByType("hbase-env")).andReturn(hbaseConfig).atLeastOnce();
  expect(cluster.getDesiredConfigByType("knox-env")).andReturn(knoxConfig).atLeastOnce();
  expect(cluster.getDesiredConfigByType("storm-env")).andReturn(stormConfig).atLeastOnce();
  expect(cluster.getDesiredConfigByType("kafka-env")).andReturn(kafkaConfig).atLeastOnce();
  expect(cluster.getDesiredConfigByType("kms-env")).andReturn(kmsConfig).atLeastOnce();
  expect(cluster.getDesiredConfigByType("hdfs-site")).andReturn(hdfsSiteConfig).atLeastOnce();
  expect(cluster.getDesiredConfigByType("ranger-admin-site")).andReturn(adminSiteConfig).atLeastOnce();
  expect(m_clusters.getCluster((String)anyObject())).andReturn(cluster).anyTimes();
  expect(m_injector.getInstance(Clusters.class)).andReturn(m_clusters).atLeastOnce();
  expect(cluster.getSecurityType()).andReturn(SecurityType.KERBEROS).anyTimes();
  replay(m_injector,m_clusters,cluster);
  m_clusterField=RangerKerberosConfigCalculation.class.getDeclaredField("m_clusters");
  m_clusterField.setAccessible(true);
}
