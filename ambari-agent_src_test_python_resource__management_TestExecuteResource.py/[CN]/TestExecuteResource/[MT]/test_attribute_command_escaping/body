@patch.object(os, 'read')
@patch.object(select, 'select')
@patch.object(subprocess, 'Popen')
def test_attribute_command_escaping(self, popen_mock, select_mock, os_read_mock):
    expected_command0 = "arg1 arg2 'quoted arg'"
    expected_command1 = 'arg1 arg2 \'command "arg"\''
    expected_command2 = 'arg1 arg2 \'command \'"\'"\'arg\'"\'"\'\''
    expected_command3 = "arg1 arg2 'echo `ls /root`'"
    expected_command4 = "arg1 arg2 '$ROOT'"
    expected_command5 = "arg1 arg2 '`ls /root`'"
    subproc_mock = MagicMock()
    subproc_mock.wait.return_value = MagicMock()
    subproc_mock.stdout = MagicMock()
    subproc_mock.returncode = 0
    popen_mock.return_value = subproc_mock
    select_mock.return_value = ([subproc_mock.stdout], None, None)
    os_read_mock.return_value = None
    with Environment('/') as env:
        Execute(('arg1', 'arg2', 'quoted arg'))
        Execute(('arg1', 'arg2', 'command "arg"'))
        Execute(('arg1', 'arg2', "command 'arg'"))
        Execute(('arg1', 'arg2', 'echo `ls /root`'))
        Execute(('arg1', 'arg2', '$ROOT'))
        Execute(('arg1', 'arg2', '`ls /root`'))
    self.assertEqual(popen_mock.call_args_list[0][0][0][4], expected_command0)
    self.assertEqual(popen_mock.call_args_list[1][0][0][4], expected_command1)
    self.assertEqual(popen_mock.call_args_list[2][0][0][4], expected_command2)
    self.assertEqual(popen_mock.call_args_list[3][0][0][4], expected_command3)
    self.assertEqual(popen_mock.call_args_list[4][0][0][4], expected_command4)
    self.assertEqual(popen_mock.call_args_list[5][0][0][4], expected_command5)
