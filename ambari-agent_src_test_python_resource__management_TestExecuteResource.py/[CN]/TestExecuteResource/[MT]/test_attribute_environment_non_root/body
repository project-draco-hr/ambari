@patch.object(os, 'read')
@patch.object(select, 'select')
@patch.object(subprocess, 'Popen')
def test_attribute_environment_non_root(self, popen_mock, select_mock, os_read_mock):
    expected_user = 'test_user'
    subproc_mock = MagicMock()
    subproc_mock.wait.return_value = MagicMock()
    subproc_mock.stdout = MagicMock()
    subproc_mock.returncode = 0
    popen_mock.return_value = subproc_mock
    select_mock.return_value = ([subproc_mock.stdout], None, None)
    os_read_mock.return_value = None
    with Environment('/') as env:
        execute_resource = Execute('echo "1"', user=expected_user, environment={'JAVA_HOME': '/test/java/home', 'PATH': '/bin', })
    expected_command = ['/bin/bash', '--login', '--noprofile', '-c', (("ambari-sudo.sh su test_user -l -s /bin/bash -c 'export  PATH=" + os.environ['PATH']) + ':/bin JAVA_HOME=/test/java/home ; echo "1"\'')]
    self.assertEqual(popen_mock.call_args_list[0][0][0], expected_command)
