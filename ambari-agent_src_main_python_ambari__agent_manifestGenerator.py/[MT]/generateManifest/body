def generateManifest(parsedJson, fileName, modulesdir, ambariconfig):
    logger.info('JSON Received:')
    logger.info(json.dumps(parsedJson, sort_keys=True, indent=4))
    hostname = parsedJson['hostname']
    clusterHostInfo = {}
    if ('clusterHostInfo' in parsedJson):
        if parsedJson['clusterHostInfo']:
            clusterHostInfo = parsedJson['clusterHostInfo']
    params = {}
    if ('hostLevelParams' in parsedJson):
        if parsedJson['hostLevelParams']:
            params = parsedJson['hostLevelParams']
    configurations = {}
    if ('configurations' in parsedJson):
        if parsedJson['configurations']:
            configurations = parsedJson['configurations']
    nonGlobalConfigurationsKeys = non_global_configuration_types
    roleParams = {}
    if ('roleParams' in parsedJson):
        if parsedJson['roleParams']:
            roleParams = parsedJson['roleParams']
    roles = [{'role': parsedJson['role'], 'cmd': parsedJson['roleCommand'], 'roleParams': roleParams, }]
    manifest = open(fileName, 'w')
    importsfile = 'imports.txt'
    if ambariconfig.has_option('puppet', 'imports_file'):
        importsfile = ambariconfig.get('puppet', 'imports_file')
    logger.info(('Using imports file ' + importsfile))
    writeImports(outputFile=manifest, modulesdir=modulesdir, inputFileName=importsfile)
    writeNodes(manifest, clusterHostInfo)
    writeParams(manifest, params, modulesdir)
    nonGlobalConfigurations = {}
    flatConfigurations = {}
    if configurations:
        for configKey in configurations.iterkeys():
            if (configKey in nonGlobalConfigurationsKeys):
                nonGlobalConfigurations[configKey] = configurations[configKey]
            else:
                flatConfigurations[configKey] = configurations[configKey]
    if nonGlobalConfigurations:
        writeNonGlobalConfigurations(manifest, nonGlobalConfigurations)
    if flatConfigurations:
        writeFlatConfigurations(manifest, flatConfigurations)
    writeTasks(manifest, roles, ambariconfig)
    manifest.close()
