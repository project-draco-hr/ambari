def generateManifest(parsedJson, fileName, modulesdir, ambariconfig):
    logger.debug('JSON Received:')
    logger.debug(json.dumps(parsedJson, sort_keys=True, indent=4))
    hostname = parsedJson['hostname']
    clusterHostInfo = {}
    if ('clusterHostInfo' in parsedJson):
        if parsedJson['clusterHostInfo']:
            clusterHostInfo = parsedJson['clusterHostInfo']
    params = {}
    if ('hostLevelParams' in parsedJson):
        if parsedJson['hostLevelParams']:
            params = parsedJson['hostLevelParams']
    configurations = {}
    if ('configurations' in parsedJson):
        if parsedJson['configurations']:
            configurations = parsedJson['configurations']
    nonGlobalConfigurationsKeys = non_global_configuration_types
    roleParams = {}
    if ('roleParams' in parsedJson):
        if parsedJson['roleParams']:
            roleParams = parsedJson['roleParams']
    roles = [{'role': parsedJson['role'], 'cmd': parsedJson['roleCommand'], 'roleParams': roleParams, }]
    errMsg = ''
    try:
        try:
            manifest = open(fileName, 'w')
            os.chmod(fileName, 432)
            writeImports(outputFile=manifest, modulesdir=modulesdir, importsList=AmbariConfig.imports)
            writeHostnames(manifest)
            writeNodes(manifest, clusterHostInfo)
            writeParams(manifest, params, modulesdir)
            nonGlobalConfigurations = {}
            flatConfigurations = {}
            if configurations:
                for configKey in configurations.iterkeys():
                    if (configKey in nonGlobalConfigurationsKeys):
                        nonGlobalConfigurations[configKey] = configurations[configKey]
                    else:
                        flatConfigurations[configKey] = configurations[configKey]
            if nonGlobalConfigurations:
                writeNonGlobalConfigurations(manifest, nonGlobalConfigurations)
            if flatConfigurations:
                writeFlatConfigurations(manifest, flatConfigurations)
            writeTasks(manifest, roles, ambariconfig, clusterHostInfo, hostname)
        except TypeError:
            errMsg = ("Manifest can't be generated from the JSON \n" + json.dumps(parsedJson, sort_keys=True, indent=4))
            logger.error(errMsg)
    finally:
        manifest.close()
    return errMsg
