def writeTasks(outputFile, roles, ambariconfig, clusterHostInfo=None, hostname='localhost'):
    rolestoclass = 'rolesToClass.dict'
    if ambariconfig.has_option('puppet', 'roles_to_class'):
        rolestoclass = ambariconfig.get('puppet', 'roles_to_class')
    rolesToClassFile = open(rolestoclass, 'r')
    rolesToClass = readDict(rolesToClassFile)
    rolesToClassFile.close()
    servicestates = 'serviceStates.dict'
    if ambariconfig.has_option('puppet', 'service_states'):
        servicestates = ambariconfig.get('puppet', 'service_states')
    serviceStatesFile = open(servicestates, 'r')
    serviceStates = readDict(serviceStatesFile)
    serviceStatesFile.close()
    outputFile.write('node /default/ {\n ')
    writeStages(outputFile, (len(roles) + 1))
    stageNum = 1
    outputFile.write((("class {'hdp': stage => " + str(stageNum)) + '}\n'))
    stageNum = (stageNum + 1)
    zk_hosts = []
    for role in roles:
        rolename = role['role']
        command = role['cmd']
        taskParams = role['roleParams']
        if (rolename == 'ZOOKEEPER_SERVER'):
            zk_hosts = clusterHostInfo['zookeeper_hosts']
            taskParams['myid'] = str((sorted(zk_hosts).index(hostname) + 1))
        taskParamsNormalized = normalizeTaskParams(taskParams)
        taskParamsPostfix = ''
        if (len(taskParamsNormalized) > 0):
            taskParamsPostfix = (', ' + taskParamsNormalized)
        className = rolesToClass[rolename]
        if (command in serviceStates):
            serviceState = serviceStates[command]
            outputFile.write((((((((("class {'" + className) + "':") + ' stage => ') + str(stageNum)) + ', service_state => ') + serviceState) + taskParamsPostfix) + '}\n'))
        else:
            outputFile.write((((((("class {'" + className) + "':") + ' stage => ') + str(stageNum)) + taskParamsPostfix) + '}\n'))
        stageNum = (stageNum + 1)
    outputFile.write('}\n')
