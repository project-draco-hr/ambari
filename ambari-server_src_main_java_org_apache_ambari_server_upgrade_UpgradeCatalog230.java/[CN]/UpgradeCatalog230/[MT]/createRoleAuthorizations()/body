{
  LOG.info("Adding authorizations");
  RoleAuthorizationDAO roleAuthorizationDAO=injector.getInstance(RoleAuthorizationDAO.class);
  createRoleAuthorization(roleAuthorizationDAO,"VIEW.USE","Use View");
  createRoleAuthorization(roleAuthorizationDAO,"SERVICE.VIEW_METRICS","View metrics");
  createRoleAuthorization(roleAuthorizationDAO,"SERVICE.VIEW_STATUS_INFO","View status information");
  createRoleAuthorization(roleAuthorizationDAO,"SERVICE.VIEW_CONFIGS","View configurations");
  createRoleAuthorization(roleAuthorizationDAO,"SERVICE.COMPARE_CONFIGS","Compare configurations");
  createRoleAuthorization(roleAuthorizationDAO,"SERVICE.VIEW_ALERTS","View service-level alerts");
  createRoleAuthorization(roleAuthorizationDAO,"SERVICE.START_STOP","Start/Stop/Restart Service");
  createRoleAuthorization(roleAuthorizationDAO,"SERVICE.DECOMMISSION_RECOMMISSION","Decommission/recommission");
  createRoleAuthorization(roleAuthorizationDAO,"SERVICE.RUN_SERVICE_CHECK","Run service checks");
  createRoleAuthorization(roleAuthorizationDAO,"SERVICE.TOGGLE_MAINTENANCE","Turn on/off maintenance mode");
  createRoleAuthorization(roleAuthorizationDAO,"SERVICE.RUN_CUSTOM_COMMAND","Perform service-specific tasks");
  createRoleAuthorization(roleAuthorizationDAO,"SERVICE.MODIFY_CONFIGS","Modify configurations");
  createRoleAuthorization(roleAuthorizationDAO,"SERVICE.MANAGE_CONFIG_GROUPS","Manage configuration groups");
  createRoleAuthorization(roleAuthorizationDAO,"SERVICE.MANAGE_ALERTS","Manage service-level alerts");
  createRoleAuthorization(roleAuthorizationDAO,"SERVICE.MOVE","Move to another host");
  createRoleAuthorization(roleAuthorizationDAO,"SERVICE.ENABLE_HA","Enable HA");
  createRoleAuthorization(roleAuthorizationDAO,"SERVICE.TOGGLE_ALERTS","Enable/disable service-level alerts");
  createRoleAuthorization(roleAuthorizationDAO,"SERVICE.ADD_DELETE_SERVICES","Add Service to cluster");
  createRoleAuthorization(roleAuthorizationDAO,"HOST.VIEW_METRICS","View metrics");
  createRoleAuthorization(roleAuthorizationDAO,"HOST.VIEW_STATUS_INFO","View status information");
  createRoleAuthorization(roleAuthorizationDAO,"HOST.VIEW_CONFIGS","View configuration");
  createRoleAuthorization(roleAuthorizationDAO,"HOST.TOGGLE_MAINTENANCE","Turn on/off maintenance mode");
  createRoleAuthorization(roleAuthorizationDAO,"HOST.ADD_DELETE_COMPONENTS","Install components");
  createRoleAuthorization(roleAuthorizationDAO,"HOST.ADD_DELETE_HOSTS","Add/Delete hosts");
  createRoleAuthorization(roleAuthorizationDAO,"CLUSTER.VIEW_METRICS","View metrics");
  createRoleAuthorization(roleAuthorizationDAO,"CLUSTER.VIEW_STATUS_INFO","View status information");
  createRoleAuthorization(roleAuthorizationDAO,"CLUSTER.VIEW_CONFIGS","View configuration");
  createRoleAuthorization(roleAuthorizationDAO,"CLUSTER.VIEW_STACK_DETAILS","View stack version details");
  createRoleAuthorization(roleAuthorizationDAO,"CLUSTER.VIEW_ALERTS","View cluster-level alerts");
  createRoleAuthorization(roleAuthorizationDAO,"CLUSTER.MANAGE_CREDENTIALS","Manage external credentials");
  createRoleAuthorization(roleAuthorizationDAO,"CLUSTER.MODIFY_CONFIGS","Modify cluster configurations");
  createRoleAuthorization(roleAuthorizationDAO,"CLUSTER.MANAGE_CONFIG_GROUPS","Manage cluster configuration groups");
  createRoleAuthorization(roleAuthorizationDAO,"CLUSTER.MANAGE_ALERTS","Manage cluster-level alerts");
  createRoleAuthorization(roleAuthorizationDAO,"CLUSTER.TOGGLE_ALERTS","Enable/disable cluster-level alerts");
  createRoleAuthorization(roleAuthorizationDAO,"CLUSTER.TOGGLE_KERBEROS","Enable/disable Kerberos");
  createRoleAuthorization(roleAuthorizationDAO,"CLUSTER.UPGRADE_DOWNGRADE_STACK","Upgrade/downgrade stack");
  createRoleAuthorization(roleAuthorizationDAO,"AMBARI.ADD_DELETE_CLUSTERS","Create new clusters");
  createRoleAuthorization(roleAuthorizationDAO,"AMBARI.SET_SERVICE_USERS_GROUPS","Set service users and groups");
  createRoleAuthorization(roleAuthorizationDAO,"AMBARI.RENAME_CLUSTER","Rename clusters");
  createRoleAuthorization(roleAuthorizationDAO,"AMBARI.MANAGE_USERS","Manage users");
  createRoleAuthorization(roleAuthorizationDAO,"AMBARI.MANAGE_GROUPS","Manage groups");
  createRoleAuthorization(roleAuthorizationDAO,"AMBARI.MANAGE_VIEWS","Manage Ambari Views");
  createRoleAuthorization(roleAuthorizationDAO,"AMBARI.ASSIGN_ROLES","Assign roles");
  createRoleAuthorization(roleAuthorizationDAO,"AMBARI.MANAGE_STACK_VERSIONS","Manage stack versions");
  createRoleAuthorization(roleAuthorizationDAO,"AMBARI.EDIT_STACK_REPOS","Edit stack repository URLs");
}
