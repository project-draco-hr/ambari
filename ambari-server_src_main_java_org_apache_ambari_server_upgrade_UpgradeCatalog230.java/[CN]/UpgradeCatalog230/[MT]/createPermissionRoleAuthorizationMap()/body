{
  LOG.info("Creating permission to authorizations map");
  String[] columnNames=new String[]{PERMISSION_ID_COL,ROLE_AUTHORIZATION_ID_COL};
  PermissionDAO permissionDAO=injector.getInstance(PermissionDAO.class);
  ResourceTypeDAO resourceTypeDAO=injector.getInstance(ResourceTypeDAO.class);
  String viewPermissionId=permissionDAO.findPermissionByNameAndType("VIEW.USER",resourceTypeDAO.findByName("VIEW")).getId().toString();
  String administratorPermissionId=permissionDAO.findPermissionByNameAndType("AMBARI.ADMINISTRATOR",resourceTypeDAO.findByName("AMBARI")).getId().toString();
  String clusterUserPermissionId=permissionDAO.findPermissionByNameAndType("CLUSTER.USER",resourceTypeDAO.findByName("CLUSTER")).getId().toString();
  String clusterOperatorPermissionId=permissionDAO.findPermissionByNameAndType("CLUSTER.OPERATOR",resourceTypeDAO.findByName("CLUSTER")).getId().toString();
  String clusterAdministratorPermissionId=permissionDAO.findPermissionByNameAndType("CLUSTER.ADMINISTRATOR",resourceTypeDAO.findByName("CLUSTER")).getId().toString();
  String serviceAdministratorPermissionId=permissionDAO.findPermissionByNameAndType("SERVICE.ADMINISTRATOR",resourceTypeDAO.findByName("CLUSTER")).getId().toString();
  String serviceOperatorPermissionId=permissionDAO.findPermissionByNameAndType("SERVICE.OPERATOR",resourceTypeDAO.findByName("CLUSTER")).getId().toString();
  List<String> viewUserOnly=Arrays.asList(viewPermissionId);
  List<String> clusterUserAndUp=Arrays.asList(clusterUserPermissionId,serviceOperatorPermissionId,serviceAdministratorPermissionId,clusterOperatorPermissionId,clusterAdministratorPermissionId,administratorPermissionId);
  List<String> serviceOperatorAndUp=Arrays.asList(serviceOperatorPermissionId,serviceAdministratorPermissionId,clusterOperatorPermissionId,clusterAdministratorPermissionId,administratorPermissionId);
  List<String> serviceAdministratorAndUp=Arrays.asList(serviceAdministratorPermissionId,clusterOperatorPermissionId,clusterAdministratorPermissionId,administratorPermissionId);
  List<String> clusterOperatorAndUp=Arrays.asList(clusterOperatorPermissionId,clusterAdministratorPermissionId,administratorPermissionId);
  List<String> clusterAdministratorAndUp=Arrays.asList(clusterAdministratorPermissionId,administratorPermissionId);
  List<String> administratorOnly=Arrays.asList(administratorPermissionId);
  Map<String,List<String>> map=new HashMap<String,List<String>>();
  map.put("VIEW.USE",viewUserOnly);
  map.put("SERVICE.VIEW_METRICS",clusterUserAndUp);
  map.put("SERVICE.VIEW_STATUS_INFO",clusterUserAndUp);
  map.put("SERVICE.VIEW_CONFIGS",clusterUserAndUp);
  map.put("SERVICE.COMPARE_CONFIGS",clusterUserAndUp);
  map.put("SERVICE.VIEW_ALERTS",clusterUserAndUp);
  map.put("SERVICE.START_STOP",serviceOperatorAndUp);
  map.put("SERVICE.DECOMMISSION_RECOMMISSION",serviceOperatorAndUp);
  map.put("SERVICE.RUN_SERVICE_CHECK",serviceOperatorAndUp);
  map.put("SERVICE.TOGGLE_MAINTENANCE",serviceOperatorAndUp);
  map.put("SERVICE.RUN_CUSTOM_COMMAND",serviceOperatorAndUp);
  map.put("SERVICE.MODIFY_CONFIGS",serviceAdministratorAndUp);
  map.put("SERVICE.MANAGE_CONFIG_GROUPS",serviceAdministratorAndUp);
  map.put("CLUSTER.MANAGE_CONFIG_GROUPS",serviceAdministratorAndUp);
  map.put("SERVICE.MANAGE_ALERTS",serviceAdministratorAndUp);
  map.put("SERVICE.MOVE",serviceAdministratorAndUp);
  map.put("SERVICE.ENABLE_HA",serviceAdministratorAndUp);
  map.put("SERVICE.TOGGLE_ALERTS",serviceAdministratorAndUp);
  map.put("SERVICE.ADD_DELETE_SERVICES",clusterAdministratorAndUp);
  map.put("HOST.VIEW_METRICS",clusterUserAndUp);
  map.put("HOST.VIEW_STATUS_INFO",clusterUserAndUp);
  map.put("HOST.VIEW_CONFIGS",clusterUserAndUp);
  map.put("HOST.TOGGLE_MAINTENANCE",clusterOperatorAndUp);
  map.put("HOST.ADD_DELETE_COMPONENTS",clusterOperatorAndUp);
  map.put("HOST.ADD_DELETE_HOSTS",clusterOperatorAndUp);
  map.put("CLUSTER.VIEW_METRICS",clusterUserAndUp);
  map.put("CLUSTER.VIEW_STATUS_INFO",clusterUserAndUp);
  map.put("CLUSTER.VIEW_CONFIGS",clusterUserAndUp);
  map.put("CLUSTER.VIEW_STACK_DETAILS",clusterUserAndUp);
  map.put("CLUSTER.VIEW_ALERTS",clusterUserAndUp);
  map.put("CLUSTER.MANAGE_CREDENTIALS",clusterAdministratorAndUp);
  map.put("CLUSTER.MODIFY_CONFIGS",clusterAdministratorAndUp);
  map.put("CLUSTER.MANAGE_ALERTS",clusterAdministratorAndUp);
  map.put("CLUSTER.TOGGLE_ALERTS",clusterAdministratorAndUp);
  map.put("CLUSTER.TOGGLE_KERBEROS",clusterAdministratorAndUp);
  map.put("CLUSTER.UPGRADE_DOWNGRADE_STACK",clusterAdministratorAndUp);
  map.put("AMBARI.ADD_DELETE_CLUSTERS",administratorOnly);
  map.put("AMBARI.SET_SERVICE_USERS_GROUPS",administratorOnly);
  map.put("AMBARI.RENAME_CLUSTER",administratorOnly);
  map.put("AMBARI.MANAGE_USERS",administratorOnly);
  map.put("AMBARI.MANAGE_GROUPS",administratorOnly);
  map.put("AMBARI.MANAGE_VIEWS",administratorOnly);
  map.put("AMBARI.ASSIGN_ROLES",administratorOnly);
  map.put("AMBARI.MANAGE_STACK_VERSIONS",administratorOnly);
  map.put("AMBARI.EDIT_STACK_REPOS",administratorOnly);
  for (  Map.Entry<String,List<String>> entry : map.entrySet()) {
    String authorizationId=entry.getKey();
    for (    String permissionId : entry.getValue()) {
      dbAccessor.insertRow(PERMISSION_ROLE_AUTHORIZATION_TABLE,columnNames,new String[]{permissionId,"'" + authorizationId + "'"},false);
    }
  }
}
