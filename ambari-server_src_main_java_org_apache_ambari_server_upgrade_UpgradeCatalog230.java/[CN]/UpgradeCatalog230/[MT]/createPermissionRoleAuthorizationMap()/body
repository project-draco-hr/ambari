{
  LOG.info("Creating permission to authorizations map");
  PermissionDAO permissionDAO=injector.getInstance(PermissionDAO.class);
  ResourceTypeDAO resourceTypeDAO=injector.getInstance(ResourceTypeDAO.class);
  ResourceTypeEntity ambariResource=resourceTypeDAO.findByName("AMBARI");
  ResourceTypeEntity clusterResource=resourceTypeDAO.findByName("CLUSTER");
  ResourceTypeEntity viewResource=resourceTypeDAO.findByName("VIEW");
  PermissionEntity viewPermission=permissionDAO.findPermissionByNameAndType("VIEW.USER",viewResource);
  PermissionEntity administratorPermission=permissionDAO.findPermissionByNameAndType("AMBARI.ADMINISTRATOR",ambariResource);
  PermissionEntity clusterUserPermission=permissionDAO.findPermissionByNameAndType("CLUSTER.USER",clusterResource);
  PermissionEntity clusterOperatorPermission=permissionDAO.findPermissionByNameAndType("CLUSTER.OPERATOR",clusterResource);
  PermissionEntity clusterAdministratorPermission=permissionDAO.findPermissionByNameAndType("CLUSTER.ADMINISTRATOR",clusterResource);
  PermissionEntity serviceAdministratorPermission=permissionDAO.findPermissionByNameAndType("SERVICE.ADMINISTRATOR",clusterResource);
  PermissionEntity serviceOperatorPermission=permissionDAO.findPermissionByNameAndType("SERVICE.OPERATOR",clusterResource);
  Collection<PermissionEntity> viewUserAndAdministrator=Arrays.asList(viewPermission,administratorPermission);
  Collection<PermissionEntity> clusterUserAndUp=Arrays.asList(clusterUserPermission,serviceOperatorPermission,serviceAdministratorPermission,clusterOperatorPermission,clusterAdministratorPermission,administratorPermission);
  Collection<PermissionEntity> serviceOperatorAndUp=Arrays.asList(serviceOperatorPermission,serviceAdministratorPermission,clusterOperatorPermission,clusterAdministratorPermission,administratorPermission);
  Collection<PermissionEntity> serviceAdministratorAndUp=Arrays.asList(serviceAdministratorPermission,clusterOperatorPermission,clusterAdministratorPermission,administratorPermission);
  Collection<PermissionEntity> clusterOperatorAndUp=Arrays.asList(clusterOperatorPermission,clusterAdministratorPermission,administratorPermission);
  Collection<PermissionEntity> clusterAdministratorAndUp=Arrays.asList(clusterAdministratorPermission,administratorPermission);
  Collection<PermissionEntity> administratorOnly=Collections.singleton(administratorPermission);
  Map<String,Collection<PermissionEntity>> map=new HashMap<String,Collection<PermissionEntity>>();
  map.put("VIEW.USE",viewUserAndAdministrator);
  map.put("SERVICE.VIEW_METRICS",clusterUserAndUp);
  map.put("SERVICE.VIEW_STATUS_INFO",clusterUserAndUp);
  map.put("SERVICE.VIEW_CONFIGS",clusterUserAndUp);
  map.put("SERVICE.COMPARE_CONFIGS",clusterUserAndUp);
  map.put("SERVICE.VIEW_ALERTS",clusterUserAndUp);
  map.put("SERVICE.START_STOP",serviceOperatorAndUp);
  map.put("SERVICE.DECOMMISSION_RECOMMISSION",serviceOperatorAndUp);
  map.put("SERVICE.RUN_SERVICE_CHECK",serviceOperatorAndUp);
  map.put("SERVICE.TOGGLE_MAINTENANCE",serviceOperatorAndUp);
  map.put("SERVICE.RUN_CUSTOM_COMMAND",serviceOperatorAndUp);
  map.put("SERVICE.MODIFY_CONFIGS",serviceAdministratorAndUp);
  map.put("SERVICE.MANAGE_CONFIG_GROUPS",serviceAdministratorAndUp);
  map.put("CLUSTER.MANAGE_CONFIG_GROUPS",serviceAdministratorAndUp);
  map.put("SERVICE.MANAGE_ALERTS",serviceAdministratorAndUp);
  map.put("SERVICE.MOVE",serviceAdministratorAndUp);
  map.put("SERVICE.ENABLE_HA",serviceAdministratorAndUp);
  map.put("SERVICE.TOGGLE_ALERTS",serviceAdministratorAndUp);
  map.put("SERVICE.ADD_DELETE_SERVICES",clusterAdministratorAndUp);
  map.put("SERVICE.SET_SERVICE_USERS_GROUPS",clusterAdministratorAndUp);
  map.put("HOST.VIEW_METRICS",clusterUserAndUp);
  map.put("HOST.VIEW_STATUS_INFO",clusterUserAndUp);
  map.put("HOST.VIEW_CONFIGS",clusterUserAndUp);
  map.put("HOST.TOGGLE_MAINTENANCE",clusterOperatorAndUp);
  map.put("HOST.ADD_DELETE_COMPONENTS",clusterOperatorAndUp);
  map.put("HOST.ADD_DELETE_HOSTS",clusterOperatorAndUp);
  map.put("CLUSTER.VIEW_METRICS",clusterUserAndUp);
  map.put("CLUSTER.VIEW_STATUS_INFO",clusterUserAndUp);
  map.put("CLUSTER.VIEW_CONFIGS",clusterUserAndUp);
  map.put("CLUSTER.VIEW_STACK_DETAILS",clusterUserAndUp);
  map.put("CLUSTER.VIEW_ALERTS",clusterUserAndUp);
  map.put("CLUSTER.MANAGE_CREDENTIALS",clusterAdministratorAndUp);
  map.put("CLUSTER.MODIFY_CONFIGS",clusterAdministratorAndUp);
  map.put("CLUSTER.MANAGE_ALERTS",clusterAdministratorAndUp);
  map.put("CLUSTER.TOGGLE_ALERTS",clusterAdministratorAndUp);
  map.put("CLUSTER.TOGGLE_KERBEROS",clusterAdministratorAndUp);
  map.put("CLUSTER.UPGRADE_DOWNGRADE_STACK",clusterAdministratorAndUp);
  map.put("AMBARI.ADD_DELETE_CLUSTERS",administratorOnly);
  map.put("AMBARI.RENAME_CLUSTER",administratorOnly);
  map.put("AMBARI.MANAGE_USERS",administratorOnly);
  map.put("AMBARI.MANAGE_GROUPS",administratorOnly);
  map.put("AMBARI.MANAGE_VIEWS",administratorOnly);
  map.put("AMBARI.ASSIGN_ROLES",administratorOnly);
  map.put("AMBARI.MANAGE_STACK_VERSIONS",administratorOnly);
  map.put("AMBARI.EDIT_STACK_REPOS",administratorOnly);
  for (  Map.Entry<String,Collection<PermissionEntity>> entry : map.entrySet()) {
    String authorizationId=entry.getKey();
    for (    PermissionEntity permission : entry.getValue()) {
      addAuthorizationToRole(permission,authorizationId);
    }
  }
}
