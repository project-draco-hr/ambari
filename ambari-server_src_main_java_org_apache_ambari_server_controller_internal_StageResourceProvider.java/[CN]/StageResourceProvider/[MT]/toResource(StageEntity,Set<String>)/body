{
  Resource resource=new ResourceImpl(Resource.Type.Stage);
  Long clusterId=entity.getClusterId();
  if (clusterId != null && !clusterId.equals(Long.valueOf(-1L))) {
    try {
      Cluster cluster=clusters.getClusterById(clusterId);
      setResourceProperty(resource,STAGE_CLUSTER_NAME,cluster.getClusterName(),requestedIds);
    }
 catch (    Exception e) {
      LOG.error("Can not get information for cluster " + clusterId + ".",e);
    }
  }
  setResourceProperty(resource,STAGE_STAGE_ID,entity.getStageId(),requestedIds);
  setResourceProperty(resource,STAGE_REQUEST_ID,entity.getRequestId(),requestedIds);
  setResourceProperty(resource,STAGE_CONTEXT,entity.getRequestContext(),requestedIds);
  setResourceProperty(resource,STAGE_CLUSTER_HOST_INFO,entity.getClusterHostInfo(),requestedIds);
  setResourceProperty(resource,STAGE_COMMAND_PARAMS,entity.getCommandParamsStage(),requestedIds);
  setResourceProperty(resource,STAGE_HOST_PARAMS,entity.getHostParamsStage(),requestedIds);
  setResourceProperty(resource,STAGE_SKIPPABLE,entity.isSkippable(),requestedIds);
  Collection<HostRoleCommandEntity> tasks=entity.getHostRoleCommands();
  Long startTime=tasks.isEmpty() ? 0L : Long.MAX_VALUE;
  Long endTime=0L;
  for (  HostRoleCommandEntity task : tasks) {
    startTime=Math.min(task.getStartTime(),startTime);
    endTime=Math.max(task.getEndTime(),endTime);
  }
  setResourceProperty(resource,STAGE_START_TIME,startTime,requestedIds);
  setResourceProperty(resource,STAGE_END_TIME,endTime,requestedIds);
  CalculatedStatus status=CalculatedStatus.statusFromTaskEntities(tasks,entity.isSkippable());
  setResourceProperty(resource,STAGE_PROGRESS_PERCENT,status.getPercent(),requestedIds);
  setResourceProperty(resource,STAGE_STATUS,status.getStatus().toString(),requestedIds);
  return resource;
}
