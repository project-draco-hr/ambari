{
  Set<Resource> results=new LinkedHashSet<Resource>();
  Set<String> propertyIds=getRequestPropertyIds(request,predicate);
  Map<Long,Map<Long,HostRoleCommandStatusSummaryDTO>> cache=new HashMap<Long,Map<Long,HostRoleCommandStatusSummaryDTO>>();
  List<StageEntity> entities=dao.findAll(request,predicate);
  for (  StageEntity entity : entities) {
    results.add(toResource(cache,entity,propertyIds));
  }
  cache.clear();
  Map<String,Object> map=PredicateHelper.getProperties(predicate);
  if (map.containsKey(STAGE_REQUEST_ID)) {
    Long requestId=NumberUtils.toLong(map.get(STAGE_REQUEST_ID).toString());
    LogicalRequest lr=topologyManager.getRequest(requestId);
    if (null != lr) {
      Collection<StageEntity> topologyManagerStages=lr.getStageEntities();
      for (      StageEntity entity : topologyManagerStages) {
        Resource stageResource=toResource(entity,propertyIds);
        if (predicate.evaluate(stageResource)) {
          results.add(stageResource);
        }
      }
    }
  }
 else {
    Collection<StageEntity> topologyManagerStages=topologyManager.getStages();
    for (    StageEntity entity : topologyManagerStages) {
      Resource stageResource=toResource(entity,propertyIds);
      if (predicate.evaluate(stageResource)) {
        results.add(stageResource);
      }
    }
  }
  return results;
}
