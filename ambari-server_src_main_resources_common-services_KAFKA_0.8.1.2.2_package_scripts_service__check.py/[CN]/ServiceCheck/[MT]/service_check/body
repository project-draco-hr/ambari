def service_check(self, env):
    import params
    env.set_params(params)
    kafka_config = self.read_kafka_config()
    topic = 'ambari_kafka_service_check'
    create_topic_cmd_created_output = 'Created topic "ambari_kafka_service_check".'
    create_topic_cmd_exists_output = 'Topic "ambari_kafka_service_check" already exists.'
    source_cmd = format('source {conf_dir}/kafka-env.sh')
    topic_exists_cmd = format('{kafka_home}/bin/kafka-topics.sh --zookeeper {kafka_config[zookeeper.connect]} --topic {topic} --list')
    topic_exists_cmd_p = subprocess.Popen(topic_exists_cmd.split(' '), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (topic_exists_cmd_out, topic_exists_cmd_err) = topic_exists_cmd_p.communicate()
    if (topic not in topic_exists_cmd_out):
        create_topic_cmd = format('{kafka_home}/bin/kafka-topics.sh --zookeeper {kafka_config[zookeeper.connect]} --create --topic {topic} --partitions 1 --replication-factor 1')
        command = ((source_cmd + ' ; ') + create_topic_cmd)
        Logger.info(('Running kafka create topic command: %s' % command))
        call_and_match_output(command, format('({create_topic_cmd_created_output})|({create_topic_cmd_exists_output})'), 'Failed to check that topic exists', user=params.kafka_user)
