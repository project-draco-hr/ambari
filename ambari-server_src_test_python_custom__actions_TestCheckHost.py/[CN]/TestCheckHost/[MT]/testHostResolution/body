@patch('socket.gethostbyname')
@patch.object(Script, 'get_config')
@patch.object(Script, 'get_tmp_dir')
@patch('resource_management.libraries.script.Script.put_structured_out')
def testHostResolution(self, structured_out_mock, get_tmp_dir_mock, mock_config, mock_socket):
    mock_socket.return_value = '192.168.1.1'
    jsonFilePath = os.path.join('../resources/custom_actions', 'check_host_ip_addresses.json')
    with open(jsonFilePath, 'r') as jsonFile:
        jsonPayload = json.load(jsonFile)
    mock_config.return_value = ConfigDictionary(jsonPayload)
    get_tmp_dir_mock.return_value = '/tmp'
    checkHost = CheckHost()
    checkHost.actionexecute(None)
    self.assertTrue(structured_out_mock.called)
    structured_out_mock.assert_called_with({'host_resolution_check': {'failures': [], 'message': 'All hosts resolved to an IP address.', 'failed_count': 0, 'success_count': 5, 'exit_code': 0, }, })
    mock_socket.side_effect = socket.error
    checkHost.actionexecute(None)
    structured_out_mock.assert_called_with({'host_resolution_check': {'failures': [{'cause': (), 'host': u'c6401.ambari.apache.org', 'type': 'FORWARD_LOOKUP', }, {'cause': (), 'host': u'c6402.ambari.apache.org', 'type': 'FORWARD_LOOKUP', }, {'cause': (), 'host': u'c6403.ambari.apache.org', 'type': 'FORWARD_LOOKUP', }, {'cause': (), 'host': u'foobar', 'type': 'FORWARD_LOOKUP', }, {'cause': (), 'host': u'!!!', 'type': 'FORWARD_LOOKUP', }], 'message': 'There were 5 host(s) that could not resolve to an IP address.', 'failed_count': 5, 'success_count': 0, 'exit_code': 0, }, })
