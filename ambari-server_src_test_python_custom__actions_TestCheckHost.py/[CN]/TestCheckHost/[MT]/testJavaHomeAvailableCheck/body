@patch.object(OSCheck, 'os_distribution', new=MagicMock(return_value=os_distro_value))
@patch('os.path.isfile')
@patch.object(Script, 'get_config')
@patch.object(Script, 'get_tmp_dir')
@patch('resource_management.libraries.script.Script.put_structured_out')
def testJavaHomeAvailableCheck(self, structured_out_mock, get_tmp_dir_mock, mock_config, os_isfile_mock):
    os_isfile_mock.return_value = True
    get_tmp_dir_mock.return_value = '/tmp'
    mock_config.return_value = {'commandParams': {'check_execute_list': 'java_home_check', 'java_home': 'test_java_home', }, }
    checkHost = CheckHost()
    checkHost.actionexecute(None)
    print os_isfile_mock.call_args
    self.assertEquals(os_isfile_mock.call_args[0][0], '/tmp/ambari-agent/hostcheck_custom_actions.result')
    self.assertEquals(structured_out_mock.call_args[0][0], {'java_home_check': {'message': 'Java home exists!', 'exit_code': 0, }, })
    os_isfile_mock.reset_mock()
    os_isfile_mock.return_value = False
    checkHost.actionexecute(None)
    self.assertEquals(os_isfile_mock.call_args[0][0], '/tmp/ambari-agent/hostcheck_custom_actions.result')
    self.assertEquals(structured_out_mock.call_args[0][0], {'java_home_check': {'message': "Java home doesn't exist!", 'exit_code': 1, }, })
