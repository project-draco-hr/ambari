{
  JsonObject sourceJson=new JsonParser().parse(source).getAsJsonObject();
  JsonArray parametersJson=sourceJson.getAsJsonArray("parameters");
  boolean parameterExists=parametersJson != null && !parametersJson.isJsonNull();
  if (parameterExists) {
    Iterator<JsonElement> jsonElementIterator=parametersJson.iterator();
    while (jsonElementIterator.hasNext()) {
      JsonElement element=jsonElementIterator.next();
      JsonElement name=element.getAsJsonObject().get("name");
      if (name != null && !name.isJsonNull() && name.getAsString().equals("check.command.timeout")) {
        return sourceJson.toString();
      }
    }
  }
  JsonObject checkCommandTimeoutParamJson=new JsonObject();
  checkCommandTimeoutParamJson.add("name",new JsonPrimitive("check.command.timeout"));
  checkCommandTimeoutParamJson.add("display_name",new JsonPrimitive("Check command timeout"));
  checkCommandTimeoutParamJson.add("value",new JsonPrimitive(60.0));
  checkCommandTimeoutParamJson.add("type",new JsonPrimitive("NUMERIC"));
  checkCommandTimeoutParamJson.add("description",new JsonPrimitive("The maximum time before check command will be killed by timeout"));
  checkCommandTimeoutParamJson.add("units",new JsonPrimitive("seconds"));
  if (!parameterExists) {
    parametersJson=new JsonArray();
    parametersJson.add(checkCommandTimeoutParamJson);
    sourceJson.add("parameters",parametersJson);
  }
 else {
    parametersJson.add(checkCommandTimeoutParamJson);
    sourceJson.remove("parameters");
    sourceJson.add("parameters",parametersJson);
  }
  return sourceJson.toString();
}
