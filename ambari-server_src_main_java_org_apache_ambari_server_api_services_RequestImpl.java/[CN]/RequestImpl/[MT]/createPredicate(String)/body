{
  Matcher m=m_pattern.matcher(token);
  m.find();
  PropertyId propertyId=PropertyHelper.getPropertyId(token.substring(0,m.start()));
  String value=token.substring(m.end());
  String operator=m.group();
  if (operator.equals("=")) {
    return new EqualsPredicate(propertyId,value);
  }
 else   if (operator.equals("!=")) {
    return new NotPredicate(new EqualsPredicate(propertyId,value));
  }
 else   if (operator.equals("<")) {
    return new LessPredicate(propertyId,value);
  }
 else   if (operator.equals(">")) {
    return new GreaterPredicate(propertyId,value);
  }
 else   if (operator.equals("<=")) {
    return new LessEqualsPredicate(propertyId,value);
  }
 else   if (operator.equals(">=")) {
    return new GreaterEqualsPredicate(propertyId,value);
  }
 else {
    throw new RuntimeException("Unknown operator provided in predicate: " + operator);
  }
}
