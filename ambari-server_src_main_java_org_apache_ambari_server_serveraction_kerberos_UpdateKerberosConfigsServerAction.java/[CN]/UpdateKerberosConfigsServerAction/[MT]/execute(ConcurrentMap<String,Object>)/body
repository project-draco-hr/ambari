{
  CommandReport commandReport=null;
  String clusterName=getExecutionCommand().getClusterName();
  Clusters clusters=controller.getClusters();
  Cluster cluster=clusters.getCluster(clusterName);
  String dataDir=getCommandParameterValue(getCommandParameters(),KerberosServerAction.DATA_DIRECTORY);
  File indexFile=new File(dataDir + File.separator + KerberosActionDataFile.DATA_FILE_NAME);
  File configFile=new File(dataDir + File.separator + KerberosConfigDataFile.DATA_FILE_NAME);
  KerberosActionDataFileReader indexReader=null;
  KerberosConfigDataFileReader configReader=null;
  try {
    indexReader=new KerberosActionDataFileReader(indexFile);
    Iterator<Map<String,String>> indexRecords=indexReader.iterator();
    while (indexRecords.hasNext()) {
      Map<String,String> record=indexRecords.next();
      String hostName=record.get(KerberosActionDataFile.HOSTNAME);
      String principal=record.get(KerberosActionDataFile.PRINCIPAL);
      String principalConfig=record.get(KerberosActionDataFile.PRINCIPAL_CONFIGURATION);
      String[] principalTokens=principalConfig.split("/");
      if (principalTokens.length == 2) {
        String principalConfigType=principalTokens[0];
        String principalConfigProp=principalTokens[1];
        addConfigTypePropVal(principalConfigType,principalConfigProp,principal);
      }
      String keytabPath=record.get(KerberosActionDataFile.KEYTAB_FILE_PATH);
      String keytabConfig=record.get(KerberosActionDataFile.KEYTAB_FILE_CONFIGURATION);
      String[] keytabTokens=keytabConfig.split("/");
      if (keytabTokens.length == 2) {
        String keytabConfigType=keytabTokens[0];
        String keytabConfigProp=keytabTokens[1];
        addConfigTypePropVal(keytabConfigType,keytabConfigProp,keytabPath);
      }
    }
    configReader=new KerberosConfigDataFileReader(configFile);
    Iterator<Map<String,String>> configRecords=configReader.iterator();
    while (configRecords.hasNext()) {
      Map<String,String> record=configRecords.next();
      String configType=record.get(KerberosConfigDataFile.CONFIGURATION_TYPE);
      String configKey=record.get(KerberosConfigDataFile.KEY);
      String configVal=record.get(KerberosConfigDataFile.VALUE);
      addConfigTypePropVal(configType,configKey,configVal);
    }
    for (    Map.Entry<String,Map<String,String>> entry : configtypesPropsVal.entrySet()) {
      Map<String,String> properties=entry.getValue();
      updateConfigurationPropertiesForCluster(cluster,entry.getKey(),properties,true,true,"update services configs to enable kerberos");
    }
  }
 catch (  IOException e) {
    String message="Could not update services configs to enable kerberos";
    LOG.error(message,e);
    commandReport=createCommandReport(1,HostRoleStatus.FAILED,"{}","",message);
  }
 finally {
    if (indexReader != null && !indexReader.isClosed()) {
      try {
        indexReader.close();
      }
 catch (      Throwable t) {
      }
    }
    if (configReader != null && !configReader.isClosed()) {
      try {
        configReader.close();
      }
 catch (      Throwable t) {
      }
    }
  }
  return (commandReport == null) ? createCommandReport(0,HostRoleStatus.COMPLETED,"{}",null,null) : commandReport;
}
