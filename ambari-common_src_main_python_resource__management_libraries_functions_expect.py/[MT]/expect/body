def expect(name, expected_type, default_value=None):
    '\n  Expect configuration to be of certain type. If it is not, give a reasonable error message to user.\n  \n  Optionally if the configuration is not found default_value for it can be returned.\n  '
    subdicts = filter(None, name.split('/'))
    curr_dict = Script.get_config()
    for x in subdicts:
        if (x in curr_dict):
            curr_dict = curr_dict[x]
        else:
            if default_value:
                return default_value
            return UnknownConfiguration(curr_dict[(-1)])
    value = curr_dict
    if (expected_type == bool):
        if isinstance(value, bool):
            return value
        elif isinstance(value, basestring):
            if ((value != None) and (value.lower() == 'true')):
                value = True
            elif ((value != None) and (value.lower() == 'false')):
                value = False
            else:
                raise Fail("Configuration {0} expected to be boolean (true or false), but found '{1}'".format(name, value))
        else:
            type_name = type(value).__name__
            raise Fail("Configuration {0} expected to be boolean (true or false), but found instance of unknown type '{1}'".format(name, type_name))
    elif (expected_type in [int, long, float]):
        try:
            value = expected_type(value)
        except (ValueError, TypeError):
            raise Fail("Configuration {0} expected to be number, but found '{1}'".format(name, value))
    return value
