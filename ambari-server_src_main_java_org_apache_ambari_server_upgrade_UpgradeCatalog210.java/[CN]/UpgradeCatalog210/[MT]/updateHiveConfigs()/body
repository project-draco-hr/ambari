{
  AmbariManagementController ambariManagementController=injector.getInstance(AmbariManagementController.class);
  Clusters clusters=ambariManagementController.getClusters();
  if (clusters != null) {
    Map<String,Cluster> clusterMap=clusters.getClusters();
    if (clusterMap != null && !clusterMap.isEmpty()) {
      for (      final Cluster cluster : clusterMap.values()) {
        String content=null;
        if (cluster.getDesiredConfigByType("hive-env") != null) {
          Map<String,String> hiveEnvProps=new HashMap<String,String>();
          Set<String> hiveServerSiteRemoveProps=new HashSet<String>();
          content=cluster.getDesiredConfigByType("hive-env").getProperties().get("content");
          if (content != null) {
            content=updateHiveEnvContent(content);
            hiveEnvProps.put("content",content);
          }
          if (!cluster.getDesiredConfigByType("hive-env").getProperties().containsKey("hive.client.heapsize")) {
            hiveEnvProps.put("hive.client.heapsize","512");
          }
          if (!cluster.getDesiredConfigByType("hive-env").getProperties().containsKey("hive.metastore.heapsize")) {
            hiveEnvProps.put("hive.metastore.heapsize","1024");
          }
          if (cluster.getDesiredConfigByType("hive-env").getProperties().containsKey("hive_security_authorization") && "none".equalsIgnoreCase(cluster.getDesiredConfigByType("hive-env").getProperties().get("hive_security_authorization"))) {
            hiveServerSiteRemoveProps.add("hive.security.authorization.manager");
            hiveServerSiteRemoveProps.add("hive.security.authenticator.manager");
          }
          updateConfigurationPropertiesForCluster(cluster,"hive-env",hiveEnvProps,true,true);
          updateConfigurationPropertiesForCluster(cluster,"hiveserver2-site",new HashMap<String,String>(),hiveServerSiteRemoveProps,false,true);
        }
        if (cluster.getDesiredConfigByType("hive-site") != null) {
          Set<String> hiveSiteRemoveProps=new HashSet<String>();
          Map<String,String> hiveSiteAddProps=new HashMap<String,String>();
          String hive_server2_auth="";
          if (cluster.getDesiredConfigByType("hive-site").getProperties().containsKey("hive.server2.authentication")) {
            hive_server2_auth=cluster.getDesiredConfigByType("hive-site").getProperties().get("hive.server2.authentication");
          }
          if (!"pam".equalsIgnoreCase(hive_server2_auth)) {
            hiveSiteRemoveProps.add("hive.server2.authentication.pam.services");
          }
 else {
            hiveSiteAddProps.put("hive.server2.authentication.pam.services","");
          }
          if (!"custom".equalsIgnoreCase(hive_server2_auth)) {
            hiveSiteRemoveProps.add("hive.server2.custom.authentication.class");
          }
 else {
            hiveSiteAddProps.put("hive.server2.custom.authentication.class","");
          }
          if (!"ldap".equalsIgnoreCase(hive_server2_auth)) {
            hiveSiteRemoveProps.add("hive.server2.authentication.ldap.url");
            hiveSiteRemoveProps.add("hive.server2.authentication.ldap.baseDN");
          }
 else {
            hiveSiteAddProps.put("hive.server2.authentication.ldap.url","");
            hiveSiteAddProps.put("hive.server2.authentication.ldap.baseDN","");
          }
          if (!"kerberos".equalsIgnoreCase(hive_server2_auth) && !cluster.getServices().containsKey("KERBEROS")) {
            hiveSiteRemoveProps.add("hive.server2.authentication.kerberos.keytab");
            hiveSiteRemoveProps.add("hive.server2.authentication.kerberos.principal");
          }
 else {
            hiveSiteAddProps.put("hive.server2.authentication.kerberos.keytab","");
            hiveSiteAddProps.put("hive.server2.authentication.kerberos.principal","");
          }
          updateConfigurationPropertiesForCluster(cluster,"hive-site",hiveSiteAddProps,hiveSiteRemoveProps,false,true);
        }
      }
    }
  }
}
