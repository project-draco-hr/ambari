{
  AmbariManagementController ambariManagementController=injector.getInstance(AmbariManagementController.class);
  Clusters clusters=ambariManagementController.getClusters();
  if (clusters != null) {
    Map<String,Cluster> clusterMap=clusters.getClusters();
    if (clusterMap != null && !clusterMap.isEmpty()) {
      for (      final Cluster cluster : clusterMap.values()) {
        if (cluster.getDesiredConfigByType("hbase-site") != null && cluster.getDesiredConfigByType("hbase-env") != null) {
          Map<String,String> hbaseEnvProps=new HashMap<String,String>();
          Map<String,String> hbaseSiteProps=new HashMap<String,String>();
          Set<String> hbaseEnvRemoveProps=new HashSet<String>();
          Set<String> hbaseSiteRemoveProps=new HashSet<String>();
          if (cluster.getDesiredConfigByType("hbase-site").getProperties().containsKey("hbase.region.server.rpc.scheduler.factory.class") && "org.apache.phoenix.hbase.index.ipc.PhoenixIndexRpcSchedulerFactory".equals(cluster.getDesiredConfigByType("hbase-site").getProperties().get("hbase.region.server.rpc.scheduler.factory.class"))) {
            hbaseEnvProps.put("phoenix_sql_enabled","true");
          }
          if (cluster.getDesiredConfigByType("hbase-env").getProperties().containsKey("phoenix_sql_enabled") && "true".equalsIgnoreCase(cluster.getDesiredConfigByType("hbase-env").getProperties().get("phoenix_sql_enabled"))) {
            hbaseSiteProps.put("hbase.regionserver.wal.codec","org.apache.hadoop.hbase.regionserver.wal.IndexedWALEditCodec");
            hbaseSiteProps.put("phoenix.functions.allowUserDefinedFunctions","true");
          }
 else {
            hbaseSiteProps.put("hbase.regionserver.wal.codec","org.apache.hadoop.hbase.regionserver.wal.WALCellCodec");
            hbaseSiteRemoveProps.add("hbase.rpc.controllerfactory.class");
            hbaseSiteRemoveProps.add("phoenix.functions.allowUserDefinedFunctions");
          }
          if (cluster.getDesiredConfigByType("hbase-site").getProperties().containsKey("hbase.security.authorization")) {
            if ("true".equalsIgnoreCase(cluster.getDesiredConfigByType("hbase-site").getProperties().get("hbase.security.authorization"))) {
              hbaseSiteProps.put("hbase.coprocessor.master.classes","org.apache.hadoop.hbase.security.access.AccessController");
              hbaseSiteProps.put("hbase.coprocessor.regionserver.classes","org.apache.hadoop.hbase.security.access.AccessController");
            }
 else {
              hbaseSiteProps.put("hbase.coprocessor.master.classes","");
              hbaseSiteRemoveProps.add("hbase.coprocessor.regionserver.classes");
            }
          }
 else {
            hbaseSiteRemoveProps.add("hbase.coprocessor.regionserver.classes");
          }
          updateConfigurationPropertiesForCluster(cluster,"hbase-site",hbaseSiteProps,true,false);
          updateConfigurationPropertiesForCluster(cluster,"hbase-env",hbaseEnvProps,true,false);
          updateConfigurationPropertiesForCluster(cluster,"hbase-site",new HashMap<String,String>(),hbaseSiteRemoveProps,false,true);
          updateConfigurationPropertiesForCluster(cluster,"hbase-env",new HashMap<String,String>(),hbaseEnvRemoveProps,false,true);
        }
      }
    }
  }
}
