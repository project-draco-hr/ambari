{
  Configuration.DatabaseType databaseType=configuration.getDatabaseType();
  String randomHostName=null;
  if (dbAccessor.tableHasData(HOST_ROLE_COMMAND_TABLE)) {
    randomHostName=getRandomHostName();
    if (StringUtils.isBlank(randomHostName)) {
      throw new AmbariException("UpgradeCatalog210 could not retrieve a random host_name from the hosts table while running executeHostsDDLUpdates.");
    }
  }
  dbAccessor.addColumn(HOSTS_TABLE,new DBColumnInfo(HOST_ID_COL,Long.class,null,null,true));
  Long hostId=0L;
  ResultSet resultSet=null;
  try {
    resultSet=dbAccessor.executeSelect("SELECT host_name, host_id FROM hosts ORDER BY host_id ASC, host_name ASC");
    hostId=populateHostsId(resultSet);
  }
  finally {
    if (resultSet != null) {
      resultSet.close();
    }
  }
  dbAccessor.executeQuery("INSERT INTO ambari_sequences (sequence_name, sequence_value) VALUES ('host_id_seq', " + hostId + ")");
  if (databaseType == Configuration.DatabaseType.DERBY) {
    dbAccessor.executeQuery("ALTER TABLE " + HOSTS_TABLE + " ALTER column "+ HOST_ID_COL+ " NOT NULL");
  }
 else {
    dbAccessor.alterColumn(HOSTS_TABLE,new DBColumnInfo(HOST_ID_COL,Long.class,null,null,false));
  }
  if (databaseType == Configuration.DatabaseType.DERBY) {
    dbAccessor.executeQuery("ALTER TABLE " + HOST_COMPONENT_STATE_TABLE + " DROP CONSTRAINT hostcomponentstate_host_name");
    dbAccessor.executeQuery("ALTER TABLE " + HOST_COMPONENT_DESIRED_STATE_TABLE + " DROP CONSTRAINT hstcmponentdesiredstatehstname");
    dbAccessor.executeQuery("ALTER TABLE " + HOST_ROLE_COMMAND_TABLE + " DROP CONSTRAINT FK_host_role_command_host_name");
    dbAccessor.executeQuery("ALTER TABLE " + HOST_STATE_TABLE + " DROP CONSTRAINT FK_hoststate_host_name");
    dbAccessor.executeQuery("ALTER TABLE " + HOST_VERSION_TABLE + " DROP CONSTRAINT FK_host_version_host_name");
    dbAccessor.executeQuery("ALTER TABLE " + CONFIG_GROUP_HOST_MAPPING_TABLE + " DROP CONSTRAINT FK_cghm_hname");
    dbAccessor.executeQuery("ALTER TABLE " + KERBEROS_PRINCIPAL_HOST_TABLE + " DROP CONSTRAINT FK_krb_pr_host_hostname");
    dbAccessor.executeQuery("ALTER TABLE " + KERBEROS_PRINCIPAL_HOST_TABLE + " DROP CONSTRAINT FK_krb_pr_host_principalname");
    dbAccessor.executeQuery("ALTER TABLE " + HOST_CONFIG_MAPPING_TABLE + " DROP CONSTRAINT FK_hostconfigmapping_host_name");
  }
 else {
    dbAccessor.dropConstraint(HOST_COMPONENT_STATE_TABLE,"hostcomponentstate_host_name");
    dbAccessor.dropConstraint(HOST_COMPONENT_STATE_TABLE,"fk_hostcomponentstate_host_name");
    dbAccessor.dropConstraint(HOST_COMPONENT_DESIRED_STATE_TABLE,"hstcmponentdesiredstatehstname");
    dbAccessor.dropConstraint(HOST_COMPONENT_DESIRED_STATE_TABLE,"fk_hostcomponentdesiredstate_host_name");
    dbAccessor.dropConstraint(HOST_ROLE_COMMAND_TABLE,"FK_host_role_command_host_name");
    dbAccessor.dropConstraint(HOST_STATE_TABLE,"FK_hoststate_host_name");
    dbAccessor.dropConstraint(HOST_VERSION_TABLE,"FK_host_version_host_name");
    dbAccessor.dropConstraint(CONFIG_GROUP_HOST_MAPPING_TABLE,"FK_cghm_hname");
    dbAccessor.dropConstraint(CONFIG_GROUP_HOST_MAPPING_TABLE,"fk_configgrouphostmapping_host_name");
    dbAccessor.dropConstraint(KERBEROS_PRINCIPAL_HOST_TABLE,"FK_krb_pr_host_hostname");
    dbAccessor.dropConstraint(KERBEROS_PRINCIPAL_HOST_TABLE,"fk_kerberos_principal_host_host_name");
    dbAccessor.executeQuery("ALTER TABLE " + KERBEROS_PRINCIPAL_HOST_TABLE + " DROP CONSTRAINT FK_krb_pr_host_principalname");
    dbAccessor.dropConstraint(HOST_CONFIG_MAPPING_TABLE,"FK_hostconfmapping_host_name");
  }
  try {
    dbAccessor.dropConstraint(CLUSTER_HOST_MAPPING_TABLE,"ClusterHostMapping_host_name",true);
    dbAccessor.dropConstraint(CLUSTER_HOST_MAPPING_TABLE,"fk_clusterhostmapping_host_name",true);
  }
 catch (  Exception e) {
    LOG.warn("Performed best attempt at deleting FK ClusterHostMapping_host_name. " + "It is possible it did not exist or the deletion failed. " + e.getMessage());
  }
  try {
    dbAccessor.dropConstraint(CLUSTER_HOST_MAPPING_TABLE,"ClusterHostMapping_cluster_id",true);
  }
 catch (  Exception e) {
    LOG.warn("Performed best attempt at deleting FK ClusterHostMapping_cluster_id. " + "It is possible it did not exist or the deletion failed. " + e.getMessage());
  }
  dbAccessor.addFKConstraint(CLUSTER_HOST_MAPPING_TABLE,"FK_clhostmapping_cluster_id","cluster_id",CLUSTERS_TABLE,"cluster_id",false);
  if (databaseType == Configuration.DatabaseType.DERBY) {
    String constraintName=getDerbyTableConstraintName("p",HOSTS_TABLE);
    if (null != constraintName) {
      dbAccessor.executeQuery("ALTER TABLE " + HOSTS_TABLE + " DROP CONSTRAINT "+ constraintName+ " CASCADE");
    }
  }
 else {
    dbAccessor.executeQuery("ALTER TABLE " + HOSTS_TABLE + " DROP CONSTRAINT hosts_pkey");
  }
  dbAccessor.executeQuery("ALTER TABLE " + HOSTS_TABLE + " ADD CONSTRAINT PK_hosts_id PRIMARY KEY (host_id)");
  dbAccessor.executeQuery("ALTER TABLE " + HOSTS_TABLE + " ADD CONSTRAINT UQ_hosts_host_name UNIQUE (host_name)");
  String[] tablesToAddHostID=new String[]{CONFIG_GROUP_HOST_MAPPING_TABLE,CLUSTER_HOST_MAPPING_TABLE,HOST_CONFIG_MAPPING_TABLE,HOST_COMPONENT_STATE_TABLE,HOST_COMPONENT_DESIRED_STATE_TABLE,HOST_ROLE_COMMAND_TABLE,HOST_STATE_TABLE,HOST_VERSION_TABLE,KERBEROS_PRINCIPAL_HOST_TABLE,REQUEST_OPERATION_LEVEL_TABLE,SERVICE_CONFIG_HOSTS_TABLE};
  for (  String tableName : tablesToAddHostID) {
    dbAccessor.addColumn(tableName,new DBColumnInfo(HOST_ID_COL,Long.class,null,null,true));
    String hostNameColumnName=tableName == SERVICE_CONFIG_HOSTS_TABLE ? "hostname" : "host_name";
    if (dbAccessor.tableHasData(tableName)) {
      dbAccessor.executeQuery("UPDATE " + tableName + " t SET host_id = (SELECT host_id FROM hosts h WHERE h.host_name = t."+ hostNameColumnName+ ") WHERE t.host_id IS NULL AND t."+ hostNameColumnName+ " IS NOT NULL");
      if (tableName == HOST_ROLE_COMMAND_TABLE && StringUtils.isNotBlank(randomHostName)) {
        dbAccessor.executeQuery("UPDATE " + tableName + " t SET host_id = (SELECT host_id FROM hosts h WHERE h.host_name = '"+ randomHostName+ "') WHERE t.host_id IS NULL AND t.host_name = 'none'");
      }
    }
    if (tableName != REQUEST_OPERATION_LEVEL_TABLE) {
      if (databaseType == Configuration.DatabaseType.DERBY) {
        dbAccessor.executeQuery("ALTER TABLE " + tableName + " ALTER column "+ HOST_ID_COL+ " NOT NULL");
      }
 else {
        dbAccessor.executeQuery("ALTER TABLE " + tableName + " ALTER column "+ HOST_ID_COL+ " SET NOT NULL");
      }
    }
  }
  dbAccessor.addFKConstraint(CONFIG_GROUP_HOST_MAPPING_TABLE,"FK_cghm_host_id","host_id",HOSTS_TABLE,"host_id",false);
  dbAccessor.addFKConstraint(CLUSTER_HOST_MAPPING_TABLE,"FK_clusterhostmapping_host_id","host_id",HOSTS_TABLE,"host_id",false);
  dbAccessor.addFKConstraint(HOST_CONFIG_MAPPING_TABLE,"FK_hostconfmapping_host_id","host_id",HOSTS_TABLE,"host_id",false);
  dbAccessor.addFKConstraint(HOST_COMPONENT_STATE_TABLE,"FK_hostcomponentstate_host_id","host_id",HOSTS_TABLE,"host_id",false);
  dbAccessor.addFKConstraint(HOST_COMPONENT_DESIRED_STATE_TABLE,"FK_hcdesiredstate_host_id","host_id",HOSTS_TABLE,"host_id",false);
  dbAccessor.addFKConstraint(HOST_ROLE_COMMAND_TABLE,"FK_host_role_command_host_id","host_id",HOSTS_TABLE,"host_id",false);
  dbAccessor.addFKConstraint(HOST_STATE_TABLE,"FK_hoststate_host_id","host_id",HOSTS_TABLE,"host_id",false);
  dbAccessor.addFKConstraint(KERBEROS_PRINCIPAL_HOST_TABLE,"FK_krb_pr_host_id","host_id",HOSTS_TABLE,"host_id",false);
  dbAccessor.addFKConstraint(KERBEROS_PRINCIPAL_HOST_TABLE,"FK_krb_pr_host_principalname","principal_name",KERBEROS_PRINCIPAL_TABLE,"principal_name",false);
  dbAccessor.addFKConstraint(SERVICE_CONFIG_HOSTS_TABLE,"FK_scvhosts_host_id","host_id",HOSTS_TABLE,"host_id",false);
  String[] tablesWithHostNameInPK=new String[]{CONFIG_GROUP_HOST_MAPPING_TABLE,CLUSTER_HOST_MAPPING_TABLE,HOST_CONFIG_MAPPING_TABLE,HOST_COMPONENT_STATE_TABLE,HOST_COMPONENT_DESIRED_STATE_TABLE,HOST_STATE_TABLE,KERBEROS_PRINCIPAL_HOST_TABLE,SERVICE_CONFIG_HOSTS_TABLE};
  if (databaseType == Configuration.DatabaseType.DERBY) {
    for (    String tableName : tablesWithHostNameInPK) {
      String constraintName=getDerbyTableConstraintName("p",tableName);
      if (null != constraintName) {
        dbAccessor.executeQuery("ALTER TABLE " + tableName + " DROP CONSTRAINT "+ constraintName);
      }
    }
  }
 else {
    dbAccessor.executeQuery("ALTER TABLE " + CONFIG_GROUP_HOST_MAPPING_TABLE + " DROP CONSTRAINT configgrouphostmapping_pkey");
    dbAccessor.executeQuery("ALTER TABLE " + CLUSTER_HOST_MAPPING_TABLE + " DROP CONSTRAINT clusterhostmapping_pkey");
    dbAccessor.executeQuery("ALTER TABLE " + HOST_CONFIG_MAPPING_TABLE + " DROP CONSTRAINT hostconfigmapping_pkey");
    dbAccessor.executeQuery("ALTER TABLE " + HOST_COMPONENT_STATE_TABLE + " DROP CONSTRAINT hostcomponentstate_pkey");
    dbAccessor.executeQuery("ALTER TABLE " + HOST_COMPONENT_DESIRED_STATE_TABLE + " DROP CONSTRAINT hostcomponentdesiredstate_pkey");
    dbAccessor.executeQuery("ALTER TABLE " + HOST_STATE_TABLE + " DROP CONSTRAINT hoststate_pkey");
    dbAccessor.executeQuery("ALTER TABLE " + KERBEROS_PRINCIPAL_HOST_TABLE + " DROP CONSTRAINT kerberos_principal_host_pkey");
    dbAccessor.executeQuery("ALTER TABLE " + SERVICE_CONFIG_HOSTS_TABLE + " DROP CONSTRAINT serviceconfighosts_pkey");
  }
  dbAccessor.executeQuery("ALTER TABLE " + CONFIG_GROUP_HOST_MAPPING_TABLE + " ADD CONSTRAINT configgrouphostmapping_pkey PRIMARY KEY (config_group_id, host_id)");
  dbAccessor.executeQuery("ALTER TABLE " + CLUSTER_HOST_MAPPING_TABLE + " ADD CONSTRAINT clusterhostmapping_pkey PRIMARY KEY (cluster_id, host_id)");
  dbAccessor.executeQuery("ALTER TABLE " + HOST_CONFIG_MAPPING_TABLE + " ADD CONSTRAINT hostconfigmapping_pkey PRIMARY KEY (cluster_id, host_id, type_name, create_timestamp)");
  dbAccessor.executeQuery("ALTER TABLE " + HOST_COMPONENT_STATE_TABLE + " ADD CONSTRAINT hostcomponentstate_pkey PRIMARY KEY (cluster_id, component_name, host_id, service_name)");
  dbAccessor.executeQuery("ALTER TABLE " + HOST_COMPONENT_DESIRED_STATE_TABLE + " ADD CONSTRAINT hostcomponentdesiredstate_pkey PRIMARY KEY (cluster_id, component_name, host_id, service_name)");
  dbAccessor.executeQuery("ALTER TABLE " + HOST_STATE_TABLE + " ADD CONSTRAINT hoststate_pkey PRIMARY KEY (host_id)");
  dbAccessor.executeQuery("ALTER TABLE " + KERBEROS_PRINCIPAL_HOST_TABLE + " ADD CONSTRAINT kerberos_principal_host_pkey PRIMARY KEY (principal_name, host_id)");
  dbAccessor.executeQuery("ALTER TABLE " + SERVICE_CONFIG_HOSTS_TABLE + " ADD CONSTRAINT serviceconfighosts_pkey PRIMARY KEY (service_config_id, host_id)");
  dbAccessor.dropColumn(CONFIG_GROUP_HOST_MAPPING_TABLE,HOST_NAME_COL);
  dbAccessor.dropColumn(CLUSTER_HOST_MAPPING_TABLE,HOST_NAME_COL);
  dbAccessor.dropColumn(HOST_CONFIG_MAPPING_TABLE,HOST_NAME_COL);
  dbAccessor.dropColumn(HOST_COMPONENT_STATE_TABLE,HOST_NAME_COL);
  dbAccessor.dropColumn(HOST_COMPONENT_DESIRED_STATE_TABLE,HOST_NAME_COL);
  dbAccessor.dropColumn(HOST_ROLE_COMMAND_TABLE,HOST_NAME_COL);
  dbAccessor.dropColumn(HOST_STATE_TABLE,HOST_NAME_COL);
  dbAccessor.dropColumn(HOST_VERSION_TABLE,HOST_NAME_COL);
  dbAccessor.dropColumn(KERBEROS_PRINCIPAL_HOST_TABLE,HOST_NAME_COL);
  dbAccessor.dropColumn(REQUEST_OPERATION_LEVEL_TABLE,HOST_NAME_COL);
  dbAccessor.dropColumn(SERVICE_CONFIG_HOSTS_TABLE,"hostname");
  dbAccessor.addColumn(VIEW_INSTANCE_TABLE,new DBColumnInfo("cluster_handle",String.class,255,null,true));
  dbAccessor.addColumn(VIEW_PARAMETER_TABLE,new DBColumnInfo("cluster_config",String.class,255,null,true));
  String UPDATE_TEMPLATE="UPDATE {0} SET {1} = lower({1})";
  removeDuplicateHosts();
  String updateHostName=MessageFormat.format(UPDATE_TEMPLATE,HOSTS_TABLE,HOST_NAME_COL);
  dbAccessor.executeQuery(updateHostName);
  String updatePublicHostName=MessageFormat.format(UPDATE_TEMPLATE,HOSTS_TABLE,PUBLIC_HOST_NAME_COL);
  dbAccessor.executeQuery(updatePublicHostName);
  String updateAlertHostName=MessageFormat.format(UPDATE_TEMPLATE,ALERT_HISTORY_TABLE,HOST_NAME_COL);
  dbAccessor.executeQuery(updateAlertHostName);
}
