{
  Configuration.DatabaseType databaseType=configuration.getDatabaseType();
  String randomHostName=null;
  if (dbAccessor.tableHasData(HOST_ROLE_COMMAND_TABLE)) {
    randomHostName=getRandomHostName();
    if (StringUtils.isBlank(randomHostName)) {
      throw new AmbariException("UpgradeCatalog210 could not retrieve a random host_name from the hosts table while running executeHostsDDLUpdates.");
    }
  }
  dbAccessor.addColumn(HOSTS_TABLE,new DBColumnInfo(HOST_ID_COL,Long.class,null,null,true));
  Long hostId=0L;
  Statement statement=null;
  ResultSet rs=null;
  try {
    statement=dbAccessor.getConnection().createStatement();
    if (statement != null) {
      rs=statement.executeQuery("SELECT host_name, host_id FROM hosts ORDER BY host_id ASC, host_name ASC");
      if (rs != null) {
        hostId=populateHostsId(rs);
      }
    }
  }
  finally {
    if (rs != null) {
      rs.close();
    }
    if (statement != null) {
      statement.close();
    }
  }
  addSequence("host_id_seq",hostId,false);
  if (databaseType == Configuration.DatabaseType.DERBY) {
    dbAccessor.executeQuery("ALTER TABLE " + HOSTS_TABLE + " ALTER column "+ HOST_ID_COL+ " NOT NULL");
  }
 else {
    dbAccessor.alterColumn(HOSTS_TABLE,new DBColumnInfo(HOST_ID_COL,Long.class,null,null,false));
  }
  if (databaseType == Configuration.DatabaseType.DERBY) {
    dbAccessor.dropFKConstraint(HOST_COMPONENT_STATE_TABLE,"hostcomponentstate_host_name");
    dbAccessor.dropFKConstraint(HOST_COMPONENT_DESIRED_STATE_TABLE,"hstcmponentdesiredstatehstname");
    dbAccessor.dropFKConstraint(HOST_ROLE_COMMAND_TABLE,"FK_host_role_command_host_name");
    dbAccessor.dropFKConstraint(HOST_STATE_TABLE,"FK_hoststate_host_name");
    dbAccessor.dropFKConstraint(HOST_VERSION_TABLE,"FK_host_version_host_name");
    dbAccessor.dropFKConstraint(CONFIG_GROUP_HOST_MAPPING_TABLE,"FK_cghm_hname");
    dbAccessor.dropFKConstraint(KERBEROS_PRINCIPAL_HOST_TABLE,"FK_krb_pr_host_hostname");
    dbAccessor.dropFKConstraint(KERBEROS_PRINCIPAL_HOST_TABLE,"FK_krb_pr_host_principalname");
    dbAccessor.dropFKConstraint(HOST_CONFIG_MAPPING_TABLE,"FK_hostconfigmapping_host_name");
  }
 else {
    dbAccessor.dropFKConstraint(HOST_COMPONENT_STATE_TABLE,"hostcomponentstate_host_name");
    dbAccessor.dropFKConstraint(HOST_COMPONENT_STATE_TABLE,"fk_hostcomponentstate_host_name");
    dbAccessor.dropFKConstraint(HOST_COMPONENT_DESIRED_STATE_TABLE,"hstcmponentdesiredstatehstname");
    dbAccessor.dropFKConstraint(HOST_COMPONENT_DESIRED_STATE_TABLE,"fk_hostcomponentdesiredstate_host_name");
    dbAccessor.dropFKConstraint(HOST_ROLE_COMMAND_TABLE,"FK_host_role_command_host_name");
    dbAccessor.dropFKConstraint(HOST_STATE_TABLE,"FK_hoststate_host_name");
    dbAccessor.dropFKConstraint(HOST_VERSION_TABLE,"FK_host_version_host_name");
    dbAccessor.dropFKConstraint(CONFIG_GROUP_HOST_MAPPING_TABLE,"FK_cghm_hname");
    dbAccessor.dropFKConstraint(CONFIG_GROUP_HOST_MAPPING_TABLE,"fk_configgrouphostmapping_host_name");
    dbAccessor.dropFKConstraint(KERBEROS_PRINCIPAL_HOST_TABLE,"FK_krb_pr_host_hostname");
    dbAccessor.dropFKConstraint(KERBEROS_PRINCIPAL_HOST_TABLE,"fk_kerberos_principal_host_host_name");
    dbAccessor.dropFKConstraint(KERBEROS_PRINCIPAL_HOST_TABLE,"FK_krb_pr_host_principalname");
    dbAccessor.dropFKConstraint(HOST_CONFIG_MAPPING_TABLE,"FK_hostconfmapping_host_name");
  }
  try {
    dbAccessor.dropFKConstraint(CLUSTER_HOST_MAPPING_TABLE,"ClusterHostMapping_host_name",true);
    dbAccessor.dropFKConstraint(CLUSTER_HOST_MAPPING_TABLE,"fk_clusterhostmapping_host_name",true);
  }
 catch (  Exception e) {
    LOG.warn("Performed best attempt at deleting FK ClusterHostMapping_host_name. " + "It is possible it did not exist or the deletion failed. " + e.getMessage());
  }
  try {
    dbAccessor.dropFKConstraint(CLUSTER_HOST_MAPPING_TABLE,"ClusterHostMapping_cluster_id",true);
  }
 catch (  Exception e) {
    LOG.warn("Performed best attempt at deleting FK ClusterHostMapping_cluster_id. " + "It is possible it did not exist or the deletion failed. " + e.getMessage());
  }
  dbAccessor.addFKConstraint(CLUSTER_HOST_MAPPING_TABLE,"FK_clhostmapping_cluster_id","cluster_id",CLUSTERS_TABLE,"cluster_id",false);
  if (databaseType == Configuration.DatabaseType.DERBY) {
    String constraintName=getDerbyTableConstraintName("p",HOSTS_TABLE);
    if (null != constraintName) {
      dbAccessor.executeQuery("ALTER TABLE " + HOSTS_TABLE + " DROP CONSTRAINT "+ constraintName);
    }
  }
 else {
    dbAccessor.dropPKConstraint(HOSTS_TABLE,"hosts_pkey","host_name");
  }
  dbAccessor.addPKConstraint(HOSTS_TABLE,"PK_hosts_id","host_id");
  dbAccessor.addUniqueConstraint(HOSTS_TABLE,"UQ_hosts_host_name","host_name");
  String[] tablesToAddHostID=new String[]{CONFIG_GROUP_HOST_MAPPING_TABLE,CLUSTER_HOST_MAPPING_TABLE,HOST_CONFIG_MAPPING_TABLE,HOST_COMPONENT_STATE_TABLE,HOST_COMPONENT_DESIRED_STATE_TABLE,HOST_ROLE_COMMAND_TABLE,HOST_STATE_TABLE,HOST_VERSION_TABLE,KERBEROS_PRINCIPAL_HOST_TABLE,REQUEST_OPERATION_LEVEL_TABLE,SERVICE_CONFIG_HOSTS_TABLE};
  for (  String tableName : tablesToAddHostID) {
    dbAccessor.addColumn(tableName,new DBColumnInfo(HOST_ID_COL,Long.class,null,null,true));
    String hostNameColumnName=tableName.equals(SERVICE_CONFIG_HOSTS_TABLE) ? "hostname" : "host_name";
    if (dbAccessor.tableHasData(tableName) && dbAccessor.tableHasColumn(tableName,hostNameColumnName)) {
      dbAccessor.executeQuery("UPDATE " + tableName + " t SET host_id = (SELECT host_id FROM hosts h WHERE h.host_name = t."+ hostNameColumnName+ ") WHERE t.host_id IS NULL AND t."+ hostNameColumnName+ " IS NOT NULL");
      if (tableName.equals(HOST_ROLE_COMMAND_TABLE) && StringUtils.isNotBlank(randomHostName)) {
        dbAccessor.executeQuery("UPDATE " + tableName + " t SET host_id = (SELECT host_id FROM hosts h WHERE h.host_name = '"+ randomHostName+ "') WHERE t.host_id IS NULL AND t.host_name = 'none'");
      }
    }
    if (!tableName.equals(REQUEST_OPERATION_LEVEL_TABLE)) {
      dbAccessor.setColumnNullable(tableName,HOST_ID_COL,false);
    }
  }
  String[] tablesWithHostNameInPK=new String[]{CONFIG_GROUP_HOST_MAPPING_TABLE,CLUSTER_HOST_MAPPING_TABLE,HOST_CONFIG_MAPPING_TABLE,HOST_COMPONENT_STATE_TABLE,HOST_COMPONENT_DESIRED_STATE_TABLE,HOST_STATE_TABLE,KERBEROS_PRINCIPAL_HOST_TABLE,SERVICE_CONFIG_HOSTS_TABLE};
  dbAccessor.dropFKConstraint(CONFIG_GROUP_HOST_MAPPING_TABLE,"FK_cghm_cgid");
  dbAccessor.dropFKConstraint(CLUSTER_HOST_MAPPING_TABLE,"FK_clhostmapping_cluster_id");
  dbAccessor.dropFKConstraint(HOST_CONFIG_MAPPING_TABLE,"FK_hostconfmapping_cluster_id");
  dbAccessor.dropFKConstraint(HOST_COMPONENT_STATE_TABLE,"hstcomponentstatecomponentname");
  dbAccessor.dropFKConstraint(HOST_COMPONENT_DESIRED_STATE_TABLE,"hstcmpnntdesiredstatecmpnntnme");
  dbAccessor.dropFKConstraint(SERVICE_CONFIG_HOSTS_TABLE,"FK_scvhosts_scv");
  if (databaseType == Configuration.DatabaseType.DERBY) {
    for (    String tableName : tablesWithHostNameInPK) {
      String constraintName=getDerbyTableConstraintName("p",tableName);
      if (null != constraintName) {
        dbAccessor.executeQuery("ALTER TABLE " + tableName + " DROP CONSTRAINT "+ constraintName);
      }
    }
  }
 else {
    dbAccessor.dropPKConstraint(CONFIG_GROUP_HOST_MAPPING_TABLE,"configgrouphostmapping_pkey",HOST_NAME_COL);
    dbAccessor.dropPKConstraint(CLUSTER_HOST_MAPPING_TABLE,"clusterhostmapping_pkey",HOST_NAME_COL);
    dbAccessor.dropPKConstraint(HOST_CONFIG_MAPPING_TABLE,"hostconfigmapping_pkey",HOST_NAME_COL);
    dbAccessor.dropPKConstraint(HOST_COMPONENT_STATE_TABLE,"hostcomponentstate_pkey",HOST_NAME_COL);
    dbAccessor.dropPKConstraint(HOST_COMPONENT_DESIRED_STATE_TABLE,"hostcomponentdesiredstate_pkey",HOST_NAME_COL);
    dbAccessor.dropPKConstraint(HOST_STATE_TABLE,"hoststate_pkey",HOST_NAME_COL);
    dbAccessor.dropPKConstraint(KERBEROS_PRINCIPAL_HOST_TABLE,"kerberos_principal_host_pkey",HOST_NAME_COL);
    dbAccessor.dropPKConstraint(SERVICE_CONFIG_HOSTS_TABLE,"serviceconfighosts_pkey","hostname");
  }
  dbAccessor.dropColumn(CONFIG_GROUP_HOST_MAPPING_TABLE,HOST_NAME_COL);
  dbAccessor.dropColumn(CLUSTER_HOST_MAPPING_TABLE,HOST_NAME_COL);
  dbAccessor.dropColumn(HOST_CONFIG_MAPPING_TABLE,HOST_NAME_COL);
  dbAccessor.dropColumn(HOST_COMPONENT_STATE_TABLE,HOST_NAME_COL);
  dbAccessor.dropColumn(HOST_COMPONENT_DESIRED_STATE_TABLE,HOST_NAME_COL);
  dbAccessor.dropColumn(HOST_ROLE_COMMAND_TABLE,HOST_NAME_COL);
  dbAccessor.dropColumn(HOST_STATE_TABLE,HOST_NAME_COL);
  dbAccessor.dropColumn(HOST_VERSION_TABLE,HOST_NAME_COL);
  dbAccessor.dropColumn(KERBEROS_PRINCIPAL_HOST_TABLE,HOST_NAME_COL);
  dbAccessor.dropColumn(REQUEST_OPERATION_LEVEL_TABLE,HOST_NAME_COL);
  dbAccessor.dropColumn(SERVICE_CONFIG_HOSTS_TABLE,"hostname");
  dbAccessor.addPKConstraint(CONFIG_GROUP_HOST_MAPPING_TABLE,"configgrouphostmapping_pkey","config_group_id","host_id");
  dbAccessor.addPKConstraint(CLUSTER_HOST_MAPPING_TABLE,"clusterhostmapping_pkey","cluster_id","host_id");
  dbAccessor.addPKConstraint(HOST_CONFIG_MAPPING_TABLE,"hostconfigmapping_pkey","create_timestamp","host_id","cluster_id","type_name");
  dbAccessor.addPKConstraint(HOST_COMPONENT_STATE_TABLE,"hostcomponentstate_pkey","cluster_id","component_name","host_id","service_name");
  dbAccessor.addPKConstraint(HOST_COMPONENT_DESIRED_STATE_TABLE,"hostcomponentdesiredstate_pkey","cluster_id","component_name","host_id","service_name");
  dbAccessor.addPKConstraint(HOST_STATE_TABLE,"hoststate_pkey","host_id");
  dbAccessor.addPKConstraint(KERBEROS_PRINCIPAL_HOST_TABLE,"kerberos_principal_host_pkey","principal_name","host_id");
  dbAccessor.addPKConstraint(SERVICE_CONFIG_HOSTS_TABLE,"serviceconfighosts_pkey","service_config_id","host_id");
  dbAccessor.addFKConstraint(CONFIG_GROUP_HOST_MAPPING_TABLE,"FK_cghm_host_id","host_id",HOSTS_TABLE,"host_id",false);
  dbAccessor.addFKConstraint(CLUSTER_HOST_MAPPING_TABLE,"FK_clusterhostmapping_host_id","host_id",HOSTS_TABLE,"host_id",false);
  dbAccessor.addFKConstraint(HOST_CONFIG_MAPPING_TABLE,"FK_hostconfmapping_host_id","host_id",HOSTS_TABLE,"host_id",false);
  dbAccessor.addFKConstraint(HOST_COMPONENT_STATE_TABLE,"FK_hostcomponentstate_host_id","host_id",HOSTS_TABLE,"host_id",false);
  dbAccessor.addFKConstraint(HOST_COMPONENT_DESIRED_STATE_TABLE,"FK_hcdesiredstate_host_id","host_id",HOSTS_TABLE,"host_id",false);
  dbAccessor.addFKConstraint(HOST_ROLE_COMMAND_TABLE,"FK_host_role_command_host_id","host_id",HOSTS_TABLE,"host_id",false);
  dbAccessor.addFKConstraint(HOST_STATE_TABLE,"FK_hoststate_host_id","host_id",HOSTS_TABLE,"host_id",false);
  dbAccessor.addFKConstraint(HOST_VERSION_TABLE,"FK_host_version_host_id","host_id",HOSTS_TABLE,"host_id",false);
  dbAccessor.addFKConstraint(KERBEROS_PRINCIPAL_HOST_TABLE,"FK_krb_pr_host_id","host_id",HOSTS_TABLE,"host_id",false);
  dbAccessor.addFKConstraint(KERBEROS_PRINCIPAL_HOST_TABLE,"FK_krb_pr_host_principalname","principal_name",KERBEROS_PRINCIPAL_TABLE,"principal_name",false);
  dbAccessor.addFKConstraint(SERVICE_CONFIG_HOSTS_TABLE,"FK_scvhosts_host_id","host_id",HOSTS_TABLE,"host_id",false);
  dbAccessor.addFKConstraint(CONFIG_GROUP_HOST_MAPPING_TABLE,"FK_cghm_cgid","config_group_id",CONFIG_GROUP_TABLE,"group_id",false);
  dbAccessor.addFKConstraint(CLUSTER_HOST_MAPPING_TABLE,"FK_clhostmapping_cluster_id","cluster_id",CLUSTERS_TABLE,"cluster_id",false);
  dbAccessor.addFKConstraint(HOST_CONFIG_MAPPING_TABLE,"FK_hostconfmapping_cluster_id","cluster_id",CLUSTERS_TABLE,"cluster_id",false);
  dbAccessor.addFKConstraint(HOST_COMPONENT_STATE_TABLE,"hstcomponentstatecomponentname",new String[]{"component_name","cluster_id","service_name"},SERVICE_COMPONENT_DESIRED_STATE_TABLE,new String[]{"component_name","cluster_id","service_name"},false);
  dbAccessor.addFKConstraint(HOST_COMPONENT_DESIRED_STATE_TABLE,"hstcmpnntdesiredstatecmpnntnme",new String[]{"component_name","cluster_id","service_name"},SERVICE_COMPONENT_DESIRED_STATE_TABLE,new String[]{"component_name","cluster_id","service_name"},false);
  dbAccessor.addFKConstraint(SERVICE_CONFIG_HOSTS_TABLE,"FK_scvhosts_scv","service_config_id",SERVICE_CONFIG_TABLE,"service_config_id",false);
  String UPDATE_TEMPLATE="UPDATE {0} SET {1} = lower({1})";
  removeDuplicateHosts();
  String updateHostName=MessageFormat.format(UPDATE_TEMPLATE,HOSTS_TABLE,HOST_NAME_COL);
  dbAccessor.executeQuery(updateHostName);
  String updatePublicHostName=MessageFormat.format(UPDATE_TEMPLATE,HOSTS_TABLE,PUBLIC_HOST_NAME_COL);
  dbAccessor.executeQuery(updatePublicHostName);
  String updateAlertHostName=MessageFormat.format(UPDATE_TEMPLATE,ALERT_HISTORY_TABLE,HOST_NAME_COL);
  dbAccessor.executeQuery(updateAlertHostName);
}
