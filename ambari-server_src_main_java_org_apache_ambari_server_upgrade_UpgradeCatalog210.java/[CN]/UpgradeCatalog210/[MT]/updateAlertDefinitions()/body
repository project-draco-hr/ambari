{
  AmbariManagementController ambariManagementController=injector.getInstance(AmbariManagementController.class);
  AlertDefinitionDAO alertDefinitionDAO=injector.getInstance(AlertDefinitionDAO.class);
  Clusters clusters=ambariManagementController.getClusters();
  List<String> metricAlerts=Arrays.asList("namenode_cpu","namenode_hdfs_blocks_health","namenode_hdfs_capacity_utilization","namenode_rpc_latency","namenode_directory_status","datanode_health_summary","datanode_storage");
  List<String> mapredAlerts=Arrays.asList("mapreduce_history_server_cpu","mapreduce_history_server_rpc_latency");
  List<String> rmAlerts=Arrays.asList("yarn_resourcemanager_cpu","yarn_resourcemanager_rpc_latency");
  if (clusters != null) {
    Map<String,Cluster> clusterMap=clusters.getClusters();
    if (clusterMap != null && !clusterMap.isEmpty()) {
      for (      final Cluster cluster : clusterMap.values()) {
        for (        String alertName : metricAlerts) {
          AlertDefinitionEntity alertDefinitionEntity=alertDefinitionDAO.findByName(cluster.getClusterId(),alertName);
          if (alertDefinitionEntity != null) {
            String source=alertDefinitionEntity.getSource();
            JsonObject rootJson=new JsonParser().parse(source).getAsJsonObject();
            rootJson.get("uri").getAsJsonObject().addProperty("kerberos_keytab","{{hdfs-site/dfs.web.authentication.kerberos.keytab}}");
            rootJson.get("uri").getAsJsonObject().addProperty("kerberos_principal","{{hdfs-site/dfs.web.authentication.kerberos.principal}}");
            updateAlertDefinitionEntitySource(alertName,rootJson.toString(),UUID.randomUUID().toString());
          }
        }
        for (        String alertName : mapredAlerts) {
          AlertDefinitionEntity alertDefinitionEntity=alertDefinitionDAO.findByName(cluster.getClusterId(),alertName);
          if (alertDefinitionEntity != null) {
            String source=alertDefinitionEntity.getSource();
            JsonObject rootJson=new JsonParser().parse(source).getAsJsonObject();
            rootJson.get("uri").getAsJsonObject().addProperty("kerberos_keytab","{{mapred-site/mapreduce.jobhistory.webapp.spnego-keytab-file}}");
            rootJson.get("uri").getAsJsonObject().addProperty("kerberos_principal","{{mapred-site/mapreduce.jobhistory.webapp.spnego-principal}}");
            updateAlertDefinitionEntitySource(alertName,rootJson.toString(),UUID.randomUUID().toString());
          }
        }
        for (        String alertName : rmAlerts) {
          AlertDefinitionEntity alertDefinitionEntity=alertDefinitionDAO.findByName(cluster.getClusterId(),alertName);
          if (alertDefinitionEntity != null) {
            String source=alertDefinitionEntity.getSource();
            JsonObject rootJson=new JsonParser().parse(source).getAsJsonObject();
            rootJson.get("uri").getAsJsonObject().addProperty("kerberos_keytab","{{yarn-site/yarn.resourcemanager.webapp.spnego-keytab-file}}");
            rootJson.get("uri").getAsJsonObject().addProperty("kerberos_principal","{{yarn-site/yarn.resourcemanager.webapp.spnego-principal}}");
            updateAlertDefinitionEntitySource(alertName,rootJson.toString(),UUID.randomUUID().toString());
          }
        }
        AlertDefinitionEntity zkFailoverDefinitionEntity=alertDefinitionDAO.findByName(cluster.getClusterId(),"hdfs_zookeeper_failover_controller_process");
        if (zkFailoverDefinitionEntity != null) {
          String source=zkFailoverDefinitionEntity.getSource();
          JsonObject rootJson=new JsonParser().parse(source).getAsJsonObject();
          rootJson.remove("uri");
          rootJson.remove("default_port");
          rootJson.addProperty("uri","{{hdfs-site/dfs.ha.zkfc.port}}");
          rootJson.addProperty("default_port",new Integer(8019));
          updateAlertDefinitionEntitySource("hdfs_zookeeper_failover_controller_process",rootJson.toString(),UUID.randomUUID().toString());
        }
        AlertDefinitionEntity rangerAdminDefinitionEntity=alertDefinitionDAO.findByName(cluster.getClusterId(),"ranger_admin_process");
        if (rangerAdminDefinitionEntity != null) {
          String source=rangerAdminDefinitionEntity.getSource();
          JsonObject rootJson=new JsonParser().parse(source).getAsJsonObject();
          JsonObject uriJson=new JsonObject();
          JsonObject reporting=rootJson.getAsJsonObject("reporting");
          JsonObject ok=reporting.getAsJsonObject("ok");
          JsonObject warning=reporting.getAsJsonObject("warning");
          JsonObject critical=reporting.getAsJsonObject("critical");
          rootJson.remove("type");
          rootJson.remove("default_port");
          rootJson.addProperty("type","WEB");
          uriJson.addProperty("http","{{admin-properties/policymgr_external_url}}");
          uriJson.addProperty("https","{{admin-properties/policymgr_external_url}}");
          uriJson.addProperty("https_property","{{ranger-site/http.enabled}}");
          uriJson.addProperty("https_property_value","false");
          uriJson.addProperty("connection_timeout",5.0f);
          rootJson.remove("uri");
          rootJson.add("uri",uriJson);
          ok.remove("text");
          ok.addProperty("text","HTTP {0} response in {2:.3f}s");
          warning.remove("text");
          warning.remove("value");
          warning.addProperty("text","HTTP {0} response from {1} in {2:.3f}s ({3})");
          critical.remove("text");
          critical.remove("value");
          critical.addProperty("text","Connection failed to {1} ({3})");
          updateAlertDefinitionEntitySource("ranger_admin_process",rootJson.toString(),UUID.randomUUID().toString());
        }
        AlertDefinitionEntity oozieWebUIAlertDefinitionEntity=alertDefinitionDAO.findByName(cluster.getClusterId(),"oozie_server_webui");
        if (oozieWebUIAlertDefinitionEntity != null) {
          String source=oozieWebUIAlertDefinitionEntity.getSource();
          JsonObject rootJson=new JsonParser().parse(source).getAsJsonObject();
          rootJson.get("uri").getAsJsonObject().remove("http");
          rootJson.get("uri").getAsJsonObject().remove("kerberos_keytab");
          rootJson.get("uri").getAsJsonObject().remove("kerberos_principal");
          rootJson.get("uri").getAsJsonObject().addProperty("http","{{oozie-site/oozie.base.url}}/?user.name={{oozie-env/oozie_user}}");
          rootJson.get("uri").getAsJsonObject().addProperty("kerberos_keytab","{{cluster-env/smokeuser_keytab}}");
          rootJson.get("uri").getAsJsonObject().addProperty("kerberos_principal","{{cluster-env/smokeuser_principal_name}}");
          updateAlertDefinitionEntitySource("oozie_server_webui",rootJson.toString(),UUID.randomUUID().toString());
        }
        List<String> hdfsMetricAlertsFloatDivision=Arrays.asList("namenode_hdfs_capacity_utilization","datanode_storage");
        for (        String metricAlertName : hdfsMetricAlertsFloatDivision) {
          AlertDefinitionEntity entity=alertDefinitionDAO.findByName(cluster.getClusterId(),metricAlertName);
          if (null == entity) {
            continue;
          }
          String source=entity.getSource();
          JsonObject rootJson=new JsonParser().parse(source).getAsJsonObject();
          JsonObject reporting=rootJson.getAsJsonObject("reporting");
          JsonObject ok=reporting.getAsJsonObject("ok");
          JsonObject warning=reporting.getAsJsonObject("warning");
          JsonObject critical=reporting.getAsJsonObject("critical");
          JsonElement okText=ok.remove("text");
          ok.addProperty("text",okText.getAsString().replace("{2:d}","{2:.0f}"));
          JsonElement warningText=warning.remove("text");
          warning.addProperty("text",warningText.getAsString().replace("{2:d}","{2:.0f}"));
          JsonElement criticalText=critical.remove("text");
          critical.addProperty("text",criticalText.getAsString().replace("{2:d}","{2:.0f}"));
          updateAlertDefinitionEntitySource(metricAlertName,rootJson.toString(),UUID.randomUUID().toString());
        }
      }
    }
  }
}
