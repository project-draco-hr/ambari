{
  Resource.Type type=Resource.Type.HostComponent;
  AmbariManagementController managementController=createMock(AmbariManagementController.class);
  RequestStatusResponse response=createNiceMock(RequestStatusResponse.class);
  Set<ServiceComponentHostResponse> nameResponse=new HashSet<ServiceComponentHostResponse>();
  nameResponse.add(new ServiceComponentHostResponse("Cluster102","Service100","Component100","Host100",null,null,"STARTED","",""));
  expect(managementController.getHostComponents(EasyMock.<Set<ServiceComponentHostRequest>>anyObject())).andReturn(nameResponse).once();
  expect(managementController.updateHostComponents(AbstractResourceProviderTest.Matcher.getHostComponentRequestSet("Cluster102",null,"Component100","Host100",null,"STARTED"))).andReturn(response).once();
  replay(managementController,response);
  ResourceProvider provider=AbstractResourceProvider.getResourceProvider(type,PropertyHelper.getPropertyIds(type),PropertyHelper.getKeyPropertyIds(type),managementController);
  Map<String,Object> properties=new LinkedHashMap<String,Object>();
  properties.put(HostComponentResourceProvider.HOST_COMPONENT_STATE_PROPERTY_ID,"STARTED");
  Request request=PropertyHelper.getUpdateRequest(properties);
  Predicate predicate=new PredicateBuilder().property(HostComponentResourceProvider.HOST_COMPONENT_CLUSTER_NAME_PROPERTY_ID).equals("Cluster102").toPredicate();
  provider.updateResources(request,predicate);
  verify(managementController,response);
}
