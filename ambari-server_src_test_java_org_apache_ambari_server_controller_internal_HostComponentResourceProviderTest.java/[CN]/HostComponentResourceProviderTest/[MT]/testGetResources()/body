{
  Resource.Type type=Resource.Type.HostComponent;
  AmbariManagementController managementController=createMock(AmbariManagementController.class);
  ResourceProviderFactory resourceProviderFactory=createNiceMock(ResourceProviderFactory.class);
  ResourceProvider hostComponentResourceProvider=createNiceMock(HostComponentResourceProvider.class);
  AbstractControllerResourceProvider.init(resourceProviderFactory);
  Set<ServiceComponentHostResponse> allResponse=new HashSet<ServiceComponentHostResponse>();
  StackId stackId=new StackId("HDP-0.1");
  StackId stackId2=new StackId("HDP-0.2");
  allResponse.add(new ServiceComponentHostResponse("Cluster100","Service100","Component100","Host100",State.INSTALLED.toString(),stackId.getStackId(),State.STARTED.toString(),stackId2.getStackId(),null));
  allResponse.add(new ServiceComponentHostResponse("Cluster100","Service100","Component101","Host100",State.INSTALLED.toString(),stackId.getStackId(),State.STARTED.toString(),stackId2.getStackId(),null));
  allResponse.add(new ServiceComponentHostResponse("Cluster100","Service100","Component102","Host100",State.INSTALLED.toString(),stackId.getStackId(),State.STARTED.toString(),stackId2.getStackId(),null));
  Map<String,String> expectedNameValues=new HashMap<String,String>();
  expectedNameValues.put(HostComponentResourceProvider.HOST_COMPONENT_CLUSTER_NAME_PROPERTY_ID,"Cluster100");
  expectedNameValues.put(HostComponentResourceProvider.HOST_COMPONENT_STATE_PROPERTY_ID,State.INSTALLED.toString());
  expectedNameValues.put(HostComponentResourceProvider.HOST_COMPONENT_STACK_ID_PROPERTY_ID,stackId.getStackId());
  expectedNameValues.put(HostComponentResourceProvider.HOST_COMPONENT_DESIRED_STATE_PROPERTY_ID,State.STARTED.toString());
  expectedNameValues.put(HostComponentResourceProvider.HOST_COMPONENT_DESIRED_STACK_ID_PROPERTY_ID,stackId2.getStackId());
  expectedNameValues.put(HostComponentResourceProvider.HOST_COMPONENT_UPGRADE_STATE,UpgradeState.NONE.name());
  expect(resourceProviderFactory.getHostComponentResourceProvider(anyObject(Set.class),anyObject(Map.class),eq(managementController))).andReturn(hostComponentResourceProvider).anyTimes();
  Set<String> propertyIds=new HashSet<String>();
  propertyIds.add(HostComponentResourceProvider.HOST_COMPONENT_CLUSTER_NAME_PROPERTY_ID);
  propertyIds.add(HostComponentResourceProvider.HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID);
  propertyIds.add(HostComponentResourceProvider.HOST_COMPONENT_STATE_PROPERTY_ID);
  propertyIds.add(HostComponentResourceProvider.HOST_COMPONENT_STACK_ID_PROPERTY_ID);
  propertyIds.add(HostComponentResourceProvider.HOST_COMPONENT_DESIRED_STATE_PROPERTY_ID);
  propertyIds.add(HostComponentResourceProvider.HOST_COMPONENT_DESIRED_STACK_ID_PROPERTY_ID);
  Predicate predicate=new PredicateBuilder().property(HostComponentResourceProvider.HOST_COMPONENT_CLUSTER_NAME_PROPERTY_ID).equals("Cluster100").toPredicate();
  Request request=PropertyHelper.getReadRequest(propertyIds);
  Set<Resource> hostsComponentResources=new HashSet<Resource>();
  Resource hostsComponentResource1=new ResourceImpl(Resource.Type.HostComponent);
  hostsComponentResource1.setProperty(HostComponentResourceProvider.HOST_COMPONENT_CLUSTER_NAME_PROPERTY_ID,"Cluster100");
  hostsComponentResource1.setProperty(HostComponentResourceProvider.HOST_COMPONENT_HOST_NAME_PROPERTY_ID,"Host100");
  hostsComponentResource1.setProperty(HostComponentResourceProvider.HOST_COMPONENT_SERVICE_NAME_PROPERTY_ID,"Service100");
  hostsComponentResource1.setProperty(HostComponentResourceProvider.HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID,"Component100");
  hostsComponentResource1.setProperty(HostComponentResourceProvider.HOST_COMPONENT_STATE_PROPERTY_ID,State.INSTALLED.name());
  hostsComponentResource1.setProperty(HostComponentResourceProvider.HOST_COMPONENT_DESIRED_STATE_PROPERTY_ID,State.STARTED.name());
  hostsComponentResource1.setProperty(HostComponentResourceProvider.HOST_COMPONENT_STACK_ID_PROPERTY_ID,stackId.getStackId());
  hostsComponentResource1.setProperty(HostComponentResourceProvider.HOST_COMPONENT_DESIRED_STACK_ID_PROPERTY_ID,stackId2.getStackId());
  hostsComponentResource1.setProperty(HostComponentResourceProvider.HOST_COMPONENT_UPGRADE_STATE,UpgradeState.NONE.name());
  Resource hostsComponentResource2=new ResourceImpl(Resource.Type.HostComponent);
  hostsComponentResource2.setProperty(HostComponentResourceProvider.HOST_COMPONENT_CLUSTER_NAME_PROPERTY_ID,"Cluster100");
  hostsComponentResource2.setProperty(HostComponentResourceProvider.HOST_COMPONENT_HOST_NAME_PROPERTY_ID,"Host100");
  hostsComponentResource2.setProperty(HostComponentResourceProvider.HOST_COMPONENT_SERVICE_NAME_PROPERTY_ID,"Service100");
  hostsComponentResource2.setProperty(HostComponentResourceProvider.HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID,"Component101");
  hostsComponentResource2.setProperty(HostComponentResourceProvider.HOST_COMPONENT_STATE_PROPERTY_ID,State.INSTALLED.name());
  hostsComponentResource2.setProperty(HostComponentResourceProvider.HOST_COMPONENT_DESIRED_STATE_PROPERTY_ID,State.STARTED.name());
  hostsComponentResource2.setProperty(HostComponentResourceProvider.HOST_COMPONENT_STACK_ID_PROPERTY_ID,stackId.getStackId());
  hostsComponentResource2.setProperty(HostComponentResourceProvider.HOST_COMPONENT_DESIRED_STACK_ID_PROPERTY_ID,stackId2.getStackId());
  hostsComponentResource2.setProperty(HostComponentResourceProvider.HOST_COMPONENT_UPGRADE_STATE,UpgradeState.NONE.name());
  Resource hostsComponentResource3=new ResourceImpl(Resource.Type.HostComponent);
  hostsComponentResource3.setProperty(HostComponentResourceProvider.HOST_COMPONENT_CLUSTER_NAME_PROPERTY_ID,"Cluster100");
  hostsComponentResource3.setProperty(HostComponentResourceProvider.HOST_COMPONENT_HOST_NAME_PROPERTY_ID,"Host100");
  hostsComponentResource3.setProperty(HostComponentResourceProvider.HOST_COMPONENT_SERVICE_NAME_PROPERTY_ID,"Service100");
  hostsComponentResource3.setProperty(HostComponentResourceProvider.HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID,"Component102");
  hostsComponentResource3.setProperty(HostComponentResourceProvider.HOST_COMPONENT_STATE_PROPERTY_ID,State.INSTALLED.name());
  hostsComponentResource3.setProperty(HostComponentResourceProvider.HOST_COMPONENT_DESIRED_STATE_PROPERTY_ID,State.STARTED.name());
  hostsComponentResource3.setProperty(HostComponentResourceProvider.HOST_COMPONENT_STACK_ID_PROPERTY_ID,stackId.getStackId());
  hostsComponentResource3.setProperty(HostComponentResourceProvider.HOST_COMPONENT_DESIRED_STACK_ID_PROPERTY_ID,stackId2.getStackId());
  hostsComponentResource3.setProperty(HostComponentResourceProvider.HOST_COMPONENT_UPGRADE_STATE,UpgradeState.NONE.name());
  hostsComponentResources.add(hostsComponentResource1);
  hostsComponentResources.add(hostsComponentResource2);
  hostsComponentResources.add(hostsComponentResource3);
  expect(hostComponentResourceProvider.getResources(eq(request),eq(predicate))).andReturn(hostsComponentResources).anyTimes();
  replay(managementController,resourceProviderFactory,hostComponentResourceProvider);
  ResourceProvider provider=AbstractControllerResourceProvider.getResourceProvider(type,PropertyHelper.getPropertyIds(type),PropertyHelper.getKeyPropertyIds(type),managementController);
  Set<Resource> resources=provider.getResources(request,predicate);
  Assert.assertEquals(3,resources.size());
  Set<String> names=new HashSet<String>();
  for (  Resource resource : resources) {
    for (    String key : expectedNameValues.keySet()) {
      Assert.assertEquals(expectedNameValues.get(key),resource.getPropertyValue(key));
    }
    names.add((String)resource.getPropertyValue(HostComponentResourceProvider.HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID));
  }
  for (  ServiceComponentHostResponse response : allResponse) {
    Assert.assertTrue(names.contains(response.getComponentName()));
  }
  verify(managementController,resourceProviderFactory,hostComponentResourceProvider);
}
