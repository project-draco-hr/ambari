{
  Resource.Type type=Resource.Type.HostComponent;
  AmbariManagementController managementController=createMock(AmbariManagementController.class);
  RequestStatusResponse response=createNiceMock(RequestStatusResponse.class);
  ResourceProviderFactory resourceProviderFactory=createNiceMock(ResourceProviderFactory.class);
  Injector injector=createNiceMock(Injector.class);
  HostComponentResourceProvider hostComponentResourceProvider=new HostComponentResourceProvider(PropertyHelper.getPropertyIds(type),PropertyHelper.getKeyPropertyIds(type),managementController,injector);
  AbstractControllerResourceProvider.init(resourceProviderFactory);
  managementController.createHostComponents(AbstractResourceProviderTest.Matcher.getHostComponentRequestSet("Cluster100","Service100","Component100","Host100",null,null));
  expect(resourceProviderFactory.getHostComponentResourceProvider(anyObject(Set.class),anyObject(Map.class),eq(managementController))).andReturn(hostComponentResourceProvider).anyTimes();
  replay(managementController,response,resourceProviderFactory);
  ResourceProvider provider=AbstractControllerResourceProvider.getResourceProvider(type,PropertyHelper.getPropertyIds(type),PropertyHelper.getKeyPropertyIds(type),managementController);
  Set<Map<String,Object>> propertySet=new LinkedHashSet<Map<String,Object>>();
  Map<String,Object> properties=new LinkedHashMap<String,Object>();
  properties.put(HostComponentResourceProvider.HOST_COMPONENT_CLUSTER_NAME_PROPERTY_ID,"Cluster100");
  properties.put(HostComponentResourceProvider.HOST_COMPONENT_SERVICE_NAME_PROPERTY_ID,"Service100");
  properties.put(HostComponentResourceProvider.HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID,"Component100");
  properties.put(HostComponentResourceProvider.HOST_COMPONENT_HOST_NAME_PROPERTY_ID,"Host100");
  propertySet.add(properties);
  Request request=PropertyHelper.getCreateRequest(propertySet,null);
  provider.createResources(request);
  verify(managementController,response,resourceProviderFactory);
}
