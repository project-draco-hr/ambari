{
  Host h1=clusters.getHost("h1");
  h1.setState(HostState.HEALTHY);
  StackId stackId=new StackId(this.stackId);
  StackId yaStackId=new StackId(yetAnotherStackId);
  RepositoryVersionEntity repositoryVersionEntity=helper.getOrCreateRepositoryVersion(stackId,"2.2.0-1000");
  RepositoryVersionEntity repositoryVersionEntity2=helper.getOrCreateRepositoryVersion(stackId,"2.2.0-2000");
  c1.createClusterVersion(stackId,"2.2.0-1000","admin",RepositoryVersionState.INSTALLING);
  c1.setCurrentStackVersion(stackId);
  c1.recalculateAllClusterVersionStates();
  assertRepoVersionState(stackId.getStackId(),"2.2.0-1000",RepositoryVersionState.INSTALLING);
  assertRepoVersionState(stackId.getStackId(),"2.2.0-2086",RepositoryVersionState.CURRENT);
  HostVersionEntity hv1=helper.createHostVersion("h1",repositoryVersionEntity,RepositoryVersionState.INSTALLED);
  HostVersionEntity hv2=helper.createHostVersion("h1",repositoryVersionEntity2,RepositoryVersionState.INSTALLED);
  c1.recalculateAllClusterVersionStates();
  assertRepoVersionState(stackId.getStackId(),"2.2.0-1000",RepositoryVersionState.INSTALLED);
  assertRepoVersionState(stackId.getStackId(),"2.2.0-2000",RepositoryVersionState.INSTALLED);
  assertRepoVersionState(stackId.getStackId(),"2.2.0-2086",RepositoryVersionState.CURRENT);
  addHost("h2");
  clusters.mapHostToCluster("h2","c1");
  List<HostVersionEntity> h2Versions=hostVersionDAO.findByHost("h2");
  for (  HostVersionEntity hostVersionEntity : h2Versions) {
    if (hostVersionEntity.getRepositoryVersion().toString().equals("2.2.0-2086")) {
      assertEquals(hostVersionEntity.getState(),RepositoryVersionState.CURRENT);
    }
 else {
      assertEquals(hostVersionEntity.getState(),RepositoryVersionState.OUT_OF_SYNC);
    }
  }
}
