{
  addHost("h2");
  clusters.mapHostToCluster("h2","c1");
  clusters.getHost("h2").setState(HostState.HEALTHY);
  clusters.getHost("h2").persist();
  StackId stackId=new StackId(this.stackId);
  RepositoryVersionEntity repositoryVersionEntity=helper.getOrCreateRepositoryVersion(stackId,"2.2.9-9999");
  c1.createClusterVersion(stackId,"2.2.9-9999","admin",RepositoryVersionState.INSTALLING);
  c1.setCurrentStackVersion(stackId);
  c1.recalculateAllClusterVersionStates();
  for (  ClusterVersionEntity cve : c1.getAllClusterVersions()) {
    System.out.println(cve.getRepositoryVersion().getDisplayName());
  }
  assertRepoVersionState(stackId.getStackId(),"2.2.0",RepositoryVersionState.CURRENT);
  assertRepoVersionState(stackId.getStackId(),"2.2.9-9999",RepositoryVersionState.INSTALLING);
  HostVersionEntity hv1=helper.createHostVersion("h1",repositoryVersionEntity,RepositoryVersionState.INSTALLED);
  HostVersionEntity hv2=helper.createHostVersion("h2",repositoryVersionEntity,RepositoryVersionState.INSTALLED);
  c1.recalculateAllClusterVersionStates();
  assertRepoVersionState(stackId.getStackId(),"2.2.0",RepositoryVersionState.CURRENT);
  assertRepoVersionState(stackId.getStackId(),"2.2.9-9999",RepositoryVersionState.INSTALLED);
  hv1.setState(RepositoryVersionState.UPGRADED);
  hv2.setState(RepositoryVersionState.UPGRADING);
  hostVersionDAO.merge(hv1);
  hostVersionDAO.merge(hv2);
  c1.recalculateAllClusterVersionStates();
  assertRepoVersionState(stackId.getStackId(),"2.2.0",RepositoryVersionState.CURRENT);
  assertRepoVersionState(stackId.getStackId(),"2.2.9-9999",RepositoryVersionState.UPGRADING);
  injector.getInstance(UnitOfWork.class).begin();
  clusters.deleteHost("h2");
  injector.getInstance(UnitOfWork.class).end();
  assertRepoVersionState(stackId.getStackId(),"2.2.0",RepositoryVersionState.CURRENT);
  assertRepoVersionState(stackId.getStackId(),"2.2.9-9999",RepositoryVersionState.UPGRADED);
}
