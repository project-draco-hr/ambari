{
  String CURRENT_VERSION="1.0-2086";
  String INSTALLED_VERSION="1.0-1000";
  Host h1=clusters.getHost("h1");
  h1.setState(HostState.HEALTHY);
  addHost("h2");
  clusters.mapHostToCluster("h2","c1");
  addHost("h3");
  clusters.mapHostToCluster("h3","c1");
  StackId stackId=new StackId(this.stackId);
  RepositoryVersionEntity repositoryVersionEntity=helper.getOrCreateRepositoryVersion(stackId,INSTALLED_VERSION);
  c1.createClusterVersion(stackId,INSTALLED_VERSION,"admin",RepositoryVersionState.INSTALLING);
  c1.setCurrentStackVersion(stackId);
  c1.recalculateAllClusterVersionStates();
  checkStackVersionState(stackId.getStackId(),INSTALLED_VERSION,RepositoryVersionState.INSTALLING);
  checkStackVersionState(stackId.getStackId(),CURRENT_VERSION,RepositoryVersionState.CURRENT);
  HostVersionEntity hv1=helper.createHostVersion("h1",repositoryVersionEntity,RepositoryVersionState.INSTALLED);
  c1.recalculateAllClusterVersionStates();
  checkStackVersionState(stackId.getStackId(),INSTALLED_VERSION,RepositoryVersionState.INSTALLED);
  checkStackVersionState(stackId.getStackId(),CURRENT_VERSION,RepositoryVersionState.CURRENT);
  List<HostVersionEntity> h2Versions=hostVersionDAO.findAll();
  for (  HostVersionEntity hostVersionEntity : h2Versions) {
    if (hostVersionEntity.getRepositoryVersion().toString().equals(INSTALLED_VERSION)) {
      assertEquals(hostVersionEntity.getState(),RepositoryVersionState.INSTALLED);
    }
  }
  List<String> hostList=new ArrayList<String>();
  hostList.add("h1");
  hostList.add("h2");
  hostList.add("h3");
  Map<String,List<Integer>> hdfsTopology=new HashMap<String,List<Integer>>();
  hdfsTopology.put("NAMENODE",Collections.singletonList(0));
  hdfsTopology.put("SECONDARY_NAMENODE",Collections.singletonList(1));
  List<Integer> datanodeHosts=Arrays.asList(0,1);
  hdfsTopology.put("DATANODE",new ArrayList<Integer>(datanodeHosts));
  addService(c1,hostList,hdfsTopology,"HDFS");
  Set<String> changedHosts=new HashSet<String>();
  changedHosts.add("h1");
  changedHosts.add("h2");
  checkStackVersionState(stackId.getStackId(),INSTALLED_VERSION,RepositoryVersionState.INSTALLED);
  for (  HostVersionEntity hostVersionEntity : h2Versions) {
    if (hostVersionEntity.getRepositoryVersion().toString().equals(INSTALLED_VERSION)) {
      if (changedHosts.contains(hostVersionEntity.getHostName())) {
        assertEquals(hostVersionEntity.getState(),RepositoryVersionState.OUT_OF_SYNC);
      }
 else {
        assertEquals(hostVersionEntity.getState(),RepositoryVersionState.INSTALLED);
      }
    }
  }
}
