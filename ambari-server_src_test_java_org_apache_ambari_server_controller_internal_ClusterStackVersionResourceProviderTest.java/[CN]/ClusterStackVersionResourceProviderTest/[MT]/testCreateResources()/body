{
  Resource.Type type=Resource.Type.ClusterStackVersion;
  AmbariManagementController managementController=createMock(AmbariManagementController.class);
  Clusters clusters=createNiceMock(Clusters.class);
  Cluster cluster=createNiceMock(Cluster.class);
  StackId stackId=new StackId("HDP","2.0.1");
  final Host host1=createNiceMock("host1",Host.class);
  final Host host2=createNiceMock("host2",Host.class);
  expect(host1.getHostName()).andReturn("host1").anyTimes();
  expect(host1.getOsFamily()).andReturn("redhat6").anyTimes();
  expect(host2.getHostName()).andReturn("host2").anyTimes();
  expect(host2.getOsFamily()).andReturn("redhat6").anyTimes();
  replay(host1,host2);
  Map<String,Host> hostsForCluster=new HashMap<String,Host>(){
{
      put(host1.getHostName(),host1);
      put(host2.getHostName(),host2);
    }
  }
;
  ServiceComponentHost sch=createMock(ServiceComponentHost.class);
  List<ServiceComponentHost> schs=Collections.singletonList(sch);
  RepositoryVersionEntity repoVersion=new RepositoryVersionEntity();
  repoVersion.setOperatingSystems(operatingSystemsJson);
  ServiceOsSpecific.Package hivePackage=new ServiceOsSpecific.Package();
  hivePackage.setName("hive");
  List<ServiceOsSpecific.Package> packages=Collections.singletonList(hivePackage);
  ActionManager actionManager=createNiceMock(ActionManager.class);
  RequestStatusResponse response=createNiceMock(RequestStatusResponse.class);
  ResourceProviderFactory resourceProviderFactory=createNiceMock(ResourceProviderFactory.class);
  ResourceProvider csvResourceProvider=createNiceMock(ClusterStackVersionResourceProvider.class);
  AbstractControllerResourceProvider.init(resourceProviderFactory);
  expect(managementController.getClusters()).andReturn(clusters).anyTimes();
  expect(managementController.getAmbariMetaInfo()).andReturn(ambariMetaInfo).anyTimes();
  expect(managementController.getAuthName()).andReturn("admin").anyTimes();
  expect(managementController.getActionManager()).andReturn(actionManager).anyTimes();
  expect(managementController.getJdkResourceUrl()).andReturn("/JdkResourceUrl").anyTimes();
  expect(managementController.getPackagesForServiceHost(anyObject(ServiceInfo.class),(Map<String,String>)anyObject(List.class),anyObject(String.class))).andReturn(packages).anyTimes();
  expect(resourceProviderFactory.getHostResourceProvider(anyObject(Set.class),anyObject(Map.class),eq(managementController))).andReturn(csvResourceProvider).anyTimes();
  expect(clusters.getCluster(anyObject(String.class))).andReturn(cluster);
  expect(clusters.getHostsForCluster(anyObject(String.class))).andReturn(hostsForCluster);
  expect(cluster.getCurrentStackVersion()).andReturn(stackId);
  expect(cluster.getServiceComponentHosts(anyObject(String.class))).andReturn(schs).anyTimes();
  expect(sch.getServiceName()).andReturn("HIVE").anyTimes();
  expect(repositoryVersionDAOMock.findByStackAndVersion(anyObject(String.class),anyObject(String.class))).andReturn(repoVersion);
  expect(actionManager.getRequestTasks(anyLong())).andReturn(Collections.<HostRoleCommand>emptyList()).anyTimes();
  replay(managementController,response,clusters,resourceProviderFactory,csvResourceProvider,cluster,repositoryVersionDAOMock,sch,actionManager);
  ResourceProvider provider=AbstractControllerResourceProvider.getResourceProvider(type,PropertyHelper.getPropertyIds(type),PropertyHelper.getKeyPropertyIds(type),managementController);
  injector.injectMembers(provider);
  Set<Map<String,Object>> propertySet=new LinkedHashSet<Map<String,Object>>();
  Map<String,Object> properties=new LinkedHashMap<String,Object>();
  properties.put(ClusterStackVersionResourceProvider.CLUSTER_STACK_VERSION_CLUSTER_NAME_PROPERTY_ID,"Cluster100");
  properties.put(ClusterStackVersionResourceProvider.CLUSTER_STACK_VERSION_REPOSITORY_VERSION_PROPERTY_ID,"2.2.0.1-885");
  propertySet.add(properties);
  Request request=PropertyHelper.getCreateRequest(propertySet,null);
  provider.createResources(request);
  verify(managementController,response,clusters);
}
