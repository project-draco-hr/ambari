{
  LdapServerProperties ldapServerProperties=new LdapServerProperties();
  ldapServerProperties.setPrimaryUrl(properties.getProperty(LDAP_PRIMARY_URL_KEY,LDAP_PRIMARY_URL_DEFAULT));
  ldapServerProperties.setSecondaryUrl(properties.getProperty(LDAP_SECONDARY_URL_KEY));
  ldapServerProperties.setUseSsl("true".equalsIgnoreCase(properties.getProperty(LDAP_USE_SSL_KEY)));
  ldapServerProperties.setAnonymousBind("true".equalsIgnoreCase(properties.getProperty(LDAP_BIND_ANONYMOUSLY_KEY,LDAP_BIND_ANONYMOUSLY_DEFAULT)));
  ldapServerProperties.setManagerDn(properties.getProperty(LDAP_MANAGER_DN_KEY));
  String ldapPasswordProperty=properties.getProperty(LDAP_MANAGER_PASSWORD_KEY);
  String ldapPassword=null;
  if (CredentialProvider.isAliasString(ldapPasswordProperty)) {
    ldapPassword=readPasswordFromStore(ldapPasswordProperty);
  }
  if (ldapPassword != null) {
    ldapServerProperties.setManagerPassword(ldapPassword);
  }
 else {
    if (ldapPasswordProperty != null && new File(ldapPasswordProperty).exists()) {
      ldapServerProperties.setManagerPassword(readPasswordFromFile(ldapPasswordProperty,""));
    }
  }
  ldapServerProperties.setBaseDN(properties.getProperty(LDAP_BASE_DN_KEY,LDAP_BASE_DN_DEFAULT));
  ldapServerProperties.setUsernameAttribute(properties.getProperty(LDAP_USERNAME_ATTRIBUTE_KEY,LDAP_USERNAME_ATTRIBUTE_DEFAULT));
  ldapServerProperties.setUserBase(properties.getProperty(LDAP_USER_BASE_KEY,LDAP_USER_BASE_DEFAULT));
  ldapServerProperties.setUserObjectClass(properties.getProperty(LDAP_USER_OBJECT_CLASS_KEY,LDAP_USER_OBJECT_CLASS_DEFAULT));
  ldapServerProperties.setDnAttribute(properties.getProperty(LDAP_DN_ATTRIBUTE_KEY,LDAP_DN_ATTRIBUTE_DEFAULT));
  ldapServerProperties.setGroupBase(properties.getProperty(LDAP_GROUP_BASE_KEY,LDAP_GROUP_BASE_DEFAULT));
  ldapServerProperties.setGroupObjectClass(properties.getProperty(LDAP_GROUP_OBJECT_CLASS_KEY,LDAP_GROUP_OBJECT_CLASS_DEFAULT));
  ldapServerProperties.setGroupMembershipAttr(properties.getProperty(LDAP_GROUP_MEMEBERSHIP_ATTR_KEY,LDAP_GROUP_MEMBERSHIP_ATTR_DEFAULT));
  ldapServerProperties.setGroupNamingAttr(properties.getProperty(LDAP_GROUP_NAMING_ATTR_KEY,LDAP_GROUP_NAMING_ATTR_DEFAULT));
  ldapServerProperties.setAdminGroupMappingRules(properties.getProperty(LDAP_ADMIN_GROUP_MAPPING_RULES_KEY,LDAP_ADMIN_GROUP_MAPPING_RULES_DEFAULT));
  ldapServerProperties.setUserSearchFilter(properties.getProperty(LDAP_USER_SEARCH_FILTER_KEY,LDAP_USER_SEARCH_FILTER_DEFAULT));
  ldapServerProperties.setAlternateUserSearchFilter(properties.getProperty(LDAP_ALT_USER_SEARCH_FILTER_KEY,LDAP_ALT_USER_SEARCH_FILTER_DEFAULT));
  ldapServerProperties.setGroupSearchFilter(properties.getProperty(LDAP_GROUP_SEARCH_FILTER_KEY,LDAP_GROUP_SEARCH_FILTER_DEFAULT));
  ldapServerProperties.setReferralMethod(properties.getProperty(LDAP_REFERRAL_KEY,LDAP_REFERRAL_DEFAULT));
  ldapServerProperties.setSyncUserMemberReplacePattern(properties.getProperty(LDAP_SYCN_USER_MEMBER_REPLACE_PATTERN,LDAP_SYNC_MEMBER_REPLACE_PATTERN_DEFAULT));
  ldapServerProperties.setSyncGroupMemberReplacePattern(properties.getProperty(LDAP_SYCN_GROUP_MEMBER_REPLACE_PATTERN,LDAP_SYNC_MEMBER_REPLACE_PATTERN_DEFAULT));
  ldapServerProperties.setSyncUserMemberFilter(properties.getProperty(LDAP_SYCN_USER_MEMBER_FILTER,LDAP_SYNC_MEMBER_FILTER_DEFAULT));
  ldapServerProperties.setSyncGroupMemberFilter(properties.getProperty(LDAP_SYCN_GROUP_MEMBER_FILTER,LDAP_SYNC_MEMBER_FILTER_DEFAULT));
  ldapServerProperties.setPaginationEnabled("true".equalsIgnoreCase(properties.getProperty(LDAP_PAGINATION_ENABLED_KEY,LDAP_PAGINATION_ENABLED_DEFAULT)));
  if (properties.containsKey(LDAP_GROUP_BASE_KEY) || properties.containsKey(LDAP_GROUP_OBJECT_CLASS_KEY) || properties.containsKey(LDAP_GROUP_MEMEBERSHIP_ATTR_KEY)|| properties.containsKey(LDAP_GROUP_NAMING_ATTR_KEY)|| properties.containsKey(LDAP_ADMIN_GROUP_MAPPING_RULES_KEY)|| properties.containsKey(LDAP_GROUP_SEARCH_FILTER_KEY)) {
    ldapServerProperties.setGroupMappingEnabled(true);
  }
  return ldapServerProperties;
}
