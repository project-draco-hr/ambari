{
  LdapServerProperties ldapServerProperties=new LdapServerProperties();
  ldapServerProperties.setPrimaryUrl(getProperty(LDAP_PRIMARY_URL));
  ldapServerProperties.setSecondaryUrl(getProperty(LDAP_SECONDARY_URL));
  ldapServerProperties.setUseSsl(Boolean.parseBoolean(getProperty(LDAP_USE_SSL)));
  ldapServerProperties.setAnonymousBind(Boolean.parseBoolean(getProperty(LDAP_BIND_ANONYMOUSLY)));
  ldapServerProperties.setManagerDn(getProperty(LDAP_MANAGER_DN));
  String ldapPasswordProperty=getProperty(LDAP_MANAGER_PASSWORD);
  String ldapPassword=null;
  if (CredentialProvider.isAliasString(ldapPasswordProperty)) {
    ldapPassword=readPasswordFromStore(ldapPasswordProperty);
  }
  if (ldapPassword != null) {
    ldapServerProperties.setManagerPassword(ldapPassword);
  }
 else {
    if (ldapPasswordProperty != null && new File(ldapPasswordProperty).exists()) {
      ldapServerProperties.setManagerPassword(readPasswordFromFile(ldapPasswordProperty,""));
    }
  }
  ldapServerProperties.setBaseDN(getProperty(LDAP_BASE_DN));
  ldapServerProperties.setUsernameAttribute(getProperty(LDAP_USERNAME_ATTRIBUTE));
  ldapServerProperties.setUserBase(getProperty(LDAP_USER_BASE));
  ldapServerProperties.setUserObjectClass(getProperty(LDAP_USER_OBJECT_CLASS));
  ldapServerProperties.setDnAttribute(getProperty(LDAP_DN_ATTRIBUTE));
  ldapServerProperties.setGroupBase(getProperty(LDAP_GROUP_BASE));
  ldapServerProperties.setGroupObjectClass(getProperty(LDAP_GROUP_OBJECT_CLASS));
  ldapServerProperties.setGroupMembershipAttr(getProperty(LDAP_GROUP_MEMBERSHIP_ATTR));
  ldapServerProperties.setGroupNamingAttr(getProperty(LDAP_GROUP_NAMING_ATTR));
  ldapServerProperties.setAdminGroupMappingRules(getProperty(LDAP_ADMIN_GROUP_MAPPING_RULES));
  ldapServerProperties.setAdminGroupMappingMemberAttr(getProperty(LDAP_ADMIN_GROUP_MAPPING_MEMBER_ATTR_DEFAULT));
  ldapServerProperties.setUserSearchFilter(getProperty(LDAP_USER_SEARCH_FILTER));
  ldapServerProperties.setAlternateUserSearchFilter(getProperty(LDAP_ALT_USER_SEARCH_FILTER));
  ldapServerProperties.setGroupSearchFilter(getProperty(LDAP_GROUP_SEARCH_FILTER));
  ldapServerProperties.setReferralMethod(getProperty(LDAP_REFERRAL));
  ldapServerProperties.setSyncUserMemberReplacePattern(getProperty(LDAP_SYNC_USER_MEMBER_REPLACE_PATTERN));
  ldapServerProperties.setSyncGroupMemberReplacePattern(getProperty(LDAP_SYCN_GROUP_MEMBER_REPLACE_PATTERN));
  ldapServerProperties.setSyncUserMemberFilter(getProperty(LDAP_SYNC_USER_MEMBER_FILTER));
  ldapServerProperties.setSyncGroupMemberFilter(getProperty(LDAP_SYNC_GROUP_MEMBER_FILTER));
  ldapServerProperties.setPaginationEnabled(Boolean.parseBoolean(getProperty(LDAP_PAGINATION_ENABLED)));
  if (properties.containsKey(LDAP_GROUP_BASE) || properties.containsKey(LDAP_GROUP_OBJECT_CLASS) || properties.containsKey(LDAP_GROUP_MEMBERSHIP_ATTR)|| properties.containsKey(LDAP_GROUP_NAMING_ATTR)|| properties.containsKey(LDAP_ADMIN_GROUP_MAPPING_RULES)|| properties.containsKey(LDAP_GROUP_SEARCH_FILTER)) {
    ldapServerProperties.setGroupMappingEnabled(true);
  }
  return ldapServerProperties;
}
