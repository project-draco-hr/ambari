{
  boolean enableJwt=Boolean.valueOf(properties.getProperty(JWT_AUTH_ENBABLED,"false"));
  if (enableJwt) {
    String providerUrl=properties.getProperty(JWT_AUTH_PROVIDER_URL);
    if (providerUrl == null) {
      LOG.error("JWT authentication provider URL not specified. JWT auth will be disabled.",providerUrl);
      return null;
    }
    String publicKeyPath=properties.getProperty(JWT_PUBLIC_KEY);
    if (publicKeyPath == null) {
      LOG.error("Public key pem not specified for JWT auth provider {}. JWT auth will be disabled.",providerUrl);
      return null;
    }
    try {
      RSAPublicKey publicKey=CertificateUtils.getPublicKeyFromFile(publicKeyPath);
      JwtAuthenticationProperties jwtProperties=new JwtAuthenticationProperties();
      jwtProperties.setAuthenticationProviderUrl(providerUrl);
      jwtProperties.setPublicKey(publicKey);
      jwtProperties.setCookieName(properties.getProperty(JWT_COOKIE_NAME,JWT_COOKIE_NAME_DEFAULT));
      jwtProperties.setAudiencesString(properties.getProperty(JWT_AUDIENCES));
      jwtProperties.setOriginalUrlQueryParam(properties.getProperty(JWT_ORIGINAL_URL_QUERY_PARAM,JWT_ORIGINAL_URL_QUERY_PARAM_DEFAULT));
      return jwtProperties;
    }
 catch (    IOException e) {
      LOG.error("Unable to read public certificate file. JWT auth will be disabled.",e);
      return null;
    }
catch (    CertificateException e) {
      LOG.error("Unable to parse public certificate file. JWT auth will be disabled.",e);
      return null;
    }
  }
 else {
    return null;
  }
}
