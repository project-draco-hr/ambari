{
  this.properties=properties;
  agentConfigsMap=new HashMap<String,String>();
  agentConfigsMap.put(CHECK_REMOTE_MOUNTS.getKey(),getProperty(CHECK_REMOTE_MOUNTS));
  agentConfigsMap.put(CHECK_MOUNTS_TIMEOUT.getKey(),getProperty(CHECK_MOUNTS_TIMEOUT));
  agentConfigsMap.put(ENABLE_AUTO_AGENT_CACHE_UPDATE.getKey(),getProperty(ENABLE_AUTO_AGENT_CACHE_UPDATE));
  configsMap=new HashMap<String,String>();
  configsMap.putAll(agentConfigsMap);
  configsMap.put(AMBARI_PYTHON_WRAP.getKey(),getProperty(AMBARI_PYTHON_WRAP));
  configsMap.put(SRVR_AGENT_HOSTNAME_VALIDATE.getKey(),getProperty(SRVR_AGENT_HOSTNAME_VALIDATE));
  configsMap.put(SRVR_TWO_WAY_SSL.getKey(),getProperty(SRVR_TWO_WAY_SSL));
  configsMap.put(SRVR_TWO_WAY_SSL_PORT.getKey(),getProperty(SRVR_TWO_WAY_SSL_PORT));
  configsMap.put(SRVR_ONE_WAY_SSL_PORT.getKey(),getProperty(SRVR_ONE_WAY_SSL_PORT));
  configsMap.put(SRVR_KSTR_DIR.getKey(),getProperty(SRVR_KSTR_DIR));
  configsMap.put(SRVR_CRT_NAME.getKey(),getProperty(SRVR_CRT_NAME));
  configsMap.put(SRVR_KEY_NAME.getKey(),getProperty(SRVR_KEY_NAME));
  configsMap.put(SRVR_CSR_NAME.getKey(),getProperty(SRVR_CSR_NAME));
  configsMap.put(KSTR_NAME.getKey(),getProperty(KSTR_NAME));
  configsMap.put(KSTR_TYPE.getKey(),getProperty(KSTR_TYPE));
  configsMap.put(TSTR_NAME.getKey(),getProperty(TSTR_NAME));
  configsMap.put(TSTR_TYPE.getKey(),getProperty(TSTR_TYPE));
  configsMap.put(SRVR_CRT_PASS_FILE.getKey(),getProperty(SRVR_CRT_PASS_FILE));
  configsMap.put(PASSPHRASE_ENV.getKey(),getProperty(PASSPHRASE_ENV));
  configsMap.put(PASSPHRASE.getKey(),System.getenv(configsMap.get(PASSPHRASE_ENV.getKey())));
  configsMap.put(RESOURCES_DIR.getKey(),getProperty(RESOURCES_DIR));
  configsMap.put(SRVR_CRT_PASS_LEN.getKey(),getProperty(SRVR_CRT_PASS_LEN));
  configsMap.put(SRVR_DISABLED_CIPHERS.getKey(),getProperty(SRVR_DISABLED_CIPHERS));
  configsMap.put(SRVR_DISABLED_PROTOCOLS.getKey(),getProperty(SRVR_DISABLED_PROTOCOLS));
  configsMap.put(CLIENT_API_SSL_KSTR_DIR_NAME.getKey(),properties.getProperty(CLIENT_API_SSL_KSTR_DIR_NAME.getKey(),configsMap.get(SRVR_KSTR_DIR.getKey())));
  configsMap.put(CLIENT_API_SSL_KSTR_NAME.getKey(),getProperty(CLIENT_API_SSL_KSTR_NAME));
  configsMap.put(CLIENT_API_SSL_KSTR_TYPE.getKey(),getProperty(CLIENT_API_SSL_KSTR_TYPE));
  configsMap.put(CLIENT_API_SSL_TSTR_NAME.getKey(),getProperty(CLIENT_API_SSL_TSTR_NAME));
  configsMap.put(CLIENT_API_SSL_TSTR_TYPE.getKey(),getProperty(CLIENT_API_SSL_TSTR_TYPE));
  configsMap.put(CLIENT_API_SSL_CRT_PASS_FILE_NAME.getKey(),getProperty(CLIENT_API_SSL_CRT_PASS_FILE_NAME));
  configsMap.put(JAVA_HOME.getKey(),getProperty(JAVA_HOME));
  configsMap.put(PARALLEL_STAGE_EXECUTION.getKey(),getProperty(PARALLEL_STAGE_EXECUTION));
  configsMap.put(SERVER_TMP_DIR.getKey(),getProperty(SERVER_TMP_DIR));
  configsMap.put(REQUEST_LOGPATH.getKey(),getProperty(REQUEST_LOGPATH));
  configsMap.put(LOG4JMONITOR_DELAY.getKey(),getProperty(LOG4JMONITOR_DELAY));
  configsMap.put(REQUEST_LOG_RETAINDAYS.getKey(),getProperty(REQUEST_LOG_RETAINDAYS));
  configsMap.put(EXTERNAL_SCRIPT_TIMEOUT.getKey(),getProperty(EXTERNAL_SCRIPT_TIMEOUT));
  configsMap.put(SHARED_RESOURCES_DIR.getKey(),getProperty(SHARED_RESOURCES_DIR));
  configsMap.put(KDC_PORT.getKey(),getProperty(KDC_PORT));
  configsMap.put(AGENT_PACKAGE_PARALLEL_COMMANDS_LIMIT.getKey(),getProperty(AGENT_PACKAGE_PARALLEL_COMMANDS_LIMIT));
  configsMap.put(PROXY_ALLOWED_HOST_PORTS.getKey(),getProperty(PROXY_ALLOWED_HOST_PORTS));
  File passFile=new File(configsMap.get(SRVR_KSTR_DIR.getKey()) + File.separator + configsMap.get(SRVR_CRT_PASS_FILE.getKey()));
  String password=null;
  if (!passFile.exists()) {
    LOG.info("Generation of file with password");
    try {
      password=RandomStringUtils.randomAlphanumeric(Integer.parseInt(configsMap.get(SRVR_CRT_PASS_LEN.getKey())));
      FileUtils.writeStringToFile(passFile,password);
      ShellCommandUtil.setUnixFilePermissions(ShellCommandUtil.MASK_OWNER_ONLY_RW,passFile.getAbsolutePath());
    }
 catch (    IOException e) {
      e.printStackTrace();
      throw new RuntimeException("Error reading certificate password from file");
    }
  }
 else {
    LOG.info("Reading password from existing file");
    try {
      password=FileUtils.readFileToString(passFile);
      password=password.replaceAll("\\p{Cntrl}","");
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  configsMap.put(SRVR_CRT_PASS.getKey(),password);
  if (getApiSSLAuthentication()) {
    LOG.info("API SSL Authentication is turned on.");
    File httpsPassFile=new File(configsMap.get(CLIENT_API_SSL_KSTR_DIR_NAME.getKey()) + File.separator + configsMap.get(CLIENT_API_SSL_CRT_PASS_FILE_NAME.getKey()));
    if (httpsPassFile.exists()) {
      LOG.info("Reading password from existing file");
      try {
        password=FileUtils.readFileToString(httpsPassFile);
        password=password.replaceAll("\\p{Cntrl}","");
      }
 catch (      IOException e) {
        e.printStackTrace();
        throw new RuntimeException("Error reading certificate password from" + " file " + httpsPassFile.getAbsolutePath());
      }
    }
 else {
      LOG.error("There is no keystore for https UI connection.");
      LOG.error("Run \"ambari-server setup-https\" or set " + Configuration.API_USE_SSL.getKey() + " = false.");
      throw new RuntimeException("Error reading certificate password from " + "file " + httpsPassFile.getAbsolutePath());
    }
    configsMap.put(CLIENT_API_SSL_CRT_PASS.getKey(),password);
  }
  kerberosAuthenticationProperties=createKerberosAuthenticationProperties();
  loadSSLParams();
}
