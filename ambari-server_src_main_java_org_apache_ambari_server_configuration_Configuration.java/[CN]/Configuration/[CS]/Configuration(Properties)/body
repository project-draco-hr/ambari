{
  this.properties=properties;
  configsMap=new HashMap<String,String>();
  configsMap.put(SRVR_KSTR_DIR_KEY,properties.getProperty(SRVR_KSTR_DIR_KEY,SRVR_KSTR_DIR_DEFAULT));
  configsMap.put(SRVR_KSTR_DIR_KEY,properties.getProperty(SRVR_KSTR_DIR_KEY,SRVR_KSTR_DIR_DEFAULT));
  configsMap.put(SRVR_CRT_NAME_KEY,properties.getProperty(SRVR_CRT_NAME_KEY,SRVR_CRT_NAME_DEFAULT));
  configsMap.put(SRVR_KEY_NAME_KEY,properties.getProperty(SRVR_KEY_NAME_KEY,SRVR_KEY_NAME_DEFAULT));
  configsMap.put(KSTR_NAME_KEY,properties.getProperty(KSTR_NAME_KEY,KSTR_NAME_DEFAULT));
  configsMap.put(SRVR_CRT_PASS_FILE_KEY,properties.getProperty(SRVR_CRT_PASS_FILE_KEY,SRVR_CRT_PASS_FILE_DEFAULT));
  configsMap.put(SRVR_CRT_PASS_KEY,properties.getProperty(SRVR_CRT_PASS_KEY,SRVR_CRT_PASS_FILE_DEFAULT));
  configsMap.put(PASSPHRASE_ENV_KEY,properties.getProperty(PASSPHRASE_ENV_KEY,PASSPHRASE_ENV_DEFAULT));
  configsMap.put(PASSPHRASE_KEY,System.getenv(configsMap.get(PASSPHRASE_ENV_KEY)));
  configsMap.put(CLIENT_SECURITY_KEY,properties.getProperty(CLIENT_SECURITY_KEY,CLIENT_SECURITY_DEFAULT));
  configsMap.put(LDAP_USER_DEFAULT_ROLE_KEY,properties.getProperty(LDAP_USER_DEFAULT_ROLE_KEY,LDAP_USER_DEFAULT_ROLE_DEFAULT));
  configsMap.put(RESOURCES_DIR_KEY,properties.getProperty(RESOURCES_DIR_KEY,RESOURCES_DIR_DEFAULT));
  try {
    File passFile=new File(configsMap.get(SRVR_KSTR_DIR_KEY) + File.separator + configsMap.get(SRVR_CRT_PASS_FILE_KEY));
    if (passFile.exists()) {
      String srvrCrtPass=FileUtils.readFileToString(passFile);
      configsMap.put(SRVR_CRT_PASS_KEY,srvrCrtPass.trim());
    }
 else {
      LOG.info("Not found pass file at " + passFile);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
    throw new RuntimeException("Error reading certificate password from file");
  }
}
