{
  this.properties=properties;
  agentConfigsMap=new HashMap<String,String>();
  agentConfigsMap.put(CHECK_REMOTE_MOUNTS_KEY,properties.getProperty(CHECK_REMOTE_MOUNTS_KEY,CHECK_REMOTE_MOUNTS_DEFAULT));
  agentConfigsMap.put(CHECK_MOUNTS_TIMEOUT_KEY,properties.getProperty(CHECK_MOUNTS_TIMEOUT_KEY,CHECK_MOUNTS_TIMEOUT_DEFAULT));
  configsMap=new HashMap<String,String>();
  configsMap.putAll(agentConfigsMap);
  configsMap.put(AMBARI_PYTHON_WRAP_KEY,properties.getProperty(AMBARI_PYTHON_WRAP_KEY,AMBARI_PYTHON_WRAP_DEFAULT));
  configsMap.put(SRVR_TWO_WAY_SSL_KEY,properties.getProperty(SRVR_TWO_WAY_SSL_KEY,SRVR_TWO_WAY_SSL_DEFAULT));
  configsMap.put(SRVR_TWO_WAY_SSL_PORT_KEY,properties.getProperty(SRVR_TWO_WAY_SSL_PORT_KEY,SRVR_TWO_WAY_SSL_PORT_DEFAULT));
  configsMap.put(SRVR_ONE_WAY_SSL_PORT_KEY,properties.getProperty(SRVR_ONE_WAY_SSL_PORT_KEY,SRVR_ONE_WAY_SSL_PORT_DEFAULT));
  configsMap.put(SRVR_KSTR_DIR_KEY,properties.getProperty(SRVR_KSTR_DIR_KEY,SRVR_KSTR_DIR_DEFAULT));
  configsMap.put(SRVR_CRT_NAME_KEY,properties.getProperty(SRVR_CRT_NAME_KEY,SRVR_CRT_NAME_DEFAULT));
  configsMap.put(SRVR_KEY_NAME_KEY,properties.getProperty(SRVR_KEY_NAME_KEY,SRVR_KEY_NAME_DEFAULT));
  configsMap.put(SRVR_CSR_NAME_KEY,properties.getProperty(SRVR_CSR_NAME_KEY,SRVR_CSR_NAME_DEFAULT));
  configsMap.put(KSTR_NAME_KEY,properties.getProperty(KSTR_NAME_KEY,KSTR_NAME_DEFAULT));
  configsMap.put(SRVR_CRT_PASS_FILE_KEY,properties.getProperty(SRVR_CRT_PASS_FILE_KEY,SRVR_CRT_PASS_FILE_DEFAULT));
  configsMap.put(PASSPHRASE_ENV_KEY,properties.getProperty(PASSPHRASE_ENV_KEY,PASSPHRASE_ENV_DEFAULT));
  configsMap.put(PASSPHRASE_KEY,System.getenv(configsMap.get(PASSPHRASE_ENV_KEY)));
  configsMap.put(RESOURCES_DIR_KEY,properties.getProperty(RESOURCES_DIR_KEY,RESOURCES_DIR_DEFAULT));
  configsMap.put(SRVR_CRT_PASS_LEN_KEY,properties.getProperty(SRVR_CRT_PASS_LEN_KEY,SRVR_CRT_PASS_LEN_DEFAULT));
  configsMap.put(SRVR_DISABLED_CIPHERS,properties.getProperty(SRVR_DISABLED_CIPHERS,SRVR_DISABLED_CIPHERS_DEFAULT));
  configsMap.put(SRVR_DISABLED_PROTOCOLS,properties.getProperty(SRVR_DISABLED_PROTOCOLS,SRVR_DISABLED_PROTOCOLS_DEFAULT));
  configsMap.put(CLIENT_API_SSL_KSTR_DIR_NAME_KEY,properties.getProperty(CLIENT_API_SSL_KSTR_DIR_NAME_KEY,configsMap.get(SRVR_KSTR_DIR_KEY)));
  configsMap.put(CLIENT_API_SSL_KSTR_NAME_KEY,properties.getProperty(CLIENT_API_SSL_KSTR_NAME_KEY,CLIENT_API_SSL_KSTR_NAME_DEFAULT));
  configsMap.put(CLIENT_API_SSL_CRT_PASS_FILE_NAME_KEY,properties.getProperty(CLIENT_API_SSL_CRT_PASS_FILE_NAME_KEY,CLIENT_API_SSL_CRT_PASS_FILE_NAME_DEFAULT));
  configsMap.put(CLIENT_API_SSL_KEY_NAME_KEY,properties.getProperty(CLIENT_API_SSL_KEY_NAME_KEY,CLIENT_API_SSL_KEY_NAME_DEFAULT));
  configsMap.put(CLIENT_API_SSL_CRT_NAME_KEY,properties.getProperty(CLIENT_API_SSL_CRT_NAME_KEY,CLIENT_API_SSL_CRT_NAME_DEFAULT));
  configsMap.put(JAVA_HOME_KEY,properties.getProperty(JAVA_HOME_KEY));
  configsMap.put(PARALLEL_STAGE_EXECUTION_KEY,properties.getProperty(PARALLEL_STAGE_EXECUTION_KEY,PARALLEL_STAGE_EXECUTION_DEFAULT));
  configsMap.put(SERVER_TMP_DIR_KEY,properties.getProperty(SERVER_TMP_DIR_KEY,SERVER_TMP_DIR_DEFAULT));
  configsMap.put(EXTERNAL_SCRIPT_TIMEOUT_KEY,properties.getProperty(EXTERNAL_SCRIPT_TIMEOUT_KEY,EXTERNAL_SCRIPT_TIMEOUT_DEFAULT));
  configsMap.put(SHARED_RESOURCES_DIR_KEY,properties.getProperty(SHARED_RESOURCES_DIR_KEY,SHARED_RESOURCES_DIR_DEFAULT));
  configsMap.put(KDC_PORT_KEY,properties.getProperty(KDC_PORT_KEY,KDC_PORT_KEY_DEFAULT));
  configsMap.put(AGENT_PACKAGE_PARALLEL_COMMANDS_LIMIT_KEY,properties.getProperty(AGENT_PACKAGE_PARALLEL_COMMANDS_LIMIT_KEY,AGENT_PACKAGE_PARALLEL_COMMANDS_LIMIT_DEFAULT));
  File passFile=new File(configsMap.get(SRVR_KSTR_DIR_KEY) + File.separator + configsMap.get(SRVR_CRT_PASS_FILE_KEY));
  String password=null;
  if (!passFile.exists()) {
    LOG.info("Generation of file with password");
    try {
      password=RandomStringUtils.randomAlphanumeric(Integer.parseInt(configsMap.get(SRVR_CRT_PASS_LEN_KEY)));
      FileUtils.writeStringToFile(passFile,password);
      ShellCommandUtil.setUnixFilePermissions(ShellCommandUtil.MASK_OWNER_ONLY_RW,passFile.getAbsolutePath());
    }
 catch (    IOException e) {
      e.printStackTrace();
      throw new RuntimeException("Error reading certificate password from file");
    }
  }
 else {
    LOG.info("Reading password from existing file");
    try {
      password=FileUtils.readFileToString(passFile);
      password=password.replaceAll("\\p{Cntrl}","");
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  configsMap.put(SRVR_CRT_PASS_KEY,password);
  if (getApiSSLAuthentication()) {
    LOG.info("API SSL Authentication is turned on.");
    File httpsPassFile=new File(configsMap.get(CLIENT_API_SSL_KSTR_DIR_NAME_KEY) + File.separator + configsMap.get(CLIENT_API_SSL_CRT_PASS_FILE_NAME_KEY));
    if (httpsPassFile.exists()) {
      LOG.info("Reading password from existing file");
      try {
        password=FileUtils.readFileToString(httpsPassFile);
        password=password.replaceAll("\\p{Cntrl}","");
      }
 catch (      IOException e) {
        e.printStackTrace();
        throw new RuntimeException("Error reading certificate password from" + " file " + httpsPassFile.getAbsolutePath());
      }
    }
 else {
      LOG.error("There is no keystore for https UI connection.");
      LOG.error("Run \"ambari-server setup-https\" or set " + Configuration.API_USE_SSL + " = false.");
      throw new RuntimeException("Error reading certificate password from " + "file " + httpsPassFile.getAbsolutePath());
    }
    configsMap.put(CLIENT_API_SSL_CRT_PASS_KEY,password);
  }
  loadSSLParams();
}
