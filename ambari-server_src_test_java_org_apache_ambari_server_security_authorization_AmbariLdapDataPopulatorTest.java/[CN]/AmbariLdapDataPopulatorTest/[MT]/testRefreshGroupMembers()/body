{
  final Configuration configuration=EasyMock.createNiceMock(Configuration.class);
  final Users users=EasyMock.createNiceMock(Users.class);
  final GroupEntity ldapGroup=new GroupEntity();
  ldapGroup.setGroupId(1);
  ldapGroup.setGroupName("ldapGroup");
  ldapGroup.setLdapGroup(true);
  ldapGroup.setMemberEntities(new HashSet<MemberEntity>());
  final User ldapUserWithoutGroup=createLdapUserWithoutGroup();
  final User ldapUserWithGroup=createLdapUserWithGroup(ldapGroup);
  final User localUserWithoutGroup=createLocalUserWithoutGroup();
  final User localUserWithGroup=createLocalUserWithGroup(ldapGroup);
  final AmbariLdapDataPopulator populator=new AmbariLdapDataPopulatorTestInstance(configuration,users){
    @Override protected Set<String> getExternalLdapGroupMembers(    String groupName){
      return new HashSet<String>(){
{
          add(ldapUserWithGroup.getUserName());
          add(ldapUserWithoutGroup.getUserName());
        }
      }
;
    }
    @Override protected Map<String,User> getInternalUsers(){
      return new HashMap<String,User>(){
{
          put(localUserWithGroup.getUserName(),localUserWithGroup);
          put(localUserWithoutGroup.getUserName(),localUserWithoutGroup);
        }
      }
;
    }
    @Override protected Map<String,User> getInternalMembers(    String groupName){
      return new HashMap<String,User>(){
{
          put(localUserWithGroup.getUserName(),localUserWithGroup);
        }
      }
;
    }
  }
;
  users.createUser(EasyMock.<String>anyObject(),EasyMock.<String>anyObject());
  EasyMock.expectLastCall().times(2);
  users.addMemberToGroup(EasyMock.<String>anyObject(),EasyMock.<String>anyObject());
  EasyMock.expectLastCall().times(2);
  EasyMock.replay(users);
  populator.refreshGroupMembers(ldapGroup.getGroupName());
  EasyMock.verify(users);
}
