{
  TreeNode<Resource> resultTree=queryResult.getResultTree();
  Map<String,AlertDefinitionSummary> summaries=new HashMap<String,AlertDefinitionSummary>();
  for (  TreeNode<Resource> node : resultTree.getChildren()) {
    Resource resource=node.getObject();
    Long definitionId=(Long)resource.getPropertyValue(AlertResourceProvider.ALERT_DEFINITION_ID);
    String definitionName=(String)resource.getPropertyValue(AlertResourceProvider.ALERT_DEFINITION_NAME);
    AlertState state=(AlertState)resource.getPropertyValue(AlertResourceProvider.ALERT_STATE);
    Long originalTimestampObject=(Long)resource.getPropertyValue(AlertResourceProvider.ALERT_ORIGINAL_TIMESTAMP);
    MaintenanceState maintenanceState=(MaintenanceState)resource.getPropertyValue(AlertResourceProvider.ALERT_MAINTENANCE_STATE);
    String alertText=(String)resource.getPropertyValue(AlertResourceProvider.ALERT_TEXT);
    if (null == state) {
      state=AlertState.UNKNOWN;
    }
    long originalTimestamp=0;
    if (null != originalTimestampObject) {
      originalTimestamp=originalTimestampObject.longValue();
    }
    boolean isMaintenanceModeEnabled=false;
    if (null != maintenanceState && maintenanceState != MaintenanceState.OFF) {
      isMaintenanceModeEnabled=true;
    }
    AlertDefinitionSummary groupSummaryInfo=summaries.get(definitionName);
    if (null == groupSummaryInfo) {
      groupSummaryInfo=new AlertDefinitionSummary();
      groupSummaryInfo.Id=definitionId;
      groupSummaryInfo.Name=definitionName;
      summaries.put(definitionName,groupSummaryInfo);
    }
    final AlertStateValues alertStateValues;
switch (state) {
case CRITICAL:
{
        alertStateValues=groupSummaryInfo.State.Critical;
        break;
      }
case OK:
{
      alertStateValues=groupSummaryInfo.State.Ok;
      break;
    }
case WARNING:
{
    alertStateValues=groupSummaryInfo.State.Warning;
    break;
  }
default :
case UNKNOWN:
{
  alertStateValues=groupSummaryInfo.State.Unknown;
  break;
}
}
if (isMaintenanceModeEnabled) {
alertStateValues.MaintenanceCount++;
}
 else {
alertStateValues.Count++;
}
if (originalTimestamp > alertStateValues.Timestamp) {
alertStateValues.Timestamp=originalTimestamp;
alertStateValues.AlertText=alertText;
}
}
Set<Entry<String,AlertDefinitionSummary>> entrySet=summaries.entrySet();
List<AlertDefinitionSummary> groupedResources=new ArrayList<AlertDefinitionSummary>(entrySet.size());
for (Entry<String,AlertDefinitionSummary> entry : entrySet) {
groupedResources.add(entry.getValue());
}
Result groupedSummary=new ResultImpl(true);
TreeNode<Resource> summaryTree=groupedSummary.getResultTree();
Resource resource=new ResourceImpl(Resource.Type.Alert);
summaryTree.addChild(resource,ALERTS_SUMMARY_GROUP);
resource.setProperty(ALERTS_SUMMARY_GROUP,groupedResources);
return groupedSummary;
}
