@patch('ambari_server.utils.get_ubuntu_pg_version')
@patch('os.path.isfile')
@patch('subprocess.Popen')
def test_get_postgre_hba_dir(self, popenMock, os_path_is_fine_mock, get_ubuntu_pg_version_mock):
    p = MagicMock()
    utils.PG_HBA_INIT_FILES['debian'] = '/tmp'
    get_ubuntu_pg_version_mock.return_value = '9.1'
    self.assertEqual('/tmp/9.1/main', utils.get_postgre_hba_dir('debian'))
    os_path_is_fine_mock.return_value = True
    utils.PG_HBA_ROOT_DEFAULT = '/def/dir'
    p.communicate.return_value = ('/my/new/location\n', None)
    p.returncode = 0
    popenMock.return_value = p
    self.assertEqual('/my/new/location', utils.get_postgre_hba_dir('redhat'))
    os_path_is_fine_mock.return_value = True
    utils.PG_HBA_ROOT_DEFAULT = '/def/dir'
    p.communicate.return_value = ('\n', None)
    p.returncode = 0
    popenMock.return_value = p
    self.assertEqual('/def/dir', utils.get_postgre_hba_dir('redhat'))
    os_path_is_fine_mock.return_value = True
    popenMock.reset()
    p.communicate.return_value = (None, None)
    utils.get_postgre_hba_dir('redhat')
    popenMock.assert_called_with('alias exit=return; source /etc/rc.d/init.d/postgresql status &>/dev/null; echo $PGDATA', shell=True, stdin=(-1), stderr=(-1), stdout=(-1))
    popenMock.reset()
    p.communicate.return_value = (None, None)
    utils.get_postgre_hba_dir('suse')
    popenMock.assert_called_with('alias exit=return; source /etc/init.d/postgresql status &>/dev/null; echo $PGDATA', shell=True, stdin=(-1), stderr=(-1), stdout=(-1))
