@patch('time.time')
@patch.object(utils, 'pid_exists')
@patch('time.sleep')
@patch('socket.socket')
@patch('__builtin__.open')
def test_wait_for_pid(self, open_mock, socket_mock, sleep_mock, pid_exists_mock, time_mock):
    from ambari_server.serverConfiguration import SSL_API, CLIENT_API_PORT_PROPERTY
    pid_exists_mock.return_value = True
    time_mock.side_effect = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51]
    s = socket_mock.return_value
    s.connect = MagicMock()
    properties = FakeProperties({SSL_API: 'false', CLIENT_API_PORT_PROPERTY: '8080', })
    out = StringIO.StringIO()
    sys.stdout = out
    live_pids = utils.wait_for_pid([{'pid': '111', 'exe': '', 'cmd': '', }, {'pid': '222', 'exe': '', 'cmd': '', }], 5, 40, 10, '', '', properties)
    self.assertEqual('.\nServer started listening on 8080\n\nDB configs consistency check: no errors and warnings were found.\nWaiting for 10 seconds, for server WEB UI initialization\n........', out.getvalue())
    sys.stdout = sys.__stdout__
    self.assertEquals(2, live_pids)
