def _collect(self):
    uri_value = self._lookup_property_value(self.uri)
    if (uri_value is None):
        uri_value = self.host_name
    uri_value_array = uri_value.split(',')
    if (len(uri_value_array) > 1):
        for item in uri_value_array:
            if item.startswith(self.host_name):
                uri_value = item
    host = BaseAlert.get_host_from_url(uri_value)
    if (host is None):
        host = self.host_name
    try:
        port = int(get_port_from_url(uri_value))
    except:
        if (self.default_port is None):
            label = 'Unable to determine port from URI {0}'.format(uri_value)
            return (self.RESULT_UNKNOWN, [label])
        port = self.default_port
    if logger.isEnabledFor(logging.DEBUG):
        logger.debug('checking {0} listening on port {1}'.format(host, str(port)))
    try:
        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.settimeout(1.5)
            t = time.time()
            s.connect((host, port))
            millis = (time.time() - t)
            return (self.RESULT_OK, [(millis / 1000), port])
        except Exception as e:
            return (self.RESULT_CRITICAL, [str(e), host, port])
    finally:
        if (s is not None):
            try:
                s.close()
            except:
                pass
