{
  Map<String,Map<String,String>> configsMap=new HashMap<String,Map<String,String>>();
  try {
    if (providerUrl == null || providerUrl.trim().length() < 1) {
      return configsMap;
    }
    JsonElement json=super.doGetJson(providerUrl,"/slider");
    if (json != null) {
      JsonObject configsJson=json.getAsJsonObject().get("configurations").getAsJsonObject();
      for (      Entry<String,JsonElement> entry : configsJson.entrySet()) {
        if ("complete-config".equals(entry.getKey()) || "quicklinks".equals(entry.getKey())) {
          continue;
        }
        JsonElement entryJson=super.doGetJson(providerUrl,"/slider/" + entry.getKey());
        if (entryJson != null) {
          JsonObject configsObj=entryJson.getAsJsonObject().get("entries").getAsJsonObject();
          if (configsObj != null) {
            Map<String,String> configs=new HashMap<String,String>();
            for (            Entry<String,JsonElement> e : configsObj.entrySet()) {
              configs.put(e.getKey(),e.getValue().getAsString());
            }
            configsMap.put(entry.getKey(),configs);
          }
        }
      }
    }
  }
 catch (  HttpException e) {
    logger.warn("Unable to determine quicklinks from " + providerUrl,e);
  }
catch (  IOException e) {
    logger.warn("Unable to determine quicklinks from " + providerUrl,e);
  }
  return configsMap;
}
