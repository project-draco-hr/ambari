{
  Map<String,String> quickLinks=new HashMap<String,String>();
  try {
    if (providerUrl == null || providerUrl.trim().length() < 1) {
      return quickLinks;
    }
    JsonElement json=super.doGetJson(providerUrl,"/slider/quicklinks");
    if (json != null && json.getAsJsonObject() != null && json.getAsJsonObject().has("entries")) {
      JsonObject jsonObject=json.getAsJsonObject().get("entries").getAsJsonObject();
      for (      Entry<String,JsonElement> entry : jsonObject.entrySet()) {
        if ("org.apache.slider.jmx".equals(entry.getKey())) {
          quickLinks.put("JMX",entry.getValue().getAsString());
        }
 else         if ("org.apache.slider.monitor".equals(entry.getKey())) {
          quickLinks.put("UI",entry.getValue().getAsString());
        }
 else         if ("org.apache.slider.metrics.ui".equals(entry.getKey())) {
          quickLinks.put("Metrics UI",entry.getValue().getAsString());
        }
 else         if ("org.apache.slider.metrics".equals(entry.getKey())) {
          quickLinks.put(SliderAppsViewController.METRICS_API_NAME,entry.getValue().getAsString());
        }
 else {
          quickLinks.put(entry.getKey(),entry.getValue().getAsString());
        }
      }
    }
  }
 catch (  HttpException e) {
    logger.warn("Unable to determine quicklinks from " + providerUrl,e);
  }
catch (  IOException e) {
    logger.warn("Unable to determine quicklinks from " + providerUrl,e);
  }
  return quickLinks;
}
