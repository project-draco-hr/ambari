{
  if (LOG.isDebugEnabled()) {
    LOG.debug("Fetching metrics with key: " + key);
  }
  validateKey(key);
  Element element=null;
  try {
    element=get(key);
  }
 catch (  LockTimeoutException le) {
    Throwable t=le.getCause();
    if (t instanceof CacheException) {
      t=t.getCause();
      if (t instanceof SocketTimeoutException) {
        throw new SocketTimeoutException(t.getMessage());
      }
      if (t instanceof ConnectException) {
        throw new ConnectException(t.getMessage());
      }
    }
  }
  TimelineMetrics timelineMetrics=new TimelineMetrics();
  if (element != null && element.getObjectValue() != null) {
    TimelineMetricsCacheValue value=(TimelineMetricsCacheValue)element.getObjectValue();
    if (LOG.isDebugEnabled()) {
      LOG.debug("Returning value from cache: " + value);
    }
    timelineMetrics=value.getTimelineMetrics();
  }
  if (LOG.isDebugEnabled()) {
    if (printCacheStatsCounter.getAndIncrement() == 0) {
      StatisticsGateway statistics=this.getStatistics();
      LOG.debug("Metrics cache stats => \n" + ", Evictions = " + statistics.cacheEvictedCount() + ", Expired = "+ statistics.cacheExpiredCount()+ ", Hits = "+ statistics.cacheHitCount()+ ", Misses = "+ statistics.cacheMissCount()+ ", Hit ratio = "+ statistics.cacheHitRatio()+ ", Puts = "+ statistics.cachePutCount()+ ", Size in MB = "+ (statistics.getLocalHeapSizeInBytes() / 1048576));
    }
 else {
      printCacheStatsCounter.compareAndSet(100,0);
    }
  }
  return timelineMetrics;
}
