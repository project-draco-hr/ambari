{
  ResourceDefinition resourceDef=createStrictMock(ResourceDefinition.class);
  ResultFormatter resultFormatter=createStrictMock(ResultFormatter.class);
  Object formattedResult=new Object();
  Serializer serializer=createStrictMock(Serializer.class);
  Object serializedResult=new Object();
  RequestFactory requestFactory=createStrictMock(RequestFactory.class);
  ResponseFactory responseFactory=createStrictMock(ResponseFactory.class);
  Request request=createNiceMock(Request.class);
  RequestHandler requestHandler=createStrictMock(RequestHandler.class);
  Result result=createStrictMock(Result.class);
  Response response=createStrictMock(Response.class);
  HttpHeaders httpHeaders=createNiceMock(HttpHeaders.class);
  UriInfo uriInfo=createNiceMock(UriInfo.class);
  String clusterName="clusterName";
  String serviceName="serviceName";
  expect(requestFactory.createRequest(eq(httpHeaders),eq(uriInfo),eq(Request.RequestType.GET),eq(resourceDef))).andReturn(request);
  expect(requestHandler.handleRequest(request)).andReturn(result);
  expect(resourceDef.getResultFormatter()).andReturn(resultFormatter);
  expect(resultFormatter.format(result,uriInfo)).andReturn(formattedResult);
  expect(request.getSerializer()).andReturn(serializer);
  expect(serializer.serialize(formattedResult)).andReturn(serializedResult);
  expect(responseFactory.createResponse(serializedResult)).andReturn(response);
  replay(resourceDef,resultFormatter,serializer,requestFactory,responseFactory,request,requestHandler,result,response,httpHeaders,uriInfo);
  ComponentService componentService=new TestComponentService(resourceDef,clusterName,serviceName,null,requestFactory,responseFactory,requestHandler);
  assertSame(response,componentService.getComponents(httpHeaders,uriInfo));
  verify(resourceDef,resultFormatter,serializer,requestFactory,responseFactory,request,requestHandler,result,response,httpHeaders,uriInfo);
}
