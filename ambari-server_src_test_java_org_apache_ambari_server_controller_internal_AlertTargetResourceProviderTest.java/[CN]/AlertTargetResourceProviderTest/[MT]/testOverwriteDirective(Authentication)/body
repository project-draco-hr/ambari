{
  AlertTargetEntity entity=getMockEntities().get(0);
  expect(m_dao.findTargetByName(ALERT_TARGET_NAME)).andReturn(entity).atLeastOnce();
  Capture<AlertTargetEntity> targetCapture=EasyMock.newCapture();
  expect(m_dao.merge(capture(targetCapture))).andReturn(entity).once();
  replay(m_amc,m_dao);
  SecurityContextHolder.getContext().setAuthentication(authentication);
  AlertTargetResourceProvider provider=createProvider(m_amc);
  Map<String,Object> requestProps=getCreationProperties();
  Map<String,String> requestInfoProperties=new HashMap<String,String>();
  requestInfoProperties.put(AlertTargetResourceDefinition.OVERWRITE_DIRECTIVE,"true");
  Request request=PropertyHelper.getCreateRequest(Collections.singleton(requestProps),requestInfoProperties);
  provider.createResources(request);
  Assert.assertTrue(targetCapture.hasCaptured());
  entity=targetCapture.getValue();
  Assert.assertNotNull(entity);
  assertEquals(ALERT_TARGET_NAME,entity.getTargetName());
  assertEquals(ALERT_TARGET_DESC,entity.getDescription());
  assertEquals(ALERT_TARGET_TYPE,entity.getNotificationType());
  assertTrue(CollectionPresentationUtils.isJsonsEquals(ALERT_TARGET_PROPS,entity.getProperties()));
  assertEquals(false,entity.isGlobal());
  assertNotNull(entity.getAlertStates());
  assertEquals(EnumSet.allOf(AlertState.class),entity.getAlertStates());
  verify(m_amc,m_dao);
}
