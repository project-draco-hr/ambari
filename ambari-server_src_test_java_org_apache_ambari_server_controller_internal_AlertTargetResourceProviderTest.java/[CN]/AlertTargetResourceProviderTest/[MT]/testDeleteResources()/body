{
  AmbariManagementController amc=createMock(AmbariManagementController.class);
  Capture<AlertTargetEntity> entityCapture=new Capture<AlertTargetEntity>();
  Capture<List<AlertTargetEntity>> listCapture=new Capture<List<AlertTargetEntity>>();
  m_dao.createTargets(capture(listCapture));
  expectLastCall();
  replay(amc,m_dao);
  AlertTargetResourceProvider provider=createProvider(amc);
  Map<String,Object> requestProps=new HashMap<String,Object>();
  requestProps.put(AlertTargetResourceProvider.ALERT_TARGET_NAME,ALERT_TARGET_NAME);
  requestProps.put(AlertTargetResourceProvider.ALERT_TARGET_DESCRIPTION,ALERT_TARGET_DESC);
  requestProps.put(AlertTargetResourceProvider.ALERT_TARGET_NOTIFICATION_TYPE,ALERT_TARGET_TYPE);
  Request request=PropertyHelper.getCreateRequest(Collections.singleton(requestProps),null);
  provider.createResources(request);
  Assert.assertTrue(listCapture.hasCaptured());
  AlertTargetEntity entity=listCapture.getValue().get(0);
  Assert.assertNotNull(entity);
  Predicate p=new PredicateBuilder().property(AlertTargetResourceProvider.ALERT_TARGET_ID).equals(ALERT_TARGET_ID.toString()).toPredicate();
  entity.setTargetId(ALERT_TARGET_ID);
  resetToStrict(m_dao);
  expect(m_dao.findTargetById(ALERT_TARGET_ID.longValue())).andReturn(entity).anyTimes();
  m_dao.remove(capture(entityCapture));
  expectLastCall();
  replay(m_dao);
  provider.deleteResources(p);
  AlertTargetEntity entity1=entityCapture.getValue();
  Assert.assertEquals(ALERT_TARGET_ID,entity1.getTargetId());
  verify(amc,m_dao);
}
