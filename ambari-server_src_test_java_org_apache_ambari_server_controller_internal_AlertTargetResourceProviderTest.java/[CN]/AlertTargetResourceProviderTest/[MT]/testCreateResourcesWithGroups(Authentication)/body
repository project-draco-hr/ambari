{
  List<Long> groupIds=Arrays.asList(1L,2L,3L);
  List<AlertGroupEntity> groups=new ArrayList<AlertGroupEntity>();
  AlertGroupEntity group1=new AlertGroupEntity();
  AlertGroupEntity group2=new AlertGroupEntity();
  AlertGroupEntity group3=new AlertGroupEntity();
  group1.setGroupId(1L);
  group2.setGroupId(2L);
  group3.setGroupId(3L);
  groups.addAll(Arrays.asList(group1,group2,group3));
  expect(m_dao.findGroupsById(groupIds)).andReturn(groups).once();
  Capture<AlertTargetEntity> targetCapture=EasyMock.newCapture();
  m_dao.create(capture(targetCapture));
  expectLastCall();
  replay(m_amc,m_dao);
  SecurityContextHolder.getContext().setAuthentication(authentication);
  AlertTargetResourceProvider provider=createProvider(m_amc);
  Map<String,Object> requestProps=getCreationProperties();
  requestProps.put(AlertTargetResourceProvider.ALERT_TARGET_GROUPS,groupIds);
  Request request=PropertyHelper.getCreateRequest(Collections.singleton(requestProps),null);
  provider.createResources(request);
  Assert.assertTrue(targetCapture.hasCaptured());
  AlertTargetEntity entity=targetCapture.getValue();
  Assert.assertNotNull(entity);
  assertEquals(ALERT_TARGET_NAME,entity.getTargetName());
  assertEquals(ALERT_TARGET_DESC,entity.getDescription());
  assertEquals(ALERT_TARGET_TYPE,entity.getNotificationType());
  assertTrue(CollectionPresentationUtils.isJsonsEquals(ALERT_TARGET_PROPS,entity.getProperties()));
  assertEquals(false,entity.isGlobal());
  assertEquals(3,entity.getAlertGroups().size());
  assertNotNull(entity.getAlertStates());
  assertEquals(EnumSet.allOf(AlertState.class),entity.getAlertStates());
  verify(m_amc,m_dao);
}
