{
  Capture<AlertTargetEntity> entityCapture=new Capture<AlertTargetEntity>();
  m_dao.create(capture(entityCapture));
  expectLastCall().times(1);
  AlertTargetEntity target=new AlertTargetEntity();
  expect(m_dao.findTargetById(ALERT_TARGET_ID)).andReturn(target).times(1);
  List<Long> groupIds=Arrays.asList(1L,2L,3L);
  List<AlertGroupEntity> groups=new ArrayList<AlertGroupEntity>();
  AlertGroupEntity group1=new AlertGroupEntity();
  AlertGroupEntity group2=new AlertGroupEntity();
  AlertGroupEntity group3=new AlertGroupEntity();
  group1.setGroupId(1L);
  group2.setGroupId(2L);
  group3.setGroupId(3L);
  groups.addAll(Arrays.asList(group1,group2,group3));
  expect(m_dao.findGroupsById(EasyMock.eq(groupIds))).andReturn(groups).once();
  expect(m_dao.merge(capture(entityCapture))).andReturn(target).once();
  replay(m_amc,m_dao);
  SecurityContextHolder.getContext().setAuthentication(authentication);
  AlertTargetResourceProvider provider=createProvider(m_amc);
  Map<String,Object> requestProps=getCreationProperties();
  Request request=PropertyHelper.getCreateRequest(Collections.singleton(requestProps),null);
  provider.createResources(request);
  requestProps=new HashMap<String,Object>();
  requestProps.put(AlertTargetResourceProvider.ALERT_TARGET_ID,ALERT_TARGET_ID.toString());
  requestProps.put(AlertTargetResourceProvider.ALERT_TARGET_GROUPS,groupIds);
  Predicate predicate=new PredicateBuilder().property(AlertTargetResourceProvider.ALERT_TARGET_ID).equals(ALERT_TARGET_ID.toString()).toPredicate();
  request=PropertyHelper.getUpdateRequest(requestProps,null);
  provider.updateResources(request,predicate);
  assertTrue(entityCapture.hasCaptured());
  AlertTargetEntity entity=entityCapture.getValue();
  assertEquals(3,entity.getAlertGroups().size());
  verify(m_amc,m_dao);
}
