{
  File f=new File("src/test/resources/version_definition_test_all_services.xml");
  VersionDefinitionXml xml=VersionDefinitionXml.load(f.toURI().toURL());
  StackInfo stack=new StackInfo(){
    private Map<String,ServiceInfo> m_services=new HashMap<String,ServiceInfo>(){
{
        put("HDFS",makeService("HDFS"));
        put("HBASE",makeService("HBASE"));
        put("HIVE",makeService("HIVE"));
        put("YARN",makeService("YARN"));
      }
    }
;
    @Override public ServiceInfo getService(    String name){
      return m_services.get(name);
    }
    @Override public synchronized Collection<ServiceInfo> getServices(){
      return m_services.values();
    }
  }
;
  List<ManifestServiceInfo> stackServices=xml.getStackServices(stack);
  assertEquals(4,xml.manifestServices.size());
  assertEquals(3,xml.getAvailableServices(stack).size());
  assertEquals(4,stackServices.size());
  boolean foundHdfs=false;
  boolean foundYarn=false;
  boolean foundHive=false;
  for (  ManifestServiceInfo msi : stackServices) {
    if ("HDFS".equals(msi.m_name)) {
      foundHdfs=true;
      assertEquals("HDFS Display",msi.m_display);
      assertEquals("HDFS Comment",msi.m_comment);
      assertEquals(1,msi.m_versions.size());
      assertEquals("2.7.1",msi.m_versions.iterator().next());
    }
 else     if ("YARN".equals(msi.m_name)) {
      foundYarn=true;
      assertEquals(1,msi.m_versions.size());
      assertEquals("1.1.1",msi.m_versions.iterator().next());
    }
 else     if ("HIVE".equals(msi.m_name)) {
      foundHive=true;
      assertEquals(2,msi.m_versions.size());
      assertTrue(msi.m_versions.contains("1.1.0"));
      assertTrue(msi.m_versions.contains("2.0.0"));
    }
  }
  assertTrue(foundHdfs);
  assertTrue(foundYarn);
  assertTrue(foundHive);
}
