@patch('resource_management.core.providers.system._ensure_metadata')
@patch.object(sudo, 'create_file')
@patch.object(os.path, 'exists')
@patch.object(os.path, 'isdir')
@patch.object(time, 'asctime')
def test_action_create_xml_config_sorted_by_key(self, time_asctime_mock, os_path_isdir_mock, os_path_exists_mock, create_file_mock, ensure_mock):
    '\n    Tests if \'create\' action - creates new non existent xml file and writes proper data\n    where configurations={"Key":"Value"} are stored in sorted by key order\n    '
    os_path_isdir_mock.side_effect = [False, True]
    os_path_exists_mock.return_value = False
    time_asctime_mock.return_value = 'Wed 2014-02'
    with Environment('/') as env:
        XmlConfig('file.xml', conf_dir='/dir/conf', configurations={'': '', 'third': 'should be third', 'first': 'should be first', 'z_last': 'should be last', 'second': 'should be second', }, configuration_attributes={})
    create_file_mock.assert_called_with('/dir/conf/file.xml', '<!--Wed 2014-02-->\n    <configuration>\n    \n    <property>\n      <name></name>\n      <value></value>\n    </property>\n    \n    <property>\n      <name>first</name>\n      <value>should be first</value>\n    </property>\n    \n    <property>\n      <name>second</name>\n      <value>should be second</value>\n    </property>\n    \n    <property>\n      <name>third</name>\n      <value>should be third</value>\n    </property>\n    \n    <property>\n      <name>z_last</name>\n      <value>should be last</value>\n    </property>\n    \n  </configuration>')
