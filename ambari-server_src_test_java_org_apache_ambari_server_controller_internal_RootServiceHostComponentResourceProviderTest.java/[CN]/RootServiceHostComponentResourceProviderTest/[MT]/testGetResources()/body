{
  Resource.Type type=Resource.Type.RootServiceHostComponent;
  AmbariManagementController managementController=createMock(AmbariManagementController.class);
  Set<RootServiceHostComponentResponse> allResponse=new HashSet<RootServiceHostComponentResponse>();
  allResponse.add(new RootServiceHostComponentResponse("host1","component1","HEALTHY",Collections.<String,String>emptyMap()));
  allResponse.add(new RootServiceHostComponentResponse("host2","component2","HEALTHY",Collections.<String,String>emptyMap()));
  allResponse.add(new RootServiceHostComponentResponse("host3","component3","HEARBEAT_LOST",Collections.<String,String>emptyMap()));
  Set<RootServiceHostComponentResponse> nameResponse=new HashSet<RootServiceHostComponentResponse>();
  nameResponse.add(new RootServiceHostComponentResponse("host4","component4","HEALTHY",Collections.<String,String>emptyMap()));
  expect(managementController.getRootServiceHostComponents(EasyMock.<Set<RootServiceHostComponentRequest>>anyObject())).andReturn(allResponse).once();
  expect(managementController.getRootServiceHostComponents(EasyMock.<Set<RootServiceHostComponentRequest>>anyObject())).andReturn(nameResponse).once();
  replay(managementController);
  ResourceProvider provider=AbstractControllerResourceProvider.getResourceProvider(type,PropertyHelper.getPropertyIds(type),PropertyHelper.getKeyPropertyIds(type),managementController);
  Set<String> propertyIds=new HashSet<String>();
  propertyIds.add(RootServiceHostComponentResourceProvider.SERVICE_NAME_PROPERTY_ID);
  propertyIds.add(RootServiceHostComponentResourceProvider.HOST_NAME_PROPERTY_ID);
  propertyIds.add(RootServiceHostComponentResourceProvider.COMPONENT_NAME_PROPERTY_ID);
  propertyIds.add(RootServiceHostComponentResourceProvider.COMPONENT_STATE_PROPERTY_ID);
  propertyIds.add(RootServiceHostComponentResourceProvider.PROPERTIES_PROPERTY_ID);
  Request request=PropertyHelper.getReadRequest(propertyIds);
  Set<Resource> resources=provider.getResources(request,null);
  Assert.assertEquals(allResponse.size(),resources.size());
  for (  Resource resource : resources) {
    String hostName=(String)resource.getPropertyValue(RootServiceHostComponentResourceProvider.HOST_NAME_PROPERTY_ID);
    String componentName=(String)resource.getPropertyValue(RootServiceHostComponentResourceProvider.COMPONENT_NAME_PROPERTY_ID);
    String componentState=(String)resource.getPropertyValue(RootServiceHostComponentResourceProvider.COMPONENT_STATE_PROPERTY_ID);
    Assert.assertTrue(allResponse.contains(new RootServiceHostComponentResponse(hostName,componentName,componentState,Collections.<String,String>emptyMap())));
  }
  Predicate predicate=new PredicateBuilder().property(RootServiceHostComponentResourceProvider.COMPONENT_NAME_PROPERTY_ID).equals("component4").toPredicate();
  resources=provider.getResources(request,predicate);
  Assert.assertEquals(1,resources.size());
  Assert.assertEquals("component4",resources.iterator().next().getPropertyValue(RootServiceHostComponentResourceProvider.COMPONENT_NAME_PROPERTY_ID));
  verify(managementController);
}
