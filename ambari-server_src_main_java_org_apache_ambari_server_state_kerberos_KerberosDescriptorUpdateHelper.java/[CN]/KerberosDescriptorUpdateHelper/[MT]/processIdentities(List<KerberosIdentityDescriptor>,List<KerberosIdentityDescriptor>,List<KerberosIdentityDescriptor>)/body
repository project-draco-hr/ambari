{
  if ((userIdentities == null) || userIdentities.isEmpty() || ((previousStackIdentities == null) && (newStackIdentities == null))) {
    return userIdentities;
  }
  Map<String,KerberosIdentityDescriptor> previousStackIdentityMap=toMap(previousStackIdentities);
  Map<String,KerberosIdentityDescriptor> newStackIdentityMap=toMap(newStackIdentities);
  Map<String,KerberosIdentityDescriptor> userStackIdentityMap=toMap(userIdentities);
  Map<String,KerberosIdentityDescriptor> updatedIdentities=new TreeMap<String,KerberosIdentityDescriptor>();
  if (previousStackIdentityMap == null) {
    previousStackIdentityMap=Collections.emptyMap();
  }
  if (newStackIdentityMap == null) {
    newStackIdentityMap=Collections.emptyMap();
  }
  for (  Map.Entry<String,KerberosIdentityDescriptor> entry : userStackIdentityMap.entrySet()) {
    String name=entry.getKey();
    KerberosIdentityDescriptor userValue=entry.getValue();
    if (userValue != null) {
      if (newStackIdentityMap.containsKey(name)) {
        KerberosIdentityDescriptor newValue=newStackIdentityMap.get(name);
        KerberosIdentityDescriptor previousValue=previousStackIdentityMap.get(name);
        updatedIdentities.put(name,processIdentity(previousValue,newValue,userValue));
      }
 else       if (previousStackIdentityMap.containsKey(name)) {
        LOG.debug("Removing identity named {} from user-specified Kerberos Descriptor",name);
      }
 else {
        LOG.debug("Leaving identity named {} in user-specified Kerberos Descriptor unchanged since it was user-defined.",name);
        updatedIdentities.put(name,userValue);
      }
    }
  }
  return new ArrayList<KerberosIdentityDescriptor>(updatedIdentities.values());
}
