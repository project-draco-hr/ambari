{
  sleepIntervalMillis=30000l;
  checkpointCutOffMultiplier=2;
  Configuration metricsConf=new Configuration();
  metricsConf.setInt(AGGREGATOR_CHECKPOINT_DELAY,0);
  metricsConf.setInt(RESULTSET_FETCH_SIZE,2000);
  startTimeInDoWork=new AtomicLong(0);
  endTimeInDoWork=new AtomicLong(0);
  checkPoint=new AtomicLong(-1);
  actualRuns=0;
  agg=new AbstractTimelineAggregator(null,metricsConf,clock){
    @Override public boolean doWork(    long startTime,    long endTime){
      startTimeInDoWork.set(startTime);
      endTimeInDoWork.set(endTime);
      actualRuns++;
      return true;
    }
    @Override protected Condition prepareMetricQueryCondition(    long startTime,    long endTime){
      return null;
    }
    @Override protected void aggregate(    ResultSet rs,    long startTime,    long endTime) throws IOException, SQLException {
    }
    @Override protected Long getSleepIntervalMillis(){
      return sleepIntervalMillis;
    }
    @Override protected Integer getCheckpointCutOffMultiplier(){
      return checkpointCutOffMultiplier;
    }
    @Override public boolean isDisabled(){
      return false;
    }
    @Override protected String getCheckpointLocation(){
      return "dummy_ckptFile";
    }
    protected long readCheckPoint(){
      return checkPoint.get();
    }
    @Override protected void saveCheckPoint(    long checkpointTime) throws IOException {
      checkPoint.set(checkpointTime);
    }
  }
;
}
