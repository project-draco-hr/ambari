{
  clock.setTime(0);
  long sleep=agg.runOnce(sleepIntervalMillis);
  Assert.assertEquals("startTime should be zero",0,startTimeInDoWork.get());
  Assert.assertEquals("endTime  should be zero",0,endTimeInDoWork.get());
  Assert.assertEquals(0,checkPoint.get());
  Assert.assertEquals(sleep,sleepIntervalMillis);
  Assert.assertEquals("Do not aggregate on first run",0,actualRuns);
  clock.setTime(clock.getTime() + sleepIntervalMillis);
  sleep=agg.runOnce(sleepIntervalMillis);
  Assert.assertEquals("startTime",clock.getTime() - sleepIntervalMillis,startTimeInDoWork.get());
  Assert.assertEquals("endTime",clock.getTime(),endTimeInDoWork.get());
  Assert.assertEquals(clock.getTime(),checkPoint.get());
  Assert.assertEquals(sleep,sleepIntervalMillis);
  Assert.assertEquals(1,actualRuns);
  clock.setTime(clock.getTime() + sleepIntervalMillis);
  sleep=agg.runOnce(sleepIntervalMillis);
  Assert.assertEquals("startTime",clock.getTime() - sleepIntervalMillis,startTimeInDoWork.get());
  Assert.assertEquals("endTime",clock.getTime(),endTimeInDoWork.get());
  Assert.assertEquals(clock.getTime(),checkPoint.get());
  Assert.assertEquals(sleep,sleepIntervalMillis);
  Assert.assertEquals(2,actualRuns);
  clock.setTime(clock.getTime() + (checkpointCutOffMultiplier * sleepIntervalMillis));
  sleep=agg.runOnce(sleepIntervalMillis);
  Assert.assertEquals("startTime after 2xinterval",clock.getTime() - (checkpointCutOffMultiplier * sleepIntervalMillis),startTimeInDoWork.get());
  Assert.assertEquals("endTime after 2xinterval",clock.getTime() - sleepIntervalMillis,endTimeInDoWork.get());
  Assert.assertEquals("checkpoint after 2xinterval",clock.getTime() - sleepIntervalMillis,checkPoint.get());
  Assert.assertEquals(sleep,sleepIntervalMillis);
  Assert.assertEquals(3,actualRuns);
  clock.setTime(clock.getTime() + sleepIntervalMillis);
  sleep=agg.runOnce(sleepIntervalMillis);
  Assert.assertEquals("startTime ",clock.getTime() - (checkpointCutOffMultiplier * sleepIntervalMillis),startTimeInDoWork.get());
  Assert.assertEquals("endTime  ",clock.getTime() - sleepIntervalMillis,endTimeInDoWork.get());
  Assert.assertEquals("checkpoint ",clock.getTime() - sleepIntervalMillis,checkPoint.get());
  Assert.assertEquals(sleep,sleepIntervalMillis);
  Assert.assertEquals(4,actualRuns);
  clock.setTime(clock.getTime() + (checkpointCutOffMultiplier * sleepIntervalMillis));
  sleep=agg.runOnce(sleepIntervalMillis);
  Assert.assertEquals(4,actualRuns);
  Assert.assertEquals("checkpoint after too much lag is reset to " + "current clock time",clock.getTime(),checkPoint.get());
  Assert.assertEquals(sleep,sleepIntervalMillis);
}
