def execute(parameters=None, host_name=None):
    '\n  Returns a tuple containing the result code and a pre-formatted result label\n\n  Keyword arguments:\n  parameters (dictionary): a mapping of parameter key to value\n  host_name (string): the name of this host where the alert is running\n  '
    if (parameters is None):
        return ('UNKNOWN', ['There were no parameters supplied to the script.'])
    uri = None
    scheme = 'http'
    http_uri = None
    https_uri = None
    http_policy = 'HTTP_ONLY'
    percent_warning = PERCENT_WARNING
    percent_critical = PERCENT_CRITICAL
    checkpoint_tx = CHECKPOINT_TX_DEFAULT
    checkpoint_period = CHECKPOINT_PERIOD_DEFAULT
    if (NN_HTTP_ADDRESS_KEY in parameters):
        http_uri = parameters[NN_HTTP_ADDRESS_KEY]
    if (NN_HTTPS_ADDRESS_KEY in parameters):
        https_uri = parameters[NN_HTTPS_ADDRESS_KEY]
    if (NN_HTTP_POLICY_KEY in parameters):
        http_policy = parameters[NN_HTTP_POLICY_KEY]
    if (NN_CHECKPOINT_TX_KEY in parameters):
        checkpoint_tx = parameters[NN_CHECKPOINT_TX_KEY]
    if (NN_CHECKPOINT_PERIOD_KEY in parameters):
        checkpoint_period = parameters[NN_CHECKPOINT_PERIOD_KEY]
    uri = http_uri
    if (http_policy == 'HTTPS_ONLY'):
        scheme = 'https'
        if (https_uri is not None):
            uri = https_uri
    current_time = int(round((time.time() * 1000)))
    last_checkpoint_time_qry = '{0}://{1}/jmx?qry=Hadoop:service=NameNode,name=FSNamesystem'.format(scheme, uri)
    journal_transaction_info_qry = '{0}://{1}/jmx?qry=Hadoop:service=NameNode,name=NameNodeInfo'.format(scheme, uri)
    label = None
    result_code = 'OK'
    try:
        last_checkpoint_time = int(get_value_from_jmx(last_checkpoint_time_qry, 'LastCheckpointTime'))
        journal_transaction_info = get_value_from_jmx(journal_transaction_info_qry, 'JournalTransactionInfo')
        journal_transaction_info_dict = json.loads(journal_transaction_info)
        last_tx = int(journal_transaction_info_dict['LastAppliedOrWrittenTxId'])
        most_recent_tx = int(journal_transaction_info_dict['MostRecentCheckpointTxId'])
        transaction_difference = (last_tx - most_recent_tx)
        delta = ((current_time - last_checkpoint_time) / 1000)
        label = LABEL.format(h=get_time(delta)['h'], m=get_time(delta)['m'], tx=transaction_difference)
        if ((transaction_difference > int(checkpoint_tx)) and (((float(delta) / int(checkpoint_period)) * 100) >= int(percent_critical))):
            result_code = 'CRITICAL'
        elif ((transaction_difference > int(checkpoint_tx)) and (((float(delta) / int(checkpoint_period)) * 100) >= int(percent_warning))):
            result_code = 'WARNING'
    except Exception as e:
        label = str(e)
        result_code = 'UNKNOWN'
    return (result_code, [label])
