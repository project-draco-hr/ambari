{
  TestStreamProvider streamProvider=new TestStreamProvider();
  TestJMXHostProvider hostProvider=new TestJMXHostProvider(false);
  TestMetricHostProvider metricsHostProvider=new TestMetricHostProvider();
  JMXPropertyProvider propertyProvider=metricPropertyProviderFactory.createJMXPropertyProvider(PropertyHelper.getJMXPropertyIds(Resource.Type.HostComponent),streamProvider,hostProvider,metricsHostProvider,PropertyHelper.getPropertyId("HostRoles","cluster_name"),PropertyHelper.getPropertyId("HostRoles","host_name"),PropertyHelper.getPropertyId("HostRoles","component_name"),PropertyHelper.getPropertyId("HostRoles","state"));
  Resource resource=new ResourceImpl(Resource.Type.HostComponent);
  resource.setProperty(CLUSTER_NAME_PROPERTY_ID,"c1");
  resource.setProperty(HOST_COMPONENT_HOST_NAME_PROPERTY_ID,"domu-12-31-39-0e-34-e1.compute-1.internal");
  resource.setProperty(HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID,"NAMENODE");
  resource.setProperty(HOST_COMPONENT_STATE_PROPERTY_ID,"STARTED");
  Map<String,TemporalInfo> temporalInfoMap=new HashMap<String,TemporalInfo>();
  Request request=PropertyHelper.getReadRequest(Collections.singleton("metrics/rpc/ReceivedBytes"),temporalInfoMap);
  Assert.assertEquals(1,propertyProvider.populateResources(Collections.singleton(resource),request,null).size());
  Assert.assertEquals(propertyProvider.getSpec("http","domu-12-31-39-0e-34-e1.compute-1.internal","50070","/jmx"),streamProvider.getLastSpec());
  Assert.assertEquals(13670605,resource.getPropertyValue("metrics/rpc/ReceivedBytes"));
  Assert.assertNull(resource.getPropertyValue("metrics/dfs/namenode/CreateFileOps"));
}
