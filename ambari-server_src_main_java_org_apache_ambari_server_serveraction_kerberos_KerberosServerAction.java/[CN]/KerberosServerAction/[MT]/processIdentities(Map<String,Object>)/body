{
  CommandReport commandReport=null;
  Map<String,String> commandParameters=getCommandParameters();
  actionLog.writeStdOut("Processing identities...");
  LOG.info("Processing identities...");
  if (commandParameters != null) {
    KerberosCredential administratorCredential=getAdministratorCredential(commandParameters);
    String defaultRealm=getDefaultRealm(commandParameters);
    KDCType kdcType=getKDCType(commandParameters);
    String dataDirectoryPath=getDataDirectoryPath(commandParameters);
    if (dataDirectoryPath != null) {
      File dataDirectory=new File(dataDirectoryPath);
      if (dataDirectory.exists()) {
        if (!dataDirectory.isDirectory() || !dataDirectory.canRead()) {
          String message=String.format("Failed to process the identities, the data directory is not accessible: %s",dataDirectory.getAbsolutePath());
          actionLog.writeStdErr(message);
          LOG.error(message);
          throw new AmbariException(message);
        }
        File indexFile=new File(dataDirectory,DATA_FILE_NAME);
        if (indexFile.exists()) {
          if (!indexFile.canRead()) {
            String message=String.format("Failed to process the identities, cannot read the index file: %s",indexFile.getAbsolutePath());
            actionLog.writeStdErr(message);
            LOG.error(message);
            throw new AmbariException(message);
          }
          KerberosOperationHandler handler=kerberosOperationHandlerFactory.getKerberosOperationHandler(kdcType);
          if (handler == null) {
            String message=String.format("Failed to process the identities, a KDC operation handler was not found for the KDC type of : %s",kdcType.toString());
            actionLog.writeStdErr(message);
            LOG.error(message);
            throw new AmbariException(message);
          }
          try {
            handler.open(administratorCredential,defaultRealm,getConfiguration("kerberos-env"));
          }
 catch (          KerberosOperationException e) {
            String message=String.format("Failed to process the identities, could not properly open the KDC operation handler: %s",e.getMessage());
            actionLog.writeStdErr(message);
            LOG.error(message);
            throw new AmbariException(message,e);
          }
          KerberosActionDataFileReader reader=null;
          try {
            reader=new KerberosActionDataFileReader(indexFile);
            for (            Map<String,String> record : reader) {
              commandReport=processRecord(record,defaultRealm,handler,requestSharedDataContext);
              if (commandReport != null) {
                break;
              }
            }
          }
 catch (          AmbariException e) {
            throw new AmbariException(e.getMessage(),e);
          }
catch (          IOException e) {
            String message=String.format("Failed to process the identities, cannot read the index file: %s",indexFile.getAbsolutePath());
            actionLog.writeStdErr(message);
            LOG.error(message,e);
            throw new AmbariException(message,e);
          }
 finally {
            if (reader != null) {
              try {
                reader.close();
              }
 catch (              IOException e) {
              }
            }
            try {
              handler.close();
            }
 catch (            KerberosOperationException e) {
            }
          }
        }
      }
    }
  }
  actionLog.writeStdOut("Processing identities completed.");
  LOG.info("Processing identities completed.");
  return (commandReport == null) ? createCommandReport(0,HostRoleStatus.COMPLETED,"{}",actionLog.getStdOut(),actionLog.getStdErr()) : commandReport;
}
