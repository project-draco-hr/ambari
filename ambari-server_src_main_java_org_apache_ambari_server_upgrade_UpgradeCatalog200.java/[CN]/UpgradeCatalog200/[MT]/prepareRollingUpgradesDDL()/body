{
  List<DBAccessor.DBColumnInfo> columns=new ArrayList<DBAccessor.DBColumnInfo>();
  columns.add(new DBColumnInfo("repo_version_id",Long.class,null,null,false));
  columns.add(new DBColumnInfo("stack",String.class,255,null,false));
  columns.add(new DBColumnInfo("version",String.class,255,null,false));
  columns.add(new DBColumnInfo("display_name",String.class,128,null,false));
  columns.add(new DBColumnInfo("upgrade_package",String.class,255,null,false));
  columns.add(new DBColumnInfo("repositories",char[].class,32672,null,false));
  dbAccessor.createTable("repo_version",columns,"repo_version_id");
  dbAccessor.executeQuery("INSERT INTO ambari_sequences(sequence_name, sequence_value) VALUES('repo_version_id_seq', 0)",false);
  dbAccessor.executeQuery("ALTER TABLE repo_version ADD CONSTRAINT UQ_repo_version_display_name UNIQUE (display_name)");
  dbAccessor.executeQuery("ALTER TABLE repo_version ADD CONSTRAINT UQ_repo_version_stack_version UNIQUE (stack, version)");
  dbAccessor.addColumn("hostcomponentstate",new DBAccessor.DBColumnInfo("upgrade_state",String.class,32,"NONE",false));
  dbAccessor.addColumn("host_role_command",new DBAccessor.DBColumnInfo("retry_allowed",Integer.class,1,0,false));
  columns=new ArrayList<DBColumnInfo>();
  columns.add(new DBAccessor.DBColumnInfo("id",Long.class,null,null,false));
  columns.add(new DBAccessor.DBColumnInfo("repo_version_id",Long.class,null,null,false));
  columns.add(new DBAccessor.DBColumnInfo("cluster_id",Long.class,null,null,false));
  columns.add(new DBAccessor.DBColumnInfo("state",String.class,32,null,false));
  columns.add(new DBAccessor.DBColumnInfo("start_time",Long.class,null,null,false));
  columns.add(new DBAccessor.DBColumnInfo("end_time",Long.class,null,null,true));
  columns.add(new DBAccessor.DBColumnInfo("user_name",String.class,32,null,true));
  dbAccessor.createTable("cluster_version",columns,"id");
  columns=new ArrayList<DBColumnInfo>();
  columns.add(new DBAccessor.DBColumnInfo("id",Long.class,null,null,false));
  columns.add(new DBAccessor.DBColumnInfo("repo_version_id",Long.class,null,null,false));
  columns.add(new DBAccessor.DBColumnInfo("host_name",String.class,255,null,false));
  columns.add(new DBAccessor.DBColumnInfo("state",String.class,32,null,false));
  dbAccessor.createTable("host_version",columns,"id");
  dbAccessor.addFKConstraint("cluster_version","FK_cluster_version_cluster_id","cluster_id","clusters","cluster_id",false);
  dbAccessor.addFKConstraint("cluster_version","FK_cluster_version_repovers_id","repo_version_id","repo_version","repo_version_id",false);
  dbAccessor.addFKConstraint("host_version","FK_host_version_host_name","host_name","hosts","host_name",false);
  dbAccessor.addFKConstraint("host_version","FK_host_version_repovers_id","repo_version_id","repo_version","repo_version_id",false);
  dbAccessor.executeQuery("INSERT INTO ambari_sequences(sequence_name, sequence_value) VALUES('cluster_version_id_seq', 0)",false);
  dbAccessor.executeQuery("INSERT INTO ambari_sequences(sequence_name, sequence_value) VALUES('host_version_id_seq', 0)",false);
  columns=new ArrayList<DBColumnInfo>();
  columns.add(new DBAccessor.DBColumnInfo("upgrade_id",Long.class,null,null,false));
  columns.add(new DBAccessor.DBColumnInfo("cluster_id",Long.class,null,null,false));
  columns.add(new DBAccessor.DBColumnInfo("request_id",Long.class,null,null,false));
  columns.add(new DBAccessor.DBColumnInfo("state",String.class,255,UpgradeState.NONE.name(),false));
  dbAccessor.createTable("upgrade",columns,"upgrade_id");
  dbAccessor.addFKConstraint("upgrade","fk_upgrade_cluster_id","cluster_id","clusters","cluster_id",false);
  dbAccessor.addFKConstraint("upgrade","fk_upgrade_request_id","request_id","request","request_id",false);
  dbAccessor.executeQuery("INSERT INTO ambari_sequences(sequence_name, sequence_value) VALUES('upgrade_id_seq', 0)",false);
  columns=new ArrayList<DBColumnInfo>();
  columns.add(new DBAccessor.DBColumnInfo("upgrade_group_id",Long.class,null,null,false));
  columns.add(new DBAccessor.DBColumnInfo("upgrade_id",Long.class,null,null,false));
  columns.add(new DBAccessor.DBColumnInfo("group_name",String.class,255,"",false));
  columns.add(new DBAccessor.DBColumnInfo("group_title",String.class,1024,"",false));
  dbAccessor.createTable("upgrade_group",columns,"upgrade_group_id");
  dbAccessor.addFKConstraint("upgrade_group","fk_upgrade_group_upgrade_id","upgrade_id","upgrade","upgrade_id",false);
  dbAccessor.executeQuery("INSERT INTO ambari_sequences(sequence_name, sequence_value) VALUES('upgrade_group_id_seq', 0)",false);
  columns=new ArrayList<DBColumnInfo>();
  columns.add(new DBAccessor.DBColumnInfo("upgrade_item_id",Long.class,null,null,false));
  columns.add(new DBAccessor.DBColumnInfo("upgrade_group_id",Long.class,null,null,false));
  columns.add(new DBAccessor.DBColumnInfo("stage_id",Long.class,null,null,false));
  columns.add(new DBAccessor.DBColumnInfo("state",String.class,255,UpgradeState.NONE.name(),false));
  columns.add(new DBAccessor.DBColumnInfo("hosts",char[].class,32672,null,true));
  columns.add(new DBAccessor.DBColumnInfo("tasks",char[].class,32672,null,true));
  columns.add(new DBAccessor.DBColumnInfo("item_text",String.class,1024,null,true));
  dbAccessor.createTable("upgrade_item",columns,"upgrade_item_id");
  dbAccessor.addFKConstraint("upgrade_item","fk_upgrade_item_upgrade_group_id","upgrade_group_id","upgrade_group","upgrade_group_id",false);
  dbAccessor.executeQuery("INSERT INTO ambari_sequences(sequence_name, sequence_value) VALUES('upgrade_item_id_seq', 0)",false);
}
