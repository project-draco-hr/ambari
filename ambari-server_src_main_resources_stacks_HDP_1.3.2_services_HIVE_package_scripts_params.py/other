'\nLicensed to the Apache Software Foundation (ASF) under one\nor more contributor license agreements.  See the NOTICE file\ndistributed with this work for additional information\nregarding copyright ownership.  The ASF licenses this file\nto you under the Apache License, Version 2.0 (the\n"License"); you may not use this file except in compliance\nwith the License.  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n'
from resource_management import *
import status_params
config = Script.get_config()
hive_metastore_user_name = config['configurations']['hive-site']['javax.jdo.option.ConnectionUserName']
hive_server_conf_dir = '/etc/hive/conf.server'
hive_jdbc_connection_url = config['configurations']['hive-site']['javax.jdo.option.ConnectionURL']
hive_metastore_user_passwd = config['configurations']['hive-site']['javax.jdo.option.ConnectionPassword']
hive_user = config['configurations']['hive-env']['hive_user']
hive_lib = '/usr/lib/hive/lib/'
hive_jdbc_driver = config['configurations']['hive-site']['javax.jdo.option.ConnectionDriverName']
if (hive_jdbc_driver == 'com.mysql.jdbc.Driver'):
    jdbc_jar_name = 'mysql-connector-java.jar'
    jdbc_symlink_name = 'mysql-jdbc-driver.jar'
elif (hive_jdbc_driver == 'org.postgresql.Driver'):
    jdbc_jar_name = 'postgresql-jdbc.jar'
    jdbc_symlink_name = 'postgres-jdbc-driver.jar'
elif (hive_jdbc_driver == 'oracle.jdbc.driver.OracleDriver'):
    jdbc_jar_name = 'ojdbc6.jar'
    jdbc_symlink_name = 'oracle-jdbc-driver.jar'
check_db_connection_jar_name = 'DBConnectionVerification.jar'
check_db_connection_jar = format('/usr/lib/ambari-agent/{check_db_connection_jar_name}')
hive_metastore_port = get_port_from_url(config['configurations']['hive-site']['hive.metastore.uris'])
hive_var_lib = '/var/lib/hive'
ambari_server_hostname = config['clusterHostInfo']['ambari_server_host'][0]
hive_server_host = config['clusterHostInfo']['hive_server_host'][0]
hive_server_port = default('/configurations/hive-site/hive.server2.thrift.port', '10000')
hive_url = format('jdbc:hive2://{hive_server_host}:{hive_server_port}')
smokeuser = config['configurations']['hadoop-env']['smokeuser']
smoke_test_sql = '/tmp/hiveserver2.sql'
smoke_test_path = '/tmp/hiveserver2Smoke.sh'
smoke_user_keytab = config['configurations']['hadoop-env']['smokeuser_keytab']
_authentication = config['configurations']['core-site']['hadoop.security.authentication']
security_enabled = ((not is_empty(_authentication)) and (_authentication == 'kerberos'))
kinit_path_local = functions.get_kinit_path(['/usr/bin', '/usr/kerberos/bin', '/usr/sbin'])
hive_metastore_keytab_path = config['configurations']['hive-site']['hive.metastore.kerberos.keytab.file']
hive_conf_dir = '/etc/hive/conf'
hive_dbroot = config['configurations']['hive-env']['hive_dbroot']
hive_log_dir = config['configurations']['hive-env']['hive_log_dir']
hive_pid_dir = status_params.hive_pid_dir
hive_pid = status_params.hive_pid
hive_database_name = config['configurations']['hive-env']['hive_database_name']
start_hiveserver2_script = 'startHiveserver2.sh'
hadoop_home = '/usr'
start_metastore_script = 'startMetastore.sh'
hive_metastore_pid = status_params.hive_metastore_pid
java_share_dir = '/usr/share/java'
driver_curl_target = format('{java_share_dir}/{jdbc_jar_name}')
hdfs_user = config['configurations']['hadoop-env']['hdfs_user']
user_group = config['configurations']['hadoop-env']['user_group']
artifact_dir = '/tmp/HDP-artifacts/'
target = format('{hive_lib}/{jdbc_jar_name}')
jdk_location = config['hostLevelParams']['jdk_location']
driver_curl_source = format('{jdk_location}/{jdbc_symlink_name}')
start_hiveserver2_path = '/tmp/start_hiveserver2_script'
start_metastore_path = '/tmp/start_metastore_script'
hive_aux_jars_path = config['configurations']['hive-env']['hive_aux_jars_path']
hadoop_heapsize = config['configurations']['hadoop-env']['hadoop_heapsize']
hive_heapsize = config['configurations']['hive-site']['hive.heapsize']
java64_home = config['hostLevelParams']['java_home']
hive_env_sh_template = config['configurations']['hive-env']['content']
db_name = config['configurations']['hive-env']['hive_database_name']
mysql_user = 'mysql'
mysql_group = 'mysql'
mysql_host = config['clusterHostInfo']['hive_mysql_host']
mysql_adduser_path = '/tmp/addMysqlUser.sh'
hcat_conf_dir = '/etc/hcatalog/conf'
hcat_lib = '/usr/lib/hcatalog/share/hcatalog'
hcat_dbroot = hcat_lib
hcat_user = config['configurations']['hive-env']['hcat_user']
webhcat_user = config['configurations']['hive-env']['webhcat_user']
hcat_pid_dir = status_params.hcat_pid_dir
hcat_log_dir = config['configurations']['hive-env']['hcat_log_dir']
hadoop_conf_dir = '/etc/hadoop/conf'
if (('hive-log4j' in config['configurations']) and ('content' in config['configurations']['hive-log4j'])):
    log4j_props = config['configurations']['hive-log4j']['content']
else:
    log4j_props = None
if (('hive-exec-log4j' in config['configurations']) and ('content' in config['configurations']['hive-exec-log4j'])):
    log4j_exec_props = config['configurations']['hive-exec-log4j']['content']
else:
    log4j_exec_props = None
daemon_name = status_params.daemon_name
hive_apps_whs_dir = config['configurations']['hive-site']['hive.metastore.warehouse.dir']
hive_hdfs_user_dir = format('/user/{hive_user}')
hive_hdfs_user_mode = 448
hostname = config['hostname']
hadoop_conf_dir = '/etc/hadoop/conf'
hdfs_user_keytab = config['configurations']['hadoop-env']['hdfs_user_keytab']
hdfs_user = config['configurations']['hadoop-env']['hdfs_user']
kinit_path_local = functions.get_kinit_path(['/usr/bin', '/usr/kerberos/bin', '/usr/sbin'])
import functools
HdfsDirectory = functools.partial(HdfsDirectory, conf_dir=hadoop_conf_dir, hdfs_user=hdfs_user, security_enabled=security_enabled, keytab=hdfs_user_keytab, kinit_path_local=kinit_path_local)
