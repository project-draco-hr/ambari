{
  ResourceDefinition componentResourceDef=createMock(ResourceDefinition.class);
  ResourceDefinition hostComponentResourceDef=createStrictMock(ResourceDefinition.class);
  Request request=createStrictMock(Request.class);
  Result result=createStrictMock(Result.class);
  ClusterController controller=createStrictMock(ClusterController.class);
  Schema componentSchema=createMock(Schema.class);
  Resource componentResource=createStrictMock(Resource.class);
  Query hostComponentQuery=createStrictMock(Query.class);
  Result hostComponentQueryResult=createStrictMock(Result.class);
  Resource hostComponentResource=createStrictMock(Resource.class);
  List<Resource> listResources=new ArrayList<Resource>();
  listResources.add(componentResource);
  Map<Resource.Type,String> mapResourceIds=new HashMap<Resource.Type,String>();
  mapResourceIds.put(Resource.Type.Cluster,"clusterName");
  mapResourceIds.put(Resource.Type.Service,"serviceName");
  mapResourceIds.put(Resource.Type.Component,"componentName");
  Set<ResourceDefinition> setChildren=new HashSet<ResourceDefinition>();
  Set<ResourceDefinition> setForeign=new HashSet<ResourceDefinition>();
  setForeign.add(hostComponentResourceDef);
  Map<String,List<Resource>> mapHostComponentResources=new HashMap<String,List<Resource>>();
  mapHostComponentResources.put("/",Collections.singletonList(hostComponentResource));
  expect(componentResourceDef.getType()).andReturn(Resource.Type.Component).atLeastOnce();
  expect(componentResourceDef.getResourceIds()).andReturn(mapResourceIds);
  expect(controller.getSchema(Resource.Type.Component)).andReturn(componentSchema).atLeastOnce();
  expect(componentSchema.getKeyPropertyId(Resource.Type.Cluster)).andReturn(new PropertyIdImpl("clusterId","",false));
  expect(componentSchema.getKeyPropertyId(Resource.Type.Service)).andReturn(new PropertyIdImpl("serviceId","",false));
  expect(componentSchema.getKeyPropertyId(Resource.Type.Component)).andReturn(new PropertyIdImpl("componentId","",false));
  expect(componentResourceDef.getId()).andReturn("componentName").atLeastOnce();
  expect(componentResourceDef.getChildren()).andReturn(setChildren);
  expect(componentResourceDef.getRelations()).andReturn(setForeign);
  expect(hostComponentResourceDef.getQuery()).andReturn(hostComponentQuery);
  PredicateBuilder pb=new PredicateBuilder();
  Predicate predicate=pb.property("clusterId","").equals("clusterName").and().property("serviceId","").equals("serviceName").and().property("componentId","").equals("componentName").toPredicate();
  expect(controller.getResources(eq(Resource.Type.Component),eq(request),eq(predicate))).andReturn(listResources);
  result.addResources("/",listResources);
  expect(hostComponentQuery.execute()).andReturn(hostComponentQueryResult);
  expect(hostComponentQueryResult.getResources()).andReturn(mapHostComponentResources);
  expect(hostComponentResourceDef.getId()).andReturn("hostComponentName");
  expect(hostComponentResourceDef.getSingularName()).andReturn("host_component");
  result.addResources("host_component",Collections.singletonList(hostComponentResource));
  replay(componentResourceDef,request,result,controller,componentSchema,componentResource,hostComponentResourceDef,hostComponentQuery,hostComponentQueryResult,hostComponentResource);
  QueryImpl query=new TestQuery(componentResourceDef,result,request,controller);
  Result testResult=query.execute();
  verify(componentResourceDef,request,result,controller,componentSchema,componentResource,hostComponentResourceDef,hostComponentQuery,hostComponentQueryResult,hostComponentResource);
}
