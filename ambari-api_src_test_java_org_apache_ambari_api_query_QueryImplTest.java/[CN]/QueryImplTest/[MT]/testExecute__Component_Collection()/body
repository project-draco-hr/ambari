{
  ResourceDefinition componentResourceDef=createMock(ResourceDefinition.class);
  Request request=createStrictMock(Request.class);
  Result result=createStrictMock(Result.class);
  ClusterController controller=createStrictMock(ClusterController.class);
  Schema componentSchema=createMock(Schema.class);
  Resource componentResource1=createStrictMock(Resource.class);
  Resource componentResource2=createStrictMock(Resource.class);
  List<Resource> listResources=new ArrayList<Resource>();
  listResources.add(componentResource1);
  listResources.add(componentResource2);
  Map<Resource.Type,String> mapResourceIds=new HashMap<Resource.Type,String>();
  mapResourceIds.put(Resource.Type.Cluster,"clusterName");
  mapResourceIds.put(Resource.Type.Service,"serviceName");
  expect(componentResourceDef.getType()).andReturn(Resource.Type.Component).atLeastOnce();
  expect(componentResourceDef.getResourceIds()).andReturn(mapResourceIds);
  expect(controller.getSchema(Resource.Type.Component)).andReturn(componentSchema).atLeastOnce();
  expect(componentSchema.getKeyPropertyId(Resource.Type.Cluster)).andReturn(new PropertyIdImpl("clusterId","",false));
  expect(componentSchema.getKeyPropertyId(Resource.Type.Service)).andReturn(new PropertyIdImpl("serviceId","",false));
  expect(componentResourceDef.getId()).andReturn(null).atLeastOnce();
  PredicateBuilder pb=new PredicateBuilder();
  Predicate predicate=pb.property("clusterId","").equals("clusterName").and().property("serviceId","").equals("serviceName").toPredicate();
  expect(controller.getResources(eq(Resource.Type.Component),eq(request),eq(predicate))).andReturn(listResources);
  result.addResources("/",listResources);
  replay(componentResourceDef,request,result,controller,componentSchema,componentResource1,componentResource2);
  QueryImpl query=new TestQuery(componentResourceDef,result,request,controller);
  Result testResult=query.execute();
  verify(componentResourceDef,request,result,controller,componentSchema,componentResource1,componentResource2);
}
