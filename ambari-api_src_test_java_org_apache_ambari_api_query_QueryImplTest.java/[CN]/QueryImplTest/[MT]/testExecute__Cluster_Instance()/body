{
  ResourceDefinition clusterResourceDef=createMock(ResourceDefinition.class);
  ResourceDefinition serviceResourceDef=createMock(ResourceDefinition.class);
  ResourceDefinition hostResourceDef=createMock(ResourceDefinition.class);
  Request request=createStrictMock(Request.class);
  Result result=createMock(Result.class);
  ClusterController controller=createStrictMock(ClusterController.class);
  Schema clusterSchema=createMock(Schema.class);
  Resource clusterResource=createStrictMock(Resource.class);
  Query serviceQuery=createStrictMock(Query.class);
  Result serviceQueryResult=createStrictMock(Result.class);
  Resource serviceResource=createStrictMock(Resource.class);
  Resource serviceResource2=createStrictMock(Resource.class);
  Query hostQuery=createStrictMock(Query.class);
  Result hostQueryResult=createStrictMock(Result.class);
  Resource hostResource=createStrictMock(Resource.class);
  List<Resource> listResources=new ArrayList<Resource>();
  listResources.add(clusterResource);
  Map<Resource.Type,String> mapResourceIds=new HashMap<Resource.Type,String>();
  mapResourceIds.put(Resource.Type.Cluster,"clusterName");
  Set<ResourceDefinition> setChildren=new HashSet<ResourceDefinition>();
  setChildren.add(serviceResourceDef);
  setChildren.add(hostResourceDef);
  Set<ResourceDefinition> setForeign=new HashSet<ResourceDefinition>();
  Map<String,List<Resource>> mapServiceResources=new HashMap<String,List<Resource>>();
  List<Resource> listServiceResources=new ArrayList<Resource>();
  listServiceResources.add(serviceResource);
  listServiceResources.add(serviceResource2);
  mapServiceResources.put("/",listServiceResources);
  Map<String,List<Resource>> mapHostResources=new HashMap<String,List<Resource>>();
  mapHostResources.put("/",Collections.singletonList(hostResource));
  expect(clusterResourceDef.getType()).andReturn(Resource.Type.Cluster).atLeastOnce();
  expect(clusterResourceDef.getResourceIds()).andReturn(mapResourceIds);
  expect(controller.getSchema(Resource.Type.Cluster)).andReturn(clusterSchema).atLeastOnce();
  expect(clusterSchema.getKeyPropertyId(Resource.Type.Cluster)).andReturn(new PropertyIdImpl("clusterId","",false));
  expect(clusterResourceDef.getId()).andReturn("clusterName").atLeastOnce();
  expect(clusterResourceDef.getChildren()).andReturn(setChildren);
  expect(serviceResourceDef.getQuery()).andReturn(serviceQuery);
  expect(hostResourceDef.getQuery()).andReturn(hostQuery);
  expect(clusterResourceDef.getRelations()).andReturn(setForeign);
  Predicate clusterEqualsPredicate=new EqualsPredicate(new PropertyIdImpl("clusterId","",false),"clusterName");
  expect(controller.getResources(eq(Resource.Type.Cluster),eq(request),eq(clusterEqualsPredicate))).andReturn(listResources);
  result.addResources("/",listResources);
  expect(serviceQuery.execute()).andReturn(serviceQueryResult);
  expect(serviceQueryResult.getResources()).andReturn(mapServiceResources);
  expect(serviceResourceDef.getId()).andReturn(null);
  expect(serviceResourceDef.getPluralName()).andReturn("services");
  result.addResources("services",listServiceResources);
  expect(hostQuery.execute()).andReturn(hostQueryResult);
  expect(hostQueryResult.getResources()).andReturn(mapHostResources);
  expect(hostResourceDef.getId()).andReturn(null);
  expect(hostResourceDef.getPluralName()).andReturn("hosts");
  result.addResources("hosts",Collections.singletonList(hostResource));
  replay(clusterResourceDef,request,result,controller,clusterSchema,clusterResource,serviceResourceDef,serviceQuery,serviceQueryResult,serviceResource,serviceResource2,hostResourceDef,hostQuery,hostQueryResult,hostResource);
  QueryImpl query=new TestQuery(clusterResourceDef,result,request,controller);
  Result testResult=query.execute();
  verify(clusterResourceDef,request,result,controller,clusterSchema,clusterResource,serviceResourceDef,serviceQuery,serviceQueryResult,serviceResource,serviceResource2,hostResourceDef,hostQuery,hostQueryResult,hostResource);
}
