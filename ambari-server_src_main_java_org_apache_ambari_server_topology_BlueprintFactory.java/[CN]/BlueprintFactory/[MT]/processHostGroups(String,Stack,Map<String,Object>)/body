{
  Set<HashMap<String,Object>> hostGroupProps=(HashSet<HashMap<String,Object>>)properties.get(HOST_GROUP_PROPERTY_ID);
  if (hostGroupProps == null || hostGroupProps.isEmpty()) {
    throw new IllegalArgumentException("At least one host group must be specified in a blueprint");
  }
  Collection<HostGroup> hostGroups=new ArrayList<HostGroup>();
  for (  HashMap<String,Object> hostGroupProperties : hostGroupProps) {
    String hostGroupName=(String)hostGroupProperties.get(HOST_GROUP_NAME_PROPERTY_ID);
    if (hostGroupName == null || hostGroupName.isEmpty()) {
      throw new IllegalArgumentException("Every host group must include a non-null 'name' property");
    }
    HashSet<HashMap<String,String>> componentProps=(HashSet<HashMap<String,String>>)hostGroupProperties.get(COMPONENT_PROPERTY_ID);
    Collection<Map<String,String>> configProps=(Collection<Map<String,String>>)hostGroupProperties.get(CONFIGURATION_PROPERTY_ID);
    Collection<Component> components=processHostGroupComponents(stack,hostGroupName,componentProps);
    Configuration configuration=configFactory.getConfiguration(configProps);
    String cardinality=String.valueOf(hostGroupProperties.get(HOST_GROUP_CARDINALITY_PROPERTY_ID));
    HostGroup group=new HostGroupImpl(hostGroupName,bpName,stack,components,configuration,cardinality);
    hostGroups.add(group);
  }
  return hostGroups;
}
