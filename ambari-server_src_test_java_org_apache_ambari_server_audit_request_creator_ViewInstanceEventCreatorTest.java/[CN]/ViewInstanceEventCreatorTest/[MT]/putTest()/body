{
  ViewInstanceEventCreator creator=new ViewInstanceEventCreator();
  Map<String,Object> properties=new HashMap<>();
  properties.put(ViewInstanceResourceProvider.VIEW_NAME_PROPERTY_ID,"MyView");
  properties.put(ViewInstanceResourceProvider.VIEW_VERSION_PROPERTY_ID,"1.9");
  properties.put(ViewInstanceResourceProvider.INSTANCE_NAME_PROPERTY_ID,"MyViewInstance");
  properties.put(ViewInstanceResourceProvider.LABEL_PROPERTY_ID,"MyViewLabel");
  properties.put(ViewInstanceResourceProvider.DESCRIPTION_PROPERTY_ID,"Test view");
  Request request=AuditEventCreatorTestHelper.createRequest(Request.Type.PUT,Resource.Type.ViewInstance,properties,null);
  Result result=AuditEventCreatorTestHelper.createResult(new ResultStatus(ResultStatus.STATUS.OK));
  AuditEvent event=AuditEventCreatorTestHelper.getEvent(creator,request,result);
  String actual=event.getAuditMessage();
  String expected="User(" + userName + "), RemoteIp(1.2.3.4), Operation(View change), RequestType(PUT), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Type(MyView), Version(1.9), Name(MyViewInstance), Display name(MyViewLabel), Description(Test view)";
  Assert.assertTrue("Class mismatch",event instanceof ChangeViewInstanceRequestAuditEvent);
  Assert.assertEquals(expected,actual);
  Assert.assertTrue(actual.contains(userName));
}
