{
  LogFileDataListResponse logFileList=new LogFileDataListResponse();
  List<LogFileData> logFiles=new ArrayList<LogFileData>();
  String componentName=(String)searchCriteria.getParamValue("component");
  String host=(String)searchCriteria.getParamValue("host");
  int minCount=1;
  SolrQuery solrQuery=new SolrQuery();
  SolrUtil.setMainQuery(solrQuery,null);
  SolrUtil.setFacetFieldWithMincount(solrQuery,LogSearchConstants.SOLR_PATH,minCount);
  queryGenerator.setSingleIncludeFilter(solrQuery,LogSearchConstants.SOLR_COMPONENT,componentName);
  queryGenerator.setSingleIncludeFilter(solrQuery,LogSearchConstants.SOLR_HOST,host);
  try {
    String logType=(String)searchCriteria.getParamValue("logType");
    if (StringUtils.isBlank(logType)) {
      logType=LogType.SERVICE.name();
    }
    SolrDaoBase daoMgr=null;
    if (logType.equalsIgnoreCase(LogType.SERVICE.name())) {
      daoMgr=serviceLogsSolrDao;
    }
 else     if (logType.equalsIgnoreCase(LogType.AUDIT.name())) {
      daoMgr=auditSolrDao;
    }
 else {
      throw RESTErrorUtil.createRESTException(logType + " is not a valid logType",MessageEnums.INVALID_INPUT_DATA);
    }
    QueryResponse queryResponse=daoMgr.process(solrQuery);
    if (queryResponse.getFacetField(LogSearchConstants.SOLR_PATH) != null) {
      FacetField queryFacetField=queryResponse.getFacetField(LogSearchConstants.SOLR_PATH);
      if (queryFacetField != null) {
        List<Count> countList=queryFacetField.getValues();
        for (        Count count : countList) {
          LogFileData vLogFile=new LogFileData();
          String filePath=count.getName();
          String fileName=FilenameUtils.getName(filePath);
          vLogFile.setPath(filePath);
          vLogFile.setName(fileName);
          logFiles.add(vLogFile);
        }
      }
    }
  }
 catch (  SolrException|SolrServerException|IOException e) {
    logger.error("Error in solr query  :" + e.getLocalizedMessage() + "\n Query :"+ solrQuery.toQueryString(),e.getCause());
    throw RESTErrorUtil.createRESTException(MessageEnums.SOLR_ERROR.getMessage().getMessage(),MessageEnums.ERROR_SYSTEM);
  }
  logFileList.setLogFiles(logFiles);
  return logFileList;
}
