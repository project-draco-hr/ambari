def calculate_num_llap_nodes(self, services, hosts, configurations):
    size_of_smallest_nm = self.get_yarn_rm_mem_in_mb(services)
    assert (size_of_smallest_nm > 0), 'Size of smallest NODEMANAGER calculated value : {0}. Expected value : > 0'.format(size_of_smallest_nm)
    yarn_min_container_size = self.get_yarn_min_container_size(services)
    node_size_usable = self._normalizeDown(size_of_smallest_nm, yarn_min_container_size)
    cap_available_for_daemons = self.calculate_cap_available_for_llap_daemons(services, hosts, configurations)
    num_llap_nodes = float(math.ceil((cap_available_for_daemons / node_size_usable)))
    assert (num_llap_nodes > 0), 'Number of LLAP nodes calculated : {0}. Expected value : > 0'.format(num_llap_nodes)
    num_llap_nodes_max_limit = len(self.get_node_manager_hosts(services, hosts))
    Logger.info('Calculated num_llap_nodes {3}, num_llap_nodes_max_limit : {4}, using following : yarn_min_container_size : {0}, node_size_usable : {1}, cap_available_for_daemons : {2}. '.format(yarn_min_container_size, node_size_usable, cap_available_for_daemons, num_llap_nodes, num_llap_nodes_max_limit))
    return (num_llap_nodes, num_llap_nodes_max_limit)
