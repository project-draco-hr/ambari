def min_llap_queue_perc_required_in_cluster(self, services, hosts):
    node_manager_hosts = self.get_node_manager_hosts(services, hosts)
    yarn_rm_mem_in_mb = self.get_yarn_nm_mem_in_mb(services)
    total_cluster_cap = (len(node_manager_hosts) * yarn_rm_mem_in_mb)
    total_llap_queue_size_at_20_perc = ((20.0 / 100) * total_cluster_cap)
    yarn_min_container_size = self.get_yarn_min_container_size(services)
    slider_am_size = self.calculate_slider_am_size(yarn_min_container_size)
    hive_tez_container_size = self.get_hive_tez_container_size(services)
    tez_am_container_size = self.get_tez_am_container_size(services)
    normalized_val = ((self._normalizeUp(slider_am_size, yarn_min_container_size) + self._normalizeUp(hive_tez_container_size, yarn_min_container_size)) + self._normalizeUp(tez_am_container_size, yarn_min_container_size))
    min_required = max(total_llap_queue_size_at_20_perc, normalized_val)
    min_required_perc = ((min_required * 100) / total_cluster_cap)
    Logger.info('Calculated min_llap_queue_perc_required_in_cluster : {0} and min_llap_queue_cap_required_in_cluster: {1} using following : yarn_min_container_size : {2}, slider_am_size : {3}, hive_tez_container_size : {4}, hive_am_container_size : {5}'.format(min_required_perc, min_required, yarn_min_container_size, slider_am_size, hive_tez_container_size, tez_am_container_size))
    return int(math.ceil(min_required_perc))
