def recommendRangerConfigurations(self, configurations, clusterData, services, hosts):
    super(HDP25StackAdvisor, self).recommendRangerConfigurations(configurations, clusterData, services, hosts)
    servicesList = [service['StackServices']['service_name'] for service in services['services']]
    putTagsyncAppProperty = self.putProperty(configurations, 'tagsync-application-properties', services)
    putTagsyncSiteProperty = self.putProperty(configurations, 'ranger-tagsync-site', services)
    putRangerAdminProperty = self.putProperty(configurations, 'ranger-admin-site', services)
    putRangerEnvProperty = self.putProperty(configurations, 'ranger-env', services)
    has_ranger_tagsync = False
    if ('RANGER' in servicesList):
        ranger_tagsync_host = self.__getHostsForComponent(services, 'RANGER', 'RANGER_TAGSYNC')
        has_ranger_tagsync = (len(ranger_tagsync_host) > 0)
    if (('ATLAS' in servicesList) and has_ranger_tagsync):
        atlas_hosts = self.getHostNamesWithComponent('ATLAS', 'ATLAS_SERVER', services)
        atlas_host = ('localhost' if (len(atlas_hosts) == 0) else atlas_hosts[0])
        protocol = 'http'
        atlas_port = '21000'
        if (('application-properties' in services['configurations']) and ('atlas.enableTLS' in services['configurations']['application-properties']['properties']) and (services['configurations']['application-properties']['properties']['atlas.enableTLS'].lower() == 'true')):
            protocol = 'https'
            if (('application-properties' in services['configurations']) and ('atlas.server.https.port' in services['configurations']['application-properties']['properties'])):
                atlas_port = services['configurations']['application-properties']['properties']['atlas.server.https.port']
        else:
            protocol = 'http'
            if (('application-properties' in services['configurations']) and ('atlas.server.http.port' in services['configurations']['application-properties']['properties'])):
                atlas_port = services['configurations']['application-properties']['properties']['atlas.server.http.port']
        atlas_rest_endpoint = '{0}://{1}:{2}'.format(protocol, atlas_host, atlas_port)
        putTagsyncSiteProperty('ranger.tagsync.source.atlas', 'true')
        putTagsyncSiteProperty('ranger.tagsync.source.atlasrest.endpoint', atlas_rest_endpoint)
    zookeeper_host_port = self.getZKHostPortString(services)
    if (zookeeper_host_port and has_ranger_tagsync):
        putTagsyncAppProperty('atlas.kafka.zookeeper.connect', zookeeper_host_port)
    if (('KAFKA' in servicesList) and has_ranger_tagsync):
        kafka_hosts = self.getHostNamesWithComponent('KAFKA', 'KAFKA_BROKER', services)
        kafka_port = '6667'
        if (('kafka-broker' in services['configurations']) and ('port' in services['configurations']['kafka-broker']['properties'])):
            kafka_port = services['configurations']['kafka-broker']['properties']['port']
        kafka_host_port = []
        for i in range(len(kafka_hosts)):
            kafka_host_port.append(((kafka_hosts[i] + ':') + kafka_port))
        final_kafka_host = ','.join(kafka_host_port)
        putTagsyncAppProperty('atlas.kafka.bootstrap.servers', final_kafka_host)
    if (('ranger-env' in services['configurations']) and ('is_solrCloud_enabled' in services['configurations']['ranger-env']['properties'])):
        isSolrCloudEnabled = (services['configurations']['ranger-env']['properties']['is_solrCloud_enabled'] == 'true')
    else:
        isSolrCloudEnabled = False
    ranger_audit_zk_port = ''
    if (('LOGSEARCH' in servicesList) and zookeeper_host_port and isSolrCloudEnabled):
        zookeeper_host_port = zookeeper_host_port.split(',')
        zookeeper_host_port.sort()
        zookeeper_host_port = ','.join(zookeeper_host_port)
        logsearch_solr_znode = '/ambari-solr'
        if (('logsearch-solr-env' in services['configurations']) and ('logsearch_solr_znode' in services['configurations']['logsearch-solr-env']['properties'])):
            logsearch_solr_znode = services['configurations']['logsearch-solr-env']['properties']['logsearch_solr_znode']
            ranger_audit_zk_port = '{0}{1}'.format(zookeeper_host_port, logsearch_solr_znode)
        putRangerAdminProperty('ranger.audit.solr.zookeepers', ranger_audit_zk_port)
    elif (zookeeper_host_port and isSolrCloudEnabled):
        ranger_audit_zk_port = '{0}/{1}'.format(zookeeper_host_port, 'ranger_audits')
        putRangerAdminProperty('ranger.audit.solr.zookeepers', ranger_audit_zk_port)
    else:
        putRangerAdminProperty('ranger.audit.solr.zookeepers', 'NONE')
    if (('ranger-admin-site' in services['configurations']) and ('ranger.is.solr.kerberised' in services['configurations']['ranger-admin-site']['properties'])):
        is_solr_kerberised = (services['configurations']['ranger-admin-site']['properties']['ranger.is.solr.kerberised'] == 'true')
    else:
        is_solr_kerberised = False
    ranger_services = [{'service_name': 'HDFS', 'audit_file': 'ranger-hdfs-audit', }, {'service_name': 'YARN', 'audit_file': 'ranger-yarn-audit', }, {'service_name': 'HBASE', 'audit_file': 'ranger-hbase-audit', }, {'service_name': 'HIVE', 'audit_file': 'ranger-hive-audit', }, {'service_name': 'KNOX', 'audit_file': 'ranger-knox-audit', }, {'service_name': 'KAFKA', 'audit_file': 'ranger-kafka-audit', }, {'service_name': 'STORM', 'audit_file': 'ranger-storm-audit', }, {'service_name': 'RANGER_KMS', 'audit_file': 'ranger-kms-audit', }, {'service_name': 'ATLAS', 'audit_file': 'ranger-atlas-audit', }]
    for item in range(len(ranger_services)):
        if (ranger_services[item]['service_name'] in servicesList):
            component_audit_file = ranger_services[item]['audit_file']
            if (component_audit_file in services['configurations']):
                ranger_audit_dict = [{'filename': 'ranger-admin-site', 'configname': 'ranger.audit.solr.urls', 'target_configname': 'xasecure.audit.destination.solr.urls', }, {'filename': 'ranger-admin-site', 'configname': 'ranger.audit.solr.zookeepers', 'target_configname': 'xasecure.audit.destination.solr.zookeepers', }]
                putRangerAuditProperty = self.putProperty(configurations, component_audit_file, services)
                for item in ranger_audit_dict:
                    if ((item['filename'] in services['configurations']) and (item['configname'] in services['configurations'][item['filename']]['properties'])):
                        if ((item['filename'] in configurations) and (item['configname'] in configurations[item['filename']]['properties'])):
                            rangerAuditProperty = configurations[item['filename']]['properties'][item['configname']]
                        else:
                            rangerAuditProperty = services['configurations'][item['filename']]['properties'][item['configname']]
                        putRangerAuditProperty(item['target_configname'], rangerAuditProperty)
                if is_solr_kerberised:
                    ranger_solr_kerberised = [{'configname': 'xasecure.audit.jaas.Client.loginModuleName', }, {'configname': 'xasecure.audit.jaas.Client.loginModuleControlFlag', }, {'configname': 'xasecure.audit.jaas.Client.option.useKeyTab', }, {'configname': 'xasecure.audit.jaas.Client.option.storeKey', }, {'configname': 'xasecure.audit.jaas.Client.option.serviceName', }]
                    for item in ranger_solr_kerberised:
                        if (('ranger-admin-site' in services['configurations']) and (item['configname'] in services['configurations']['ranger-admin-site']['properties'])):
                            if (('ranger-admin-site' in configurations) and (item['configname'] in configurations['ranger-admin-site']['properties'])):
                                solrKerberisedProperty = configurations['ranger-admin-site']['properties'][item['configname']]
                            else:
                                solrKerberisedProperty = services['configurations']['ranger-admin-site']['properties'][item['configname']]
                            putRangerAuditProperty(item['configname'], solrKerberisedProperty)
                    putRangerAuditProperty('xasecure.audit.destination.solr.force.use.inmemory.jaas.config', 'true')
                else:
                    set_solr_kerberised_default = [{'configname': 'xasecure.audit.jaas.Client.loginModuleName', 'default_value': '', }, {'configname': 'xasecure.audit.jaas.Client.loginModuleControlFlag', 'default_value': '', }, {'configname': 'xasecure.audit.jaas.Client.option.useKeyTab', 'default_value': 'false', }, {'configname': 'xasecure.audit.jaas.Client.option.storeKey', 'default_value': 'false', }, {'configname': 'xasecure.audit.jaas.Client.option.serviceName', 'default_value': '', }, {'configname': 'xasecure.audit.destination.solr.force.use.inmemory.jaas.config', 'default_value': 'false', }]
                    for item in set_solr_kerberised_default:
                        putRangerAuditProperty(item['configname'], item['default_value'])
    if ('HDFS' in servicesList):
        hdfs_user = None
        if (('hadoop-env' in services['configurations']) and ('hdfs_user' in services['configurations']['hadoop-env']['properties'])):
            hdfs_user = services['configurations']['hadoop-env']['properties']['hdfs_user']
            putRangerAdminProperty('ranger.kms.service.user.hdfs', hdfs_user)
    if ('HIVE' in servicesList):
        hive_user = None
        if (('hive-env' in services['configurations']) and ('hive_user' in services['configurations']['hive-env']['properties'])):
            hive_user = services['configurations']['hive-env']['properties']['hive_user']
            putRangerAdminProperty('ranger.kms.service.user.hive', hive_user)
    ranger_plugins_serviceuser = [{'service_name': 'HDFS', 'file_name': 'hadoop-env', 'config_name': 'hdfs_user', 'target_configname': 'ranger.plugins.hdfs.serviceuser', }, {'service_name': 'HIVE', 'file_name': 'hive-env', 'config_name': 'hive_user', 'target_configname': 'ranger.plugins.hive.serviceuser', }, {'service_name': 'YARN', 'file_name': 'yarn-env', 'config_name': 'yarn_user', 'target_configname': 'ranger.plugins.yarn.serviceuser', }, {'service_name': 'HBASE', 'file_name': 'hbase-env', 'config_name': 'hbase_user', 'target_configname': 'ranger.plugins.hbase.serviceuser', }, {'service_name': 'KNOX', 'file_name': 'knox-env', 'config_name': 'knox_user', 'target_configname': 'ranger.plugins.knox.serviceuser', }, {'service_name': 'STORM', 'file_name': 'storm-env', 'config_name': 'storm_user', 'target_configname': 'ranger.plugins.storm.serviceuser', }, {'service_name': 'KAFKA', 'file_name': 'kafka-env', 'config_name': 'kafka_user', 'target_configname': 'ranger.plugins.kafka.serviceuser', }, {'service_name': 'RANGER_KMS', 'file_name': 'kms-env', 'config_name': 'kms_user', 'target_configname': 'ranger.plugins.kms.serviceuser', }, {'service_name': 'ATLAS', 'file_name': 'atlas-env', 'config_name': 'metadata_user', 'target_configname': 'ranger.plugins.atlas.serviceuser', }]
    for item in range(len(ranger_plugins_serviceuser)):
        if (ranger_plugins_serviceuser[item]['service_name'] in servicesList):
            file_name = ranger_plugins_serviceuser[item]['file_name']
            config_name = ranger_plugins_serviceuser[item]['config_name']
            target_configname = ranger_plugins_serviceuser[item]['target_configname']
            if ((file_name in services['configurations']) and (config_name in services['configurations'][file_name]['properties'])):
                service_user = services['configurations'][file_name]['properties'][config_name]
                putRangerAdminProperty(target_configname, service_user)
    if ('ATLAS' in servicesList):
        if ('ranger-env' in services['configurations']):
            putAtlasRangerAuditProperty = self.putProperty(configurations, 'ranger-atlas-audit', services)
            xasecure_audit_destination_hdfs = ''
            xasecure_audit_destination_hdfs_dir = ''
            xasecure_audit_destination_solr = ''
            if ('xasecure.audit.destination.hdfs' in configurations['ranger-env']['properties']):
                xasecure_audit_destination_hdfs = configurations['ranger-env']['properties']['xasecure.audit.destination.hdfs']
            else:
                xasecure_audit_destination_hdfs = services['configurations']['ranger-env']['properties']['xasecure.audit.destination.hdfs']
            if ('xasecure.audit.destination.hdfs.dir' in configurations['ranger-env']['properties']):
                xasecure_audit_destination_hdfs_dir = configurations['ranger-env']['properties']['xasecure.audit.destination.hdfs.dir']
            else:
                xasecure_audit_destination_hdfs_dir = services['configurations']['ranger-env']['properties']['xasecure.audit.destination.hdfs.dir']
            if ('xasecure.audit.destination.solr' in configurations['ranger-env']['properties']):
                xasecure_audit_destination_solr = configurations['ranger-env']['properties']['xasecure.audit.destination.solr']
            else:
                xasecure_audit_destination_solr = services['configurations']['ranger-env']['properties']['xasecure.audit.destination.solr']
            putAtlasRangerAuditProperty('xasecure.audit.destination.hdfs', xasecure_audit_destination_hdfs)
            putAtlasRangerAuditProperty('xasecure.audit.destination.hdfs.dir', xasecure_audit_destination_hdfs_dir)
            putAtlasRangerAuditProperty('xasecure.audit.destination.solr', xasecure_audit_destination_solr)
