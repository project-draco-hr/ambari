def min_queue_perc_reqd_for_llap_and_hive_app(self, services, hosts, configurations):
    node_manager_hosts = self.get_node_manager_hosts(services, hosts)
    yarn_rm_mem_in_mb = self.get_yarn_nm_mem_in_mb(services, configurations)
    total_cluster_cap = (len(node_manager_hosts) * yarn_rm_mem_in_mb)
    total_queue_size_at_20_perc = ((20.0 / 100) * total_cluster_cap)
    yarn_min_container_size = self.get_yarn_min_container_size(services, configurations)
    slider_am_size = self.calculate_slider_am_size(yarn_min_container_size)
    hive_tez_container_size = self.get_hive_tez_container_size(services, configurations)
    tez_am_container_size = self.calculate_tez_am_container_size(long(total_cluster_cap))
    normalized_val = ((self._normalizeUp(slider_am_size, yarn_min_container_size) + self._normalizeUp(hive_tez_container_size, yarn_min_container_size)) + self._normalizeUp(tez_am_container_size, yarn_min_container_size))
    min_required = max(total_queue_size_at_20_perc, normalized_val)
    min_required_perc = ((min_required * 100) / total_cluster_cap)
    Logger.info("Calculated 'min_queue_perc_required_in_cluster' : {0}% and 'min_queue_cap_required_in_cluster': {1} for LLAP and HIVE2 app using following : yarn_min_container_size : {2}, slider_am_size : {3}, hive_tez_container_size : {4}, hive_am_container_size : {5}, total_cluster_cap : {6}, yarn_rm_mem_in_mb : {7}".format(min_required_perc, min_required, yarn_min_container_size, slider_am_size, hive_tez_container_size, tez_am_container_size, total_cluster_cap, yarn_rm_mem_in_mb))
    return int(math.ceil(min_required_perc))
