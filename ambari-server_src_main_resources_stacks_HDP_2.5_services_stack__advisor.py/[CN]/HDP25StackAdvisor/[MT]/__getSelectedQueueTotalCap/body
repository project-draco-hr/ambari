def __getSelectedQueueTotalCap(self, capacity_scheduler_properties, llap_daemon_selected_queue_name, total_cluster_capacity):
    Logger.info('Entered __getSelectedQueueTotalCap fn().')
    available_capacity = total_cluster_capacity
    queue_cap_key = self.__getQueueCapacityKeyFromCapacityScheduler(capacity_scheduler_properties, llap_daemon_selected_queue_name)
    if queue_cap_key:
        queue_cap_key = queue_cap_key.strip()
        if (len(queue_cap_key) >= 34):
            queue_path = queue_cap_key[24:]
            queue_path = queue_path[0:(-9)]
            queues_list = queue_path.split('.')
            Logger.info('Queue list : {0}'.format(queues_list))
            if queues_list:
                for queue in queues_list:
                    queue_cap_key = self.__getQueueCapacityKeyFromCapacityScheduler(capacity_scheduler_properties, queue)
                    queue_cap_perc = float(capacity_scheduler_properties.get(queue_cap_key))
                    available_capacity = ((queue_cap_perc / 100) * available_capacity)
                    Logger.info('Total capacity available for queue {0} is : {1}'.format(queue, available_capacity))
            else:
                raise Fail("Retrieved 'queue list' from capacity-scheduler is empty while doing '{0}' queue capacity caluclation.".format(llap_daemon_selected_queue_name))
        else:
            raise Fail('Expected length for queue_cap_key(val:{0}) should be greater than atleast 34.'.format(queue_cap_key))
    else:
        raise Fail("Couldn't retrieve {0}' queue capacity KEY from capacity-scheduler while doing capacity caluclation.".format(llap_daemon_selected_queue_name))
    return available_capacity
