def calculate_llap_daemon_executors_count(self, services, llap_container_size):
    cpu_per_nm_host = 0
    exec_to_cache_ratio = 1.5
    hive_container_size = self.get_tez_container_size(services)
    if ('yarn.nodemanager.resource.cpu-vcores' in services['configurations']['yarn-site']['properties']):
        cpu_per_nm_host = float(services['configurations']['yarn-site']['properties']['yarn.nodemanager.resource.cpu-vcores'])
        assert (cpu_per_nm_host > 0), "'yarn.nodemanager.resource.cpu-vcores' current value : {0}. Expected value : > 0".format(cpu_per_nm_host)
    else:
        raise Fail("Couldn't retrieve YARN's 'yarn.nodemanager.resource.cpu-vcores' config.")
    mem_per_executor = (hive_container_size * exec_to_cache_ratio)
    if (mem_per_executor > llap_container_size):
        mem_per_executor = llap_container_size
    num_executors_per_node_raw = math.floor((llap_container_size / mem_per_executor))
    num_executors_per_node = min(num_executors_per_node_raw, cpu_per_nm_host)
    num_executors_per_node_max_limit = min(num_executors_per_node_raw, (4 * cpu_per_nm_host))
    Logger.info('calculated num_executors_per_node: {0}, num_executors_per_node_max_limit : {1}, using following :  hive_container_size : {2}, cpu_per_nm_host : {3}, mem_per_executor : {4}, num_executors_per_node_raw : {5}'.format(num_executors_per_node, num_executors_per_node_max_limit, hive_container_size, cpu_per_nm_host, mem_per_executor, num_executors_per_node_raw))
    return (num_executors_per_node, num_executors_per_node_max_limit)
