def validateHiveInteractiveSiteConfigurations(self, properties, recommendedDefaults, configurations, services, hosts):
    validationItems = []
    hsi_hosts = self.__getHostsForComponent(services, 'HIVE', 'HIVE_SERVER_INTERACTIVE')
    if (len(hsi_hosts) > 0):
        (capacity_scheduler_properties, received_as_key_value_pair) = self.getCapacitySchedulerProperties(services)
        if capacity_scheduler_properties:
            if ((self.HIVE_INTERACTIVE_SITE in services['configurations']) and ('hive.llap.daemon.queue.name' in services['configurations'][self.HIVE_INTERACTIVE_SITE]['properties'])):
                curr_selected_queue_for_llap = services['configurations'][self.HIVE_INTERACTIVE_SITE]['properties']['hive.llap.daemon.queue.name']
                if curr_selected_queue_for_llap:
                    curr_selected_queue_for_llap_cap = capacity_scheduler_properties.get((('yarn.scheduler.capacity.root.' + curr_selected_queue_for_llap) + '.capacity'))
                    if curr_selected_queue_for_llap_cap:
                        curr_selected_queue_for_llap_cap = int(float(curr_selected_queue_for_llap_cap))
                        min_reqd_queue_cap_perc = self.min_queue_perc_reqd_for_llap_and_hive_app(services, hosts, configurations)
                        if (curr_selected_queue_for_llap_cap < min_reqd_queue_cap_perc):
                            errMsg1 = "Selected queue '{0}' capacity ({1}%) is less than minimum required capacity ({2}%) for LLAP app to run".format(curr_selected_queue_for_llap, curr_selected_queue_for_llap_cap, min_reqd_queue_cap_perc)
                            validationItems.append({'config-name': 'hive.llap.daemon.queue.name', 'item': self.getErrorItem(errMsg1), })
                    else:
                        Logger.error("Couldn't retrieve '{0}' queue's capacity from 'capacity-scheduler' while doing validation checks for Hive Server Interactive.".format(curr_selected_queue_for_llap))
                    llap_selected_queue_state = capacity_scheduler_properties.get((('yarn.scheduler.capacity.root.' + curr_selected_queue_for_llap) + '.state'))
                    if llap_selected_queue_state:
                        if (llap_selected_queue_state == 'STOPPED'):
                            errMsg2 = "Selected queue '{0}' current state is : '{1}'. It is required to be in 'RUNNING' state for LLAP to run".format(curr_selected_queue_for_llap, llap_selected_queue_state)
                            validationItems.append({'config-name': 'hive.llap.daemon.queue.name', 'item': self.getErrorItem(errMsg2), })
                    else:
                        Logger.error("Couldn't retrieve '{0}' queue's state from 'capacity-scheduler' while doing validation checks for Hive Server Interactive.".format(curr_selected_queue_for_llap))
                else:
                    Logger.error("Couldn't retrieve current selection for 'hive.llap.daemon.queue.name' while doing validation checks for Hive Server Interactive.")
            else:
                Logger.error("Couldn't retrieve 'hive.llap.daemon.queue.name' config from 'hive-interactive-site' while doing validation checks for Hive Server Interactive.")
                pass
        else:
            Logger.error("Couldn't retrieve 'capacity-scheduler' properties while doing validation checks for Hive Server Interactive.")
            pass
        if (self.HIVE_INTERACTIVE_SITE in services['configurations']):
            if ('hive.server2.enable.doAs' in services['configurations'][self.HIVE_INTERACTIVE_SITE]['properties']):
                hive2_enable_do_as = services['configurations'][self.HIVE_INTERACTIVE_SITE]['properties']['hive.server2.enable.doAs']
                if (hive2_enable_do_as == 'true'):
                    validationItems.append({'config-name': 'hive.server2.enable.doAs', 'item': self.getErrorItem("Value should be set to 'false' for Hive2."), })
    validationProblems = self.toConfigurationValidationProblems(validationItems, 'hive-interactive-site')
    return validationProblems
