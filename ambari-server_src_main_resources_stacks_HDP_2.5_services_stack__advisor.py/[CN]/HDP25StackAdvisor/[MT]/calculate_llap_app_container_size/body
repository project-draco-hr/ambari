def calculate_llap_app_container_size(self, services, hosts, configurations):
    cap_available_for_daemons = self.calculate_cap_available_for_llap_daemons(services, hosts, configurations)
    node_manager_hosts = self.get_node_manager_hosts(services, hosts)
    node_manager_host_cnt = len(node_manager_hosts)
    num_llap_nodes_in_changed_configs = self.are_config_props_in_changed_configs(services, 'hive-interactive-env', 'num_llap_nodes', False)
    if (not num_llap_nodes_in_changed_configs):
        (num_llap_nodes, num_llap_nodes_max_limit) = self.calculate_num_llap_nodes(services, hosts, configurations)
    else:
        num_llap_nodes = self.get_num_llap_nodes(services)
    llap_container_size_raw = (cap_available_for_daemons / num_llap_nodes)
    llap_container_size_raw_max_limit = (cap_available_for_daemons / node_manager_host_cnt)
    yarn_min_container_size = self.get_yarn_min_container_size(services)
    llap_container_size = self._normalizeDown(llap_container_size_raw, yarn_min_container_size)
    llap_container_size_max_limit = self._normalizeDown(llap_container_size_raw_max_limit, yarn_min_container_size)
    if (llap_container_size_max_limit < llap_container_size):
        llap_container_size_max_limit = llap_container_size
    Logger.info('Calculated llap_container_size : {0}, llap_container_size_max_limit : {1}, using following : cap_available_for_daemons : {2}, node_manager_host_cnt : {3}, llap_container_size_raw : {4}, llap_container_size_raw_max_limit : {5}, yarn_min_container_size : {6} '.format(llap_container_size, llap_container_size_max_limit, cap_available_for_daemons, node_manager_host_cnt, llap_container_size_raw, llap_container_size_raw_max_limit, yarn_min_container_size))
    return (llap_container_size, llap_container_size_max_limit)
