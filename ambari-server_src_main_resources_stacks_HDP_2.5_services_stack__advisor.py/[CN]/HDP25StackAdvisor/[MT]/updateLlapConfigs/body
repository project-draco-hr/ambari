def updateLlapConfigs(self, configurations, services, hosts, llap_queue_name):
    putHiveInteractiveSiteProperty = self.putProperty(configurations, self.HIVE_INTERACTIVE_SITE, services)
    putHiveInteractiveSitePropertyAttribute = self.putPropertyAttribute(configurations, self.HIVE_INTERACTIVE_SITE)
    putHiveInteractiveEnvProperty = self.putProperty(configurations, 'hive-interactive-env', services)
    putHiveInteractiveEnvPropertyAttribute = self.putPropertyAttribute(configurations, 'hive-interactive-env')
    num_llap_nodes_in_changed_configs = False
    llap_daemon_selected_queue_name = None
    llap_queue_selected_in_current_call = None
    try:
        if ((self.HIVE_INTERACTIVE_SITE in services['configurations']) and ('hive.llap.daemon.queue.name' in services['configurations'][self.HIVE_INTERACTIVE_SITE]['properties'])):
            llap_daemon_selected_queue_name = services['configurations'][self.HIVE_INTERACTIVE_SITE]['properties']['hive.llap.daemon.queue.name']
        if ('hive.llap.daemon.queue.name' in configurations[self.HIVE_INTERACTIVE_SITE]['properties']):
            llap_queue_selected_in_current_call = configurations[self.HIVE_INTERACTIVE_SITE]['properties']['hive.llap.daemon.queue.name']
        capacitySchedulerProperties = self.getCapacitySchedulerProperties(services)
        if capacitySchedulerProperties:
            leafQueueNames = self.getAllYarnLeafQueues(capacitySchedulerProperties)
            if (((llap_daemon_selected_queue_name != None) and (llap_daemon_selected_queue_name == llap_queue_name)) or ((llap_queue_selected_in_current_call != None) and (llap_queue_selected_in_current_call == llap_queue_name))):
                putHiveInteractiveEnvPropertyAttribute('llap_queue_capacity', 'visible', 'true')
                Logger.debug("Selected YARN queue is '{0}'. Setting LLAP queue capacity slider visibility to True".format(llap_queue_name))
            else:
                putHiveInteractiveEnvPropertyAttribute('llap_queue_capacity', 'visible', 'false')
                Logger.debug("Queue selected for LLAP app is : '{0}'. Current YARN queues : {1}. Setting LLAP queue capacity slider visibility to False. Skipping updating values for LLAP related configs".format(llap_daemon_selected_queue_name, list(leafQueueNames)))
                return
        else:
            Logger.error("Couldn't retrieve 'capacity-scheduler' properties while doing YARN queue adjustment for Hive Server Interactive. Not calculating LLAP configs.")
            return
        if (len(leafQueueNames) != 2):
            return
        if ('changed-configurations' in services.keys()):
            llap_queue_prop_old_val = None
            config_names_to_be_checked = set(['llap_queue_capacity', 'enable_hive_interactive', 'num_llap_nodes'])
            changed_configs_in_hive_int_env = self.are_config_props_in_changed_configs(services, 'hive-interactive-env', config_names_to_be_checked, False)
            llap_queue_prop_in_changed_configs = self.are_config_props_in_changed_configs(services, self.HIVE_INTERACTIVE_SITE, set(['hive.llap.daemon.queue.name']), False)
            if ((not changed_configs_in_hive_int_env) and (not llap_queue_prop_in_changed_configs)):
                Logger.info('LLAP parameters not modified. Not adjusting LLAP configs. Current changed-configuration received is : {0}'.format(services['changed-configurations']))
                return
            node_manager_hosts = self.get_node_manager_hosts(services, hosts)
            node_manager_host_cnt = len(node_manager_hosts)
            num_llap_nodes_in_changed_configs = self.are_config_props_in_changed_configs(services, 'hive-interactive-env', set(['num_llap_nodes']), False)
            if (not num_llap_nodes_in_changed_configs):
                (num_llap_nodes, num_llap_nodes_max_limit) = self.calculate_num_llap_nodes(services, hosts, configurations)
            else:
                num_llap_nodes = self.get_num_llap_nodes(services)
                num_llap_nodes_max_limit = node_manager_host_cnt
            (llap_container_size, llap_container_size_max_limit) = self.calculate_llap_app_container_size(services, hosts, configurations)
            (num_executors_per_node, num_executors_per_node_max_limit) = self.calculate_llap_daemon_executors_count(services, llap_container_size)
            assert (num_executors_per_node >= 0), "'Number of executors per node' : {0}. Expected value : > 0".format(num_executors_per_node)
            (cache_size_per_node, cache_size_per_node_max_limit) = self.calculate_llap_cache_size_per_executor(services, llap_container_size, num_executors_per_node)
            assert (cache_size_per_node >= 0), "'Cache size per node' : {0}. Expected value : > 0".format(cache_size_per_node)
            llap_xmx = self.calculate_llap_app_heap_size(services, num_executors_per_node)
            yarn_min_container_size = self.get_yarn_min_container_size(services)
            slider_am_container_mb = self.calculate_slider_am_size(yarn_min_container_size)
            num_llap_nodes = long(num_llap_nodes)
            num_llap_nodes_max_limit = long(num_llap_nodes_max_limit)
            llap_container_size = long(llap_container_size)
            llap_container_size_max_limit = long(llap_container_size_max_limit)
            num_executors_per_node = long(num_executors_per_node)
            num_executors_per_node_max_limit = long(num_executors_per_node_max_limit)
            cache_size_per_node = long(cache_size_per_node)
            cache_size_per_node_max_limit = long(cache_size_per_node_max_limit)
            llap_xmx = long(llap_xmx)
            slider_am_container_mb = long(slider_am_container_mb)
            Logger.info("Setting following value for 'hive.llap.daemon.yarn.container.mb'. Min : {0}, Curr: {1}, Max: {2}".format(llap_container_size, llap_container_size, llap_container_size_max_limit))
            Logger.info("Setting following value for 'hive.llap.daemon.num.executors'. Min : {0}, Curr: {1}, Max: {2}".format('1', num_executors_per_node, num_executors_per_node_max_limit))
            Logger.info("Setting following value for 'hive.llap.io.memory.size'. Min : {0}, Curr: {1}, Max: {2}".format('0', cache_size_per_node, cache_size_per_node_max_limit))
            Logger.info("Setting following value for 'llap_heap_size'. Curr: {0}".format(llap_xmx))
            Logger.info("Setting following value for 'slider_am_container_mb'. Curr: {0}".format(slider_am_container_mb))
            if (not num_llap_nodes_in_changed_configs):
                Logger.info("Setting following value for 'num_llap_nodes'. Min : {0}, Curr: {1}, Max: {2}".format('1', num_llap_nodes, num_llap_nodes_max_limit))
                putHiveInteractiveEnvProperty('num_llap_nodes', num_llap_nodes)
                putHiveInteractiveEnvPropertyAttribute('num_llap_nodes', 'minimum', 1)
                putHiveInteractiveEnvPropertyAttribute('num_llap_nodes', 'maximum', int(num_llap_nodes_max_limit))
            putHiveInteractiveSiteProperty('hive.llap.daemon.yarn.container.mb', llap_container_size)
            putHiveInteractiveSitePropertyAttribute('hive.llap.daemon.yarn.container.mb', 'minimum', llap_container_size)
            putHiveInteractiveSitePropertyAttribute('hive.llap.daemon.yarn.container.mb', 'maximum', llap_container_size_max_limit)
            putHiveInteractiveSiteProperty('hive.llap.daemon.num.executors', num_executors_per_node)
            putHiveInteractiveSitePropertyAttribute('hive.llap.daemon.num.executors', 'minimum', 1)
            putHiveInteractiveSitePropertyAttribute('hive.llap.daemon.num.executors', 'maximum', num_executors_per_node_max_limit)
            putHiveInteractiveSiteProperty('hive.llap.io.memory.size', cache_size_per_node)
            putHiveInteractiveSitePropertyAttribute('hive.llap.io.memory.size', 'minimum', 0)
            putHiveInteractiveSitePropertyAttribute('hive.llap.io.memory.size', 'maximum', cache_size_per_node_max_limit)
            putHiveInteractiveEnvProperty('llap_heap_size', llap_xmx)
            putHiveInteractiveEnvProperty('slider_am_container_mb', slider_am_container_mb)
    except Exception as e:
        Logger.info((e.message + ' Skipping calculating LLAP configs.'))
        Logger.info(traceback.print_exc())
