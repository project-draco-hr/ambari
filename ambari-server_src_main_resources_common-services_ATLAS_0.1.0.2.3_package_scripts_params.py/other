'\nLicensed to the Apache Software Foundation (ASF) under one\nor more contributor license agreements.  See the NOTICE file\ndistributed with this work for additional information\nregarding copyright ownership.  The ASF licenses this file\nto you under the Apache License, Version 2.0 (the\n"License"); you may not use this file except in compliance\nwith the License.  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n'
import os
import sys
from resource_management import format_hdp_stack_version, Script
from resource_management.libraries.functions import format
import status_params
config = Script.get_config()
security_enabled = status_params.security_enabled
stack_version_unformatted = str(config['hostLevelParams']['stack_version'])
hdp_stack_version = format_hdp_stack_version(stack_version_unformatted)
metadata_home = (os.environ['METADATA_HOME_DIR'] if ('METADATA_HOME_DIR' in os.environ) else '/usr/hdp/current/atlas-server')
metadata_bin = format('{metadata_home}/bin')
python_binary = (os.environ['PYTHON_EXE'] if ('PYTHON_EXE' in os.environ) else sys.executable)
metadata_start_script = format('{metadata_bin}/atlas_start.py')
metadata_stop_script = format('{metadata_bin}/atlas_stop.py')
log_dir = config['configurations']['atlas-env']['metadata_log_dir']
conf_dir = status_params.conf_dir
hadoop_conf_dir = (os.path.join(os.environ['HADOOP_HOME'], 'conf') if ('HADOOP_HOME' in os.environ) else '/etc/hadoop/conf')
metadata_user = status_params.metadata_user
user_group = config['configurations']['cluster-env']['user_group']
pid_dir = status_params.pid_dir
pid_file = format('{pid_dir}/atlas.pid')
java64_home = config['hostLevelParams']['java_home']
env_sh_template = config['configurations']['atlas-env']['content']
credential_provider = format('jceks://file@{conf_dir}/atlas-site.jceks')
ssl_enabled = config['configurations']['application-properties']['atlas.enableTLS']
if ssl_enabled:
    metadata_port = config['configurations']['application-properties']['atlas.server.https.port']
else:
    metadata_port = config['configurations']['application-properties']['atlas.server.http.port']
metadata_host = config['hostname']
application_properties = dict(config['configurations']['application-properties'])
application_properties['atlas.http.authentication.kerberos.name.rules'] = ' \\ \n'.join(application_properties['atlas.http.authentication.kerberos.name.rules'].splitlines())
application_properties['atlas.server.bind.address'] = metadata_host
metadata_env_content = config['configurations']['atlas-env']['content']
metadata_opts = config['configurations']['atlas-env']['metadata_opts']
metadata_classpath = config['configurations']['atlas-env']['metadata_classpath']
data_dir = config['configurations']['atlas-env']['metadata_data_dir']
expanded_war_dir = (os.environ['METADATA_EXPANDED_WEBAPP_DIR'] if ('METADATA_EXPANDED_WEBAPP_DIR' in os.environ) else '/var/lib/atlas/server/webapp')
smoke_test_user = config['configurations']['cluster-env']['smokeuser']
smoke_test_password = 'smoke'
smokeuser_principal = config['configurations']['cluster-env']['smokeuser_principal_name']
smokeuser_keytab = config['configurations']['cluster-env']['smokeuser_keytab']
kinit_path_local = status_params.kinit_path_local
security_check_status_file = format('{log_dir}/security_check.status')
if security_enabled:
    smoke_cmd = format('curl --negotiate -u : -b ~/cookiejar.txt -c ~/cookiejar.txt -s -o /dev/null -w "%{{http_code}}" http://{metadata_host}:{metadata_port}/')
else:
    smoke_cmd = format('curl -s -o /dev/null -w "%{{http_code}}" http://{metadata_host}:{metadata_port}/')
