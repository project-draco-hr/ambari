{
  AmbariManagementController ambariManagementController=injector.getInstance(AmbariManagementController.class);
  for (  final Cluster cluster : getCheckedClusterMap(ambariManagementController.getClusters()).values()) {
    Map<String,String> newRangerEnvProps=new HashMap<>();
    Config rangerHdfsPluginProperties=cluster.getDesiredConfigByType("ranger-hdfs-plugin-properties");
    if (rangerHdfsPluginProperties != null && rangerHdfsPluginProperties.getProperties().containsKey(RANGER_HDFS_PLUGIN_ENABLED_PROPERTY)) {
      newRangerEnvProps.put(RANGER_HDFS_PLUGIN_ENABLED_PROPERTY,rangerHdfsPluginProperties.getProperties().get(RANGER_HDFS_PLUGIN_ENABLED_PROPERTY));
    }
    Config hiveEnvProperties=cluster.getDesiredConfigByType("hive-env");
    if (hiveEnvProperties != null && hiveEnvProperties.getProperties().containsKey("hive_security_authorization") && hiveEnvProperties.getProperties().get("hive_security_authorization").toLowerCase().equals("ranger")) {
      newRangerEnvProps.put(RANGER_HIVE_PLUGIN_ENABLED_PROPERTY,"Yes");
    }
    Config rangerHbasePluginProperties=cluster.getDesiredConfigByType("ranger-hbase-plugin-properties");
    if (rangerHbasePluginProperties != null && rangerHbasePluginProperties.getProperties().containsKey(RANGER_HBASE_PLUGIN_ENABLED_PROPERTY)) {
      newRangerEnvProps.put(RANGER_HBASE_PLUGIN_ENABLED_PROPERTY,rangerHbasePluginProperties.getProperties().get(RANGER_HBASE_PLUGIN_ENABLED_PROPERTY));
    }
    Config rangerStormPluginProperties=cluster.getDesiredConfigByType("ranger-storm-plugin-properties");
    if (rangerStormPluginProperties != null && rangerStormPluginProperties.getProperties().containsKey(RANGER_STORM_PLUGIN_ENABLED_PROPERTY)) {
      newRangerEnvProps.put(RANGER_STORM_PLUGIN_ENABLED_PROPERTY,rangerStormPluginProperties.getProperties().get(RANGER_STORM_PLUGIN_ENABLED_PROPERTY));
    }
    Config rangerKnoxPluginProperties=cluster.getDesiredConfigByType("ranger-knox-plugin-properties");
    if (rangerKnoxPluginProperties != null && rangerKnoxPluginProperties.getProperties().containsKey(RANGER_KNOX_PLUGIN_ENABLED_PROPERTY)) {
      newRangerEnvProps.put(RANGER_KNOX_PLUGIN_ENABLED_PROPERTY,rangerKnoxPluginProperties.getProperties().get(RANGER_KNOX_PLUGIN_ENABLED_PROPERTY));
    }
    Config rangerYarnPluginProperties=cluster.getDesiredConfigByType("ranger-yarn-plugin-properties");
    if (rangerYarnPluginProperties != null && rangerYarnPluginProperties.getProperties().containsKey(RANGER_YARN_PLUGIN_ENABLED_PROPERTY)) {
      newRangerEnvProps.put(RANGER_YARN_PLUGIN_ENABLED_PROPERTY,rangerYarnPluginProperties.getProperties().get(RANGER_YARN_PLUGIN_ENABLED_PROPERTY));
    }
    Config rangerKafkaPluginProperties=cluster.getDesiredConfigByType("ranger-kafka-plugin-properties");
    if (rangerKafkaPluginProperties != null && rangerKafkaPluginProperties.getProperties().containsKey(RANGER_KAFKA_PLUGIN_ENABLED_PROPERTY)) {
      newRangerEnvProps.put(RANGER_KAFKA_PLUGIN_ENABLED_PROPERTY,rangerKafkaPluginProperties.getProperties().get(RANGER_KAFKA_PLUGIN_ENABLED_PROPERTY));
    }
    if (!newRangerEnvProps.isEmpty()) {
      updateConfigurationPropertiesForCluster(cluster,RANGER_ENV_CONFIG,newRangerEnvProps,true,true);
    }
  }
}
