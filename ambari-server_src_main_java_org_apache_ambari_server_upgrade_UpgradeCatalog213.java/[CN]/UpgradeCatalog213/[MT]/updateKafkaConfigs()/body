{
  AmbariManagementController ambariManagementController=injector.getInstance(AmbariManagementController.class);
  Clusters clusters=ambariManagementController.getClusters();
  if (clusters != null) {
    Map<String,Cluster> clusterMap=clusters.getClusters();
    if (clusterMap != null && !clusterMap.isEmpty()) {
      for (      final Cluster cluster : clusterMap.values()) {
        Set<String> installedServices=cluster.getServices().keySet();
        Config kafkaBroker=cluster.getDesiredConfigByType(KAFKA_BROKER);
        if (kafkaBroker != null) {
          Map<String,String> newProperties=new HashMap<>();
          Map<String,String> kafkaBrokerProperties=kafkaBroker.getProperties();
          String kafkaMetricsReporters=kafkaBrokerProperties.get("kafka.metrics.reporters");
          if (kafkaMetricsReporters == null || "{{kafka_metrics_reporters}}".equals(kafkaMetricsReporters)) {
            if (installedServices.contains("AMBARI_METRICS")) {
              newProperties.put("kafka.metrics.reporters","org.apache.hadoop.metrics2.sink.kafka.KafkaTimelineMetricsReporter");
            }
 else             if (installedServices.contains("GANGLIA")) {
              newProperties.put("kafka.metrics.reporters","kafka.ganglia.KafkaGangliaMetricsReporter");
            }
 else {
              newProperties.put("kafka.metrics.reporters"," ");
            }
          }
          if (!newProperties.isEmpty()) {
            updateConfigurationPropertiesForCluster(cluster,KAFKA_BROKER,newProperties,true,true);
          }
        }
        StackId stackId=cluster.getCurrentStackVersion();
        if (stackId != null && stackId.getStackName().equals("HDP") && VersionUtils.compareVersions(stackId.getStackVersion(),"2.3") >= 0) {
          Config kafkaEnv=cluster.getDesiredConfigByType(KAFKA_ENV_CONFIG);
          if (kafkaEnv != null) {
            String kafkaEnvContent=kafkaEnv.getProperties().get(CONTENT_PROPERTY);
            if (kafkaEnvContent != null && !kafkaEnvContent.contains(KAFKA_ENV_CONTENT_KERBEROS_PARAMS)) {
              kafkaEnvContent+="\n\nexport KAFKA_KERBEROS_PARAMS=\"$KAFKA_KERBEROS_PARAMS {{kafka_kerberos_params}}\"";
              Map<String,String> updates=Collections.singletonMap(CONTENT_PROPERTY,kafkaEnvContent);
              updateConfigurationPropertiesForCluster(cluster,KAFKA_ENV_CONFIG,updates,true,false);
            }
          }
        }
      }
    }
  }
}
