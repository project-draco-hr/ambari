{
  AmbariManagementController ambariManagementController=injector.getInstance(AmbariManagementController.class);
  Clusters clusters=ambariManagementController.getClusters();
  if (clusters != null) {
    Map<String,Cluster> clusterMap=clusters.getClusters();
    if (clusterMap != null && !clusterMap.isEmpty()) {
      for (      final Cluster cluster : clusterMap.values()) {
        Config amsEnv=cluster.getDesiredConfigByType(AMS_ENV);
        if (amsEnv != null) {
          Map<String,String> amsEnvProperties=amsEnv.getProperties();
          String metrics_collector_heapsize=amsEnvProperties.get("metrics_collector_heapsize");
          String content=amsEnvProperties.get("content");
          Map<String,String> newProperties=new HashMap<>();
          newProperties.put("metrics_collector_heapsize",memoryToIntMb(metrics_collector_heapsize));
          newProperties.put("content",updateAmsEnvContent(content));
          updateConfigurationPropertiesForCluster(cluster,AMS_ENV,newProperties,true,true);
        }
        Config amsHbaseEnv=cluster.getDesiredConfigByType(AMS_HBASE_ENV);
        if (amsHbaseEnv != null) {
          Map<String,String> amsHbaseEnvProperties=amsHbaseEnv.getProperties();
          String hbase_regionserver_heapsize=amsHbaseEnvProperties.get("hbase_regionserver_heapsize");
          String regionserver_xmn_size=amsHbaseEnvProperties.get("regionserver_xmn_size");
          String hbase_master_xmn_size=amsHbaseEnvProperties.get("hbase_master_xmn_size");
          String hbase_master_maxperm_size=amsHbaseEnvProperties.get("hbase_master_maxperm_size");
          String hbase_master_heapsize=amsHbaseEnvProperties.get("hbase_master_heapsize");
          String content=amsHbaseEnvProperties.get("content");
          Map<String,String> newProperties=new HashMap<>();
          newProperties.put("hbase_regionserver_heapsize",memoryToIntMb(hbase_regionserver_heapsize));
          newProperties.put("regionserver_xmn_size",memoryToIntMb(regionserver_xmn_size));
          newProperties.put("hbase_master_xmn_size",memoryToIntMb(hbase_master_xmn_size));
          newProperties.put("hbase_master_maxperm_size",memoryToIntMb(hbase_master_maxperm_size));
          newProperties.put("hbase_master_heapsize",memoryToIntMb(hbase_master_heapsize));
          newProperties.put("content",updateAmsHbaseEnvContent(content));
          updateConfigurationPropertiesForCluster(cluster,AMS_HBASE_ENV,newProperties,true,true);
        }
        Config amsSite=cluster.getDesiredConfigByType(AMS_SITE);
        if (amsSite != null) {
          Map<String,String> newProperties=new HashMap<>();
          newProperties.put("timeline.metrics.cluster.aggregator.second.interval",String.valueOf(120));
          newProperties.put("timeline.metrics.cluster.aggregator.minute.interval",String.valueOf(300));
          newProperties.put("timeline.metrics.host.aggregator.minute.interval",String.valueOf(300));
          newProperties.put("timeline.metrics.cluster.aggregator.second.ttl",String.valueOf(2592000));
          newProperties.put("timeline.metrics.cluster.aggregator.minute.ttl",String.valueOf(7776000));
          newProperties.put("timeline.metrics.cluster.aggregator.second.checkpointCutOffMultiplier",String.valueOf(2));
          newProperties.put("timeline.metrics.cluster.aggregator.second.disabled",String.valueOf(false));
          updateConfigurationPropertiesForCluster(cluster,AMS_SITE,newProperties,true,true);
        }
      }
    }
  }
}
