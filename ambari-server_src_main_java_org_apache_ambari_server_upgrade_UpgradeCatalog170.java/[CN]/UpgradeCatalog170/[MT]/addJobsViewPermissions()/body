{
  final UserDAO userDAO=injector.getInstance(UserDAO.class);
  final ResourceTypeDAO resourceTypeDAO=injector.getInstance(ResourceTypeDAO.class);
  final ResourceDAO resourceDAO=injector.getInstance(ResourceDAO.class);
  final ViewDAO viewDAO=injector.getInstance(ViewDAO.class);
  final ViewInstanceDAO viewInstanceDAO=injector.getInstance(ViewInstanceDAO.class);
  final KeyValueDAO keyValueDAO=injector.getInstance(KeyValueDAO.class);
  final PermissionDAO permissionDAO=injector.getInstance(PermissionDAO.class);
  final PrivilegeDAO privilegeDAO=injector.getInstance(PrivilegeDAO.class);
  final ClusterDAO clusterDAO=injector.getInstance(ClusterDAO.class);
  final ViewRegistry viewRegistry=injector.getInstance(ViewRegistry.class);
  List<ClusterEntity> clusters=clusterDAO.findAll();
  if (!clusters.isEmpty()) {
    ClusterEntity currentCluster=clusters.get(0);
    StackEntity currentStack=currentCluster.getClusterStateEntity().getCurrentStack();
    boolean isStackHdp21=CLUSTER_STATE_STACK_HDP_2_1.getStackName().equals(currentStack.getStackName()) && CLUSTER_STATE_STACK_HDP_2_1.getStackVersion().equals(currentStack.getStackVersion());
    if (isStackHdp21) {
      ViewRegistry.initInstance(viewRegistry);
      viewRegistry.readViewArchives(VIEW_NAME_REG_EXP);
      ViewEntity jobsView=viewDAO.findByCommonName(JOBS_VIEW_NAME);
      if (jobsView != null) {
        ViewInstanceEntity jobsInstance=jobsView.getInstanceDefinition(JOBS_VIEW_INSTANCE_NAME);
        if (jobsInstance == null) {
          jobsInstance=new ViewInstanceEntity(jobsView,JOBS_VIEW_INSTANCE_NAME,JOBS_VIEW_INSTANCE_LABEL);
          ResourceEntity resourceEntity=new ResourceEntity();
          resourceEntity.setResourceType(resourceTypeDAO.findByName(ViewEntity.getViewName(jobsView.getCommonName(),jobsView.getVersion())));
          String atsHost;
          String rmHost;
          try {
            ClusterConfigEntity currentYarnConfig=null;
            for (            ClusterConfigMappingEntity configMappingEntity : currentCluster.getConfigMappingEntities()) {
              if (YARN_SITE.equals(configMappingEntity.getType()) && configMappingEntity.isSelected() > 0) {
                currentYarnConfig=clusterDAO.findConfig(currentCluster.getClusterId(),configMappingEntity.getType(),configMappingEntity.getTag());
                break;
              }
            }
            Type type=new TypeToken<Map<String,String>>(){
            }
.getType();
            Map<String,String> yarnSiteProps=StageUtils.getGson().fromJson(currentYarnConfig.getData(),type);
            atsHost=yarnSiteProps.get(YARN_TIMELINE_SERVICE_WEBAPP_ADDRESS_PROPERTY);
            rmHost=yarnSiteProps.get(YARN_RESOURCEMANAGER_WEBAPP_ADDRESS_PROPERTY);
          }
 catch (          Exception ex) {
            return;
          }
          jobsInstance.setResource(resourceEntity);
          jobsInstance.putProperty(YARN_ATS_URL_PROPERTY,"http://" + atsHost);
          jobsInstance.putProperty(YARN_RESOURCEMANAGER_URL_PROPERTY,"http://" + rmHost);
          jobsView.addInstanceDefinition(jobsInstance);
          resourceDAO.create(resourceEntity);
          viewInstanceDAO.create(jobsInstance);
          viewDAO.merge(jobsView);
        }
        boolean showJobsForNonAdmin=false;
        KeyValueEntity showJobsKeyValueEntity=keyValueDAO.findByKey(SHOW_JOBS_FOR_NON_ADMIN_KEY);
        if (showJobsKeyValueEntity != null) {
          String value=showJobsKeyValueEntity.getValue();
          showJobsForNonAdmin=Boolean.parseBoolean(value);
          keyValueDAO.remove(showJobsKeyValueEntity);
        }
        if (showJobsForNonAdmin) {
          ResourceEntity jobsResource=jobsInstance.getResource();
          long jobsResourceId=jobsResource.getId();
          PermissionEntity viewUsePermission=permissionDAO.findViewUsePermission();
          PermissionEntity adminPermission=permissionDAO.findAmbariAdminPermission();
          int viewUsePermissionId=viewUsePermission.getId();
          int adminPermissionId=adminPermission.getId();
          for (          UserEntity userEntity : userDAO.findAll()) {
            List<PrivilegeEntity> privilegeEntities=privilegeDAO.findAllByPrincipal(Collections.singletonList(userEntity.getPrincipal()));
            boolean hasJobsUsePrivilege=false;
            for (            PrivilegeEntity privilegeEntity : privilegeEntities) {
              int privilegePermissionId=privilegeEntity.getPermission().getId();
              Long privilegeResourceId=privilegeEntity.getResource().getId();
              if ((privilegePermissionId == viewUsePermissionId && privilegeResourceId == jobsResourceId) || privilegePermissionId == adminPermissionId) {
                hasJobsUsePrivilege=true;
                break;
              }
            }
            if (!hasJobsUsePrivilege) {
              PrivilegeEntity privilegeEntity=new PrivilegeEntity();
              privilegeEntity.setResource(jobsResource);
              privilegeEntity.setPermission(viewUsePermission);
              privilegeEntity.setPrincipal(userEntity.getPrincipal());
              privilegeDAO.create(privilegeEntity);
            }
          }
        }
      }
    }
  }
}
