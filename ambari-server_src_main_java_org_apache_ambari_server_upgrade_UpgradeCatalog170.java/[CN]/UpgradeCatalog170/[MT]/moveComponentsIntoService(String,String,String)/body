{
  EntityManager em=getEntityManagerProvider().get();
  ClusterDAO clusterDAO=injector.getInstance(ClusterDAO.class);
  ClusterServiceDAO clusterServiceDAO=injector.getInstance(ClusterServiceDAO.class);
  ServiceDesiredStateDAO serviceDesiredStateDAO=injector.getInstance(ServiceDesiredStateDAO.class);
  ServiceComponentDesiredStateDAO serviceComponentDesiredStateDAO=injector.getInstance(ServiceComponentDesiredStateDAO.class);
  HostDAO hostDAO=injector.getInstance(HostDAO.class);
  List<ClusterEntity> clusterEntities=clusterDAO.findAll();
  for (  final ClusterEntity clusterEntity : clusterEntities) {
    ServiceComponentDesiredStateEntityPK pkHCATInHcatalog=new ServiceComponentDesiredStateEntityPK();
    pkHCATInHcatalog.setComponentName(componentName);
    pkHCATInHcatalog.setClusterId(clusterEntity.getClusterId());
    pkHCATInHcatalog.setServiceName(serviceNameToBeDeleted);
    ServiceComponentDesiredStateEntity serviceComponentDesiredStateEntityToDelete=serviceComponentDesiredStateDAO.findByPK(pkHCATInHcatalog);
    if (serviceComponentDesiredStateEntityToDelete == null) {
      continue;
    }
    ServiceDesiredStateEntityPK serviceDesiredStateEntityPK=new ServiceDesiredStateEntityPK();
    serviceDesiredStateEntityPK.setClusterId(clusterEntity.getClusterId());
    serviceDesiredStateEntityPK.setServiceName(serviceNameToBeDeleted);
    ServiceDesiredStateEntity serviceDesiredStateEntity=serviceDesiredStateDAO.findByPK(serviceDesiredStateEntityPK);
    ClusterServiceEntityPK clusterServiceEntityToBeDeletedPK=new ClusterServiceEntityPK();
    clusterServiceEntityToBeDeletedPK.setClusterId(clusterEntity.getClusterId());
    clusterServiceEntityToBeDeletedPK.setServiceName(serviceNameToBeDeleted);
    ClusterServiceEntity clusterServiceEntityToBeDeleted=clusterServiceDAO.findByPK(clusterServiceEntityToBeDeletedPK);
    ClusterServiceEntityPK clusterServiceEntityPK=new ClusterServiceEntityPK();
    clusterServiceEntityPK.setClusterId(clusterEntity.getClusterId());
    clusterServiceEntityPK.setServiceName(serviceName);
    ClusterServiceEntity clusterServiceEntity=clusterServiceDAO.findByPK(clusterServiceEntityPK);
    ServiceComponentDesiredStateEntity serviceComponentDesiredStateEntity=new ServiceComponentDesiredStateEntity();
    serviceComponentDesiredStateEntity.setServiceName(serviceName);
    serviceComponentDesiredStateEntity.setComponentName(serviceComponentDesiredStateEntityToDelete.getComponentName());
    serviceComponentDesiredStateEntity.setClusterId(clusterEntity.getClusterId());
    serviceComponentDesiredStateEntity.setDesiredStack(serviceComponentDesiredStateEntityToDelete.getDesiredStack());
    serviceComponentDesiredStateEntity.setDesiredState(serviceComponentDesiredStateEntityToDelete.getDesiredState());
    serviceComponentDesiredStateEntity.setClusterServiceEntity(clusterServiceEntity);
    Iterator<HostComponentDesiredStateEntity> hostComponentDesiredStateIterator=serviceComponentDesiredStateEntityToDelete.getHostComponentDesiredStateEntities().iterator();
    Iterator<HostComponentStateEntity> hostComponentStateIterator=serviceComponentDesiredStateEntityToDelete.getHostComponentStateEntities().iterator();
    while (hostComponentDesiredStateIterator.hasNext()) {
      HostComponentDesiredStateEntity hcDesiredStateEntityToBeDeleted=hostComponentDesiredStateIterator.next();
      HostComponentDesiredStateEntity hostComponentDesiredStateEntity=new HostComponentDesiredStateEntity();
      hostComponentDesiredStateEntity.setClusterId(clusterEntity.getClusterId());
      hostComponentDesiredStateEntity.setComponentName(hcDesiredStateEntityToBeDeleted.getComponentName());
      hostComponentDesiredStateEntity.setDesiredStack(hcDesiredStateEntityToBeDeleted.getDesiredStack());
      hostComponentDesiredStateEntity.setDesiredState(hcDesiredStateEntityToBeDeleted.getDesiredState());
      hostComponentDesiredStateEntity.setHostEntity(hcDesiredStateEntityToBeDeleted.getHostEntity());
      hostComponentDesiredStateEntity.setAdminState(hcDesiredStateEntityToBeDeleted.getAdminState());
      hostComponentDesiredStateEntity.setMaintenanceState(hcDesiredStateEntityToBeDeleted.getMaintenanceState());
      hostComponentDesiredStateEntity.setRestartRequired(hcDesiredStateEntityToBeDeleted.isRestartRequired());
      hostComponentDesiredStateEntity.setServiceName(serviceName);
      hostComponentDesiredStateEntity.setServiceComponentDesiredStateEntity(serviceComponentDesiredStateEntity);
      em.merge(hostComponentDesiredStateEntity);
      em.remove(hcDesiredStateEntityToBeDeleted);
    }
    while (hostComponentStateIterator.hasNext()) {
      HostComponentStateEntity hcStateToBeDeleted=hostComponentStateIterator.next();
      HostEntity hostToBeDeleted=hostDAO.findByName(hcStateToBeDeleted.getHostName());
      if (hostToBeDeleted == null) {
        continue;
      }
      HostComponentStateEntity hostComponentStateEntity=new HostComponentStateEntity();
      hostComponentStateEntity.setClusterId(clusterEntity.getClusterId());
      hostComponentStateEntity.setComponentName(hcStateToBeDeleted.getComponentName());
      hostComponentStateEntity.setCurrentStack(hcStateToBeDeleted.getCurrentStack());
      hostComponentStateEntity.setCurrentState(hcStateToBeDeleted.getCurrentState());
      hostComponentStateEntity.setHostEntity(hcStateToBeDeleted.getHostEntity());
      hostComponentStateEntity.setServiceName(serviceName);
      hostComponentStateEntity.setServiceComponentDesiredStateEntity(serviceComponentDesiredStateEntity);
      em.merge(hostComponentStateEntity);
      em.remove(hcStateToBeDeleted);
    }
    serviceComponentDesiredStateEntity.setClusterServiceEntity(clusterServiceEntity);
    em.merge(serviceComponentDesiredStateEntity);
    em.remove(serviceComponentDesiredStateEntityToDelete);
    em.remove(serviceDesiredStateEntity);
    em.remove(clusterServiceEntityToBeDeleted);
  }
}
