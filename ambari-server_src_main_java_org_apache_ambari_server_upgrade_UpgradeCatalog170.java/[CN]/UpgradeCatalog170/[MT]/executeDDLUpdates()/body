{
  renameSequenceValueColumnName();
  String dbType=getDbType();
  List<DBColumnInfo> columns;
  columns=new ArrayList<DBColumnInfo>();
  columns.add(new DBColumnInfo("group_id",Integer.class,1,null,false));
  columns.add(new DBColumnInfo("principal_id",Integer.class,1,null,false));
  columns.add(new DBColumnInfo("group_name",String.class,1,null,false));
  columns.add(new DBColumnInfo("ldap_group",Integer.class,1,0,false));
  dbAccessor.createTable("groups",columns,"group_id");
  columns=new ArrayList<DBColumnInfo>();
  columns.add(new DBColumnInfo("member_id",Integer.class,1,null,false));
  columns.add(new DBColumnInfo("group_id",Integer.class,1,null,false));
  columns.add(new DBColumnInfo("user_id",Integer.class,1,null,false));
  dbAccessor.createTable("members",columns,"member_id");
  columns=new ArrayList<DBColumnInfo>();
  columns.add(new DBColumnInfo("principal_type_id",Integer.class,1,null,false));
  columns.add(new DBColumnInfo("principal_type_name",String.class,null,null,false));
  dbAccessor.createTable("adminprincipaltype",columns,"principal_type_id");
  dbAccessor.insertRow("adminprincipaltype",new String[]{"principal_type_id","principal_type_name"},new String[]{"1","'USER'"},true);
  dbAccessor.insertRow("adminprincipaltype",new String[]{"principal_type_id","principal_type_name"},new String[]{"2","'GROUP'"},true);
  columns=new ArrayList<DBColumnInfo>();
  columns.add(new DBColumnInfo("principal_id",Long.class,null,null,false));
  columns.add(new DBColumnInfo("principal_type_id",Integer.class,1,null,false));
  dbAccessor.createTable("adminprincipal",columns,"principal_id");
  dbAccessor.insertRow("adminprincipal",new String[]{"principal_id","principal_type_id"},new String[]{"1","1"},true);
  columns=new ArrayList<DBColumnInfo>();
  columns.add(new DBColumnInfo("resource_type_id",Integer.class,1,null,false));
  columns.add(new DBColumnInfo("resource_type_name",String.class,null,null,false));
  dbAccessor.createTable("adminresourcetype",columns,"resource_type_id");
  dbAccessor.insertRow("adminresourcetype",new String[]{"resource_type_id","resource_type_name"},new String[]{"1","'AMBARI'"},true);
  dbAccessor.insertRow("adminresourcetype",new String[]{"resource_type_id","resource_type_name"},new String[]{"2","'CLUSTER'"},true);
  dbAccessor.insertRow("adminresourcetype",new String[]{"resource_type_id","resource_type_name"},new String[]{"3","'VIEW'"},true);
  columns=new ArrayList<DBColumnInfo>();
  columns.add(new DBColumnInfo("resource_id",Long.class,null,null,false));
  columns.add(new DBColumnInfo("resource_type_id",Integer.class,1,null,false));
  dbAccessor.createTable("adminresource",columns,"resource_id");
  dbAccessor.insertRow("adminresource",new String[]{"resource_id","resource_type_id"},new String[]{"1","1"},true);
  columns=new ArrayList<DBColumnInfo>();
  columns.add(new DBColumnInfo("permission_id",Long.class,null,null,false));
  columns.add(new DBColumnInfo("permission_name",String.class,null,null,false));
  columns.add(new DBColumnInfo("resource_type_id",Integer.class,1,null,false));
  dbAccessor.createTable("adminpermission",columns,"permission_id");
  dbAccessor.insertRow("adminpermission",new String[]{"permission_id","permission_name","resource_type_id"},new String[]{"1","'AMBARI.ADMIN'","1"},true);
  dbAccessor.insertRow("adminpermission",new String[]{"permission_id","permission_name","resource_type_id"},new String[]{"2","'CLUSTER.READ'","2"},true);
  dbAccessor.insertRow("adminpermission",new String[]{"permission_id","permission_name","resource_type_id"},new String[]{"3","'CLUSTER.OPERATE'","2"},true);
  dbAccessor.insertRow("adminpermission",new String[]{"permission_id","permission_name","resource_type_id"},new String[]{"4","'VIEW.USE'","3"},true);
  columns=new ArrayList<DBColumnInfo>();
  columns.add(new DBColumnInfo("privilege_id",Long.class,null,null,false));
  columns.add(new DBColumnInfo("permission_id",Long.class,null,null,false));
  columns.add(new DBColumnInfo("resource_id",Long.class,null,null,false));
  columns.add(new DBColumnInfo("principal_id",Long.class,null,null,false));
  dbAccessor.createTable("adminprivilege",columns,"privilege_id");
  dbAccessor.insertRow("adminprivilege",new String[]{"privilege_id","permission_id","resource_id","principal_id"},new String[]{"1","1","1","1"},true);
  if (dbType.equals(Configuration.ORACLE_DB_NAME)) {
    dbAccessor.executeQuery("ALTER TABLE clusterconfig ADD config_attributes CLOB NULL");
  }
 else {
    DBColumnInfo clusterConfigAttributesColumn=new DBColumnInfo("config_attributes",String.class,32000,null,true);
    dbAccessor.addColumn("clusterconfig",clusterConfigAttributesColumn);
  }
  dbAccessor.addColumn("viewmain",new DBColumnInfo("mask",String.class,255,null,true));
  dbAccessor.addColumn("viewmain",new DBColumnInfo("system_view",Character.class,1,null,true));
  dbAccessor.addColumn("viewmain",new DBColumnInfo("resource_type_id",Integer.class,1,1,false));
  dbAccessor.addColumn("viewmain",new DBColumnInfo("description",String.class,2048,null,true));
  dbAccessor.addColumn("viewparameter",new DBColumnInfo("masked",Character.class,1,null,true));
  dbAccessor.addColumn("users",new DBColumnInfo("active",Integer.class,1,1,false));
  dbAccessor.addColumn("users",new DBColumnInfo("principal_id",Long.class,1,1,false));
  dbAccessor.addColumn("viewinstance",new DBColumnInfo("resource_id",Long.class,1,1,false));
  dbAccessor.addColumn("viewinstance",new DBColumnInfo("xml_driven",Character.class,1,null,true));
  dbAccessor.addColumn("clusters",new DBColumnInfo("resource_id",Long.class,1,1,false));
  dbAccessor.addColumn("host_role_command",new DBColumnInfo("output_log",String.class,255,null,true));
  dbAccessor.addColumn("stage",new DBColumnInfo("command_params",byte[].class,null,null,true));
  dbAccessor.addColumn("stage",new DBColumnInfo("host_params",byte[].class,null,null,true));
  dbAccessor.addColumn("host_role_command",new DBColumnInfo("error_log",String.class,255,null,true));
  addAlertingFrameworkDDL();
  dbAccessor.addColumn("request",new DBColumnInfo("exclusive_execution",Integer.class,1,0,false));
  if (dbAccessor.tableExists("componentconfigmapping")) {
    dbAccessor.dropTable("componentconfigmapping");
  }
  if (dbAccessor.tableExists("hostcomponentconfigmapping")) {
    dbAccessor.dropTable("hostcomponentconfigmapping");
  }
  if (dbAccessor.tableExists("hcdesiredconfigmapping")) {
    dbAccessor.dropTable("hcdesiredconfigmapping");
  }
  if (dbAccessor.tableExists("serviceconfigmapping")) {
    dbAccessor.dropTable("serviceconfigmapping");
  }
  dbAccessor.dropConstraint("confgroupclusterconfigmapping","FK_confg");
  if (Configuration.ORACLE_DB_NAME.equals(dbType) || Configuration.MYSQL_DB_NAME.equals(dbType) || Configuration.DERBY_DB_NAME.equals(dbType)) {
    dbAccessor.executeQuery("ALTER TABLE clusterconfig DROP PRIMARY KEY",true);
  }
 else   if (Configuration.POSTGRES_DB_NAME.equals(dbType)) {
    dbAccessor.executeQuery("ALTER TABLE clusterconfig DROP CONSTRAINT clusterconfig_pkey CASCADE",true);
  }
  dbAccessor.addColumn("clusterconfig",new DBColumnInfo("config_id",Long.class,null,null,true));
  if (Configuration.ORACLE_DB_NAME.equals(dbType)) {
    if (dbAccessor.tableHasData("clusterconfig")) {
      dbAccessor.executeQuery("CREATE SEQUENCE TEMP_SEQ " + "  START WITH 1 " + "  MAXVALUE 999999999999999999999999999 "+ "  MINVALUE 1 "+ "  NOCYCLE "+ "  NOCACHE "+ "  NOORDER");
      dbAccessor.executeQuery("UPDATE clusterconfig SET config_id = TEMP_SEQ.NEXTVAL");
      dbAccessor.dropSequence("TEMP_SEQ");
    }
  }
 else   if (Configuration.MYSQL_DB_NAME.equals(dbType)) {
    if (dbAccessor.tableHasData("clusterconfig")) {
      dbAccessor.executeQuery("UPDATE clusterconfig " + "SET config_id = (SELECT @a := @a + 1 FROM (SELECT @a := 1) s)");
    }
  }
 else   if (Configuration.POSTGRES_DB_NAME.equals(dbType)) {
    if (dbAccessor.tableHasData("clusterconfig")) {
      dbAccessor.executeQuery("CREATE SEQUENCE temp_seq START WITH 1");
      dbAccessor.executeQuery("UPDATE clusterconfig SET config_id = nextval('temp_seq')");
      dbAccessor.dropSequence("temp_seq");
    }
  }
  if (dbType.equals(Configuration.ORACLE_DB_NAME) || dbType.equals(Configuration.MYSQL_DB_NAME)) {
    dbAccessor.executeQuery("ALTER TABLE viewinstance MODIFY description VARCHAR(2048)");
    dbAccessor.executeQuery("ALTER TABLE viewparameter MODIFY description VARCHAR(2048)");
  }
 else   if (Configuration.POSTGRES_DB_NAME.equals(dbType)) {
    dbAccessor.executeQuery("ALTER TABLE viewinstance ALTER COLUMN description TYPE VARCHAR(2048)");
    dbAccessor.executeQuery("ALTER TABLE viewparameter ALTER COLUMN description TYPE VARCHAR(2048)");
  }
 else   if (dbType.equals(Configuration.DERBY_DB_NAME)) {
    dbAccessor.executeQuery("ALTER TABLE viewinstance ALTER COLUMN description SET DATA TYPE VARCHAR(2048)");
    dbAccessor.executeQuery("ALTER TABLE viewparameter ALTER COLUMN description SET DATA TYPE VARCHAR(2048)");
  }
  if (Configuration.DERBY_DB_NAME.equals(dbType)) {
    dbAccessor.executeQuery("ALTER TABLE clusterconfig ALTER COLUMN config_id DEFAULT 0");
    dbAccessor.executeQuery("ALTER TABLE clusterconfig ALTER COLUMN config_id NOT NULL");
  }
  dbAccessor.executeQuery("ALTER TABLE clusterconfig ADD PRIMARY KEY (config_id)");
  dbAccessor.addColumn("clusterconfig",new DBColumnInfo("version",Long.class,null));
  populateConfigVersions();
  dbAccessor.setNullable("clusterconfig",new DBColumnInfo("version",Long.class,null),false);
  dbAccessor.executeQuery("ALTER TABLE clusterconfig ADD CONSTRAINT UQ_config_type_tag UNIQUE (cluster_id, type_name, version_tag)",true);
  dbAccessor.executeQuery("ALTER TABLE clusterconfig ADD CONSTRAINT UQ_config_type_version UNIQUE (cluster_id, type_name, version)",true);
  dbAccessor.alterColumn("clusterconfig",new DBColumnInfo("config_data",char[].class,null,null,false));
  dbAccessor.alterColumn("blueprint_configuration",new DBColumnInfo("config_data",char[].class,null,null,false));
  dbAccessor.alterColumn("hostgroup_configuration",new DBColumnInfo("config_data",char[].class,null,null,false));
  columns.clear();
  columns.add(new DBColumnInfo("service_config_id",Long.class,null,null,false));
  columns.add(new DBColumnInfo("cluster_id",Long.class,null,null,false));
  columns.add(new DBColumnInfo("service_name",String.class,null,null,false));
  columns.add(new DBColumnInfo("version",Long.class,null,null,false));
  columns.add(new DBColumnInfo("create_timestamp",Long.class,null,null,false));
  columns.add(new DBColumnInfo("user_name",String.class,null,"_db",false));
  columns.add(new DBColumnInfo("note",char[].class,null,null,true));
  columns.add(new DBColumnInfo("group_id",Long.class,null,null,true));
  dbAccessor.createTable("serviceconfig",columns,"service_config_id");
  columns.clear();
  columns.add(new DBColumnInfo("service_config_id",Long.class,null,null,false));
  columns.add(new DBColumnInfo("hostname",String.class,255,null,false));
  dbAccessor.createTable("serviceconfighosts",columns,"service_config_id","hostname");
  dbAccessor.executeQuery("ALTER TABLE serviceconfig ADD CONSTRAINT UQ_scv_service_version UNIQUE (cluster_id, service_name, version)",true);
  columns.clear();
  columns.add(new DBColumnInfo("service_config_id",Long.class,null,null,false));
  columns.add(new DBColumnInfo("config_id",Long.class,null,null,false));
  dbAccessor.createTable("serviceconfigmapping",columns,"service_config_id","config_id");
  dbAccessor.addFKConstraint("confgroupclusterconfigmapping","FK_confg",new String[]{"cluster_id","config_type","version_tag"},"clusterconfig",new String[]{"cluster_id","type_name","version_tag"},true);
  dbAccessor.addFKConstraint("serviceconfighosts","FK_scvhosts_scv",new String[]{"service_config_id"},"serviceconfig",new String[]{"service_config_id"},true);
  dbAccessor.addColumn("configgroup",new DBColumnInfo("service_name",String.class,255));
  dbAccessor.executeQuery("INSERT INTO ambari_sequences(sequence_name, sequence_value) VALUES('alert_definition_id_seq', 0)",false);
  dbAccessor.executeQuery("INSERT INTO ambari_sequences(sequence_name, sequence_value) VALUES('alert_group_id_seq', 0)",false);
  dbAccessor.executeQuery("INSERT INTO ambari_sequences(sequence_name, sequence_value) VALUES('alert_target_id_seq', 0)",false);
  dbAccessor.executeQuery("INSERT INTO ambari_sequences(sequence_name, sequence_value) VALUES('alert_history_id_seq', 0)",false);
  dbAccessor.executeQuery("INSERT INTO ambari_sequences(sequence_name, sequence_value) VALUES('alert_notice_id_seq', 0)",false);
  dbAccessor.executeQuery("INSERT INTO ambari_sequences(sequence_name, sequence_value) VALUES('alert_current_id_seq', 0)",false);
  dbAccessor.executeQuery("INSERT INTO ambari_sequences(sequence_name, sequence_value) VALUES('group_id_seq', 1)",false);
  dbAccessor.executeQuery("INSERT INTO ambari_sequences(sequence_name, sequence_value) VALUES('member_id_seq', 1)",false);
  dbAccessor.executeQuery("INSERT INTO ambari_sequences(sequence_name, sequence_value) VALUES('resource_type_id_seq', 4)",false);
  dbAccessor.executeQuery("INSERT INTO ambari_sequences(sequence_name, sequence_value) VALUES('resource_id_seq', 2)",false);
  dbAccessor.executeQuery("INSERT INTO ambari_sequences(sequence_name, sequence_value) VALUES('principal_type_id_seq', 3)",false);
  dbAccessor.executeQuery("INSERT INTO ambari_sequences(sequence_name, sequence_value) VALUES('principal_id_seq', 2)",false);
  dbAccessor.executeQuery("INSERT INTO ambari_sequences(sequence_name, sequence_value) VALUES('permission_id_seq', 5)",false);
  dbAccessor.executeQuery("INSERT INTO ambari_sequences(sequence_name, sequence_value) VALUES('privilege_id_seq', 1)",false);
  dbAccessor.executeQuery("INSERT INTO ambari_sequences(sequence_name, sequence_value) VALUES('service_config_id_seq', 1)",false);
  dbAccessor.executeQuery("INSERT INTO ambari_sequences(sequence_name, sequence_value) VALUES('service_config_application_id_seq', 1)",false);
  long count=1;
  ResultSet resultSet=null;
  try {
    resultSet=dbAccessor.executeSelect("SELECT count(*) FROM clusterconfig");
    if (resultSet.next()) {
      count=resultSet.getLong(1) + 2;
    }
  }
  finally {
    if (resultSet != null) {
      resultSet.close();
    }
  }
  dbAccessor.executeQuery("INSERT INTO ambari_sequences(sequence_name, sequence_value) VALUES('config_id_seq', " + count + ")",false);
  dbAccessor.addFKConstraint("users","FK_users_principal_id","principal_id","adminprincipal","principal_id",true);
  dbAccessor.addFKConstraint("clusters","FK_clusters_resource_id","resource_id","adminresource","resource_id",true);
  dbAccessor.addFKConstraint("viewinstance","FK_viewinstance_resource_id","resource_id","adminresource","resource_id",true);
  dbAccessor.addFKConstraint("adminresource","FK_resource_resource_type_id","resource_type_id","adminresourcetype","resource_type_id",true);
  dbAccessor.addFKConstraint("adminprincipal","FK_principal_principal_type_id","principal_type_id","adminprincipaltype","principal_type_id",true);
  dbAccessor.addFKConstraint("adminpermission","FK_permission_resource_type_id","resource_type_id","adminresourcetype","resource_type_id",true);
  dbAccessor.addFKConstraint("adminprivilege","FK_privilege_permission_id","permission_id","adminpermission","permission_id",true);
  dbAccessor.addFKConstraint("adminprivilege","FK_privilege_resource_id","resource_id","adminresource","resource_id",true);
  dbAccessor.addFKConstraint("groups","FK_groups_principal_id","principal_id","adminprincipal","principal_id",true);
  dbAccessor.addFKConstraint("members","FK_members_user_id","user_id","users","user_id",true);
  dbAccessor.addFKConstraint("members","FK_members_group_id","group_id","groups","group_id",true);
  dbAccessor.executeQuery("ALTER TABLE groups ADD CONSTRAINT UNQ_groups_0 UNIQUE (group_name, ldap_group)");
  dbAccessor.executeQuery("ALTER TABLE members ADD CONSTRAINT UNQ_members_0 UNIQUE (group_id, user_id)");
  dbAccessor.executeQuery("ALTER TABLE adminpermission ADD CONSTRAINT UQ_perm_name_resource_type_id UNIQUE (permission_name, resource_type_id)");
}
