{
  List<DBColumnInfo> columns;
  String dbType=getDbType();
  columns=new ArrayList<DBColumnInfo>();
  columns.add(new DBColumnInfo("principal_type_id",Integer.class,1,null,false));
  columns.add(new DBColumnInfo("principal_type_name",String.class,null,null,false));
  dbAccessor.createTable("adminprincipaltype",columns,"principal_type_id");
  dbAccessor.executeQuery("insert into adminprincipaltype (principal_type_id, principal_type_name)\n" + "  select 1, 'USER'\n" + "  union all\n"+ "  select 2, 'GROUP'",true);
  columns=new ArrayList<DBColumnInfo>();
  columns.add(new DBColumnInfo("principal_id",Long.class,null,null,false));
  columns.add(new DBColumnInfo("principal_type_id",Integer.class,1,null,false));
  dbAccessor.createTable("adminprincipal",columns,"principal_id");
  dbAccessor.executeQuery("insert into adminprincipal (principal_id, principal_type_id)\n" + "  select 1, 1",true);
  columns=new ArrayList<DBColumnInfo>();
  columns.add(new DBColumnInfo("resource_type_id",Integer.class,1,null,false));
  columns.add(new DBColumnInfo("resource_type_name",String.class,null,null,false));
  dbAccessor.createTable("adminresourcetype",columns,"resource_type_id");
  dbAccessor.executeQuery("insert into adminresourcetype (resource_type_id, resource_type_name)\n" + "  select 1, 'AMBARI'\n" + "  union all\n"+ "  select 2, 'CLUSTER'\n"+ "  union all\n"+ "  select 3, 'VIEW'",true);
  columns=new ArrayList<DBColumnInfo>();
  columns.add(new DBColumnInfo("resource_id",Long.class,null,null,false));
  columns.add(new DBColumnInfo("resource_type_id",Integer.class,1,null,false));
  dbAccessor.createTable("adminresource",columns,"resource_id");
  dbAccessor.executeQuery("insert into adminresource (resource_id, resource_type_id)\n" + "  select 1, 1",true);
  columns=new ArrayList<DBColumnInfo>();
  columns.add(new DBColumnInfo("permission_id",Long.class,null,null,false));
  columns.add(new DBColumnInfo("permission_name",String.class,null,null,false));
  columns.add(new DBColumnInfo("resource_type_id",Integer.class,1,null,false));
  dbAccessor.createTable("adminpermission",columns,"permission_id");
  dbAccessor.executeQuery("insert into adminpermission(permission_id, permission_name, resource_type_id)\n" + "  select 1, 'AMBARI.ADMIN', 1\n" + "  union all\n"+ "  select 2, 'CLUSTER.READ', 2\n"+ "  union all\n"+ "  select 3, 'CLUSTER.OPERATE', 2\n"+ "  union all\n"+ "  select 4, 'VIEW.USE', 3",true);
  columns=new ArrayList<DBColumnInfo>();
  columns.add(new DBColumnInfo("privilege_id",Long.class,null,null,false));
  columns.add(new DBColumnInfo("permission_id",Long.class,null,null,false));
  columns.add(new DBColumnInfo("resource_id",Long.class,null,null,false));
  columns.add(new DBColumnInfo("principal_id",Long.class,null,null,false));
  dbAccessor.createTable("adminprivilege",columns,"privilege_id");
  dbAccessor.executeQuery("insert into adminprivilege (privilege_id, permission_id, resource_id, principal_id)\n" + "  select 1, 1, 1, injector1",true);
  DBColumnInfo clusterConfigAttributesColumn=new DBColumnInfo("config_attributes",String.class,32000,null,true);
  dbAccessor.addColumn("clusterconfig",clusterConfigAttributesColumn);
  dbAccessor.addColumn("viewmain",new DBColumnInfo("mask",String.class,255,null,true));
  dbAccessor.addColumn("viewparameter",new DBColumnInfo("masked",Character.class,1,null,true));
  dbAccessor.addColumn("users",new DBColumnInfo("active",Integer.class,1,1,false));
  dbAccessor.addColumn("users",new DBColumnInfo("principal_id",Long.class,1,1,false));
  dbAccessor.addColumn("viewmain",new DBColumnInfo("resource_type_id",Integer.class,1,1,false));
  dbAccessor.addColumn("viewinstance",new DBColumnInfo("resource_id",Long.class,1,1,false));
  dbAccessor.addColumn("clusters",new DBColumnInfo("resource_id",Long.class,1,1,false));
  dbAccessor.addColumn("host_role_command",new DBColumnInfo("output_log",String.class,255,null,true));
  dbAccessor.addColumn("host_role_command",new DBColumnInfo("error_log",String.class,255,null,true));
  if (dbType.equals(Configuration.POSTGRES_DB_NAME) || dbType.equals(Configuration.ORACLE_DB_NAME)) {
    dbAccessor.executeQuery("UPDATE host_role_command SET output_log = ('/var/lib/ambari-agent/data/output-' || CAST(task_id AS VARCHAR(20)) || '.txt') WHERE task_id IN (SELECT task_id FROM host_role_command WHERE output_log IS NULL OR output_log = '' ORDER BY task_id DESC LIMIT 1000);");
    dbAccessor.executeQuery("UPDATE host_role_command SET error_log = ('/var/lib/ambari-agent/data/errors-' || CAST(task_id AS VARCHAR(20)) || '.txt') WHERE task_id IN (SELECT task_id FROM host_role_command WHERE error_log IS NULL OR error_log = '' ORDER BY task_id DESC LIMIT 1000);");
  }
 else   if (dbType.equals(Configuration.MYSQL_DB_NAME)) {
    dbAccessor.executeQuery("UPDATE host_role_command SET output_log = CONCAT('/var/lib/ambari-agent/data/output-', task_id, '.txt') WHERE task_id IN (SELECT task_id FROM host_role_command WHERE output_log IS NULL OR output_log = '' ORDER BY task_id DESC LIMIT 1000);");
    dbAccessor.executeQuery("UPDATE host_role_command SET error_log = CONCAT('/var/lib/ambari-agent/data/errors-', task_id, '.txt') WHERE task_id IN (SELECT task_id FROM host_role_command WHERE error_log IS NULL OR error_log = '' ORDER BY task_id DESC LIMIT 1000);");
  }
  addAlertingFrameworkDDL();
  if (dbAccessor.tableExists("componentconfigmapping")) {
    dbAccessor.dropTable("componentconfigmapping");
  }
  if (dbAccessor.tableExists("hostcomponentconfigmapping")) {
    dbAccessor.dropTable("hostcomponentconfigmapping");
  }
  if (dbAccessor.tableExists("hcdesiredconfigmapping")) {
    dbAccessor.dropTable("hcdesiredconfigmapping");
  }
  if (dbAccessor.tableExists("serviceconfigmapping")) {
    dbAccessor.dropTable("serviceconfigmapping");
  }
  dbAccessor.dropConstraint("confgroupclusterconfigmapping","FK_confg");
  if (Configuration.ORACLE_DB_NAME.equals(dbType) || Configuration.MYSQL_DB_NAME.equals(dbType) || Configuration.DERBY_DB_NAME.equals(dbType)) {
    dbAccessor.executeQuery("ALTER TABLE clusterconfig DROP PRIMARY KEY",true);
  }
 else   if (Configuration.POSTGRES_DB_NAME.equals(dbType)) {
    dbAccessor.executeQuery("ALTER TABLE clusterconfig DROP CONSTRAINT clusterconfig_pkey CASCADE",true);
  }
  dbAccessor.addColumn("clusterconfig",new DBColumnInfo("config_id",Long.class,null,null,true));
  if (Configuration.ORACLE_DB_NAME.equals(dbType)) {
    if (dbAccessor.tableHasData("clusterconfig")) {
      dbAccessor.executeQuery("CREATE SEQUENCE TEMP_SEQ " + "  START WITH 1 " + "  MAXVALUE 999999999999999999999999999 "+ "  MINVALUE 1 "+ "  NOCYCLE "+ "  NOCACHE "+ "  NOORDER");
      dbAccessor.executeQuery("UPDATE clusterconfig SET config_id = TEMP_SEQ.NEXTVAL");
      dbAccessor.dropSequence("TEMP_SEQ");
    }
  }
 else   if (Configuration.MYSQL_DB_NAME.equals(dbType)) {
    if (dbAccessor.tableHasData("clusterconfig")) {
      dbAccessor.executeQuery("UPDATE viewinstance " + "SET config_id = (SELECT @a := @a + 1 FROM (SELECT @a := 1) s)");
    }
  }
 else   if (Configuration.POSTGRES_DB_NAME.equals(dbType)) {
    if (dbAccessor.tableHasData("clusterconfig")) {
      dbAccessor.executeQuery("CREATE SEQUENCE temp_seq START WITH 1");
      dbAccessor.executeQuery("UPDATE clusterconfig SET config_id = nextval('temp_seq')");
      dbAccessor.dropSequence("temp_seq");
    }
  }
  if (Configuration.DERBY_DB_NAME.equals(dbType)) {
    dbAccessor.executeQuery("ALTER TABLE clusterconfig ALTER COLUMN config_id DEFAULT 0");
    dbAccessor.executeQuery("ALTER TABLE clusterconfig ALTER COLUMN config_id NOT NULL");
  }
  dbAccessor.executeQuery("ALTER TABLE clusterconfig ADD PRIMARY KEY (config_id)");
  columns.clear();
  columns.add(new DBColumnInfo("service_config_id",Long.class,null,null,false));
  columns.add(new DBColumnInfo("cluster_id",Long.class,null,null,false));
  columns.add(new DBColumnInfo("service_name",String.class,null,null,false));
  columns.add(new DBColumnInfo("version",Long.class,null,null,false));
  columns.add(new DBColumnInfo("create_timestamp",Long.class,null,null,false));
  dbAccessor.createTable("serviceconfig",columns,"service_config_id");
  columns.clear();
  columns.add(new DBColumnInfo("service_config_id",Long.class,null,null,false));
  columns.add(new DBColumnInfo("config_id",Long.class,null,null,false));
  dbAccessor.createTable("serviceconfigmapping",columns,"service_config_id","config_id");
  columns.clear();
  columns.add(new DBColumnInfo("apply_id",Long.class,null,null,false));
  columns.add(new DBColumnInfo("service_config_id",Long.class,null,null,false));
  columns.add(new DBColumnInfo("apply_timestamp",Long.class,null,null,false));
  columns.add(new DBColumnInfo("user_name",String.class,null,"_db",false));
  dbAccessor.createTable("serviceconfigapplication",columns,"apply_id");
  dbAccessor.addFKConstraint("confgroupclusterconfigmapping","FK_confg",new String[]{"cluster_id","config_type","version_tag"},"clusterconfig",new String[]{"cluster_id","type_name","version_tag"},true);
}
