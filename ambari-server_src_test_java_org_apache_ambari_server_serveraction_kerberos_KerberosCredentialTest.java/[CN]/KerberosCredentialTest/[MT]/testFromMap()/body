{
  KerberosCredential kerberosCredential;
  Map<String,Object> attributes=new HashMap<String,Object>();
  attributes.put(KerberosCredential.KEY_NAME_PRINCIPAL,"admin/admin@EXAMPLE.COM");
  attributes.put(KerberosCredential.KEY_NAME_KEYTAB,"bogus_base64-encoded_data");
  attributes.put("kerberos_admin/" + KerberosCredential.KEY_NAME_PRINCIPAL,"admin/admin@FOOBAR.COM");
  attributes.put("kerberos_admin/" + KerberosCredential.KEY_NAME_PASSWORD,"t0p_s3cr3t");
  kerberosCredential=KerberosCredential.fromMap(attributes,"");
  Assert.assertNotNull(kerberosCredential);
  Assert.assertEquals("admin/admin@EXAMPLE.COM",kerberosCredential.getPrincipal());
  Assert.assertNull(kerberosCredential.getPassword());
  Assert.assertEquals("bogus_base64-encoded_data",kerberosCredential.getKeytab());
  kerberosCredential=KerberosCredential.fromMap(attributes,null);
  Assert.assertNotNull(kerberosCredential);
  Assert.assertEquals("admin/admin@EXAMPLE.COM",kerberosCredential.getPrincipal());
  Assert.assertNull(kerberosCredential.getPassword());
  Assert.assertEquals("bogus_base64-encoded_data",kerberosCredential.getKeytab());
  kerberosCredential=KerberosCredential.fromMap(attributes,"kerberos_admin/");
  Assert.assertNotNull(kerberosCredential);
  Assert.assertEquals("admin/admin@FOOBAR.COM",kerberosCredential.getPrincipal());
  Assert.assertEquals("t0p_s3cr3t",String.valueOf(kerberosCredential.getPassword()));
  Assert.assertNull(kerberosCredential.getKeytab());
  kerberosCredential=KerberosCredential.fromMap(attributes,"invalid/");
  Assert.assertNull(kerberosCredential);
}
