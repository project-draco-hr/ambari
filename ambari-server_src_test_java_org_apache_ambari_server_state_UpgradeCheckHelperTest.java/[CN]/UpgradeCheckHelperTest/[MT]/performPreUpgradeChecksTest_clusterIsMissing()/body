{
  final Clusters clusters=Mockito.mock(Clusters.class);
  Mockito.when(clusters.getCluster(Mockito.anyString())).thenAnswer(new Answer<Cluster>(){
    @Override public Cluster answer(    InvocationOnMock invocation) throws Throwable {
      final String clusterName=invocation.getArguments()[0].toString();
      if (clusterName.equals("existing")) {
        return Mockito.mock(Cluster.class);
      }
 else {
        throw new ClusterNotFoundException(clusterName);
      }
    }
  }
);
  final Injector injector=Guice.createInjector(new AbstractModule(){
    @Override protected void configure(){
      bind(Clusters.class).toInstance(clusters);
      bind(Configuration.class).toProvider(Providers.<Configuration>of(null));
      bind(HostVersionDAO.class).toProvider(Providers.<HostVersionDAO>of(null));
      bind(RepositoryVersionDAO.class).toProvider(Providers.<RepositoryVersionDAO>of(null));
    }
  }
);
  final UpgradeCheckHelper helper=injector.getInstance(UpgradeCheckHelper.class);
  helper.registry.clear();
  helper.registry.add(helper.new ServicesUpCheck());
  List<UpgradeCheck> upgradeChecks=helper.performPreUpgradeChecks(new PreUpgradeCheckRequest("existing"));
  Assert.assertEquals(UpgradeCheckStatus.PASS,upgradeChecks.get(0).getStatus());
  upgradeChecks=helper.performPreUpgradeChecks(new PreUpgradeCheckRequest("non-existing"));
  Assert.assertEquals(UpgradeCheckStatus.FAIL,upgradeChecks.get(0).getStatus());
  Assert.assertTrue(!upgradeChecks.get(0).getFailReason().equals("Unexpected server error happened"));
}
