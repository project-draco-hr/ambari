'\nLicensed to the Apache Software Foundation (ASF) under one\nor more contributor license agreements.  See the NOTICE file\ndistributed with this work for additional information\nregarding copyright ownership.  The ASF licenses this file\nto you under the Apache License, Version 2.0 (the\n"License"); you may not use this file except in compliance\nwith the License.  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\nAmbari Agent\n\n'
from __future__ import with_statement
from resource_management.core.environment import Environment
from resource_management.core.utils import checked_unite
__all__ = ['Source', 'Template', 'InlineTemplate', 'StaticFile', 'DownloadSource']
import hashlib
import os
import urllib2
import urlparse
try:
    from jinja2 import Environment as JinjaEnvironment, BaseLoader, TemplateNotFound, FunctionLoader, StrictUndefined
except ImportError:


    class Template(Source):

        def __init__(self, name, variables=None, env=None):
            raise Exception('Jinja2 required for Template/InlineTemplate')


    class InlineTemplate(Source):

        def __init__(self, name, variables=None, env=None):
            raise Exception('Jinja2 required for Template/InlineTemplate')
else:


    class TemplateLoader(BaseLoader):

        def __init__(self, env=None):
            self.env = (env or Environment.get_instance())

        def get_source(self, environment, template_name):
            if template_name.startswith(os.path.sep):
                path = template_name
            else:
                basedir = self.env.config.basedir
                path = os.path.join(basedir, 'templates', template_name)
            if (not os.path.exists(path)):
                raise TemplateNotFound(('%s at %s' % (template_name, path)))
            mtime = os.path.getmtime(path)
            with open(path, 'rb') as fp:
                source = fp.read().decode('utf-8')
            return (source, path, (lambda : (mtime == os.path.getmtime(path))))


    class Template(Source):

        def __init__(self, name, extra_imports=[], **kwargs):
            '\n      @param kwargs: Additional variables passed to template\n      '
            super(Template, self).__init__(name)
            params = self.env.config.params
            variables = checked_unite(params, kwargs)
            self.imports_dict = dict(((module.__name__, module) for module in extra_imports))
            self.context = (variables.copy() if variables else {})
            if (not hasattr(self, 'template_env')):
                self.template_env = JinjaEnvironment(loader=TemplateLoader(self.env), autoescape=False, undefined=StrictUndefined, trim_blocks=True)
            self.template = self.template_env.get_template(self.name)

        def get_content(self):
            default_variables = {'env': self.env, 'repr': repr, 'str': str, 'bool': bool, }
            variables = checked_unite(default_variables, self.imports_dict)
            self.context.update(variables)
            rendered = self.template.render(self.context)
            return ((rendered + '\n') if (not rendered.endswith('\n')) else rendered)


    class InlineTemplate(Template):

        def __init__(self, name, extra_imports=[], **kwargs):
            self.template_env = JinjaEnvironment(loader=FunctionLoader((lambda text: text)))
            super(InlineTemplate, self).__init__(name, extra_imports, **kwargs)
