from __future__ import with_statement
from resource_management.core.environment import Substitutor, Environment
__all__ = ['Source', 'Template', 'InlineTemplate', 'StaticFile', 'DownloadSource']
import hashlib
import os
import urllib2
import urlparse
try:
    from jinja2 import Environment as JinjaEnvironment, BaseLoader, TemplateNotFound, FunctionLoader
except ImportError:


    class Template(Source):

        def __init__(self, name, variables=None, env=None):
            raise Exception('Jinja2 required for Template/InlineTemplate')


    class InlineTemplate(Source):

        def __init__(self, name, variables=None, env=None):
            raise Exception('Jinja2 required for Template/InlineTemplate')
else:


    class TemplateLoader(BaseLoader):

        def __init__(self, env=None):
            self.env = (env or Environment.get_instance())

        def get_source(self, environment, template_name):
            if template_name.startswith(os.path.sep):
                path = template_name
            else:
                basedir = self.env.config.basedir
                path = os.path.join(basedir, 'templates', template_name)
            if (not os.path.exists(path)):
                raise TemplateNotFound(('%s at %s' % (template_name, path)))
            mtime = os.path.getmtime(path)
            with open(path, 'rb') as fp:
                source = fp.read().decode('utf-8')
            return (source, path, (lambda : (mtime == os.path.getmtime(path))))


    class Template(Source):

        def __init__(self, name, variables=None, env=None):
            super(Template, self).__init__(name, env)
            params = self.env.config.params
            variables = (params if params else variables)
            self.context = (variables.copy() if variables else {})
            if (not hasattr(self, 'template_env')):
                self.template_env = JinjaEnvironment(loader=TemplateLoader(self.env), autoescape=False)
            self.template = self.template_env.get_template(self.name)

        def get_content(self):
            self.context.update(env=self.env, repr=repr, str=str, bool=bool)
            rendered = self.template.render(self.context)
            return ((rendered + '\n') if (not rendered.endswith('\n')) else rendered)


    class InlineTemplate(Template):

        def __init__(self, name, variables=None, env=None):
            self.template_env = JinjaEnvironment(loader=FunctionLoader((lambda text: text)))
            super(InlineTemplate, self).__init__(name, variables, env)
