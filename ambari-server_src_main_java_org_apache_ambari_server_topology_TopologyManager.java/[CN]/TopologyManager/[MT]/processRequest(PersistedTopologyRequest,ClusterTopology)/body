{
  finalizeTopology(persistedRequest.getRequest(),topology);
  LogicalRequest logicalRequest=createLogicalRequest(persistedRequest,topology);
  boolean requestHostComplete=false;
synchronized (availableHosts) {
    Iterator<HostImpl> hostIterator=availableHosts.iterator();
    while (!requestHostComplete && hostIterator.hasNext()) {
      HostImpl host=hostIterator.next();
synchronized (reservedHosts) {
        String hostname=host.getHostName();
        if (reservedHosts.containsKey(hostname)) {
          if (logicalRequest.equals(reservedHosts.get(hostname))) {
            reservedHosts.remove(hostname);
          }
 else {
            continue;
          }
        }
      }
      HostOfferResponse response=logicalRequest.offer(host);
switch (response.getAnswer()) {
case ACCEPTED:
        hostIterator.remove();
      processAcceptedHostOffer(getClusterTopology(logicalRequest.getClusterName()),response,host);
    break;
case DECLINED_DONE:
  requestHostComplete=true;
break;
case DECLINED_PREDICATE:
break;
}
}
if (!requestHostComplete) {
outstandingRequests.add(logicalRequest);
}
}
return logicalRequest;
}
