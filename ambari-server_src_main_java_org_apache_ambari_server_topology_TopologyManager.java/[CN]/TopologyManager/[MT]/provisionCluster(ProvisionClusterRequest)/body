{
  ensureInitialized();
  ClusterTopology topology=new ClusterTopologyImpl(ambariContext,request);
  final String clusterName=request.getClusterName();
  Long provisionId=ambariContext.getNextRequestId();
  SecurityConfiguration securityConfiguration=processSecurityConfiguration(request);
  if (securityConfiguration != null && securityConfiguration.getType() == SecurityType.KERBEROS) {
    addKerberosClient(topology);
    ambariContext.createAmbariResources(topology,clusterName,securityConfiguration.getType());
    if (securityConfiguration.getDescriptor() != null) {
      submitKerberosDescriptorAsArtifact(clusterName,securityConfiguration.getDescriptor());
    }
    Credential credential=request.getCredentialsMap().get(KDC_ADMIN_CREDENTIAL);
    if (credential == null) {
      throw new InvalidTopologyException(KDC_ADMIN_CREDENTIAL + " is missing from request.");
    }
    submitCredential(clusterName,credential);
  }
 else {
    ambariContext.createAmbariResources(topology,clusterName,null);
  }
  long clusterId=ambariContext.getClusterId(clusterName);
  topology.setClusterId(clusterId);
  request.setClusterId(clusterId);
  topology.setConfigRecommendationStrategy(request.getConfigRecommendationStrategy());
  PersistedTopologyRequest persistedRequest=RetryHelper.executeWithRetry(new Callable<PersistedTopologyRequest>(){
    @Override public PersistedTopologyRequest call() throws Exception {
      return persistedState.persistTopologyRequest(request);
    }
  }
);
  clusterTopologyMap.put(clusterId,topology);
  final Stack stack=topology.getBlueprint().getStack();
  addClusterConfigRequest(topology,new ClusterConfigurationRequest(ambariContext,topology,true,stackAdvisorBlueprintProcessor));
  LogicalRequest logicalRequest=processRequest(persistedRequest,topology,provisionId);
  ambariContext.persistInstallStateForUI(clusterName,stack.getName(),stack.getVersion());
  return getRequestStatus(logicalRequest.getRequestId());
}
