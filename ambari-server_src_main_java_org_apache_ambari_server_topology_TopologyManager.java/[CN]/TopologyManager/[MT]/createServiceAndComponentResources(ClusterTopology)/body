{
  String clusterName=topology.getClusterName();
  Collection<String> services=topology.getBlueprint().getServices();
synchronized (serviceResourceLock) {
    try {
      Cluster cluster=getController().getClusters().getCluster(clusterName);
      services.removeAll(cluster.getServices().keySet());
    }
 catch (    AmbariException e) {
      throw new RuntimeException(e);
    }
    Set<ServiceRequest> serviceRequests=new HashSet<ServiceRequest>();
    Set<ServiceComponentRequest> componentRequests=new HashSet<ServiceComponentRequest>();
    for (    String service : services) {
      serviceRequests.add(new ServiceRequest(clusterName,service,null));
      for (      String component : topology.getBlueprint().getComponents(service)) {
        componentRequests.add(new ServiceComponentRequest(clusterName,service,component,null));
      }
    }
    try {
      ServiceResourceProvider serviceResourceProvider=(ServiceResourceProvider)ClusterControllerHelper.getClusterController().ensureResourceProvider(Resource.Type.Service);
      serviceResourceProvider.createServices(serviceRequests);
      ComponentResourceProvider componentResourceProvider=(ComponentResourceProvider)ClusterControllerHelper.getClusterController().ensureResourceProvider(Resource.Type.Component);
      componentResourceProvider.createComponents(componentRequests);
    }
 catch (    AmbariException e) {
      throw new RuntimeException(e);
    }
  }
}
