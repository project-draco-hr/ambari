{
  ensureInitialized();
  LOG.info("TopologyManager.onHostRegistered: Entering");
  if (associatedWithCluster || isHostIgnored(host.getHostName())) {
    LOG.info("TopologyManager.onHostRegistered: host = {} is already associated with the cluster or is currently being processed",host.getHostName());
    return;
  }
  boolean matchedToRequest=false;
  String hostName=host.getHostName();
synchronized (availableHosts) {
synchronized (reservedHosts) {
      if (reservedHosts.containsKey(hostName)) {
        LogicalRequest request=reservedHosts.remove(hostName);
        HostOfferResponse response=request.offer(host);
        if (response.getAnswer() != HostOfferResponse.Answer.ACCEPTED) {
          throw new RuntimeException("LogicalRequest declined host offer of explicitly requested host: " + hostName);
        }
        LOG.info("TopologyManager.onHostRegistered: processing accepted host offer for reserved host = {}",hostName);
        processAcceptedHostOffer(getClusterTopology(request.getClusterId()),response,host);
        matchedToRequest=true;
      }
    }
    if (!matchedToRequest) {
synchronized (outstandingRequests) {
        Iterator<LogicalRequest> outstandingRequestIterator=outstandingRequests.iterator();
        while (!matchedToRequest && outstandingRequestIterator.hasNext()) {
          LogicalRequest request=outstandingRequestIterator.next();
          HostOfferResponse hostOfferResponse=request.offer(host);
switch (hostOfferResponse.getAnswer()) {
case ACCEPTED:
            matchedToRequest=true;
          LOG.info("TopologyManager.onHostRegistered: processing accepted host offer for matched host = {}",hostName);
        processAcceptedHostOffer(getClusterTopology(request.getClusterId()),hostOfferResponse,host);
      break;
case DECLINED_DONE:
    LOG.info("TopologyManager.onHostRegistered: DECLINED_DONE received for host = {}",hostName);
  outstandingRequestIterator.remove();
break;
case DECLINED_PREDICATE:
LOG.info("TopologyManager.onHostRegistered: DECLINED_PREDICATE received for host = {}",hostName);
break;
}
}
}
}
if (!matchedToRequest) {
boolean addToAvailableList=true;
for (HostImpl registered : availableHosts) {
if (registered.getHostId() == host.getHostId()) {
LOG.info("Host {} re-registered, will not be added to the available hosts list",hostName);
addToAvailableList=false;
break;
}
}
if (addToAvailableList) {
LOG.info("TopologyManager: Queueing available host {}",hostName);
availableHosts.add(host);
}
}
}
}
