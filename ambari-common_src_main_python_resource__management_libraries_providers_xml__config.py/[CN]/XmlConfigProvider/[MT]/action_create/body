def action_create(self):
    filename = self.resource.filename
    xml_config_provider_config_dir = self.resource.conf_dir
    config_content = InlineTemplate('<!--{{time.asctime(time.localtime())}}-->\n    <configuration>\n    {% for key, value in configurations_dict|dictsort %}\n    <property>\n      <name>{{ key|e }}</name>\n      <value>{{ resource_management.core.source.InlineTemplate(str(value)).get_content() |e }}</value>\n      {%- if not configuration_attrs is none -%}\n      {%- for attrib_name, attrib_occurances in  configuration_attrs.items() -%}\n      {%- for property_name, attrib_value in  attrib_occurances.items() -%}\n      {% if property_name == key and attrib_name %}\n      <{{attrib_name|e}}>{{attrib_value|e}}</{{attrib_name|e}}>\n      {%- endif -%}\n      {%- endfor -%}\n      {%- endfor -%}\n      {%- endif %}\n    </property>\n    {% endfor %}\n  </configuration>', extra_imports=[time, resource_management, resource_management.core, resource_management.core.source], configurations_dict=self.resource.configurations, configuration_attrs=self.resource.configuration_attributes)
    xml_config_dest_file_path = os.path.join(xml_config_provider_config_dir, filename)
    Logger.info('Generating config: {0}'.format(xml_config_dest_file_path))
    with Environment.get_instance_copy() as env:
        File(xml_config_dest_file_path, content=config_content, owner=self.resource.owner, group=self.resource.group, mode=self.resource.mode, encoding=self.resource.encoding)
