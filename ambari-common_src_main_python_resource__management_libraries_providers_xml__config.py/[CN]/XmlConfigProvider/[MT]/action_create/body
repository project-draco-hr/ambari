def action_create(self):
    filename = self.resource.filename
    conf_dir = self.resource.conf_dir
    config_content = InlineTemplate('<!--{{time.asctime(time.localtime())}}-->\n    <configuration>\n    {% for key, value in configurations_dict|dictsort %}\n    <property>\n      <name>{{ key|e }}</name>\n      <value>{{ value|e }}</value>\n      {%- if not configuration_attrs is none -%}\n      {%- for attrib_name, attrib_occurances in  configuration_attrs.items() -%}\n      {%- for property_name, attrib_value in  attrib_occurances.items() -%}\n      {% if property_name == key and attrib_name %}\n      <{{attrib_name|e}}>{{attrib_value|e}}</{{attrib_name|e}}>\n      {%- endif -%}\n      {%- endfor -%}\n      {%- endfor -%}\n      {%- endif %}\n    </property>\n    {% endfor %}\n  </configuration>', extra_imports=[time], configurations_dict=self.resource.configurations, configuration_attrs=self.resource.configuration_attributes)
    Logger.info(format('Generating config: {conf_dir}/{filename}'))
    with Environment.get_instance_copy() as env:
        File(format('{conf_dir}/{filename}'), content=config_content, owner=self.resource.owner, group=self.resource.group, mode=self.resource.mode, encoding=self.resource.encoding)
