{
  Request request=PropertyHelper.getReadRequest(AlertHistoryResourceProvider.ALERT_HISTORY_CLUSTER_NAME,AlertHistoryResourceProvider.ALERT_HISTORY_DEFINITION_ID,AlertHistoryResourceProvider.ALERT_HISTORY_DEFINITION_NAME,AlertHistoryResourceProvider.ALERT_HISTORY_COMPONENT_NAME,AlertHistoryResourceProvider.ALERT_HISTORY_HOSTNAME,AlertHistoryResourceProvider.ALERT_HISTORY_STATE);
  Predicate predicate=new PredicateBuilder().property(AlertHistoryResourceProvider.ALERT_HISTORY_CLUSTER_NAME).equals("c1").and().property(AlertHistoryResourceProvider.ALERT_HISTORY_ID).equals("1").toPredicate();
  expect(m_dao.findAll(EasyMock.anyObject(AlertHistoryRequest.class))).andReturn(getMockEntities());
  Cluster cluster=createMock(Cluster.class);
  expect(cluster.getResourceId()).andReturn(4L).anyTimes();
  expect(cluster.getClusterId()).andReturn(2L).anyTimes();
  Clusters clusters=m_injector.getInstance(Clusters.class);
  expect(clusters.getCluster("c1")).andReturn(cluster).anyTimes();
  AmbariManagementController amc=m_injector.getInstance(AmbariManagementController.class);
  replay(m_dao,amc,clusters,cluster);
  SecurityContextHolder.getContext().setAuthentication(authentication);
  AlertHistoryResourceProvider provider=createProvider();
  Set<Resource> results=provider.getResources(request,predicate);
  assertEquals(1,results.size());
  Resource r=results.iterator().next();
  Assert.assertEquals("namenode_definition",r.getPropertyValue(AlertHistoryResourceProvider.ALERT_HISTORY_DEFINITION_NAME));
  Assert.assertEquals(AlertState.WARNING,r.getPropertyValue(AlertHistoryResourceProvider.ALERT_HISTORY_STATE));
}
