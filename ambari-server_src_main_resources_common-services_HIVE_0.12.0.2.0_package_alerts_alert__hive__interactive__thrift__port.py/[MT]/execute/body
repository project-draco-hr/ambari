@OsFamilyFuncImpl(os_family=OsFamilyImpl.DEFAULT)
def execute(configurations={}, parameters={}, host_name=None):
    '\n  Returns a tuple containing the result code and a pre-formatted result label\n\n  Keyword arguments:\n  configurations (dictionary): a mapping of configuration key to value\n  parameters (dictionary): a mapping of script parameter key to value\n  host_name (string): the name of this host where the alert is running\n  '
    if (configurations is None):
        return ('UNKNOWN', ['There were no configurations supplied to the script.'])
    transport_mode = HIVE_SERVER_INTERACTIVE_TRANSPORT_MODE_DEFAULT
    if (HIVE_SERVER_INTERACTIVE_TRANSPORT_MODE_KEY in configurations):
        transport_mode = configurations[HIVE_SERVER_INTERACTIVE_TRANSPORT_MODE_KEY]
    port = THRIFT_PORT_DEFAULT
    if ((transport_mode.lower() == 'binary') and (HIVE_SERVER_INTERACTIVE_THRIFT_PORT_KEY in configurations)):
        port = int(configurations[HIVE_SERVER_INTERACTIVE_THRIFT_PORT_KEY])
    elif ((transport_mode.lower() == 'http') and (HIVE_SERVER_INTERACTIVE_THRIFT_HTTP_PORT_KEY in configurations)):
        port = int(configurations[HIVE_SERVER_INTERACTIVE_THRIFT_HTTP_PORT_KEY])
    security_enabled = False
    if (SECURITY_ENABLED_KEY in configurations):
        security_enabled = (str(configurations[SECURITY_ENABLED_KEY]).upper() == 'TRUE')
    check_command_timeout = CHECK_COMMAND_TIMEOUT_DEFAULT
    if (CHECK_COMMAND_TIMEOUT_KEY in parameters):
        check_command_timeout = float(parameters[CHECK_COMMAND_TIMEOUT_KEY])
    hive_server2_authentication = HIVE_SERVER2_INTERACTIVE_AUTHENTICATION_DEFAULT
    if (HIVE_SERVER2_INTERACTIVE_AUTHENTICATION_KEY in configurations):
        hive_server2_authentication = configurations[HIVE_SERVER2_INTERACTIVE_AUTHENTICATION_KEY]
    elif (HIVE_SERVER2_AUTHENTICATION_KEY in configurations):
        hive_server2_authentication = configurations[HIVE_SERVER2_AUTHENTICATION_KEY]
    hive_ssl = False
    if (HIVE_SSL in configurations):
        hive_ssl = configurations[HIVE_SSL]
    hive_ssl_keystore_path = None
    if (HIVE_SSL_KEYSTORE_PATH in configurations):
        hive_ssl_keystore_path = configurations[HIVE_SSL_KEYSTORE_PATH]
    hive_ssl_keystore_password = None
    if (HIVE_SSL_KEYSTORE_PASSWORD in configurations):
        hive_ssl_keystore_password = configurations[HIVE_SSL_KEYSTORE_PASSWORD]
    smokeuser_keytab = SMOKEUSER_KEYTAB_DEFAULT
    smokeuser_principal = SMOKEUSER_PRINCIPAL_DEFAULT
    smokeuser = SMOKEUSER_DEFAULT
    if (SMOKEUSER_PRINCIPAL_SCRIPT_PARAM_KEY in parameters):
        smokeuser_principal = parameters[SMOKEUSER_PRINCIPAL_SCRIPT_PARAM_KEY]
    if (SMOKEUSER_SCRIPT_PARAM_KEY in parameters):
        smokeuser = parameters[SMOKEUSER_SCRIPT_PARAM_KEY]
    if (SMOKEUSER_KEYTAB_SCRIPT_PARAM_KEY in parameters):
        smokeuser_keytab = parameters[SMOKEUSER_KEYTAB_SCRIPT_PARAM_KEY]
    if (SMOKEUSER_PRINCIPAL_KEY in configurations):
        smokeuser_principal = configurations[SMOKEUSER_PRINCIPAL_KEY]
    if (SMOKEUSER_KEY in configurations):
        smokeuser = configurations[SMOKEUSER_KEY]
    result_code = None
    if security_enabled:
        hive_server_principal = HIVE_SERVER_INTERACTIVE_PRINCIPAL_DEFAULT
        if (HIVE_SERVER_INTERACTIVE_PRINCIPAL_KEY in configurations):
            hive_server_principal = configurations[HIVE_SERVER_INTERACTIVE_PRINCIPAL_KEY]
        if (SMOKEUSER_KEYTAB_KEY in configurations):
            smokeuser_keytab = configurations[SMOKEUSER_KEYTAB_KEY]
        if (KERBEROS_EXECUTABLE_SEARCH_PATHS_KEY in configurations):
            kerberos_executable_search_paths = configurations[KERBEROS_EXECUTABLE_SEARCH_PATHS_KEY]
        else:
            kerberos_executable_search_paths = None
        kinit_path_local = get_kinit_path(kerberos_executable_search_paths)
        kinitcmd = format('{kinit_path_local} -kt {smokeuser_keytab} {smokeuser_principal}; ')
    else:
        hive_server_principal = None
        kinitcmd = None
    try:
        if (host_name is None):
            host_name = socket.getfqdn()
        start_time = time.time()
        try:
            hive_check.check_thrift_port_sasl(host_name, port, hive_server2_authentication, hive_server_principal, kinitcmd, smokeuser, transport_mode=transport_mode, ssl=hive_ssl, ssl_keystore=hive_ssl_keystore_path, ssl_password=hive_ssl_keystore_password, check_command_timeout=int(check_command_timeout))
            result_code = 'OK'
            total_time = (time.time() - start_time)
            label = OK_MESSAGE.format(total_time, port)
        except:
            result_code = 'CRITICAL'
            label = CRITICAL_MESSAGE.format(host_name, port, traceback.format_exc())
    except:
        label = traceback.format_exc()
        result_code = 'UNKNOWN'
    return (result_code, [label])
