def flatten(self, application_id=None):
    '\n    Return flatten dict to caller in json format.\n    Json format:\n    {"metrics":[{"hostname":"a","metricname":"b","appid":"c",\n    "instanceid":"d","starttime":"e","metrics":{"t":"v"}}]}\n    '
    with self.lock:
        timeline_metrics = {'metrics': [], }
        local_metric_map = {}
        if application_id:
            if self.app_metric_map.has_key(application_id):
                local_metric_map = {application_id: self.app_metric_map[application_id], }
            else:
                logger.info('application_id: {0}, not present in the map.'.format(application_id))
        else:
            local_metric_map = self.app_metric_map.copy()
        pass
        for (appId, metrics) in local_metric_map.iteritems():
            for (metricId, metricData) in dict(metrics).iteritems():
                timeline_metric = {'hostname': self.hostname, 'metricname': metricId, 'appid': 'HOST', 'instanceid': '', 'starttime': self.get_start_time(appId, metricId), 'metrics': metricData, }
                timeline_metrics['metrics'].append(timeline_metric)
            pass
        pass
        return (json.dumps(timeline_metrics) if (len(timeline_metrics['metrics']) > 0) else None)
