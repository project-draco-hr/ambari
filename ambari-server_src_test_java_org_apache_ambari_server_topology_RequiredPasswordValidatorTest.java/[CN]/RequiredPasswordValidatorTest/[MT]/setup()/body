{
  stackDefaults=new Configuration(new HashMap<String,Map<String,String>>(),new HashMap<String,Map<String,Map<String,String>>>());
  bpClusterConfig=new Configuration(new HashMap<String,Map<String,String>>(),new HashMap<String,Map<String,Map<String,String>>>(),stackDefaults);
  topoClusterConfig=new Configuration(new HashMap<String,Map<String,String>>(),new HashMap<String,Map<String,Map<String,String>>>(),bpClusterConfig);
  bpGroup1Config=new Configuration(new HashMap<String,Map<String,String>>(),new HashMap<String,Map<String,Map<String,String>>>(),topoClusterConfig);
  bpGroup2Config=new Configuration(new HashMap<String,Map<String,String>>(),new HashMap<String,Map<String,Map<String,String>>>(),topoClusterConfig);
  topoGroup1Config=new Configuration(new HashMap<String,Map<String,String>>(),new HashMap<String,Map<String,Map<String,String>>>(),bpGroup1Config);
  topoGroup2Config=new Configuration(new HashMap<String,Map<String,String>>(),new HashMap<String,Map<String,Map<String,String>>>(),bpGroup2Config);
  service1RequiredPwdConfigs.clear();
  service2RequiredPwdConfigs.clear();
  service3RequiredPwdConfigs.clear();
  hostGroups.put("group1",group1);
  hostGroups.put("group2",group2);
  group1Components.add("component1");
  group1Components.add("component2");
  group1Components.add("component3");
  group2Components.add("component1");
  group2Components.add("component4");
  service1Components.add("component1");
  service1Components.add("component2");
  service2Components.add("component3");
  service3Components.add("component4");
  HostGroupInfo hostGroup1Info=new HostGroupInfo("group1");
  hostGroup1Info.setConfiguration(topoGroup1Config);
  HostGroupInfo hostGroup2Info=new HostGroupInfo("group2");
  hostGroup2Info.setConfiguration(topoGroup2Config);
  hostGroupInfo.put("group1",hostGroup1Info);
  hostGroupInfo.put("group2",hostGroup2Info);
  expect(topology.getConfiguration()).andReturn(topoClusterConfig).anyTimes();
  expect(topology.getBlueprint()).andReturn(blueprint).anyTimes();
  expect(topology.getHostGroupInfo()).andReturn(hostGroupInfo).anyTimes();
  expect(blueprint.getHostGroups()).andReturn(hostGroups).anyTimes();
  expect(blueprint.getHostGroup("group1")).andReturn(group1).anyTimes();
  expect(blueprint.getHostGroup("group2")).andReturn(group2).anyTimes();
  expect(blueprint.getStack()).andReturn(stack).anyTimes();
  expect(group1.getComponents()).andReturn(group1Components).anyTimes();
  expect(group2.getComponents()).andReturn(group2Components).anyTimes();
  expect(group1.getComponents("service1")).andReturn(Arrays.asList("component1","component2")).anyTimes();
  expect(group1.getComponents("service2")).andReturn(Arrays.asList("component3")).anyTimes();
  expect(group1.getComponents("service3")).andReturn(Collections.<String>emptySet()).anyTimes();
  expect(group2.getComponents("service1")).andReturn(Arrays.asList("component1")).anyTimes();
  expect(group2.getComponents("service2")).andReturn(Collections.<String>emptySet()).anyTimes();
  expect(group2.getComponents("service3")).andReturn(Arrays.asList("component4")).anyTimes();
  expect(stack.getServiceForComponent("component1")).andReturn("service1").anyTimes();
  expect(stack.getServiceForComponent("component2")).andReturn("service1").anyTimes();
  expect(stack.getServiceForComponent("component3")).andReturn("service2").anyTimes();
  expect(stack.getServiceForComponent("component4")).andReturn("service3").anyTimes();
  expect(stack.getRequiredConfigurationProperties("service1",PropertyInfo.PropertyType.PASSWORD)).andReturn(service1RequiredPwdConfigs).anyTimes();
  expect(stack.getRequiredConfigurationProperties("service2",PropertyInfo.PropertyType.PASSWORD)).andReturn(service2RequiredPwdConfigs).anyTimes();
  expect(stack.getRequiredConfigurationProperties("service3",PropertyInfo.PropertyType.PASSWORD)).andReturn(service3RequiredPwdConfigs).anyTimes();
  replay(topology,blueprint,stack,group1,group2);
}
