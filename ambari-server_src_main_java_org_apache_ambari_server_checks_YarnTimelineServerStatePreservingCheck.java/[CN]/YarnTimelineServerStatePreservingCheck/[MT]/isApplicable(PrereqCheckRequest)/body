{
  if (!super.isApplicable(request,Arrays.asList("YARN"),true)) {
    return false;
  }
  final Cluster cluster=clustersProvider.get().getCluster(request.getClusterName());
  String minApplicableStackVersion=null;
  PrerequisiteCheckConfig prerequisiteCheckConfig=request.getPrerequisiteCheckConfig();
  Map<String,String> checkProperties=null;
  if (prerequisiteCheckConfig != null) {
    checkProperties=prerequisiteCheckConfig.getCheckProperties(this.getClass().getName());
  }
  if (checkProperties != null && checkProperties.containsKey(MIN_APPLICABLE_STACK_VERSION_PROPERTY_NAME)) {
    minApplicableStackVersion=checkProperties.get(MIN_APPLICABLE_STACK_VERSION_PROPERTY_NAME);
  }
  if (minApplicableStackVersion != null && !minApplicableStackVersion.isEmpty()) {
    String[] minStack=minApplicableStackVersion.split("-");
    if (minStack.length == 2) {
      String minStackName=minStack[0];
      String minStackVersion=minStack[1];
      String stackName=cluster.getCurrentStackVersion().getStackName();
      if (minStackName.equals(stackName)) {
        String currentClusterRepositoryVersion=cluster.getCurrentClusterVersion().getRepositoryVersion().getVersion();
        return VersionUtils.compareVersions(currentClusterRepositoryVersion,minStackVersion) >= 0;
      }
    }
  }
  return true;
}
