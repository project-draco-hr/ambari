'\n    jinja2.nodes\n    ~~~~~~~~~~~~\n\n    This module implements additional nodes derived from the ast base node.\n\n    It also provides some node tree helper functions like `in_lineno` and\n    `get_nodes` used by the parser and translator in order to normalize\n    python and jinja nodes.\n\n    :copyright: (c) 2010 by the Jinja Team.\n    :license: BSD, see LICENSE for more details.\n'
import operator
from itertools import chain, izip
from collections import deque
from jinja2.utils import Markup, MethodType, FunctionType
_context_function_types = (FunctionType, MethodType)
_binop_to_func = {'*': operator.mul, '/': operator.truediv, '//': operator.floordiv, '**': operator.pow, '%': operator.mod, '+': operator.add, '-': operator.sub, }
_uaop_to_func = {'not': operator.not_, '+': operator.pos, '-': operator.neg, }
_cmpop_to_func = {'eq': operator.eq, 'ne': operator.ne, 'gt': operator.gt, 'gteq': operator.ge, 'lt': operator.lt, 'lteq': operator.le, 'in': (lambda a, b: (a in b)), 'notin': (lambda a, b: (a not in b)), }
if __debug__:
    Operand.__doc__ += ('\nThe following operators are available: ' + ', '.join(sorted((('``%s``' % x) for x in ((set(_binop_to_func) | set(_uaop_to_func)) | set(_cmpop_to_func))))))
NodeType.__new__ = staticmethod(_failing_new)
del _failing_new
