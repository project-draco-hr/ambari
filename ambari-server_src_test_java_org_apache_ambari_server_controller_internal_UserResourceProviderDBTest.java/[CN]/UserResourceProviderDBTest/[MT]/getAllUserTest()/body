{
  Authentication authentication=TestAuthenticationFactory.createAdministrator();
  SecurityContextHolder.getContext().setAuthentication(authentication);
  List<String> userNames=Arrays.asList("user1","uSer2","User3","useR4");
  for (  String userName : userNames) {
    Map<String,Object> requestProperties=new HashMap<String,Object>();
    requestProperties.put(UserResourceProvider.USER_USERNAME_PROPERTY_ID,userName);
    requestProperties.put(UserResourceProvider.USER_PASSWORD_PROPERTY_ID,"password");
    requestProperties.put(UserResourceProvider.USER_ADMIN_PROPERTY_ID,false);
    requestProperties.put(UserResourceProvider.USER_ACTIVE_PROPERTY_ID,true);
    Request request=PropertyHelper.getCreateRequest(Collections.singleton(requestProperties),null);
    RequestStatus requestStatus=userResourceProvider.createResources(request);
    assertNotNull(requestStatus);
  }
  Request getRequest=PropertyHelper.getReadRequest(new HashSet<String>(Arrays.asList("Users")));
  Set<Resource> resources=userResourceProvider.getResources(getRequest,null);
  assertEquals(resources.size(),userNames.size());
  for (  Resource resource : resources) {
    String userName=resource.getPropertyValue(UserResourceProvider.USER_USERNAME_PROPERTY_ID).toString();
    assertTrue(userNames.contains(userName));
  }
  for (  String userName : userNames) {
    Predicate predicate=new PredicateBuilder().property(UserResourceProvider.USER_USERNAME_PROPERTY_ID).equals(userName).toPredicate();
    RequestStatus requestStatus=userResourceProvider.deleteResources(null,predicate);
    assertNotNull(requestStatus);
  }
  resources=userResourceProvider.getResources(getRequest,null);
  assertEquals(resources.size(),0);
}
