{
  Authentication authentication=TestAuthenticationFactory.createAdministrator();
  SecurityContextHolder.getContext().setAuthentication(authentication);
  Map<String,Object> requestProperties=new HashMap<String,Object>();
  requestProperties.put(UserResourceProvider.USER_USERNAME_PROPERTY_ID,"abcd");
  requestProperties.put(UserResourceProvider.USER_PASSWORD_PROPERTY_ID,"password");
  requestProperties.put(UserResourceProvider.USER_ADMIN_PROPERTY_ID,false);
  requestProperties.put(UserResourceProvider.USER_ACTIVE_PROPERTY_ID,true);
  Request request=PropertyHelper.getCreateRequest(Collections.singleton(requestProperties),null);
  RequestStatus requestStatus=userResourceProvider.createResources(request);
  assertNotNull(requestStatus);
  requestProperties.put(UserResourceProvider.USER_USERNAME_PROPERTY_ID,"ABCD");
  request=PropertyHelper.getCreateRequest(Collections.singleton(requestProperties),null);
  try {
    requestStatus=userResourceProvider.createResources(request);
    assertTrue("Should fail with user exists",false);
  }
 catch (  Exception ex) {
    assertTrue(ex.getMessage().contains("User abcd already exists"));
  }
  Predicate predicate=new PredicateBuilder().property(UserResourceProvider.USER_USERNAME_PROPERTY_ID).equals("abcd").toPredicate();
  requestStatus=userResourceProvider.deleteResources(request,predicate);
  assertNotNull(requestStatus);
  Request getRequest=PropertyHelper.getReadRequest(new HashSet<String>(Arrays.asList("Users")));
  Set<Resource> resources=userResourceProvider.getResources(getRequest,null);
  assertEquals(resources.size(),0);
}
