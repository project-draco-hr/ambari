{
  String serviceName=sch.getServiceName();
  String componentName=sch.getServiceComponentName();
  StackId stackId=cluster.getDesiredStackVersion();
  ServiceInfo serviceInfo=ambariMetaInfo.getService(stackId.getStackName(),stackId.getStackVersion(),serviceName);
  ComponentInfo componentInfo=ambariMetaInfo.getComponent(stackId.getStackName(),stackId.getStackVersion(),serviceName,componentName);
  StackInfo stackInfo=ambariMetaInfo.getStack(stackId.getStackName(),stackId.getStackVersion());
  Map<String,Map<String,String>> configurations=new TreeMap<String,Map<String,String>>();
  Map<String,Map<String,Map<String,String>>> configurationAttributes=new TreeMap<String,Map<String,Map<String,String>>>();
  Collection<Config> clusterConfigs=cluster.getAllConfigs();
  Map<String,Map<String,String>> allConfigTags=configHelper.getEffectiveDesiredTags(cluster,hostname);
  for (  Config clusterConfig : clusterConfigs) {
    if (!clusterConfig.getType().endsWith("-env")) {
      continue;
    }
    if (clusterConfig != null) {
      Map<String,String> props=new HashMap<String,String>(clusterConfig.getProperties());
      Map<String,Map<String,String>> configTags=new HashMap<String,Map<String,String>>();
      for (      Map.Entry<String,Map<String,String>> entry : allConfigTags.entrySet()) {
        if (entry.getKey().equals(clusterConfig.getType())) {
          configTags.put(clusterConfig.getType(),entry.getValue());
        }
      }
      Map<String,Map<String,String>> properties=configHelper.getEffectiveConfigProperties(cluster,configTags);
      if (!properties.isEmpty()) {
        for (        Map<String,String> propertyMap : properties.values()) {
          props.putAll(propertyMap);
        }
      }
      configurations.put(clusterConfig.getType(),props);
      Map<String,Map<String,String>> attrs=new TreeMap<String,Map<String,String>>();
      configHelper.cloneAttributesMap(clusterConfig.getPropertiesAttributes(),attrs);
      Map<String,Map<String,Map<String,String>>> attributes=configHelper.getEffectiveConfigAttributes(cluster,configTags);
      for (      Map<String,Map<String,String>> attributesMap : attributes.values()) {
        configHelper.cloneAttributesMap(attributesMap,attrs);
      }
      configurationAttributes.put(clusterConfig.getType(),attrs);
    }
  }
  StatusCommand statusCmd=new StatusCommand();
  statusCmd.setClusterName(cluster.getClusterName());
  statusCmd.setServiceName(serviceName);
  statusCmd.setComponentName(componentName);
  statusCmd.setConfigurations(configurations);
  statusCmd.setConfigurationAttributes(configurationAttributes);
  statusCmd.setHostname(hostname);
  statusCmd.setDesiredState(sch.getDesiredState());
  statusCmd.setHasStaleConfigs(configHelper.isStaleConfigs(sch));
  if (getAgentRequests().shouldSendExecutionDetails(hostname,componentName)) {
    LOG.info(componentName + " is at " + sch.getState()+ " adding more payload per agent ask");
    statusCmd.setPayloadLevel(StatusCommand.StatusCommandPayload.EXECUTION_COMMAND);
  }
  Map<String,String> commandParams=statusCmd.getCommandParams();
  String commandTimeout=configuration.getDefaultAgentTaskTimeout(false);
  CommandScriptDefinition script=componentInfo.getCommandScript();
  if (serviceInfo.getSchemaVersion().equals(AmbariMetaInfo.SCHEMA_VERSION_2)) {
    if (script != null) {
      commandParams.put(SCRIPT,script.getScript());
      commandParams.put(SCRIPT_TYPE,script.getScriptType().toString());
      if (script.getTimeout() > 0) {
        commandTimeout=String.valueOf(script.getTimeout());
      }
    }
 else {
      String message=String.format("Component %s of service %s has not " + "command script defined",componentName,serviceName);
      throw new AmbariException(message);
    }
  }
  commandParams.put(COMMAND_TIMEOUT,commandTimeout);
  commandParams.put(SERVICE_PACKAGE_FOLDER,serviceInfo.getServicePackageFolder());
  commandParams.put(HOOKS_FOLDER,stackInfo.getStackHooksFolder());
  Map<String,String> hostLevelParams=statusCmd.getHostLevelParams();
  hostLevelParams.put(JDK_LOCATION,ambariManagementController.getJdkResourceUrl());
  hostLevelParams.put(STACK_NAME,stackId.getStackName());
  hostLevelParams.put(STACK_VERSION,stackId.getStackVersion());
  if (statusCmd.getPayloadLevel() == StatusCommand.StatusCommandPayload.EXECUTION_COMMAND) {
    ExecutionCommand ec=ambariManagementController.getExecutionCommand(cluster,sch,RoleCommand.START);
    statusCmd.setExecutionCommand(ec);
    LOG.debug(componentName + " has more payload for execution command");
  }
  return statusCmd;
}
