{
  String serviceName=sch.getServiceName();
  String componentName=sch.getServiceComponentName();
  Service service=cluster.getService(sch.getServiceName());
  ServiceComponent sc=service.getServiceComponent(componentName);
  StackId stackId=cluster.getDesiredStackVersion();
  ServiceInfo serviceInfo=ambariMetaInfo.getServiceInfo(stackId.getStackName(),stackId.getStackVersion(),serviceName);
  ComponentInfo componentInfo=ambariMetaInfo.getComponent(stackId.getStackName(),stackId.getStackVersion(),serviceName,componentName);
  Map<String,Map<String,String>> configurations=new TreeMap<String,Map<String,String>>();
  Config clusterConfig=cluster.getDesiredConfigByType(GLOBAL);
  if (clusterConfig != null) {
    Map<String,String> props=new HashMap<String,String>(clusterConfig.getProperties());
    Map<String,Map<String,String>> allConfigTags=configHelper.getEffectiveDesiredTags(cluster,hostname);
    Map<String,Map<String,String>> configTags=new HashMap<String,Map<String,String>>();
    for (    Map.Entry<String,Map<String,String>> entry : allConfigTags.entrySet()) {
      if (entry.getKey().equals(GLOBAL)) {
        configTags.put(GLOBAL,entry.getValue());
      }
    }
    Map<String,Map<String,String>> properties=configHelper.getEffectiveConfigProperties(cluster,configTags);
    if (!properties.isEmpty()) {
      for (      Map<String,String> propertyMap : properties.values()) {
        props.putAll(propertyMap);
      }
    }
    configurations.put(GLOBAL,props);
  }
  StatusCommand statusCmd=new StatusCommand();
  statusCmd.setClusterName(cluster.getClusterName());
  statusCmd.setServiceName(serviceName);
  statusCmd.setComponentName(componentName);
  statusCmd.setConfigurations(configurations);
  Map<String,String> commandParams=statusCmd.getCommandParams();
  commandParams.put(SCHEMA_VERSION,serviceInfo.getSchemaVersion());
  String commandTimeout=ExecutionCommand.KeyNames.COMMAND_TIMEOUT_DEFAULT;
  CommandScriptDefinition script=componentInfo.getCommandScript();
  if (serviceInfo.getSchemaVersion().equals(AmbariMetaInfo.SCHEMA_VERSION_2)) {
    if (script != null) {
      commandParams.put(SCRIPT,script.getScript());
      commandParams.put(SCRIPT_TYPE,script.getScriptType().toString());
      commandTimeout=String.valueOf(script.getTimeout());
    }
 else {
      String message=String.format("Component %s of service %s has not " + "command script defined",componentName,serviceName);
      throw new AmbariException(message);
    }
  }
  commandParams.put(COMMAND_TIMEOUT,commandTimeout);
  commandParams.put(SERVICE_METADATA_FOLDER,serviceInfo.getServiceMetadataFolder());
  Map<String,String> hostLevelParams=statusCmd.getHostLevelParams();
  hostLevelParams.put(STACK_NAME,stackId.getStackName());
  hostLevelParams.put(STACK_VERSION,stackId.getStackVersion());
  return statusCmd;
}
