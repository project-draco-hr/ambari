def _get_single_version_from_stack_select():
    '\n  Call "hdp-select versions" and return the version string if only one version is available.\n  :return: Returns a version string if successful, and None otherwise.\n  '
    tmpfile = tempfile.NamedTemporaryFile()
    tmp_dir = Script.get_tmp_dir()
    tmp_file = os.path.join(tmp_dir, 'copy_tarball_out.txt')
    stack_version = None
    out = None
    get_stack_versions_cmd = '/usr/bin/hdp-select versions > {0}'.format(tmp_file)
    try:
        try:
            (code, stdoutdata) = shell.call(get_stack_versions_cmd, logoutput=True)
            with open(tmp_file, 'r+') as file:
                out = file.read()
        except Exception as e:
            Logger.logger.exception('Could not parse output of {0}. Error: {1}'.format(str(tmp_file), str(e)))
    finally:
        try:
            if os.path.exists(tmp_file):
                os.remove(tmp_file)
        except Exception as e:
            Logger.logger.exception('Could not remove file {0}. Error: {1}'.format(str(tmp_file), str(e)))
    if ((code != 0) or (out is None) or (out == '')):
        Logger.error("Could not verify HDP version by calling '{0}'. Return Code: {1}, Output: {2}.".format(get_stack_versions_cmd, str(code), str(out)))
        return None
    matches = re.findall('([\\d\\.]+\\-\\d+)', out)
    if (matches and (len(matches) == 1)):
        stack_version = matches[0]
    elif (matches and (len(matches) > 1)):
        Logger.error('Found multiple matches for HDP version, cannot identify the correct one from: {0}'.format(', '.join(matches)))
    return stack_version
