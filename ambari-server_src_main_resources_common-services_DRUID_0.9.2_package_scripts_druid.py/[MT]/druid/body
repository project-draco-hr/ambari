def druid(upgrade_type=None, nodeType=None):
    import params
    ensure_base_directories()
    File(format('{params.druid_conf_dir}/druid-env.sh'), owner=params.druid_user, content=InlineTemplate(params.druid_env_sh_template))
    druid_common_config = mutable_config_dict(params.config['configurations']['druid-common'])
    druid_common_config['druid.host'] = params.hostname
    druid_common_config['druid.extensions.directory'] = params.druid_extensions_dir
    druid_common_config['druid.extensions.hadoopDependenciesDir'] = params.druid_hadoop_dependencies_dir
    druid_common_config['druid.selectors.indexing.serviceName'] = params.config['configurations']['druid-overlord']['druid.service']
    druid_common_config['druid.selectors.coordinator.serviceName'] = params.config['configurations']['druid-coordinator']['druid.service']
    if ('derby' == druid_common_config['druid.metadata.storage.type']):
        del druid_common_config['druid.metadata.storage.connector.user']
        del druid_common_config['druid.metadata.storage.connector.password']
    druid_env_config = mutable_config_dict(params.config['configurations']['druid-env'])
    PropertiesFile('common.runtime.properties', dir=params.druid_common_conf_dir, properties=druid_common_config, owner=params.druid_user, group=params.user_group)
    Logger.info('Created common.runtime.properties')
    File(format('{params.druid_common_conf_dir}/druid-log4j.xml'), mode=420, owner=params.druid_user, group=params.user_group, content=InlineTemplate(params.log4j_props))
    Logger.info('Created log4j file')
    File('/etc/logrotate.d/druid', mode=420, owner='root', group='root', content=InlineTemplate(params.logrotate_props))
    Logger.info('Created log rotate file')
    if ('core-site' in params.config['configurations']):
        XmlConfig('core-site.xml', conf_dir=params.druid_common_conf_dir, configurations=params.config['configurations']['core-site'], configuration_attributes=params.config['configuration_attributes']['core-site'], owner=params.druid_user, group=params.user_group)
    if ('mapred-site' in params.config['configurations']):
        XmlConfig('mapred-site.xml', conf_dir=params.druid_common_conf_dir, configurations=params.config['configurations']['mapred-site'], configuration_attributes=params.config['configuration_attributes']['mapred-site'], owner=params.druid_user, group=params.user_group)
    if ('yarn-site' in params.config['configurations']):
        XmlConfig('yarn-site.xml', conf_dir=params.druid_common_conf_dir, configurations=params.config['configurations']['yarn-site'], configuration_attributes=params.config['configuration_attributes']['yarn-site'], owner=params.druid_user, group=params.user_group)
    if ('hdfs-site' in params.config['configurations']):
        XmlConfig('hdfs-site.xml', conf_dir=params.druid_common_conf_dir, configurations=params.config['configurations']['hdfs-site'], configuration_attributes=params.config['configuration_attributes']['hdfs-site'], owner=params.druid_user, group=params.user_group)
    for node_type in ['coordinator', 'overlord', 'historical', 'broker', 'middleManager', 'router']:
        node_config_dir = format('{params.druid_conf_dir}/{node_type}')
        node_type_lowercase = node_type.lower()
        node_config = mutable_config_dict(params.config['configurations'][format('druid-{node_type_lowercase}')])
        PropertiesFile('runtime.properties', dir=node_config_dir, properties=node_config, owner=params.druid_user, group=params.user_group)
        Logger.info(format('Created druid-{node_type_lowercase} runtime.properties'))
        File(format('{node_config_dir}/jvm.config'), owner=params.druid_user, group=params.user_group, content=InlineTemplate('-server \n-Xms{{node_heap_memory}}m \n-Xmx{{node_heap_memory}}m \n-XX:MaxDirectMemorySize={{node_direct_memory}}m \n-Dlog4j.configurationFile={{log4j_config_file}} \n-Dlog4j.debug \n{{node_jvm_opts}}', node_heap_memory=druid_env_config[format('druid.{node_type_lowercase}.jvm.heap.memory')], log4j_config_file=format('{params.druid_common_conf_dir}/druid-log4j.xml'), node_direct_memory=druid_env_config[format('druid.{node_type_lowercase}.jvm.direct.memory')], node_jvm_opts=druid_env_config[format('druid.{node_type_lowercase}.jvm.opts')]))
        Logger.info(format('Created druid-{node_type_lowercase} jvm.config'))
    ensure_hadoop_directories()
    pulldeps()
