{
  StackId stackId=new StackId("HDP","2.2");
  StackEntity stack=new StackEntity();
  stack.setStackName(stackId.getStackName());
  stack.setStackVersion(stackId.getStackVersion());
  RepositoryVersionEntity rve=new RepositoryVersionEntity(stack,sourceRepositoryVersion,sourceRepositoryVersion,"rhel6");
  final Cluster cluster=Mockito.mock(Cluster.class);
  Mockito.when(cluster.getClusterName()).thenReturn(clusterName);
  final long clusterId=1L;
  Mockito.when(cluster.getClusterId()).thenReturn(clusterId);
  PrereqCheckRequest checkRequest=new PrereqCheckRequest(clusterName);
  checkRequest.setRepositoryVersion(sourceRepositoryVersion);
  checkRequest.setSourceStackId(sourceStackId);
  checkRequest.setTargetStackId(targetStackId);
  List<UpgradeEntity> upgrades=new ArrayList<>();
  Mockito.when(upgradeDAO.findAll()).thenReturn(upgrades);
  Mockito.when(clusters.getCluster(clusterName)).thenReturn(cluster);
  PrerequisiteCheck check=new PrerequisiteCheck(null,null);
  puc.perform(check,checkRequest);
  Assert.assertEquals(PrereqCheckStatus.PASS,check.getStatus());
  final long upgradeRequestId=1L;
  RequestEntity upgradeRequest=Mockito.mock(RequestEntity.class);
  Mockito.when(upgradeRequest.getRequestId()).thenReturn(upgradeRequestId);
  Mockito.when(upgradeRequest.getStartTime()).thenReturn(System.currentTimeMillis() - 1000);
  Mockito.when(requestDAO.findByPK(upgradeRequestId)).thenReturn(upgradeRequest);
  UpgradeEntity upgrade=Mockito.mock(UpgradeEntity.class);
  Mockito.when(upgrade.getClusterId()).thenReturn(clusterId);
  Mockito.when(upgrade.getRequestId()).thenReturn(upgradeRequestId);
  Mockito.when(upgrade.getDirection()).thenReturn(Direction.UPGRADE);
  Mockito.when(upgrade.getFromVersion()).thenReturn(sourceRepositoryVersion);
  Mockito.when(upgrade.getToVersion()).thenReturn(destRepositoryVersion);
  upgrades.add(upgrade);
  Mockito.when(upgradeDAO.findAll()).thenReturn(upgrades);
  check=new PrerequisiteCheck(null,null);
  puc.perform(check,checkRequest);
  Assert.assertEquals(PrereqCheckStatus.PASS,check.getStatus());
  final long downgradeRequestId=2L;
  RequestEntity downgradeRequest=Mockito.mock(RequestEntity.class);
  Mockito.when(downgradeRequest.getRequestId()).thenReturn(downgradeRequestId);
  Mockito.when(downgradeRequest.getStartTime()).thenReturn(System.currentTimeMillis() - 500);
  Mockito.when(requestDAO.findByPK(downgradeRequestId)).thenReturn(downgradeRequest);
  UpgradeEntity downgrade=Mockito.mock(UpgradeEntity.class);
  Mockito.when(downgrade.getClusterId()).thenReturn(clusterId);
  Mockito.when(downgrade.getRequestId()).thenReturn(downgradeRequestId);
  Mockito.when(downgrade.getDirection()).thenReturn(Direction.DOWNGRADE);
  Mockito.when(downgrade.getFromVersion()).thenReturn(sourceRepositoryVersion);
  Mockito.when(downgrade.getToVersion()).thenReturn(sourceRepositoryVersion);
  upgrades.clear();
  upgrades.add(upgrade);
  upgrades.add(downgrade);
  Mockito.when(upgradeDAO.findAll()).thenReturn(upgrades);
  check=new PrerequisiteCheck(null,null);
  puc.perform(check,checkRequest);
  Assert.assertEquals(PrereqCheckStatus.PASS,check.getStatus());
  HostRoleCommandEntity finalizeCommand=Mockito.mock(HostRoleCommandEntity.class);
  Mockito.when(finalizeCommand.getStatus()).thenReturn(HostRoleStatus.COMPLETED);
  Mockito.when(finalizeCommand.getTaskId()).thenReturn(1000L);
  List<HostRoleCommandEntity> commands=new ArrayList<>();
  commands.add(finalizeCommand);
  Mockito.when(hrcDAO.findSortedCommandsByRequestIdAndCustomCommandName(upgradeRequestId,PreviousUpgradeCompleted.FINALIZE_ACTION_CLASS_NAME)).thenReturn(commands);
  upgrades.clear();
  upgrades.add(upgrade);
  Mockito.when(upgradeDAO.findAll()).thenReturn(upgrades);
  check=new PrerequisiteCheck(null,null);
  puc.perform(check,checkRequest);
  Assert.assertEquals(PrereqCheckStatus.PASS,check.getStatus());
  Mockito.when(finalizeCommand.getStatus()).thenReturn(HostRoleStatus.ABORTED);
  upgrades.clear();
  upgrades.add(upgrade);
  Mockito.when(upgradeDAO.findAll()).thenReturn(upgrades);
  check=new PrerequisiteCheck(null,null);
  puc.perform(check,checkRequest);
  Assert.assertEquals(PrereqCheckStatus.FAIL,check.getStatus());
}
