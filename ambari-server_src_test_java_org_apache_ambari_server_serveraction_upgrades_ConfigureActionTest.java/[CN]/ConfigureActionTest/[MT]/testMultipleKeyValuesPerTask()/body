{
  makeUpgradeCluster();
  Cluster c=m_injector.getInstance(Clusters.class).getCluster("c1");
  assertEquals(1,c.getConfigsByType("zoo.cfg").size());
  c.setCurrentStackVersion(HDP_211_STACK);
  c.setDesiredStackVersion(HDP_220_STACK);
  ConfigFactory cf=m_injector.getInstance(ConfigFactory.class);
  Config config=cf.createNew(c,"zoo.cfg",new HashMap<String,String>(){
{
      put("fooKey","barValue");
    }
  }
,new HashMap<String,Map<String,String>>());
  config.setTag("version2");
  config.persist();
  c.addConfig(config);
  c.addDesiredConfig("user",Collections.singleton(config));
  assertEquals(2,c.getConfigsByType("zoo.cfg").size());
  List<ConfigurationKeyValue> configurations=new ArrayList<ConfigureTask.ConfigurationKeyValue>();
  ConfigurationKeyValue fooKey2=new ConfigurationKeyValue();
  configurations.add(fooKey2);
  fooKey2.key="fooKey2";
  fooKey2.value="barValue2";
  ConfigurationKeyValue fooKey3=new ConfigurationKeyValue();
  configurations.add(fooKey3);
  fooKey3.key="fooKey3";
  fooKey3.value="barValue3";
  fooKey3.mask=true;
  Map<String,String> commandParams=new HashMap<String,String>();
  commandParams.put("upgrade_direction","upgrade");
  commandParams.put("version",HDP_2_2_0_1);
  commandParams.put("clusterName","c1");
  commandParams.put(ConfigureTask.PARAMETER_CONFIG_TYPE,"zoo.cfg");
  commandParams.put(ConfigureTask.PARAMETER_KEY_VALUE_PAIRS,new Gson().toJson(configurations));
  ExecutionCommand executionCommand=new ExecutionCommand();
  executionCommand.setCommandParams(commandParams);
  executionCommand.setClusterName("c1");
  HostRoleCommand hostRoleCommand=hostRoleCommandFactory.create(null,null,null,null);
  hostRoleCommand.setExecutionCommandWrapper(new ExecutionCommandWrapper(executionCommand));
  ConfigureAction action=m_injector.getInstance(ConfigureAction.class);
  action.setExecutionCommand(executionCommand);
  action.setHostRoleCommand(hostRoleCommand);
  CommandReport report=action.execute(null);
  assertNotNull(report);
  assertEquals(2,c.getConfigsByType("zoo.cfg").size());
  config=c.getDesiredConfigByType("zoo.cfg");
  assertNotNull(config);
  assertEquals("barValue",config.getProperties().get("fooKey"));
  assertEquals("barValue2",config.getProperties().get("fooKey2"));
  assertEquals("barValue3",config.getProperties().get("fooKey3"));
  assertTrue(report.getStdOut().contains("******"));
}
