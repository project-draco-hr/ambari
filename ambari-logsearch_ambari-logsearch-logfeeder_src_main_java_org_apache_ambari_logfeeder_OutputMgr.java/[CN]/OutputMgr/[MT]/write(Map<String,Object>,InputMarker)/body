{
  Input input=inputMarker.input;
  for (  Map.Entry<String,String> entry : input.getContextFields().entrySet()) {
    if (jsonObj.get(entry.getKey()) == null) {
      jsonObj.put(entry.getKey(),entry.getValue());
    }
  }
  if (jsonObj.get("type") == null) {
    jsonObj.put("type",input.getStringValue("type"));
  }
  if (jsonObj.get("path") == null && input.getFilePath() != null) {
    jsonObj.put("path",input.getFilePath());
  }
  if (jsonObj.get("path") == null && input.getStringValue("path") != null) {
    jsonObj.put("path",input.getStringValue("path"));
  }
  if (jsonObj.get("host") == null && LogFeederUtil.hostName != null) {
    jsonObj.put("host",LogFeederUtil.hostName);
  }
  if (jsonObj.get("ip") == null && LogFeederUtil.ipAddress != null) {
    jsonObj.put("ip",LogFeederUtil.ipAddress);
  }
  if (input.isUseEventMD5() || input.isGenEventMD5()) {
    String prefix="";
    Object logtimeObj=jsonObj.get("logtime");
    if (logtimeObj != null) {
      if (logtimeObj instanceof Date) {
        prefix="" + ((Date)logtimeObj).getTime();
      }
 else {
        prefix=logtimeObj.toString();
      }
    }
    Long eventMD5=LogFeederUtil.genHash(LogFeederUtil.getGson().toJson(jsonObj));
    if (input.isGenEventMD5()) {
      jsonObj.put("event_md5",prefix + eventMD5.toString());
    }
    if (input.isUseEventMD5()) {
      jsonObj.put("id",prefix + eventMD5.toString());
    }
  }
  jsonObj.put("seq_num",new Long(doc_counter++));
  if (jsonObj.get("id") == null) {
    jsonObj.put("id",UUID.randomUUID().toString());
  }
  if (jsonObj.get("event_count") == null) {
    jsonObj.put("event_count",new Integer(1));
  }
  if (inputMarker.lineNumber > 0) {
    jsonObj.put("logfile_line_number",new Integer(inputMarker.lineNumber));
  }
  if (jsonObj.containsKey("log_message")) {
    String logMessage=(String)jsonObj.get("log_message");
    if (logMessage != null && logMessage.getBytes().length > MAX_OUTPUT_SIZE) {
      messageTruncateMetric.count++;
      final String LOG_MESSAGE_KEY=this.getClass().getSimpleName() + "_MESSAGESIZE";
      LogFeederUtil.logErrorMessageByInterval(LOG_MESSAGE_KEY,"Message is too big. size=" + logMessage.getBytes().length + ", input="+ input.getShortDescription()+ ". Truncating to "+ MAX_OUTPUT_SIZE+ ", first upto 100 characters="+ LogFeederUtil.subString(logMessage,100),null,logger,Level.WARN);
      logMessage=new String(logMessage.getBytes(),0,MAX_OUTPUT_SIZE);
      jsonObj.put("log_message",logMessage);
      @SuppressWarnings("unchecked") List<String> tagsList=(List<String>)jsonObj.get("tags");
      if (tagsList == null) {
        tagsList=new ArrayList<String>();
        jsonObj.put("tags",tagsList);
      }
      tagsList.add("error_message_truncated");
    }
    if (addMessageMD5) {
      jsonObj.put("message_md5","" + LogFeederUtil.genHash(logMessage));
    }
  }
  if (FilterLogData.INSTANCE.isAllowed(jsonObj)) {
    for (    Output output : input.getOutputList()) {
      try {
        output.write(jsonObj,inputMarker);
      }
 catch (      Exception e) {
        logger.error("Error writing. to " + output.getShortDescription(),e);
      }
    }
  }
}
