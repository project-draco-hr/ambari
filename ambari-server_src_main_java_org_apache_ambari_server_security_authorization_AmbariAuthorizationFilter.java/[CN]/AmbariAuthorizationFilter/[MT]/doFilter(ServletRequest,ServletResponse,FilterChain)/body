{
  HttpServletRequest httpRequest=(HttpServletRequest)request;
  HttpServletResponse httpResponse=(HttpServletResponse)response;
  String requestURI=httpRequest.getRequestURI();
  SecurityContext context=getSecurityContext();
  Authentication authentication=context.getAuthentication();
  if (authentication == null || !authentication.isAuthenticated()) {
    String token=httpRequest.getHeader(INTERNAL_TOKEN_HEADER);
    if (token != null) {
      context.setAuthentication(new InternalAuthenticationToken(token));
    }
  }
 else {
    boolean authorized=false;
    for (    GrantedAuthority grantedAuthority : authentication.getAuthorities()) {
      if (grantedAuthority instanceof AmbariGrantedAuthority) {
        AmbariGrantedAuthority ambariGrantedAuthority=(AmbariGrantedAuthority)grantedAuthority;
        PrivilegeEntity privilegeEntity=ambariGrantedAuthority.getPrivilegeEntity();
        Integer permissionId=privilegeEntity.getPermission().getId();
        if (permissionId.equals(PermissionEntity.AMBARI_ADMIN_PERMISSION)) {
          authorized=true;
          break;
        }
        if (requestURI.matches(API_CLUSTERS_ALL_PATTERN)) {
          if (permissionId.equals(PermissionEntity.CLUSTER_READ_PERMISSION) || permissionId.equals(PermissionEntity.CLUSTER_OPERATE_PERMISSION)) {
            authorized=true;
            break;
          }
        }
 else         if (STACK_ADVISOR_REGEX.matcher(requestURI).matches()) {
          if (permissionId.equals(PermissionEntity.CLUSTER_OPERATE_PERMISSION)) {
            authorized=true;
            break;
          }
        }
 else         if (requestURI.matches(API_VIEWS_ALL_PATTERN)) {
          if (permissionId.equals(PermissionEntity.VIEW_USE_PERMISSION)) {
            authorized=true;
            break;
          }
        }
 else         if (requestURI.matches(API_PERSIST_ALL_PATTERN)) {
          if (permissionId.equals(PermissionEntity.CLUSTER_OPERATE_PERMISSION)) {
            authorized=true;
            break;
          }
        }
      }
    }
    if (!authorized && requestURI.matches(VIEWS_CONTEXT_PATH_PATTERN)) {
      final ViewInstanceVersionDTO dto=parseViewInstanceInfo(requestURI);
      authorized=getViewRegistry().checkPermission(dto.getViewName(),dto.getVersion(),dto.getInstanceName(),true);
    }
    if (!authorized && requestURI.matches(API_USERS_USERNAME_PATTERN)) {
      final SecurityContext securityContext=getSecurityContext();
      final String currentUserName=securityContext.getAuthentication().getName();
      final String urlUserName=parseUserName(requestURI);
      authorized=currentUserName.equalsIgnoreCase(urlUserName);
    }
    if (!authorized && (!httpRequest.getMethod().equals("GET") || requestURI.matches(VIEWS_CONTEXT_ALL_PATTERN) || requestURI.matches(API_USERS_ALL_PATTERN)|| requestURI.matches(API_GROUPS_ALL_PATTERN)|| requestURI.matches(API_LDAP_SYNC_EVENTS_ALL_PATTERN))) {
      httpResponse.setHeader("WWW-Authenticate","Basic realm=\"" + realm + "\"");
      httpResponse.sendError(HttpServletResponse.SC_FORBIDDEN,"You do not have permissions to access this resource.");
      httpResponse.flushBuffer();
      return;
    }
  }
  chain.doFilter(request,response);
}
