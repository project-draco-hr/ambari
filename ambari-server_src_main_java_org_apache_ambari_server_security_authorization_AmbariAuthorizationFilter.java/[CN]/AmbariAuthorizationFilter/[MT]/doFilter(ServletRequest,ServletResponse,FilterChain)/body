{
  HttpServletRequest httpRequest=(HttpServletRequest)request;
  HttpServletResponse httpResponse=(HttpServletResponse)response;
  String requestURI=httpRequest.getRequestURI();
  SecurityContext context=getSecurityContext();
  Authentication authentication=context.getAuthentication();
  if (authentication == null || authentication instanceof AnonymousAuthenticationToken) {
    Authentication defaultAuthentication=getDefaultAuthentication();
    if (defaultAuthentication != null) {
      context.setAuthentication(defaultAuthentication);
      authentication=defaultAuthentication;
    }
  }
  if (authentication == null || authentication instanceof AnonymousAuthenticationToken || !authentication.isAuthenticated()) {
    String token=httpRequest.getHeader(INTERNAL_TOKEN_HEADER);
    if (token != null) {
      context.setAuthentication(new InternalAuthenticationToken(token));
    }
 else {
      if (requestURI.matches(VIEWS_CONTEXT_ALL_PATTERN)) {
        String queryString=httpRequest.getQueryString();
        String requestedURL=queryString == null ? requestURI : (requestURI + '?' + queryString);
        String redirectURL=httpResponse.encodeRedirectURL(LOGIN_REDIRECT_BASE + requestedURL);
        httpResponse.sendRedirect(redirectURL);
        return;
      }
 else {
        httpResponse.sendError(HttpServletResponse.SC_FORBIDDEN,"Authentication required");
      }
    }
  }
 else   if (!authorizationPerformedInternally(requestURI)) {
    boolean authorized=false;
    for (    GrantedAuthority grantedAuthority : authentication.getAuthorities()) {
      if (grantedAuthority instanceof AmbariGrantedAuthority) {
        AmbariGrantedAuthority ambariGrantedAuthority=(AmbariGrantedAuthority)grantedAuthority;
        PrivilegeEntity privilegeEntity=ambariGrantedAuthority.getPrivilegeEntity();
        Integer permissionId=privilegeEntity.getPermission().getId();
        if (permissionId.equals(PermissionEntity.AMBARI_ADMINISTRATOR_PERMISSION)) {
          authorized=true;
          break;
        }
        if (!"GET".equalsIgnoreCase(httpRequest.getMethod()) && requestURI.matches(API_CREDENTIALS_AMBARI_PATTERN)) {
          if (permissionId.equals(PermissionEntity.AMBARI_ADMINISTRATOR_PERMISSION)) {
            authorized=true;
            break;
          }
        }
 else         if (requestURI.matches(API_CLUSTERS_ALL_PATTERN)) {
          if (permissionId.equals(PermissionEntity.CLUSTER_USER_PERMISSION) || permissionId.equals(PermissionEntity.CLUSTER_ADMINISTRATOR_PERMISSION)) {
            authorized=true;
            break;
          }
        }
 else         if (STACK_ADVISOR_REGEX.matcher(requestURI).matches()) {
          if (permissionId.equals(PermissionEntity.CLUSTER_USER_PERMISSION) || permissionId.equals(PermissionEntity.CLUSTER_ADMINISTRATOR_PERMISSION)) {
            authorized=true;
            break;
          }
        }
 else         if (requestURI.matches(API_VIEWS_ALL_PATTERN)) {
          if (permissionId.equals(PermissionEntity.VIEW_USER_PERMISSION)) {
            authorized=true;
            break;
          }
        }
      }
    }
    if (!authorized && (!httpRequest.getMethod().equals("GET") || requestURI.matches(API_LDAP_SYNC_EVENTS_ALL_PATTERN))) {
      httpResponse.setHeader("WWW-Authenticate","Basic realm=\"" + realm + "\"");
      httpResponse.sendError(HttpServletResponse.SC_FORBIDDEN,"You do not have permissions to access this resource.");
      httpResponse.flushBuffer();
      return;
    }
  }
  if (AuthorizationHelper.getAuthenticatedName() != null) {
    httpResponse.setHeader("User",AuthorizationHelper.getAuthenticatedName());
  }
  chain.doFilter(request,response);
}
