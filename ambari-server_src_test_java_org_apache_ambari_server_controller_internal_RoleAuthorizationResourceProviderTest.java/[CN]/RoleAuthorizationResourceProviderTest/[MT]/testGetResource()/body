{
  RoleAuthorizationEntity roleAuthorizationEntity1=createNiceMock(RoleAuthorizationEntity.class);
  expect(roleAuthorizationEntity1.getAuthorizationId()).andReturn("TEST.DO_SOMETHING").anyTimes();
  expect(roleAuthorizationEntity1.getAuthorizationName()).andReturn("Do Something").anyTimes();
  RoleAuthorizationEntity roleAuthorizationEntity2=createNiceMock(RoleAuthorizationEntity.class);
  expect(roleAuthorizationEntity2.getAuthorizationId()).andReturn("TEST.DO_SOMETHING_ELSE").anyTimes();
  expect(roleAuthorizationEntity2.getAuthorizationName()).andReturn("Do Something Else").anyTimes();
  List<RoleAuthorizationEntity> authorizationEntities=new ArrayList<RoleAuthorizationEntity>();
  authorizationEntities.add(roleAuthorizationEntity1);
  authorizationEntities.add(roleAuthorizationEntity2);
  PermissionEntity permissionEntry=createStrictMock(PermissionEntity.class);
  expect(permissionEntry.getAuthorizations()).andReturn(authorizationEntities).once();
  PermissionDAO permissionDAO=injector.getInstance(PermissionDAO.class);
  expect(permissionDAO.findById(1)).andReturn(permissionEntry).once();
  replayAll();
  AmbariManagementController managementController=injector.getInstance(AmbariManagementController.class);
  RoleAuthorizationResourceProvider provider=new RoleAuthorizationResourceProvider(managementController);
  Predicate predicate=new PredicateBuilder().begin().property(RoleAuthorizationResourceProvider.AUTHORIZATION_ID_PROPERTY_ID).equals("TEST.DO_SOMETHING").and().property(RoleAuthorizationResourceProvider.PERMISSION_ID_PROPERTY_ID).equals("1").end().toPredicate();
  Set<Resource> resources=provider.getResources(PropertyHelper.getReadRequest(),predicate);
  Assert.assertEquals(1,resources.size());
  Resource resource=resources.iterator().next();
  Assert.assertEquals("TEST.DO_SOMETHING",resource.getPropertyValue(RoleAuthorizationResourceProvider.AUTHORIZATION_ID_PROPERTY_ID));
  Assert.assertEquals("Do Something",resource.getPropertyValue(RoleAuthorizationResourceProvider.AUTHORIZATION_NAME_PROPERTY_ID));
  Assert.assertEquals(1,resource.getPropertyValue(RoleAuthorizationResourceProvider.PERMISSION_ID_PROPERTY_ID));
  verifyAll();
}
