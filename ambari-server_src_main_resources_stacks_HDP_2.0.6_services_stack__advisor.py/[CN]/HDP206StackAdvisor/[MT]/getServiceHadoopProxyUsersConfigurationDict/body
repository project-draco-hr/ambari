def getServiceHadoopProxyUsersConfigurationDict(self):
    '\n    Returns a map that is used by \'getHadoopProxyUsers\' to determine service\n    user properties and related components and get proxyuser recommendations.\n    This method can be overridden in stackadvisors for the further stacks to\n    add additional services or change the previous logic.\n\n    Example of the map format:\n    {\n      "serviceName": [\n        ("configTypeName1", "userPropertyName1", {"propertyHosts": "*", "propertyGroups": "exact string value"})\n        ("configTypeName2", "userPropertyName2", {"propertyHosts": ["COMPONENT1", "COMPONENT2", "COMPONENT3"], "propertyGroups": "*"}),\n        ("configTypeName3", "userPropertyName3", {"propertyHosts": ["COMPONENT1", "COMPONENT2", "COMPONENT3"]}, filterFunction)\n      ],\n      "serviceName2": [\n        ...\n    }\n\n    If the third element of a tuple is map that maps proxy property to it\'s value.\n    The key could be either \'propertyHosts\' or \'propertyGroups\'. (Both are optional)\n    If the map value is a string, then this string will be used for the proxyuser\n    value (e.g. \'hadoop.proxyuser.{user}.hosts\' = \'*\').\n    Otherwise map value should be alist or a tuple with component names.\n    All hosts with the provided components will be added\n    to the property (e.g. \'hadoop.proxyuser.{user}.hosts\' = \'host1,host2,host3\')\n\n    The forth element of the tuple is optional and if it\'s provided,\n    it should be a function that takes two arguments: services and hosts.\n    If it returns False, proxyusers for the tuple will not be added.\n    '
    ALL_WILDCARD = '*'
    HOSTS_PROPERTY = 'propertyHosts'
    GROUPS_PROPERTY = 'propertyGroups'
    return {'HDFS': [('hadoop-env', 'hdfs_user', {HOSTS_PROPERTY: ALL_WILDCARD, GROUPS_PROPERTY: ALL_WILDCARD, })], 'OOZIE': [('oozie-env', 'oozie_user', {HOSTS_PROPERTY: ['OOZIE_SERVER'], GROUPS_PROPERTY: ALL_WILDCARD, })], 'HIVE': [('hive-env', 'hive_user', {HOSTS_PROPERTY: ['HIVE_SERVER', 'HIVE_SERVER_INTERACTIVE'], GROUPS_PROPERTY: ALL_WILDCARD, }), ('hive-env', 'webhcat_user', {HOSTS_PROPERTY: ['WEBHCAT_SERVER'], GROUPS_PROPERTY: ALL_WILDCARD, })], 'YARN': [('yarn-env', 'yarn_user', {HOSTS_PROPERTY: ['RESOURCEMANAGER'], }, (lambda services, hosts: (len(self.getHostsWithComponent('YARN', 'RESOURCEMANAGER', services, hosts)) > 1)))], 'FALCON': [('falcon-env', 'falcon_user', {HOSTS_PROPERTY: ALL_WILDCARD, GROUPS_PROPERTY: ALL_WILDCARD, })], 'SPARK': [('livy-env', 'livy_user', {HOSTS_PROPERTY: ALL_WILDCARD, GROUPS_PROPERTY: ALL_WILDCARD, })], }
