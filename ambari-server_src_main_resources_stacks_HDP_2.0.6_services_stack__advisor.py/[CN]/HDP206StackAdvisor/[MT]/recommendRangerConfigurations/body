def recommendRangerConfigurations(self, configurations, clusterData, services, hosts):
    ranger_sql_connector_dict = {'MYSQL': '/usr/share/java/mysql-connector-java.jar', 'ORACLE': '/usr/share/java/ojdbc6.jar', 'POSTGRES': '/usr/share/java/postgresql.jar', 'MSSQL': '/usr/share/java/sqljdbc4.jar', 'SQLA': '/path_to_driver/sqla-client-jdbc.tar.gz', }
    putRangerAdminProperty = self.putProperty(configurations, 'admin-properties', services)
    if (('admin-properties' in services['configurations']) and ('DB_FLAVOR' in services['configurations']['admin-properties']['properties'])):
        rangerDbFlavor = services['configurations']['admin-properties']['properties']['DB_FLAVOR']
        rangerSqlConnectorProperty = ranger_sql_connector_dict.get(rangerDbFlavor, ranger_sql_connector_dict['MYSQL'])
        putRangerAdminProperty('SQL_CONNECTOR_JAR', rangerSqlConnectorProperty)
    protocol = 'http'
    ranger_admin_host = 'localhost'
    port = '6080'
    if ((('ranger-site' in services['configurations']) and ('http.enabled' in services['configurations']['ranger-site']['properties']) and (services['configurations']['ranger-site']['properties']['http.enabled'].lower() == 'false')) or (('ranger-admin-site' in services['configurations']) and ('ranger.service.http.enabled' in services['configurations']['ranger-admin-site']['properties']) and (services['configurations']['ranger-admin-site']['properties']['ranger.service.http.enabled'].lower() == 'false'))):
        protocol = 'https'
        if (('ranger-admin-site' in services['configurations']) and ('ranger.service.https.port' in services['configurations']['ranger-admin-site']['properties'])):
            port = services['configurations']['ranger-admin-site']['properties']['ranger.service.https.port']
        elif (('ranger-site' in services['configurations']) and ('https.service.port' in services['configurations']['ranger-site']['properties'])):
            port = services['configurations']['ranger-site']['properties']['https.service.port']
    elif (('ranger-admin-site' in services['configurations']) and ('ranger.service.http.port' in services['configurations']['ranger-admin-site']['properties'])):
        port = services['configurations']['ranger-admin-site']['properties']['ranger.service.http.port']
    elif (('ranger-site' in services['configurations']) and ('http.service.port' in services['configurations']['ranger-site']['properties'])):
        port = services['configurations']['ranger-site']['properties']['http.service.port']
    ranger_admin_hosts = self.getComponentHostNames(services, 'RANGER', 'RANGER_ADMIN')
    if ranger_admin_hosts:
        if ((len(ranger_admin_hosts) > 1) and services['configurations'] and ('admin-properties' in services['configurations']) and ('policymgr_external_url' in services['configurations']['admin-properties']['properties']) and services['configurations']['admin-properties']['properties']['policymgr_external_url'] and (not services['configurations']['admin-properties']['properties']['policymgr_external_url'].strip().isempty())):
            policymgr_external_url = services['configurations']['admin-properties']['properties']['policymgr_external_url']
        else:
            ranger_admin_host = ranger_admin_hosts[0]
            policymgr_external_url = ('%s://%s:%s' % (protocol, ranger_admin_host, port))
    putRangerAdminProperty('policymgr_external_url', policymgr_external_url)
    rangerServiceVersion = [service['StackServices']['service_version'] for service in services['services'] if (service['StackServices']['service_name'] == 'RANGER')][0]
    if (rangerServiceVersion == '0.4.0'):
        if (('ambari-server-properties' in services) and ('ambari.ldap.isConfigured' in services['ambari-server-properties']) and (services['ambari-server-properties']['ambari.ldap.isConfigured'].lower() == 'true')):
            putUserSyncProperty = self.putProperty(configurations, 'usersync-properties', services)
            serverProperties = services['ambari-server-properties']
            if ('authentication.ldap.managerDn' in serverProperties):
                putUserSyncProperty('SYNC_LDAP_BIND_DN', serverProperties['authentication.ldap.managerDn'])
            if ('authentication.ldap.primaryUrl' in serverProperties):
                ldap_protocol = 'ldap://'
                if (('authentication.ldap.useSSL' in serverProperties) and (serverProperties['authentication.ldap.useSSL'] == 'true')):
                    ldap_protocol = 'ldaps://'
                ldapUrl = ((ldap_protocol + serverProperties['authentication.ldap.primaryUrl']) if serverProperties['authentication.ldap.primaryUrl'] else serverProperties['authentication.ldap.primaryUrl'])
                putUserSyncProperty('SYNC_LDAP_URL', ldapUrl)
            if ('authentication.ldap.userObjectClass' in serverProperties):
                putUserSyncProperty('SYNC_LDAP_USER_OBJECT_CLASS', serverProperties['authentication.ldap.userObjectClass'])
            if ('authentication.ldap.usernameAttribute' in serverProperties):
                putUserSyncProperty('SYNC_LDAP_USER_NAME_ATTRIBUTE', serverProperties['authentication.ldap.usernameAttribute'])
        if (('admin-properties' in services['configurations']) and ('usersync-properties' in services['configurations']) and ('SYNC_SOURCE' in services['configurations']['usersync-properties']['properties'])):
            rangerUserSyncSource = services['configurations']['usersync-properties']['properties']['SYNC_SOURCE']
            authenticationMethod = rangerUserSyncSource.upper()
            if (authenticationMethod != 'FILE'):
                putRangerAdminProperty('authentication_method', authenticationMethod)
        servicesList = [service['StackServices']['service_name'] for service in services['services']]
        putRangerEnvProperty = self.putProperty(configurations, 'ranger-env', services)
        include_hdfs = ('HDFS' in servicesList)
        if include_hdfs:
            if (('core-site' in services['configurations']) and ('fs.defaultFS' in services['configurations']['core-site']['properties'])):
                default_fs = services['configurations']['core-site']['properties']['fs.defaultFS']
                default_fs += '/ranger/audit/%app-type%/%time:yyyyMMdd%'
                putRangerEnvProperty('xasecure.audit.destination.hdfs.dir', default_fs)
        ranger_services = [{'service_name': 'HDFS', 'audit_file': 'ranger-hdfs-plugin-properties', }, {'service_name': 'HBASE', 'audit_file': 'ranger-hbase-plugin-properties', }, {'service_name': 'HIVE', 'audit_file': 'ranger-hive-plugin-properties', }, {'service_name': 'KNOX', 'audit_file': 'ranger-knox-plugin-properties', }, {'service_name': 'STORM', 'audit_file': 'ranger-storm-plugin-properties', }]
        for item in range(len(ranger_services)):
            if (ranger_services[item]['service_name'] in servicesList):
                component_audit_file = ranger_services[item]['audit_file']
                if (component_audit_file in services['configurations']):
                    ranger_audit_dict = [{'filename': 'ranger-env', 'configname': 'xasecure.audit.destination.db', 'target_configname': 'XAAUDIT.DB.IS_ENABLED', }, {'filename': 'ranger-env', 'configname': 'xasecure.audit.destination.hdfs', 'target_configname': 'XAAUDIT.HDFS.IS_ENABLED', }, {'filename': 'ranger-env', 'configname': 'xasecure.audit.destination.hdfs.dir', 'target_configname': 'XAAUDIT.HDFS.DESTINATION_DIRECTORY', }]
                    putRangerAuditProperty = self.putProperty(configurations, component_audit_file, services)
                    for item in ranger_audit_dict:
                        if ((item['filename'] in services['configurations']) and (item['configname'] in services['configurations'][item['filename']]['properties'])):
                            if ((item['filename'] in configurations) and (item['configname'] in configurations[item['filename']]['properties'])):
                                rangerAuditProperty = configurations[item['filename']]['properties'][item['configname']]
                            else:
                                rangerAuditProperty = services['configurations'][item['filename']]['properties'][item['configname']]
                            putRangerAuditProperty(item['target_configname'], rangerAuditProperty)
