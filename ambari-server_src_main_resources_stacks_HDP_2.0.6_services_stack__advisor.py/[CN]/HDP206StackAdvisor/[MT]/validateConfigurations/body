def validateConfigurations(self, services, hosts):
    'Returns array of Validation objects about issues with configuration values provided in services'
    stackName = services['Versions']['stack_name']
    stackVersion = services['Versions']['stack_version']
    validations = {'Versions': {'stack_name': stackName, 'stack_version': stackVersion, }, 'items': [], }
    items = validations['items']
    recommendations = self.recommendConfigurations(services, hosts)
    recommendedDefaults = recommendations['recommendations']['blueprint']['configurations']
    configurations = services['configurations']
    for service in services['services']:
        serviceName = service['StackServices']['service_name']
        if (serviceName == 'MAPREDUCE2'):
            mapReduceErrors = validateMapReduce2Configurations(getSiteProperties(configurations, 'mapred-site'), recommendedDefaults['mapred-site']['properties'])
            items.extend(mapReduceErrors)
        elif (serviceName == 'HIVE'):
            hiveErrors = validateHiveConfigurations(getSiteProperties(configurations, 'hive-site'), recommendedDefaults['hive-site']['properties'])
            items.extend(hiveErrors)
        elif (serviceName == 'STORM'):
            oozieErrors = []
            items.extend(oozieErrors)
        elif (serviceName == 'TEZ'):
            tezErrors = validateTezConfigurations(getSiteProperties(configurations, 'tez-site'), recommendedDefaults['tez-site']['properties'])
            items.extend(tezErrors)
        elif (serviceName == 'YARN'):
            yarnErrors = validateYARNConfigurations(getSiteProperties(configurations, 'yarn-site'), recommendedDefaults['yarn-site']['properties'])
            items.extend(yarnErrors)
        else:
            pass
    return validations
    pass
