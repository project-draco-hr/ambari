def validateAmsHbaseEnvConfigurations(self, properties, recommendedDefaults, configurations, services, hosts):
    regionServerItem = self.validatorLessThenDefaultValue(properties, recommendedDefaults, 'hbase_regionserver_heapsize')
    masterItem = self.validatorLessThenDefaultValue(properties, recommendedDefaults, 'hbase_master_heapsize')
    ams_env = getSiteProperties(configurations, 'ams-env')
    amsHbaseSite = getSiteProperties(configurations, 'ams-hbase-site')
    logDirItem = self.validatorEqualsPropertyItem(properties, 'hbase_log_dir', ams_env, 'metrics_collector_log_dir')
    hbase_master_heapsize = to_number(properties['hbase_master_heapsize'])
    hbase_master_xmn_size = to_number(properties['hbase_master_xmn_size'])
    hbase_regionserver_heapsize = to_number(properties['hbase_regionserver_heapsize'])
    hbase_regionserver_xmn_size = to_number(properties['regionserver_xmn_size'])
    masterXmnItem = None
    regionServerXmnItem = None
    is_hbase_distributed = (amsHbaseSite.get('hbase.cluster.distributed').lower() == 'true')
    if is_hbase_distributed:
        minMasterXmn = (0.12 * hbase_master_heapsize)
        maxMasterXmn = (0.2 * hbase_master_heapsize)
        if (hbase_master_xmn_size < minMasterXmn):
            masterXmnItem = self.getWarnItem('Value is lesser than the recommended minimum Xmn size of {0} (12% of hbase_master_heapsize)'.format(int(math.ceil(minMasterXmn))))
        if (hbase_master_xmn_size > maxMasterXmn):
            masterXmnItem = self.getWarnItem('Value is greater than the recommended maximum Xmn size of {0} (20% of hbase_master_heapsize)'.format(int(math.floor(maxMasterXmn))))
        minRegionServerXmn = (0.12 * hbase_regionserver_heapsize)
        maxRegionServerXmn = (0.2 * hbase_regionserver_heapsize)
        if (hbase_regionserver_xmn_size < minRegionServerXmn):
            regionServerXmnItem = self.getWarnItem('Value is lesser than the recommended minimum Xmn size of {0} (12% of hbase_regionserver_heapsize)'.format(int(math.ceil(minRegionServerXmn))))
        if (hbase_regionserver_xmn_size > maxRegionServerXmn):
            regionServerXmnItem = self.getWarnItem('Value is greater than the recommended maximum Xmn size of {0} (20% of hbase_regionserver_heapsize)'.format(int(math.floor(maxRegionServerXmn))))
    else:
        minMasterXmn = (0.12 * (hbase_master_heapsize + hbase_regionserver_heapsize))
        maxMasterXmn = (0.2 * (hbase_master_heapsize + hbase_regionserver_heapsize))
        if (hbase_master_xmn_size < minMasterXmn):
            masterXmnItem = self.getWarnItem('Value is lesser than the recommended minimum Xmn size of {0} (12% of hbase_master_heapsize + hbase_regionserver_heapsize)'.format(int(math.ceil(minMasterXmn))))
        if (hbase_master_xmn_size > maxMasterXmn):
            masterXmnItem = self.getWarnItem('Value is greater than the recommended maximum Xmn size of {0} (20% of hbase_master_heapsize + hbase_regionserver_heapsize)'.format(int(math.floor(maxMasterXmn))))
    validationItems = []
    masterHostItem = None
    if (masterItem is None):
        hostMasterComponents = {}
        for service in services['services']:
            for component in service['components']:
                if (component['StackServiceComponents']['hostnames'] is not None):
                    for hostName in component['StackServiceComponents']['hostnames']:
                        if self.isMasterComponent(component):
                            if (hostName not in hostMasterComponents.keys()):
                                hostMasterComponents[hostName] = []
                            hostMasterComponents[hostName].append(component['StackServiceComponents']['component_name'])
        amsCollectorHosts = self.getComponentHostNames(services, 'AMBARI_METRICS', 'METRICS_COLLECTOR')
        for collectorHostName in amsCollectorHosts:
            for host in hosts['items']:
                if (host['Hosts']['host_name'] == collectorHostName):
                    if ((len(hosts['items']) > 31) and (len(hostMasterComponents[collectorHostName]) > 2) and (host['Hosts']['total_mem'] < ((32 * 1024) * 1024))):
                        masterHostMessage = 'Host {0} is used by multiple master components ({1}). It is recommended to use a separate host for the Ambari Metrics Collector component and ensure the host has sufficient memory available.'
                        masterHostItem = self.getWarnItem(masterHostMessage.format(collectorHostName, str(', '.join(hostMasterComponents[collectorHostName]))))
                hostComponents = []
                for service in services['services']:
                    for component in service['components']:
                        if (component['StackServiceComponents']['hostnames'] is not None):
                            if (collectorHostName in component['StackServiceComponents']['hostnames']):
                                hostComponents.append(component['StackServiceComponents']['component_name'])
                requiredMemory = getMemorySizeRequired(hostComponents, configurations)
                unusedMemory = ((host['Hosts']['total_mem'] * 1024) - requiredMemory)
                if (unusedMemory > 4294967296):
                    heapPropertyToIncrease = ('hbase_regionserver_heapsize' if is_hbase_distributed else 'hbase_master_heapsize')
                    xmnPropertyToIncrease = ('regionserver_xmn_size' if is_hbase_distributed else 'hbase_master_xmn_size')
                    collector_heapsize = (int(((unusedMemory - 4294967296) / 5)) + (to_number(ams_env.get('metrics_collector_heapsize')) * 1048576))
                    hbase_heapsize = (int((((unusedMemory - 4294967296) * 4) / 5)) + (to_number(properties.get(heapPropertyToIncrease)) * 1048576))
                    hbase_heapsize = min((((32 * 1024) * 1024) * 1024), hbase_heapsize)
                    xmn_size = round_to_n(((0.12 * hbase_heapsize) / 1048576), 128)
                    msg = '{0} MB RAM is unused on the host {1} based on components assigned. Consider allocating  {2} MB to metrics_collector_heapsize in ams-env, {3} MB to {4} in ams-hbase-env and {5} MB to {6} in ams-hbase-env'
                    unusedMemoryHbaseItem = self.getWarnItem(msg.format((unusedMemory / 1048576), collectorHostName, (collector_heapsize / 1048576), (hbase_heapsize / 1048576), heapPropertyToIncrease, xmn_size, xmnPropertyToIncrease))
                    validationItems.extend([{'config-name': heapPropertyToIncrease, 'item': unusedMemoryHbaseItem, }])
        pass
    validationItems.extend([{'config-name': 'hbase_regionserver_heapsize', 'item': regionServerItem, }, {'config-name': 'hbase_master_heapsize', 'item': masterItem, }, {'config-name': 'hbase_master_heapsize', 'item': masterHostItem, }, {'config-name': 'hbase_log_dir', 'item': logDirItem, }, {'config-name': 'hbase_master_xmn_size', 'item': masterXmnItem, }, {'config-name': 'regionserver_xmn_size', 'item': regionServerXmnItem, }])
    return self.toConfigurationValidationProblems(validationItems, 'ams-hbase-env')
