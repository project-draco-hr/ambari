def validateAmsHbaseEnvConfigurations(self, properties, recommendedDefaults, configurations, services, hosts):
    regionServerItem = self.validatorLessThenDefaultValue(properties, recommendedDefaults, 'hbase_regionserver_heapsize')
    masterItem = self.validatorLessThenDefaultValue(properties, recommendedDefaults, 'hbase_master_heapsize')
    ams_env = getSiteProperties(configurations, 'ams-env')
    logDirItem = self.validatorEqualsPropertyItem(properties, 'hbase_log_dir', ams_env, 'metrics_collector_log_dir')
    masterHostItem = None
    if (masterItem is None):
        hostComponents = {}
        hostMasterComponents = {}
        for service in services['services']:
            for component in service['components']:
                if (component['StackServiceComponents']['hostnames'] is not None):
                    for hostName in component['StackServiceComponents']['hostnames']:
                        if (hostName not in hostComponents.keys()):
                            hostComponents[hostName] = []
                        hostComponents[hostName].append(component['StackServiceComponents']['component_name'])
                        if self.isMasterComponent(component):
                            if (hostName not in hostMasterComponents.keys()):
                                hostMasterComponents[hostName] = []
                            hostMasterComponents[hostName].append(component['StackServiceComponents']['component_name'])
        amsCollectorHosts = self.getComponentHostNames(services, 'AMBARI_METRICS', 'METRICS_COLLECTOR')
        for collectorHostName in amsCollectorHosts:
            for host in hosts['items']:
                if (host['Hosts']['host_name'] == collectorHostName):
                    if ((len(hosts['items']) > 31) and (len(hostMasterComponents[collectorHostName]) > 2) and (host['Hosts']['total_mem'] < ((32 * 1024) * 1024))):
                        masterHostMessage = 'Host {0} is used by multiple master components ({1}). It is recommended to use a separate host for the Ambari Metrics Collector component and ensure the host has sufficient memory available.'
                        masterHostItem = self.getWarnItem(masterHostMessage.format(collectorHostName, str(', '.join(hostMasterComponents[collectorHostName]))))
                    requiredMemory = getMemorySizeRequired(hostComponents[collectorHostName], configurations)
                    if ((host['Hosts']['total_mem'] * 1024) < requiredMemory):
                        message = 'No enough total RAM on the host {0}, at least {1} MB required for the components({2})'.format(collectorHostName, (requiredMemory / 1048576), str(', '.join(hostComponents[collectorHostName])))
                        regionServerItem = self.getErrorItem(message)
                        masterItem = self.getErrorItem(message)
                        break
    validationItems = [{'config-name': 'hbase_regionserver_heapsize', 'item': regionServerItem, }, {'config-name': 'hbase_master_heapsize', 'item': masterItem, }, {'config-name': 'hbase_master_heapsize', 'item': masterHostItem, }, {'config-name': 'hbase_log_dir', 'item': logDirItem, }]
    return self.toConfigurationValidationProblems(validationItems, 'ams-hbase-env')
