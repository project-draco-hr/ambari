def recommendYARNConfigurations(self, configurations, clusterData, services, hosts):
    putYarnProperty = self.putProperty(configurations, 'yarn-site', services)
    putYarnPropertyAttribute = self.putPropertyAttribute(configurations, 'yarn-site')
    putYarnEnvProperty = self.putProperty(configurations, 'yarn-env', services)
    nodemanagerMinRam = 1048576
    if ('referenceNodeManagerHost' in clusterData):
        nodemanagerMinRam = min((clusterData['referenceNodeManagerHost']['total_mem'] / 1024), nodemanagerMinRam)
    putYarnProperty('yarn.nodemanager.resource.memory-mb', int(round(min((clusterData['containers'] * clusterData['ramPerContainer']), nodemanagerMinRam))))
    putYarnProperty('yarn.scheduler.minimum-allocation-mb', int(clusterData['ramPerContainer']))
    putYarnProperty('yarn.scheduler.maximum-allocation-mb', int(configurations['yarn-site']['properties']['yarn.nodemanager.resource.memory-mb']))
    putYarnEnvProperty('min_user_id', self.get_system_min_uid())
    sc_queue_name = self.recommendYarnQueue(services, 'yarn-env', 'service_check.queue.name')
    if (sc_queue_name is not None):
        putYarnEnvProperty('service_check.queue.name', sc_queue_name)
    containerExecutorGroup = 'hadoop'
    if (('cluster-env' in services['configurations']) and ('user_group' in services['configurations']['cluster-env']['properties'])):
        containerExecutorGroup = services['configurations']['cluster-env']['properties']['user_group']
    putYarnProperty('yarn.nodemanager.linux-container-executor.group', containerExecutorGroup)
    servicesList = [service['StackServices']['service_name'] for service in services['services']]
    if ('TEZ' in servicesList):
        ambari_user = self.getAmbariUser(services)
        ambariHostName = socket.getfqdn()
        putYarnProperty('yarn.timeline-service.http-authentication.proxyuser.{0}.hosts'.format(ambari_user), ambariHostName)
        putYarnProperty('yarn.timeline-service.http-authentication.proxyuser.{0}.groups'.format(ambari_user), '*')
        old_ambari_user = self.getOldAmbariUser(services)
        if (old_ambari_user is not None):
            putYarnPropertyAttribute('yarn.timeline-service.http-authentication.proxyuser.{0}.hosts'.format(old_ambari_user), 'delete', 'true')
            putYarnPropertyAttribute('yarn.timeline-service.http-authentication.proxyuser.{0}.groups'.format(old_ambari_user), 'delete', 'true')
