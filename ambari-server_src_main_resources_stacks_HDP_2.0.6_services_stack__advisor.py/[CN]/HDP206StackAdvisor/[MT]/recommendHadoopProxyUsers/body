def recommendHadoopProxyUsers(self, configurations, services, hosts):
    servicesList = [service['StackServices']['service_name'] for service in services['services']]
    users = {}
    if ('forced-configurations' not in services):
        services['forced-configurations'] = []
    if ('HDFS' in servicesList):
        hdfs_user = None
        if (('hadoop-env' in services['configurations']) and ('hdfs_user' in services['configurations']['hadoop-env']['properties'])):
            hdfs_user = services['configurations']['hadoop-env']['properties']['hdfs_user']
            if ((not (hdfs_user in users)) and (hdfs_user is not None)):
                users[hdfs_user] = {'propertyHosts': '*', 'propertyGroups': '*', 'config': 'hadoop-env', 'propertyName': 'hdfs_user', }
    if ('OOZIE' in servicesList):
        oozie_user = None
        if (('oozie-env' in services['configurations']) and ('oozie_user' in services['configurations']['oozie-env']['properties'])):
            oozie_user = services['configurations']['oozie-env']['properties']['oozie_user']
            oozieServerrHosts = self.getHostsWithComponent('OOZIE', 'OOZIE_SERVER', services, hosts)
            if (oozieServerrHosts is not None):
                oozieServerHostsNameList = []
                for oozieServerHost in oozieServerrHosts:
                    oozieServerHostsNameList.append(oozieServerHost['Hosts']['public_host_name'])
                oozieServerHostsNames = ','.join(oozieServerHostsNameList)
                if ((not (oozie_user in users)) and (oozie_user is not None)):
                    users[oozie_user] = {'propertyHosts': oozieServerHostsNames, 'propertyGroups': '*', 'config': 'oozie-env', 'propertyName': 'oozie_user', }
    if ('HIVE' in servicesList):
        hive_user = None
        webhcat_user = None
        if (('hive-env' in services['configurations']) and ('hive_user' in services['configurations']['hive-env']['properties']) and ('webhcat_user' in services['configurations']['hive-env']['properties'])):
            hive_user = services['configurations']['hive-env']['properties']['hive_user']
            webhcat_user = services['configurations']['hive-env']['properties']['webhcat_user']
            hiveServerHosts = self.getHostsWithComponent('HIVE', 'HIVE_SERVER', services, hosts)
            webHcatServerHosts = self.getHostsWithComponent('HIVE', 'WEBHCAT_SERVER', services, hosts)
            if (hiveServerHosts is not None):
                hiveServerHostsNameList = []
                for hiveServerHost in hiveServerHosts:
                    hiveServerHostsNameList.append(hiveServerHost['Hosts']['public_host_name'])
                hiveServerHostsNames = ','.join(hiveServerHostsNameList)
                if ((not (hive_user in users)) and (hive_user is not None)):
                    users[hive_user] = {'propertyHosts': hiveServerHostsNames, 'propertyGroups': '*', 'config': 'hive-env', 'propertyName': 'hive_user', }
            if (webHcatServerHosts is not None):
                webHcatServerHostsNameList = []
                for webHcatServerHost in webHcatServerHosts:
                    webHcatServerHostsNameList.append(webHcatServerHost['Hosts']['public_host_name'])
                webHcatServerHostsNames = ','.join(webHcatServerHostsNameList)
                if ((not (webhcat_user in users)) and (webhcat_user is not None)):
                    users[webhcat_user] = {'propertyHosts': webHcatServerHostsNames, 'propertyGroups': '*', 'config': 'hive-env', 'propertyName': 'webhcat_user', }
    if ('FALCON' in servicesList):
        falconUser = None
        if (('falcon-env' in services['configurations']) and ('falcon_user' in services['configurations']['falcon-env']['properties'])):
            falconUser = services['configurations']['falcon-env']['properties']['falcon_user']
            if ((not (falconUser in users)) and (falconUser is not None)):
                users[falconUser] = {'propertyHosts': '*', 'propertyGroups': '*', 'config': 'falcon-env', 'propertyName': 'falcon_user', }
    putCoreSiteProperty = self.putProperty(configurations, 'core-site', services)
    putCoreSitePropertyAttribute = self.putPropertyAttribute(configurations, 'core-site')
    for (user_name, user_properties) in users.iteritems():
        putCoreSiteProperty('hadoop.proxyuser.{0}.hosts'.format(user_name), user_properties['propertyHosts'])
        putCoreSiteProperty('hadoop.proxyuser.{0}.groups'.format(user_name), user_properties['propertyGroups'])
        userOldValue = getOldValue(self, services, user_properties['config'], user_properties['propertyName'])
        if ((userOldValue is not None) and (userOldValue != user_name)):
            putCoreSitePropertyAttribute('hadoop.proxyuser.{0}.hosts'.format(userOldValue), 'delete', 'true')
            putCoreSitePropertyAttribute('hadoop.proxyuser.{0}.groups'.format(userOldValue), 'delete', 'true')
            services['forced-configurations'].append({'type': 'core-site', 'name': 'hadoop.proxyuser.{0}.hosts'.format(userOldValue), })
            services['forced-configurations'].append({'type': 'core-site', 'name': 'hadoop.proxyuser.{0}.groups'.format(userOldValue), })
            services['forced-configurations'].append({'type': 'core-site', 'name': 'hadoop.proxyuser.{0}.hosts'.format(user_name), })
            services['forced-configurations'].append({'type': 'core-site', 'name': 'hadoop.proxyuser.{0}.groups'.format(user_name), })
