def recommendHadoopProxyUsers(self, configurations, services, hosts):
    servicesList = self.get_services_list(services)
    if ('forced-configurations' not in services):
        services['forced-configurations'] = []
    putCoreSiteProperty = self.putProperty(configurations, 'core-site', services)
    putCoreSitePropertyAttribute = self.putPropertyAttribute(configurations, 'core-site')
    users = self.getHadoopProxyUsers(services, hosts)
    if ('HIVE' in servicesList):
        hive_user = get_from_dict(services, ('configurations', 'hive-env', 'properties', 'hive_user'), default_value=None)
        if (hive_user and get_from_dict(users, (hive_user, 'propertyHosts'), default_value=None)):
            services['forced-configurations'].append({'type': 'core-site', 'name': 'hadoop.proxyuser.{0}.hosts'.format(hive_user), })
    for (user_name, user_properties) in users.iteritems():
        putCoreSiteProperty('hadoop.proxyuser.{0}.hosts'.format(user_name), user_properties['propertyHosts'])
        Logger.info('Updated hadoop.proxyuser.{0}.hosts as : {1}'.format(user_name, user_properties['propertyHosts']))
        if ('propertyGroups' in user_properties):
            putCoreSiteProperty('hadoop.proxyuser.{0}.groups'.format(user_name), user_properties['propertyGroups'])
        userOldValue = getOldValue(self, services, user_properties['config'], user_properties['propertyName'])
        if ((userOldValue is not None) and (userOldValue != user_name)):
            putCoreSitePropertyAttribute('hadoop.proxyuser.{0}.hosts'.format(userOldValue), 'delete', 'true')
            services['forced-configurations'].append({'type': 'core-site', 'name': 'hadoop.proxyuser.{0}.hosts'.format(userOldValue), })
            services['forced-configurations'].append({'type': 'core-site', 'name': 'hadoop.proxyuser.{0}.hosts'.format(user_name), })
            if ('propertyGroups' in user_properties):
                putCoreSitePropertyAttribute('hadoop.proxyuser.{0}.groups'.format(userOldValue), 'delete', 'true')
                services['forced-configurations'].append({'type': 'core-site', 'name': 'hadoop.proxyuser.{0}.groups'.format(userOldValue), })
                services['forced-configurations'].append({'type': 'core-site', 'name': 'hadoop.proxyuser.{0}.groups'.format(user_name), })
    self.recommendAmbariProxyUsersForHDFS(services, servicesList, putCoreSiteProperty, putCoreSitePropertyAttribute)
