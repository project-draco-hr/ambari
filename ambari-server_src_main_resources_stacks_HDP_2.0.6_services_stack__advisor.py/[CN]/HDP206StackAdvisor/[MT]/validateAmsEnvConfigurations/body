def validateAmsEnvConfigurations(self, properties, recommendedDefaults, configurations, services, hosts):
    ams_env = getSiteProperties(configurations, 'ams-env')
    mb = (1024 * 1024)
    gb = (1024 * mb)
    validationItems = []
    collector_heapsize = to_number(ams_env.get('metrics_collector_heapsize'))
    amsCollectorHosts = self.getComponentHostNames(services, 'AMBARI_METRICS', 'METRICS_COLLECTOR')
    for collectorHostName in amsCollectorHosts:
        for host in hosts['items']:
            if (host['Hosts']['host_name'] == collectorHostName):
                hostComponents = []
                for service in services['services']:
                    for component in service['components']:
                        if (component['StackServiceComponents']['hostnames'] is not None):
                            if (collectorHostName in component['StackServiceComponents']['hostnames']):
                                hostComponents.append(component['StackServiceComponents']['component_name'])
                requiredMemory = getMemorySizeRequired(hostComponents, configurations)
                unusedMemory = ((host['Hosts']['total_mem'] * 1024) - requiredMemory)
                collector_needs_increase = ((collector_heapsize * mb) < (16 * gb))
                if ((unusedMemory > (4 * gb)) and collector_needs_increase):
                    recommended_collector_heapsize = (int(((unusedMemory - (4 * gb)) / 5)) + (collector_heapsize * mb))
                    recommended_collector_heapsize = round_to_n((recommended_collector_heapsize / mb), 128)
                    if (collector_heapsize < recommended_collector_heapsize):
                        validation_msg = 'Consider allocating {0} MB to metrics_collector_heapsize in ams-env to use up some unused memory on host'
                        collectorHeapsizeItem = self.getWarnItem(validation_msg.format(recommended_collector_heapsize))
                        validationItems.extend([{'config-name': 'metrics_collector_heapsize', 'item': collectorHeapsizeItem, }])
    pass
    return self.toConfigurationValidationProblems(validationItems, 'ams-env')
