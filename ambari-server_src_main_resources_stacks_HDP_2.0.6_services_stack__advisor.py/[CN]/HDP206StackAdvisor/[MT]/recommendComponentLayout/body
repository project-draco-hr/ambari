def recommendComponentLayout(self, services, hosts):
    '\n    Returns Services object with hostnames array populated for components\n    If hostnames are populated for some components (partial blueprint) - these components will not be processed\n    '
    stackName = services['Versions']['stack_name']
    stackVersion = services['Versions']['stack_version']
    hostsList = [host['Hosts']['host_name'] for host in hosts['items']]
    servicesList = [service['StackServices']['service_name'] for service in services['services']]
    recommendations = {'Versions': {'stack_name': stackName, 'stack_version': stackVersion, }, 'hosts': hostsList, 'services': servicesList, 'recommendations': {'blueprint': {'configurations': {'global': {'properties': {}, }, 'core-site': {}, 'hdfs-site': {}, 'yarn-site': {}, 'hbase-site': {}, }, 'host_groups': [], }, 'blueprint_cluster_binding': {'host_groups': [], }, }, }
    hostsComponentsMap = {}
    for service in services['services']:
        masterComponents = [component for component in service['components'] if isMaster(component)]
        for component in masterComponents:
            componentName = component['StackServiceComponents']['component_name']
            hostsForComponent = []
            if isAlreadyPopulated(component):
                hostsForComponent = component['StackServiceComponents']['hostnames']
            else:
                availableHosts = hostsList
                if ((len(hostsList) > 1) and isNotPreferableOnAmbariServerHost(component)):
                    availableHosts = [hostName for hostName in hostsList if (not isLocalHost(hostName))]
                if isMasterWithMultipleInstances(component):
                    hostsCount = defaultNoOfMasterHosts(component)
                    if (hostsCount > 1):
                        if (len(availableHosts) < hostsCount):
                            hostsCount = len(availableHosts)
                        hostsForComponent = availableHosts[:hostsCount]
                    else:
                        hostsForComponent = [getHostForComponent(component, availableHosts)]
                else:
                    hostsForComponent = [getHostForComponent(component, availableHosts)]
            for hostName in hostsForComponent:
                if (hostName not in hostsComponentsMap):
                    hostsComponentsMap[hostName] = []
                hostsComponentsMap[hostName].append({'name': componentName, })
    componentsListList = [service['components'] for service in services['services']]
    componentsList = [item for sublist in componentsListList for item in sublist]
    usedHostsListList = [component['StackServiceComponents']['hostnames'] for component in componentsList if (not isNotValuable(component))]
    utilizedHosts = [item for sublist in usedHostsListList for item in sublist]
    freeHosts = [hostName for hostName in hostsList if (hostName not in utilizedHosts)]
    for service in services['services']:
        slaveClientComponents = [component for component in service['components'] if (isSlave(component) or isClient(component))]
        for component in slaveClientComponents:
            componentName = component['StackServiceComponents']['component_name']
            hostsForComponent = []
            if isAlreadyPopulated(component):
                hostsForComponent = component['StackServiceComponents']['hostnames']
            elif (component['StackServiceComponents']['cardinality'] == 'ALL'):
                hostsForComponent = hostsList
            elif (len(freeHosts) == 0):
                hostsForComponent = hostsList[(-1):]
            else:
                hostsForComponent = freeHosts
                if isClient(component):
                    hostsForComponent = freeHosts[0:1]
            for hostName in hostsForComponent:
                if (hostName not in hostsComponentsMap):
                    hostsComponentsMap[hostName] = []
                hostsComponentsMap[hostName].append({'name': componentName, })
    host_groups = recommendations['recommendations']['blueprint']['host_groups']
    bindings = recommendations['recommendations']['blueprint_cluster_binding']['host_groups']
    index = 0
    for key in hostsComponentsMap.keys():
        index += 1
        host_group_name = 'host-group-{0}'.format(index)
        host_groups.append({'name': host_group_name, 'components': hostsComponentsMap[key], })
        bindings.append({'name': host_group_name, 'hosts': [{'fqdn': socket.getfqdn(key), }], })
    return recommendations
