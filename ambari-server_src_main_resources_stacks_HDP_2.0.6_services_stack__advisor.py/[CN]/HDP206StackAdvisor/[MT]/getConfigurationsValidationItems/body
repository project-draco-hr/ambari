def getConfigurationsValidationItems(self, services, hosts):
    'Returns array of Validation objects about issues with configuration values provided in services'
    items = []
    recommendations = self.recommendConfigurations(services, hosts)
    recommendedDefaults = recommendations['recommendations']['blueprint']['configurations']
    configurations = services['configurations']
    for service in services['services']:
        serviceName = service['StackServices']['service_name']
        validator = self.validateServiceConfigurations(serviceName)
        if (validator is not None):
            for (siteName, method) in validator.items():
                if (siteName in recommendedDefaults):
                    siteProperties = getSiteProperties(configurations, siteName)
                    if (siteProperties is not None):
                        siteRecommendations = recommendedDefaults[siteName]['properties']
                        print ('SiteName: %s, method: %s\n' % (siteName, method.__name__))
                        print ('Site properties: %s\n' % str(siteProperties))
                        print ('Recommendations: %s\n********\n' % str(siteRecommendations))
                        try:
                            resultItems = method(siteProperties, siteRecommendations, configurations, services, hosts)
                            items.extend(resultItems)
                        except (AttributeError, TypeError, LookupError) as e:
                            msg = 'Failed to validate configuration '
                            print msg
                            print e
                            items.extend([{'message': msg, 'level': 'ERROR', 'config-type': siteName, 'config-name': '', 'type': 'configuration', }])
    clusterWideItems = self.validateClusterConfigurations(configurations, services, hosts)
    items.extend(clusterWideItems)
    self.validateMinMax(items, recommendedDefaults, configurations)
    return items
