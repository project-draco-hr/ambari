def get_service_component_meta(self, service, component, services):
    '\n    Function retrieve service component meta information as dict from services.json\n    If no service or component found, would be returned empty dict\n\n    Return value example:\n        "advertise_version" : true,\n        "bulk_commands_display_name" : "",\n        "bulk_commands_master_component_name" : "",\n        "cardinality" : "1+",\n        "component_category" : "CLIENT",\n        "component_name" : "HBASE_CLIENT",\n        "custom_commands" : [ ],\n        "decommission_allowed" : false,\n        "display_name" : "HBase Client",\n        "has_bulk_commands_definition" : false,\n        "is_client" : true,\n        "is_master" : false,\n        "reassign_allowed" : false,\n        "recovery_enabled" : false,\n        "service_name" : "HBASE",\n        "stack_name" : "HDP",\n        "stack_version" : "2.5",\n        "hostnames" : [ "host1", "host2" ]\n\n    :type service str\n    :type component str\n    :type services dict\n    :rtype dict\n    '
    __stack_services = 'StackServices'
    __stack_service_components = 'StackServiceComponents'
    if (not services):
        return {}
    service_meta = [item for item in services['services'] if (item[__stack_services]['service_name'] == service)]
    if (len(service_meta) == 0):
        return {}
    service_meta = service_meta[0]
    component_meta = [item for item in service_meta['components'] if (item[__stack_service_components]['component_name'] == component)]
    if (len(component_meta) == 0):
        return {}
    return component_meta[0][__stack_service_components]
