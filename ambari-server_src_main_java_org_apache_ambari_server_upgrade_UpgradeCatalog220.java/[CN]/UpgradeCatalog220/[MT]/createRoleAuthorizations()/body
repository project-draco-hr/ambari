{
  LOG.info("Adding authorizations");
  String[] columnNames=new String[]{ROLE_AUTHORIZATION_ID_COL,ROLE_AUTHORIZATION_NAME_COL};
  dbAccessor.insertRow(ROLE_AUTHORIZATION_TABLE,columnNames,new String[]{"'VIEW.USE'","'Use View'"},false);
  dbAccessor.insertRow(ROLE_AUTHORIZATION_TABLE,columnNames,new String[]{"'SERVICE.VIEW_METRICS'","'View metrics'"},false);
  dbAccessor.insertRow(ROLE_AUTHORIZATION_TABLE,columnNames,new String[]{"'SERVICE.VIEW_STATUS_INFO'","'View status information'"},false);
  dbAccessor.insertRow(ROLE_AUTHORIZATION_TABLE,columnNames,new String[]{"'SERVICE.VIEW_CONFIGS'","'View configurations'"},false);
  dbAccessor.insertRow(ROLE_AUTHORIZATION_TABLE,columnNames,new String[]{"'SERVICE.COMPARE_CONFIGS'","'Compare configurations'"},false);
  dbAccessor.insertRow(ROLE_AUTHORIZATION_TABLE,columnNames,new String[]{"'SERVICE.VIEW_ALERTS'","'View service alerts'"},false);
  dbAccessor.insertRow(ROLE_AUTHORIZATION_TABLE,columnNames,new String[]{"'SERVICE.START_STOP'","'Start/Stop/Restart Service'"},false);
  dbAccessor.insertRow(ROLE_AUTHORIZATION_TABLE,columnNames,new String[]{"'SERVICE.DECOMMISSION_RECOMMISSION'","'Decommission/recommission'"},false);
  dbAccessor.insertRow(ROLE_AUTHORIZATION_TABLE,columnNames,new String[]{"'SERVICE.RUN_SERVICE_CHECK'","'Run service checks'"},false);
  dbAccessor.insertRow(ROLE_AUTHORIZATION_TABLE,columnNames,new String[]{"'SERVICE.TOGGLE_MAINTENANCE'","'Turn on/off maintenance mode'"},false);
  dbAccessor.insertRow(ROLE_AUTHORIZATION_TABLE,columnNames,new String[]{"'SERVICE.RUN_CUSTOM_COMMAND'","'Perform service-specific tasks'"},false);
  dbAccessor.insertRow(ROLE_AUTHORIZATION_TABLE,columnNames,new String[]{"'SERVICE.MODIFY_CONFIGS'","'Modify configurations'"},false);
  dbAccessor.insertRow(ROLE_AUTHORIZATION_TABLE,columnNames,new String[]{"'SERVICE.MANAGE_CONFIG_GROUPS'","'Manage configuration groups'"},false);
  dbAccessor.insertRow(ROLE_AUTHORIZATION_TABLE,columnNames,new String[]{"'SERVICE.MOVE'","'Move to another host'"},false);
  dbAccessor.insertRow(ROLE_AUTHORIZATION_TABLE,columnNames,new String[]{"'SERVICE.ENABLE_HA'","'Enable HA'"},false);
  dbAccessor.insertRow(ROLE_AUTHORIZATION_TABLE,columnNames,new String[]{"'SERVICE.TOGGLE_ALERTS'","'Enable/disable service alerts'"},false);
  dbAccessor.insertRow(ROLE_AUTHORIZATION_TABLE,columnNames,new String[]{"'SERVICE.ADD_DELETE_SERVICES'","'Add Service to cluster'"},false);
  dbAccessor.insertRow(ROLE_AUTHORIZATION_TABLE,columnNames,new String[]{"'HOST.VIEW_METRICS'","'View metrics'"},false);
  dbAccessor.insertRow(ROLE_AUTHORIZATION_TABLE,columnNames,new String[]{"'HOST.VIEW_STATUS_INFO'","'View status information'"},false);
  dbAccessor.insertRow(ROLE_AUTHORIZATION_TABLE,columnNames,new String[]{"'HOST.VIEW_CONFIGS'","'View configuration'"},false);
  dbAccessor.insertRow(ROLE_AUTHORIZATION_TABLE,columnNames,new String[]{"'HOST.TOGGLE_MAINTENANCE'","'Turn on/off maintenance mode'"},false);
  dbAccessor.insertRow(ROLE_AUTHORIZATION_TABLE,columnNames,new String[]{"'HOST.ADD_DELETE_COMPONENTS'","'Install components'"},false);
  dbAccessor.insertRow(ROLE_AUTHORIZATION_TABLE,columnNames,new String[]{"'HOST.ADD_DELETE_HOSTS'","'Add/Delete hosts'"},false);
  dbAccessor.insertRow(ROLE_AUTHORIZATION_TABLE,columnNames,new String[]{"'CLUSTER.VIEW_METRICS'","'View metrics'"},false);
  dbAccessor.insertRow(ROLE_AUTHORIZATION_TABLE,columnNames,new String[]{"'CLUSTER.VIEW_STATUS_INFO'","'View status information'"},false);
  dbAccessor.insertRow(ROLE_AUTHORIZATION_TABLE,columnNames,new String[]{"'CLUSTER.VIEW_CONFIGS'","'View configuration'"},false);
  dbAccessor.insertRow(ROLE_AUTHORIZATION_TABLE,columnNames,new String[]{"'CLUSTER.VIEW_STACK_DETAILS'","'View stack version details'"},false);
  dbAccessor.insertRow(ROLE_AUTHORIZATION_TABLE,columnNames,new String[]{"'CLUSTER.VIEW_ALERTS'","'View alerts'"},false);
  dbAccessor.insertRow(ROLE_AUTHORIZATION_TABLE,columnNames,new String[]{"'CLUSTER.TOGGLE_ALERTS'","'Enable/disable alerts'"},false);
  dbAccessor.insertRow(ROLE_AUTHORIZATION_TABLE,columnNames,new String[]{"'CLUSTER.TOGGLE_KERBEROS'","'Enable/disable Kerberos'"},false);
  dbAccessor.insertRow(ROLE_AUTHORIZATION_TABLE,columnNames,new String[]{"'CLUSTER.UPGRADE_DOWNGRADE_STACK'","'Upgrade/downgrade stack'"},false);
  dbAccessor.insertRow(ROLE_AUTHORIZATION_TABLE,columnNames,new String[]{"'AMBARI.ADD_DELETE_CLUSTERS'","'Create new clusters'"},false);
  dbAccessor.insertRow(ROLE_AUTHORIZATION_TABLE,columnNames,new String[]{"'AMBARI.SET_SERVICE_USERS_GROUPS'","'Set service users and groups'"},false);
  dbAccessor.insertRow(ROLE_AUTHORIZATION_TABLE,columnNames,new String[]{"'AMBARI.RENAME_CLUSTER'","'Rename clusters'"},false);
  dbAccessor.insertRow(ROLE_AUTHORIZATION_TABLE,columnNames,new String[]{"'AMBARI.MANAGE_USERS'","'Manage users'"},false);
  dbAccessor.insertRow(ROLE_AUTHORIZATION_TABLE,columnNames,new String[]{"'AMBARI.MANAGE_GROUPS'","'Manage groups'"},false);
  dbAccessor.insertRow(ROLE_AUTHORIZATION_TABLE,columnNames,new String[]{"'AMBARI.MANAGE_VIEWS'","'Manage Ambari Views'"},false);
  dbAccessor.insertRow(ROLE_AUTHORIZATION_TABLE,columnNames,new String[]{"'AMBARI.ASSIGN_ROLES'","'Assign roles'"},false);
  dbAccessor.insertRow(ROLE_AUTHORIZATION_TABLE,columnNames,new String[]{"'AMBARI.MANAGE_STACK_VERSIONS'","'Manage stack versions'"},false);
  dbAccessor.insertRow(ROLE_AUTHORIZATION_TABLE,columnNames,new String[]{"'AMBARI.EDIT_STACK_REPOS'","'Edit stack repository URLs'"},false);
}
