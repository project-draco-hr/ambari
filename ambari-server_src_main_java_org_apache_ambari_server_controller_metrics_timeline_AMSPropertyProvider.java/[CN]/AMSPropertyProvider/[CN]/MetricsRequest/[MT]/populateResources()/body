{
  if (temporalInfo != null && (temporalInfo.getStartTime() == null || temporalInfo.getEndTime() == null)) {
    return Collections.emptySet();
  }
  for (  Map.Entry<String,Set<Resource>> resourceEntry : resources.entrySet()) {
    String componentName=resourceEntry.getKey();
    Set<Resource> resourceSet=resourceEntry.getValue();
    TimelineMetrics timelineMetrics=new TimelineMetrics();
    Set<String> nonHostComponentMetrics=componentMetricMap.get(componentName);
    if (nonHostComponentMetrics == null) {
      nonHostComponentMetrics=new HashSet<>();
    }
    nonHostComponentMetrics.removeAll(hostComponentHostMetrics);
    Set<String> hostNamesBatches=splitHostNamesInBatches(getHostnames(resources.get(componentName)),HOST_NAMES_BATCH_REQUEST_SIZE);
    Map<String,Set<TimelineMetric>> metricsMap=new HashMap<>();
    for (    String hostNamesBatch : hostNamesBatches) {
      try {
        if (!hostComponentHostMetrics.isEmpty()) {
          String hostComponentHostMetricParams=getSetString(processRegexps(hostComponentHostMetrics),-1);
          setQueryParams(hostComponentHostMetricParams,hostNamesBatch,true,componentName);
          TimelineMetrics metricsResponse=getTimelineMetricsFromCache(getTimelineAppMetricCacheKey(hostComponentHostMetrics,componentName,hostNamesBatch,uriBuilder.toString()),componentName);
          if (metricsResponse != null) {
            timelineMetrics.getMetrics().addAll(metricsResponse.getMetrics());
          }
        }
        if (!nonHostComponentMetrics.isEmpty()) {
          String nonHostComponentHostMetricParams=getSetString(processRegexps(nonHostComponentMetrics),-1);
          setQueryParams(nonHostComponentHostMetricParams,hostNamesBatch,false,componentName);
          TimelineMetrics metricsResponse=getTimelineMetricsFromCache(getTimelineAppMetricCacheKey(nonHostComponentMetrics,componentName,hostNamesBatch,uriBuilder.toString()),componentName);
          if (metricsResponse != null) {
            timelineMetrics.getMetrics().addAll(metricsResponse.getMetrics());
          }
        }
      }
 catch (      IOException io) {
        if (io instanceof SocketTimeoutException || io instanceof ConnectException) {
          if (ambariEventPublisher != null) {
            ambariEventPublisher.publish(new MetricsCollectorHostDownEvent(clusterName,uriBuilder.getHost()));
          }
          throw io;
        }
      }
      Set<String> patterns=createPatterns(metrics.keySet());
      if (!timelineMetrics.getMetrics().isEmpty()) {
        for (        TimelineMetric metric : timelineMetrics.getMetrics()) {
          if (metric.getMetricName() != null && metric.getMetricValues() != null && checkMetricName(patterns,metric.getMetricName())) {
            String hostnameTmp=metric.getHostName();
            if (!metricsMap.containsKey(hostnameTmp)) {
              metricsMap.put(hostnameTmp,new HashSet<TimelineMetric>());
            }
            metricsMap.get(hostnameTmp).add(metric);
          }
        }
        for (        Resource resource : resourceSet) {
          String hostnameTmp=getHostName(resource);
          if (metricsMap.containsKey(hostnameTmp)) {
            for (            TimelineMetric metric : metricsMap.get(hostnameTmp)) {
              TimelineMetric timelineMetricClone=new TimelineMetric(metric);
              metricsPaddingMethod.applyPaddingStrategy(timelineMetricClone,temporalInfo);
              populateResource(resource,timelineMetricClone,temporalInfo);
            }
          }
        }
      }
    }
  }
  return Collections.emptySet();
}
