{
  if (temporalInfo != null && (temporalInfo.getStartTime() == null || temporalInfo.getEndTime() == null)) {
    return Collections.emptySet();
  }
  for (  Map.Entry<String,Set<Resource>> resourceEntry : resources.entrySet()) {
    String componentName=resourceEntry.getKey();
    Set<Resource> resourceSet=resourceEntry.getValue();
    TimelineMetrics timelineMetrics;
    if (hostComponentHostMetrics.isEmpty()) {
      String spec=getSpec(componentName);
      timelineMetrics=getTimelineMetricsForSpec(spec);
    }
 else {
      Set<String> specs=getSpecsForHostComponentMetrics(componentName);
      timelineMetrics=new TimelineMetrics();
      for (      String spec : specs) {
        if (!StringUtils.isEmpty(spec)) {
          TimelineMetrics metrics=getTimelineMetricsForSpec(spec);
          if (metrics != null) {
            timelineMetrics.getMetrics().addAll(metrics.getMetrics());
          }
        }
      }
    }
    Map<String,Set<TimelineMetric>> metricsMap=new HashMap<String,Set<TimelineMetric>>();
    Set<String> patterns=createPatterns(metrics.keySet());
    if (timelineMetrics != null) {
      for (      TimelineMetric metric : timelineMetrics.getMetrics()) {
        if (metric.getMetricName() != null && metric.getMetricValues() != null && checkMetricName(patterns,metric.getMetricName())) {
          String hostname=metric.getHostName();
          if (!metricsMap.containsKey(hostname)) {
            metricsMap.put(hostname,new HashSet<TimelineMetric>());
          }
          metricsMap.get(hostname).add(metric);
        }
      }
      for (      Resource resource : resourceSet) {
        String hostname=getHostName(resource);
        if (metricsMap.containsKey(hostname)) {
          for (          TimelineMetric metric : metricsMap.get(hostname)) {
            metricsPaddingMethod.applyPaddingStrategy(metric,temporalInfo);
            populateResource(resource,metric);
          }
        }
      }
    }
  }
  return Collections.emptySet();
}
