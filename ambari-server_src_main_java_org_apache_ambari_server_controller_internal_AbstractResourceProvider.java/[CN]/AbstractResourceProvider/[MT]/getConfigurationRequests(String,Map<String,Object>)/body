{
  List<ConfigurationRequest> configs=new LinkedList<ConfigurationRequest>();
  String desiredConfigKey=parentCategory + "/desired_config";
  if (properties.containsKey(desiredConfigKey) && properties.get(desiredConfigKey) instanceof Set) {
    Set<Map<String,Object>> configProperties=(Set<Map<String,Object>>)properties.get(desiredConfigKey);
    for (    Map<String,Object> value : configProperties) {
      ConfigurationRequest newConfig=new ConfigurationRequest();
      for (      Entry<String,Object> e : value.entrySet()) {
        String propName=PropertyHelper.getPropertyName(desiredConfigKey + '/' + e.getKey());
        String absCatategory=PropertyHelper.getPropertyCategory(desiredConfigKey + '/' + e.getKey());
        parseProperties(newConfig,absCatategory,propName,e.getValue() == null ? null : e.getValue().toString());
      }
      configs.add(newConfig);
    }
    return configs;
  }
  ConfigurationRequest config=null;
  for (  Entry<String,Object> entry : properties.entrySet()) {
    String absCategory=PropertyHelper.getPropertyCategory(entry.getKey());
    String propName=PropertyHelper.getPropertyName(entry.getKey());
    if (absCategory != null && absCategory.startsWith(desiredConfigKey)) {
      config=(null == config) ? new ConfigurationRequest() : config;
      if (entry.getValue() != null) {
        parseProperties(config,absCategory,propName,entry.getValue().toString());
      }
    }
  }
  if (config != null) {
    configs.add(config);
  }
  return configs;
}
