@staticmethod
def _check_postgre_up():
    (pg_status, retcode, out, err) = PGConfig._get_postgre_status()
    if (pg_status == PGConfig.PG_STATUS_RUNNING):
        print_info_msg('PostgreSQL is running')
        return (pg_status, 0, out, err)
    else:
        if (OS_TYPE != OSConst.OS_UBUNTU):
            print 'Running initdb: This may take upto a minute.'
            (retcode, out, err) = run_os_command(PGConfig.PG_INITDB_CMD)
            if (retcode == 0):
                print out
        print 'About to start PostgreSQL'
        try:
            process = subprocess.Popen(PGConfig.PG_START_CMD.split(' '), stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.PIPE)
            if (OS_TYPE == OSConst.OS_SUSE):
                time.sleep(20)
                result = process.poll()
                print_info_msg(('Result of postgres start cmd: ' + str(result)))
                if (result is None):
                    process.kill()
                    (pg_status, retcode, out, err) = PGConfig._get_postgre_status()
                else:
                    retcode = result
            else:
                (out, err) = process.communicate()
                retcode = process.returncode
                (pg_status, retcode, out, err) = PGConfig._get_postgre_status()
            if (pg_status == PGConfig.PG_STATUS_RUNNING):
                print_info_msg('Postgres process is running. Returning...')
                return (pg_status, 0, out, err)
        except Exception as e:
            (pg_status, retcode, out, err) = PGConfig._get_postgre_status()
            if (pg_status == PGConfig.PG_STATUS_RUNNING):
                return (pg_status, 0, out, err)
            else:
                print_error_msg(('Postgres start failed. ' + str(e)))
        return (pg_status, retcode, out, err)
