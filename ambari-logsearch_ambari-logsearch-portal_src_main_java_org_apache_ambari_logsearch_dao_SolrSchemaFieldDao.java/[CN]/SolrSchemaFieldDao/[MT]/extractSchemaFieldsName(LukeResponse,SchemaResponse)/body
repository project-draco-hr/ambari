{
  try {
    HashMap<String,String> _schemaFieldNameMap=new HashMap<>();
    HashMap<String,String> _schemaFieldTypeMap=new HashMap<>();
    for (    Entry<String,FieldInfo> e : lukeResponse.getFieldInfo().entrySet()) {
      String name=e.getKey();
      String type=e.getValue().getType();
      if (!name.contains("@") && !name.startsWith("_") && !name.contains("_md5")&& !name.contains("_ms")&& !name.contains(LogSearchConstants.NGRAM_PREFIX)&& !name.contains("tags")&& !name.contains("_str")) {
        _schemaFieldNameMap.put(name,type);
      }
    }
    List<FieldTypeDefinition> fieldTypes=schemaResponse.getSchemaRepresentation().getFieldTypes();
    for (    FieldTypeDefinition fieldType : fieldTypes) {
      Map<String,Object> fieldAttributes=fieldType.getAttributes();
      String name=(String)fieldAttributes.get("name");
      String fieldTypeJson=new JSONObject(fieldAttributes).toString();
      _schemaFieldTypeMap.put(name,fieldTypeJson);
    }
    List<Map<String,Object>> fields=schemaResponse.getSchemaRepresentation().getFields();
    for (    Map<String,Object> field : fields) {
      String name=(String)field.get("name");
      String type=(String)field.get("type");
      if (!name.contains("@") && !name.startsWith("_") && !name.contains("_md5")&& !name.contains("_ms")&& !name.contains(LogSearchConstants.NGRAM_PREFIX)&& !name.contains("tags")&& !name.contains("_str")) {
        _schemaFieldNameMap.put(name,type);
      }
    }
    if (_schemaFieldNameMap.isEmpty() || _schemaFieldTypeMap.isEmpty()) {
      return;
    }
synchronized (this) {
      schemaFieldNameMap=_schemaFieldNameMap;
      schemaFieldTypeMap=_schemaFieldTypeMap;
    }
  }
 catch (  Exception e) {
    LOG.error(e + "Credentials not specified in logsearch.properties " + MessageEnums.ERROR_SYSTEM);
  }
}
