{
  try {
    JSONObject jsonObject=new JSONObject(responseString);
    JSONObject schemajsonObject=jsonObject.getJSONObject("schema");
    JSONArray jsonArrayList=schemajsonObject.getJSONArray("fields");
    JSONArray fieldTypeJsonArray=schemajsonObject.getJSONArray("fieldTypes");
    if (jsonArrayList == null) {
      return;
    }
    if (fieldTypeJsonArray == null) {
      return;
    }
    HashMap<String,String> _schemaFieldTypeMap=new HashMap<>();
    HashMap<String,String> _schemaFieldsNameMap=new HashMap<String,String>();
    for (int i=0; i < fieldTypeJsonArray.length(); i++) {
      JSONObject typeObject=fieldTypeJsonArray.getJSONObject(i);
      String name=typeObject.getString("name");
      String fieldTypeJson=typeObject.toString();
      _schemaFieldTypeMap.put(name,fieldTypeJson);
    }
    for (int i=0; i < jsonArrayList.length(); i++) {
      JSONObject explrObject=jsonArrayList.getJSONObject(i);
      String name=explrObject.getString("name");
      String type=explrObject.getString("type");
      if (!name.contains("@") && !name.startsWith("_") && !name.contains("_md5")&& !name.contains("_ms")&& !name.contains(LogSearchConstants.NGRAM_SUFFIX)&& !name.contains("tags")&& !name.contains("_str")) {
        _schemaFieldsNameMap.put(name,type);
      }
    }
    schemaFieldsNameMap.clear();
    schemaFieldTypeMap.clear();
    schemaFieldsNameMap.putAll(_schemaFieldsNameMap);
    schemaFieldTypeMap.putAll(_schemaFieldTypeMap);
  }
 catch (  Exception e) {
    LOG.error(e + "Credentials not specified in logsearch.properties " + MessageEnums.ERROR_SYSTEM);
  }
}
