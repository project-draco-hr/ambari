def __init__(self, options, properties, storage_type):
    self.dbPropKeys = DbPropKeys(JDBC_METRICS_DATABASE_PROPERTY, JDBC_METRICS_DRIVER_PROPERTY, JDBC_METRICS_HOSTNAME_PROPERTY, JDBC_METRICS_PORT_PROPERTY, JDBC_METRICS_SCHEMA_PROPERTY, JDBC_METRICS_URL_PROPERTY)
    self.dbAuthKeys = SqlServerAuthenticationKeys(JDBC_METRICS_USE_INTEGRATED_AUTH_PROPERTY, JDBC_METRICS_USER_NAME_PROPERTY, JDBC_METRICS_PASSWORD_PROPERTY, JDBC_METRICS_PASSWORD_ALIAS, JDBC_METRICS_PASSWORD_FILENAME)
    super(SQLServerMetricsDBConfig, self).__init__(options, properties, storage_type)
    self.database_name = METRICS_DATABASE_NAME
    self.persistence_property = METRICS_PERSISTENCE_TYPE_PROPERTY
    self.db_title = 'metrics'
    self.env_var_db_name = 'METRICSDBNAME'
    self.env_var_db_log_name = 'METRICSDBLOGNAME'
    self.env_var_db_owner = 'METRICSDBOWNER'
    if ((options.init_metrics_db_script_file is not None) and (options.init_metrics_db_script_file is not '')):
        self.init_script_file = compress_backslashes(options.init_db_script_file)
    else:
        self.init_script_file = (('resources' + os.sep) + 'Hadoop-Metrics-SQLServer-CREATE.sql')
    if ((options.cleanup_metrics_db_script_file is not None) and (options.cleanup_metrics_db_script_file is not '')):
        self.drop_tables_script_file = compress_backslashes(options.cleanup_db_script_file)
    else:
        self.drop_tables_script_file = (('resources' + os.sep) + 'Hadoop-Metrics-SQLServer-DROP.sql')
    pass
