def __init__(self, options, properties, storage_type):
    super(MSSQLConfig, self).__init__(options, properties, storage_type)
    '\n    #Just load the defaults. The derived classes will be able to modify them later\n    '
    self.dbms = DATABASE_DBMS_MSSQL
    self.driver_class_name = DATABASE_DRIVER_NAME_MSSQL
    self.JDBC_DRIVER_INSTALL_MSG = 'Before starting Ambari Server, you must install the SQL Server JDBC driver.'
    self.database_host = DBMSConfig._init_member_with_prop_default(options, 'database_host', properties, self.dbPropKeys.server_key, '')
    try:
        if (not self.database_host):
            self.database_host = options.default_database_host
        else:
            self.database_host = compress_backslashes(self.database_host)
    except:
        self.database_host = DATABASE_SERVER_MSSQL_DEFAULT
        pass
    self.database_port = DBMSConfig._init_member_with_prop_default(options, 'database_port', properties, self.dbPropKeys.port_key, '1433')
    self.database_name = DBMSConfig._init_member_with_prop_default(options, 'database_name', properties, self.dbPropKeys.db_name_key, configDefaults.DEFAULT_DB_NAME)
    self.use_windows_authentication = cbool(DBMSConfig._init_member_with_prop_default(options, 'database_windows_auth', properties, self.dbAuthKeys.integrated_auth_key, False))
    self.database_username = DBMSConfig._init_member_with_prop_default(options, 'database_username', properties, self.dbAuthKeys.user_name_key, DEFAULT_USERNAME)
    self.database_password = DBMSConfig._init_member_with_default(options, 'database_password', '')
    if (not self.database_password):
        self.database_password = DBMSConfig._read_password_from_properties(properties)
    self.database_url = self._build_sql_server_connection_string()
    self.persistence_property = None
    self.env_var_db_name = ''
    self.env_var_db_log_name = ''
    self.env_var_db_owner = ''
    self.init_script_file = ''
    self.drop_tables_script_file = ''
