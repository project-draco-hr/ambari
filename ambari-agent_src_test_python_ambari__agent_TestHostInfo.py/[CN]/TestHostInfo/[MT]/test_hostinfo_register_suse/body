@not_for_platform(PLATFORM_WINDOWS)
@patch.object(OSCheck, 'get_os_type')
@patch('os.umask')
@patch.object(HostCheckReportFileHandler, 'writeHostCheckFile')
@patch('resource_management.libraries.functions.packages_analyzer.allAvailablePackages')
@patch('resource_management.libraries.functions.packages_analyzer.allInstalledPackages')
@patch('resource_management.libraries.functions.packages_analyzer.getPackageDetails')
@patch('resource_management.libraries.functions.packages_analyzer.getInstalledPkgsByNames')
@patch('resource_management.libraries.functions.packages_analyzer.getInstalledPkgsByRepo')
@patch('resource_management.libraries.functions.packages_analyzer.getInstalledRepos')
@patch.object(HostInfoLinux, 'checkUsers')
@patch.object(HostInfoLinux, 'checkLiveServices')
@patch.object(HostInfoLinux, 'javaProcs')
@patch.object(HostInfoLinux, 'checkFolders')
@patch.object(HostInfoLinux, 'etcAlternativesConf')
@patch.object(HostInfoLinux, 'hadoopVarRunCount')
@patch.object(HostInfoLinux, 'hadoopVarLogCount')
@patch.object(HostInfoLinux, 'checkFirewall')
def test_hostinfo_register_suse(self, cit_mock, hvlc_mock, hvrc_mock, eac_mock, cf_mock, jp_mock, cls_mock, cu_mock, gir_mock, gipbr_mock, gipbn_mock, gpd_mock, aip_mock, aap_mock, whcf_mock, os_umask_mock, get_os_type_mock):
    cit_mock.return_value = True
    hvlc_mock.return_value = 1
    hvrc_mock.return_value = 1
    gipbr_mock.return_value = ['pkg1']
    gipbn_mock.return_value = ['pkg2']
    gpd_mock.return_value = ['pkg1', 'pkg2']
    get_os_type_mock.return_value = 'suse'
    hostInfo = HostInfoLinux()
    dict = {}
    hostInfo.register(dict, False, False)
    self.assertTrue(cit_mock.called)
    self.assertTrue(os_umask_mock.called)
    self.assertTrue(whcf_mock.called)
    self.assertTrue(('agentTimeStampAtReporting' in dict['hostHealth']))
