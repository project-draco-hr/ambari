@only_for_platform(PLATFORM_LINUX)
@patch.object(OSCheck, 'get_os_type')
@patch('os.umask')
@patch.object(HostCheckReportFileHandler, 'writeHostCheckFile')
@patch.object(PackagesAnalyzer, 'allAvailablePackages')
@patch.object(PackagesAnalyzer, 'allInstalledPackages')
@patch.object(PackagesAnalyzer, 'getPackageDetails')
@patch.object(PackagesAnalyzer, 'getInstalledPkgsByNames')
@patch.object(PackagesAnalyzer, 'getInstalledPkgsByRepo')
@patch.object(PackagesAnalyzer, 'getInstalledRepos')
@patch.object(HostInfoLinux, 'checkUsers')
@patch.object(HostInfoLinux, 'checkLiveServices')
@patch.object(HostInfoLinux, 'javaProcs')
@patch.object(HostInfoLinux, 'checkFolders')
@patch.object(HostInfoLinux, 'etcAlternativesConf')
@patch.object(HostInfoLinux, 'hadoopVarRunCount')
@patch.object(HostInfoLinux, 'hadoopVarLogCount')
@patch.object(HostInfoLinux, 'checkIptables')
def test_hostinfo_register_suse(self, cit_mock, hvlc_mock, hvrc_mock, eac_mock, cf_mock, jp_mock, cls_mock, cu_mock, gir_mock, gipbr_mock, gipbn_mock, gpd_mock, aip_mock, aap_mock, whcf_mock, os_umask_mock, get_os_type_mock):
    cit_mock.return_value = True
    hvlc_mock.return_value = 1
    hvrc_mock.return_value = 1
    gipbr_mock.return_value = ['pkg1']
    gipbn_mock.return_value = ['pkg2']
    gpd_mock.return_value = ['pkg1', 'pkg2']
    get_os_type_mock.return_value = 'suse'
    hostInfo = HostInfoLinux()
    dict = {}
    hostInfo.register(dict, False, False)
    self.assertTrue(cit_mock.called)
    self.assertTrue(gir_mock.called)
    self.assertTrue(gpd_mock.called)
    self.assertTrue(aip_mock.called)
    self.assertTrue(aap_mock.called)
    self.assertTrue(os_umask_mock.called)
    self.assertTrue(whcf_mock.called)
    self.assertTrue((0 < len(dict['installedPackages'])))
    self.assertTrue(('agentTimeStampAtReporting' in dict['hostHealth']))
