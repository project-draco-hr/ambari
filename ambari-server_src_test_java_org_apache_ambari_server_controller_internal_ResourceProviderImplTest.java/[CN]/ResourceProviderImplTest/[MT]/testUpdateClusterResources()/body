{
  Resource.Type type=Resource.Type.Cluster;
  AmbariManagementController managementController=createMock(AmbariManagementController.class);
  TrackActionResponse response=createNiceMock(TrackActionResponse.class);
  Set<ClusterResponse> nameResponse=new HashSet<ClusterResponse>();
  nameResponse.add(new ClusterResponse(102L,"Cluster102",null));
  expect(managementController.getClusters(Matchers.clusterRequest(null,"Cluster102",null,null))).andReturn(nameResponse).once();
  expect(managementController.updateCluster(Matchers.clusterRequest(102L,null,"4.02",null))).andReturn(response).once();
  expect(managementController.updateCluster(Matchers.clusterRequest(103L,null,"4.02",null))).andReturn(response).once();
  replay(managementController,response);
  ResourceProvider provider=ResourceProviderImpl.getResourceProvider(type,new LinkedList<PropertyProvider>(),PropertyHelper.getPropertyIds(type,"DB"),PropertyHelper.getKeyPropertyIds(type),managementController);
  Map<PropertyId,String> properties=new LinkedHashMap<PropertyId,String>();
  properties.put(ResourceProviderImpl.CLUSTER_VERSION_PROPERTY_ID,"4.02");
  Request request=PropertyHelper.getUpdateRequest(properties);
  Predicate predicate=new PredicateBuilder().property(ResourceProviderImpl.CLUSTER_NAME_PROPERTY_ID).equals("Cluster102").toPredicate();
  provider.updateResources(request,predicate);
  predicate=new PredicateBuilder().property(ResourceProviderImpl.CLUSTER_ID_PROPERTY_ID).equals("103").toPredicate();
  provider.updateResources(request,predicate);
  verify(managementController,response);
}
