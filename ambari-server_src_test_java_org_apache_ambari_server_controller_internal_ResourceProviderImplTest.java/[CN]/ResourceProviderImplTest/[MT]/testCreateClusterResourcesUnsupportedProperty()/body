{
  Resource.Type type=Resource.Type.Cluster;
  AmbariManagementController managementController=createMock(AmbariManagementController.class);
  replay(managementController);
  ResourceProvider provider=ResourceProviderImpl.getResourceProvider(type,PropertyHelper.getPropertyIds(type),PropertyHelper.getKeyPropertyIds(type),managementController);
  TestObserver observer=new TestObserver();
  ((ObservableResourceProvider)provider).addObserver(observer);
  Set<Map<String,Object>> propertySet=new LinkedHashSet<Map<String,Object>>();
  Map<String,Object> properties=new LinkedHashMap<String,Object>();
  properties.put(ClusterResourceProvider.CLUSTER_NAME_PROPERTY_ID,"Cluster100");
  properties.put(ClusterResourceProvider.CLUSTER_VERSION_PROPERTY_ID,"HDP-0.1");
  properties.put("UnsupportedProperty1","Cluster100");
  propertySet.add(properties);
  properties=new LinkedHashMap<String,Object>();
  properties.put(ClusterResourceProvider.CLUSTER_ID_PROPERTY_ID,99L);
  properties.put(ClusterResourceProvider.CLUSTER_VERSION_PROPERTY_ID,"HDP-0.1");
  properties.put("UnsupportedProperty2","Cluster100");
  propertySet.add(properties);
  Request request=PropertyHelper.getCreateRequest(propertySet);
  try {
    provider.createResources(request);
    Assert.fail("Expected UnsupportedPropertyException.");
  }
 catch (  UnsupportedPropertyException e) {
    Assert.assertEquals(Resource.Type.Cluster,e.getType());
    Assert.assertTrue(e.getPropertyIds().contains("UnsupportedProperty1"));
    Assert.assertTrue(e.getPropertyIds().contains("UnsupportedProperty2"));
  }
  verify(managementController);
}
