{
  Capture<AmbariManagementController> controllerCapture=new Capture<AmbariManagementController>();
  Injector injector=createStrictMock(Injector.class);
  Cluster cluster=createNiceMock(Cluster.class);
  ActionManager actionManager=createNiceMock(ActionManager.class);
  ClusterRequest clusterRequest=createNiceMock(ClusterRequest.class);
  Set<ClusterRequest> requests=Collections.singleton(clusterRequest);
  Map<String,String> requestProperties=Collections.singletonMap("regenerate_keytabs","true");
  KerberosHelper kerberosHelper=createMockBuilder(KerberosHelper.class).addMockedMethod("executeCustomOperations",Cluster.class,KerberosDescriptor.class,Map.class,RequestStageContainer.class).createStrictMock();
  injector.injectMembers(capture(controllerCapture));
  expect(injector.getInstance(Gson.class)).andReturn(null);
  expect(injector.getInstance(MaintenanceStateHelper.class)).andReturn(null);
  expect(injector.getInstance(KerberosHelper.class)).andReturn(kerberosHelper);
  expect(clusterRequest.getClusterId()).andReturn(1L).times(6);
  expect(clusterRequest.getSecurityType()).andReturn(SecurityType.KERBEROS).anyTimes();
  expect(clusters.getClusterById(1L)).andReturn(cluster).times(2);
  expect(cluster.getClusterName()).andReturn("cluster").times(2);
  expect(kerberosHelper.executeCustomOperations(cluster,null,requestProperties,null)).andReturn(null).once();
  replay(actionManager,cluster,clusters,injector,clusterRequest,sessionManager,kerberosHelper);
  AmbariManagementController controller=new AmbariManagementControllerImpl(actionManager,clusters,injector);
  controller.updateClusters(requests,requestProperties);
  assertSame(controller,controllerCapture.getValue());
  verify(actionManager,cluster,clusters,injector,clusterRequest,sessionManager,kerberosHelper);
}
