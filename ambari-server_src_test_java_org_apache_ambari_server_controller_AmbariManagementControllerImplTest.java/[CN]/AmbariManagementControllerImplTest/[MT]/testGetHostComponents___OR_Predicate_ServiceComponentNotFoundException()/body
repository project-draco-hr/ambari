{
  Injector injector=createStrictMock(Injector.class);
  Capture<AmbariManagementController> controllerCapture=new Capture<AmbariManagementController>();
  StackId stack=createNiceMock(StackId.class);
  Cluster cluster=createNiceMock(Cluster.class);
  final Host host=createNiceMock(Host.class);
  Service service=createNiceMock(Service.class);
  Service service2=createNiceMock(Service.class);
  ServiceComponent component=createNiceMock(ServiceComponent.class);
  ServiceComponent component2=createNiceMock(ServiceComponent.class);
  ServiceComponent component3=createNiceMock(ServiceComponent.class);
  final ServiceComponentHost componentHost1=createNiceMock(ServiceComponentHost.class);
  final ServiceComponentHost componentHost2=createNiceMock(ServiceComponentHost.class);
  ServiceComponentHostResponse response1=createNiceMock(ServiceComponentHostResponse.class);
  ServiceComponentHostResponse response2=createNiceMock(ServiceComponentHostResponse.class);
  MaintenanceStateHelper maintHelper=createNiceMock(MaintenanceStateHelper.class);
  expect(maintHelper.getEffectiveState(anyObject(ServiceComponentHost.class),anyObject(Host.class))).andReturn(MaintenanceState.OFF).anyTimes();
  ServiceComponentHostRequest request1=new ServiceComponentHostRequest("cluster1",null,"component1","host1",null);
  ServiceComponentHostRequest request2=new ServiceComponentHostRequest("cluster1",null,"component2","host1",null);
  ServiceComponentHostRequest request3=new ServiceComponentHostRequest("cluster1",null,"component3","host1",null);
  Set<ServiceComponentHostRequest> setRequests=new HashSet<ServiceComponentHostRequest>();
  setRequests.add(request1);
  setRequests.add(request2);
  setRequests.add(request3);
  injector.injectMembers(capture(controllerCapture));
  expect(injector.getInstance(Gson.class)).andReturn(null);
  expect(injector.getInstance(MaintenanceStateHelper.class)).andReturn(maintHelper).anyTimes();
  expect(clusters.getCluster("cluster1")).andReturn(cluster).times(3);
  expect(clusters.getClustersForHost("host1")).andReturn(Collections.singleton(cluster)).anyTimes();
  expect(clusters.getHostsForCluster((String)anyObject())).andReturn(new HashMap<String,Host>(){
{
      put("host1",host);
    }
  }
).anyTimes();
  expect(cluster.getDesiredStackVersion()).andReturn(stack).anyTimes();
  expect(stack.getStackName()).andReturn("stackName").anyTimes();
  expect(stack.getStackVersion()).andReturn("stackVersion").anyTimes();
  expect(ambariMetaInfo.getComponentToService("stackName","stackVersion","component1")).andReturn("service1");
  expect(cluster.getService("service1")).andReturn(service);
  expect(service.getServiceComponent("component1")).andReturn(component);
  expect(component.getName()).andReturn("component1");
  expect(component.getServiceComponentHosts()).andReturn(new HashMap<String,ServiceComponentHost>(){
{
      put("host1",componentHost1);
    }
  }
);
  expect(componentHost1.convertToResponse()).andReturn(response1);
  expect(componentHost1.getHostName()).andReturn("host1");
  expect(ambariMetaInfo.getComponentToService("stackName","stackVersion","component2")).andReturn("service2");
  expect(cluster.getService("service2")).andReturn(service2);
  expect(service2.getServiceComponent("component2")).andThrow(new ServiceComponentNotFoundException("cluster1","service2","component2"));
  expect(ambariMetaInfo.getComponentToService("stackName","stackVersion","component3")).andReturn("service1");
  expect(cluster.getService("service1")).andReturn(service);
  expect(service.getServiceComponent("component3")).andReturn(component3);
  expect(component3.getName()).andReturn("component3");
  expect(component3.getServiceComponentHosts()).andReturn(new HashMap<String,ServiceComponentHost>(){
{
      put("host1",componentHost2);
    }
  }
);
  expect(componentHost2.convertToResponse()).andReturn(response2);
  expect(componentHost2.getHostName()).andReturn("host1");
  replay(maintHelper,injector,clusters,cluster,host,stack,ambariMetaInfo,service,service2,component,component2,component3,componentHost1,componentHost2,response1,response2);
  AmbariManagementController controller=new AmbariManagementControllerImpl(null,clusters,injector);
  setAmbariMetaInfo(ambariMetaInfo,controller);
  Set<ServiceComponentHostResponse> setResponses=controller.getHostComponents(setRequests);
  assertSame(controller,controllerCapture.getValue());
  assertEquals(2,setResponses.size());
  assertTrue(setResponses.contains(response1));
  assertTrue(setResponses.contains(response2));
  verify(injector,clusters,cluster,host,stack,ambariMetaInfo,service,service2,component,component2,component3,componentHost1,componentHost2,response1,response2);
}
