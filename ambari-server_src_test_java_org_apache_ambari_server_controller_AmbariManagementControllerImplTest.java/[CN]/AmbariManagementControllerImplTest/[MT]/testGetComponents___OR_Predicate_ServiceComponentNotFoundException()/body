{
  Injector injector=createStrictMock(Injector.class);
  Capture<AmbariManagementController> controllerCapture=new Capture<AmbariManagementController>();
  Clusters clusters=createNiceMock(Clusters.class);
  Cluster cluster=createNiceMock(Cluster.class);
  Service service=createNiceMock(Service.class);
  ServiceComponent component1=createNiceMock(ServiceComponent.class);
  ServiceComponent component2=createNiceMock(ServiceComponent.class);
  ServiceComponentResponse response1=createNiceMock(ServiceComponentResponse.class);
  ServiceComponentResponse response2=createNiceMock(ServiceComponentResponse.class);
  ServiceComponentRequest request1=new ServiceComponentRequest("cluster1","service1","component1",Collections.<String,String>emptyMap(),null);
  ServiceComponentRequest request2=new ServiceComponentRequest("cluster1","service1","component2",Collections.<String,String>emptyMap(),null);
  ServiceComponentRequest request3=new ServiceComponentRequest("cluster1","service1","component3",Collections.<String,String>emptyMap(),null);
  ServiceComponentRequest request4=new ServiceComponentRequest("cluster1","service1","component4",Collections.<String,String>emptyMap(),null);
  Set<ServiceComponentRequest> setRequests=new HashSet<ServiceComponentRequest>();
  setRequests.add(request1);
  setRequests.add(request2);
  setRequests.add(request3);
  setRequests.add(request4);
  injector.injectMembers(capture(controllerCapture));
  expect(injector.getInstance(Gson.class)).andReturn(null);
  expect(clusters.getCluster("cluster1")).andReturn(cluster).times(4);
  expect(cluster.getService("service1")).andReturn(service).times(4);
  expect(service.getServiceComponent("component1")).andThrow(new ServiceComponentNotFoundException("cluster1","service1","component1"));
  expect(service.getServiceComponent("component2")).andThrow(new ServiceComponentNotFoundException("cluster1","service1","component2"));
  expect(service.getServiceComponent("component3")).andReturn(component1);
  expect(service.getServiceComponent("component4")).andReturn(component2);
  expect(component1.convertToResponse()).andReturn(response1);
  expect(component2.convertToResponse()).andReturn(response2);
  replay(injector,clusters,cluster,service,component1,component2,response1,response2);
  AmbariManagementController controller=new AmbariManagementControllerImpl(null,clusters,injector);
  Set<ServiceComponentResponse> setResponses=controller.getComponents(setRequests);
  assertSame(controller,controllerCapture.getValue());
  assertEquals(2,setResponses.size());
  assertTrue(setResponses.contains(response1));
  assertTrue(setResponses.contains(response2));
  verify(injector,clusters,cluster,service,component1,component2,response1,response2);
}
