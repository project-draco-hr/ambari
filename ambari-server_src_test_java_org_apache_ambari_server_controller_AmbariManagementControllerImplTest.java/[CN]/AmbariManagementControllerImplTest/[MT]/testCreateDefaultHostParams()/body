{
  String SOME_STACK_NAME="SomeStackName";
  String SOME_STACK_VERSION="1.0";
  String MYSQL_JAR="MYSQL_JAR";
  String JAVA_HOME="javaHome";
  String JDK_NAME="jdkName";
  String JCE_NAME="jceName";
  String OJDBC_JAR_NAME="OjdbcJarName";
  String SERVER_DB_NAME="ServerDBName";
  ActionManager manager=createNiceMock(ActionManager.class);
  StackId stackId=createNiceMock(StackId.class);
  Cluster cluster=createNiceMock(Cluster.class);
  Injector injector=createNiceMock(Injector.class);
  Configuration configuration=createNiceMock(Configuration.class);
  expect(cluster.getDesiredStackVersion()).andReturn(stackId);
  expect(stackId.getStackName()).andReturn(SOME_STACK_NAME).anyTimes();
  expect(stackId.getStackVersion()).andReturn(SOME_STACK_VERSION).anyTimes();
  expect(configuration.getMySQLJarName()).andReturn(MYSQL_JAR);
  expect(configuration.getJavaHome()).andReturn(JAVA_HOME);
  expect(configuration.getJDKName()).andReturn(JDK_NAME);
  expect(configuration.getJCEName()).andReturn(JCE_NAME);
  expect(configuration.getOjdbcJarName()).andReturn(OJDBC_JAR_NAME);
  expect(configuration.getServerDBName()).andReturn(SERVER_DB_NAME);
  replay(manager,clusters,cluster,injector,stackId,configuration);
  AmbariManagementControllerImpl ambariManagementControllerImpl=createMockBuilder(AmbariManagementControllerImpl.class).addMockedMethod("getRcaParameters").withConstructor(manager,clusters,injector).createNiceMock();
  expect(ambariManagementControllerImpl.getRcaParameters()).andReturn(new HashMap<String,String>());
  replay(ambariManagementControllerImpl);
  Class<?> amciClass=AmbariManagementControllerImpl.class;
  Field f=amciClass.getDeclaredField("configs");
  f.setAccessible(true);
  f.set(ambariManagementControllerImpl,configuration);
  TreeMap<String,String> defaultHostParams=ambariManagementControllerImpl.createDefaultHostParams(cluster);
  assertEquals(defaultHostParams.size(),10);
  assertEquals(defaultHostParams.get(DB_DRIVER_FILENAME),MYSQL_JAR);
  assertEquals(defaultHostParams.get(STACK_NAME),SOME_STACK_NAME);
  assertEquals(defaultHostParams.get(STACK_VERSION),SOME_STACK_VERSION);
}
