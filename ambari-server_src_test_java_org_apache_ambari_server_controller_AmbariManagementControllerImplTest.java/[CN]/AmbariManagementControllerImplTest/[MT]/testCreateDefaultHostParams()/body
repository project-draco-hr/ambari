{
  String clusterName="c1";
  String SOME_STACK_NAME="SomeStackName";
  String SOME_STACK_VERSION="1.0";
  String MYSQL_JAR="MYSQL_JAR";
  String JAVA_HOME="javaHome";
  String JDK_NAME="jdkName";
  String JCE_NAME="jceName";
  String OJDBC_JAR_NAME="OjdbcJarName";
  String SERVER_DB_NAME="ServerDBName";
  ActionManager manager=createNiceMock(ActionManager.class);
  StackId stackId=createNiceMock(StackId.class);
  Cluster cluster=createNiceMock(Cluster.class);
  Injector injector=createNiceMock(Injector.class);
  Configuration configuration=createNiceMock(Configuration.class);
  ClusterVersionDAO clusterVersionDAO=createNiceMock(ClusterVersionDAO.class);
  ClusterVersionEntity clusterVersionEntity=createNiceMock(ClusterVersionEntity.class);
  RepositoryVersionEntity repositoryVersionEntity=createNiceMock(RepositoryVersionEntity.class);
  expect(cluster.getClusterName()).andReturn(clusterName);
  expect(cluster.getDesiredStackVersion()).andReturn(stackId);
  expect(stackId.getStackName()).andReturn(SOME_STACK_NAME).anyTimes();
  expect(stackId.getStackVersion()).andReturn(SOME_STACK_VERSION).anyTimes();
  expect(configuration.getMySQLJarName()).andReturn(MYSQL_JAR);
  expect(configuration.getJavaHome()).andReturn(JAVA_HOME);
  expect(configuration.getJDKName()).andReturn(JDK_NAME);
  expect(configuration.getJCEName()).andReturn(JCE_NAME);
  expect(configuration.getOjdbcJarName()).andReturn(OJDBC_JAR_NAME);
  expect(configuration.getServerDBName()).andReturn(SERVER_DB_NAME);
  expect(configuration.getJavaVersion()).andReturn(8);
  expect(configuration.areHostsSysPrepped()).andReturn("true");
  expect(clusterVersionDAO.findByClusterAndStateCurrent(clusterName)).andReturn(clusterVersionEntity).anyTimes();
  expect(clusterVersionEntity.getRepositoryVersion()).andReturn(repositoryVersionEntity).anyTimes();
  expect(repositoryVersionEntity.getVersion()).andReturn("1234").anyTimes();
  replay(manager,clusters,cluster,injector,stackId,configuration,clusterVersionDAO,clusterVersionEntity,repositoryVersionEntity);
  AmbariManagementControllerImpl ambariManagementControllerImpl=createMockBuilder(AmbariManagementControllerImpl.class).addMockedMethod("getRcaParameters").withConstructor(manager,clusters,injector).createNiceMock();
  expect(ambariManagementControllerImpl.getRcaParameters()).andReturn(new HashMap<String,String>());
  replay(ambariManagementControllerImpl);
  Class<?> amciClass=AmbariManagementControllerImpl.class;
  Field f=amciClass.getDeclaredField("configs");
  f.setAccessible(true);
  f.set(ambariManagementControllerImpl,configuration);
  AmbariCustomCommandExecutionHelper helper=new AmbariCustomCommandExecutionHelper();
  Class<?> helperClass=AmbariCustomCommandExecutionHelper.class;
  f=helperClass.getDeclaredField("managementController");
  f.setAccessible(true);
  f.set(helper,ambariManagementControllerImpl);
  f=helperClass.getDeclaredField("configs");
  f.setAccessible(true);
  f.set(helper,configuration);
  f=helperClass.getDeclaredField("clusterVersionDAO");
  f.setAccessible(true);
  f.set(helper,clusterVersionDAO);
  Map<String,String> defaultHostParams=helper.createDefaultHostParams(cluster);
  assertEquals(defaultHostParams.size(),13);
  assertEquals(defaultHostParams.get(DB_DRIVER_FILENAME),MYSQL_JAR);
  assertEquals(defaultHostParams.get(STACK_NAME),SOME_STACK_NAME);
  assertEquals(defaultHostParams.get(STACK_VERSION),SOME_STACK_VERSION);
  assertEquals("true",defaultHostParams.get(HOST_SYS_PREPPED));
  assertEquals("8",defaultHostParams.get(JAVA_VERSION));
}
