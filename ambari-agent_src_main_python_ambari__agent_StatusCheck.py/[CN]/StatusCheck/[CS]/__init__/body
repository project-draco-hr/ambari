def __init__(self, serviceToPidDict, pidPathVars, globalConfig, servicesToLinuxUser):
    self.serToPidDict = serviceToPidDict.copy()
    self.pidPathVars = pidPathVars
    self.pidPathes = []
    self.sh = shellRunner()
    self.pidFilesDict = {}
    self.globalConfig = globalConfig
    self.servicesToLinuxUser = servicesToLinuxUser
    self.fillDirValues()
    for pidPath in self.pidPathes:
        self.listFiles(pidPath)
    for (service, pid) in self.serToPidDict.items():
        if self.servicesToLinuxUser.has_key(service):
            linuxUserKey = self.servicesToLinuxUser[service]
            if self.globalConfig.has_key(linuxUserKey):
                self.serToPidDict[service] = string.replace(pid, self.USER_PATTERN, self.globalConfig[linuxUserKey])
        elif (self.USER_PATTERN in pid):
            logger.error(('There is no linux user mapping for component: ' + service))
    if StatusCheck.firstInit:
        logger.info(('Service to pid dictionary: ' + str(self.serToPidDict)))
        StatusCheck.firstInit = False
    else:
        logger.debug(('Service to pid dictionary: ' + str(self.serToPidDict)))
