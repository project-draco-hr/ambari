{
  final GroupPrivilegeResourceProvider resourceProvider=new GroupPrivilegeResourceProvider();
  final GroupDAO groupDAO=createNiceMock(GroupDAO.class);
  final ClusterDAO clusterDAO=createNiceMock(ClusterDAO.class);
  final ViewInstanceDAO viewInstanceDAO=createNiceMock(ViewInstanceDAO.class);
  final GroupEntity groupEntity=createNiceMock(GroupEntity.class);
  final PrincipalEntity principalEntity=createNiceMock(PrincipalEntity.class);
  final PrivilegeEntity privilegeEntity=createNiceMock(PrivilegeEntity.class);
  final PermissionEntity permissionEntity=createNiceMock(PermissionEntity.class);
  final PrincipalTypeEntity principalTypeEntity=createNiceMock(PrincipalTypeEntity.class);
  final ResourceEntity resourceEntity=createNiceMock(ResourceEntity.class);
  final ResourceTypeEntity resourceTypeEntity=createNiceMock(ResourceTypeEntity.class);
  final PrivilegeDAO privilegeDAO=createNiceMock(PrivilegeDAO.class);
  expect(groupDAO.findGroupByName(requestedGroupName)).andReturn(groupEntity).anyTimes();
  expect(groupEntity.getPrincipal()).andReturn(principalEntity).anyTimes();
  expect(groupEntity.getMemberEntities()).andReturn(Collections.<MemberEntity>emptySet()).anyTimes();
  expect(privilegeEntity.getPermission()).andReturn(permissionEntity).anyTimes();
  expect(privilegeEntity.getPrincipal()).andReturn(principalEntity).anyTimes();
  expect(principalEntity.getPrincipalType()).andReturn(principalTypeEntity).anyTimes();
  expect(principalTypeEntity.getName()).andReturn(PrincipalTypeEntity.GROUP_PRINCIPAL_TYPE_NAME).anyTimes();
  expect(principalEntity.getPrivileges()).andReturn(new HashSet<PrivilegeEntity>(){
{
      add(privilegeEntity);
    }
  }
).anyTimes();
  expect(groupDAO.findGroupByPrincipal(anyObject(PrincipalEntity.class))).andReturn(groupEntity).anyTimes();
  expect(groupEntity.getGroupName()).andReturn(requestedGroupName).anyTimes();
  expect(privilegeEntity.getResource()).andReturn(resourceEntity).anyTimes();
  expect(resourceEntity.getResourceType()).andReturn(resourceTypeEntity).anyTimes();
  expect(resourceTypeEntity.getName()).andReturn(ResourceType.AMBARI.name());
  expect(viewInstanceDAO.findAll()).andReturn(Lists.<ViewInstanceEntity>newArrayList()).anyTimes();
  replayAll();
  GroupPrivilegeResourceProvider.init(clusterDAO,groupDAO,viewInstanceDAO,privilegeDAO);
  final Set<String> propertyIds=new HashSet<String>();
  propertyIds.add(GroupPrivilegeResourceProvider.PRIVILEGE_GROUP_NAME_PROPERTY_ID);
  final Predicate predicate=new PredicateBuilder().property(GroupPrivilegeResourceProvider.PRIVILEGE_GROUP_NAME_PROPERTY_ID).equals(requestedGroupName).toPredicate();
  Request request=PropertyHelper.getReadRequest(propertyIds);
  SecurityContextHolder.getContext().setAuthentication(authentication);
  Set<Resource> resources=resourceProvider.getResources(request,predicate);
  Assert.assertEquals(1,resources.size());
  for (  Resource resource : resources) {
    String groupName=(String)resource.getPropertyValue(GroupPrivilegeResourceProvider.PRIVILEGE_GROUP_NAME_PROPERTY_ID);
    Assert.assertEquals(requestedGroupName,groupName);
  }
  verifyAll();
}
