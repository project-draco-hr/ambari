def test_heartbeat_retries(self):
    netutil = NetUtil()
    netutil.HEARTBEAT_IDDLE_INTERVAL_SEC = 0.1
    netutil.HEARTBEAT_NOT_IDDLE_INTERVAL_SEC = 0.1
    testsPath = os.path.dirname(os.path.realpath(__file__))
    dictPath = ((((((((((((testsPath + os.sep) + '..') + os.sep) + '..') + os.sep) + 'main') + os.sep) + 'python') + os.sep) + 'ambari_agent') + os.sep) + 'servicesToPidNames.dict')
    AmbariConfig.config.set('services', 'serviceToPidMapFile', dictPath)
    actionQueue = ActionQueue(AmbariConfig.AmbariConfig().getConfig())
    heartbeat = Heartbeat(actionQueue)
    controller = Controller(AmbariConfig.config)
    controller.heartbeat = heartbeat
    controller.heartbeatUrl = BAD_URL
    controller.actionQueue = actionQueue
    controller.logger = self.logger
    controller.netutil = netutil
    thread = Thread(target=controller.heartbeatWithServer)
    thread.start()
    time.sleep(1)
    threadWasAlive = thread.isAlive()
    successfull_heartbits0 = controller.DEBUG_SUCCESSFULL_HEARTBEATS
    heartbeat_retries0 = controller.DEBUG_HEARTBEAT_RETRIES
    controller.DEBUG_STOP_HEARTBITTING = True
    time.sleep(1)
    self.assertEquals(threadWasAlive, True, 'Heartbeat should be alive now')
    self.assertEquals(successfull_heartbits0, 0, 'Heartbeat should not have any success')
    self.assertGreater(heartbeat_retries0, 1, 'Heartbeat should retry connecting')
    self.assertEquals(thread.isAlive(), False, 'Heartbeat should stop now')
    self.assertEquals(controller.DEBUG_SUCCESSFULL_HEARTBEATS, 0, 'Heartbeat should not have any success')
