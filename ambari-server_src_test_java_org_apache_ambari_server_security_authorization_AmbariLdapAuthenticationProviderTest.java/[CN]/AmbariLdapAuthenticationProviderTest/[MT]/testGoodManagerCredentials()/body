{
  AmbariLdapAuthoritiesPopulator authoritiesPopulator=createMock(AmbariLdapAuthoritiesPopulator.class);
  AmbariLdapAuthenticationProvider provider=createMockBuilder(AmbariLdapAuthenticationProvider.class).addMockedMethod("loadLdapAuthenticationProvider").addMockedMethod("isLdapEnabled").withConstructor(configuration,authoritiesPopulator).createMock();
  org.springframework.security.core.AuthenticationException exception=createNiceMock(org.springframework.security.core.AuthenticationException.class);
  expect(exception.getCause()).andReturn(exception).atLeastOnce();
  expect(provider.isLdapEnabled()).andReturn(true);
  expect(provider.loadLdapAuthenticationProvider()).andThrow(exception);
  Logger log=createNiceMock(Logger.class);
  provider.LOG=log;
  log.warn(find("LDAP manager credentials"),(Throwable)anyObject());
  expectLastCall().andAnswer(new IAnswer<Object>(){
    @Override public Object answer() throws Throwable {
      fail("Should not print warning when LDAP manager credentials are not wrong");
      return null;
    }
  }
).anyTimes();
  replayAll();
  Authentication authentication=new UsernamePasswordAuthenticationToken("notFound","wrong");
  try {
    provider.authenticate(authentication);
    fail("Should throw exception");
  }
 catch (  org.springframework.security.core.AuthenticationException e) {
  }
  verifyAll();
}
