{
  AmbariLdapAuthoritiesPopulator authoritiesPopulator=createMock(AmbariLdapAuthoritiesPopulator.class);
  AmbariLdapAuthenticationProvider provider=createMockBuilder(AmbariLdapAuthenticationProvider.class).addMockedMethod("loadLdapAuthenticationProvider").addMockedMethod("isLdapEnabled").withConstructor(configuration,authoritiesPopulator).createMock();
  org.springframework.ldap.AuthenticationException cause=createNiceMock(org.springframework.ldap.AuthenticationException.class);
  org.springframework.security.core.AuthenticationException exception=createNiceMock(org.springframework.security.core.AuthenticationException.class);
  expect(exception.getCause()).andReturn(cause).atLeastOnce();
  expect(provider.isLdapEnabled()).andReturn(true);
  expect(provider.loadLdapAuthenticationProvider("notFound")).andThrow(exception);
  Logger log=createNiceMock(Logger.class);
  provider.LOG=log;
  log.warn(find("LDAP manager credentials"),(Throwable)anyObject());
  expectLastCall().atLeastOnce();
  replayAll();
  Authentication authentication=new UsernamePasswordAuthenticationToken("notFound","wrong");
  try {
    provider.authenticate(authentication);
    fail("Should throw exception");
  }
 catch (  org.springframework.security.core.AuthenticationException e) {
  }
  verifyAll();
}
