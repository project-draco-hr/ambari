def security_status(self, env):
    import status_params
    env.set_params(status_params)
    if status_params.security_enabled:
        try:
            props_value_check = None
            props_empty_check = ['Server/keyTab', 'Server/principal']
            props_read_check = ['Server/keyTab']
            zk_env_expectations = build_expectations('zookeeper_jaas', props_value_check, props_empty_check, props_read_check)
            zk_expectations = {}
            zk_expectations.update(zk_env_expectations)
            security_params = get_params_from_filesystem(status_params.config_dir, {'zookeeper_jaas.conf': FILE_TYPE_JAAS_CONF, })
            result_issues = validate_security_config_properties(security_params, zk_expectations)
            if (not result_issues):
                if (('zookeeper_jaas' not in security_params) or ('Server' not in security_params['zookeeper_jaas']) or ('keyTab' not in security_params['zookeeper_jaas']['Server']) or ('principal' not in security_params['zookeeper_jaas']['Server'])):
                    self.put_structured_out({'securityState': 'ERROR', })
                    self.put_structured_out({'securityIssuesFound': 'Keytab file or principal are not set property.', })
                    return
                cached_kinit_executor(status_params.kinit_path_local, status_params.zk_user, security_params['zookeeper_jaas']['Server']['keyTab'], security_params['zookeeper_jaas']['Server']['principal'], status_params.hostname, status_params.tmp_dir)
                self.put_structured_out({'securityState': 'SECURED_KERBEROS', })
            else:
                issues = []
                for cf in result_issues:
                    issues.append(('Configuration file %s did not pass the validation. Reason: %s' % (cf, result_issues[cf])))
                self.put_structured_out({'securityIssuesFound': '. '.join(issues), })
                self.put_structured_out({'securityState': 'UNSECURED', })
        except Exception as e:
            self.put_structured_out({'securityState': 'ERROR', })
            self.put_structured_out({'securityStateErrorInfo': str(e), })
    else:
        self.put_structured_out({'securityState': 'UNSECURED', })
