def oozie(is_server=False):
    import params
    if is_server:
        params.HdfsDirectory(params.oozie_hdfs_user_dir, action='create', owner=params.oozie_user, mode=params.oozie_hdfs_user_mode)
    oozie_site = dict(params.config['configurations']['oozie-site'])
    oozie_site['oozie.services.ext'] = ('org.apache.oozie.service.JMSAccessorService,' + oozie_site['oozie.services.ext'])
    XmlConfig('oozie-site.xml', conf_dir=params.conf_dir, configurations=oozie_site, owner=params.oozie_user, group=params.user_group, mode=436)
    Directory(params.conf_dir, owner=params.oozie_user, group=params.user_group)
    TemplateConfig(format('{conf_dir}/oozie-env.sh'), owner=params.oozie_user)
    if (params.log4j_props != None):
        File(format('{params.conf_dir}/oozie-log4j.properties'), mode=420, group=params.user_group, owner=params.oozie_user, content=params.log4j_props)
    elif os.path.exists(format('{params.conf_dir}/oozie-log4j.properties')):
        File(format('{params.conf_dir}/oozie-log4j.properties'), mode=420, group=params.user_group, owner=params.oozie_user)
    if ((params.jdbc_driver_name == 'com.mysql.jdbc.Driver') or (params.jdbc_driver_name == 'org.postgresql.Driver') or (params.jdbc_driver_name == 'oracle.jdbc.driver.OracleDriver')):
        Execute(format("/bin/sh -c 'cd /usr/lib/ambari-agent/ &&    curl -kf --retry 5 {jdk_location}{check_db_connection_jar_name}     -o {check_db_connection_jar_name}'"), not_if=format('[ -f {check_db_connection_jar} ]'))
    oozie_ownership()
    if is_server:
        oozie_server_specific()
