{
  SolrQuery solrQuery=new SolrQuery();
  solrQuery.setQuery("*:*");
  String fq=LogSearchConstants.ROW_TYPE + ":" + LogSearchConstants.LOGFEEDER_FILTER_NAME;
  solrQuery.setFilterQueries(fq);
  QueryResponse response=process(solrQuery);
  SolrDocumentList documentList=response.getResults();
  VLogfeederFilterWrapper logfeederFilterWrapper=null;
  if (!CollectionUtils.isEmpty(documentList)) {
    SolrDocument configDoc=documentList.get(0);
    String configJson=jsonUtil.objToJson(configDoc);
    HashMap<String,Object> configMap=(HashMap<String,Object>)jsonUtil.jsonToMapObject(configJson);
    String json=(String)configMap.get(LogSearchConstants.VALUES);
    logfeederFilterWrapper=(VLogfeederFilterWrapper)jsonUtil.jsonToObj(json,VLogfeederFilterWrapper.class);
    logfeederFilterWrapper.setId("" + configDoc.get(LogSearchConstants.ID));
  }
 else {
    String logfeederDefaultLevels=PropertiesUtil.getProperty("logsearch.logfeeder.include.default.level",DEFAULT_LEVELS);
    JSONArray levelJsonArray=new JSONArray(Arrays.asList(logfeederDefaultLevels.split(",")));
    String hadoopServiceString=getHadoopServiceConfigJSON();
    String key=null;
    JSONArray componentArray=null;
    try {
      JSONObject componentList=new JSONObject();
      JSONObject jsonValue=new JSONObject();
      JSONObject hadoopServiceJsonObject=new JSONObject(hadoopServiceString).getJSONObject("service");
      Iterator<String> hadoopSerivceKeys=hadoopServiceJsonObject.keys();
      while (hadoopSerivceKeys.hasNext()) {
        key=hadoopSerivceKeys.next();
        componentArray=hadoopServiceJsonObject.getJSONObject(key).getJSONArray("components");
        for (int i=0; i < componentArray.length(); i++) {
          JSONObject compJsonObject=(JSONObject)componentArray.get(i);
          String componentName=compJsonObject.getString("name");
          JSONObject innerContent=new JSONObject();
          innerContent.put("label",componentName);
          innerContent.put("hosts",new JSONArray());
          innerContent.put("defaultLevels",levelJsonArray);
          componentList.put(componentName,innerContent);
        }
      }
      jsonValue.put("filter",componentList);
      logfeederFilterWrapper=(VLogfeederFilterWrapper)jsonUtil.jsonToObj(jsonValue.toString(),VLogfeederFilterWrapper.class);
      logfeederFilterWrapper.setId("" + new Date().getTime());
      saveUserFilter(logfeederFilterWrapper);
    }
 catch (    JsonParseException|JSONException je) {
      logger.error("Error parsing JSON. key=" + key + ", componentArray="+ componentArray,je);
      logfeederFilterWrapper=new VLogfeederFilterWrapper();
    }
  }
  return logfeederFilterWrapper;
}
