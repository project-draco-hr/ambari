{
  Injector injector=Guice.createInjector(new SchemaUpgradeHelper.UpgradeHelperModule(properties){
    @Override protected void configure(){
      super.configure();
      ViewRegistry viewRegistryMock=EasyMock.createNiceMock(ViewRegistry.class);
      bind(ViewRegistry.class).toInstance(viewRegistryMock);
    }
  }
);
  SchemaUpgradeHelper schemaUpgradeHelper=injector.getInstance(SchemaUpgradeHelper.class);
  LOG.info("Upgrading schema to target version = " + targetVersion);
  UpgradeCatalog targetUpgradeCatalog=AbstractUpgradeCatalog.getUpgradeCatalog(targetVersion);
  LOG.debug("Target upgrade catalog. " + targetUpgradeCatalog);
  String sourceVersion=schemaUpgradeHelper.readSourceVersion();
  LOG.info("Upgrading schema from source version = " + sourceVersion);
  List<UpgradeCatalog> upgradeCatalogs=schemaUpgradeHelper.getUpgradePath(sourceVersion,targetVersion);
  assertTrue("Final Upgrade Catalog should be run last",!upgradeCatalogs.isEmpty() && upgradeCatalogs.get(upgradeCatalogs.size() - 1).isFinal());
  try {
    schemaUpgradeHelper.executeUpgrade(upgradeCatalogs);
  }
 catch (  Exception e) {
    if (e.getMessage().contains("Column 'T.HOST_NAME' is either not in any table in the FROM list") || e.getMessage().contains("Column 'T.HOSTNAME' is either not in any table in the FROM list")) {
      System.out.println("Ignoring on purpose, " + e.getMessage());
    }
 else {
      throw e;
    }
  }
  schemaUpgradeHelper.startPersistenceService();
  schemaUpgradeHelper.executePreDMLUpdates(upgradeCatalogs);
  schemaUpgradeHelper.executeDMLUpdates(upgradeCatalogs,"test");
  schemaUpgradeHelper.executeOnPostUpgrade(upgradeCatalogs);
  LOG.info("Upgrade successful.");
  schemaUpgradeHelper.stopPersistenceService();
}
