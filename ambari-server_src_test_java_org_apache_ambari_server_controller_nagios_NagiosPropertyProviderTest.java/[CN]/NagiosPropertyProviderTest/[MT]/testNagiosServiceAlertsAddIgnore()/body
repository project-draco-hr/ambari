{
  module.getProperties().setProperty(Configuration.NAGIOS_IGNORE_FOR_SERVICES_KEY,"HBase Master process on c6401.ambari.apache.org");
  Cluster cluster=clusters.getCluster("c1");
  Service service=cluster.addService("NAGIOS");
  service.setDesiredStackVersion(new StackId("HDP-2.0.5"));
  service.persist();
  ServiceComponent sc=service.addServiceComponent("NAGIOS_SERVER");
  sc.setDesiredStackVersion(new StackId("HDP-2.0.5"));
  sc.addServiceComponentHost(HOST);
  sc.persist();
  TestStreamProvider streamProvider=new TestStreamProvider("nagios_alerts.txt");
  NagiosPropertyProvider npp=new NagiosPropertyProvider(Resource.Type.Service,streamProvider,"ServiceInfo/cluster_name","ServiceInfo/service_name");
  npp.forceReset();
  NagiosPropertyProvider.init(injector);
  Resource resource=new ResourceImpl(Resource.Type.Service);
  resource.setProperty("ServiceInfo/cluster_name","c1");
  resource.setProperty("ServiceInfo/service_name","HBASE");
  Request request=PropertyHelper.getReadRequest(Collections.<String>emptySet(),new HashMap<String,TemporalInfo>());
  Set<Resource> set=npp.populateResources(Collections.singleton(resource),request,null);
  Assert.assertEquals(1,set.size());
  Resource res=set.iterator().next();
  Map<String,Map<String,Object>> values=res.getPropertiesMap();
  Assert.assertTrue(values.containsKey("alerts"));
  Assert.assertTrue(values.containsKey("alerts/summary"));
  Assert.assertTrue(values.get("alerts").containsKey("detail"));
  Assert.assertTrue(List.class.isInstance(values.get("alerts").get("detail")));
  List<?> list=(List<?>)values.get("alerts").get("detail");
  Assert.assertEquals(Integer.valueOf(2),Integer.valueOf(list.size()));
  for (  Object o : list) {
    Assert.assertTrue(Map.class.isInstance(o));
    Map<?,?> map=(Map<?,?>)o;
    Assert.assertTrue(map.containsKey("service_name"));
    String serviceName=map.get("service_name").toString();
    Assert.assertTrue("expected HBASE",serviceName.equals("HBASE"));
  }
  Map<String,Object> summary=values.get("alerts/summary");
  Assert.assertTrue(summary.containsKey("OK"));
  Assert.assertTrue(summary.containsKey("WARNING"));
  Assert.assertTrue(summary.containsKey("CRITICAL"));
  Assert.assertTrue(summary.get("OK").equals(Integer.valueOf(1)));
  Assert.assertTrue(summary.get("WARNING").equals(Integer.valueOf(0)));
  Assert.assertTrue(summary.get("CRITICAL").equals(Integer.valueOf(1)));
}
