{
  Injector inj=Guice.createInjector(new GuiceModule());
  Clusters clusters=inj.getInstance(Clusters.class);
  Cluster cluster=createMock(Cluster.class);
  expect(cluster.getAlerts()).andReturn(Collections.<Alert>emptySet()).anyTimes();
  expect(clusters.getCluster("c1")).andReturn(cluster);
  Service nagiosService=createMock(Service.class);
  expect(cluster.getService("NAGIOS")).andReturn(nagiosService);
  ServiceComponent nagiosServiceComponent=createMock(ServiceComponent.class);
  expect(nagiosService.getServiceComponent("NAGIOS_SERVER")).andReturn(nagiosServiceComponent);
  ServiceComponentHost nagiosScHost=createMock(ServiceComponentHost.class);
  Map<String,ServiceComponentHost> map1=new HashMap<String,ServiceComponentHost>();
  map1.put(HOST,nagiosScHost);
  expect(nagiosServiceComponent.getServiceComponentHosts()).andReturn(map1);
  replay(clusters,cluster,nagiosService,nagiosServiceComponent);
  TestStreamProvider streamProvider=new TestStreamProvider("nagios_alerts.txt");
  NagiosPropertyProvider npp=new NagiosPropertyProvider(Resource.Type.Service,streamProvider,"ServiceInfo/cluster_name","ServiceInfo/service_name");
  npp.forceReset();
  NagiosPropertyProvider.init(inj);
  Resource resource=new ResourceImpl(Resource.Type.Service);
  resource.setProperty("ServiceInfo/cluster_name","c1");
  resource.setProperty("ServiceInfo/service_name","GANGLIA");
  Request request=PropertyHelper.getReadRequest(Collections.<String>emptySet(),new HashMap<String,TemporalInfo>());
  Set<Resource> set=npp.populateResources(Collections.singleton(resource),request,null);
  Assert.assertEquals(1,set.size());
  Resource res=set.iterator().next();
  Map<String,Map<String,Object>> values=res.getPropertiesMap();
  Assert.assertTrue(values.containsKey("legacy_alerts"));
  Assert.assertTrue(values.containsKey("legacy_alerts/summary"));
  Assert.assertTrue(values.get("legacy_alerts").containsKey("detail"));
  Assert.assertTrue(List.class.isInstance(values.get("legacy_alerts").get("detail")));
  List<?> list=(List<?>)values.get("legacy_alerts").get("detail");
  Assert.assertEquals(Integer.valueOf(4),Integer.valueOf(list.size()));
  for (  Object o : list) {
    Assert.assertTrue(Map.class.isInstance(o));
    Map<?,?> map=(Map<?,?>)o;
    Assert.assertTrue(map.containsKey("service_name"));
    String serviceName=map.get("service_name").toString();
    Assert.assertEquals(serviceName,"GANGLIA");
  }
  Map<String,Object> summary=values.get("legacy_alerts/summary");
  Assert.assertTrue(summary.containsKey("OK"));
  Assert.assertTrue(summary.containsKey("WARNING"));
  Assert.assertTrue(summary.containsKey("CRITICAL"));
  Assert.assertTrue(summary.containsKey("PASSIVE"));
  Assert.assertEquals(Integer.valueOf(3),summary.get("OK"));
  Assert.assertEquals(Integer.valueOf(0),summary.get("WARNING"));
  Assert.assertEquals(Integer.valueOf(0),summary.get("CRITICAL"));
  Assert.assertEquals(Integer.valueOf(1),summary.get("PASSIVE"));
}
