{
  TestStreamProvider streamProvider=new TestStreamProvider();
  TestJMXHostProvider hostProvider=new TestJMXHostProvider(true);
  JMXPropertyProvider propertyProvider=new JMXPropertyProvider(PropertyHelper.getJMXPropertyIds(Resource.Type.HostComponent),streamProvider,hostProvider,PropertyHelper.getPropertyId("HostRoles","cluster_name"),PropertyHelper.getPropertyId("HostRoles","host_name"),PropertyHelper.getPropertyId("HostRoles","component_name"));
  Resource resource=new ResourceImpl(Resource.Type.HostComponent);
  resource.setProperty(HOST_COMPONENT_HOST_NAME_PROPERTY_ID,"domu-12-31-39-0e-34-e1.compute-1.internal");
  resource.setProperty(HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID,"NAMENODE");
  Request request=PropertyHelper.getReadRequest(Collections.<String>emptySet());
  Assert.assertEquals(1,propertyProvider.populateResources(Collections.singleton(resource),request,null).size());
  Assert.assertEquals(propertyProvider.getSpec("domu-12-31-39-0e-34-e1.compute-1.internal","50070"),streamProvider.getLastSpec());
  Assert.assertEquals(13670605,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/rpc","ReceivedBytes")));
  Assert.assertEquals(28,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/dfs/namenode","CreateFileOps")));
  Assert.assertEquals(1006632960,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/jvm","HeapMemoryMax")));
  Assert.assertEquals(473433016,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/jvm","HeapMemoryUsed")));
  Assert.assertEquals(136314880,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/jvm","NonHeapMemoryMax")));
  Assert.assertEquals(23634400,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/jvm","NonHeapMemoryUsed")));
}
