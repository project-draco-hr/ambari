{
  TestStreamProvider streamProvider=new TestStreamProvider();
  TestJMXHostProvider hostProvider=new TestJMXHostProvider(false);
  JMXPropertyProvider propertyProvider=new JMXPropertyProvider(PropertyHelper.getJMXPropertyIds(Resource.Type.HostComponent,PropertyHelper.MetricsVersion.HDP2),streamProvider,hostProvider,PropertyHelper.getPropertyId("HostRoles","cluster_name"),PropertyHelper.getPropertyId("HostRoles","host_name"),PropertyHelper.getPropertyId("HostRoles","component_name"),PropertyHelper.getPropertyId("HostRoles","state"),Collections.singleton("STARTED"));
  Resource resource=new ResourceImpl(Resource.Type.HostComponent);
  resource.setProperty(HOST_COMPONENT_HOST_NAME_PROPERTY_ID,"h1");
  resource.setProperty(HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID,"RESOURCEMANAGER");
  resource.setProperty(HOST_COMPONENT_STATE_PROPERTY_ID,"STARTED");
  Map<String,TemporalInfo> temporalInfoMap=new HashMap<String,TemporalInfo>();
  Request request=PropertyHelper.getReadRequest(Collections.singleton("metrics/yarn/Queue/root/AvailableMB"),temporalInfoMap);
  Assert.assertEquals(1,propertyProvider.populateResources(Collections.singleton(resource),request,null).size());
  Assert.assertEquals(propertyProvider.getSpec("h1","8088"),streamProvider.getLastSpec());
  Assert.assertEquals(8192,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/yarn/Queue/root","AvailableMB")));
  Assert.assertNull(resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/yarn/Queue/root","AvailableVCores")));
}
