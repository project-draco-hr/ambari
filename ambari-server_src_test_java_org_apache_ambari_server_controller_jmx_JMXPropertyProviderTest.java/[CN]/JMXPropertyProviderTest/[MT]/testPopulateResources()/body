{
  TestStreamProvider streamProvider=new TestStreamProvider();
  TestJMXHostProvider hostProvider=new TestJMXHostProvider(false);
  JMXPropertyProvider propertyProvider=new JMXPropertyProvider(PropertyHelper.getJMXPropertyIds(Resource.Type.HostComponent),streamProvider,hostProvider,PropertyHelper.getPropertyId("HostRoles","cluster_name"),PropertyHelper.getPropertyId("HostRoles","host_name"),PropertyHelper.getPropertyId("HostRoles","component_name"),PropertyHelper.getPropertyId("HostRoles","state"),Collections.singleton("STARTED"));
  Resource resource=new ResourceImpl(Resource.Type.HostComponent);
  resource.setProperty(HOST_COMPONENT_HOST_NAME_PROPERTY_ID,"domu-12-31-39-0e-34-e1.compute-1.internal");
  resource.setProperty(HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID,"NAMENODE");
  resource.setProperty(HOST_COMPONENT_STATE_PROPERTY_ID,"STARTED");
  resource.setPopulateRequiredFlag(true);
  Request request=PropertyHelper.getReadRequest(Collections.<String>emptySet());
  Assert.assertEquals(1,propertyProvider.populateResources(Collections.singleton(resource),request,null).size());
  Assert.assertEquals(propertyProvider.getSpec("domu-12-31-39-0e-34-e1.compute-1.internal","50070"),streamProvider.getLastSpec());
  Assert.assertEquals(13670605,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/rpc","ReceivedBytes")));
  Assert.assertEquals(28,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/dfs/namenode","CreateFileOps")));
  Assert.assertEquals(1006632960,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/jvm","HeapMemoryMax")));
  Assert.assertEquals(473433016,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/jvm","HeapMemoryUsed")));
  Assert.assertEquals(136314880,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/jvm","NonHeapMemoryMax")));
  Assert.assertEquals(23634400,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/jvm","NonHeapMemoryUsed")));
  Assert.assertEquals(887717691390L,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/dfs/FSNamesystem","CapacityTotal")));
  Assert.assertEquals(184320,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/dfs/FSNamesystem","CapacityUsed")));
  Assert.assertEquals(842207944704L,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/dfs/FSNamesystem","CapacityRemaining")));
  Assert.assertEquals(45509562366L,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/dfs/FSNamesystem","CapacityNonDFSUsed")));
  resource=new ResourceImpl(Resource.Type.HostComponent);
  resource.setProperty(HOST_COMPONENT_HOST_NAME_PROPERTY_ID,"domu-12-31-39-14-ee-b3.compute-1.internal");
  resource.setProperty(HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID,"DATANODE");
  resource.setPopulateRequiredFlag(true);
  request=PropertyHelper.getReadRequest(Collections.<String>emptySet());
  propertyProvider.populateResources(Collections.singleton(resource),request,null);
  Assert.assertEquals(propertyProvider.getSpec("domu-12-31-39-14-ee-b3.compute-1.internal","50075"),streamProvider.getLastSpec());
  Assert.assertEquals(856,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/rpc","ReceivedBytes")));
  Assert.assertEquals(954466304,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/jvm","HeapMemoryMax")));
  Assert.assertEquals(9772616,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/jvm","HeapMemoryUsed")));
  Assert.assertEquals(136314880,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/jvm","NonHeapMemoryMax")));
  Assert.assertEquals(21933376,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/jvm","NonHeapMemoryUsed")));
  resource=new ResourceImpl(Resource.Type.HostComponent);
  resource.setProperty(HOST_COMPONENT_HOST_NAME_PROPERTY_ID,"domu-12-31-39-14-ee-b3.compute-1.internal");
  resource.setProperty(HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID,"JOBTRACKER");
  resource.setPopulateRequiredFlag(true);
  Set<String> properties=new HashSet<String>();
  properties.add(PropertyHelper.getPropertyId("metrics/jvm","threadsWaiting"));
  properties.add(PropertyHelper.getPropertyId("metrics/jvm","HeapMemoryMax"));
  properties.add(PropertyHelper.getPropertyId("metrics/jvm","HeapMemoryUsed"));
  properties.add(PropertyHelper.getPropertyId("metrics/jvm","NonHeapMemoryMax"));
  properties.add(PropertyHelper.getPropertyId("metrics/jvm","NonHeapMemoryUsed"));
  properties.add(PropertyHelper.getPropertyId("metrics/mapred/jobtracker","jobs_submitted"));
  properties.add(PropertyHelper.getPropertyId("metrics/mapred/jobtracker","jobs_completed"));
  properties.add(PropertyHelper.getPropertyId("metrics/mapred/jobtracker","jobs_failed"));
  properties.add(PropertyHelper.getPropertyId("metrics/mapred/jobtracker","maps_launched"));
  properties.add(PropertyHelper.getPropertyId("metrics/mapred/jobtracker","maps_completed"));
  properties.add(PropertyHelper.getPropertyId("metrics/mapred/jobtracker","maps_failed"));
  request=PropertyHelper.getReadRequest(properties);
  propertyProvider.populateResources(Collections.singleton(resource),request,null);
  Assert.assertEquals(propertyProvider.getSpec("domu-12-31-39-14-ee-b3.compute-1.internal","50030"),streamProvider.getLastSpec());
  Assert.assertEquals(13,PropertyHelper.getProperties(resource).size());
  Assert.assertEquals(59,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/jvm","threadsWaiting")));
  Assert.assertEquals(1052770304,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/jvm","HeapMemoryMax")));
  Assert.assertEquals(43580400,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/jvm","HeapMemoryUsed")));
  Assert.assertEquals(136314880,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/jvm","NonHeapMemoryMax")));
  Assert.assertEquals(29602888,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/jvm","NonHeapMemoryUsed")));
  Assert.assertEquals(2,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/mapred/jobtracker","jobs_submitted")));
  Assert.assertEquals(1,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/mapred/jobtracker","jobs_completed")));
  Assert.assertEquals(1,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/mapred/jobtracker","jobs_failed")));
  Assert.assertEquals(2,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/mapred/jobtracker","maps_launched")));
  Assert.assertEquals(1,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/mapred/jobtracker","maps_completed")));
  Assert.assertEquals(0,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/mapred/jobtracker","maps_failed")));
  Assert.assertNull(resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/jvm","gcCount")));
  resource=new ResourceImpl(Resource.Type.HostComponent);
  resource.setProperty(HOST_COMPONENT_HOST_NAME_PROPERTY_ID,"domu-12-31-39-14-ee-b3.compute-1.internal");
  resource.setProperty(HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID,"TASKTRACKER");
  resource.setPopulateRequiredFlag(true);
  properties=new HashSet<String>();
  properties.add(PropertyHelper.getPropertyId("metrics/jvm","HeapMemoryMax"));
  properties.add(PropertyHelper.getPropertyId("metrics/jvm","HeapMemoryUsed"));
  properties.add(PropertyHelper.getPropertyId("metrics/jvm","NonHeapMemoryMax"));
  properties.add(PropertyHelper.getPropertyId("metrics/jvm","NonHeapMemoryUsed"));
  properties.add(PropertyHelper.getPropertyId("metrics/mapred/shuffleOutput","shuffle_exceptions_caught"));
  properties.add(PropertyHelper.getPropertyId("metrics/mapred/shuffleOutput","shuffle_failed_outputs"));
  properties.add(PropertyHelper.getPropertyId("metrics/mapred/shuffleOutput","shuffle_output_bytes"));
  properties.add(PropertyHelper.getPropertyId("metrics/mapred/shuffleOutput","shuffle_success_outputs"));
  properties.add(PropertyHelper.getPropertyId("metrics/mapred/tasktracker","maps_running"));
  properties.add(PropertyHelper.getPropertyId("metrics/mapred/tasktracker","reduces_running"));
  properties.add(PropertyHelper.getPropertyId("metrics/mapred/tasktracker","mapTaskSlots"));
  properties.add(PropertyHelper.getPropertyId("metrics/mapred/tasktracker","reduceTaskSlots"));
  properties.add(PropertyHelper.getPropertyId("metrics/mapred/tasktracker","failedDirs"));
  properties.add(PropertyHelper.getPropertyId("metrics/mapred/tasktracker","tasks_completed"));
  properties.add(PropertyHelper.getPropertyId("metrics/mapred/tasktracker","tasks_failed_timeout"));
  properties.add(PropertyHelper.getPropertyId("metrics/mapred/tasktracker","tasks_failed_ping"));
  request=PropertyHelper.getReadRequest(properties);
  propertyProvider.populateResources(Collections.singleton(resource),request,null);
  Assert.assertEquals(propertyProvider.getSpec("domu-12-31-39-14-ee-b3.compute-1.internal","50060"),streamProvider.getLastSpec());
  Assert.assertEquals(18,PropertyHelper.getProperties(resource).size());
  Assert.assertEquals(954466304,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/jvm","HeapMemoryMax")));
  Assert.assertEquals(18330984,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/jvm","HeapMemoryUsed")));
  Assert.assertEquals(136314880,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/jvm","NonHeapMemoryMax")));
  Assert.assertEquals(24235104,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/jvm","NonHeapMemoryUsed")));
  Assert.assertEquals(0,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/mapred/shuffleOutput","shuffle_exceptions_caught")));
  Assert.assertEquals(0,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/mapred/shuffleOutput","shuffle_failed_outputs")));
  Assert.assertEquals(1841,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/mapred/shuffleOutput","shuffle_output_bytes")));
  Assert.assertEquals(1,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/mapred/shuffleOutput","shuffle_success_outputs")));
  Assert.assertEquals(1,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/mapred/tasktracker","maps_running")));
  Assert.assertEquals(1,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/mapred/tasktracker","reduces_running")));
  Assert.assertEquals(4,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/mapred/tasktracker","mapTaskSlots")));
  Assert.assertEquals(2,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/mapred/tasktracker","reduceTaskSlots")));
  Assert.assertEquals(1,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/mapred/tasktracker","failedDirs")));
  Assert.assertEquals(4,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/mapred/tasktracker","tasks_completed")));
  Assert.assertEquals(1,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/mapred/tasktracker","tasks_failed_timeout")));
  Assert.assertEquals(1,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/mapred/tasktracker","tasks_failed_ping")));
  Assert.assertNull(resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/jvm","gcCount")));
  resource=new ResourceImpl(Resource.Type.HostComponent);
  resource.setProperty(HOST_COMPONENT_HOST_NAME_PROPERTY_ID,"domu-12-31-39-14-ee-b3.compute-1.internal");
  resource.setProperty(HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID,"HBASE_MASTER");
  resource.setProperty(HOST_COMPONENT_STATE_PROPERTY_ID,"STARTED");
  resource.setPopulateRequiredFlag(true);
  properties=new HashSet<String>();
  properties.add(PropertyHelper.getPropertyId("metrics/jvm","HeapMemoryMax"));
  properties.add(PropertyHelper.getPropertyId("metrics/jvm","HeapMemoryUsed"));
  properties.add(PropertyHelper.getPropertyId("metrics/jvm","NonHeapMemoryMax"));
  properties.add(PropertyHelper.getPropertyId("metrics/jvm","NonHeapMemoryUsed"));
  properties.add(PropertyHelper.getPropertyId("metrics/load","AverageLoad"));
  request=PropertyHelper.getReadRequest(properties);
  propertyProvider.populateResources(Collections.singleton(resource),request,null);
  Assert.assertEquals(propertyProvider.getSpec("domu-12-31-39-14-ee-b3.compute-1.internal","60010"),streamProvider.getLastSpec());
  Assert.assertEquals(8,PropertyHelper.getProperties(resource).size());
  Assert.assertEquals(1069416448,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/jvm","HeapMemoryMax")));
  Assert.assertEquals(4806976,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/jvm","HeapMemoryUsed")));
  Assert.assertEquals(136314880,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/jvm","NonHeapMemoryMax")));
  Assert.assertEquals(28971240,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/jvm","NonHeapMemoryUsed")));
  Assert.assertEquals(3.0,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/load","AverageLoad")));
  Assert.assertNull(resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/jvm","gcCount")));
}
