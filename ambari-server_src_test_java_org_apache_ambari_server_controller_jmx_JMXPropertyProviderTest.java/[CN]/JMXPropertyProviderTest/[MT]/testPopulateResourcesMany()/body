{
  TestStreamProvider streamProvider=new TestStreamProvider(50L);
  TestJMXHostProvider hostProvider=new TestJMXHostProvider(true);
  Set<Resource> resources=new HashSet<Resource>();
  JMXPropertyProvider propertyProvider=new JMXPropertyProvider(PropertyHelper.getJMXPropertyIds(Resource.Type.HostComponent),streamProvider,hostProvider,PropertyHelper.getPropertyId("HostRoles","cluster_name"),PropertyHelper.getPropertyId("HostRoles","host_name"),PropertyHelper.getPropertyId("HostRoles","component_name"),PropertyHelper.getPropertyId("HostRoles","state"),Collections.singleton("STARTED"));
  for (int i=0; i < NUMBER_OF_RESOURCES; ++i) {
    Resource resource=new ResourceImpl(Resource.Type.HostComponent);
    resource.setProperty(HOST_COMPONENT_HOST_NAME_PROPERTY_ID,"domu-12-31-39-14-ee-b3.compute-1.internal");
    resource.setProperty(HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID,"DATANODE");
    resources.add(resource);
  }
  Request request=PropertyHelper.getReadRequest(Collections.<String>emptySet());
  Set<Resource> resourceSet=propertyProvider.populateResources(resources,request,null);
  Assert.assertEquals(NUMBER_OF_RESOURCES,resourceSet.size());
  for (  Resource resource : resourceSet) {
    Assert.assertEquals(856,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/rpc","ReceivedBytes")));
    Assert.assertEquals(954466304,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/jvm","HeapMemoryMax")));
    Assert.assertEquals(9772616,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/jvm","HeapMemoryUsed")));
    Assert.assertEquals(136314880,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/jvm","NonHeapMemoryMax")));
    Assert.assertEquals(21933376,resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/jvm","NonHeapMemoryUsed")));
  }
}
