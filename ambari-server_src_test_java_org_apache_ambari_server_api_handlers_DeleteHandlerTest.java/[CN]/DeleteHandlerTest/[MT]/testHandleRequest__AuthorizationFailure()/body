{
  Request request=createMock(Request.class);
  RequestBody body=createMock(RequestBody.class);
  ResourceInstance resource=createMock(ResourceInstance.class);
  PersistenceManager pm=createStrictMock(PersistenceManager.class);
  Query query=createMock(Query.class);
  Renderer renderer=new DefaultRenderer();
  expect(request.getResource()).andReturn(resource).anyTimes();
  expect(request.getBody()).andReturn(body).atLeastOnce();
  expect(request.getQueryPredicate()).andReturn(null).atLeastOnce();
  expect(resource.getQuery()).andReturn(query).atLeastOnce();
  expect(request.getRenderer()).andReturn(renderer);
  query.setRenderer(renderer);
  expect(pm.delete(resource,body)).andThrow(new AuthorizationException());
  replay(request,body,resource,pm,query);
  Result result=new TestDeleteHandler(pm).handleRequest(request);
  assertEquals(ResultStatus.STATUS.FORBIDDEN,result.getStatus().getStatus());
  verify(request,body,resource,pm,query);
}
