@patch('resource_management.libraries.functions.security_commons.build_expectations')
@patch('resource_management.libraries.functions.security_commons.get_params_from_filesystem')
@patch('resource_management.libraries.functions.security_commons.validate_security_config_properties')
@patch('resource_management.libraries.functions.security_commons.cached_kinit_executor')
@patch('resource_management.libraries.script.Script.put_structured_out')
def test_security_status(self, put_structured_out_mock, cached_kinit_executor_mock, validate_security_config_mock, get_params_mock, build_exp_mock):
    security_params = {'krb5JAASLogin': {'keytab': '/path/to/keytab', 'principal': 'principal', }, 'gateway-site': {'gateway.hadoop.kerberos.secured': 'true', }, }
    result_issues = []
    get_params_mock.return_value = security_params
    validate_security_config_mock.return_value = result_issues
    self.executeScript((self.COMMON_SERVICES_PACKAGE_DIR + '/scripts/knox_gateway.py'), classname='KnoxGateway', command='security_status', config_file='secured.json', stack_version=self.STACK_VERSION, target=RMFTestCase.TARGET_COMMON_SERVICES)
    self.assertTrue(build_exp_mock.call_count, 2)
    build_exp_mock.assert_called_with('gateway-site', {'gateway.hadoop.kerberos.secured': 'true', }, None, None)
    put_structured_out_mock.assert_called_with({'securityState': 'SECURED_KERBEROS', })
    self.assertTrue(cached_kinit_executor_mock.call_count, 1)
    cached_kinit_executor_mock.assert_called_with('/usr/bin/kinit', self.config_dict['configurations']['knox-env']['knox_user'], security_params['krb5JAASLogin']['keytab'], security_params['krb5JAASLogin']['principal'], self.config_dict['hostname'], '/tmp')
    cached_kinit_executor_mock.reset_mock()
    cached_kinit_executor_mock.side_effect = Exception('Invalid command')
    try:
        self.executeScript((self.COMMON_SERVICES_PACKAGE_DIR + '/scripts/knox_gateway.py'), classname='KnoxGateway', command='security_status', config_file='secured.json', stack_version=self.STACK_VERSION, target=RMFTestCase.TARGET_COMMON_SERVICES)
    except:
        self.assertTrue(True)
    empty_security_params = {'krb5JAASLogin': {}, }
    cached_kinit_executor_mock.reset_mock()
    get_params_mock.reset_mock()
    put_structured_out_mock.reset_mock()
    get_params_mock.return_value = empty_security_params
    self.executeScript((self.COMMON_SERVICES_PACKAGE_DIR + '/scripts/knox_gateway.py'), classname='KnoxGateway', command='security_status', config_file='secured.json', stack_version=self.STACK_VERSION, target=RMFTestCase.TARGET_COMMON_SERVICES)
    put_structured_out_mock.assert_called_with({'securityIssuesFound': 'Keytab file and principal are not set.', })
    result_issues_with_params = {'krb5JAASLogin': 'Something bad happened', }
    validate_security_config_mock.reset_mock()
    get_params_mock.reset_mock()
    validate_security_config_mock.return_value = result_issues_with_params
    get_params_mock.return_value = security_params
    self.executeScript((self.COMMON_SERVICES_PACKAGE_DIR + '/scripts/knox_gateway.py'), classname='KnoxGateway', command='security_status', config_file='secured.json', stack_version=self.STACK_VERSION, target=RMFTestCase.TARGET_COMMON_SERVICES)
    put_structured_out_mock.assert_called_with({'securityState': 'UNSECURED', })
    self.executeScript((self.COMMON_SERVICES_PACKAGE_DIR + '/scripts/knox_gateway.py'), classname='KnoxGateway', command='security_status', config_file='default.json', stack_version=self.STACK_VERSION, target=RMFTestCase.TARGET_COMMON_SERVICES)
    put_structured_out_mock.assert_called_with({'securityState': 'UNSECURED', })
