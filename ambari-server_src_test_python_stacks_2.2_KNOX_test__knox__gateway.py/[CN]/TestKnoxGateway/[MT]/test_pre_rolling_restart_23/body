@patch('os.remove')
@patch('os.path.exists')
@patch('tarfile.open')
@patch('os.path.isdir')
@patch('resource_management.core.shell.call')
def test_pre_rolling_restart_23(self, call_mock, isdir_mock, tarfile_open_mock, path_exists_mock, remove_mock):
    isdir_mock.return_value = True
    config_file = (self.get_src_folder() + '/test/python/stacks/2.2/configs/knox_upgrade.json')
    with open(config_file, 'r') as f:
        json_content = json.load(f)
    version = '2.3.0.0-1234'
    json_content['commandParams']['version'] = version
    path_exists_mock.return_value = True
    knox_conf_tarfile = TarfileFake()
    tarfile_open_mock.return_value = knox_conf_tarfile
    mocks_dict = {}
    self.executeScript((self.COMMON_SERVICES_PACKAGE_DIR + '/scripts/knox_gateway.py'), classname='KnoxGateway', command='pre_rolling_restart', config_dict=json_content, hdp_stack_version=self.STACK_VERSION, target=RMFTestCase.TARGET_COMMON_SERVICES, call_mocks=[(0, None), (0, None)], mocks_dict=mocks_dict)
    self.assertTrue(tarfile_open_mock.called)
    self.assertResourceCalled('Execute', ('hdp-select', 'set', 'knox-server', version), sudo=True)
    self.assertEquals(2, mocks_dict['call'].call_count)
    self.assertEquals('conf-select create-conf-dir --package knox --stack-version 2.3.0.0-1234 --conf-version 0', mocks_dict['call'].call_args_list[0][0][0])
    self.assertEquals('conf-select set-conf-dir --package knox --stack-version 2.3.0.0-1234 --conf-version 0', mocks_dict['call'].call_args_list[1][0][0])
    self.assertEquals(1, knox_conf_tarfile.extractall_count)
    self.assertTrue(2, knox_conf_tarfile.close_count)
