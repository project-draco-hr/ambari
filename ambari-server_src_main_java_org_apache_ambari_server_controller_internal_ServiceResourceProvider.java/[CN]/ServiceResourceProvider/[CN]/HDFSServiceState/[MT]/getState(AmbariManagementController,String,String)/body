{
  AmbariMetaInfo ambariMetaInfo=controller.getAmbariMetaInfo();
  Clusters clusters=controller.getClusters();
  if (clusterName != null && clusterName.length() > 0) {
    try {
      Cluster cluster=clusters.getCluster(clusterName);
      if (cluster != null) {
        StackId stackId=cluster.getDesiredStackVersion();
        ServiceComponentHostRequest request=new ServiceComponentHostRequest(clusterName,serviceName,"NAMENODE",null,null,null);
        Set<ServiceComponentHostResponse> hostComponentResponses=controller.getHostComponents(Collections.singleton(request));
        int nameNodeCount=0;
        int nameNodeActiveCount=0;
        boolean hasSecondary=false;
        boolean hasJournal=false;
        State nonStartedState=null;
        for (        ServiceComponentHostResponse hostComponentResponse : hostComponentResponses) {
          ComponentInfo componentInfo=ambariMetaInfo.getComponentCategory(stackId.getStackName(),stackId.getStackVersion(),hostComponentResponse.getServiceName(),hostComponentResponse.getComponentName());
          if (componentInfo != null) {
            if (componentInfo.isMaster()) {
              String componentName=hostComponentResponse.getComponentName();
              boolean isNameNode=false;
              if (componentName.equals("NAMENODE")) {
                ++nameNodeCount;
                isNameNode=true;
              }
 else               if (componentName.equals("SECONDARY_NAMENODE")) {
                hasSecondary=true;
              }
 else               if (componentName.equals("JOURNALNODE")) {
                hasJournal=true;
              }
              State state=getHostComponentState(hostComponentResponse);
switch (state) {
case STARTED:
case MAINTENANCE:
                if (isNameNode) {
                  ++nameNodeActiveCount;
                }
              break;
default :
            nonStartedState=state;
        }
      }
    }
  }
  if (nonStartedState == null || ((nameNodeCount > 0 && !hasSecondary || hasJournal) && nameNodeActiveCount > 0)) {
    return State.STARTED;
  }
  return nonStartedState;
}
}
 catch (AmbariException e) {
LOG.error("Can't determine service state.",e);
}
}
return State.UNKNOWN;
}
