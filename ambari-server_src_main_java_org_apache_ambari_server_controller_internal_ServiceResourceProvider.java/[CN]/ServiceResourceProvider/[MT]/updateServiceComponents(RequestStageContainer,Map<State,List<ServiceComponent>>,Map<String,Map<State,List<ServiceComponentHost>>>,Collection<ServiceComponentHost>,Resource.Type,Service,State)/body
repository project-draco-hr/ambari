{
  Cluster cluster=service.getCluster();
  AmbariManagementController controller=getManagementController();
  AmbariMetaInfo ambariMetaInfo=controller.getAmbariMetaInfo();
  for (  ServiceComponent sc : service.getServiceComponents().values()) {
    State oldScState=sc.getDesiredState();
    if (newState != oldScState) {
      if (sc.isClientComponent() && !newState.isValidClientComponentState()) {
        continue;
      }
      if (!State.isValidDesiredStateTransition(oldScState,newState)) {
        throw new AmbariException("Invalid transition for" + " servicecomponent" + ", clusterName=" + cluster.getClusterName() + ", clusterId="+ cluster.getClusterId()+ ", serviceName="+ sc.getServiceName()+ ", componentName="+ sc.getName()+ ", currentDesiredState="+ oldScState+ ", newDesiredState="+ newState);
      }
      if (!changedComps.containsKey(newState)) {
        changedComps.put(newState,new ArrayList<ServiceComponent>());
      }
      changedComps.get(newState).add(sc);
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug("Handling update to ServiceComponent" + ", clusterName=" + cluster.getClusterName() + ", serviceName="+ service.getName()+ ", componentName="+ sc.getName()+ ", currentDesiredState="+ oldScState+ ", newDesiredState="+ newState);
    }
    for (    ServiceComponentHost sch : sc.getServiceComponentHosts().values()) {
      State oldSchState=sch.getState();
      if (oldSchState == State.DISABLED || oldSchState == State.UNKNOWN) {
        if (LOG.isDebugEnabled()) {
          LOG.debug("Ignoring ServiceComponentHost" + ", clusterName=" + cluster.getClusterName() + ", serviceName="+ service.getName()+ ", componentName="+ sc.getName()+ ", hostname="+ sch.getHostName()+ ", currentState="+ oldSchState+ ", newDesiredState="+ newState);
        }
        continue;
      }
      if (newState == oldSchState) {
        ignoredScHosts.add(sch);
        if (LOG.isDebugEnabled()) {
          LOG.debug("Ignoring ServiceComponentHost" + ", clusterName=" + cluster.getClusterName() + ", serviceName="+ service.getName()+ ", componentName="+ sc.getName()+ ", hostname="+ sch.getHostName()+ ", currentState="+ oldSchState+ ", newDesiredState="+ newState);
        }
        continue;
      }
      if (!maintenanceStateHelper.isOperationAllowed(reqOpLvl,sch)) {
        ignoredScHosts.add(sch);
        if (LOG.isDebugEnabled()) {
          LOG.debug("Ignoring ServiceComponentHost" + ", clusterName=" + cluster.getClusterName() + ", serviceName="+ service.getName()+ ", componentName="+ sc.getName()+ ", hostname="+ sch.getHostName());
        }
        continue;
      }
      if (sc.isClientComponent() && !newState.isValidClientComponentState()) {
        continue;
      }
      if (!isValidStateTransition(requestStages,oldSchState,newState,sch)) {
        String error="Invalid transition for" + " servicecomponenthost" + ", clusterName=" + cluster.getClusterName() + ", clusterId="+ cluster.getClusterId()+ ", serviceName="+ sch.getServiceName()+ ", componentName="+ sch.getServiceComponentName()+ ", hostname="+ sch.getHostName()+ ", currentState="+ oldSchState+ ", newDesiredState="+ newState;
        StackId sid=cluster.getDesiredStackVersion();
        if (ambariMetaInfo.getComponentCategory(sid.getStackName(),sid.getStackVersion(),sc.getServiceName(),sch.getServiceComponentName()).isMaster()) {
          throw new AmbariException(error);
        }
 else {
          LOG.warn("Ignoring: " + error);
          continue;
        }
      }
      if (!changedScHosts.containsKey(sc.getName())) {
        changedScHosts.put(sc.getName(),new EnumMap<State,List<ServiceComponentHost>>(State.class));
      }
      if (!changedScHosts.get(sc.getName()).containsKey(newState)) {
        changedScHosts.get(sc.getName()).put(newState,new ArrayList<ServiceComponentHost>());
      }
      if (LOG.isDebugEnabled()) {
        LOG.debug("Handling update to ServiceComponentHost" + ", clusterName=" + cluster.getClusterName() + ", serviceName="+ service.getName()+ ", componentName="+ sc.getName()+ ", hostname="+ sch.getHostName()+ ", currentState="+ oldSchState+ ", newDesiredState="+ newState);
      }
      changedScHosts.get(sc.getName()).get(newState).add(sch);
    }
  }
}
