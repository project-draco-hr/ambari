{
  final Set<ServiceRequest> requests=new HashSet<ServiceRequest>();
  for (  Map<String,Object> propertyMap : getPropertyMaps(predicate)) {
    requests.add(getRequest(propertyMap));
  }
  Set<ServiceResponse> responses=getResources(new Command<Set<ServiceResponse>>(){
    @Override public Set<ServiceResponse> invoke() throws AmbariException {
      return getServices(requests);
    }
  }
);
  Set<String> requestedIds=getRequestPropertyIds(request,predicate);
  Set<Resource> resources=new HashSet<Resource>();
  for (  ServiceResponse response : responses) {
    Resource resource=new ResourceImpl(Resource.Type.Service);
    setResourceProperty(resource,SERVICE_CLUSTER_NAME_PROPERTY_ID,response.getClusterName(),requestedIds);
    setResourceProperty(resource,SERVICE_SERVICE_NAME_PROPERTY_ID,response.getServiceName(),requestedIds);
    setResourceProperty(resource,SERVICE_SERVICE_STATE_PROPERTY_ID,calculateServiceState(response.getClusterName(),response.getServiceName()),requestedIds);
    setResourceProperty(resource,SERVICE_MAINTENANCE_STATE_PROPERTY_ID,response.getMaintenanceState(),requestedIds);
    Map<String,Object> serviceSpecificProperties=getServiceSpecificProperties(response.getClusterName(),response.getServiceName());
    for (    Map.Entry<String,Object> entry : serviceSpecificProperties.entrySet()) {
      setResourceProperty(resource,entry.getKey(),entry.getValue(),requestedIds);
    }
    resources.add(resource);
  }
  return resources;
}
