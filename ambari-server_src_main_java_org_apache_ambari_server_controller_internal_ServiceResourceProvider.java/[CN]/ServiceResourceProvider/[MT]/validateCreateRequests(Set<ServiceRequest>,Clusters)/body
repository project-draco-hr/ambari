{
  AmbariMetaInfo ambariMetaInfo=getManagementController().getAmbariMetaInfo();
  Map<String,Set<String>> serviceNames=new HashMap<>();
  Set<String> duplicates=new HashSet<>();
  for (  ServiceRequest request : requests) {
    final String clusterName=request.getClusterName();
    final String serviceName=request.getServiceName();
    Validate.notEmpty(clusterName,"Cluster name should be provided when creating a service");
    Validate.notEmpty(serviceName,"Service name should be provided when creating a service");
    if (LOG.isDebugEnabled()) {
      LOG.debug("Received a createService request" + ", clusterName=" + clusterName + ", serviceName="+ serviceName+ ", request="+ request);
    }
    if (!AuthorizationHelper.isAuthorized(ResourceType.CLUSTER,getClusterResourceId(clusterName),RoleAuthorization.SERVICE_ADD_DELETE_SERVICES)) {
      throw new AuthorizationException("The user is not authorized to create services");
    }
    if (!serviceNames.containsKey(clusterName)) {
      serviceNames.put(clusterName,new HashSet<String>());
    }
    if (serviceNames.get(clusterName).contains(serviceName)) {
      duplicates.add(serviceName);
      continue;
    }
    serviceNames.get(clusterName).add(serviceName);
    if (StringUtils.isNotEmpty(request.getDesiredState())) {
      State state=State.valueOf(request.getDesiredState());
      if (!state.isValidDesiredState() || state != State.INIT) {
        throw new IllegalArgumentException("Invalid desired state" + " only INIT state allowed during creation" + ", providedDesiredState="+ request.getDesiredState());
      }
    }
    Cluster cluster;
    try {
      cluster=clusters.getCluster(clusterName);
    }
 catch (    ClusterNotFoundException e) {
      throw new ParentObjectNotFoundException("Attempted to add a service to a cluster which doesn't exist",e);
    }
    try {
      Service s=cluster.getService(serviceName);
      if (s != null) {
        duplicates.add(serviceName);
        continue;
      }
    }
 catch (    ServiceNotFoundException e) {
    }
    StackId stackId=cluster.getDesiredStackVersion();
    if (!ambariMetaInfo.isValidService(stackId.getStackName(),stackId.getStackVersion(),request.getServiceName())) {
      throw new IllegalArgumentException("Unsupported or invalid service in stack, clusterName=" + clusterName + ", serviceName="+ serviceName+ ", stackInfo="+ stackId.getStackId());
    }
    ServiceInfo serviceInfo=ambariMetaInfo.getService(stackId.getStackName(),stackId.getStackVersion(),request.getServiceName());
    if (StringUtils.isNotEmpty(request.getCredentialStoreEnabled())) {
      boolean credentialStoreEnabled=Boolean.parseBoolean(request.getCredentialStoreEnabled());
      if (!serviceInfo.isCredentialStoreSupported() && credentialStoreEnabled) {
        throw new IllegalArgumentException("Invalid arguments, cannot enable credential store " + "as it is not supported by the service. Service=" + request.getServiceName());
      }
    }
  }
  if (serviceNames.size() != 1) {
    throw new IllegalArgumentException("Invalid arguments, updates allowed" + "on only one cluster at a time");
  }
  if (!duplicates.isEmpty()) {
    String clusterName=requests.iterator().next().getClusterName();
    String msg="Attempted to create a service which already exists: " + ", clusterName=" + clusterName + " serviceName="+ StringUtils.join(duplicates,",");
    throw new DuplicateResourceException(msg);
  }
}
