{
  MetricsPaddingMethod paddingMethod=new MetricsPaddingMethod(MetricsPaddingMethod.PADDING_STRATEGY.ZEROS);
  long now=System.currentTimeMillis();
  TimelineMetric timelineMetric=new TimelineMetric();
  timelineMetric.setMetricName("m1");
  timelineMetric.setHostName("h1");
  timelineMetric.setAppId("a1");
  timelineMetric.setTimestamp(now);
  TreeMap<Long,Double> inputValues=new TreeMap<Long,Double>();
  long seconds=1000;
  long minute=60 * seconds;
  long hour=60 * minute;
  long day=24 * hour;
  inputValues.clear();
  for (int i=5; i >= 1; i--) {
    inputValues.put(now - i * minute,i + 0.0);
  }
  timelineMetric.setMetricValues(inputValues);
  TemporalInfo temporalInfo=getTemporalInfo(now - 2 * hour - 1 * minute,now,null);
  paddingMethod.applyPaddingStrategy(timelineMetric,temporalInfo);
  TreeMap<Long,Double> values=(TreeMap<Long,Double>)timelineMetric.getMetricValues();
  Assert.assertEquals(122,values.size());
  Assert.assertEquals(new Long(now - 2 * hour - 1 * minute),values.keySet().iterator().next());
  inputValues.clear();
  for (int i=5; i >= 1; i--) {
    inputValues.put(now - i * hour,i + 0.0);
  }
  timelineMetric.setMetricValues(inputValues);
  temporalInfo=getTemporalInfo(now - 1 * day - 1 * hour,now,null);
  paddingMethod.applyPaddingStrategy(timelineMetric,temporalInfo);
  values=(TreeMap<Long,Double>)timelineMetric.getMetricValues();
  Assert.assertEquals(26,values.size());
  Assert.assertEquals(new Long(now - 1 * day - 1 * hour),values.keySet().iterator().next());
  inputValues.clear();
  inputValues.put(now - day,1.0);
  timelineMetric.setMetricValues(inputValues);
  temporalInfo=getTemporalInfo(now - 40 * day,now,null);
  paddingMethod.applyPaddingStrategy(timelineMetric,temporalInfo);
  values=(TreeMap<Long,Double>)timelineMetric.getMetricValues();
  Assert.assertEquals(41,values.size());
  Assert.assertEquals(new Long(now - 40 * day),values.keySet().iterator().next());
}
