{
  Request request=createMock(Request.class);
  RequestBody body=createMock(RequestBody.class);
  ResourceInstance resource=createMock(ResourceInstance.class);
  PersistenceManager pm=createStrictMock(PersistenceManager.class);
  Predicate userPredicate=createMock(Predicate.class);
  Query query=createMock(Query.class);
  Renderer renderer=new DefaultRenderer();
  expect(request.getResource()).andReturn(resource).atLeastOnce();
  expect(request.getBody()).andReturn(body).atLeastOnce();
  expect(request.getQueryPredicate()).andReturn(userPredicate).atLeastOnce();
  expect(request.getRenderer()).andReturn(renderer).atLeastOnce();
  expect(resource.getQuery()).andReturn(query).atLeastOnce();
  query.setRenderer(renderer);
  query.setUserPredicate(userPredicate);
  expect(pm.update(resource,body)).andThrow(new AuthorizationException());
  replay(request,body,resource,pm,userPredicate,query);
  Result result=new TestUpdateHandler(pm).handleRequest(request);
  assertNotNull(result);
  assertEquals(ResultStatus.STATUS.FORBIDDEN,result.getStatus().getStatus());
  verify(request,body,resource,pm,userPredicate,query);
}
