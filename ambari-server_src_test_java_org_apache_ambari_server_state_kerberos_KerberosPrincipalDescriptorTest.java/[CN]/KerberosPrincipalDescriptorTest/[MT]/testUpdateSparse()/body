{
  KerberosPrincipalDescriptor principalDescriptor;
  KerberosPrincipalDescriptor updatedPrincipalDescriptor;
  principalDescriptor=createFromJSON();
  updatedPrincipalDescriptor=createFromJSONSparse();
  Assert.assertNotNull(principalDescriptor);
  Assert.assertNotNull(updatedPrincipalDescriptor);
  Assert.assertEquals("service/_HOST@_REALM",principalDescriptor.getValue());
  Assert.assertEquals("service-site/service.component.kerberos.principal",principalDescriptor.getConfiguration());
  Assert.assertEquals(KerberosPrincipalType.SERVICE,principalDescriptor.getType());
  Assert.assertEquals("localUser",principalDescriptor.getLocalUsername());
  principalDescriptor.update(updatedPrincipalDescriptor);
  Assert.assertEquals("serviceOther/_HOST@_REALM",principalDescriptor.getValue());
  Assert.assertEquals("service-site/service.component.kerberos.principal",principalDescriptor.getConfiguration());
  Assert.assertEquals(KerberosPrincipalType.SERVICE,principalDescriptor.getType());
  Assert.assertEquals("localUser",principalDescriptor.getLocalUsername());
  principalDescriptor=createFromMap();
  updatedPrincipalDescriptor=createFromMapSparse();
  Assert.assertNotNull(principalDescriptor);
  Assert.assertNotNull(updatedPrincipalDescriptor);
  Assert.assertEquals("user@_REALM",principalDescriptor.getValue());
  Assert.assertEquals("service-site/service.component.kerberos.https.principal",principalDescriptor.getConfiguration());
  Assert.assertEquals(KerberosPrincipalType.USER,principalDescriptor.getType());
  Assert.assertNull(principalDescriptor.getLocalUsername());
  principalDescriptor.update(updatedPrincipalDescriptor);
  Assert.assertEquals("userOther@_REALM",principalDescriptor.getValue());
  Assert.assertEquals("service-site/service.component.kerberos.https.principal",principalDescriptor.getConfiguration());
  Assert.assertEquals(KerberosPrincipalType.USER,principalDescriptor.getType());
  Assert.assertNull(principalDescriptor.getLocalUsername());
}
