{
  Collection<String> services=topology.getBlueprint().getServices();
  try {
    Cluster cluster=getController().getClusters().getCluster(clusterName);
    services.removeAll(cluster.getServices().keySet());
  }
 catch (  AmbariException e) {
    throw new RuntimeException("Failed to persist service and component resources: " + e,e);
  }
  Set<ServiceRequest> serviceRequests=new HashSet<ServiceRequest>();
  Set<ServiceComponentRequest> componentRequests=new HashSet<ServiceComponentRequest>();
  for (  String service : services) {
    serviceRequests.add(new ServiceRequest(clusterName,service,null));
    for (    String component : topology.getBlueprint().getComponents(service)) {
      componentRequests.add(new ServiceComponentRequest(clusterName,service,component,null));
    }
  }
  try {
    getServiceResourceProvider().createServices(serviceRequests);
    getComponentResourceProvider().createComponents(componentRequests);
  }
 catch (  AmbariException e) {
    throw new RuntimeException("Failed to persist service and component resources: " + e,e);
  }
  Map<String,Object> installProps=new HashMap<String,Object>();
  installProps.put(ServiceResourceProvider.SERVICE_SERVICE_STATE_PROPERTY_ID,"INSTALLED");
  installProps.put(ServiceResourceProvider.SERVICE_CLUSTER_NAME_PROPERTY_ID,clusterName);
  Map<String,Object> startProps=new HashMap<String,Object>();
  startProps.put(ServiceResourceProvider.SERVICE_SERVICE_STATE_PROPERTY_ID,"STARTED");
  startProps.put(ServiceResourceProvider.SERVICE_CLUSTER_NAME_PROPERTY_ID,clusterName);
  Predicate predicate=new EqualsPredicate<String>(ServiceResourceProvider.SERVICE_CLUSTER_NAME_PROPERTY_ID,clusterName);
  try {
    getServiceResourceProvider().updateResources(new RequestImpl(null,Collections.singleton(installProps),null,null),predicate);
    getServiceResourceProvider().updateResources(new RequestImpl(null,Collections.singleton(startProps),null,null),predicate);
  }
 catch (  Exception e) {
    LOG.error("Unable to update state of services during cluster provision: " + e,e);
  }
}
