{
  boolean isTopologyResolved=false;
  try {
    Cluster cluster=getController().getClusters().getClusterById(clusterId);
    Map<String,Set<DesiredConfig>> allDesiredConfigsByType=cluster.getAllDesiredConfigVersions();
    for (    String configType : allDesiredConfigsByType.keySet()) {
      Set<DesiredConfig> desiredConfigVersions=allDesiredConfigsByType.get(configType);
      SortedSet<DesiredConfig> desiredConfigsOrderedByVersion=new TreeSet<>(new Comparator<DesiredConfig>(){
        @Override public int compare(        DesiredConfig o1,        DesiredConfig o2){
          if (o1.getVersion() < o2.getVersion())           return -1;
          if (o1.getVersion() > o2.getVersion())           return 1;
          return 0;
        }
      }
);
      desiredConfigsOrderedByVersion.addAll(desiredConfigVersions);
      int tagMatchState=0;
      for (      DesiredConfig config : desiredConfigsOrderedByVersion) {
        if (config.getTag().equals(TopologyManager.INITIAL_CONFIG_TAG) && tagMatchState == 0)         tagMatchState=1;
 else         if (config.getTag().equals(TopologyManager.TOPOLOGY_RESOLVED_TAG) && tagMatchState == 1) {
          tagMatchState=2;
          break;
        }
      }
      if (tagMatchState == 2) {
        isTopologyResolved=true;
        break;
      }
    }
  }
 catch (  ClusterNotFoundException e) {
    LOG.info("Attempted to determine if configuration is topology resolved for a non-existent cluster: {}",clusterId);
  }
catch (  AmbariException e) {
    throw new RuntimeException("Unable to determine if cluster config is topology resolved due to unknown error: " + e,e);
  }
  return isTopologyResolved;
}
