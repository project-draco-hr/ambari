def check_is_fresh_install(self, env):
    '\n    Checks if fresh nifi install by checking if zk dir exists\n    :return:\n    '
    import params, re
    from resource_management.core import shell
    from resource_management.core.exceptions import Fail
    from resource_management.core.logger import Logger
    ZK_CONNECT_ERROR = 'ConnectionLoss'
    ZK_NODE_NOT_EXIST = 'Node does not exist'
    zookeeper_queried = False
    is_fresh_nifi_install = True
    zookeeper_server_list = params.config['clusterHostInfo']['zookeeper_hosts']
    for zookeeper_server in zookeeper_server_list:
        zk_command_location = os.path.join(params.stack_root, 'current', 'zookeeper-client', 'bin', 'zkCli.sh')
        if (params.stack_version_buildnum is not None):
            zk_command_location = os.path.join(params.stack_root, params.stack_version_buildnum, 'zookeeper', 'bin', 'zkCli.sh')
        command = '{0} -server {1}:{2} ls {3}'.format(zk_command_location, zookeeper_server, params.zookeeper_port, params.nifi_znode)
        Logger.info(('Running command: ' + command))
        (code, out) = shell.call(command, logoutput=True, quiet=False, timeout=20)
        if ((not out) or re.search(ZK_CONNECT_ERROR, out)):
            Logger.info((('Unable to query Zookeeper: ' + zookeeper_server) + '. Skipping and trying next ZK server'))
            continue
        elif re.search(ZK_NODE_NOT_EXIST, out):
            Logger.info(('Nifi ZNode does not exist, so must be fresh install of Nifi: ' + params.nifi_znode))
            zookeeper_queried = True
            is_fresh_nifi_install = True
            break
        else:
            Logger.info(('Nifi ZNode already exists, so must not be a fresh install of Nifi: ' + params.nifi_znode))
            zookeeper_queried = True
            is_fresh_nifi_install = False
            break
    if (not zookeeper_queried):
        raise Fail('Unable to query for znode on on any of the following ZooKeeper hosts: {0}. Please ensure Zookeepers are started and retry'.format(zookeeper_server_list))
    else:
        return is_fresh_nifi_install
