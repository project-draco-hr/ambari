def _llap_start(self, env, cleanup=False):
    import params
    env.set_params(params)
    Logger.info('Starting LLAP')
    LLAP_APP_NAME = 'llap0'
    unique_name = ('llap-slider%s' % datetime.utcnow().strftime('%Y-%m-%d_%H-%M-%S'))
    cmd = format('{stack_root}/current/hive-server2-hive2/bin/hive --service llap --instances {params.num_llap_nodes} --slider-am-container-mb {params.slider_am_container_mb} --size {params.llap_daemon_container_size}m  --cache {params.hive_llap_io_mem_size}m --xmx {params.llap_heap_size}m --loglevel {params.llap_log_level} --output {unique_name}')
    if params.security_enabled:
        llap_keytab_splits = params.hive_llap_keytab_file.split('/')
        Logger.debug('llap_keytab_splits : {0}'.format(llap_keytab_splits))
        cmd += format(' --slider-keytab-dir .slider/keytabs/{params.hive_user}/ --slider-keytab {llap_keytab_splits[4]} --slider-principal {hive_headless_keytab}')
    cmd += format(' --args " {llap_app_java_opts}"')
    run_file_path = None
    try:
        Logger.info(format('Command: {cmd}'))
        (code, output, error) = shell.checked_call(cmd, user=params.hive_user, stderr=subprocess.PIPE, logoutput=True)
        if ((code != 0) or (output is None)):
            raise Fail('Command failed with either non-zero return code or no output.')
        exp = 'Prepared (.*?run.sh) for running LLAP'
        run_file_path = None
        out_splits = output.split('\n')
        for line in out_splits:
            line = line.strip()
            m = re.match(exp, line, re.I)
            if (m and (len(m.groups()) == 1)):
                run_file_name = m.group(1)
                run_file_path = os.path.join(params.hive_user_home_dir, run_file_name)
                break
        if (not run_file_path):
            raise Fail(('Did not find run.sh file in output: ' + str(output)))
        Logger.info(format('Run file path: {run_file_path}'))
        if os.path.isfile(run_file_path):
            Execute(run_file_path, user=params.hive_user)
            Logger.info('Submitted LLAP app name : {0}'.format(LLAP_APP_NAME))
            status = self.check_llap_app_status(LLAP_APP_NAME, params.num_retries_for_checking_llap_status)
            if status:
                Logger.info("LLAP app '{0}' deployed successfully.".format(LLAP_APP_NAME))
                return True
            else:
                Logger.error("LLAP app '{0}' deployment unsuccessful.".format(LLAP_APP_NAME))
                return False
        else:
            raise Fail(format('Did not find run file {run_file_path}'))
    except:
        if ((run_file_path is not None) and cleanup):
            try:
                parent_dir = os.path.dirname(run_file_path)
                if os.path.isdir(parent_dir):
                    shutil.rmtree(parent_dir)
            except Exception as e:
                Logger.error(('Could not cleanup LLAP app package. Error: ' + str(e)))
        raise
