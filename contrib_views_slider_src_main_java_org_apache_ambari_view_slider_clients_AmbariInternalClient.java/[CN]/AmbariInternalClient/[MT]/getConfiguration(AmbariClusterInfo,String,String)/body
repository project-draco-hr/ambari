{
  ClusterController clusterController=ClusterControllerHelper.getClusterController();
  try {
    EqualsPredicate<String> clusterPredicate=new EqualsPredicate<String>("Config/cluster_name",cluster.getName());
    EqualsPredicate<String> typePredicate=new EqualsPredicate<String>("type",configType);
    EqualsPredicate<String> tagPredicate=new EqualsPredicate<String>("tag",configTag);
    AndPredicate typeTagPredicate=new AndPredicate(typePredicate,tagPredicate);
    AndPredicate configsPredicate=new AndPredicate(clusterPredicate,typeTagPredicate);
    Set<Resource> configResources=clusterController.getResources(Resource.Type.Configuration,PropertyHelper.getReadRequest(),configsPredicate);
    if (!configResources.isEmpty()) {
      Resource configResource=configResources.iterator().next();
      Map<String,String> configs=new HashMap<String,String>();
      Object props=configResource.getPropertiesMap().get("properties");
      if (props instanceof Map) {
        @SuppressWarnings("unchecked") Map<String,String> propsMap=(Map<String,String>)props;
        configs.putAll(propsMap);
      }
      return configs;
    }
  }
 catch (  UnsupportedPropertyException e) {
    logger.warn("Unable to determine Ambari cluster configuration",e);
    throw new RuntimeException(e.getMessage(),e);
  }
catch (  NoSuchResourceException e) {
    logger.warn("Unable to determine Ambari cluster configuration",e);
    throw new RuntimeException(e.getMessage(),e);
  }
catch (  NoSuchParentResourceException e) {
    logger.warn("Unable to determine Ambari cluster configuration",e);
    throw new RuntimeException(e.getMessage(),e);
  }
catch (  SystemException e) {
    logger.warn("Unable to determine Ambari cluster configuration",e);
    throw new RuntimeException(e.getMessage(),e);
  }
  return null;
}
