{
  ClusterController clusterController=ClusterControllerHelper.getClusterController();
  try {
    EqualsPredicate<String> clusterPredicate=new EqualsPredicate<String>("Clusters/cluster_name",clusterInfo.getName());
    Set<Resource> clusterResources=clusterController.getResources(Resource.Type.Cluster,PropertyHelper.getReadRequest(),clusterPredicate);
    if (!clusterResources.isEmpty()) {
      Resource clusterResource=clusterResources.iterator().next();
      AmbariCluster cluster=new AmbariCluster();
      cluster.setName(clusterResource.getPropertyValue("Clusters/cluster_name").toString());
      cluster.setVersion(clusterResource.getPropertyValue("Clusters/version").toString());
      Map<String,String> desiredConfigsMap=new HashMap<String,String>();
      Map<String,Object> desiredConfigsMapResource=clusterResource.getPropertiesMap().get("Clusters/desired_configs");
      for (      Map.Entry<String,Object> siteEntry : desiredConfigsMapResource.entrySet()) {
        desiredConfigsMap.put(siteEntry.getKey(),((DesiredConfig)siteEntry.getValue()).getVersion());
      }
      cluster.setDesiredConfigs(desiredConfigsMap);
      EqualsPredicate<String> serviceClusterPredicate=new EqualsPredicate<String>("ServiceInfo/cluster_name",cluster.getName());
      EqualsPredicate<String> hostClusterPredicate=new EqualsPredicate<String>("Hosts/cluster_name",cluster.getName());
      Set<Resource> serviceResources=clusterController.getResources(Resource.Type.Service,PropertyHelper.getReadRequest(),serviceClusterPredicate);
      Set<Resource> hostResources=clusterController.getResources(Resource.Type.Host,PropertyHelper.getReadRequest(),hostClusterPredicate);
      List<AmbariServiceInfo> servicesList=new ArrayList<AmbariServiceInfo>();
      List<AmbariHostInfo> hostsList=new ArrayList<AmbariHostInfo>();
      for (      Resource serviceResource : serviceResources) {
        AmbariServiceInfo service=new AmbariServiceInfo();
        service.setId(serviceResource.getPropertyValue("ServiceInfo/service_name").toString());
        service.setStarted(State.STARTED.toString().equals(serviceResource.getPropertyValue("ServiceInfo/state")));
        service.setMaintenanceMode("ON".equals(serviceResource.getPropertyValue("ServiceInfo/maintenance_state")));
        servicesList.add(service);
      }
      for (      Resource hostResource : hostResources) {
        AmbariHostInfo host=new AmbariHostInfo();
        host.setHostName(hostResource.getPropertyValue("Hosts/host_name").toString());
        hostsList.add(host);
      }
      cluster.setServices(servicesList);
      cluster.setHosts(hostsList);
      return cluster;
    }
  }
 catch (  UnsupportedPropertyException e) {
    logger.warn("Unable to determine Ambari cluster details - " + clusterInfo.getName(),e);
    throw new RuntimeException(e.getMessage(),e);
  }
catch (  NoSuchResourceException e) {
    logger.warn("Unable to determine Ambari cluster details - " + clusterInfo.getName(),e);
    throw new RuntimeException(e.getMessage(),e);
  }
catch (  NoSuchParentResourceException e) {
    logger.warn("Unable to determine Ambari cluster details - " + clusterInfo.getName(),e);
    throw new RuntimeException(e.getMessage(),e);
  }
catch (  SystemException e) {
    logger.warn("Unable to determine Ambari cluster details - " + clusterInfo.getName(),e);
    throw new RuntimeException(e.getMessage(),e);
  }
  return null;
}
