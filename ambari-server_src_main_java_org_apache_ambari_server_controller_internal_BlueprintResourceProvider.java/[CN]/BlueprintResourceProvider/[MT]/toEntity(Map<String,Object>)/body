{
  String name=(String)properties.get(BLUEPRINT_NAME_PROPERTY_ID);
  if (name == null || name.isEmpty()) {
    throw new IllegalArgumentException("Blueprint name must be provided");
  }
  BlueprintEntity blueprint=new BlueprintEntity();
  blueprint.setBlueprintName(name);
  blueprint.setStackName((String)properties.get(STACK_NAME_PROPERTY_ID));
  blueprint.setStackVersion((String)properties.get(STACK_VERSION_PROPERTY_ID));
  Collection<HostGroupEntity> blueprintHostGroups=new ArrayList<HostGroupEntity>();
  blueprint.setHostGroups(blueprintHostGroups);
  HashSet<HashMap<String,Object>> setHostGroups=(HashSet<HashMap<String,Object>>)properties.get(HOST_GROUP_PROPERTY_ID);
  for (  HashMap<String,Object> hostGroupProperties : setHostGroups) {
    HostGroupEntity group=new HostGroupEntity();
    group.setName((String)hostGroupProperties.get(HOST_GROUP_NAME_PROPERTY_ID));
    group.setBlueprintEntity(blueprint);
    group.setBlueprintName(name);
    group.setCardinality((String)hostGroupProperties.get(HOST_GROUP_CARDINALITY_PROPERTY_ID));
    Collection<HostGroupComponentEntity> components=new ArrayList<HostGroupComponentEntity>();
    group.setComponents(components);
    HashSet<HashMap<String,String>> setComponents=(HashSet<HashMap<String,String>>)hostGroupProperties.get(COMPONENT_PROPERTY_ID);
    for (    HashMap<String,String> componentProperties : setComponents) {
      HostGroupComponentEntity component=new HostGroupComponentEntity();
      component.setName(componentProperties.get(COMPONENT_NAME_PROPERTY_ID));
      component.setBlueprintName(name);
      component.setHostGroupEntity(group);
      component.setHostGroupName((String)hostGroupProperties.get(HOST_GROUP_NAME_PROPERTY_ID));
      components.add(component);
    }
    blueprintHostGroups.add(group);
  }
  return blueprint;
}
