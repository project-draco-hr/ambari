{
  BlueprintEntity entity=new BlueprintEntity();
  entity.setBlueprintName((String)resource.getPropertyValue(BLUEPRINT_NAME_PROPERTY_ID));
  entity.setStackName((String)resource.getPropertyValue(STACK_NAME_PROPERTY_ID));
  entity.setStackVersion((String)resource.getPropertyValue(STACK_VERSION_PROPERTY_ID));
  Collection<HostGroupEntity> blueprintHostGroups=new ArrayList<HostGroupEntity>();
  entity.setHostGroups(blueprintHostGroups);
  Collection<Map<String,Object>> hostGroupProps=(Collection<Map<String,Object>>)resource.getPropertyValue(HOST_GROUP_PROPERTY_ID);
  for (  Map<String,Object> properties : hostGroupProps) {
    HostGroupEntity group=new HostGroupEntity();
    group.setName((String)properties.get(BlueprintResourceProvider.HOST_GROUP_NAME_PROPERTY_ID));
    group.setBlueprintEntity(entity);
    group.setBlueprintName(entity.getBlueprintName());
    group.setCardinality((String)properties.get(HOST_GROUP_CARDINALITY_PROPERTY_ID));
    Collection<HostGroupComponentEntity> hostGroupComponents=new ArrayList<HostGroupComponentEntity>();
    group.setComponents(hostGroupComponents);
    List<Map<String,String>> listComponents=(List<Map<String,String>>)properties.get(BlueprintResourceProvider.COMPONENT_PROPERTY_ID);
    for (    Map<String,String> componentProperties : listComponents) {
      HostGroupComponentEntity component=new HostGroupComponentEntity();
      component.setName(componentProperties.get(COMPONENT_NAME_PROPERTY_ID));
      component.setBlueprintName(entity.getBlueprintName());
      component.setHostGroupEntity(group);
      component.setHostGroupName((String)properties.get(HOST_GROUP_NAME_PROPERTY_ID));
      hostGroupComponents.add(component);
    }
    blueprintHostGroups.add(group);
  }
  return entity;
}
