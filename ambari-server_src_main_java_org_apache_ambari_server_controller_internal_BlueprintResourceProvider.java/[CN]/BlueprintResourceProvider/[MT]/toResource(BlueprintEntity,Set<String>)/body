{
  Resource resource=new ResourceImpl(Resource.Type.Blueprint);
  setResourceProperty(resource,BLUEPRINT_NAME_PROPERTY_ID,entity.getBlueprintName(),requestedIds);
  setResourceProperty(resource,STACK_NAME_PROPERTY_ID,entity.getStackName(),requestedIds);
  setResourceProperty(resource,STACK_VERSION_PROPERTY_ID,entity.getStackVersion(),requestedIds);
  List<Map<String,Object>> listGroupProps=new ArrayList<Map<String,Object>>();
  Collection<HostGroupEntity> hostGroups=entity.getHostGroups();
  for (  HostGroupEntity hostGroup : hostGroups) {
    Map<String,Object> mapGroupProps=new HashMap<String,Object>();
    mapGroupProps.put(HOST_GROUP_NAME_PROPERTY_ID,hostGroup.getName());
    listGroupProps.add(mapGroupProps);
    mapGroupProps.put(HOST_GROUP_CARDINALITY_PROPERTY_ID,hostGroup.getCardinality());
    List<Map<String,String>> listComponentProps=new ArrayList<Map<String,String>>();
    Collection<HostGroupComponentEntity> components=hostGroup.getComponents();
    for (    HostGroupComponentEntity component : components) {
      Map<String,String> mapComponentProps=new HashMap<String,String>();
      mapComponentProps.put(COMPONENT_NAME_PROPERTY_ID,component.getName());
      listComponentProps.add(mapComponentProps);
    }
    mapGroupProps.put(COMPONENT_PROPERTY_ID,listComponentProps);
  }
  setResourceProperty(resource,HOST_GROUP_PROPERTY_ID,listGroupProps,requestedIds);
  return resource;
}
