{
  return new Command<Void>(){
    @SuppressWarnings("rawtypes") @Override public Void invoke() throws AmbariException {
      String rawRequestBody=requestInfoProps.get(Request.REQUEST_INFO_BODY_PROPERTY);
      Map<String,Object> rawBodyMap=jsonSerializer.<Map<String,Object>>fromJson(rawRequestBody,Map.class);
      Object configurationData=rawBodyMap.get(CONFIGURATION_PROPERTY_ID);
      if (configurationData != null) {
        if (configurationData instanceof List) {
          for (          Object map : (List)configurationData) {
            if (map instanceof Map) {
              if (((Map)map).size() > 1) {
                throw new IllegalArgumentException("Configuration Maps must hold a single configuration type each");
              }
            }
 else {
              throw new IllegalArgumentException("Configuration elements must be Maps");
            }
          }
        }
 else {
          throw new IllegalArgumentException("Configurations property must be a List of Maps");
        }
      }
      Blueprint blueprint;
      try {
        blueprint=blueprintFactory.createBlueprint(properties);
      }
 catch (      NoSuchStackException e) {
        throw new IllegalArgumentException("Specified stack doesn't exist: " + e,e);
      }
      if (blueprintDAO.findByName(blueprint.getName()) != null) {
        throw new DuplicateResourceException("Attempted to create a Blueprint which already exists, blueprint_name=" + blueprint.getName());
      }
      try {
        blueprint.validateRequiredProperties();
      }
 catch (      InvalidTopologyException e) {
        throw new IllegalArgumentException("Blueprint configuration validation failed: " + e.getMessage(),e);
      }
      String validateTopology=requestInfoProps.get("validate_topology");
      if (validateTopology == null || !validateTopology.equalsIgnoreCase("false")) {
        try {
          blueprint.validateTopology();
        }
 catch (        InvalidTopologyException e) {
          throw new IllegalArgumentException(e.getMessage());
        }
      }
      if (LOG.isDebugEnabled()) {
        LOG.debug("Creating Blueprint, name=" + blueprint.getName());
      }
      try {
        blueprintDAO.create(blueprint.toEntity());
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
      return null;
    }
  }
;
}
