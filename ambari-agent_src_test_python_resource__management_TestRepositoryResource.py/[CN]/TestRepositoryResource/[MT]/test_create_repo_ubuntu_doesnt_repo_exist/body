@patch.object(tempfile, 'NamedTemporaryFile')
@patch('resource_management.libraries.providers.repository.Execute')
@patch('resource_management.libraries.providers.repository.File')
@patch('os.path.isfile', new=MagicMock(return_value=True))
@patch('filecmp.cmp', new=MagicMock(return_value=True))
@patch.object(System, 'os_release_name', new='precise')
@patch.object(System, 'os_family', new='ubuntu')
def test_create_repo_ubuntu_doesnt_repo_exist(self, file_mock, execute_mock, tempfile_mock):
    tempfile_mock.return_value = MagicMock(spec=file)
    tempfile_mock.return_value.__enter__.return_value.name = '/tmp/1.txt'
    with Environment('/') as env:
        with patch.object(repository, 'Template', new=DummyTemplate.create(DEBIAN_DEFAUTL_TEMPLATE)):
            Repository('HDP', base_url='http://download.base_url.org/rpm/', repo_file_name='HDP', repo_template='dummy.j2', components=['a', 'b', 'c'])
    call_content = file_mock.call_args_list[0]
    template_name = call_content[0][0]
    template_content = call_content[1]['content']
    self.assertEquals(template_name, '/tmp/1.txt')
    self.assertEquals(template_content, 'deb http://download.base_url.org/rpm/ a b c\n')
    self.assertEqual(file_mock.call_count, 1)
    self.assertEqual(execute_mock.call_count, 0)
