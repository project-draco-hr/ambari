@patch.object(OSCheck, 'is_suse_family')
@patch.object(OSCheck, 'is_ubuntu_family')
@patch.object(OSCheck, 'is_redhat_family')
@patch.object(System, 'os_family', new='suse')
@patch('resource_management.libraries.providers.repository.File')
def test_create_repo_suse(self, file_mock, is_redhat_family, is_ubuntu_family, is_suse_family):
    is_redhat_family.return_value = False
    is_ubuntu_family.return_value = False
    is_suse_family.return_value = True
    with Environment('/') as env:
        with patch.object(repository, 'Template', new=DummyTemplate.create(RHEL_SUSE_DEFAULT_TEMPLATE)):
            with patch.object(repository, '__file__', new='/ambari/test/repo/dummy/path/file'):
                Repository('hadoop', base_url='http://download.base_url.org/rpm/', mirror_list='https://mirrors.base_url.org/?repo=Repository&arch=$basearch', repo_template='dummy.j2', repo_file_name='Repository')
                self.assertTrue(('hadoop' in env.resources['Repository']))
                defined_arguments = env.resources['Repository']['hadoop'].arguments
                expected_arguments = {'repo_template': 'dummy.j2', 'mirror_list': 'https://mirrors.base_url.org/?repo=Repository&arch=$basearch', 'base_url': 'http://download.base_url.org/rpm/', 'repo_file_name': 'Repository', }
                expected_template_arguments = {'mirror_list': 'https://mirrors.base_url.org/?repo=Repository&arch=$basearch', 'base_url': 'http://download.base_url.org/rpm/', 'repo_file_name': 'Repository', }
                self.assertEqual(defined_arguments, expected_arguments)
                self.assertEqual(file_mock.call_args[0][0], '/etc/zypp/repos.d/Repository.repo')
                template_item = file_mock.call_args[1]['content']
                template = str(template_item.name)
                expected_template_arguments.update({'repo_id': 'hadoop', })
                self.assertEqual(expected_template_arguments, template_item.context._dict)
                self.assertEqual('/ambari/test/repo/dummy/path/../data/dummy.j2', template)
