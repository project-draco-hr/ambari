{
  File stackRoot=new File(stackRootStr);
  StackInfo stackInfo=new StackInfo();
  stackInfo.setName("HDP");
  stackInfo.setVersion("2.0.7");
  StackExtensionHelper helper=new StackExtensionHelper(stackRoot);
  helper.populateServicesForStack(stackInfo);
  List<ServiceInfo> services=stackInfo.getServices();
  assertEquals(6,services.size());
  for (  ServiceInfo serviceInfo : services) {
    if (serviceInfo.getName().equals("HIVE")) {
      assertEquals("HIVE",serviceInfo.getName());
      assertEquals("1.0",serviceInfo.getSchemaVersion());
      assertEquals("root",serviceInfo.getUser());
      assertTrue(serviceInfo.getComment().startsWith("Data warehouse system"));
      assertEquals("0.11.0.2.0.5.0",serviceInfo.getVersion());
      List<ComponentInfo> components=serviceInfo.getComponents();
      assertEquals("HIVE_METASTORE",components.get(0).getName());
      assertEquals("MASTER",components.get(0).getCategory());
      List<PropertyInfo> properties=serviceInfo.getProperties();
      assertEquals(35,properties.size());
      boolean found=false;
      for (      PropertyInfo property : properties) {
        if (property.getName().equals("javax.jdo.option.ConnectionDriverName")) {
          assertEquals("com.mysql.jdbc.Driver",property.getValue());
          assertEquals("hive-site.xml",property.getFilename());
          assertEquals(false,property.isDeleted());
          found=true;
        }
      }
      assertTrue("Property not found in a list of properties",found);
      List<String> configDependencies=serviceInfo.getConfigDependencies();
      assertEquals(2,configDependencies.size());
      assertEquals("hive-site",configDependencies.get(1));
    }
 else     if (serviceInfo.getName().equals("HBASE")) {
      assertEquals("HBASE",serviceInfo.getName());
      assertEquals("HDP/2.0.7/services/HBASE/package",serviceInfo.getServicePackageFolder());
      assertEquals("2.0",serviceInfo.getSchemaVersion());
      assertTrue(serviceInfo.getComment().startsWith("Non-relational distr"));
      assertEquals("0.96.0.2.0.6.0",serviceInfo.getVersion());
      List<ComponentInfo> components=serviceInfo.getComponents();
      assertTrue(components.size() == 3);
      ComponentInfo firstComponent=components.get(0);
      assertEquals("HBASE_MASTER",firstComponent.getName());
      assertEquals("MASTER",firstComponent.getCategory());
      assertEquals("scripts/hbase_master.py",firstComponent.getCommandScript().getScript());
      assertEquals(CommandScriptDefinition.Type.PYTHON,firstComponent.getCommandScript().getScriptType());
      assertEquals(777,firstComponent.getCommandScript().getTimeout());
      List<CustomCommandDefinition> customCommands=firstComponent.getCustomCommands();
      assertEquals(2,customCommands.size());
      assertEquals("RESTART",customCommands.get(0).getName());
      assertTrue(firstComponent.isCustomCommand("RESTART"));
      assertEquals("scripts/hbase_master_restart.py",customCommands.get(0).getCommandScript().getScript());
      assertEquals(CommandScriptDefinition.Type.PYTHON,customCommands.get(0).getCommandScript().getScriptType());
      assertEquals(888,customCommands.get(0).getCommandScript().getTimeout());
      Map<String,ServiceOsSpecific> specifics=serviceInfo.getOsSpecifics();
      assertTrue(specifics.size() == 2);
      ServiceOsSpecific anyOs=specifics.get(AmbariMetaInfo.ANY_OS);
      assertEquals(AmbariMetaInfo.ANY_OS,anyOs.getOsType());
      assertEquals("rpm",anyOs.getPackages().get(0).getType());
      assertEquals("wget",anyOs.getPackages().get(0).getName());
      ComponentInfo secondComponent=components.get(1);
      assertEquals("HBASE_REGIONSERVER",secondComponent.getName());
      assertEquals(0,secondComponent.getCommandScript().getTimeout());
      ServiceOsSpecific c6Os=specifics.get("centos6");
      assertEquals("centos6",c6Os.getOsType());
      assertEquals("rpm",c6Os.getPackages().get(0).getType());
      assertEquals("hbase",c6Os.getPackages().get(0).getName());
      assertEquals("http://something.com/centos6/2.x/updates/1",c6Os.getRepo().getBaseUrl());
      assertEquals("Custom-repo-1",c6Os.getRepo().getRepoId());
      assertEquals("Custom-repo",c6Os.getRepo().getRepoName());
      assertTrue(serviceInfo.getCustomCommands().size() == 1);
      CustomCommandDefinition customCommand=serviceInfo.getCustomCommands().get(0);
      assertEquals("SERVICE_VALIDATION",customCommand.getName());
      assertEquals("scripts/hbase_validation.py",customCommand.getCommandScript().getScript());
      assertEquals(CommandScriptDefinition.Type.PYTHON,customCommand.getCommandScript().getScriptType());
      assertEquals(300,customCommand.getCommandScript().getTimeout());
      CommandScriptDefinition serviceScriptDefinition=serviceInfo.getCommandScript();
      assertEquals("scripts/service_check.py",serviceScriptDefinition.getScript());
      assertEquals(CommandScriptDefinition.Type.PYTHON,serviceScriptDefinition.getScriptType());
      assertEquals(50,serviceScriptDefinition.getTimeout());
      List<PropertyInfo> properties=serviceInfo.getProperties();
      assertEquals(38,properties.size());
      boolean found=false;
      for (      PropertyInfo property : properties) {
        if (property.getName().equals("hbase.cluster.distributed")) {
          assertEquals("true",property.getValue());
          assertTrue(property.getDescription().startsWith("The mode the"));
          assertEquals("hbase-site.xml",property.getFilename());
          found=true;
        }
      }
      assertTrue("Property not found in a list of properties",found);
      List<String> configDependencies=serviceInfo.getConfigDependencies();
      assertEquals(3,configDependencies.size());
      assertEquals("global",configDependencies.get(0));
      assertEquals("hbase-policy",configDependencies.get(1));
      assertEquals("hbase-site",configDependencies.get(2));
    }
 else {
      if (!serviceInfo.getName().equals("YARN") && !serviceInfo.getName().equals("HDFS") && !serviceInfo.getName().equals("MAPREDUCE2")&& !serviceInfo.getName().equals("SQOOP")) {
        fail("Unknown service");
      }
    }
  }
}
