{
  Configuration configuration=m_injector.getInstance(Configuration.class);
  EasyMock.expect(configuration.getViewRequestThreadPoolMaxSize()).andReturn(1).atLeastOnce();
  EasyMock.expect(configuration.getViewRequestThreadPoolTimeout()).andReturn(2000).atLeastOnce();
  EasyMock.expect(configuration.getClientThreadPoolSize()).andReturn(25).atLeastOnce();
  HttpServletRequest request=createNiceMock(HttpServletRequest.class);
  HttpServletResponse response=createStrictMock(HttpServletResponse.class);
  FilterChain filterChain=createStrictMock(FilterChain.class);
  EasyMock.expect(m_mockSemaphore.tryAcquire(2000,TimeUnit.MILLISECONDS)).andReturn(false);
  response.sendError(EasyMock.eq(HttpServletResponse.SC_SERVICE_UNAVAILABLE),EasyMock.anyString());
  EasyMock.expectLastCall().once();
  replayAll();
  ViewThrottleFilter filter=new ViewThrottleFilter();
  m_injector.injectMembers(filter);
  filter.init(null);
  filter.doFilter(request,response,filterChain);
  verifyAll();
}
