{
  Boolean hasHCFS=false;
  Boolean isHAEnabled=false;
  try {
    if (cluster != null && cluster.getService("HCFS") != null) {
      hasHCFS=true;
    }
  }
 catch (  AmbariException e) {
  }
  try {
    if (cluster != null && cluster.getService("HDFS") != null && cluster.getService("HDFS").getServiceComponent("JOURNALNODE") != null) {
      isHAEnabled=true;
    }
  }
 catch (  AmbariException e) {
  }
  ObjectMapper mapper=new ObjectMapper();
  File rcoFile=getRCOFile();
  Map<String,Object> userData=null;
  try {
    userData=mapper.readValue(rcoFile,Map.class);
  }
 catch (  IOException e) {
    String errorMsg=String.format("Can not read file %s",rcoFile.getAbsolutePath());
    LOG.error(errorMsg,e);
    return;
  }
  Map<String,Object> generalSection=(Map<String,Object>)userData.get(GENERAL_DEPS_KEY);
  addDependencies(generalSection);
  if (hasHCFS) {
    Map<String,Object> hcfsSection=(Map<String,Object>)userData.get(HCFS_DEPS_KEY);
    addDependencies(hcfsSection);
  }
 else {
    Map<String,Object> noHcfsSection=(Map<String,Object>)userData.get(NO_HCFS_DEPS_KEY);
    addDependencies(noHcfsSection);
  }
  if (isHAEnabled) {
    Map<String,Object> isHASection=(Map<String,Object>)userData.get(HA_DEPS_KEY);
    addDependencies(isHASection);
  }
  extendTransitiveDependency();
}
