{
  SchemaFactory schemaFactory=createNiceMock(SchemaFactory.class);
  Schema schema=createNiceMock(Schema.class);
  expect(schemaFactory.getSchema(Resource.Type.Component)).andReturn(schema).anyTimes();
  expect(schemaFactory.getSchema(Resource.Type.Alert)).andReturn(schema).anyTimes();
  expect(schema.getKeyPropertyId(Resource.Type.Component)).andReturn("ServiceComponentInfo/component_name").anyTimes();
  replay(schemaFactory,schema);
  QueryInfo rootQuery=new QueryInfo(new ServiceResourceDefinition(),new HashSet<String>());
  TreeNode<QueryInfo> queryTree=new TreeNodeImpl<QueryInfo>(null,rootQuery,"Service");
  MinimalRenderer renderer=new MinimalRenderer();
  renderer.init(schemaFactory);
  TreeNode<Set<String>> propertyTree=renderer.finalizeProperties(queryTree,false);
  assertTrue(propertyTree.getObject().isEmpty());
  assertEquals(2,propertyTree.getChildren().size());
  TreeNode<Set<String>> componentNode=propertyTree.getChild("Component");
  assertEquals(1,componentNode.getObject().size());
  assertTrue(componentNode.getObject().contains("ServiceComponentInfo/component_name"));
  verify(schemaFactory,schema);
}
