def setUp(self):
    import imp
    self.maxDiff = None
    self.testDirectory = os.path.dirname(os.path.abspath(__file__))
    stackAdvisorPath = os.path.join(self.testDirectory, '../../../../../main/resources/stacks/stack_advisor.py')
    hdp206StackAdvisorPath = os.path.join(self.testDirectory, '../../../../../main/resources/stacks/HDP/2.0.6/services/stack_advisor.py')
    hdp21StackAdvisorPath = os.path.join(self.testDirectory, '../../../../../main/resources/stacks/HDP/2.1/services/stack_advisor.py')
    hdp22StackAdvisorPath = os.path.join(self.testDirectory, '../../../../../main/resources/stacks/HDP/2.2/services/stack_advisor.py')
    hdp23StackAdvisorPath = os.path.join(self.testDirectory, '../../../../../main/resources/stacks/HDP/2.3/services/stack_advisor.py')
    hdp24StackAdvisorPath = os.path.join(self.testDirectory, '../../../../../main/resources/stacks/HDP/2.4/services/stack_advisor.py')
    hdp25StackAdvisorPath = os.path.join(self.testDirectory, '../../../../../main/resources/stacks/HDP/2.5/services/stack_advisor.py')
    hdp25StackAdvisorClassName = 'HDP25StackAdvisor'
    with open(stackAdvisorPath, 'rb') as fp:
        imp.load_module('stack_advisor', fp, stackAdvisorPath, ('.py', 'rb', imp.PY_SOURCE))
    with open(hdp206StackAdvisorPath, 'rb') as fp:
        imp.load_module('stack_advisor_impl', fp, hdp206StackAdvisorPath, ('.py', 'rb', imp.PY_SOURCE))
    with open(hdp21StackAdvisorPath, 'rb') as fp:
        imp.load_module('stack_advisor_impl', fp, hdp21StackAdvisorPath, ('.py', 'rb', imp.PY_SOURCE))
    with open(hdp22StackAdvisorPath, 'rb') as fp:
        imp.load_module('stack_advisor_impl', fp, hdp22StackAdvisorPath, ('.py', 'rb', imp.PY_SOURCE))
    with open(hdp23StackAdvisorPath, 'rb') as fp:
        imp.load_module('stack_advisor_impl', fp, hdp23StackAdvisorPath, ('.py', 'rb', imp.PY_SOURCE))
    with open(hdp24StackAdvisorPath, 'rb') as fp:
        imp.load_module('stack_advisor_impl', fp, hdp24StackAdvisorPath, ('.py', 'rb', imp.PY_SOURCE))
    with open(hdp25StackAdvisorPath, 'rb') as fp:
        stack_advisor_impl = imp.load_module('stack_advisor_impl', fp, hdp25StackAdvisorPath, ('.py', 'rb', imp.PY_SOURCE))
    clazz = getattr(stack_advisor_impl, hdp25StackAdvisorClassName)
    self.stackAdvisor = clazz()
    self.get_system_min_uid_real = self.stackAdvisor.get_system_min_uid
    self.stackAdvisor.get_system_min_uid = self.get_system_min_uid_magic
    self.hosts = {'items': [{'Hosts': {'cpu_count': 6, 'total_mem': 50331648, 'disk_info': [{'mountpoint': '/', }, {'mountpoint': '/dev/shm', }, {'mountpoint': '/vagrant', }, {'mountpoint': '/', }, {'mountpoint': '/dev/shm', }, {'mountpoint': '/vagrant', }], 'public_host_name': 'c6401.ambari.apache.org', 'host_name': 'c6401.ambari.apache.org', }, }, {'Hosts': {'cpu_count': 6, 'total_mem': 50331648, 'disk_info': [{'mountpoint': '/', }, {'mountpoint': '/dev/shm', }, {'mountpoint': '/vagrant', }, {'mountpoint': '/', }, {'mountpoint': '/dev/shm', }, {'mountpoint': '/vagrant', }], 'public_host_name': 'c6402.ambari.apache.org', 'host_name': 'c6402.ambari.apache.org', }, }, {'Hosts': {'cpu_count': 6, 'total_mem': 50331648, 'disk_info': [{'mountpoint': '/', }, {'mountpoint': '/dev/shm', }, {'mountpoint': '/vagrant', }, {'mountpoint': '/', }, {'mountpoint': '/dev/shm', }, {'mountpoint': '/vagrant', }], 'public_host_name': 'c6403.ambari.apache.org', 'host_name': 'c6403.ambari.apache.org', }, }, {'Hosts': {'cpu_count': 6, 'total_mem': 50331648, 'disk_info': [{'mountpoint': '/', }, {'mountpoint': '/dev/shm', }, {'mountpoint': '/vagrant', }, {'mountpoint': '/', }, {'mountpoint': '/dev/shm', }, {'mountpoint': '/vagrant', }], 'public_host_name': 'c6404.ambari.apache.org', 'host_name': 'c6404.ambari.apache.org', }, }, {'Hosts': {'cpu_count': 6, 'total_mem': 50331648, 'disk_info': [{'mountpoint': '/', }, {'mountpoint': '/dev/shm', }, {'mountpoint': '/vagrant', }, {'mountpoint': '/', }, {'mountpoint': '/dev/shm', }, {'mountpoint': '/vagrant', }], 'public_host_name': 'c6405.ambari.apache.org', 'host_name': 'c6405.ambari.apache.org', }, }], }
    self.clusterData = {'cpu': 4, 'mapMemory': 3000, 'amMemory': 2000, 'reduceMemory': 2056, 'containers': 3, 'ramPerContainer': 256, }
    self.expected_capacity_scheduler_llap_queue_size_20 = {'properties': {'capacity-scheduler': 'yarn.scheduler.capacity.root.default.maximum-capacity=80\nyarn.scheduler.capacity.root.accessible-node-labels=*\nyarn.scheduler.capacity.root.capacity=100\nyarn.scheduler.capacity.root.queues=default,llap\nyarn.scheduler.capacity.maximum-applications=10000\nyarn.scheduler.capacity.root.default.user-limit-factor=1\nyarn.scheduler.capacity.root.default.state=RUNNING\nyarn.scheduler.capacity.maximum-am-resource-percent=1\nyarn.scheduler.capacity.root.default.acl_submit_applications=*\nyarn.scheduler.capacity.root.default.capacity=80\nyarn.scheduler.capacity.root.acl_administer_queue=*\nyarn.scheduler.capacity.node-locality-delay=40\nyarn.scheduler.capacity.queue-mappings-override.enable=false\nyarn.scheduler.capacity.root.llap.user-limit-factor=1\nyarn.scheduler.capacity.root.llap.state=RUNNING\nyarn.scheduler.capacity.root.llap.ordering-policy=fifo\nyarn.scheduler.capacity.root.llap.minimum-user-limit-percent=100\nyarn.scheduler.capacity.root.llap.maximum-capacity=20\nyarn.scheduler.capacity.root.llap.capacity=20\nyarn.scheduler.capacity.root.llap.acl_submit_applications=hive\nyarn.scheduler.capacity.root.llap.acl_administer_queue=hive\nyarn.scheduler.capacity.root.llap.maximum-am-resource-percent=1', }, }
    self.expected_capacity_scheduler_llap_queue_size_40 = {'properties': {'capacity-scheduler': 'yarn.scheduler.capacity.root.default.maximum-capacity=60\nyarn.scheduler.capacity.root.accessible-node-labels=*\nyarn.scheduler.capacity.root.capacity=100\nyarn.scheduler.capacity.root.queues=default,llap\nyarn.scheduler.capacity.maximum-applications=10000\nyarn.scheduler.capacity.root.default.user-limit-factor=1\nyarn.scheduler.capacity.root.default.state=RUNNING\nyarn.scheduler.capacity.maximum-am-resource-percent=1\nyarn.scheduler.capacity.root.default.acl_submit_applications=*\nyarn.scheduler.capacity.root.default.capacity=60\nyarn.scheduler.capacity.root.acl_administer_queue=*\nyarn.scheduler.capacity.node-locality-delay=40\nyarn.scheduler.capacity.queue-mappings-override.enable=false\nyarn.scheduler.capacity.root.llap.user-limit-factor=1\nyarn.scheduler.capacity.root.llap.state=RUNNING\nyarn.scheduler.capacity.root.llap.ordering-policy=fifo\nyarn.scheduler.capacity.root.llap.minimum-user-limit-percent=100\nyarn.scheduler.capacity.root.llap.maximum-capacity=40\nyarn.scheduler.capacity.root.llap.capacity=40\nyarn.scheduler.capacity.root.llap.acl_submit_applications=hive\nyarn.scheduler.capacity.root.llap.acl_administer_queue=hive\nyarn.scheduler.capacity.root.llap.maximum-am-resource-percent=1', }, }
    self.expected_capacity_scheduler_llap_Stopped_size_0 = {'properties': {'capacity-scheduler': 'yarn.scheduler.capacity.root.default.maximum-capacity=100\nyarn.scheduler.capacity.root.accessible-node-labels=*\nyarn.scheduler.capacity.root.capacity=100\nyarn.scheduler.capacity.root.queues=default,llap\nyarn.scheduler.capacity.maximum-applications=10000\nyarn.scheduler.capacity.root.default.user-limit-factor=1\nyarn.scheduler.capacity.root.default.state=RUNNING\nyarn.scheduler.capacity.maximum-am-resource-percent=1\nyarn.scheduler.capacity.root.default.acl_submit_applications=*\nyarn.scheduler.capacity.root.default.capacity=100\nyarn.scheduler.capacity.root.acl_administer_queue=*\nyarn.scheduler.capacity.node-locality-delay=40\nyarn.scheduler.capacity.queue-mappings-override.enable=false\nyarn.scheduler.capacity.root.llap.user-limit-factor=1\nyarn.scheduler.capacity.root.llap.state=STOPPED\nyarn.scheduler.capacity.root.llap.ordering-policy=fifo\nyarn.scheduler.capacity.root.llap.minimum-user-limit-percent=100\nyarn.scheduler.capacity.root.llap.maximum-capacity=0\nyarn.scheduler.capacity.root.llap.capacity=0\nyarn.scheduler.capacity.root.llap.acl_submit_applications=hive\nyarn.scheduler.capacity.root.llap.acl_administer_queue=hive\nyarn.scheduler.capacity.root.llap.maximum-am-resource-percent=1', }, }
    self.expected_capacity_scheduler_with_default_queue_only = {'properties': {'capacity-scheduler': 'yarn.scheduler.capacity.root.accessible-node-labels=*\nyarn.scheduler.capacity.maximum-am-resource-percent=1\nyarn.scheduler.capacity.root.capacity=100\nyarn.scheduler.capacity.root.default.state=RUNNING\nyarn.scheduler.capacity.node-locality-delay=40\nyarn.scheduler.capacity.root.queues=default\nyarn.scheduler.capacity.maximum-applications=10000\nyarn.scheduler.capacity.root.default.user-limit-factor=1\nyarn.scheduler.capacity.root.acl_administer_queue=*\nyarn.scheduler.capacity.root.default.acl_submit_applications=*\nyarn.scheduler.capacity.root.default.capacity=100\nyarn.scheduler.capacity.root.default.maximum-capacity=100\nyarn.scheduler.capacity.queue-mappings-override.enable=false\n', }, }
    self.expected_capacity_scheduler_empty = {'properties': {}, }
    self.expected_hive_interactive_site_llap = {'hive-interactive-site': {'properties': {'hive.llap.daemon.queue.name': 'llap', }, 'property_attributes': {'hive.llap.daemon.queue.name': {'entries': [{'value': 'default', 'label': 'default', }, {'value': 'llap', 'label': 'llap', }], }, }, }, }
    self.expected_hive_interactive_site_default = {'hive-interactive-site': {'properties': {'hive.llap.daemon.queue.name': 'default', }, 'property_attributes': {'hive.llap.daemon.queue.name': {'entries': [{'value': 'default', 'label': 'default', }], }, }, }, }
    self.expected_hive_interactive_site_empty = {'hive-interactive-site': {'properties': {}, }, }
    self.expected_hive_interactive_env_empty = {'hive-interactive-env': {'properties': {}, }, }
    self.expected_hive_interactive_site_only_memory = {'hive-interactive-site': {'properties': {'hive.llap.daemon.yarn.container.mb': '341', }, }, }
    self.expected_llap_queue_capacity_20 = '20'
    self.expected_llap_queue_capacity_40 = '40'
    self.expected_visibility_false = {'visible': 'false', }
    self.expected_visibility_true = {'visible': 'true', }
