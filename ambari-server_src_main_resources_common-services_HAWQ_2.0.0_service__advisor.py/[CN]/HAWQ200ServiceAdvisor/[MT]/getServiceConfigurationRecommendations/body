def getServiceConfigurationRecommendations(self, configurations, clusterData, services, hosts):
    if ('hdfs-site' in services['configurations']):
        hdfs_site = services['configurations']['hdfs-site']['properties']
        putHdfsSiteProperty = self.putProperty(configurations, 'hdfs-site', services)
        for (property, desired_value) in self.getHDFSSiteDesiredValues(self.isSecurityEnabled(services)).iteritems():
            if ((property not in hdfs_site) or (hdfs_site[property] != desired_value)):
                putHdfsSiteProperty(property, desired_value)
    if ('core-site' in services['configurations']):
        core_site = services['configurations']['core-site']['properties']
        putCoreSiteProperty = self.putProperty(configurations, 'core-site', services)
        for (property, desired_value) in self.getCORESiteDesiredValues().iteritems():
            if ((property not in core_site) or (core_site[property] != desired_value)):
                putCoreSiteProperty(property, desired_value)
    if all(((x in services['configurations']) for x in ['hawq-site', 'hdfs-client', 'hawq-sysctl-env'])):
        componentsListList = [service['components'] for service in services['services']]
        componentsList = [item['StackServiceComponents'] for sublist in componentsListList for item in sublist]
        servicesList = [service['StackServices']['service_name'] for service in services['services']]
        hawqMasterHosts = set(self.getHosts(componentsList, 'HAWQMASTER')).union(set(self.getHosts(componentsList, 'HAWQSTANDBY')))
        hawqSegmentHosts = set(self.getHosts(componentsList, 'HAWQSEGMENT'))
        hawqHosts = hawqMasterHosts.union(hawqSegmentHosts)
        numSegments = len(hawqSegmentHosts)
        minHawqHostsMemory = min([host['Hosts']['total_mem'] for host in hosts['items'] if (host['Hosts']['host_name'] in hawqHosts)])
        minHawqHostsCoreCount = min([host['Hosts']['cpu_count'] for host in hosts['items'] if (host['Hosts']['host_name'] in hawqHosts)])
        hawq_site = services['configurations']['hawq-site']['properties']
        hawq_sysctl_env = services['configurations']['hawq-sysctl-env']['properties']
        putHawqSiteProperty = self.putProperty(configurations, 'hawq-site', services)
        putHawqSysctlEnvProperty = self.putProperty(configurations, 'hawq-sysctl-env', services)
        putHdfsClientProperty = self.putProperty(configurations, 'hdfs-client', services)
        if (self.isHawqMasterComponentOnAmbariServer(services) and ('hawq_master_address_port' in hawq_site)):
            putHawqSiteProperty('hawq_master_address_port', '')
        putHawqSiteProperty('hawq_rm_nvcore_limit_perseg', minHawqHostsCoreCount)
        MEMORY_THRESHOLD = 33554432
        vm_overcommit_memory = (2 if (minHawqHostsMemory >= MEMORY_THRESHOLD) else 1)
        vm_overcommit_ratio = (int(hawq_sysctl_env['vm.overcommit_ratio']) if ('vm.overcommit_ratio' in hawq_sysctl_env) else 50)
        putHawqSysctlEnvProperty('vm.overcommit_memory', vm_overcommit_memory)
        putHawqSysctlEnvProperty('vm.overcommit_ratio', vm_overcommit_ratio)
        host_ram_kb = (((float(minHawqHostsMemory) * float(vm_overcommit_ratio)) / 100) if (vm_overcommit_memory == 2) else minHawqHostsMemory)
        host_ram_gb = (float(host_ram_kb) / (1024 * 1024))
        recommended_mem_percentage = {(host_ram_gb <= 64): 0.75, (64 < host_ram_gb <= 512): 0.85, (host_ram_gb > 512): 0.95, }[True]
        hawq_rm_memory_limit_perseg_value = math.ceil((host_ram_gb * recommended_mem_percentage))
        hawq_rm_memory_limit_perseg_unit = 'GB'
        if (hawq_rm_memory_limit_perseg_value >= host_ram_gb):
            hawq_rm_memory_limit_perseg_value = math.ceil(((float(host_ram_kb) / 1024) * recommended_mem_percentage))
            hawq_rm_memory_limit_perseg_unit = 'MB'
        putHawqSiteProperty('hawq_rm_memory_limit_perseg', '{0}{1}'.format(int(hawq_rm_memory_limit_perseg_value), hawq_rm_memory_limit_perseg_unit))
        if (numSegments and ('hawq_rm_nvseg_perquery_limit' in hawq_site)):
            factor_min = 1
            factor_max = 6
            limit = int(hawq_site['hawq_rm_nvseg_perquery_limit'])
            factor = (limit / numSegments)
            if (factor < factor_min):
                buckets = limit
            elif (factor > factor_max):
                buckets = (factor_max * numSegments)
            else:
                buckets = (factor * numSegments)
            if (host_ram_kb < 2796202.66667):
                factor = 4
                buckets = min((factor * numSegments), buckets)
            putHawqSiteProperty('default_hash_table_bucket_number', buckets)
        if (('YARN' in servicesList) and ('yarn-site' in services['configurations'])):
            yarn_site = services['configurations']['yarn-site']['properties']
            for (hs_prop, ys_prop) in self.getHAWQYARNPropertyMapping().items():
                if ((hs_prop in hawq_site) and (ys_prop in yarn_site)):
                    putHawqSiteProperty(hs_prop, yarn_site[ys_prop])
        putHdfsClientProperty('output.replace-datanode-on-failure', str((numSegments > 3)).lower())
        putHawqSitePropertyAttribute = self.putPropertyAttribute(configurations, 'hawq-site')
        putHawqSysctlEnvPropertyAttribute = self.putPropertyAttribute(configurations, 'hawq-sysctl-env')
        YARN_MODE = (hawq_site['hawq_global_rm_type'].lower() == 'yarn')
        yarn_mode_properties_visibility = {'hawq_rm_memory_limit_perseg': False, 'hawq_rm_nvcore_limit_perseg': False, 'hawq_rm_yarn_app_name': True, 'hawq_rm_yarn_queue_name': True, 'hawq_rm_yarn_scheduler_address': True, 'hawq_rm_yarn_address': True, }
        for (property, visibility) in yarn_mode_properties_visibility.iteritems():
            putHawqSitePropertyAttribute(property, 'visible', str((visibility if YARN_MODE else (not visibility))).lower())
        putHawqSitePropertyAttribute('default_hash_table_bucket_number', 'maximum', ((numSegments * 16) if ((numSegments * 16) < 10000) else 10000))
