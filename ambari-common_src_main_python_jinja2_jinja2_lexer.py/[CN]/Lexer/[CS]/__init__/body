def __init__(self, environment):
    c = (lambda x: re.compile(x, (re.M | re.S)))
    e = re.escape
    tag_rules = [(whitespace_re, TOKEN_WHITESPACE, None), (float_re, TOKEN_FLOAT, None), (integer_re, TOKEN_INTEGER, None), (name_re, TOKEN_NAME, None), (string_re, TOKEN_STRING, None), (operator_re, TOKEN_OPERATOR, None)]
    root_tag_rules = compile_rules(environment)
    block_suffix_re = ((environment.trim_blocks and '\\n?') or '')
    self.newline_sequence = environment.newline_sequence
    self.rules = {'root': [(c(('(.*?)(?:%s)' % '|'.join(([('(?P<raw_begin>(?:\\s*%s\\-|%s)\\s*raw\\s*(?:\\-%s\\s*|%s))' % (e(environment.block_start_string), e(environment.block_start_string), e(environment.block_end_string), e(environment.block_end_string)))] + [('(?P<%s_begin>\\s*%s\\-|%s)' % (n, r, r)) for (n, r) in root_tag_rules])))), (TOKEN_DATA, '#bygroup'), '#bygroup'), (c('.+'), TOKEN_DATA, None)], TOKEN_COMMENT_BEGIN: [(c(('(.*?)((?:\\-%s\\s*|%s)%s)' % (e(environment.comment_end_string), e(environment.comment_end_string), block_suffix_re))), (TOKEN_COMMENT, TOKEN_COMMENT_END), '#pop'), (c('(.)'), (Failure('Missing end of comment tag'),), None)], TOKEN_BLOCK_BEGIN: ([(c(('(?:\\-%s\\s*|%s)%s' % (e(environment.block_end_string), e(environment.block_end_string), block_suffix_re))), TOKEN_BLOCK_END, '#pop')] + tag_rules), TOKEN_VARIABLE_BEGIN: ([(c(('\\-%s\\s*|%s' % (e(environment.variable_end_string), e(environment.variable_end_string)))), TOKEN_VARIABLE_END, '#pop')] + tag_rules), TOKEN_RAW_BEGIN: [(c(('(.*?)((?:\\s*%s\\-|%s)\\s*endraw\\s*(?:\\-%s\\s*|%s%s))' % (e(environment.block_start_string), e(environment.block_start_string), e(environment.block_end_string), e(environment.block_end_string), block_suffix_re))), (TOKEN_DATA, TOKEN_RAW_END), '#pop'), (c('(.)'), (Failure('Missing end of raw directive'),), None)], TOKEN_LINESTATEMENT_BEGIN: ([(c('\\s*(\\n|$)'), TOKEN_LINESTATEMENT_END, '#pop')] + tag_rules), TOKEN_LINECOMMENT_BEGIN: [(c('(.*?)()(?=\\n|$)'), (TOKEN_LINECOMMENT, TOKEN_LINECOMMENT_END), '#pop')], }
