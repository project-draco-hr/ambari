@patch('resource_management.libraries.functions.dfs_datanode_helper.Directory')
@patch.object(Logger, 'info')
@patch.object(Logger, 'error')
@patch.object(dfs_datanode_helper, 'get_dir_to_mount_from_file')
@patch.object(dfs_datanode_helper, 'get_mount_point_for_dir')
@patch.object(os.path, 'isdir')
@patch.object(os.path, 'exists')
def test_grid_becomes_unmounted(self, mock_os_exists, mock_os_isdir, mock_get_mount_point, mock_get_data_dir_to_mount_from_file, log_error, log_info, dir_mock):
    '\n    Test when grid2 becomes unmounted\n    '
    mock_os_exists.return_value = True
    mock_get_data_dir_to_mount_from_file.return_value = {self.grid0: '/dev0', self.grid1: '/dev1', self.grid2: '/dev2', }
    mock_get_mount_point.side_effect = (['/dev0', '/dev1', '/'] * 2)
    mock_os_isdir.side_effect = ([False, False, False] + [True, True, True])
    dfs_datanode_helper.handle_mounted_dirs(fake_create_dir, self.params.dfs_data_dir, self.params.data_dir_mount_file, update_cache=False)
    for (name, args, kwargs) in log_info.mock_calls:
        print args[0]
    error_logs = []
    for (name, args, kwargs) in log_error.mock_calls:
        error_logs.append(args[0])
    error_msg = ''.join(error_logs)
    self.assertEquals(1, log_error.call_count)
    self.assertTrue(('Directory /grid/2/data does not exist and became unmounted from /dev2' in error_msg))
