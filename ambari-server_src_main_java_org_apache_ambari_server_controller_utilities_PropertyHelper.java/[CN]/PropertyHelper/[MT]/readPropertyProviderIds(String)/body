{
  ObjectMapper mapper=new ObjectMapper();
  try {
    Map<Resource.Type,Map<String,Map<String,GangliaMetric>>> resourceGangliaMetrics=mapper.readValue(ClassLoader.getSystemResourceAsStream(filename),new TypeReference<Map<Resource.Type,Map<String,Map<String,GangliaMetric>>>>(){
    }
);
    Map<Resource.Type,Map<String,Map<PropertyId,String>>> resourceMetrics=new HashMap<Resource.Type,Map<String,Map<PropertyId,String>>>();
    for (    Map.Entry<Resource.Type,Map<String,Map<String,GangliaMetric>>> resourceEntry : resourceGangliaMetrics.entrySet()) {
      Map<String,Map<PropertyId,String>> componentMetrics=new HashMap<String,Map<PropertyId,String>>();
      for (      Map.Entry<String,Map<String,GangliaMetric>> componentEntry : resourceEntry.getValue().entrySet()) {
        Map<PropertyId,String> metrics=new HashMap<PropertyId,String>();
        for (        Map.Entry<String,GangliaMetric> metricEntry : componentEntry.getValue().entrySet()) {
          String property=metricEntry.getKey();
          String category="";
          int i=property.lastIndexOf('/');
          if (i != -1) {
            category=property.substring(0,i);
            property=property.substring(i + 1);
          }
          GangliaMetric gangliaMetric=metricEntry.getValue();
          if (gangliaMetric.isPointInTime()) {
            metrics.put(PropertyHelper.getPropertyId(property,category,false),gangliaMetric.getMetric());
          }
          if (gangliaMetric.isTemporal()) {
            metrics.put(PropertyHelper.getPropertyId(property,category,true),gangliaMetric.getMetric());
          }
        }
        componentMetrics.put(componentEntry.getKey(),metrics);
      }
      resourceMetrics.put(resourceEntry.getKey(),componentMetrics);
    }
    return resourceMetrics;
  }
 catch (  IOException e) {
    throw new IllegalStateException("Can't read properties file " + filename,e);
  }
}
