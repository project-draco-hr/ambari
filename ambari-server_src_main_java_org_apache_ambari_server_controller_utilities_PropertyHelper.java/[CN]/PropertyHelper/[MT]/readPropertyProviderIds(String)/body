{
  ObjectMapper mapper=new ObjectMapper();
  try {
    Map<Resource.InternalType,Map<String,Map<String,Metric>>> resourceMetricMap=mapper.readValue(ClassLoader.getSystemResourceAsStream(filename),new TypeReference<Map<Resource.InternalType,Map<String,Map<String,Metric>>>>(){
    }
);
    Map<Resource.InternalType,Map<String,Map<String,PropertyInfo>>> resourceMetrics=new HashMap<Resource.InternalType,Map<String,Map<String,PropertyInfo>>>();
    for (    Map.Entry<Resource.InternalType,Map<String,Map<String,Metric>>> resourceEntry : resourceMetricMap.entrySet()) {
      Map<String,Map<String,PropertyInfo>> componentMetrics=new HashMap<String,Map<String,PropertyInfo>>();
      for (      Map.Entry<String,Map<String,Metric>> componentEntry : resourceEntry.getValue().entrySet()) {
        Map<String,PropertyInfo> metrics=new HashMap<String,PropertyInfo>();
        for (        Map.Entry<String,Metric> metricEntry : componentEntry.getValue().entrySet()) {
          String property=metricEntry.getKey();
          Metric metric=metricEntry.getValue();
          PropertyInfo propertyInfo=new PropertyInfo(metric.getMetric(),metric.isTemporal(),metric.isPointInTime());
          propertyInfo.setAmsId(metric.getAmsId());
          propertyInfo.setAmsHostMetric(metric.isAmsHostMetric());
          metrics.put(property,propertyInfo);
        }
        componentMetrics.put(componentEntry.getKey(),metrics);
      }
      resourceMetrics.put(resourceEntry.getKey(),componentMetrics);
    }
    return resourceMetrics;
  }
 catch (  IOException e) {
    throw new IllegalStateException("Can't read properties file " + filename,e);
  }
}
