{
  SubsetConfiguration configuration=createNiceMock(SubsetConfiguration.class);
  Connection connection=createNiceMock(Connection.class);
  CallableStatement cstmt=createNiceMock(CallableStatement.class);
  expect(configuration.getParent()).andReturn(null);
  expect(configuration.getPrefix()).andReturn("prefix");
  expect(configuration.getString("databaseUrl")).andReturn("url");
  expect(connection.prepareCall("{call dbo.uspGetMetricRecord(?, ?, ?, ?, ?, ?, ?, ?, ?)}")).andReturn(cstmt);
  cstmt.setNString(1,"context");
  cstmt.setNString(2,"typeName");
  cstmt.setNString(3,"nodeName");
  cstmt.setNString(4,"ip");
  cstmt.setNString(5,"clusterName");
  cstmt.setNString(6,"serviceName");
  cstmt.setNString(7,"tagPairs");
  cstmt.setLong(8,9999L);
  cstmt.registerOutParameter(9,java.sql.Types.BIGINT);
  expect(cstmt.execute()).andReturn(true);
  expect(cstmt.getLong(9)).andReturn(99L);
  expect(cstmt.wasNull()).andReturn(false);
  replay(configuration,connection,cstmt);
  SqlServerSink sink=createInstance();
  sink.init(configuration);
  SQLServerDriver.setConnection(connection);
  Assert.assertEquals(99,sink.getMetricRecordID("context","typeName","nodeName","ip","clusterName","serviceName","tagPairs",9999L));
  verify(configuration,connection,cstmt);
}
