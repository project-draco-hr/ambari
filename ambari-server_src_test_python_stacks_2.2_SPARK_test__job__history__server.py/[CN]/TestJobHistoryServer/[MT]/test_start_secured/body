@patch('resource_management.libraries.functions.copy_tarball.copy_to_hdfs')
def test_start_secured(self, copy_to_hdfs_mock):
    copy_to_hdfs_mock.return_value = True
    self.executeScript((self.COMMON_SERVICES_PACKAGE_DIR + '/scripts/job_history_server.py'), classname='JobHistoryServer', command='start', config_file='secured.json', stack_version=self.STACK_VERSION, target=RMFTestCase.TARGET_COMMON_SERVICES)
    self.assert_configure_secured()
    self.assertResourceCalled('Execute', '/usr/bin/kinit -kt /etc/security/keytabs/spark.service.keytab spark/localhost@EXAMPLE.COM; ', user='spark')
    self.assertResourceCalled('HdfsResource', None, immutable_paths=self.DEFAULT_IMMUTABLE_PATHS, action=['execute'], hdfs_resource_ignore_file='/var/lib/ambari-agent/data/.hdfs_resource_ignore', default_fs=UnknownConfigurationMock(), hadoop_bin_dir='/usr/hdp/current/hadoop-client/bin', hadoop_conf_dir='/usr/hdp/current/hadoop-client/conf', hdfs_site=UnknownConfigurationMock(), keytab=UnknownConfigurationMock(), kinit_path_local='/usr/bin/kinit', principal_name=UnknownConfigurationMock(), security_enabled=True, dfs_type='', user=UnknownConfigurationMock())
    self.assertResourceCalled('Execute', '/usr/hdp/current/spark-client/sbin/start-history-server.sh', environment={'JAVA_HOME': u'/usr/jdk64/jdk1.7.0_45', }, not_if='ls /var/run/spark/spark-spark-org.apache.spark.deploy.history.HistoryServer-1.pid >/dev/null 2>&1 && ps -p `cat /var/run/spark/spark-spark-org.apache.spark.deploy.history.HistoryServer-1.pid` >/dev/null 2>&1', user='spark')
    self.assertNoMoreResources()
