{
  UpgradeContext ctx=createNiceMock(UpgradeContext.class);
  ClusterGrouping.ExecuteStage execution=new ClusterGrouping.ExecuteStage();
  MasterHostResolver resolverMock=createMock(MasterHostResolver.class);
  expect(ctx.getResolver()).andReturn(resolverMock).anyTimes();
  replay(ctx);
  replay(resolverMock);
  Set<String> realHosts=ClusterGrouping.getHostsForExecuteStage(ctx,execution);
  assertNotNull(realHosts);
  assertTrue(realHosts.isEmpty());
  verify(resolverMock);
  execution.service="HBASE";
  execution.component="HBASE_MASTER";
  reset(resolverMock);
  expect(resolverMock.getMasterAndHosts(anyString(),anyString())).andReturn(null).once();
  replay(resolverMock);
  realHosts=ClusterGrouping.getHostsForExecuteStage(ctx,execution);
  assertNull(realHosts);
  verify(resolverMock);
  execution.service="HBASE";
  execution.component="HBASE_MASTER";
  reset(resolverMock);
  HostsType hostsType=new HostsType();
  hostsType.hosts.add("host1");
  hostsType.hosts.add("host2");
  expect(resolverMock.getMasterAndHosts(anyString(),anyString())).andReturn(hostsType).once();
  replay(resolverMock);
  realHosts=ClusterGrouping.getHostsForExecuteStage(ctx,execution);
  assertNotNull(realHosts);
  assertArrayEquals(new String[]{"host1","host2"},realHosts.toArray());
  verify(resolverMock);
}
