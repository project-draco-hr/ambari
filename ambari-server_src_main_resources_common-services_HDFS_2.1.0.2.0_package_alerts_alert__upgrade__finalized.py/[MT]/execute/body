def execute(configurations={}, parameters={}, host_name=None):
    '\n  Returns a tuple containing the result code and a pre-formatted result label\n\n  Keyword arguments:\n  configurations : a mapping of configuration key to value\n  parameters : a mapping of script parameter key to value\n  host_name : the name of this host where the alert is running\n\n  :type configurations dict\n  :type parameters dict\n  :type host_name str\n  '
    if (configurations is None):
        return ('UNKNOWN', ['There were no configurations supplied to the script.'])
    uri = None
    scheme = 'http'
    http_uri = None
    https_uri = None
    http_policy = 'HTTP_ONLY'
    if (NN_HTTP_ADDRESS_KEY in configurations):
        http_uri = configurations[NN_HTTP_ADDRESS_KEY]
    if (NN_HTTPS_ADDRESS_KEY in configurations):
        https_uri = configurations[NN_HTTPS_ADDRESS_KEY]
    if (NN_HTTP_POLICY_KEY in configurations):
        http_policy = configurations[NN_HTTP_POLICY_KEY]
    if (SMOKEUSER_KEY in configurations):
        smokeuser = configurations[SMOKEUSER_KEY]
    executable_paths = None
    if (EXECUTABLE_SEARCH_PATHS in configurations):
        executable_paths = configurations[EXECUTABLE_SEARCH_PATHS]
    security_enabled = False
    if (SECURITY_ENABLED_KEY in configurations):
        security_enabled = (str(configurations[SECURITY_ENABLED_KEY]).upper() == 'TRUE')
    kerberos_keytab = None
    if (KERBEROS_KEYTAB in configurations):
        kerberos_keytab = configurations[KERBEROS_KEYTAB]
    kerberos_principal = None
    if (KERBEROS_PRINCIPAL in configurations):
        kerberos_principal = configurations[KERBEROS_PRINCIPAL]
        kerberos_principal = kerberos_principal.replace('_HOST', host_name)
    kinit_timer_ms = parameters.get(KERBEROS_KINIT_TIMER_PARAMETER, DEFAULT_KERBEROS_KINIT_TIMER_MS)
    uri = http_uri
    if (http_policy == 'HTTPS_ONLY'):
        scheme = 'https'
        if (https_uri is not None):
            uri = https_uri
    upgrade_finalized_qry = '{0}://{1}/jmx?qry=Hadoop:service=NameNode,name=NameNodeInfo'.format(scheme, uri)
    label = None
    result_code = 'OK'
    try:
        if ((kerberos_principal is not None) and (kerberos_keytab is not None) and security_enabled):
            env = Environment.get_instance()
            (last_checkpoint_time_response, error_msg, time_millis) = curl_krb_request(env.tmp_dir, kerberos_keytab, kerberos_principal, upgrade_finalized_qry, 'upgrade_finalized_state', executable_paths, False, 'HDFS Upgrade Finalized State', smokeuser, kinit_timer_ms=kinit_timer_ms)
            upgrade_finalized_response_json = json.loads(last_checkpoint_time_response)
            upgrade_finalized = bool(upgrade_finalized_response_json['beans'][0]['UpgradeFinalized'])
        else:
            upgrade_finalized = bool(get_value_from_jmx(upgrade_finalized_qry, 'UpgradeFinalized'))
        if upgrade_finalized:
            label = 'HDFS cluster is not in the upgrade state'
            result_code = 'OK'
        else:
            label = 'HDFS cluster is not finalized'
            result_code = 'CRITICAL'
    except:
        label = traceback.format_exc()
        result_code = 'UNKNOWN'
    return (result_code, [label])
