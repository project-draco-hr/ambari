{
  String archivePath=archiveDir.getAbsolutePath();
  try {
    if (archiveDir.exists() && viewArchive.lastModified() > archiveDir.lastModified()) {
      FileUtils.deleteDirectory(archiveDir);
    }
    if (!archiveDir.exists()) {
      String msg="Creating archive folder " + archivePath + ".";
      view.setStatusDetail(msg);
      LOG.info(msg);
      if (archiveDir.mkdir()) {
        JarInputStream jarInputStream=archiveUtility.getJarFileStream(viewArchive);
        try {
          msg="Extracting files from " + viewArchive.getName() + ".";
          view.setStatusDetail(msg);
          LOG.info(msg);
          File metaInfDir=archiveUtility.getFile(archivePath + File.separator + "META-INF");
          if (!metaInfDir.mkdir()) {
            msg="Could not create archive META-INF directory.";
            view.setStatusDetail(msg);
            LOG.error(msg);
            throw new ExtractionException(msg);
          }
          JarEntry jarEntry;
          while ((jarEntry=jarInputStream.getNextJarEntry()) != null) {
            try {
              String entryPath=archivePath + File.separator + jarEntry.getName();
              LOG.debug("Extracting " + entryPath);
              File entryFile=archiveUtility.getFile(entryPath);
              if (jarEntry.isDirectory()) {
                LOG.debug("Making directory " + entryPath);
                if (!entryFile.mkdir()) {
                  msg="Could not create archive entry directory " + entryPath + ".";
                  view.setStatusDetail(msg);
                  LOG.error(msg);
                  throw new ExtractionException(msg);
                }
              }
 else {
                FileOutputStream fos=archiveUtility.getFileOutputStream(entryFile);
                try {
                  LOG.debug("Begin copying from " + jarEntry.getName() + " to "+ entryPath);
                  byte[] buffer=new byte[BUFFER_SIZE];
                  int n;
                  while ((n=jarInputStream.read(buffer)) > -1) {
                    fos.write(buffer,0,n);
                  }
                  LOG.debug("Finish copying from " + jarEntry.getName() + " to "+ entryPath);
                }
  finally {
                  fos.flush();
                  fos.close();
                }
              }
            }
  finally {
              jarInputStream.closeEntry();
            }
          }
        }
  finally {
          jarInputStream.close();
        }
      }
 else {
        msg="Could not create archive directory " + archivePath + ".";
        view.setStatusDetail(msg);
        LOG.error(msg);
        throw new ExtractionException(msg);
      }
    }
    ViewConfig viewConfig=archiveUtility.getViewConfigFromExtractedArchive(archivePath,false);
    return getArchiveClassLoader(viewConfig,archiveDir);
  }
 catch (  Exception e) {
    String msg="Caught exception trying to extract the view archive " + archivePath + ".";
    view.setStatusDetail(msg);
    LOG.error(msg,e);
    throw new ExtractionException(msg,e);
  }
}
