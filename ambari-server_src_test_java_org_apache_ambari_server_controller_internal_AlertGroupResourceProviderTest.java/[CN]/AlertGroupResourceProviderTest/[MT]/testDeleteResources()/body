{
  AmbariManagementController amc=createMock(AmbariManagementController.class);
  Clusters clusters=createMock(Clusters.class);
  Cluster cluster=createMock(Cluster.class);
  expect(amc.getClusters()).andReturn(clusters).atLeastOnce();
  expect(clusters.getCluster((String)anyObject())).andReturn(cluster).atLeastOnce();
  expect(cluster.getClusterId()).andReturn(Long.valueOf(1)).anyTimes();
  Capture<AlertGroupEntity> entityCapture=new Capture<AlertGroupEntity>();
  Capture<List<AlertGroupEntity>> listCapture=new Capture<List<AlertGroupEntity>>();
  m_dao.createGroups(capture(listCapture));
  expectLastCall();
  replay(amc,clusters,cluster,m_dao);
  AlertGroupResourceProvider provider=createProvider(amc);
  Map<String,Object> requestProps=new HashMap<String,Object>();
  requestProps.put(AlertGroupResourceProvider.ALERT_GROUP_NAME,ALERT_GROUP_NAME);
  requestProps.put(AlertGroupResourceProvider.ALERT_GROUP_CLUSTER_NAME,ALERT_GROUP_CLUSTER_NAME);
  Request request=PropertyHelper.getCreateRequest(Collections.singleton(requestProps),null);
  provider.createResources(request);
  Assert.assertTrue(listCapture.hasCaptured());
  AlertGroupEntity entity=listCapture.getValue().get(0);
  Assert.assertNotNull(entity);
  Predicate predicate=new PredicateBuilder().property(AlertGroupResourceProvider.ALERT_GROUP_CLUSTER_NAME).equals(ALERT_GROUP_CLUSTER_NAME).and().property(AlertGroupResourceProvider.ALERT_GROUP_ID).equals(ALERT_GROUP_ID.toString()).toPredicate();
  entity.setGroupId(ALERT_GROUP_ID);
  resetToStrict(m_dao);
  expect(m_dao.findGroupById(ALERT_GROUP_ID.longValue())).andReturn(entity).anyTimes();
  m_dao.remove(capture(entityCapture));
  expectLastCall();
  replay(m_dao);
  provider.deleteResources(predicate);
  AlertGroupEntity entity1=entityCapture.getValue();
  Assert.assertEquals(ALERT_GROUP_ID,entity1.getGroupId());
  verify(amc,clusters,cluster,m_dao);
}
