{
  clusterTopologyCapture=newCapture();
  configRequestPropertiesCapture=newCapture();
  configRequestPropertiesCapture2=newCapture();
  configRequestPropertiesCapture3=newCapture();
  updateClusterConfigRequestCapture=newCapture();
  updateConfigTaskCapture=newCapture();
  topoConfiguration.setProperty("service1-site","s1-prop","s1-prop-value");
  topoConfiguration.setProperty("service2-site","s2-prop","s2-prop-value");
  topoConfiguration.setProperty("cluster-env","g-prop","g-prop-value");
  group1Info.addHost("host1");
  group1Info.setConfiguration(topoGroup1Config);
  group2Info.setRequestedCount(2);
  group2Info.setPredicate(predicate);
  group2Info.setConfiguration(topoGroup2Config);
  groupInfoMap.put("group1",group1Info);
  groupInfoMap.put("group2",group2Info);
  Map<String,HostGroup> groupMap=new HashMap<String,HostGroup>();
  groupMap.put("group1",group1);
  groupMap.put("group2",group2);
  serviceComponents.put("service1",Arrays.asList("component1","component3"));
  serviceComponents.put("service2",Arrays.asList("component2","component4"));
  group1ServiceComponents.put("service1",Arrays.asList("component1","component3"));
  group1ServiceComponents.put("service2",Collections.singleton("component2"));
  group2ServiceComponents.put("service2",Collections.singleton("component3"));
  group2ServiceComponents.put("service2",Collections.singleton("component4"));
  expect(blueprint.getHostGroup("group1")).andReturn(group1).anyTimes();
  expect(blueprint.getHostGroup("group2")).andReturn(group2).anyTimes();
  expect(blueprint.getComponents("service1")).andReturn(Arrays.asList("component1","component3")).anyTimes();
  expect(blueprint.getComponents("service2")).andReturn(Arrays.asList("component2","component4")).anyTimes();
  expect(blueprint.getConfiguration()).andReturn(bpConfiguration).anyTimes();
  expect(blueprint.getHostGroups()).andReturn(groupMap).anyTimes();
  expect(blueprint.getHostGroupsForComponent("component1")).andReturn(Collections.singleton(group1)).anyTimes();
  expect(blueprint.getHostGroupsForComponent("component2")).andReturn(Collections.singleton(group1)).anyTimes();
  expect(blueprint.getHostGroupsForComponent("component3")).andReturn(Arrays.asList(group1,group2)).anyTimes();
  expect(blueprint.getHostGroupsForComponent("component4")).andReturn(Collections.singleton(group2)).anyTimes();
  expect(blueprint.getHostGroupsForService("service1")).andReturn(Arrays.asList(group1,group2)).anyTimes();
  expect(blueprint.getHostGroupsForService("service2")).andReturn(Arrays.asList(group1,group2)).anyTimes();
  expect(blueprint.getName()).andReturn(BLUEPRINT_NAME).anyTimes();
  expect(blueprint.getServices()).andReturn(Arrays.asList("service1","service2")).anyTimes();
  expect(blueprint.getStack()).andReturn(stack).anyTimes();
  expect(stack.getAllConfigurationTypes("service1")).andReturn(Arrays.asList("service1-site","service1-env")).anyTimes();
  expect(stack.getAllConfigurationTypes("service2")).andReturn(Arrays.asList("service2-site","service2-env")).anyTimes();
  expect(stack.getAutoDeployInfo("component1")).andReturn(null).anyTimes();
  expect(stack.getAutoDeployInfo("component2")).andReturn(null).anyTimes();
  expect(stack.getAutoDeployInfo("component3")).andReturn(null).anyTimes();
  expect(stack.getAutoDeployInfo("component4")).andReturn(null).anyTimes();
  expect(serviceComponentInfo.isClient()).andReturn(false).anyTimes();
  expect(clientComponentInfo.isClient()).andReturn(true).anyTimes();
  expect(stack.getComponentInfo("component1")).andReturn(serviceComponentInfo).anyTimes();
  expect(stack.getComponentInfo("component2")).andReturn(serviceComponentInfo).anyTimes();
  expect(stack.getComponentInfo("component3")).andReturn(clientComponentInfo).anyTimes();
  expect(stack.getComponentInfo("component4")).andReturn(clientComponentInfo).anyTimes();
  expect(stack.getCardinality("component1")).andReturn(new Cardinality("1")).anyTimes();
  expect(stack.getCardinality("component2")).andReturn(new Cardinality("1")).anyTimes();
  expect(stack.getCardinality("component3")).andReturn(new Cardinality("1+")).anyTimes();
  expect(stack.getCardinality("component4")).andReturn(new Cardinality("1+")).anyTimes();
  expect(stack.getComponents()).andReturn(serviceComponents).anyTimes();
  expect(stack.getComponents("service1")).andReturn(serviceComponents.get("service1")).anyTimes();
  expect(stack.getComponents("service2")).andReturn(serviceComponents.get("service2")).anyTimes();
  expect(stack.getConfiguration()).andReturn(stackConfig).anyTimes();
  expect(stack.getName()).andReturn(STACK_NAME).anyTimes();
  expect(stack.getVersion()).andReturn(STACK_VERSION).anyTimes();
  expect(stack.getServiceForConfigType("service1-site")).andReturn("service1").anyTimes();
  expect(stack.getServiceForConfigType("service2-site")).andReturn("service2").anyTimes();
  expect(stack.getExcludedConfigurationTypes("service1")).andReturn(Collections.<String>emptySet()).anyTimes();
  expect(stack.getExcludedConfigurationTypes("service2")).andReturn(Collections.<String>emptySet()).anyTimes();
  expect(request.getBlueprint()).andReturn(blueprint).anyTimes();
  expect(request.getClusterId()).andReturn(CLUSTER_ID).anyTimes();
  expect(request.getClusterName()).andReturn(CLUSTER_NAME).anyTimes();
  expect(request.getDescription()).andReturn("Provision Cluster Test").anyTimes();
  expect(request.getConfiguration()).andReturn(topoConfiguration).anyTimes();
  expect(request.getHostGroupInfo()).andReturn(groupInfoMap).anyTimes();
  expect(request.getTopologyValidators()).andReturn(topologyValidators).anyTimes();
  expect(request.getConfigRecommendationStrategy()).andReturn(ConfigRecommendationStrategy.NEVER_APPLY);
  expect(request.getProvisionAction()).andReturn(INSTALL_ONLY).anyTimes();
  expect(request.getSecurityConfiguration()).andReturn(null).anyTimes();
  expect(group1.getBlueprintName()).andReturn(BLUEPRINT_NAME).anyTimes();
  expect(group1.getCardinality()).andReturn("test cardinality").anyTimes();
  expect(group1.containsMasterComponent()).andReturn(true).anyTimes();
  expect(group1.getComponentNames()).andReturn(group1Components).anyTimes();
  expect(group1.getComponents("service1")).andReturn(group1ServiceComponents.get("service1")).anyTimes();
  expect(group1.getComponents("service2")).andReturn(group1ServiceComponents.get("service1")).anyTimes();
  expect(group1.getConfiguration()).andReturn(topoGroup1Config).anyTimes();
  expect(group1.getName()).andReturn("group1").anyTimes();
  expect(group1.getServices()).andReturn(Arrays.asList("service1","service2")).anyTimes();
  expect(group1.getStack()).andReturn(stack).anyTimes();
  expect(group2.getBlueprintName()).andReturn(BLUEPRINT_NAME).anyTimes();
  expect(group2.getCardinality()).andReturn("test cardinality").anyTimes();
  expect(group2.containsMasterComponent()).andReturn(false).anyTimes();
  expect(group2.getComponentNames()).andReturn(group2Components).anyTimes();
  expect(group2.getComponents("service1")).andReturn(group2ServiceComponents.get("service1")).anyTimes();
  expect(group2.getComponents("service2")).andReturn(group2ServiceComponents.get("service2")).anyTimes();
  expect(group2.getConfiguration()).andReturn(topoGroup2Config).anyTimes();
  expect(group2.getName()).andReturn("group2").anyTimes();
  expect(group2.getServices()).andReturn(Arrays.asList("service1","service2")).anyTimes();
  expect(group2.getStack()).andReturn(stack).anyTimes();
  logicalRequestFactory=createMockBuilder(LogicalRequestFactory.class).addMockedMethod(LogicalRequestFactory.class.getMethod("createRequest",Long.class,TopologyRequest.class,ClusterTopology.class,TopologyLogicalRequestEntity.class)).createMock();
  Field f=TopologyManager.class.getDeclaredField("logicalRequestFactory");
  f.setAccessible(true);
  f.set(topologyManager,logicalRequestFactory);
  PowerMock.mockStatic(AmbariServer.class);
  expect(AmbariServer.getController()).andReturn(managementController).anyTimes();
  PowerMock.replay(AmbariServer.class);
  expect(managementController.getClusters()).andReturn(clusters).anyTimes();
  expect(clusters.getClusterById(anyLong())).andReturn(cluster).anyTimes();
  expect(cluster.getClusterName()).andReturn(CLUSTER_NAME).anyTimes();
  expect(ambariContext.getPersistedTopologyState()).andReturn(persistedState).anyTimes();
  ambariContext.createAmbariResources(isA(ClusterTopology.class),eq(CLUSTER_NAME),(SecurityType)isNull(),(String)isNull());
  expectLastCall().once();
  expect(ambariContext.getNextRequestId()).andReturn(1L).once();
  expect(ambariContext.isClusterKerberosEnabled(CLUSTER_ID)).andReturn(false).anyTimes();
  expect(ambariContext.getClusterId(CLUSTER_NAME)).andReturn(CLUSTER_ID).anyTimes();
  expect(ambariContext.getClusterName(CLUSTER_ID)).andReturn(CLUSTER_NAME).anyTimes();
  expect(ambariContext.shouldSkipInstallTasks()).andReturn(true).anyTimes();
  expect(ambariContext.createConfigurationRequests(capture(configRequestPropertiesCapture))).andReturn(Collections.singletonList(configurationRequest));
  expect(ambariContext.createConfigurationRequests(capture(configRequestPropertiesCapture2))).andReturn(Collections.singletonList(configurationRequest2)).once();
  expect(ambariContext.createConfigurationRequests(capture(configRequestPropertiesCapture3))).andReturn(Collections.singletonList(configurationRequest3)).once();
  expect(ambariContext.createAmbariTask(anyLong(),anyLong(),eq("component3"),anyString(),eq(AmbariContext.TaskType.INSTALL),anyBoolean())).andReturn(hostRoleCommandInstallComponent3).times(3);
  expect(ambariContext.createAmbariTask(anyLong(),anyLong(),eq("component4"),anyString(),eq(AmbariContext.TaskType.INSTALL),anyBoolean())).andReturn(hostRoleCommandInstallComponent4).times(2);
  expect(hostRoleCommandInstallComponent3.getTaskId()).andReturn(1L).atLeastOnce();
  expect(hostRoleCommandInstallComponent3.getRoleCommand()).andReturn(RoleCommand.INSTALL).atLeastOnce();
  expect(hostRoleCommandInstallComponent3.getRole()).andReturn(Role.INSTALL_PACKAGES).atLeastOnce();
  expect(hostRoleCommandInstallComponent3.getStatus()).andReturn(HostRoleStatus.COMPLETED).atLeastOnce();
  expect(hostRoleCommandInstallComponent4.getTaskId()).andReturn(2L).atLeastOnce();
  expect(hostRoleCommandInstallComponent4.getRoleCommand()).andReturn(RoleCommand.INSTALL).atLeastOnce();
  expect(hostRoleCommandInstallComponent4.getRole()).andReturn(Role.INSTALL_PACKAGES).atLeastOnce();
  expect(hostRoleCommandInstallComponent4.getStatus()).andReturn(HostRoleStatus.COMPLETED).atLeastOnce();
  ambariContext.setConfigurationOnCluster(capture(updateClusterConfigRequestCapture));
  expectLastCall().times(3);
  ambariContext.persistInstallStateForUI(CLUSTER_NAME,STACK_NAME,STACK_VERSION);
  expectLastCall().once();
  expect(clusterController.ensureResourceProvider(anyObject(Resource.Type.class))).andReturn(resourceProvider);
  expect(executor.submit(anyObject(AsyncCallableService.class))).andReturn(mockFuture);
  persistedTopologyRequest=new PersistedTopologyRequest(1,request);
  expect(persistedState.getAllRequests()).andReturn(Collections.<ClusterTopology,List<LogicalRequest>>emptyMap()).once();
  expect(persistedState.persistTopologyRequest(request)).andReturn(persistedTopologyRequest).once();
  persistedState.persistLogicalRequest((LogicalRequest)anyObject(),anyLong());
  expectLastCall().once();
  replay(blueprint,stack,request,group1,group2,ambariContext,logicalRequestFactory,logicalRequest,configurationRequest,configurationRequest2,configurationRequest3,requestStatusResponse,executor,persistedState,securityConfigurationFactory,credentialStoreService,clusterController,resourceProvider,mockFuture,managementController,clusters,cluster,hostRoleCommandInstallComponent3,hostRoleCommandInstallComponent4,serviceComponentInfo,clientComponentInfo);
  Class clazz=TopologyManager.class;
  f=clazz.getDeclaredField("executor");
  f.setAccessible(true);
  f.set(topologyManager,executor);
  EasyMockSupport.injectMocks(topologyManager);
}
