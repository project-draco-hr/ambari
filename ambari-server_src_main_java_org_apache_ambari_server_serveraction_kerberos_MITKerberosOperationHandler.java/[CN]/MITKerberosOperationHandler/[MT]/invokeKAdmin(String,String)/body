{
  if (StringUtils.isEmpty(query)) {
    throw new KerberosOperationException("Missing kadmin query");
  }
  ShellCommandUtil.Result result=null;
  PrincipalKeyCredential administratorCredential=getAdministratorCredential();
  String defaultRealm=getDefaultRealm();
  List<String> command=new ArrayList<String>();
  String adminPrincipal=(administratorCredential == null) ? null : administratorCredential.getPrincipal();
  ShellCommandUtil.InteractiveHandler interactiveHandler=null;
  if (StringUtils.isEmpty(adminPrincipal)) {
    if (StringUtils.isEmpty(executableKadminLocal)) {
      throw new KerberosOperationException("No path for kadmin.local is available - this KerberosOperationHandler may not have been opened.");
    }
    command.add(executableKadminLocal);
    if (userPassword != null) {
      interactiveHandler=new InteractivePasswordHandler(null,userPassword);
    }
  }
 else {
    if (StringUtils.isEmpty(executableKadmin)) {
      throw new KerberosOperationException("No path for kadmin is available - this KerberosOperationHandler may not have been opened.");
    }
    char[] adminPassword=administratorCredential.getKey();
    command.add(executableKadmin);
    if (!StringUtils.isEmpty(getAdminServerHost())) {
      command.add("-s");
      command.add(getAdminServerHost());
    }
    command.add("-p");
    command.add(adminPrincipal);
    if (!ArrayUtils.isEmpty(adminPassword)) {
      interactiveHandler=new InteractivePasswordHandler(String.valueOf(adminPassword),userPassword);
    }
 else     if (userPassword != null) {
      interactiveHandler=new InteractivePasswordHandler(null,userPassword);
    }
  }
  if (!StringUtils.isEmpty(defaultRealm)) {
    command.add("-r");
    command.add(defaultRealm);
  }
  command.add("-q");
  command.add(query);
  if (LOG.isDebugEnabled()) {
    LOG.debug(String.format("Executing: %s",command));
  }
  int retryCount=configuration.getKerberosOperationRetries();
  int tries=0;
  while (tries <= retryCount) {
    try {
      result=executeCommand(command.toArray(new String[command.size()]),null,interactiveHandler);
    }
 catch (    KerberosOperationException exception) {
      if (tries == retryCount) {
        throw exception;
      }
    }
 finally {
      if (result != null && result.isSuccessful()) {
        break;
      }
      tries++;
      String message=String.format("Retrying to execute kadmin:\n\tCommand: %s",command);
      LOG.warn(message);
    }
  }
  if (!result.isSuccessful()) {
    String message=String.format("Failed to execute kadmin:\n\tCommand: %s\n\tExitCode: %s\n\tSTDOUT: %s\n\tSTDERR: %s",command,result.getExitCode(),result.getStdout(),result.getStderr());
    LOG.warn(message);
    String stdErr=result.getStderr();
    if (stdErr.contains("Client not found in Kerberos database")) {
      throw new KerberosAdminAuthenticationException(stdErr);
    }
 else     if (stdErr.contains("Incorrect password while initializing")) {
      throw new KerberosAdminAuthenticationException(stdErr);
    }
 else     if (stdErr.contains("Cannot contact any KDC")) {
      throw new KerberosKDCConnectionException(stdErr);
    }
 else     if (stdErr.contains("Cannot resolve network address for admin server in requested realm while initializing kadmin interface")) {
      throw new KerberosKDCConnectionException(stdErr);
    }
 else     if (stdErr.contains("Missing parameters in krb5.conf required for kadmin client")) {
      throw new KerberosRealmException(stdErr);
    }
 else     if (stdErr.contains("Cannot find KDC for requested realm while initializing kadmin interface")) {
      throw new KerberosRealmException(stdErr);
    }
 else {
      throw new KerberosOperationException("Unexpected error condition executing the kadmin command");
    }
  }
  return result;
}
