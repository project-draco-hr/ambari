@safe_retry(times=5, sleep_time=8, backoff_factor=1.5, err_class=Fail, return_on_fail=None)
def create_repository_urllib2(self, data, usernamepassword):
    '\n    :param data: json object to create repository\n    :param usernamepassword: user credentials using which repository needs to be searched.\n    :return: Returns created Ranger repository object\n    '
    try:
        search_repo_url = self.url_repos_pub
        base_64_string = base64.encodestring('{0}'.format(usernamepassword)).replace('\n', '')
        headers = {'Accept': 'application/json', 'Content-Type': 'application/json', }
        request = urllib2.Request(search_repo_url, data, headers)
        request.add_header('Authorization', 'Basic {0}'.format(base_64_string))
        result = openurl(request, timeout=20)
        response_code = result.getcode()
        response = json.loads(json.JSONEncoder().encode(result.read()))
        if (response_code == 200):
            Logger.info('Repository created Successfully')
            return response
        else:
            raise Fail('Repository creation failed')
    except urllib2.URLError as e:
        if isinstance(e, urllib2.HTTPError):
            raise Fail('Error creating repository. Http status code - {0}. \n {1}'.format(e.code, e.read()))
        else:
            raise Fail('Error creating repository. Reason - {0}.'.format(e.reason))
    except httplib.BadStatusLine:
        raise Fail('Ranger Admin service is not reachable, please restart the service and then try again')
    except TimeoutError:
        raise Fail('Connection to Ranger Admin failed. Reason - timeout')
