def get_policy_params(self, typeOfPolicy, policyObj, policy_user):
    '\n    :param typeOfPolicy: component name for which policy has to be get\n    :param policyObj: policy dict\n    :param policy_user: policy user that needs to be updated\n    :returns Returns updated policy dict\n    '
    typeOfPolicy = typeOfPolicy.lower()
    policy_record = ''
    if (typeOfPolicy == 'hdfs'):
        policy_record = {'users': [policy_user], 'accesses': [{'isAllowed': True, 'type': 'read', }, {'isAllowed': True, 'type': 'write', }, {'isAllowed': True, 'type': 'execute', }], 'delegateAdmin': True, }
    elif (typeOfPolicy == 'hive'):
        policy_record = {'users': [policy_user], 'accesses': [{'isAllowed': True, 'type': 'select', }, {'isAllowed': True, 'type': 'update', }, {'isAllowed': True, 'type': 'create', }, {'isAllowed': True, 'type': 'drop', }, {'isAllowed': True, 'type': 'alter', }, {'isAllowed': True, 'type': 'index', }, {'isAllowed': True, 'type': 'lock', }, {'isAllowed': True, 'type': 'all', }], 'delegateAdmin': True, }
    elif (typeOfPolicy == 'hbase'):
        policy_record = {'users': [policy_user], 'accesses': [{'isAllowed': True, 'type': 'read', }, {'isAllowed': True, 'type': 'write', }, {'isAllowed': True, 'type': 'create', }], 'delegateAdmin': True, }
    elif (typeOfPolicy == 'knox'):
        policy_record = {'users': [policy_user], 'accesses': [{'isAllowed': True, 'type': 'allow', }], 'delegateAdmin': True, }
    elif (typeOfPolicy == 'storm'):
        policy_record = {'users': [policy_user], 'accesses': [{'isAllowed': True, 'type': 'submitTopology', }, {'isAllowed': True, 'type': 'fileUpload', }, {'isAllowed': True, 'type': 'getNimbusConf', }, {'isAllowed': True, 'type': 'getClusterInfo', }, {'isAllowed': True, 'type': 'fileDownload', }, {'isAllowed': True, 'type': 'killTopology', }, {'isAllowed': True, 'type': 'rebalance', }, {'isAllowed': True, 'type': 'activate', }, {'isAllowed': True, 'type': 'deactivate', }, {'isAllowed': True, 'type': 'getTopologyConf', }, {'isAllowed': True, 'type': 'getTopology', }, {'isAllowed': True, 'type': 'getUserTopology', }, {'isAllowed': True, 'type': 'getTopologyInfo', }, {'isAllowed': True, 'type': 'uploadNewCredential', }], 'delegateAdmin': True, }
    if (policy_record != ''):
        policyObj['policyItems'].append(policy_record)
    return policyObj
