{
  final String expectedHostName="c6401.ambari.apache.org";
  final String expectedComponentName="DATANODE";
  final String expectedClusterName="clusterone";
  EasyMockSupport mockSupport=new EasyMockSupport();
  LoggingRequestHelperFactory helperFactoryMock=mockSupport.createMock(LoggingRequestHelperFactory.class);
  Executor executorMock=mockSupport.createMock(Executor.class);
  executorMock.execute(isA(LogSearchDataRetrievalService.LogSearchFileNameRequestRunnable.class));
  expectLastCall().once();
  mockSupport.replayAll();
  LogSearchDataRetrievalService retrievalService=new LogSearchDataRetrievalService();
  retrievalService.setLoggingRequestHelperFactory(helperFactoryMock);
  retrievalService.doStart();
  retrievalService.setExecutor(executorMock);
  assertEquals("Default request set should be empty",0,retrievalService.getCurrentRequests().size());
  Set<String> resultSet=retrievalService.getLogFileNames(expectedComponentName,expectedHostName,expectedClusterName);
  assertNull("Inital query on the retrieval service should be null, since cache is empty by default",resultSet);
  assertEquals("Incorrect number of entries in the current request set",1,retrievalService.getCurrentRequests().size());
  assertTrue("Incorrect HostComponent set on request set",retrievalService.getCurrentRequests().contains(expectedComponentName + "+" + expectedHostName));
  mockSupport.verifyAll();
}
