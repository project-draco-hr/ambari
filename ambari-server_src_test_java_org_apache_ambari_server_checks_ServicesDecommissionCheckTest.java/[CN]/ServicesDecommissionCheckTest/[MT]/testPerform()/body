{
  final ServicesDecommissionCheck servicesDecommissionCheck=new ServicesDecommissionCheck();
  servicesDecommissionCheck.clustersProvider=new Provider<Clusters>(){
    @Override public Clusters get(){
      return clusters;
    }
  }
;
  final Cluster cluster=Mockito.mock(Cluster.class);
  Mockito.when(cluster.getClusterId()).thenReturn(1L);
  Mockito.when(clusters.getCluster("cluster")).thenReturn(cluster);
  final Service service=Mockito.mock(Service.class);
  Mockito.when(cluster.getServices()).thenReturn(Collections.singletonMap("service",service));
  final ServiceComponent serviceComponent1=Mockito.mock(ServiceComponent.class);
  final ServiceComponent serviceComponent2=Mockito.mock(ServiceComponent.class);
  final Map<String,ServiceComponent> serviceComponents=new HashMap<String,ServiceComponent>();
  serviceComponents.put("component1",serviceComponent1);
  serviceComponents.put("component2",serviceComponent2);
  Mockito.when(service.getServiceComponents()).thenReturn(serviceComponents);
  final ServiceComponentHost serviceComponentHost1=Mockito.mock(ServiceComponentHost.class);
  final ServiceComponentHost serviceComponentHost2=Mockito.mock(ServiceComponentHost.class);
  Mockito.when(serviceComponent1.getServiceComponentHosts()).thenReturn(Collections.singletonMap("serviceComponentHost1",serviceComponentHost1));
  Mockito.when(serviceComponent2.getServiceComponentHosts()).thenReturn(Collections.singletonMap("serviceComponentHost2",serviceComponentHost2));
  Mockito.when(serviceComponent1.getServiceComponentHost(Mockito.anyString())).thenReturn(serviceComponentHost1);
  Mockito.when(serviceComponent2.getServiceComponentHost(Mockito.anyString())).thenReturn(serviceComponentHost2);
  Mockito.when(serviceComponentHost1.getComponentAdminState()).thenReturn(HostComponentAdminState.DECOMMISSIONED);
  Mockito.when(serviceComponentHost2.getComponentAdminState()).thenReturn(HostComponentAdminState.INSERVICE);
  PrerequisiteCheck check=new PrerequisiteCheck(null,null,null,null);
  servicesDecommissionCheck.perform(check,new PrereqCheckRequest("cluster"));
  Assert.assertEquals(PrereqCheckStatus.FAIL,check.getStatus());
  Mockito.when(serviceComponentHost1.getComponentAdminState()).thenReturn(HostComponentAdminState.INSERVICE);
  check=new PrerequisiteCheck(null,null,null,null);
  servicesDecommissionCheck.perform(check,new PrereqCheckRequest("cluster"));
  Assert.assertEquals(PrereqCheckStatus.PASS,check.getStatus());
}
