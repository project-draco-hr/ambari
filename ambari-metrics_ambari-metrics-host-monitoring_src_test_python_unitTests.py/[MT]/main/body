def main():
    custom_tests = False
    if (len(sys.argv) > 1):
        if (sys.argv[1] == 'true'):
            custom_tests = True
    pwd = os.path.abspath(os.path.dirname(__file__))
    project_folder = get_parent_path(pwd, 'ambari-metrics-host-monitoring')
    ambari_common_folder = os.path.join(project_folder, '../../ambari-common')
    sys.path.append((ambari_common_folder + '/src/main/python'))
    sys.path.append((ambari_common_folder + '/src/main/python/ambari_jinja2'))
    sys.path.append((ambari_common_folder + '/src/main/python'))
    sys.path.append((ambari_common_folder + '/src/test/python'))
    sys.path.append((project_folder + '/src/test/python'))
    sys.path.append((project_folder + '/src/main/python'))
    sys.path.append((project_folder + '/src/main/python/core'))
    sys.path.append((project_folder + '/src/main/resources/scripts'))
    sys.path.append((project_folder + '/src/main/resources/custom_actions'))
    sys.path.append((project_folder + '/target/psutil_build'))
    has_failures = False
    test_runs = 0
    test_failures = []
    test_errors = []
    sys.stderr.write('Running tests\n')
    if custom_tests:
        test_mask = CUSTOM_TEST_MASK
    else:
        test_mask = TEST_MASK
    tests = get_test_files(pwd, mask=test_mask, recursive=True)
    shuffle(tests)
    modules = [os.path.basename(s)[:(-3)] for s in tests]
    suites = [unittest.defaultTestLoader.loadTestsFromName(name) for name in modules]
    testSuite = unittest.TestSuite(suites)
    textRunner = unittest.TextTestRunner(verbosity=2).run(testSuite)
    test_runs += textRunner.testsRun
    test_errors.extend([(str(item[0]), str(item[1]), 'ERROR') for item in textRunner.errors])
    test_failures.extend([(str(item[0]), str(item[1]), 'FAIL') for item in textRunner.failures])
    tests_status = (textRunner.wasSuccessful() and (not has_failures))
    if (not tests_status):
        sys.stderr.write('----------------------------------------------------------------------\n')
        sys.stderr.write('Failed tests:\n')
    for failed_tests in [test_errors, test_failures]:
        for err in failed_tests:
            sys.stderr.write('{0}: {1}\n'.format(err[2], err[0]))
            sys.stderr.write('----------------------------------------------------------------------\n')
            sys.stderr.write('{0}\n'.format(err[1]))
    sys.stderr.write('----------------------------------------------------------------------\n')
    sys.stderr.write('Total run:{0}\n'.format(test_runs))
    sys.stderr.write('Total errors:{0}\n'.format(len(test_errors)))
    sys.stderr.write('Total failures:{0}\n'.format(len(test_failures)))
    if tests_status:
        sys.stderr.write('OK\n')
        exit_code = 0
    else:
        sys.stderr.write('ERROR\n')
        exit_code = 1
    return exit_code
