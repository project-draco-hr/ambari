@patch.object(upgradeHelper, 'curl')
@patch('time.time')
def test_update_config(self, time_mock, curl_mock):
    time_pass = 2
    config_type = 'test config'
    properties = {'test property': 'test value', }
    attributes = {'test attribute': 'attribute value', }
    expected_tag = ('version' + str(int((time_pass * 1000))))
    properties_payload = {'Clusters': {'desired_config': {'type': config_type, 'tag': expected_tag, 'properties': properties, }, }, }
    time_mock.return_value = time_pass
    expected_simple_result = ((upgradeHelper.Options.CLUSTER_URL,), {'request_type': 'PUT', 'data': copy.deepcopy(properties_payload), 'validate': True, 'validate_expect_body': True, })
    properties_payload['Clusters']['desired_config']['properties_attributes'] = attributes
    expected_complex_result = ((upgradeHelper.Options.CLUSTER_URL,), {'request_type': 'PUT', 'data': copy.deepcopy(properties_payload), 'validate': True, 'validate_expect_body': True, })
    upgradeHelper.update_config(properties, config_type)
    simple_result = tuple(curl_mock.call_args)
    upgradeHelper.update_config(properties, config_type, attributes)
    complex_result = tuple(curl_mock.call_args)
    self.assertEqual(expected_simple_result, simple_result)
    self.assertEqual(expected_complex_result, complex_result)
