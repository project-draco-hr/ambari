@patch('optparse.OptionParser')
@patch('upgradeHelper.modify_configs')
@patch('__builtin__.open')
def test_ParseOptions(self, open_mock, modify_action_mock, option_parser_mock):


    class options(object):
        user = 'test_user'
        hostname = '127.0.0.1'
        clustername = 'test1'
        password = 'test_password'
        upgrade_json = 'catalog_file'
        from_stack = '0.0'
        to_stack = '1.3'
        logfile = 'test.log'
        report = 'report.txt'
        https = False
        port = '8080'
        warnings = []
        printonly = False
    args = ['update-configs']
    modify_action_mock.return_value = MagicMock()
    test_mock = MagicMock()
    test_mock.parse_args = (lambda : (options, args))
    option_parser_mock.return_value = test_mock
    upgradeHelper.main()
    self.assertEqual('8080', upgradeHelper.Options.API_PORT)
    self.assertEqual('http', upgradeHelper.Options.API_PROTOCOL)
    self.assertEqual(1, modify_action_mock.call_count)
    self.assertEqual({'user': options.user, 'pass': options.password, }, upgradeHelper.Options.API_TOKENS)
    self.assertEqual(options.clustername, upgradeHelper.Options.CLUSTER_NAME)
