@patch.object(upgradeHelper, 'get_YN_input')
@patch.object(upgradeHelper, 'read_mapping')
@patch.object(upgradeHelper, 'curl')
def test_delete_mr(self, curl_mock, read_mapping_mock, get_YN_mock):
    COMPONENT_URL_FORMAT = (upgradeHelper.Options.CLUSTER_URL + '/hosts/%s/host_components/%s')
    SERVICE_URL_FORMAT = (upgradeHelper.Options.CLUSTER_URL + '/services/MAPREDUCE')
    NON_CLIENTS = ['JOBTRACKER', 'TASKTRACKER', 'HISTORYSERVER']
    PUT_IN_DISABLED = {'HostRoles': {'state': 'DISABLED', }, }
    mr_mapping = {'MAPREDUCE_CLIENT': ['test.host.vm'], 'JOBTRACKER': ['test1.host.vm'], 'TASKTRACKER': ['test2.host.vm'], 'HISTORYSERVER': ['test3.host.vm'], }
    expected_curl_exec_args = []
    for (key, hosts) in mr_mapping.items():
        if (key in NON_CLIENTS):
            for host in hosts:
                expected_curl_exec_args.append([((COMPONENT_URL_FORMAT % (host, key)),), {'request_type': 'PUT', 'data': PUT_IN_DISABLED, 'validate': True, 'validate_expect_body': False, }])
    expected_curl_exec_args.append([(SERVICE_URL_FORMAT,), {'request_type': 'DELETE', 'validate': True, 'validate_expect_body': False, }])
    get_YN_mock.return_value = True
    read_mapping_mock.return_value = mr_mapping
    upgradeHelper.delete_mr()
    self.assertEqual(expected_curl_exec_args, curl_mock.call_args_list)
    pass
