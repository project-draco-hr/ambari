@patch.object(upgradeHelper, 'get_config_resp_all')
def test_replace_tag(self, get_config_resp_all_mock):
    test_catalog = '\n        {\n      "version": "1.0",\n      "stacks": [\n        {\n          "name": "HDP",\n          "old-version": "1.0",\n          "target-version": "1.1",\n          "options": {\n            "config-types":{\n              "test": {\n                "merged-copy": "yes"\n              }\n            }\n          },\n          "properties": {\n             "test": {\n               "test": "host1.com"\n            }\n          },\n          "property-mapping": {\n            "test":{\n                "map-to": "test-arr",\n                "replace-from": "com",\n                "replace-to": "org"\n           }\n          }\n        }\n      ]\n    }\n    '
    old_opt = upgradeHelper.Options.OPTIONS
    options = (lambda : '')
    options.from_stack = '1.0'
    options.to_stack = '1.1'
    options.upgrade_json = ''
    upgradeHelper.Options.OPTIONS = options
    upgradeHelper.Options.SERVICES = [self.required_service]
    get_config_resp_all_mock.return_value = {'test': {'properties': {}, }, }
    ucf = UpgradeCatalogFactoryMock(test_catalog)
    scf = upgradeHelper.ServerConfigFactory()
    cfg = scf.get_config('test')
    ucfg = ucf.get_catalog('1.0', '1.1')
    cfg.merge(ucfg)
    scf.process_mapping_transformations(ucfg)
    upgradeHelper.Options.OPTIONS = old_opt
    self.assertEqual(True, ('test-arr' in cfg.properties))
    self.assertEqual('host1.org', cfg.properties['test-arr'])
