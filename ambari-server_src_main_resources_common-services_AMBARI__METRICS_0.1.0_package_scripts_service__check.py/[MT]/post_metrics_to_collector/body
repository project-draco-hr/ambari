def post_metrics_to_collector(ams_metrics_post_url, metric_collector_host, metric_collector_port, metric_collector_https_enabled, metric_json, headers, ca_certs, tries=1, connect_timeout=10):
    for i in xrange(0, tries):
        try:
            Logger.info(('Generated metrics for host %s :\n%s' % (metric_collector_host, metric_json)))
            Logger.info(('Connecting (POST) to %s:%s%s' % (metric_collector_host, metric_collector_port, ams_metrics_post_url)))
            conn = network.get_http_connection(metric_collector_host, int(metric_collector_port), metric_collector_https_enabled, ca_certs)
            conn.request('POST', ams_metrics_post_url, metric_json, headers)
            response = conn.getresponse()
            Logger.info(('Http response for host %s: %s %s' % (metric_collector_host, response.status, response.reason)))
        except (httplib.HTTPException, socket.error) as ex:
            if (i < (tries - 1)):
                time.sleep(connect_timeout)
                Logger.info(('Connection failed for host %s. Next retry in %s seconds.' % (metric_collector_host, connect_timeout)))
                continue
            else:
                raise Fail('Metrics were not saved. Connection failed.')
        data = response.read()
        Logger.info(('Http data: %s' % data))
        conn.close()
        if (response.status == 200):
            Logger.info('Metrics were saved.')
            break
        else:
            Logger.info('Metrics were not saved.')
            if (i < (tries - 1)):
                time.sleep(tries)
                Logger.info(('Next retry in %s seconds.' % tries))
            else:
                raise Fail(('Metrics were not saved. POST request status: %s %s \n%s' % (response.status, response.reason, data)))
