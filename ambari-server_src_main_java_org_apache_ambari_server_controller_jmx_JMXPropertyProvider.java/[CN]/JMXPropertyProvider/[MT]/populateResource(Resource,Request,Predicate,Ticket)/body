{
  Set<String> ids=getRequestPropertyIds(request,predicate);
  Set<String> unsupportedIds=new HashSet<String>();
  String componentName=(String)resource.getPropertyValue(componentNamePropertyId);
  if (getComponentMetrics().get(componentName) == null) {
    return resource;
  }
  for (  String id : ids) {
    if (request.getTemporalInfo(id) != null) {
      unsupportedIds.add(id);
    }
    if (!isSupportedPropertyId(componentName,id)) {
      unsupportedIds.add(id);
    }
  }
  ids.removeAll(unsupportedIds);
  if (ids.isEmpty()) {
    return resource;
  }
  if (statePropertyId != null) {
    String state=(String)resource.getPropertyValue(statePropertyId);
    if (state != null && !healthyStates.contains(state)) {
      return resource;
    }
  }
  String clusterName=(String)resource.getPropertyValue(clusterNamePropertyId);
  String protocol=jmxHostProvider.getJMXProtocol(clusterName,componentName);
  boolean httpsEnabled=false;
  if (protocol.equals("https")) {
    httpsEnabled=true;
  }
  Set<String> hostNames=getHosts(resource,clusterName,componentName);
  if (hostNames == null || hostNames.isEmpty()) {
    LOG.warn("Unable to get JMX metrics.  No host name for " + componentName);
    return resource;
  }
  String spec=null;
  for (  String hostName : hostNames) {
    try {
      String port=getPort(clusterName,componentName,hostName,httpsEnabled);
      if (port == null) {
        LOG.warn("Unable to get JMX metrics.  No port value for " + componentName);
        return resource;
      }
      String jmxUrl=getSpec(protocol,hostName,port,"/jmx");
      metricsRetrievalService.submitJMXRequest(streamProvider,jmxUrl);
      JMXMetricHolder jmxMetricHolder=metricsRetrievalService.getCachedJMXMetric(jmxUrl);
      if (null == jmxMetricHolder) {
        return resource;
      }
      if (!ticket.isValid()) {
        return resource;
      }
      getHadoopMetricValue(jmxMetricHolder,ids,resource,request,ticket);
    }
 catch (    IOException e) {
      AmbariException detailedException=new AmbariException(String.format("Unable to get JMX metrics from the host %s for the component %s. Spec: %s",hostName,componentName,spec),e);
      logException(detailedException);
    }
  }
  return resource;
}
