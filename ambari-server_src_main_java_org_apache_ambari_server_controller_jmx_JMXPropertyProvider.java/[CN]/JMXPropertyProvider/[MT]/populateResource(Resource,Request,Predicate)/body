{
  if (getPropertyIds().isEmpty()) {
    return true;
  }
  Set<PropertyId> ids=PropertyHelper.getRequestPropertyIds(getPropertyIds(),request,predicate);
  String hostName=hostMapping.get(resource.getPropertyValue(HOST_COMPONENT_HOST_NAME_PROPERTY_ID));
  String port=JMX_PORTS.get(resource.getPropertyValue(HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID));
  if (hostName == null || port == null) {
    return true;
  }
  String spec=getSpec(hostName + ":" + port);
  try {
    JMXMetricHolder metricHolder=new ObjectMapper().readValue(streamProvider.readFrom(spec),JMXMetricHolder.class);
    Map<String,Map<String,Object>> categories=new HashMap<String,Map<String,Object>>();
    for (    Map<String,Object> bean : metricHolder.getBeans()) {
      String category=getCategory(bean);
      if (category != null) {
        categories.put(category,bean);
      }
    }
    for (    PropertyId propertyId : ids) {
      String category=propertyId.getCategory();
      if (category.startsWith("metrics/")) {
        category=category.substring(8);
      }
      Map<String,Object> properties=categories.get(category);
      String name=propertyId.getName();
      if (properties != null && properties.containsKey(name)) {
        resource.setProperty(propertyId,properties.get(name));
      }
    }
  }
 catch (  IOException e) {
    throw new AmbariException("Can't get metrics : " + spec,e);
  }
  return true;
}
