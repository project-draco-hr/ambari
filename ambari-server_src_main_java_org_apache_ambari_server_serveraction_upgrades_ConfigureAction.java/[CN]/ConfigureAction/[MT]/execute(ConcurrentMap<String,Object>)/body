{
  Map<String,String> commandParameters=getCommandParameters();
  if (null == commandParameters || commandParameters.isEmpty()) {
    return createCommandReport(0,HostRoleStatus.FAILED,"{}","","Unable to change configuration values without command parameters");
  }
  String clusterName=commandParameters.get("clusterName");
  String configType=commandParameters.get(ConfigureTask.PARAMETER_CONFIG_TYPE);
  String key=commandParameters.get(ConfigureTask.PARAMETER_KEY);
  String value=commandParameters.get(ConfigureTask.PARAMETER_VALUE);
  List<ConfigureTask.Transfer> transfers=Collections.emptyList();
  String transferJson=commandParameters.get(ConfigureTask.PARAMETER_TRANSFERS);
  if (null != transferJson) {
    transfers=m_gson.fromJson(transferJson,new TypeToken<List<ConfigureTask.Transfer>>(){
    }
.getType());
  }
  if (null == configType && null == key && transfers.isEmpty()) {
    return createCommandReport(0,HostRoleStatus.COMPLETED,"{}","","Skipping configuration task");
  }
  if (null == clusterName || null == configType || (null == key && transfers.isEmpty())) {
    String message="cluster={0}, type={1}, key={2}, transfers={3}";
    message=MessageFormat.format(message,clusterName,configType,key,transfers);
    return createCommandReport(0,HostRoleStatus.FAILED,"{}","",message);
  }
  Cluster cluster=m_clusters.getCluster(clusterName);
  Map<String,DesiredConfig> desiredConfigs=cluster.getDesiredConfigs();
  DesiredConfig desiredConfig=desiredConfigs.get(configType);
  Config config=cluster.getConfig(configType,desiredConfig.getTag());
  StackId currentStack=cluster.getCurrentStackVersion();
  StackId targetStack=cluster.getDesiredStackVersion();
  StackId configStack=config.getStackId();
  Map<String,String> base=config.getProperties();
  Map<String,String> newValues=new HashMap<String,String>(base);
  boolean changedValues=false;
  for (  ConfigureTask.Transfer transfer : transfers) {
switch (transfer.operation) {
case COPY:
      if (null == transfer.fromType) {
        if (base.containsKey(transfer.fromKey)) {
          newValues.put(transfer.toKey,base.get(transfer.fromKey));
          changedValues=true;
        }
 else         if (StringUtils.isNotBlank(transfer.defaultValue)) {
          newValues.put(transfer.toKey,transfer.defaultValue);
          changedValues=true;
        }
      }
 else {
        Config other=cluster.getDesiredConfigByType(transfer.fromType);
        if (null != other) {
          Map<String,String> otherValues=other.getProperties();
          if (otherValues.containsKey(transfer.fromKey)) {
            newValues.put(transfer.toKey,otherValues.get(transfer.fromKey));
            changedValues=true;
          }
 else           if (StringUtils.isNotBlank(transfer.defaultValue)) {
            newValues.put(transfer.toKey,transfer.defaultValue);
            changedValues=true;
          }
        }
      }
    break;
case MOVE:
  if (newValues.containsKey(transfer.fromKey)) {
    newValues.put(transfer.toKey,newValues.remove(transfer.fromKey));
    changedValues=true;
  }
 else   if (StringUtils.isNotBlank(transfer.defaultValue)) {
    newValues.put(transfer.toKey,transfer.defaultValue);
    changedValues=true;
  }
break;
case DELETE:
if ("*".equals(transfer.deleteKey)) {
newValues.clear();
for (String keeper : transfer.keepKeys) {
  newValues.put(keeper,base.get(keeper));
}
if (transfer.preserveEdits) {
  List<String> edited=findChangedValues(clusterName,config);
  for (  String changed : edited) {
    newValues.put(changed,base.get(changed));
  }
}
changedValues=true;
}
 else {
newValues.remove(transfer.deleteKey);
changedValues=true;
}
break;
}
}
if (null != key) {
String oldValue=base.get(key);
if (null != oldValue && value.equals(oldValue)) {
if (currentStack.equals(targetStack) && !changedValues) {
return createCommandReport(0,HostRoleStatus.COMPLETED,"{}",MessageFormat.format("{0}/{1} for cluster {2} would not change, skipping setting",configType,key,clusterName),"");
}
}
}
newValues.put(key,value);
if (!targetStack.equals(currentStack) && targetStack.equals(configStack)) {
config.setProperties(newValues);
config.persist(false);
return createCommandReport(0,HostRoleStatus.COMPLETED,"{}",MessageFormat.format("Updated configuration ''{0}''",configType),"");
}
String serviceVersionNote="Stack Upgrade";
String auditName=getExecutionCommand().getRoleParams().get(ServerAction.ACTION_USER_NAME);
if (auditName == null) {
auditName=m_configuration.getAnonymousAuditName();
}
m_configHelper.createConfigType(cluster,m_controller,configType,newValues,auditName,serviceVersionNote);
String message="Updated configuration ''{0}'' with ''{1}={2}''";
message=MessageFormat.format(message,configType,key,value);
return createCommandReport(0,HostRoleStatus.COMPLETED,"{}",message,"");
}
