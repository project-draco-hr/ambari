{
  Map<String,String> commandParameters=getCommandParameters();
  if (null == commandParameters || commandParameters.isEmpty()) {
    return createCommandReport(0,HostRoleStatus.FAILED,"{}","","Unable to change configuration values without command parameters");
  }
  String clusterName=commandParameters.get("clusterName");
  String configType=commandParameters.get(ConfigureTask.PARAMETER_CONFIG_TYPE);
  List<ConfigurationKeyValue> keyValuePairs=Collections.emptyList();
  String keyValuePairJson=commandParameters.get(ConfigureTask.PARAMETER_KEY_VALUE_PAIRS);
  if (null != keyValuePairJson) {
    keyValuePairs=m_gson.fromJson(keyValuePairJson,new TypeToken<List<ConfigurationKeyValue>>(){
    }
.getType());
  }
  List<Transfer> transfers=Collections.emptyList();
  String transferJson=commandParameters.get(ConfigureTask.PARAMETER_TRANSFERS);
  if (null != transferJson) {
    transfers=m_gson.fromJson(transferJson,new TypeToken<List<Transfer>>(){
    }
.getType());
  }
  List<Replace> replacements=Collections.emptyList();
  String replaceJson=commandParameters.get(ConfigureTask.PARAMETER_REPLACEMENTS);
  if (null != replaceJson) {
    replacements=m_gson.fromJson(replaceJson,new TypeToken<List<Replace>>(){
    }
.getType());
  }
  if (keyValuePairs.isEmpty() && transfers.isEmpty() && replacements.isEmpty()) {
    String message="cluster={0}, type={1}, transfers={2}, replacements={3}, configurations={4}";
    message=MessageFormat.format(message,clusterName,configType,transfers,replacements,keyValuePairs);
    StringBuilder buffer=new StringBuilder("Skipping this configuration task since none of the conditions were met and there are no transfers or replacements").append("\n");
    buffer.append(message);
    return createCommandReport(0,HostRoleStatus.COMPLETED,"{}",buffer.toString(),"");
  }
  if (null == clusterName || null == configType || (keyValuePairs.isEmpty() && transfers.isEmpty() && replacements.isEmpty())) {
    String message="cluster={0}, type={1}, transfers={2}, replacements={3}, configurations={4}";
    message=MessageFormat.format(message,clusterName,configType,transfers,replacements,keyValuePairs);
    return createCommandReport(0,HostRoleStatus.FAILED,"{}","",message);
  }
  Cluster cluster=m_clusters.getCluster(clusterName);
  Map<String,DesiredConfig> desiredConfigs=cluster.getDesiredConfigs();
  DesiredConfig desiredConfig=desiredConfigs.get(configType);
  Config config=cluster.getConfig(configType,desiredConfig.getTag());
  StackId currentStack=cluster.getCurrentStackVersion();
  StackId targetStack=cluster.getDesiredStackVersion();
  StackId configStack=config.getStackId();
  Map<String,String> base=config.getProperties();
  Map<String,String> newValues=new HashMap<String,String>(base);
  boolean changedValues=false;
  StringBuilder outputBuffer=new StringBuilder(250);
  for (  Transfer transfer : transfers) {
switch (transfer.operation) {
case COPY:
      String valueToCopy=null;
    if (null == transfer.fromType) {
      valueToCopy=base.get(transfer.fromKey);
    }
 else {
      Config other=cluster.getDesiredConfigByType(transfer.fromType);
      if (null != other) {
        Map<String,String> otherValues=other.getProperties();
        if (otherValues.containsKey(transfer.fromKey)) {
          valueToCopy=otherValues.get(transfer.fromKey);
        }
      }
    }
  if (StringUtils.isBlank(valueToCopy) && !StringUtils.isBlank(transfer.defaultValue)) {
    valueToCopy=transfer.defaultValue;
  }
if (StringUtils.isNotBlank(valueToCopy)) {
  if (transfer.coerceTo != null) {
switch (transfer.coerceTo) {
case YAML_ARRAY:
{
        String[] splitValues=StringUtils.split(valueToCopy,',');
        List<String> quotedValues=new ArrayList<String>(splitValues.length);
        for (        String splitValue : splitValues) {
          quotedValues.add("'" + StringUtils.trim(splitValue) + "'");
        }
        valueToCopy="[" + StringUtils.join(quotedValues,',') + "]";
        break;
      }
default :
    break;
}
}
changedValues=true;
newValues.put(transfer.toKey,valueToCopy);
outputBuffer.append(MessageFormat.format("Created {0}/{1} = \"{2}\"\n",configType,transfer.toKey,mask(transfer,valueToCopy)));
}
break;
case MOVE:
if (newValues.containsKey(transfer.fromKey)) {
newValues.put(transfer.toKey,newValues.remove(transfer.fromKey));
changedValues=true;
outputBuffer.append(MessageFormat.format("Renamed {0}/{1} to {2}/{3}\n",configType,transfer.fromKey,configType,transfer.toKey));
}
 else if (StringUtils.isNotBlank(transfer.defaultValue)) {
newValues.put(transfer.toKey,transfer.defaultValue);
changedValues=true;
outputBuffer.append(MessageFormat.format("Created {0}/{1} with default value \"{2}\"\n",configType,transfer.toKey,mask(transfer,transfer.defaultValue)));
}
break;
case DELETE:
if ("*".equals(transfer.deleteKey)) {
newValues.clear();
outputBuffer.append(MessageFormat.format("Deleted all keys from {0}\n",configType));
for (String keeper : transfer.keepKeys) {
newValues.put(keeper,base.get(keeper));
outputBuffer.append(MessageFormat.format("Preserved {0}/{1} after delete\n",configType,keeper));
}
if (transfer.preserveEdits) {
List<String> edited=findValuesToPreserve(clusterName,config);
for (String changed : edited) {
newValues.put(changed,base.get(changed));
outputBuffer.append(MessageFormat.format("Preserved {0}/{1} after delete\n",configType,changed));
}
}
changedValues=true;
}
 else {
newValues.remove(transfer.deleteKey);
changedValues=true;
outputBuffer.append(MessageFormat.format("Deleted {0}/{1}\n",configType,transfer.deleteKey));
}
break;
}
}
if (null != keyValuePairs && !keyValuePairs.isEmpty()) {
for (ConfigurationKeyValue keyValuePair : keyValuePairs) {
String key=keyValuePair.key;
String value=keyValuePair.value;
if (null != key) {
String oldValue=base.get(key);
if (null != oldValue && value.equals(oldValue)) {
if (currentStack.equals(targetStack) && !changedValues) {
outputBuffer.append(MessageFormat.format("{0}/{1} for cluster {2} would not change, skipping setting",configType,key,clusterName));
continue;
}
}
newValues.put(key,value);
final String message;
if (StringUtils.isEmpty(value)) {
message=MessageFormat.format("{0}/{1} changed to an empty value",configType,key);
}
 else {
message=MessageFormat.format("{0}/{1} changed to \"{2}\"\n",configType,key,mask(keyValuePair,value));
}
outputBuffer.append(message);
}
}
}
for (Replace replacement : replacements) {
if (newValues.containsKey(replacement.key)) {
String toReplace=newValues.get(replacement.key);
if (!toReplace.contains(replacement.find)) {
outputBuffer.append(MessageFormat.format("String \"{0}\" was not found in {1}/{2}\n",replacement.find,configType,replacement.key));
}
 else {
String replaced=StringUtils.replace(toReplace,replacement.find,replacement.replaceWith);
newValues.put(replacement.key,replaced);
outputBuffer.append(MessageFormat.format("Replaced {0}/{1} containing \"{2}\" with \"{3}\"\n",configType,replacement.key,replacement.find,replacement.replaceWith));
}
}
 else {
outputBuffer.append(MessageFormat.format("Property \"{0}\" was not found in {1} to replace content\n",replacement.key,configType));
}
}
if (!targetStack.equals(currentStack) && targetStack.equals(configStack)) {
config.setProperties(newValues);
config.persist(false);
return createCommandReport(0,HostRoleStatus.COMPLETED,"{}",outputBuffer.toString(),"");
}
String serviceVersionNote="Stack Upgrade";
String auditName=getExecutionCommand().getRoleParams().get(ServerAction.ACTION_USER_NAME);
if (auditName == null) {
auditName=m_configuration.getAnonymousAuditName();
}
m_configHelper.createConfigType(cluster,m_controller,configType,newValues,auditName,serviceVersionNote);
String message="Finished updating configuration ''{0}''";
message=MessageFormat.format(message,configType);
return createCommandReport(0,HostRoleStatus.COMPLETED,"{}",message,"");
}
