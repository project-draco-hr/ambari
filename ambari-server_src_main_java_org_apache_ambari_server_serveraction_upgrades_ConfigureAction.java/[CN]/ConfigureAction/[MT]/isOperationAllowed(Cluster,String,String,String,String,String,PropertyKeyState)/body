{
  boolean isAllowed=true;
  boolean ifKeyIsNotBlank=StringUtils.isNotBlank(ifKey);
  boolean ifTypeIsNotBlank=StringUtils.isNotBlank(ifType);
  if (ifKeyIsNotBlank && ifTypeIsNotBlank && ifKeyState == PropertyKeyState.ABSENT) {
    boolean keyPresent=getDesiredConfigurationKeyPresence(cluster,ifType,ifKey);
    if (keyPresent) {
      LOG.info("Skipping property operation for {}/{} as the key {} for {} is present",configType,targetPropertyKey,ifKey,ifType);
      isAllowed=false;
    }
  }
 else   if (ifKeyIsNotBlank && ifTypeIsNotBlank && ifValue == null && ifKeyState == PropertyKeyState.PRESENT) {
    boolean keyPresent=getDesiredConfigurationKeyPresence(cluster,ifType,ifKey);
    if (!keyPresent) {
      LOG.info("Skipping property operation for {}/{} as the key {} for {} is not present",configType,targetPropertyKey,ifKey,ifType);
      isAllowed=false;
    }
  }
 else   if (ifKeyIsNotBlank && ifTypeIsNotBlank && ifValue != null) {
    String ifConfigType=ifType;
    String checkValue=getDesiredConfigurationValue(cluster,ifConfigType,ifKey);
    if (!ifValue.toLowerCase().equals(StringUtils.lowerCase(checkValue))) {
      LOG.info("Skipping property operation for {}/{} as the value {} for {}/{} is not equal to {}",configType,targetPropertyKey,checkValue,ifConfigType,ifKey,ifValue);
      isAllowed=false;
    }
  }
  return isAllowed;
}
