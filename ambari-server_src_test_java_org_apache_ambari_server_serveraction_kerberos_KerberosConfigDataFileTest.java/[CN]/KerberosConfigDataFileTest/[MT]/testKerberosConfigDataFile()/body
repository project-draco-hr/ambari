{
  File file=folder.newFile();
  Assert.assertNotNull(file);
  KerberosConfigDataFileBuilder builder=new KerberosConfigDataFileBuilder(file);
  Assert.assertFalse(builder.isClosed());
  for (int i=0; i < 10; i++) {
    builder.addRecord("config-type" + i,"key" + i,"value" + i,KerberosConfigDataFile.OPERATION_TYPE_SET);
  }
  for (int i=10; i < 15; i++) {
    builder.addRecord("config-type" + i,"key" + i,"value" + i,KerberosConfigDataFile.OPERATION_TYPE_REMOVE);
  }
  builder.close();
  Assert.assertTrue(builder.isClosed());
  KerberosConfigDataFileReader reader=new KerberosConfigDataFileReader(file);
  Assert.assertFalse(reader.isClosed());
  Iterator<Map<String,String>> iterator=reader.iterator();
  Assert.assertNotNull(iterator);
  int i=0;
  while (iterator.hasNext()) {
    Map<String,String> record=iterator.next();
    if (i < 15) {
      Assert.assertEquals("config-type" + i,record.get(KerberosConfigDataFile.CONFIGURATION_TYPE));
      Assert.assertEquals("key" + i,record.get(KerberosConfigDataFile.KEY));
      Assert.assertEquals("value" + i,record.get(KerberosConfigDataFile.VALUE));
      if (i < 10) {
        Assert.assertEquals("SET",record.get(KerberosConfigDataFile.OPERATION));
      }
 else {
        Assert.assertEquals("REMOVE",record.get(KerberosConfigDataFile.OPERATION));
      }
    }
    i++;
  }
  Assert.assertEquals(15,i);
  reader.close();
  Assert.assertTrue(reader.isClosed());
  reader.open();
  Assert.assertFalse(reader.isClosed());
  i=0;
  for (  Map<String,String> record : reader) {
    if (i < 10) {
      Assert.assertEquals("config-type" + i,record.get(KerberosConfigDataFile.CONFIGURATION_TYPE));
      Assert.assertEquals("key" + i,record.get(KerberosConfigDataFile.KEY));
      Assert.assertEquals("value" + i,record.get(KerberosConfigDataFile.VALUE));
    }
    i++;
  }
  Assert.assertEquals(15,i);
  reader.close();
  Assert.assertTrue(reader.isClosed());
  builder.open();
  Assert.assertFalse(builder.isClosed());
  builder.addRecord("config-type","key","value",KerberosConfigDataFile.OPERATION_TYPE_SET);
  builder.close();
  Assert.assertTrue(builder.isClosed());
  reader=new KerberosConfigDataFileReader(file);
  Assert.assertFalse(reader.isClosed());
  i=0;
  for (  Map<String,String> record : reader) {
    i++;
  }
  Assert.assertEquals(16,i);
  reader.close();
  Assert.assertTrue(reader.isClosed());
  builder=new KerberosConfigDataFileBuilder(file);
  Assert.assertFalse(builder.isClosed());
  builder.addRecord("config-type","key","value",KerberosConfigDataFile.OPERATION_TYPE_REMOVE);
  builder.close();
  Assert.assertTrue(builder.isClosed());
  reader.open();
  Assert.assertFalse(reader.isClosed());
  i=0;
  for (  Map<String,String> record : reader) {
    i++;
  }
  Assert.assertEquals(17,i);
  reader.close();
  Assert.assertTrue(reader.isClosed());
  i=0;
  for (  Map<String,String> record : reader) {
    i++;
  }
  Assert.assertEquals(0,i);
}
