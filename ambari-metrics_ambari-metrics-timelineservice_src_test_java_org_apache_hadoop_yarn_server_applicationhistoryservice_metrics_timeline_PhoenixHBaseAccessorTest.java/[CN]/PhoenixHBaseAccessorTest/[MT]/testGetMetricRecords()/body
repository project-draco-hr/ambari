{
  Configuration hbaseConf=new Configuration();
  hbaseConf.setStrings(ZOOKEEPER_QUORUM,"quorum");
  Configuration metricsConf=new Configuration();
  ConnectionProvider connectionProvider=new ConnectionProvider(){
    @Override public Connection getConnection() throws SQLException {
      return null;
    }
  }
;
  PhoenixHBaseAccessor accessor=new PhoenixHBaseAccessor(hbaseConf,metricsConf,connectionProvider);
  List<String> metricNames=new LinkedList<>();
  List<String> hostnames=new LinkedList<>();
  Map<String,List<Function>> metricFunctions=new HashMap<>();
  PowerMock.mockStatic(PhoenixTransactSQL.class);
  PreparedStatement preparedStatementMock=EasyMock.createNiceMock(PreparedStatement.class);
  Condition condition=new DefaultCondition(metricNames,hostnames,"appid","instanceid",123L,234L,Precision.SECONDS,10,true);
  EasyMock.expect(PhoenixTransactSQL.prepareGetMetricsSqlStmt(null,condition)).andReturn(preparedStatementMock).once();
  ResultSet rsMock=EasyMock.createNiceMock(ResultSet.class);
  EasyMock.expect(preparedStatementMock.executeQuery()).andReturn(rsMock);
  PowerMock.replayAll();
  EasyMock.replay(preparedStatementMock,rsMock);
  TimelineMetrics tml=accessor.getMetricRecords(condition,metricFunctions);
  Condition condition2=new DefaultCondition(metricNames,hostnames,"appid","instanceid",234L,123L,Precision.SECONDS,10,true);
  TimelineMetrics tml2=accessor.getMetricRecords(condition2,metricFunctions);
  assertEquals(0,tml2.getMetrics().size());
  PowerMock.verifyAll();
  EasyMock.verify(preparedStatementMock,rsMock);
}
