def test_collect(self):
    alert_meta = {'name': 'alert1', 'label': 'label1', 'serviceName': 'service1', 'componentName': 'component1', 'uuid': '123', 'enabled': 'true', }
    alert_source_meta = {'stacks_directory': DUMMY_PATH, 'path': os.path.join(DUMMY_PATH, 'test_script.py'), 'common_services_directory': DUMMY_PATH, 'host_scripts_directory': DUMMY_PATH, }
    cluster = 'c1'
    host = 'host1'
    expected_text = 'bar is 12, baz is asd'

    def collector_side_effect(clus, data):
        self.assertEquals(data['name'], alert_meta['name'])
        self.assertEquals(data['label'], alert_meta['label'])
        self.assertEquals(data['service'], alert_meta['serviceName'])
        self.assertEquals(data['component'], alert_meta['componentName'])
        self.assertEquals(data['uuid'], alert_meta['uuid'])
        self.assertEquals(data['enabled'], alert_meta['enabled'])
        self.assertEquals(data['cluster'], cluster)
        self.assertEquals(clus, cluster)
    mock_collector = MagicMock()
    mock_collector.put = Mock(side_effect=collector_side_effect)
    alert = ScriptAlert(alert_meta, alert_source_meta, {})
    alert.set_helpers(mock_collector, {'foo-site/bar': 12, 'foo-site/baz': 'asd', })
    alert.set_cluster(cluster, host)
    alert.collect()
