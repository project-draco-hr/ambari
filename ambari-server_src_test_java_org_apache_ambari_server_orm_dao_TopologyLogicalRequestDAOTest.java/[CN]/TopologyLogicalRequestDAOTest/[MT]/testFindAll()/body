{
  create();
  List<TopologyLogicalRequestEntity> logicalRequestEntities=logicalRequestDAO.findAll();
  Assert.assertEquals(1,logicalRequestEntities.size());
  TopologyLogicalRequestEntity logicalRequestEntity=logicalRequestEntities.iterator().next();
  Assert.assertNotNull(logicalRequestEntity.getTopologyRequestId());
  Assert.assertEquals(Long.valueOf(1),logicalRequestEntity.getId());
  Assert.assertEquals("description",logicalRequestEntity.getDescription());
  Assert.assertNotNull(logicalRequestEntity.getTopologyRequestEntity());
  Collection<TopologyHostRequestEntity> hostRequestEntities=logicalRequestEntity.getTopologyHostRequestEntities();
  Assert.assertEquals(1,hostRequestEntities.size());
  TopologyHostRequestEntity hostRequestEntity=hostRequestEntities.iterator().next();
  Assert.assertNotNull(hostRequestEntity.getTopologyHostGroupEntity());
  Assert.assertEquals(hostRequestEntity.getTopologyHostGroupEntity().getId(),hostRequestEntity.getHostGroupId());
  Collection<TopologyHostTaskEntity> taskEntities=hostRequestEntity.getTopologyHostTaskEntities();
  Assert.assertEquals(1,taskEntities.size());
  TopologyHostTaskEntity taskEntity=taskEntities.iterator().next();
  Assert.assertNotNull(taskEntity.getTopologyHostRequestEntity());
  Assert.assertNotNull(taskEntity.getTopologyLogicalTaskEntities());
  Assert.assertEquals(1,taskEntity.getTopologyLogicalTaskEntities().size());
  Assert.assertNotNull(taskEntity.getTopologyLogicalTaskEntities().iterator().next().getTopologyHostTaskEntity());
}
