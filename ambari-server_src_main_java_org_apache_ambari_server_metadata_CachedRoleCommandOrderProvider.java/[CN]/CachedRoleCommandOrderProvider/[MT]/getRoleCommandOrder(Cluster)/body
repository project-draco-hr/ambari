{
  boolean hasGLUSTERFS=false;
  boolean isNameNodeHAEnabled=false;
  boolean isResourceManagerHAEnabled=false;
  try {
    if (cluster != null && cluster.getService("GLUSTERFS") != null) {
      hasGLUSTERFS=true;
    }
  }
 catch (  AmbariException e) {
  }
  try {
    if (cluster != null && cluster.getService("HDFS") != null && cluster.getService("HDFS").getServiceComponent("JOURNALNODE") != null) {
      isNameNodeHAEnabled=true;
    }
  }
 catch (  AmbariException e) {
  }
  try {
    if (cluster != null && cluster.getService("YARN") != null && cluster.getService("YARN").getServiceComponent("RESOURCEMANAGER").getServiceComponentHosts().size() > 1) {
      isResourceManagerHAEnabled=true;
    }
  }
 catch (  AmbariException e) {
  }
  int clusterCacheId=new HashCodeBuilder().append(cluster.getClusterId()).append(hasGLUSTERFS).append(isNameNodeHAEnabled).append(isResourceManagerHAEnabled).toHashCode();
  RoleCommandOrder rco=rcoMap.get(clusterCacheId);
  if (rco == null) {
    rco=injector.getInstance(RoleCommandOrder.class);
    rco.setHasGLUSTERFS(hasGLUSTERFS);
    rco.setIsNameNodeHAEnabled(isNameNodeHAEnabled);
    rco.setIsResourceManagerHAEnabled(isResourceManagerHAEnabled);
    rco.initialize(cluster);
    rcoMap.put(clusterCacheId,rco);
  }
  return rco;
}
