@staticmethod
@retry(times=15, sleep_time=5, max_sleep_time=20, backoff_factor=2, err_class=Fail)
def check_nifi_portal(url):
    try:
        request = urllib2.Request(url)
        result = openurl(request, timeout=20)
        response_code = result.getcode()
        if ((response_code == 200) or (response_code == 401)):
            Logger.info('Nifi portal {0} is up. Response code {1}'.format(url, response_code))
        else:
            raise Fail('Error connecting to {0}. Response code {1}'.format(url, response_code))
    except urllib2.URLError as e:
        if isinstance(e, urllib2.HTTPError):
            if (e.code == 401):
                Logger.info('Nifi portal {0} is up. Response code {1}'.format(url, e.code))
            else:
                raise Fail('Error connecting to {0}. Http status code - {1}. \n {2}'.format(url, e.code, e.read()))
        elif (e.reason and ('violation of protocol' in str(e.reason))):
            Logger.info('Ignore certificate validation error - {0}'.format(e.reason))
            pass
        else:
            raise Fail('Error connecting to {0}. Reason - {1}.'.format(url, e.reason))
    except httplib.BadStatusLine:
        raise Fail('Error connecting to {0}. Reason - Not Reachable'.format(url))
    except TimeoutError:
        raise Fail('Error connecting to {0}. Reason - Timeout'.format(url))
