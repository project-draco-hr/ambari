def server_hostnames(config):
    '\n  Reads the ambari server name from the config or using the supplied script\n  '
    global cached_server_hostnames
    if (cached_server_hostnames != []):
        return cached_server_hostnames
    if config.has_option('server', 'hostname_script'):
        scriptname = config.get('server', 'hostname_script')
        try:
            osStat = subprocess.Popen([scriptname], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            (out, err) = osStat.communicate()
            if ((0 == osStat.returncode) and (0 != len(out.strip()))):
                cached_server_hostnames = arrayFromCsvString(out)
                logger.info((("Read server hostname '" + cached_server_hostnames) + "' using server:hostname_script"))
        except Exception as err:
            logger.info(('Unable to execute hostname_script for server hostname. ' + str(err)))
    if (not cached_server_hostnames):
        cached_server_hostnames = arrayFromCsvString(config.get('server', 'hostname'))
    return cached_server_hostnames
