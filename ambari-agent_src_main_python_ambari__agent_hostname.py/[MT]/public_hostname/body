def public_hostname(config):
    global cached_public_hostname
    if (cached_public_hostname is not None):
        return cached_public_hostname
    out = ''
    err = ''
    try:
        if config.has_option('agent', 'public_hostname_script'):
            scriptname = config.get('agent', 'public_hostname_script')
            output = subprocess.Popen(scriptname, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
            (out, err) = output.communicate()
            if ((0 == output.returncode) and (0 != len(out.strip()))):
                cached_public_hostname = out.strip().lower()
                logger.info((("Read public hostname '" + cached_public_hostname) + "' using agent:public_hostname_script"))
                return cached_public_hostname
    except:
        trace_info = traceback.format_exc()
        logger.info(((((('Error using the scriptname:' + trace_info) + ' :out ') + out) + ' :err ') + err))
        logger.info('Defaulting to fqdn.')
    cached_public_hostname = socket.getfqdn().lower()
    return cached_public_hostname
