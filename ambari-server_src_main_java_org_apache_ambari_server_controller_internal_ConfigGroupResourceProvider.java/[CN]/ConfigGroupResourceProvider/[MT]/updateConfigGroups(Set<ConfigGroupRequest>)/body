{
  if (requests.isEmpty()) {
    LOG.warn("Received an empty requests set");
    return;
  }
  Clusters clusters=getManagementController().getClusters();
  for (  ConfigGroupRequest request : requests) {
    Cluster cluster;
    try {
      cluster=clusters.getCluster(request.getClusterName());
    }
 catch (    ClusterNotFoundException e) {
      throw new ParentObjectNotFoundException("Attempted to add a config group to a cluster which doesn't exist",e);
    }
    if (request.getId() == null) {
      throw new AmbariException("Config group Id is a required parameter.");
    }
    validateRequest(request);
    ConfigGroup configGroup=cluster.getConfigGroups().get(request.getId());
    if (configGroup == null) {
      throw new AmbariException("Config group not found" + ", clusterName = " + request.getClusterName() + ", groupId = "+ request.getId());
    }
    String serviceName=null;
    if (configGroup.getConfigurations() != null) {
      serviceName=cluster.getServiceForConfigTypes(configGroup.getConfigurations().keySet());
    }
    Map<String,Host> hosts=new HashMap<String,Host>();
    if (request.getHosts() != null && !request.getHosts().isEmpty()) {
      for (      String hostname : request.getHosts()) {
        Host host=clusters.getHost(hostname);
        if (host == null) {
          throw new HostNotFoundException(hostname);
        }
        hosts.put(hostname,host);
      }
    }
    verifyHostList(cluster,hosts,request);
    configGroup.setHosts(hosts);
    configGroup.setConfigurations(request.getConfigs());
    configGroup.setName(request.getGroupName());
    configGroup.setDescription(request.getDescription());
    configGroup.setTag(request.getTag());
    configLogger.info("Persisting updated Config group, " + ", clusterName = " + configGroup.getClusterName() + ", id = "+ configGroup.getId()+ ", tag = "+ configGroup.getTag()+ ", user = "+ getManagementController().getAuthName());
    configGroup.persist();
    if (serviceName != null) {
      cluster.createServiceConfigVersion(serviceName,getManagementController().getAuthName(),null,configGroup);
    }
  }
  getManagementController().getConfigHelper().invalidateStaleConfigsCache();
}
