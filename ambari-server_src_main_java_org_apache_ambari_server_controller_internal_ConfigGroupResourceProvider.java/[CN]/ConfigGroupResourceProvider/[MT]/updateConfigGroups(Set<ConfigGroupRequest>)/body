{
  if (requests.isEmpty()) {
    LOG.warn("Received an empty requests set");
    return;
  }
  Clusters clusters=getManagementController().getClusters();
  for (  ConfigGroupRequest request : requests) {
    Cluster cluster;
    try {
      cluster=clusters.getCluster(request.getClusterName());
    }
 catch (    ClusterNotFoundException e) {
      throw new ParentObjectNotFoundException("Attempted to add a config group to a cluster which doesn't exist",e);
    }
    if (request.getId() == null) {
      throw new AmbariException("Config group Id is a required parameter.");
    }
    validateRequest(request);
    ConfigGroup configGroup=cluster.getConfigGroups().get(request.getId());
    if (configGroup == null) {
      throw new AmbariException("Config group not found" + ", clusterName = " + request.getClusterName() + ", groupId = "+ request.getId());
    }
    String serviceName=configGroup.getServiceName();
    String requestServiceName=cluster.getServiceForConfigTypes(request.getConfigs().keySet());
    if (StringUtils.isEmpty(serviceName) && StringUtils.isEmpty(requestServiceName)) {
      if (!AuthorizationHelper.isAuthorized(ResourceType.CLUSTER,cluster.getResourceId(),RoleAuthorization.CLUSTER_MANAGE_CONFIG_GROUPS)) {
        throw new AuthorizationException("The authenticated user is not authorized to update config groups");
      }
    }
 else {
      if (!AuthorizationHelper.isAuthorized(ResourceType.CLUSTER,cluster.getResourceId(),RoleAuthorization.SERVICE_MANAGE_CONFIG_GROUPS)) {
        throw new AuthorizationException("The authenticated user is not authorized to update config groups");
      }
    }
    if (serviceName != null && requestServiceName != null && !StringUtils.equals(serviceName,requestServiceName)) {
      throw new IllegalArgumentException("Config group " + configGroup.getId() + " is mapped to service "+ serviceName+ ", "+ "but request contain configs from service "+ requestServiceName);
    }
 else     if (serviceName == null && requestServiceName != null) {
      configGroup.setServiceName(requestServiceName);
      serviceName=requestServiceName;
    }
    Map<Long,Host> hosts=new HashMap<Long,Host>();
    if (request.getHosts() != null && !request.getHosts().isEmpty()) {
      for (      String hostname : request.getHosts()) {
        Host host=clusters.getHost(hostname);
        HostEntity hostEntity=hostDAO.findById(host.getHostId());
        if (hostEntity == null) {
          throw new HostNotFoundException(hostname);
        }
        hosts.put(hostEntity.getHostId(),host);
      }
    }
    verifyHostList(cluster,hosts,request);
    configGroup.setHosts(hosts);
    verifyConfigs(request.getConfigs(),request.getClusterName());
    configGroup.setConfigurations(request.getConfigs());
    configGroup.setName(request.getGroupName());
    configGroup.setDescription(request.getDescription());
    configGroup.setTag(request.getTag());
    configLogger.info("Persisting updated Config group" + ", clusterName = " + configGroup.getClusterName() + ", id = "+ configGroup.getId()+ ", tag = "+ configGroup.getTag()+ ", user = "+ getManagementController().getAuthName());
    configGroup.persist();
    if (serviceName != null) {
      cluster.createServiceConfigVersion(serviceName,getManagementController().getAuthName(),request.getServiceConfigVersionNote(),configGroup);
    }
 else {
      LOG.warn("Could not determine service name for config group {}, service config version not created",configGroup.getId());
    }
  }
}
