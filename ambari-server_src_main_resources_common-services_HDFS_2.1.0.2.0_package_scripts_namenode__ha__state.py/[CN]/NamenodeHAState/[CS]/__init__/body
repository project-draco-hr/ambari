def __init__(self):
    '\n    Initializes all fields by querying the Namenode state.\n    Raises a ValueError if unable to construct the object.\n    '
    import params
    self.name_service = default('/configurations/hdfs-site/dfs.nameservices', None)
    if (not self.name_service):
        raise ValueError('Could not retrieve property dfs.nameservices')
    nn_unique_ids_key = ('dfs.ha.namenodes.' + str(self.name_service))
    self.nn_unique_ids = default(('/configurations/hdfs-site/' + nn_unique_ids_key), None)
    if (not self.nn_unique_ids):
        raise ValueError(('Could not retrieve property ' + nn_unique_ids_key))
    self.nn_unique_ids = self.nn_unique_ids.split(',')
    self.nn_unique_ids = [x.strip() for x in self.nn_unique_ids]
    policy = default('/configurations/hdfs-site/dfs.http.policy', 'HTTP_ONLY')
    self.encrypted = (policy.upper() == 'HTTPS_ONLY')
    jmx_uri_fragment = (('https' if self.encrypted else 'http') + '://{0}/jmx?qry=Hadoop:service=NameNode,name=NameNodeStatus')
    namenode_http_fragment = 'dfs.namenode.http-address.{0}.{1}'
    namenode_https_fragment = 'dfs.namenode.https-address.{0}.{1}'
    self.namenode_state_to_hostnames = {}
    self.nn_unique_id_to_addresses = {}
    for nn_unique_id in self.nn_unique_ids:
        http_key = namenode_http_fragment.format(self.name_service, nn_unique_id)
        https_key = namenode_https_fragment.format(self.name_service, nn_unique_id)
        http_value = default(('/configurations/hdfs-site/' + http_key), None)
        https_value = default(('/configurations/hdfs-site/' + https_key), None)
        actual_value = (https_value if self.encrypted else http_value)
        hostname = (actual_value.split(':')[0].strip() if (actual_value and (':' in actual_value)) else None)
        self.nn_unique_id_to_addresses[nn_unique_id] = (http_value, https_value)
        try:
            if (not hostname):
                raise Exception(('Could not retrieve hostname from address ' + actual_value))
            jmx_uri = jmx_uri_fragment.format(actual_value)
            state = get_value_from_jmx(jmx_uri, 'State')
            if (not state):
                raise Exception(('Could not retrieve Namenode state from URL ' + jmx_uri))
            state = state.lower()
            if (state not in [NAMENODE_STATE.ACTIVE, NAMENODE_STATE.STANDBY]):
                state = NAMENODE_STATE.UNKNOWN
            if (state in self.namenode_state_to_hostnames):
                self.namenode_state_to_hostnames[state].add(hostname)
            else:
                hostnames = set([hostname])
                self.namenode_state_to_hostnames[state] = hostnames
        except:
            Logger.error(('Could not get namenode state for ' + nn_unique_id))
