{
  setupClusterWithHosts("c1","HDP-0.1",new ArrayList<String>(){
{
      add("h1");
    }
  }
,"centos5");
  Cluster cluster=clusters.getCluster("c1");
  cluster.setDesiredStackVersion(new StackId("HDP-0.1"));
  cluster.setCurrentStackVersion(new StackId("HDP-0.1"));
  ConfigFactory cf=injector.getInstance(ConfigFactory.class);
  Config config1=cf.createNew(cluster,"global",new HashMap<String,String>(){
{
      put("key1","value1");
    }
  }
);
  config1.setVersionTag("version1");
  Config config2=cf.createNew(cluster,"core-site",new HashMap<String,String>(){
{
      put("key1","value1");
    }
  }
);
  config2.setVersionTag("version1");
  cluster.addConfig(config1);
  cluster.addConfig(config2);
  cluster.addDesiredConfig("_test",config1);
  cluster.addDesiredConfig("_test",config2);
  Service hdfs=cluster.addService("HDFS");
  hdfs.persist();
  Service mapred=cluster.addService("MAPREDUCE");
  mapred.persist();
  hdfs.addServiceComponent(Role.HDFS_CLIENT.name()).persist();
  hdfs.addServiceComponent(Role.NAMENODE.name()).persist();
  hdfs.addServiceComponent(Role.DATANODE.name()).persist();
  mapred.addServiceComponent(Role.MAPREDUCE_CLIENT.name()).persist();
  hdfs.getServiceComponent(Role.HDFS_CLIENT.name()).addServiceComponentHost("h1").persist();
  hdfs.getServiceComponent(Role.NAMENODE.name()).addServiceComponentHost("h1").persist();
  hdfs.getServiceComponent(Role.DATANODE.name()).addServiceComponentHost("h1").persist();
  Map<String,String> params=new HashMap<String,String>(){
{
      put("test","test");
    }
  }
;
  ExecuteActionRequest actionRequest=new ExecuteActionRequest("c1","NON_EXISTENT_CHECK","HDFS",params);
  Map<String,String> requestProperties=new HashMap<String,String>();
  requestProperties.put(REQUEST_CONTEXT_PROPERTY,"Called from a test");
  expectActionCreationErrorWithMessage(actionRequest,requestProperties,"Unsupported action");
  actionRequest=new ExecuteActionRequest("c1","NON_EXISTENT_SERVICE_CHECK","HDFS",params);
  expectActionCreationErrorWithMessage(actionRequest,requestProperties,"Unsupported action");
  actionRequest=new ExecuteActionRequest("c1","DECOMMISSION_DATANODE","MAPREDUCE",params);
  expectActionCreationErrorWithMessage(actionRequest,requestProperties,"Unsupported action DECOMMISSION_DATANODE for MAPREDUCE");
  actionRequest=new ExecuteActionRequest("c1","DECOMMISSION_DATANODE","HDFS",params);
  expectActionCreationErrorWithMessage(actionRequest,requestProperties,"No exclude file specified when decommissioning datanodes");
  params.put("excludeFileTag","tag1");
  actionRequest=new ExecuteActionRequest("c1","DECOMMISSION_DATANODE","HDFS",params);
  expectActionCreationErrorWithMessage(actionRequest,requestProperties,"Decommissioning datanodes requires the cluster");
  actionRequest=new ExecuteActionRequest("c1",null,"DECOMMISSION_DATANODE","HDFS",null,null,params);
  expectActionCreationErrorWithMessage(actionRequest,requestProperties,"Action DECOMMISSION_DATANODE does not exist");
  controller.getActionManager().createActionDefinition("a1",ActionType.SYSTEM,"test,dirName","Does file exist","","",TargetHostType.SPECIFIC,Short.valueOf("100"));
  controller.getActionManager().createActionDefinition("a2",ActionType.SYSTEM,"","Does file exist","HDFS","DATANODE",TargetHostType.ANY,Short.valueOf("100"));
  controller.getActionManager().createActionDefinition("a3",ActionType.SYSTEM,"","Does file exist","YARN","NODEMANAGER",TargetHostType.ANY,Short.valueOf("100"));
  controller.getActionManager().createActionDefinition("a4",ActionType.SYSTEM,"","Does file exist","MAPREDUCE","",TargetHostType.ANY,Short.valueOf("100"));
  actionRequest=new ExecuteActionRequest("c1",null,"a1",null,null,null,null);
  expectActionCreationErrorWithMessage(actionRequest,requestProperties,"Action a1 requires input 'test' that is not provided");
  actionRequest=new ExecuteActionRequest("c1",null,"a1",null,null,null,params);
  expectActionCreationErrorWithMessage(actionRequest,requestProperties,"Action a1 requires input 'dirName' that is not provided");
  params.put("dirName","dirName");
  actionRequest=new ExecuteActionRequest("c1",null,"a1",null,null,null,params);
  expectActionCreationErrorWithMessage(actionRequest,requestProperties,"Action a1 requires explicit target host(s)");
  actionRequest=new ExecuteActionRequest("c1",null,"a2","MAPREDUCE",null,null,params);
  expectActionCreationErrorWithMessage(actionRequest,requestProperties,"Action a2 targets service MAPREDUCE that does not match with expected HDFS");
  actionRequest=new ExecuteActionRequest("c1",null,"a2","HDFS","HDFS_CLIENT",null,params);
  expectActionCreationErrorWithMessage(actionRequest,requestProperties,"Action a2 targets component HDFS_CLIENT that does not match with expected DATANODE");
  actionRequest=new ExecuteActionRequest("c1",null,"a1","HDFS2","HDFS_CLIENT",null,params);
  expectActionCreationErrorWithMessage(actionRequest,requestProperties,"Action a1 targets service HDFS2 that does not exist");
  actionRequest=new ExecuteActionRequest("c1",null,"a1","HDFS","HDFS_CLIENT2",null,params);
  expectActionCreationErrorWithMessage(actionRequest,requestProperties,"Action a1 targets component HDFS_CLIENT2 that does not exist");
  actionRequest=new ExecuteActionRequest("c1",null,"a1","","HDFS_CLIENT2",null,params);
  expectActionCreationErrorWithMessage(actionRequest,requestProperties,"Action a1 targets component HDFS_CLIENT2 without specifying the target service");
  actionRequest=new ExecuteActionRequest("c1",null,"a3","","",null,params);
  expectActionCreationErrorWithMessage(actionRequest,requestProperties,"Action a3 targets service YARN that does not exist");
  List<String> hosts=new ArrayList<String>();
  hosts.add("h6");
  actionRequest=new ExecuteActionRequest("c1",null,"a2","","",hosts,params);
  expectActionCreationErrorWithMessage(actionRequest,requestProperties,"Request specifies host h6 but its not a valid host based on the target service=HDFS and component=DATANODE");
  actionRequest=new ExecuteActionRequest("c1",null,"a4","MAPREDUCE","",null,params);
  expectActionCreationErrorWithMessage(actionRequest,requestProperties,"Suitable hosts not found, component=, service=MAPREDUCE, cluster=c1, actionName=a4");
}
