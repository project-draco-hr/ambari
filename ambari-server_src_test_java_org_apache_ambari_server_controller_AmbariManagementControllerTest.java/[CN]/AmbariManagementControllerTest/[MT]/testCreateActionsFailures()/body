{
  clusters.addCluster("c1");
  clusters.getCluster("c1").setDesiredStackVersion(new StackId("HDP-0.1"));
  clusters.addHost("h1");
  clusters.getHost("h1").setOsType("centos5");
  clusters.getHost("h1").persist();
  Set<String> hostNames=new HashSet<String>(){
{
      add("h1");
    }
  }
;
  clusters.mapHostsToCluster(hostNames,"c1");
  Cluster cluster=clusters.getCluster("c1");
  cluster.setDesiredStackVersion(new StackId("HDP-0.1"));
  cluster.setCurrentStackVersion(new StackId("HDP-0.1"));
  ConfigFactory cf=injector.getInstance(ConfigFactory.class);
  Config config1=cf.createNew(cluster,"global",new HashMap<String,String>(){
{
      put("key1","value1");
    }
  }
);
  config1.setVersionTag("version1");
  Config config2=cf.createNew(cluster,"core-site",new HashMap<String,String>(){
{
      put("key1","value1");
    }
  }
);
  config2.setVersionTag("version1");
  cluster.addConfig(config1);
  cluster.addConfig(config2);
  cluster.addDesiredConfig("_test",config1);
  cluster.addDesiredConfig("_test",config2);
  Service hdfs=cluster.addService("HDFS");
  hdfs.persist();
  hdfs.addServiceComponent(Role.HDFS_CLIENT.name()).persist();
  hdfs.addServiceComponent(Role.NAMENODE.name()).persist();
  hdfs.addServiceComponent(Role.DATANODE.name()).persist();
  hdfs.getServiceComponent(Role.HDFS_CLIENT.name()).addServiceComponentHost("h1").persist();
  hdfs.getServiceComponent(Role.NAMENODE.name()).addServiceComponentHost("h1").persist();
  hdfs.getServiceComponent(Role.DATANODE.name()).addServiceComponentHost("h1").persist();
  Map<String,String> params=new HashMap<String,String>(){
{
      put("test","test");
    }
  }
;
  ExecuteActionRequest actionRequest=new ExecuteActionRequest("c1","NON_EXISTENT_CHECK","HDFS",params);
  Map<String,String> requestProperties=new HashMap<String,String>();
  requestProperties.put(REQUEST_CONTEXT_PROPERTY,"Called from a test");
  try {
    controller.createAction(actionRequest,requestProperties);
    Assert.fail("createAction should fail for NON_EXISTENT_CHECK");
  }
 catch (  AmbariException ex) {
    Assert.assertTrue(ex.getMessage().contains("Unsupported action"));
  }
  actionRequest=new ExecuteActionRequest("c1","NON_EXISTENT_SERVICE_CHECK","HDFS",params);
  try {
    controller.createAction(actionRequest,requestProperties);
    Assert.fail("createAction should fail for NON_EXISTENT_SERVICE_CHECK");
  }
 catch (  AmbariException ex) {
    Assert.assertTrue(ex.getMessage().contains("Unsupported action"));
  }
  actionRequest=new ExecuteActionRequest("c1","DECOMMISSION_DATANODE","MAPREDUCE",params);
  try {
    controller.createAction(actionRequest,requestProperties);
    Assert.fail("createAction should fail for DECOMMISSION_DATANODE on MAPREDUCE");
  }
 catch (  AmbariException ex) {
    Assert.assertTrue(ex.getMessage().contains("Unsupported action DECOMMISSION_DATANODE for MAPREDUCE"));
  }
  actionRequest=new ExecuteActionRequest("c1","DECOMMISSION_DATANODE","HDFS",params);
  try {
    controller.createAction(actionRequest,requestProperties);
    Assert.fail("createAction should fail for DECOMMISSION_DATANODE on HDFS - no excludeFileTag");
  }
 catch (  IllegalArgumentException ex) {
    Assert.assertTrue(ex.getMessage().contains("No exclude file specified when decommissioning datanodes"));
  }
  params.put("excludeFileTag","tag1");
  actionRequest=new ExecuteActionRequest("c1","DECOMMISSION_DATANODE","HDFS",params);
  try {
    controller.createAction(actionRequest,requestProperties);
    Assert.fail("createAction should fail for DECOMMISSION_DATANODE on HDFS - no config type hdfs-exclude-file");
  }
 catch (  AmbariException ex) {
    Assert.assertTrue(ex.getMessage().contains("Decommissioning datanodes requires the cluster"));
  }
  actionRequest=new ExecuteActionRequest("c1",null,"DECOMMISSION_DATANODE","HDFS",null,null,params);
  try {
    RequestStatusResponse response=controller.createAction(actionRequest,requestProperties);
    if (response != null) {
      Assert.fail("createAction should fail for action DECOMMISSION_DATANODE");
    }
  }
 catch (  AmbariException ex) {
    Assert.assertTrue(ex.getMessage().contains("Invalid action request"));
  }
}
