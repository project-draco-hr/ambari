{
  String clusterName="foo1";
  createCluster(clusterName);
  Cluster cluster=clusters.getCluster(clusterName);
  clusters.getCluster(clusterName).setDesiredStackVersion(new StackId("HDP-0.1"));
  String serviceName="HDFS";
  createService(clusterName,serviceName,null);
  String componentName1="NAMENODE";
  String componentName2="DATANODE";
  String componentName3="HDFS_CLIENT";
  createServiceComponent(clusterName,serviceName,componentName1,State.INIT);
  createServiceComponent(clusterName,serviceName,componentName2,State.INIT);
  createServiceComponent(clusterName,serviceName,componentName3,State.INIT);
  String host1="h1";
  String host2="h2";
  addHostToCluster(host1,clusterName);
  addHostToCluster(host2,clusterName);
  Map<String,String> configs=new HashMap<String,String>();
  configs.put("a","b");
  configs.put("command_retry_enabled","true");
  configs.put("command_retry_max_time_in_sec","5");
  configs.put("commands_to_retry","INSTALL");
  ConfigurationRequest cr1;
  cr1=new ConfigurationRequest(clusterName,"cluster-env","version1",configs,null);
  ClusterRequest crReq=new ClusterRequest(cluster.getClusterId(),clusterName,null,null);
  crReq.setDesiredConfig(Collections.singletonList(cr1));
  controller.updateClusters(Collections.singleton(crReq),null);
  Map<String,String> mapRequestProps=new HashMap<String,String>();
  mapRequestProps.put("context","Called from a test");
  createServiceComponentHost(clusterName,serviceName,componentName2,host1,null);
  createServiceComponentHost(clusterName,serviceName,componentName2,host2,null);
  createServiceComponentHost(clusterName,serviceName,componentName3,host1,null);
  createServiceComponentHost(clusterName,serviceName,componentName3,host2,null);
  ServiceComponentHostRequest schr=new ServiceComponentHostRequest(clusterName,"HDFS","DATANODE",host2,"INSTALLED");
  Map<String,String> requestProps=new HashMap<String,String>();
  requestProps.put("phase","INITIAL_INSTALL");
  RequestStatusResponse rsr=updateHostComponents(Collections.singleton(schr),requestProps,false);
  List<Stage> stages=actionDB.getAllStages(rsr.getRequestId());
  Assert.assertEquals(1,stages.size());
  Stage stage=stages.iterator().next();
  List<ExecutionCommandWrapper> execWrappers=stage.getExecutionCommands(host2);
  Assert.assertEquals(1,execWrappers.size());
  ExecutionCommandWrapper execWrapper=execWrappers.iterator().next();
  ExecutionCommand ec=execWrapper.getExecutionCommand();
  Map<String,Map<String,String>> configurations=ec.getConfigurations();
  assertNotNull(configurations);
  assertEquals(1,configurations.size());
  assertTrue(configurations.containsKey("cluster-env"));
  assertTrue(ec.getCommandParams().containsKey("max_duration_for_retries"));
  assertEquals("5",ec.getCommandParams().get("max_duration_for_retries"));
  assertTrue(ec.getCommandParams().containsKey("command_retry_enabled"));
  assertEquals("true",ec.getCommandParams().get("command_retry_enabled"));
  for (  ServiceComponentHost sch : clusters.getCluster(clusterName).getServiceComponentHosts(host2)) {
    sch.setState(State.INSTALLED);
  }
  schr=new ServiceComponentHostRequest(clusterName,"HDFS","DATANODE",host2,"STARTED");
  rsr=updateHostComponents(Collections.singleton(schr),requestProps,false);
  stages=actionDB.getAllStages(rsr.getRequestId());
  Assert.assertEquals(1,stages.size());
  stage=stages.iterator().next();
  execWrappers=stage.getExecutionCommands(host2);
  Assert.assertEquals(1,execWrappers.size());
  execWrapper=execWrappers.iterator().next();
  ec=execWrapper.getExecutionCommand();
  configurations=ec.getConfigurations();
  assertNotNull(configurations);
  assertEquals(1,configurations.size());
  assertTrue(configurations.containsKey("cluster-env"));
  assertTrue(ec.getCommandParams().containsKey("max_duration_for_retries"));
  assertEquals("5",ec.getCommandParams().get("max_duration_for_retries"));
  assertTrue(ec.getCommandParams().containsKey("command_retry_enabled"));
  assertEquals("false",ec.getCommandParams().get("command_retry_enabled"));
  configs.put("command_retry_enabled","true");
  configs.put("command_retry_max_time_in_sec","12");
  configs.put("commands_to_retry","START");
  cr1=new ConfigurationRequest(clusterName,"cluster-env","version2",configs,null);
  crReq=new ClusterRequest(cluster.getClusterId(),clusterName,null,null);
  crReq.setDesiredConfig(Collections.singletonList(cr1));
  controller.updateClusters(Collections.singleton(crReq),null);
  requestProps.put("phase","INITIAL_START");
  schr=new ServiceComponentHostRequest(clusterName,"HDFS","DATANODE",host2,"STARTED");
  rsr=updateHostComponents(Collections.singleton(schr),requestProps,false);
  stages=actionDB.getAllStages(rsr.getRequestId());
  Assert.assertEquals(1,stages.size());
  stage=stages.iterator().next();
  execWrappers=stage.getExecutionCommands(host2);
  Assert.assertEquals(1,execWrappers.size());
  execWrapper=execWrappers.iterator().next();
  ec=execWrapper.getExecutionCommand();
  configurations=ec.getConfigurations();
  assertNotNull(configurations);
  assertEquals(1,configurations.size());
  assertTrue(configurations.containsKey("cluster-env"));
  assertTrue(ec.getCommandParams().containsKey("max_duration_for_retries"));
  assertEquals("12",ec.getCommandParams().get("max_duration_for_retries"));
  assertTrue(ec.getCommandParams().containsKey("command_retry_enabled"));
  assertEquals("true",ec.getCommandParams().get("command_retry_enabled"));
  configs.put("command_retry_enabled","asdf");
  configs.put("command_retry_max_time_in_sec","-5");
  configs.put("commands_to_retry2","START");
  cr1=new ConfigurationRequest(clusterName,"cluster-env","version3",configs,null);
  crReq=new ClusterRequest(cluster.getClusterId(),clusterName,null,null);
  crReq.setDesiredConfig(Collections.singletonList(cr1));
  controller.updateClusters(Collections.singleton(crReq),null);
  requestProps.put("phase","INITIAL_START");
  schr=new ServiceComponentHostRequest(clusterName,"HDFS","DATANODE",host2,"STARTED");
  rsr=updateHostComponents(Collections.singleton(schr),requestProps,false);
  stages=actionDB.getAllStages(rsr.getRequestId());
  Assert.assertEquals(1,stages.size());
  stage=stages.iterator().next();
  execWrappers=stage.getExecutionCommands(host2);
  Assert.assertEquals(1,execWrappers.size());
  execWrapper=execWrappers.iterator().next();
  ec=execWrapper.getExecutionCommand();
  configurations=ec.getConfigurations();
  assertNotNull(configurations);
  assertEquals(1,configurations.size());
  assertTrue(configurations.containsKey("cluster-env"));
  assertTrue(ec.getCommandParams().containsKey("max_duration_for_retries"));
  assertEquals("0",ec.getCommandParams().get("max_duration_for_retries"));
  assertTrue(ec.getCommandParams().containsKey("command_retry_enabled"));
  assertEquals("false",ec.getCommandParams().get("command_retry_enabled"));
}
