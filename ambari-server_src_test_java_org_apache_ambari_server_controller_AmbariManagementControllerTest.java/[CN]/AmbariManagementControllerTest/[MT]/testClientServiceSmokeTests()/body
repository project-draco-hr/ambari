{
  String cluster1=getUniqueName();
  createCluster(cluster1);
  clusters.getCluster(cluster1).setDesiredStackVersion(new StackId("HDP-0.1"));
  String serviceName="PIG";
  createService(cluster1,serviceName,null);
  String componentName1="PIG";
  createServiceComponent(cluster1,serviceName,componentName1,State.INIT);
  String host1=getUniqueName();
  String host2=getUniqueName();
  addHostToCluster(host1,cluster1);
  addHostToCluster(host2,cluster1);
  Map<String,String> mapRequestProps=new HashMap<String,String>();
  mapRequestProps.put("context","Called from a test");
  createServiceComponentHost(cluster1,null,componentName1,host1,null);
  createServiceComponentHost(cluster1,null,componentName1,host2,null);
  ServiceRequest r=new ServiceRequest(cluster1,serviceName,State.INSTALLED.toString());
  Set<ServiceRequest> requests=new HashSet<ServiceRequest>();
  requests.add(r);
  RequestStatusResponse trackAction=ServiceResourceProviderTest.updateServices(controller,requests,mapRequestProps,true,false);
  Assert.assertEquals(State.INSTALLED,clusters.getCluster(cluster1).getService(serviceName).getDesiredState());
  for (  ServiceComponent sc : clusters.getCluster(cluster1).getService(serviceName).getServiceComponents().values()) {
    Assert.assertEquals(State.INSTALLED,sc.getDesiredState());
    Assert.assertFalse(sc.isRecoveryEnabled());
    for (    ServiceComponentHost sch : sc.getServiceComponentHosts().values()) {
      Assert.assertEquals(State.INSTALLED,sch.getDesiredState());
      Assert.assertEquals(State.INIT,sch.getState());
    }
  }
  List<ShortTaskStatus> taskStatuses=trackAction.getTasks();
  Assert.assertEquals(2,taskStatuses.size());
  List<Stage> stages=actionDB.getAllStages(trackAction.getRequestId());
  Assert.assertEquals(1,stages.size());
  Assert.assertEquals("Called from a test",stages.get(0).getRequestContext());
  for (  ServiceComponent sc : clusters.getCluster(cluster1).getService(serviceName).getServiceComponents().values()) {
    sc.setRecoveryEnabled(true);
    for (    ServiceComponentHost sch : sc.getServiceComponentHosts().values()) {
      sch.setState(State.INSTALLED);
    }
  }
  r=new ServiceRequest(cluster1,serviceName,State.STARTED.toString());
  requests.clear();
  requests.add(r);
  injector.getInstance(ActionMetadata.class).addServiceCheckAction("PIG");
  trackAction=ServiceResourceProviderTest.updateServices(controller,requests,mapRequestProps,true,false);
  Assert.assertNotNull(trackAction);
  Assert.assertEquals(State.INSTALLED,clusters.getCluster(cluster1).getService(serviceName).getDesiredState());
  for (  ServiceComponent sc : clusters.getCluster(cluster1).getService(serviceName).getServiceComponents().values()) {
    Assert.assertEquals(State.INSTALLED,sc.getDesiredState());
    Assert.assertTrue(sc.isRecoveryEnabled());
    for (    ServiceComponentHost sch : sc.getServiceComponentHosts().values()) {
      Assert.assertEquals(State.INSTALLED,sch.getDesiredState());
      Assert.assertEquals(State.INSTALLED,sch.getState());
    }
  }
  stages=actionDB.getAllStages(trackAction.getRequestId());
  for (  Stage s : stages) {
    LOG.info("Stage dump : " + s.toString());
  }
  Assert.assertEquals(1,stages.size());
  taskStatuses=trackAction.getTasks();
  Assert.assertEquals(1,taskStatuses.size());
  Assert.assertEquals(Role.PIG_SERVICE_CHECK.toString(),taskStatuses.get(0).getRole());
}
