{
  String cluster1=getUniqueName();
  String host1=getUniqueName();
  String host2=getUniqueName();
  createServiceComponentHostSimple(cluster1,host1,host2);
  String serviceName="HDFS";
  Cluster cluster=clusters.getCluster(cluster1);
  Service s1=cluster.getService(serviceName);
  Map<String,Config> configs=new HashMap<String,Config>();
  Map<String,String> properties=new HashMap<String,String>();
  Map<String,Map<String,String>> propertiesAttributes=new HashMap<String,Map<String,String>>();
  properties.put("a","a1");
  properties.put("b","b1");
  Config c1=new ConfigImpl(cluster,"hdfs-site",properties,propertiesAttributes,injector);
  properties.put("c",cluster1);
  properties.put("d","d1");
  Config c2=new ConfigImpl(cluster,"core-site",properties,propertiesAttributes,injector);
  Config c3=new ConfigImpl(cluster,"foo-site",properties,propertiesAttributes,injector);
  Map<String,String> mapRequestProps=new HashMap<String,String>();
  mapRequestProps.put("context","Called from a test");
  c1.setTag("v1");
  c2.setTag("v1");
  c3.setTag("v1");
  cluster.addConfig(c1);
  cluster.addConfig(c2);
  cluster.addConfig(c3);
  c1.persist();
  c2.persist();
  c3.persist();
  configs.put(c1.getType(),c1);
  configs.put(c2.getType(),c2);
  ServiceRequest r=new ServiceRequest(cluster1,serviceName,State.INSTALLED.toString());
  Set<ServiceRequest> requests=new HashSet<ServiceRequest>();
  requests.add(r);
  RequestStatusResponse trackAction=ServiceResourceProviderTest.updateServices(controller,requests,mapRequestProps,true,false);
  Assert.assertEquals(State.INSTALLED,clusters.getCluster(cluster1).getService(serviceName).getDesiredState());
  for (  ServiceComponent sc : clusters.getCluster(cluster1).getService(serviceName).getServiceComponents().values()) {
    Assert.assertEquals(State.INSTALLED,sc.getDesiredState());
    for (    ServiceComponentHost sch : sc.getServiceComponentHosts().values()) {
      Assert.assertEquals(State.INSTALLED,sch.getDesiredState());
      Assert.assertEquals(State.INIT,sch.getState());
    }
  }
  List<ShortTaskStatus> taskStatuses=trackAction.getTasks();
  Assert.assertEquals(5,taskStatuses.size());
  boolean foundH1NN=false;
  boolean foundH1DN=false;
  boolean foundH2DN=false;
  boolean foundH1CLT=false;
  boolean foundH2CLT=false;
  for (  ShortTaskStatus taskStatus : taskStatuses) {
    LOG.debug("Task dump :" + taskStatus.toString());
    Assert.assertEquals(RoleCommand.INSTALL.toString(),taskStatus.getCommand());
    Assert.assertEquals(HostRoleStatus.PENDING.toString(),taskStatus.getStatus());
    if (taskStatus.getHostName().equals(host1)) {
      if (Role.NAMENODE.toString().equals(taskStatus.getRole())) {
        foundH1NN=true;
      }
 else       if (Role.DATANODE.toString().equals(taskStatus.getRole())) {
        foundH1DN=true;
      }
 else       if (Role.HDFS_CLIENT.toString().equals(taskStatus.getRole())) {
        foundH1CLT=true;
      }
 else {
        fail("Found invalid role for host h1");
      }
    }
 else     if (taskStatus.getHostName().equals(host2)) {
      if (Role.DATANODE.toString().equals(taskStatus.getRole())) {
        foundH2DN=true;
      }
 else       if (Role.HDFS_CLIENT.toString().equals(taskStatus.getRole())) {
        foundH2CLT=true;
      }
 else {
        fail("Found invalid role for host h2");
      }
    }
 else {
      fail("Found invalid host in task list");
    }
  }
  Assert.assertTrue(foundH1DN && foundH1NN && foundH2DN&& foundH1CLT&& foundH2CLT);
  List<Stage> stages=actionDB.getAllStages(trackAction.getRequestId());
  Assert.assertEquals(1,stages.size());
  for (  Stage stage : stages) {
    LOG.info("Stage Details for Install Service" + ", stageId=" + stage.getStageId() + ", actionId="+ stage.getActionId());
    for (    String host : stage.getHosts()) {
      for (      ExecutionCommandWrapper ecw : stage.getExecutionCommands(host)) {
        Assert.assertFalse(ecw.getExecutionCommand().getHostLevelParams().get("repo_info").isEmpty());
      }
    }
  }
  org.apache.ambari.server.controller.spi.Request request=PropertyHelper.getReadRequest(TaskResourceProvider.TASK_CLUSTER_NAME_PROPERTY_ID,TaskResourceProvider.TASK_REQUEST_ID_PROPERTY_ID,TaskResourceProvider.TASK_STAGE_ID_PROPERTY_ID);
  Predicate predicate=new PredicateBuilder().property(TaskResourceProvider.TASK_REQUEST_ID_PROPERTY_ID).equals(trackAction.getRequestId()).toPredicate();
  List<HostRoleCommandEntity> entities=hostRoleCommandDAO.findAll(request,predicate);
  Assert.assertEquals(5,entities.size());
  Long taskId=entities.get(0).getTaskId();
  predicate=new PredicateBuilder().property(TaskResourceProvider.TASK_REQUEST_ID_PROPERTY_ID).equals(trackAction.getRequestId()).and().property(TaskResourceProvider.TASK_ID_PROPERTY_ID).equals(taskId).toPredicate();
  entities=hostRoleCommandDAO.findAll(request,predicate);
  Assert.assertEquals(1,entities.size());
  for (  ServiceComponent sc : clusters.getCluster(cluster1).getService(serviceName).getServiceComponents().values()) {
    for (    ServiceComponentHost sch : sc.getServiceComponentHosts().values()) {
      sch.setState(State.INSTALLED);
    }
  }
  r=new ServiceRequest(cluster1,serviceName,State.STARTED.toString());
  requests.clear();
  requests.add(r);
  trackAction=ServiceResourceProviderTest.updateServices(controller,requests,mapRequestProps,true,false);
  Assert.assertEquals(State.STARTED,clusters.getCluster(cluster1).getService(serviceName).getDesiredState());
  for (  ServiceComponent sc : clusters.getCluster(cluster1).getService(serviceName).getServiceComponents().values()) {
    if (sc.getName().equals("HDFS_CLIENT")) {
      Assert.assertEquals(State.INSTALLED,sc.getDesiredState());
    }
 else {
      Assert.assertEquals(State.STARTED,sc.getDesiredState());
    }
    for (    ServiceComponentHost sch : sc.getServiceComponentHosts().values()) {
      if (sch.getServiceComponentName().equals("HDFS_CLIENT")) {
        Assert.assertEquals(State.INSTALLED,sch.getDesiredState());
      }
 else {
        Assert.assertEquals(State.STARTED,sch.getDesiredState());
      }
    }
  }
  stages=actionDB.getAllStages(trackAction.getRequestId());
  Assert.assertEquals(2,stages.size());
  StringBuilder sb=new StringBuilder();
  clusters.debugDump(sb);
  LOG.info("Cluster Dump: " + sb.toString());
  for (  ServiceComponent sc : clusters.getCluster(cluster1).getService(serviceName).getServiceComponents().values()) {
    for (    ServiceComponentHost sch : sc.getServiceComponentHosts().values()) {
      if (sc.isClientComponent()) {
        sch.setState(State.INSTALLED);
      }
 else {
        sch.setState(State.INSTALL_FAILED);
      }
    }
  }
  r=new ServiceRequest(cluster1,serviceName,State.INSTALLED.toString());
  requests.clear();
  requests.add(r);
  trackAction=ServiceResourceProviderTest.updateServices(controller,requests,mapRequestProps,true,false);
  Assert.assertEquals(State.INSTALLED,clusters.getCluster(cluster1).getService(serviceName).getDesiredState());
  for (  ServiceComponent sc : clusters.getCluster(cluster1).getService(serviceName).getServiceComponents().values()) {
    Assert.assertEquals(State.INSTALLED,sc.getDesiredState());
    for (    ServiceComponentHost sch : sc.getServiceComponentHosts().values()) {
      Assert.assertEquals(State.INSTALLED,sch.getDesiredState());
    }
  }
  stages=actionDB.getAllStages(trackAction.getRequestId());
  Assert.assertEquals(1,stages.size());
}
