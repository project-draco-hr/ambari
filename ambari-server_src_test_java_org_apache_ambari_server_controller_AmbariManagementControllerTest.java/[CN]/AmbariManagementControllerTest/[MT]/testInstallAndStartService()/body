{
  testCreateServiceComponentHostSimple();
  String clusterName="foo1";
  String serviceName="HDFS";
  Cluster cluster=clusters.getCluster(clusterName);
  Service s1=cluster.getService(serviceName);
  Map<String,Config> configs=new HashMap<String,Config>();
  Map<String,String> properties=new HashMap<String,String>();
  properties.put("a","a1");
  properties.put("b","b1");
  Config c1=new ConfigImpl(cluster,"hdfs-site",properties,injector);
  properties.put("c","c1");
  properties.put("d","d1");
  Config c2=new ConfigImpl(cluster,"core-site",properties,injector);
  Config c3=new ConfigImpl(cluster,"foo-site",properties,injector);
  c1.setVersionTag("v1");
  c2.setVersionTag("v1");
  c3.setVersionTag("v1");
  cluster.addDesiredConfig(c1);
  cluster.addDesiredConfig(c2);
  cluster.addDesiredConfig(c3);
  configs.put(c1.getType(),c1);
  configs.put(c2.getType(),c2);
  s1.updateDesiredConfigs(configs);
  s1.persist();
  ServiceRequest r1=new ServiceRequest(clusterName,serviceName,null,State.INSTALLED.toString());
  Set<ServiceRequest> requests1=new HashSet<ServiceRequest>();
  requests1.add(r1);
  TrackActionResponse trackAction=controller.updateServices(requests1);
  Assert.assertEquals(State.INSTALLED,clusters.getCluster(clusterName).getService(serviceName).getDesiredState());
  for (  ServiceComponent sc : clusters.getCluster(clusterName).getService(serviceName).getServiceComponents().values()) {
    Assert.assertEquals(State.INSTALLED,sc.getDesiredState());
    for (    ServiceComponentHost sch : sc.getServiceComponentHosts().values()) {
      Assert.assertEquals(State.INSTALLED,sch.getDesiredState());
    }
  }
  List<Stage> stages=actionDB.getAllStages(trackAction.getRequestId());
  Assert.assertEquals(1,stages.size());
  for (  Stage stage : stages) {
    LOG.info("Stage Details for Install Service" + ", stageId=" + stage.getStageId() + ", actionId="+ stage.getActionId());
    for (    String host : stage.getHosts()) {
      LOG.info("Dumping host action details" + ", stageId=" + stage.getStageId() + ", actionId="+ stage.getActionId()+ ", commandDetails="+ StageUtils.jaxbToString(stage.getExecutionCommands(host).get(0)));
    }
  }
  ServiceRequest r2=new ServiceRequest(clusterName,serviceName,null,State.STARTED.toString());
  Set<ServiceRequest> requests2=new HashSet<ServiceRequest>();
  requests2.add(r2);
  trackAction=controller.updateServices(requests2);
  Assert.assertEquals(State.STARTED,clusters.getCluster(clusterName).getService(serviceName).getDesiredState());
  for (  ServiceComponent sc : clusters.getCluster(clusterName).getService(serviceName).getServiceComponents().values()) {
    Assert.assertEquals(State.STARTED,sc.getDesiredState());
    for (    ServiceComponentHost sch : sc.getServiceComponentHosts().values()) {
      Assert.assertEquals(State.STARTED,sch.getDesiredState());
    }
  }
  stages=actionDB.getAllStages(trackAction.getRequestId());
  Assert.assertEquals(1,stages.size());
  for (  Stage stage : stages) {
    LOG.info("Stage Details for Start Service" + ", stageId=" + stage.getStageId() + ", actionId="+ stage.getActionId());
    for (    String host : stage.getHosts()) {
      LOG.info("Dumping host action details" + ", stageId=" + stage.getStageId() + ", actionId="+ stage.getActionId()+ ", commandDetails="+ StageUtils.jaxbToString(stage.getExecutionCommands(host).get(0)));
    }
  }
  StringBuilder sb=new StringBuilder();
  clusters.debugDump(sb);
  LOG.info("Cluster Dump: " + sb.toString());
}
