{
  String clusterName="foo1";
  String pigServiceName="PIG";
  String mrServiceName="MAPREDUCE";
  String host1="h1";
  String host2="h2";
  String pigComponentName="PIG";
  String mrJobTrackerComp="JOBTRACKER";
  String mrTaskTrackerComp="TASKTRACKER";
  String mrClientComp="MAPREDUCE_CLIENT";
  String hdfsService="HDFS";
  String hdfsNameNode="NAMENODE";
  String hdfsDataNode="DATANODE";
  String hdfsClient="HDFS_CLIENT";
  StackId currentStackId=new StackId("HDP-0.1");
  StackId desiredStackId=new StackId("HDP-0.2");
  List<String> hosts=new ArrayList<String>();
  hosts.add(host1);
  hosts.add(host2);
  Map<String,String> mapRequestProps=new HashMap<String,String>();
  mapRequestProps.put("context","Called from a test");
  createCluster(clusterName);
  Cluster c=clusters.getCluster(clusterName);
  c.setDesiredStackVersion(currentStackId);
  createService(clusterName,pigServiceName,State.INIT);
  createServiceComponent(clusterName,pigServiceName,pigComponentName,null);
  addHost(host1,clusterName);
  addHost(host2,clusterName);
  createServiceComponentHost(clusterName,null,pigComponentName,host1,null);
  createServiceComponentHost(clusterName,null,pigComponentName,host2,null);
  resetServiceState(pigServiceName,currentStackId,c);
  ClusterRequest r=new ClusterRequest(c.getClusterId(),clusterName,"HDP-0.2",null);
  RequestStatusResponse trackAction=controller.updateClusters(Collections.singleton(r),mapRequestProps);
  List<Stage> stages=actionDB.getAllStages(trackAction.getRequestId());
  ExpectedUpgradeTasks expectedTasks=new ExpectedUpgradeTasks(hosts);
  expectedTasks.expectTask(Role.PIG,host1);
  expectedTasks.expectTask(Role.PIG,host2);
  expectedTasks.expectTask(Role.AMBARI_SERVER_ACTION);
  validateGeneratedStages(stages,2,expectedTasks);
  resetCluster(c,currentStackId);
  createService(clusterName,mrServiceName,State.INIT);
  createServiceComponent(clusterName,mrServiceName,mrJobTrackerComp,null);
  createServiceComponent(clusterName,mrServiceName,mrTaskTrackerComp,null);
  createServiceComponent(clusterName,mrServiceName,mrClientComp,null);
  createServiceComponentHost(clusterName,null,mrJobTrackerComp,host1,null);
  createServiceComponentHost(clusterName,null,mrTaskTrackerComp,host2,null);
  createServiceComponentHost(clusterName,null,mrClientComp,host2,null);
  resetServiceState(mrServiceName,currentStackId,c);
  actionDB.abortOperation(trackAction.getRequestId());
  r=new ClusterRequest(c.getClusterId(),clusterName,"HDP-0.2",null);
  trackAction=controller.updateClusters(Collections.singleton(r),mapRequestProps);
  stages=actionDB.getAllStages(trackAction.getRequestId());
  expectedTasks.expectTask(Role.JOBTRACKER,host1);
  expectedTasks.expectTask(Role.TASKTRACKER,host2);
  expectedTasks.expectTask(Role.MAPREDUCE_CLIENT,host2);
  validateGeneratedStages(stages,5,expectedTasks);
  actionDB.abortOperation(trackAction.getRequestId());
  trackAction=controller.updateClusters(Collections.singleton(r),mapRequestProps);
  stages=actionDB.getAllStages(trackAction.getRequestId());
  validateGeneratedStages(stages,5,expectedTasks);
  c.getService(pigServiceName).getServiceComponent(pigComponentName).getServiceComponentHost(host1).setState(State.INSTALLED);
  c.getService(pigServiceName).getServiceComponent(pigComponentName).getServiceComponentHost(host2).setState(State.INSTALLED);
  c.getService(pigServiceName).getServiceComponent(pigComponentName).getServiceComponentHost(host1).setStackVersion(desiredStackId);
  c.getService(pigServiceName).getServiceComponent(pigComponentName).getServiceComponentHost(host2).setStackVersion(desiredStackId);
  actionDB.abortOperation(trackAction.getRequestId());
  trackAction=controller.updateClusters(Collections.singleton(r),mapRequestProps);
  stages=actionDB.getAllStages(trackAction.getRequestId());
  validateGeneratedStages(stages,5,expectedTasks);
  c.getService(mrServiceName).getServiceComponent(mrJobTrackerComp).getServiceComponentHost(host1).setState(State.UPGRADING);
  c.getService(mrServiceName).getServiceComponent(mrTaskTrackerComp).getServiceComponentHost(host2).setState(State.UPGRADING);
  actionDB.abortOperation(trackAction.getRequestId());
  trackAction=controller.updateClusters(Collections.singleton(r),mapRequestProps);
  stages=actionDB.getAllStages(trackAction.getRequestId());
  validateGeneratedStages(stages,5,expectedTasks);
  createService(clusterName,hdfsService,State.INIT);
  createServiceComponent(clusterName,hdfsService,hdfsNameNode,null);
  createServiceComponent(clusterName,hdfsService,hdfsDataNode,null);
  createServiceComponent(clusterName,hdfsService,hdfsClient,null);
  createServiceComponentHost(clusterName,null,hdfsNameNode,host1,null);
  createServiceComponentHost(clusterName,null,hdfsDataNode,host1,null);
  createServiceComponentHost(clusterName,null,hdfsDataNode,host2,null);
  createServiceComponentHost(clusterName,null,hdfsClient,host2,null);
  resetServiceState(hdfsService,currentStackId,c);
  resetServiceState(mrServiceName,currentStackId,c);
  resetServiceState(pigServiceName,currentStackId,c);
  actionDB.abortOperation(trackAction.getRequestId());
  trackAction=controller.updateClusters(Collections.singleton(r),mapRequestProps);
  stages=actionDB.getAllStages(trackAction.getRequestId());
  expectedTasks.resetAll();
  expectedTasks.expectTask(Role.PIG,host1);
  expectedTasks.expectTask(Role.PIG,host2);
  expectedTasks.expectTask(Role.JOBTRACKER,host1);
  expectedTasks.expectTask(Role.TASKTRACKER,host2);
  expectedTasks.expectTask(Role.MAPREDUCE_CLIENT,host2);
  expectedTasks.expectTask(Role.DATANODE,host1);
  expectedTasks.expectTask(Role.DATANODE,host2);
  expectedTasks.expectTask(Role.NAMENODE,host1);
  expectedTasks.expectTask(Role.HDFS_CLIENT,host2);
  expectedTasks.expectTask(Role.AMBARI_SERVER_ACTION);
  validateGeneratedStages(stages,8,expectedTasks);
}
