{
  RepositoryInfo repo=ambariMetaInfo.getRepository(STACK_NAME,STACK_VERSION,OS_TYPE,REPO_ID);
  RepositoryRequest request=new RepositoryRequest(STACK_NAME,STACK_VERSION,OS_TYPE,REPO_ID);
  request.setBaseUrl("http://hortonworks.com");
  Set<RepositoryRequest> requests=new HashSet<RepositoryRequest>();
  requests.add(request);
  try {
    controller.updateRespositories(requests);
  }
 catch (  Exception e) {
    assertNotNull(e);
    Assert.assertTrue(e.getMessage().contains(FileNotFoundException.class.getName()));
  }
  request.setVerifyBaseUrl(false);
  controller.updateRespositories(requests);
  Assert.assertEquals(request.getBaseUrl(),repo.getBaseUrl());
  requests.clear();
  request=new RepositoryRequest(STACK_NAME,STACK_VERSION,OS_TYPE,REPO_ID);
  request.setBaseUrl("https://hortonworks.com");
  requests.add(request);
  try {
    controller.updateRespositories(requests);
  }
 catch (  Exception e) {
    System.err.println(e.getMessage());
    assertTrue(e.getMessage().contains(IOException.class.getName()));
  }
  requests.clear();
  request=new RepositoryRequest(STACK_NAME,STACK_VERSION,OS_TYPE,REPO_ID);
  request.setBaseUrl("pro://hortonworks.com");
  requests.add(request);
  try {
    controller.updateRespositories(requests);
  }
 catch (  Exception e) {
    assertTrue(e.getMessage().contains(MalformedURLException.class.getName()));
  }
  requests.clear();
  request=new RepositoryRequest(STACK_NAME,STACK_VERSION,OS_TYPE,REPO_ID);
  request.setBaseUrl("http://rrr1.cccc");
  requests.add(request);
  try {
    controller.updateRespositories(requests);
  }
 catch (  Exception e) {
    String exceptionMsg=e.getMessage();
    assertTrue(exceptionMsg.contains(UnknownHostException.class.getName()) || exceptionMsg.contains(ConnectException.class.getName()));
  }
  requests.clear();
  request=new RepositoryRequest(STACK_NAME,STACK_VERSION,OS_TYPE,REPO_ID);
  request.setBaseUrl(repo.getDefaultBaseUrl());
  requests.add(request);
  controller.updateRespositories(requests);
  Assert.assertEquals(repo.getBaseUrl(),repo.getDefaultBaseUrl());
  String baseUrl=repo.getDefaultBaseUrl();
  if (!baseUrl.endsWith("/")) {
    baseUrl+="/";
  }
  backingProperties.setProperty(Configuration.REPO_SUFFIX_KEY_UBUNTU,"/repodata/repomd.xml");
  Assert.assertTrue(baseUrl.endsWith("/") && configuration.getRepoValidationSuffixes("debian12")[0].startsWith("/"));
  request.setBaseUrl(baseUrl);
  controller.updateRespositories(requests);
  Assert.assertEquals(baseUrl,repo.getBaseUrl());
  backingProperties.setProperty(Configuration.REPO_SUFFIX_KEY_DEFAULT,"repodata/repomd.xml");
  Assert.assertTrue(baseUrl.endsWith("/") && !configuration.getRepoValidationSuffixes("redhat6")[0].startsWith("/"));
  request.setBaseUrl(baseUrl);
  controller.updateRespositories(requests);
  Assert.assertEquals(baseUrl,repo.getBaseUrl());
  baseUrl=baseUrl.substring(0,baseUrl.length() - 1);
  Assert.assertTrue(!baseUrl.endsWith("/") && !configuration.getRepoValidationSuffixes("redhat6")[0].startsWith("/"));
  request.setBaseUrl(baseUrl);
  controller.updateRespositories(requests);
  Assert.assertEquals(baseUrl,repo.getBaseUrl());
  backingProperties.setProperty(Configuration.REPO_SUFFIX_KEY_DEFAULT,"/repodata/repomd.xml");
  Assert.assertTrue(!baseUrl.endsWith("/") && configuration.getRepoValidationSuffixes("suse11")[0].startsWith("/"));
  request.setBaseUrl(baseUrl);
  controller.updateRespositories(requests);
  Assert.assertEquals(baseUrl,repo.getBaseUrl());
  backingProperties.setProperty(Configuration.REPO_SUFFIX_KEY_UBUNTU,"/foo/bar.xml,/repodata/repomd.xml");
  Assert.assertTrue(configuration.getRepoValidationSuffixes("debian12").length > 1);
  request.setBaseUrl(baseUrl);
  controller.updateRespositories(requests);
  Assert.assertEquals(baseUrl,repo.getBaseUrl());
}
