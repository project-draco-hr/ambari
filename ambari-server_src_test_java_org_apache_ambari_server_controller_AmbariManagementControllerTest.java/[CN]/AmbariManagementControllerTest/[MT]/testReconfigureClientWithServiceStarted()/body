{
  String clusterName="foo1";
  createCluster(clusterName);
  clusters.getCluster(clusterName).setDesiredStackVersion(new StackId("HDP-0.1"));
  String serviceName="HDFS";
  createService(clusterName,serviceName,null);
  String componentName1="NAMENODE";
  String componentName2="DATANODE";
  String componentName3="HDFS_CLIENT";
  createServiceComponent(clusterName,serviceName,componentName1,State.INIT);
  createServiceComponent(clusterName,serviceName,componentName2,State.INIT);
  createServiceComponent(clusterName,serviceName,componentName3,State.INIT);
  String host1="h1";
  clusters.addHost(host1);
  clusters.getHost("h1").setOsType("centos5");
  clusters.getHost("h1").setState(HostState.HEALTHY);
  clusters.getHost("h1").persist();
  String host2="h2";
  clusters.addHost(host2);
  clusters.getHost("h2").setOsType("centos6");
  clusters.getHost("h2").setState(HostState.HEALTHY);
  clusters.getHost("h2").persist();
  clusters.mapHostToCluster(host1,clusterName);
  clusters.mapHostToCluster(host2,clusterName);
  createServiceComponentHost(clusterName,serviceName,componentName1,host1,null);
  createServiceComponentHost(clusterName,serviceName,componentName2,host1,null);
  createServiceComponentHost(clusterName,serviceName,componentName3,host1,null);
  createServiceComponentHost(clusterName,serviceName,componentName3,host2,null);
  Map<String,String> configs=new HashMap<String,String>();
  configs.put("a","b");
  ConfigurationRequest cr1, cr2, cr3;
  cr1=new ConfigurationRequest(clusterName,"core-site","version1",configs);
  cr2=new ConfigurationRequest(clusterName,"hdfs-site","version1",configs);
  ClusterRequest crReq=new ClusterRequest(null,clusterName,null,null);
  crReq.setDesiredConfig(cr1);
  controller.updateClusters(Collections.singleton(crReq),null);
  crReq=new ClusterRequest(null,clusterName,null,null);
  crReq.setDesiredConfig(cr2);
  controller.updateClusters(Collections.singleton(crReq),null);
  installService(clusterName,serviceName,false,false);
  startService(clusterName,serviceName,false,false);
  Cluster c=clusters.getCluster(clusterName);
  Service s=c.getService(serviceName);
  stopServiceComponentHosts(clusterName,serviceName);
  Assert.assertEquals(State.STARTED,s.getDesiredState());
  for (  ServiceComponent sc : s.getServiceComponents().values()) {
    for (    ServiceComponentHost sch : sc.getServiceComponentHosts().values()) {
      Assert.assertEquals(State.INSTALLED,sch.getDesiredState());
    }
  }
  configs.clear();
  configs.put("c","d");
  cr3=new ConfigurationRequest(clusterName,"core-site","version122",configs);
  crReq=new ClusterRequest(null,clusterName,null,null);
  crReq.setDesiredConfig(cr3);
  controller.updateClusters(Collections.singleton(crReq),null);
  long id=startService(clusterName,serviceName,false,true);
  List<Stage> stages=actionDB.getAllStages(id);
  HostRoleCommand clientHrc=null;
  for (  Stage stage : stages) {
    for (    HostRoleCommand hrc : stage.getOrderedHostRoleCommands()) {
      if (hrc.getHostName().equals(host2) && hrc.getRole().toString().equals("HDFS_CLIENT")) {
        clientHrc=hrc;
        Assert.assertEquals("version122",hrc.getExecutionCommandWrapper().getExecutionCommand().getConfigurationTags().get("core-site").get("tag"));
      }
    }
  }
  Assert.assertNotNull(clientHrc);
}
