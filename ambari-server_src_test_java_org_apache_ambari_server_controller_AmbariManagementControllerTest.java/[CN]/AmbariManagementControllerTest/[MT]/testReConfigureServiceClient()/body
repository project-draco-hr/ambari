{
  String clusterName="foo1";
  createCluster(clusterName);
  clusters.getCluster(clusterName).setDesiredStackVersion(new StackId("HDP-0.1"));
  String serviceName1="HDFS";
  String serviceName2="MAPREDUCE";
  String componentName1="NAMENODE";
  String componentName2="DATANODE";
  String componentName3="HDFS_CLIENT";
  String componentName4="JOBTRACKER";
  String componentName5="TASKTRACKER";
  String componentName6="MAPREDUCE_CLIENT";
  createService(clusterName,serviceName1,null);
  createService(clusterName,serviceName2,null);
  createServiceComponent(clusterName,serviceName1,componentName1,State.INIT);
  createServiceComponent(clusterName,serviceName1,componentName2,State.INIT);
  createServiceComponent(clusterName,serviceName1,componentName3,State.INIT);
  createServiceComponent(clusterName,serviceName2,componentName4,State.INIT);
  createServiceComponent(clusterName,serviceName2,componentName5,State.INIT);
  createServiceComponent(clusterName,serviceName2,componentName6,State.INIT);
  String host1="h1";
  String host2="h2";
  String host3="h3";
  clusters.addHost(host1);
  clusters.addHost(host2);
  clusters.addHost(host3);
  clusters.getHost("h1").setOsType("centos6");
  clusters.getHost("h1").setState(HostState.HEALTHY);
  clusters.getHost("h1").persist();
  clusters.getHost("h2").setOsType("centos6");
  clusters.getHost("h2").setState(HostState.HEALTHY);
  clusters.getHost("h2").persist();
  clusters.getHost("h3").setOsType("centos6");
  clusters.getHost("h3").setState(HostState.HEALTHY);
  clusters.getHost("h3").persist();
  clusters.mapHostToCluster(host1,clusterName);
  clusters.mapHostToCluster(host2,clusterName);
  clusters.mapHostToCluster(host3,clusterName);
  createServiceComponentHost(clusterName,serviceName1,componentName1,host1,null);
  createServiceComponentHost(clusterName,serviceName1,componentName2,host1,null);
  createServiceComponentHost(clusterName,serviceName2,componentName4,host1,null);
  createServiceComponentHost(clusterName,serviceName2,componentName5,host1,null);
  createServiceComponentHost(clusterName,serviceName1,componentName2,host2,null);
  createServiceComponentHost(clusterName,serviceName1,componentName3,host2,null);
  createServiceComponentHost(clusterName,serviceName2,componentName6,host2,null);
  createServiceComponentHost(clusterName,serviceName1,componentName3,host3,null);
  createServiceComponentHost(clusterName,serviceName2,componentName6,host3,null);
  Map<String,String> configs=new HashMap<String,String>();
  configs.put("a","b");
  ConfigurationRequest cr1, cr2, cr3;
  cr1=new ConfigurationRequest(clusterName,"core-site","version1",configs);
  cr2=new ConfigurationRequest(clusterName,"hdfs-site","version1",configs);
  ClusterRequest crReq=new ClusterRequest(null,clusterName,null,null);
  crReq.setDesiredConfig(cr1);
  controller.updateClusters(Collections.singleton(crReq),null);
  crReq=new ClusterRequest(null,clusterName,null,null);
  crReq.setDesiredConfig(cr2);
  controller.updateClusters(Collections.singleton(crReq),null);
  long requestId1=installService(clusterName,serviceName1,true,false);
  List<Stage> stages=actionDB.getAllStages(requestId1);
  Assert.assertEquals(2,stages.get(0).getOrderedHostRoleCommands().get(0).getExecutionCommandWrapper().getExecutionCommand().getConfigurationTags().size());
  installService(clusterName,serviceName2,false,false);
  startService(clusterName,serviceName1,true,false);
  startService(clusterName,serviceName2,true,false);
  configs.clear();
  configs.put("c","d");
  cr3=new ConfigurationRequest(clusterName,"core-site","version122",configs);
  crReq=new ClusterRequest(null,clusterName,null,null);
  crReq.setDesiredConfig(cr3);
  controller.updateClusters(Collections.singleton(crReq),null);
  stopService(clusterName,serviceName1,false,false);
  stopService(clusterName,serviceName2,false,false);
  long requestId2=startService(clusterName,serviceName1,true,true);
  long requestId3=startService(clusterName,serviceName2,true,true);
  stages=actionDB.getAllStages(requestId2);
  stages.addAll(actionDB.getAllStages(requestId3));
  HostRoleCommand hdfsCmdHost3=null;
  HostRoleCommand hdfsCmdHost2=null;
  HostRoleCommand mapRedCmdHost2=null;
  HostRoleCommand mapRedCmdHost3=null;
  for (  Stage stage : stages) {
    List<HostRoleCommand> hrcs=stage.getOrderedHostRoleCommands();
    for (    HostRoleCommand hrc : hrcs) {
      LOG.debug("role: " + hrc.getRole());
      if (hrc.getRole().toString().equals("HDFS_CLIENT")) {
        if (hrc.getHostName().equals(host3))         hdfsCmdHost3=hrc;
 else         if (hrc.getHostName().equals(host2))         hdfsCmdHost2=hrc;
      }
      if (hrc.getRole().toString().equals("MAPREDUCE_CLIENT")) {
        if (hrc.getHostName().equals(host2))         mapRedCmdHost2=hrc;
 else         if (hrc.getHostName().equals(host3))         mapRedCmdHost3=hrc;
      }
    }
  }
  Assert.assertNotNull(hdfsCmdHost3);
  Assert.assertNotNull(hdfsCmdHost2);
  ExecutionCommand execCmd=hdfsCmdHost3.getExecutionCommandWrapper().getExecutionCommand();
  Assert.assertEquals(2,execCmd.getConfigurationTags().size());
  Assert.assertEquals("version122",execCmd.getConfigurationTags().get("core-site").get("tag"));
  Assert.assertEquals("d",execCmd.getConfigurations().get("core-site").get("c"));
  Assert.assertNotNull(mapRedCmdHost2);
  Assert.assertNotNull(mapRedCmdHost3);
  stopService(clusterName,serviceName1,false,false);
  stopService(clusterName,serviceName2,false,false);
  clusters.getHost(host2).setState(HostState.HEARTBEAT_LOST);
  requestId2=startService(clusterName,serviceName1,true,true);
  requestId3=startService(clusterName,serviceName2,true,true);
  stages=actionDB.getAllStages(requestId2);
  stages.addAll(actionDB.getAllStages(requestId3));
  HostRoleCommand clientWithHostDown=null;
  for (  Stage stage : stages) {
    for (    HostRoleCommand hrc : stage.getOrderedHostRoleCommands()) {
      if (hrc.getRole().toString().equals("MAPREDUCE_CLIENT") && hrc.getHostName().equals(host2))       clientWithHostDown=hrc;
    }
  }
  Assert.assertNull(clientWithHostDown);
}
