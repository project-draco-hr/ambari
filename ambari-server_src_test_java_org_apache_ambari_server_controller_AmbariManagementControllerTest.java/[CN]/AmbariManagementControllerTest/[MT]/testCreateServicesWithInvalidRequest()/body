{
  Set<ServiceRequest> set1=new HashSet<ServiceRequest>();
  try {
    set1.clear();
    ServiceRequest rInvalid=new ServiceRequest(null,null,null);
    set1.add(rInvalid);
    ServiceResourceProviderTest.createServices(controller,set1);
    fail("Expected failure for invalid requests");
  }
 catch (  Exception e) {
  }
  try {
    set1.clear();
    ServiceRequest rInvalid=new ServiceRequest("foo",null,null);
    set1.add(rInvalid);
    ServiceResourceProviderTest.createServices(controller,set1);
    fail("Expected failure for invalid requests");
  }
 catch (  Exception e) {
  }
  try {
    set1.clear();
    ServiceRequest rInvalid=new ServiceRequest("foo","bar",null);
    set1.add(rInvalid);
    ServiceResourceProviderTest.createServices(controller,set1);
    fail("Expected failure for invalid cluster");
  }
 catch (  AmbariException e) {
    Assert.assertTrue(checkExceptionType(e,ClusterNotFoundException.class));
  }
  String cluster1=getUniqueName();
  String cluster2=getUniqueName();
  clusters.addCluster(cluster1,new StackId("HDP-0.1"));
  clusters.addCluster(cluster2,new StackId("HDP-0.1"));
  try {
    set1.clear();
    ServiceRequest valid1=new ServiceRequest(cluster1,"HDFS",null);
    ServiceRequest valid2=new ServiceRequest(cluster1,"HDFS",null);
    set1.add(valid1);
    set1.add(valid2);
    ServiceResourceProviderTest.createServices(controller,set1);
    fail("Expected failure for invalid requests");
  }
 catch (  Exception e) {
  }
  try {
    set1.clear();
    ServiceRequest valid1=new ServiceRequest(cluster1,"bar",null);
    set1.add(valid1);
    ServiceResourceProviderTest.createServices(controller,set1);
    fail("Expected failure for invalid service");
  }
 catch (  Exception e) {
  }
  try {
    set1.clear();
    ServiceRequest valid1=new ServiceRequest(cluster1,"HDFS",null);
    ServiceRequest valid2=new ServiceRequest(cluster2,"HDFS",null);
    set1.add(valid1);
    set1.add(valid2);
    ServiceResourceProviderTest.createServices(controller,set1);
    fail("Expected failure for multiple clusters");
  }
 catch (  Exception e) {
  }
  Assert.assertNotNull(clusters.getCluster(cluster1));
  Assert.assertEquals(0,clusters.getCluster(cluster1).getServices().size());
  set1.clear();
  ServiceRequest valid=new ServiceRequest(cluster1,"HDFS",null);
  set1.add(valid);
  ServiceResourceProviderTest.createServices(controller,set1);
  try {
    set1.clear();
    ServiceRequest valid1=new ServiceRequest(cluster1,"HDFS",null);
    ServiceRequest valid2=new ServiceRequest(cluster1,"HDFS",null);
    set1.add(valid1);
    set1.add(valid2);
    ServiceResourceProviderTest.createServices(controller,set1);
    fail("Expected failure for existing service");
  }
 catch (  Exception e) {
  }
  Assert.assertEquals(1,clusters.getCluster(cluster1).getServices().size());
}
