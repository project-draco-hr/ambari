{
  Assert.assertEquals(expectedStageCount,stages.size());
  int prevRoleOrder=-1;
  for (  Stage stage : stages) {
    int currRoleOrder=-1;
    for (    HostRoleCommand command : stage.getOrderedHostRoleCommands()) {
      if (command.getRole() == Role.AMBARI_SERVER_ACTION) {
        Assert.assertTrue(command.toString(),expectedTasks.isTaskExpected(command.getRole()));
        currRoleOrder=expectedTasks.getRoleOrder(command.getRole());
        ExecutionCommand execCommand=command.getExecutionCommandWrapper().getExecutionCommand();
        Assert.assertTrue(execCommand.getRoleParams().containsKey(ServerAction.ACTION_NAME));
        Assert.assertEquals(RoleCommand.EXECUTE,execCommand.getRoleCommand());
      }
 else {
        Assert.assertTrue(command.toString(),expectedTasks.isTaskExpected(command.getRole(),command.getHostName()));
        currRoleOrder=expectedTasks.getRoleOrder(command.getRole());
        ExecutionCommand execCommand=command.getExecutionCommandWrapper().getExecutionCommand();
        Assert.assertTrue(execCommand.getCommandParams().containsKey("source_stack_version"));
        Assert.assertTrue(execCommand.getCommandParams().containsKey("target_stack_version"));
        Assert.assertEquals(RoleCommand.UPGRADE,execCommand.getRoleCommand());
      }
    }
    List<HostRoleCommand> commands=stage.getOrderedHostRoleCommands();
    Assert.assertTrue(commands.size() > 0);
    Role role=commands.get(0).getRole();
    for (    HostRoleCommand command : commands) {
      Assert.assertTrue("All commands must be for the same role",role.equals(command.getRole()));
    }
    Assert.assertTrue("Roles must be in order",currRoleOrder > prevRoleOrder);
    prevRoleOrder=currRoleOrder;
  }
}
