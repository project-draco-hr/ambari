{
  String clusterName="foo1";
  createCluster(clusterName);
  clusters.getCluster(clusterName).setDesiredStackVersion(new StackId("HDP-2.0.7"));
  String serviceName="HBASE";
  createService(clusterName,serviceName,null);
  String componentName1="HBASE_MASTER";
  String componentName2="HBASE_REGIONSERVER";
  createServiceComponent(clusterName,serviceName,componentName1,State.INIT);
  createServiceComponent(clusterName,serviceName,componentName2,State.INIT);
  String host1="h1";
  clusters.addHost(host1);
  clusters.getHost("h1").setOsType("centos5");
  clusters.getHost("h1").setState(HostState.HEALTHY);
  clusters.getHost("h1").persist();
  String host2="h2";
  clusters.addHost(host2);
  clusters.getHost("h2").setOsType("centos6");
  clusters.getHost("h2").setState(HostState.HEALTHY);
  clusters.getHost("h2").persist();
  clusters.mapHostToCluster(host1,clusterName);
  clusters.mapHostToCluster(host2,clusterName);
  createServiceComponentHost(clusterName,serviceName,componentName1,host1,null);
  createServiceComponentHost(clusterName,serviceName,componentName1,host2,null);
  createServiceComponentHost(clusterName,serviceName,componentName2,host1,null);
  createServiceComponentHost(clusterName,serviceName,componentName2,host2,null);
  installService(clusterName,serviceName,false,false);
  startService(clusterName,serviceName,false,false);
  Cluster cluster=clusters.getCluster(clusterName);
  Service s=cluster.getService(serviceName);
  Assert.assertEquals(State.STARTED,s.getDesiredState());
  ServiceComponentHost scHost=s.getServiceComponent("HBASE_REGIONSERVER").getServiceComponentHost("h2");
  Assert.assertEquals(HostComponentAdminState.INSERVICE,scHost.getComponentAdminState());
  Map<String,String> params=new HashMap<String,String>(){
{
      put("excluded_hosts","h2");
    }
  }
;
  ExecuteActionRequest request=new ExecuteActionRequest(clusterName,"DECOMMISSION",null,"HBASE","HBASE_MASTER",null,params);
  Map<String,String> requestProperties=new HashMap<String,String>();
  requestProperties.put(REQUEST_CONTEXT_PROPERTY,"Called from a test");
  RequestStatusResponse response=controller.createAction(request,requestProperties);
  List<HostRoleCommand> storedTasks=actionDB.getRequestTasks(response.getRequestId());
  ExecutionCommand execCmd=storedTasks.get(0).getExecutionCommandWrapper().getExecutionCommand();
  Assert.assertNotNull(storedTasks);
  Assert.assertEquals(1,storedTasks.size());
  Assert.assertEquals(HostComponentAdminState.DECOMMISSIONED,scHost.getComponentAdminState());
  Assert.assertEquals(PassiveState.PASSIVE,scHost.getPassiveState());
  HostRoleCommand command=storedTasks.get(0);
  Assert.assertTrue("DECOMMISSION, Excluded: h2".equals(command.getCommandDetail()));
  Assert.assertTrue("DECOMMISSION".equals(command.getCustomCommandName()));
  Map<String,String> cmdParams=command.getExecutionCommandWrapper().getExecutionCommand().getCommandParams();
  Assert.assertTrue(cmdParams.containsKey("mark_draining_only"));
  Assert.assertEquals("false",cmdParams.get("mark_draining_only"));
  Assert.assertEquals(Role.HBASE_MASTER,command.getRole());
  Assert.assertEquals(RoleCommand.CUSTOM_COMMAND,command.getRoleCommand());
  Map<String,Set<String>> cInfo=execCmd.getClusterHostInfo();
  Assert.assertTrue(cInfo.containsKey("decom_hbase_rs_hosts"));
  Assert.assertTrue(cInfo.get("decom_hbase_rs_hosts").size() == 1);
  Assert.assertEquals("h2",cInfo.get("all_hosts").toArray()[Integer.parseInt(cInfo.get("decom_hbase_rs_hosts").iterator().next())]);
  Assert.assertEquals("DECOMMISSION",execCmd.getHostLevelParams().get("custom_command"));
  s.getServiceComponent("HBASE_REGIONSERVER").getServiceComponentHost("h2").setState(State.INSTALLED);
  params=new HashMap<String,String>(){
{
      put("excluded_hosts","h2");
      put("mark_draining_only","true");
      put("slave_type","HBASE_REGIONSERVER");
    }
  }
;
  request=new ExecuteActionRequest(clusterName,"DECOMMISSION",null,"HBASE","HBASE_MASTER",null,params);
  response=controller.createAction(request,requestProperties);
  storedTasks=actionDB.getRequestTasks(response.getRequestId());
  execCmd=storedTasks.get(0).getExecutionCommandWrapper().getExecutionCommand();
  Assert.assertNotNull(storedTasks);
  Assert.assertEquals(1,storedTasks.size());
  Assert.assertEquals(HostComponentAdminState.DECOMMISSIONED,scHost.getComponentAdminState());
  Assert.assertEquals(PassiveState.PASSIVE,scHost.getPassiveState());
  cInfo=execCmd.getClusterHostInfo();
  Assert.assertTrue(cInfo.containsKey("decom_hbase_rs_hosts"));
  command=storedTasks.get(0);
  Assert.assertEquals("DECOMMISSION",execCmd.getHostLevelParams().get("custom_command"));
  Assert.assertTrue("DECOMMISSION, Excluded: h2".equals(command.getCommandDetail()));
  Assert.assertTrue("DECOMMISSION".equals(command.getCustomCommandName()));
  cmdParams=command.getExecutionCommandWrapper().getExecutionCommand().getCommandParams();
  Assert.assertTrue(cmdParams.containsKey("mark_draining_only"));
  Assert.assertEquals("true",cmdParams.get("mark_draining_only"));
  params=new HashMap<String,String>(){
{
      put("included_hosts","h2");
    }
  }
;
  request=new ExecuteActionRequest(clusterName,"DECOMMISSION",null,"HBASE","HBASE_MASTER",null,params);
  response=controller.createAction(request,requestProperties);
  storedTasks=actionDB.getRequestTasks(response.getRequestId());
  execCmd=storedTasks.get(0).getExecutionCommandWrapper().getExecutionCommand();
  Assert.assertNotNull(storedTasks);
  Assert.assertEquals(1,storedTasks.size());
  Assert.assertEquals(HostComponentAdminState.INSERVICE,scHost.getComponentAdminState());
  Assert.assertEquals(PassiveState.ACTIVE,scHost.getPassiveState());
  command=storedTasks.get(0);
  Assert.assertTrue("DECOMMISSION, Included: h2".equals(command.getCommandDetail()));
  Assert.assertTrue("DECOMMISSION".equals(command.getCustomCommandName()));
  cmdParams=command.getExecutionCommandWrapper().getExecutionCommand().getCommandParams();
  Assert.assertTrue(cmdParams.containsKey("mark_draining_only"));
  Assert.assertEquals("false",cmdParams.get("mark_draining_only"));
  Assert.assertTrue(cmdParams.containsKey("excluded_hosts"));
  Assert.assertEquals("",cmdParams.get("excluded_hosts"));
  Assert.assertEquals(Role.HBASE_MASTER,command.getRole());
  Assert.assertEquals(RoleCommand.CUSTOM_COMMAND,command.getRoleCommand());
  cInfo=execCmd.getClusterHostInfo();
  Assert.assertFalse(cInfo.containsKey("decom_hbase_rs_hosts"));
  Assert.assertEquals("DECOMMISSION",execCmd.getHostLevelParams().get("custom_command"));
}
