{
  String cluster1=getUniqueName();
  createCluster(cluster1);
  clusters.getCluster(cluster1).setDesiredStackVersion(new StackId("HDP-2.0.7"));
  String serviceName="HBASE";
  createService(cluster1,serviceName,null);
  String componentName1="HBASE_MASTER";
  String componentName2="HBASE_REGIONSERVER";
  createServiceComponent(cluster1,serviceName,componentName1,State.INIT);
  createServiceComponent(cluster1,serviceName,componentName2,State.INIT);
  final String host1=getUniqueName();
  final String host2=getUniqueName();
  addHostToCluster(host1,cluster1);
  addHostToCluster(host2,cluster1);
  createServiceComponentHost(cluster1,serviceName,componentName1,host1,null);
  createServiceComponentHost(cluster1,serviceName,componentName1,host2,null);
  createServiceComponentHost(cluster1,serviceName,componentName2,host1,null);
  createServiceComponentHost(cluster1,serviceName,componentName2,host2,null);
  RequestOperationLevel level=new RequestOperationLevel(Resource.Type.HostComponent,cluster1,null,null,null);
  installService(cluster1,serviceName,false,false);
  startService(cluster1,serviceName,false,false);
  Cluster cluster=clusters.getCluster(cluster1);
  Service s=cluster.getService(serviceName);
  Assert.assertEquals(State.STARTED,s.getDesiredState());
  ServiceComponentHost scHost=s.getServiceComponent("HBASE_REGIONSERVER").getServiceComponentHost(host2);
  Assert.assertEquals(HostComponentAdminState.INSERVICE,scHost.getComponentAdminState());
  Map<String,String> params=new HashMap<String,String>(){
{
      put("excluded_hosts",host2);
      put("align_maintenance_state","true");
    }
  }
;
  RequestResourceFilter resourceFilter=new RequestResourceFilter("HBASE","HBASE_MASTER",null);
  List<RequestResourceFilter> resourceFilters=new ArrayList<RequestResourceFilter>();
  resourceFilters.add(resourceFilter);
  ExecuteActionRequest request=new ExecuteActionRequest(cluster1,"DECOMMISSION",null,resourceFilters,level,params,false);
  Map<String,String> requestProperties=new HashMap<String,String>();
  requestProperties.put(REQUEST_CONTEXT_PROPERTY,"Called from a test");
  RequestStatusResponse response=controller.createAction(request,requestProperties);
  List<HostRoleCommand> storedTasks=actionDB.getRequestTasks(response.getRequestId());
  ExecutionCommand execCmd=storedTasks.get(0).getExecutionCommandWrapper().getExecutionCommand();
  Assert.assertNotNull(storedTasks);
  Assert.assertEquals(1,storedTasks.size());
  Assert.assertEquals(HostComponentAdminState.DECOMMISSIONED,scHost.getComponentAdminState());
  Assert.assertEquals(MaintenanceState.ON,scHost.getMaintenanceState());
  HostRoleCommand command=storedTasks.get(0);
  Assert.assertTrue("DECOMMISSION".equals(command.getCustomCommandName()));
  Assert.assertTrue(("DECOMMISSION, Excluded: " + host2).equals(command.getCommandDetail()));
  Map<String,String> cmdParams=command.getExecutionCommandWrapper().getExecutionCommand().getCommandParams();
  Assert.assertTrue(cmdParams.containsKey("mark_draining_only"));
  Assert.assertEquals("false",cmdParams.get("mark_draining_only"));
  Assert.assertEquals(Role.HBASE_MASTER,command.getRole());
  Assert.assertEquals(RoleCommand.CUSTOM_COMMAND,command.getRoleCommand());
  Assert.assertEquals("DECOMMISSION",execCmd.getHostLevelParams().get("custom_command"));
  assertEquals(requestProperties.get(REQUEST_CONTEXT_PROPERTY),response.getRequestContext());
  s.getServiceComponent("HBASE_REGIONSERVER").getServiceComponentHost(host2).setState(State.INSTALLED);
  params=new HashMap<String,String>(){
{
      put("excluded_hosts",host2);
      put("mark_draining_only","true");
      put("slave_type","HBASE_REGIONSERVER");
      put("align_maintenance_state","true");
    }
  }
;
  resourceFilter=new RequestResourceFilter("HBASE","HBASE_MASTER",null);
  ArrayList<RequestResourceFilter> filters=new ArrayList<RequestResourceFilter>();
  filters.add(resourceFilter);
  request=new ExecuteActionRequest(cluster1,"DECOMMISSION",null,filters,level,params,false);
  response=controller.createAction(request,requestProperties);
  storedTasks=actionDB.getRequestTasks(response.getRequestId());
  execCmd=storedTasks.get(0).getExecutionCommandWrapper().getExecutionCommand();
  Assert.assertNotNull(storedTasks);
  Assert.assertEquals(1,storedTasks.size());
  Assert.assertEquals(HostComponentAdminState.DECOMMISSIONED,scHost.getComponentAdminState());
  Assert.assertEquals(MaintenanceState.ON,scHost.getMaintenanceState());
  command=storedTasks.get(0);
  Assert.assertEquals("DECOMMISSION",execCmd.getHostLevelParams().get("custom_command"));
  Assert.assertTrue("DECOMMISSION".equals(command.getCustomCommandName()));
  Assert.assertTrue(("DECOMMISSION, Excluded: " + host2).equals(command.getCommandDetail()));
  cmdParams=command.getExecutionCommandWrapper().getExecutionCommand().getCommandParams();
  Assert.assertTrue(cmdParams.containsKey("mark_draining_only"));
  Assert.assertEquals("true",cmdParams.get("mark_draining_only"));
  assertEquals(requestProperties.get(REQUEST_CONTEXT_PROPERTY),response.getRequestContext());
  params=new HashMap<String,String>(){
{
      put("included_hosts",host2);
    }
  }
;
  request=new ExecuteActionRequest(cluster1,"DECOMMISSION",null,resourceFilters,level,params,false);
  response=controller.createAction(request,requestProperties);
  storedTasks=actionDB.getRequestTasks(response.getRequestId());
  execCmd=storedTasks.get(0).getExecutionCommandWrapper().getExecutionCommand();
  Assert.assertNotNull(storedTasks);
  Assert.assertEquals(1,storedTasks.size());
  Assert.assertEquals(HostComponentAdminState.INSERVICE,scHost.getComponentAdminState());
  Assert.assertEquals(MaintenanceState.ON,scHost.getMaintenanceState());
  command=storedTasks.get(0);
  Assert.assertTrue("DECOMMISSION".equals(command.getCustomCommandName()));
  Assert.assertTrue(("DECOMMISSION, Included: " + host2).equals(command.getCommandDetail()));
  cmdParams=command.getExecutionCommandWrapper().getExecutionCommand().getCommandParams();
  Assert.assertTrue(cmdParams.containsKey("mark_draining_only"));
  Assert.assertEquals("false",cmdParams.get("mark_draining_only"));
  assertEquals(requestProperties.get(REQUEST_CONTEXT_PROPERTY),response.getRequestContext());
  Assert.assertTrue(cmdParams.containsKey("excluded_hosts"));
  Assert.assertEquals("",cmdParams.get("excluded_hosts"));
  Assert.assertEquals(Role.HBASE_MASTER,command.getRole());
  Assert.assertEquals(RoleCommand.CUSTOM_COMMAND,command.getRoleCommand());
  Assert.assertEquals("DECOMMISSION",execCmd.getHostLevelParams().get("custom_command"));
}
