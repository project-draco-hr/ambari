{
  String cluster1=getUniqueName();
  String serviceName="MAPREDUCE";
  String host1=getUniqueName();
  String host2=getUniqueName();
  String componentName="JOBTRACKER";
  StackId currentStackId=new StackId("HDP-0.1");
  Map<String,String> mapRequestProps=new HashMap<String,String>();
  mapRequestProps.put("context","Called from a test");
  createCluster(cluster1);
  Cluster c=clusters.getCluster(cluster1);
  c.setDesiredStackVersion(currentStackId);
  createService(cluster1,serviceName,State.INIT);
  createServiceComponent(cluster1,serviceName,componentName,null);
  addHostToCluster(host1,cluster1);
  addHostToCluster(host2,cluster1);
  createServiceComponentHost(cluster1,null,componentName,host1,null);
  createServiceComponentHost(cluster1,null,componentName,host2,null);
  c.getService(serviceName).setDesiredState(State.INSTALLED);
  c.getService(serviceName).getServiceComponent(componentName).setDesiredState(State.INSTALLED);
  c.getService(serviceName).getServiceComponent(componentName).getServiceComponentHost(host1).setDesiredState(State.INSTALLED);
  c.getService(serviceName).getServiceComponent(componentName).getServiceComponentHost(host2).setDesiredState(State.STARTED);
  c.getService(serviceName).getServiceComponent(componentName).getServiceComponentHost(host1).setState(State.INSTALLED);
  c.getService(serviceName).getServiceComponent(componentName).getServiceComponentHost(host2).setState(State.STARTED);
  c.getService(serviceName).getServiceComponent(componentName).getServiceComponentHost(host1).setStackVersion(currentStackId);
  c.getService(serviceName).getServiceComponent(componentName).getServiceComponentHost(host2).setStackVersion(currentStackId);
  ClusterRequest r=new ClusterRequest(c.getClusterId(),cluster1,"HDP-0.0.1",null);
  try {
    controller.updateClusters(Collections.singleton(r),mapRequestProps);
    fail("Update cluster should fail");
  }
 catch (  AmbariException e) {
    Assert.assertTrue(e.getMessage().contains("must be greater than current version"));
  }
  r=new ClusterRequest(c.getClusterId(),cluster1,"HDPLocal-1.2.2",null);
  try {
    controller.updateClusters(Collections.singleton(r),mapRequestProps);
    fail("Update cluster should fail");
  }
 catch (  AmbariException e) {
    Assert.assertTrue(e.getMessage().contains("Upgrade not possible between different stacks"));
  }
  r=new ClusterRequest(c.getClusterId(),cluster1,"HDP-0.2",null);
  try {
    controller.updateClusters(Collections.singleton(r),mapRequestProps);
    fail("Update cluster should fail");
  }
 catch (  AmbariException e) {
    Assert.assertTrue(e.getMessage().contains("Upgrade needs all services to be stopped"));
    Assert.assertTrue(e.getMessage().contains(serviceName));
  }
  c.getService(serviceName).getServiceComponent(componentName).getServiceComponentHost(host2).setDesiredState(State.INSTALLED);
  r=new ClusterRequest(c.getClusterId(),cluster1,"HDP-0.2",null);
  try {
    controller.updateClusters(Collections.singleton(r),mapRequestProps);
    fail("Update cluster should fail");
  }
 catch (  AmbariException e) {
    Assert.assertTrue(e.getMessage().contains("Upgrade needs all services to be stopped"));
    Assert.assertTrue(e.getMessage().contains(componentName));
  }
  c.getService(serviceName).getServiceComponent(componentName).getServiceComponentHost(host2).setState(State.INSTALLED);
  controller.updateClusters(Collections.singleton(r),mapRequestProps);
  StackId expectedStackId=new StackId("HDP-0.2");
  Assert.assertTrue(expectedStackId.equals(c.getDesiredStackVersion()));
  Assert.assertTrue(expectedStackId.equals(c.getService(serviceName).getDesiredStackVersion()));
  Assert.assertTrue(expectedStackId.equals(c.getService(serviceName).getServiceComponent(componentName).getDesiredStackVersion()));
  Assert.assertTrue(expectedStackId.equals(c.getService(serviceName).getServiceComponent(componentName).getServiceComponentHost(host1).getDesiredStackVersion()));
  Assert.assertTrue(expectedStackId.equals(c.getService(serviceName).getServiceComponent(componentName).getServiceComponentHost(host2).getDesiredStackVersion()));
  Assert.assertTrue(currentStackId.equals(c.getService(serviceName).getServiceComponent(componentName).getServiceComponentHost(host1).getStackVersion()));
  Assert.assertTrue(currentStackId.equals(c.getService(serviceName).getServiceComponent(componentName).getServiceComponentHost(host2).getStackVersion()));
  ServiceComponent sc=c.getService(serviceName).getServiceComponent(componentName);
  Assert.assertEquals(State.UPGRADING,sc.getServiceComponentHost(host1).getState());
  Assert.assertEquals(State.UPGRADING,sc.getServiceComponentHost(host2).getState());
  try {
    controller.updateClusters(Collections.singleton(r),mapRequestProps);
    fail("Update cluster should fail");
  }
 catch (  AmbariException e) {
    Assert.assertTrue(e.getMessage().contains("A prior upgrade request with id"));
  }
  c.getService(serviceName).getServiceComponent(componentName).getServiceComponentHost(host1).setDesiredState(State.INSTALLED);
  c.getService(serviceName).getServiceComponent(componentName).getServiceComponentHost(host2).setDesiredState(State.INSTALLED);
  c.getService(serviceName).getServiceComponent(componentName).getServiceComponentHost(host1).setState(State.INSTALLED);
  c.getService(serviceName).getServiceComponent(componentName).getServiceComponentHost(host2).setState(State.INSTALLED);
  c.setCurrentStackVersion(expectedStackId);
  r=new ClusterRequest(c.getClusterId(),cluster1,"",null);
  controller.updateClusters(Collections.singleton(r),mapRequestProps);
  Assert.assertEquals(State.INSTALLED,sc.getServiceComponentHost(host1).getState());
  Assert.assertEquals(State.INSTALLED,sc.getServiceComponentHost(host2).getState());
  r=new ClusterRequest(c.getClusterId(),cluster1,null,null);
  controller.updateClusters(Collections.singleton(r),mapRequestProps);
  Assert.assertEquals(State.INSTALLED,sc.getServiceComponentHost(host1).getState());
  Assert.assertEquals(State.INSTALLED,sc.getServiceComponentHost(host2).getState());
  r=new ClusterRequest(c.getClusterId(),cluster1,"HDP-0.2",null);
  controller.updateClusters(Collections.singleton(r),mapRequestProps);
  Assert.assertEquals(State.INSTALLED,sc.getServiceComponentHost(host1).getState());
  Assert.assertEquals(State.INSTALLED,sc.getServiceComponentHost(host2).getState());
}
