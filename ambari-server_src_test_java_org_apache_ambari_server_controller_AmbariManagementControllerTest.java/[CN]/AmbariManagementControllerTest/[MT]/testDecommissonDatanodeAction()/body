{
  String cluster1=getUniqueName();
  createCluster(cluster1);
  Cluster cluster=clusters.getCluster(cluster1);
  cluster.setDesiredStackVersion(new StackId("HDP-2.0.7"));
  String serviceName="HDFS";
  createService(cluster1,serviceName,null);
  String componentName1="NAMENODE";
  String componentName2="DATANODE";
  String componentName3="HDFS_CLIENT";
  createServiceComponent(cluster1,serviceName,componentName1,State.INIT);
  createServiceComponent(cluster1,serviceName,componentName2,State.INIT);
  createServiceComponent(cluster1,serviceName,componentName3,State.INIT);
  final String host1="d" + getUniqueName();
  final String host2="e" + getUniqueName();
  addHostToCluster(host1,cluster1);
  addHostToCluster(host2,cluster1);
  createServiceComponentHost(cluster1,serviceName,componentName1,host1,null);
  createServiceComponentHost(cluster1,serviceName,componentName2,host1,null);
  createServiceComponentHost(cluster1,serviceName,componentName2,host2,null);
  createServiceComponentHost(cluster1,serviceName,componentName3,host1,null);
  createServiceComponentHost(cluster1,serviceName,componentName3,host2,null);
  RequestOperationLevel level=new RequestOperationLevel(Resource.Type.HostComponent,cluster1,null,null,null);
  installService(cluster1,serviceName,false,false);
  Map<String,String> configs=new HashMap<String,String>();
  configs.put("a","b");
  ConfigurationRequest cr1;
  cr1=new ConfigurationRequest(cluster1,"hdfs-site","version1",configs,null);
  ClusterRequest crReq=new ClusterRequest(cluster.getClusterId(),cluster1,null,null);
  crReq.setDesiredConfig(Collections.singletonList(cr1));
  controller.updateClusters(Collections.singleton(crReq),null);
  startService(cluster1,serviceName,false,false);
  cluster=clusters.getCluster(cluster1);
  Service s=cluster.getService(serviceName);
  Assert.assertEquals(State.STARTED,s.getDesiredState());
  ServiceComponentHost scHost=s.getServiceComponent("DATANODE").getServiceComponentHost(host2);
  Assert.assertEquals(HostComponentAdminState.INSERVICE,scHost.getComponentAdminState());
  Map<String,String> params=new HashMap<String,String>(){
{
      put("test","test");
      put("excluded_hosts",host2);
      put("align_maintenance_state","true");
    }
  }
;
  RequestResourceFilter resourceFilter=new RequestResourceFilter("HDFS","NAMENODE",null);
  ArrayList<RequestResourceFilter> filters=new ArrayList<RequestResourceFilter>();
  filters.add(resourceFilter);
  ExecuteActionRequest request=new ExecuteActionRequest(cluster1,"DECOMMISSION",null,filters,level,params,false);
  Map<String,String> requestProperties=new HashMap<String,String>();
  requestProperties.put(REQUEST_CONTEXT_PROPERTY,"Called from a test");
  RequestStatusResponse response=controller.createAction(request,requestProperties);
  List<HostRoleCommand> storedTasks=actionDB.getRequestTasks(response.getRequestId());
  ExecutionCommand execCmd=storedTasks.get(0).getExecutionCommandWrapper().getExecutionCommand();
  Assert.assertNotNull(storedTasks);
  Assert.assertNotNull(execCmd.getConfigurationTags().get("hdfs-site"));
  Assert.assertEquals(1,storedTasks.size());
  Assert.assertEquals(HostComponentAdminState.DECOMMISSIONED,scHost.getComponentAdminState());
  Assert.assertEquals(MaintenanceState.ON,scHost.getMaintenanceState());
  HostRoleCommand command=storedTasks.get(0);
  Assert.assertEquals(Role.NAMENODE,command.getRole());
  Assert.assertEquals(RoleCommand.CUSTOM_COMMAND,command.getRoleCommand());
  Assert.assertEquals("DECOMMISSION",execCmd.getHostLevelParams().get("custom_command"));
  Assert.assertEquals(requestProperties.get(REQUEST_CONTEXT_PROPERTY),response.getRequestContext());
  params=new HashMap<String,String>(){
{
      put("test","test");
      put("excluded_hosts",host1);
      put("align_maintenance_state","true");
    }
  }
;
  resourceFilter=new RequestResourceFilter("HDFS","NAMENODE",null);
  filters=new ArrayList<RequestResourceFilter>();
  filters.add(resourceFilter);
  request=new ExecuteActionRequest(cluster1,"DECOMMISSION",null,filters,level,params,false);
  response=controller.createAction(request,requestProperties);
  storedTasks=actionDB.getRequestTasks(response.getRequestId());
  execCmd=storedTasks.get(0).getExecutionCommandWrapper().getExecutionCommand();
  Map<String,String> cmdParams=execCmd.getCommandParams();
  Assert.assertTrue(cmdParams.containsKey("update_exclude_file_only"));
  Assert.assertTrue(cmdParams.get("update_exclude_file_only").equals("false"));
  Assert.assertNotNull(storedTasks);
  Assert.assertEquals(1,storedTasks.size());
  Assert.assertEquals(HostComponentAdminState.DECOMMISSIONED,scHost.getComponentAdminState());
  Assert.assertEquals(MaintenanceState.ON,scHost.getMaintenanceState());
  Assert.assertEquals("DECOMMISSION",execCmd.getHostLevelParams().get("custom_command"));
  Assert.assertEquals(requestProperties.get(REQUEST_CONTEXT_PROPERTY),response.getRequestContext());
  createServiceComponentHost(cluster1,serviceName,componentName1,host2,null);
  ServiceComponentHostRequest r=new ServiceComponentHostRequest(cluster1,serviceName,componentName1,host2,State.INSTALLED.toString());
  Set<ServiceComponentHostRequest> requests=new HashSet<ServiceComponentHostRequest>();
  requests.add(r);
  updateHostComponents(requests,Collections.<String,String>emptyMap(),true);
  s.getServiceComponent(componentName1).getServiceComponentHost(host2).setState(State.INSTALLED);
  r=new ServiceComponentHostRequest(cluster1,serviceName,componentName1,host2,State.STARTED.toString());
  requests.clear();
  requests.add(r);
  updateHostComponents(requests,Collections.<String,String>emptyMap(),true);
  s.getServiceComponent(componentName1).getServiceComponentHost(host2).setState(State.STARTED);
  params=new HashMap<String,String>(){
{
      put("test","test");
      put("included_hosts",host1 + " , " + host2);
      put("align_maintenance_state","true");
    }
  }
;
  resourceFilter=new RequestResourceFilter("HDFS","NAMENODE",null);
  filters=new ArrayList<RequestResourceFilter>();
  filters.add(resourceFilter);
  request=new ExecuteActionRequest(cluster1,"DECOMMISSION",null,filters,level,params,false);
  response=controller.createAction(request,requestProperties);
  storedTasks=actionDB.getRequestTasks(response.getRequestId());
  Assert.assertNotNull(storedTasks);
  scHost=s.getServiceComponent("DATANODE").getServiceComponentHost(host2);
  Assert.assertEquals(HostComponentAdminState.INSERVICE,scHost.getComponentAdminState());
  Assert.assertEquals(MaintenanceState.OFF,scHost.getMaintenanceState());
  execCmd=storedTasks.get(0).getExecutionCommandWrapper().getExecutionCommand();
  Assert.assertNotNull(storedTasks);
  Assert.assertEquals(2,storedTasks.size());
  int countRefresh=0;
  for (  HostRoleCommand hrc : storedTasks) {
    Assert.assertEquals("DECOMMISSION",hrc.getCustomCommandName());
    Assert.assertTrue(hrc.getCommandDetail().contains("DECOMMISSION, Included: "));
    Assert.assertTrue(hrc.getCommandDetail().contains(host1));
    Assert.assertTrue(hrc.getCommandDetail().contains(host2));
    cmdParams=hrc.getExecutionCommandWrapper().getExecutionCommand().getCommandParams();
    if (!cmdParams.containsKey("update_exclude_file_only") || !cmdParams.get("update_exclude_file_only").equals("true")) {
      countRefresh++;
    }
  }
  Assert.assertEquals(2,countRefresh);
  scHost.setComponentAdminState(null);
  Assert.assertEquals(HostComponentAdminState.INSERVICE,scHost.getComponentAdminState());
  Assert.assertEquals(MaintenanceState.OFF,scHost.getMaintenanceState());
  Assert.assertEquals(requestProperties.get(REQUEST_CONTEXT_PROPERTY),response.getRequestContext());
}
