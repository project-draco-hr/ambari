{
  String clusterName="foo1";
  createCluster(clusterName);
  clusters.getCluster(clusterName).setDesiredStackVersion(new StackId("HDP-2.0.7"));
  String serviceName="HDFS";
  createService(clusterName,serviceName,null);
  String componentName1="NAMENODE";
  String componentName2="DATANODE";
  String componentName3="HDFS_CLIENT";
  createServiceComponent(clusterName,serviceName,componentName1,State.INIT);
  createServiceComponent(clusterName,serviceName,componentName2,State.INIT);
  createServiceComponent(clusterName,serviceName,componentName3,State.INIT);
  String host1="h1";
  String host2="h2";
  addHost(host1,clusterName);
  addHost(host2,clusterName);
  createServiceComponentHost(clusterName,serviceName,componentName1,host1,null);
  createServiceComponentHost(clusterName,serviceName,componentName2,host1,null);
  createServiceComponentHost(clusterName,serviceName,componentName2,host2,null);
  createServiceComponentHost(clusterName,serviceName,componentName3,host1,null);
  createServiceComponentHost(clusterName,serviceName,componentName3,host2,null);
  RequestOperationLevel level=new RequestOperationLevel(Resource.Type.HostComponent,clusterName,null,null,null);
  installService(clusterName,serviceName,false,false);
  Map<String,String> configs=new HashMap<String,String>();
  configs.put("a","b");
  ConfigurationRequest cr1;
  cr1=new ConfigurationRequest(clusterName,"hdfs-site","version1",configs,null);
  ClusterRequest crReq=new ClusterRequest(null,clusterName,null,null);
  crReq.setDesiredConfig(Collections.singletonList(cr1));
  controller.updateClusters(Collections.singleton(crReq),null);
  startService(clusterName,serviceName,false,false);
  Cluster cluster=clusters.getCluster(clusterName);
  Service s=cluster.getService(serviceName);
  Assert.assertEquals(State.STARTED,s.getDesiredState());
  ServiceComponentHost scHost=s.getServiceComponent("DATANODE").getServiceComponentHost("h2");
  Assert.assertEquals(HostComponentAdminState.INSERVICE,scHost.getComponentAdminState());
  Map<String,String> params=new HashMap<String,String>(){
{
      put("test","test");
      put("excluded_hosts","h2");
      put("align_maintenance_state","true");
    }
  }
;
  RequestResourceFilter resourceFilter=new RequestResourceFilter("HDFS","NAMENODE",null);
  ArrayList<RequestResourceFilter> filters=new ArrayList<RequestResourceFilter>();
  filters.add(resourceFilter);
  ExecuteActionRequest request=new ExecuteActionRequest(clusterName,"DECOMMISSION",null,filters,level,params,false);
  Map<String,String> requestProperties=new HashMap<String,String>();
  requestProperties.put(REQUEST_CONTEXT_PROPERTY,"Called from a test");
  RequestStatusResponse response=controller.createAction(request,requestProperties);
  List<HostRoleCommand> storedTasks=actionDB.getRequestTasks(response.getRequestId());
  ExecutionCommand execCmd=storedTasks.get(0).getExecutionCommandWrapper().getExecutionCommand();
  Assert.assertNotNull(storedTasks);
  Assert.assertNotNull(execCmd.getConfigurationTags().get("hdfs-site"));
  Assert.assertEquals(1,storedTasks.size());
  Assert.assertEquals(HostComponentAdminState.DECOMMISSIONED,scHost.getComponentAdminState());
  Assert.assertEquals(MaintenanceState.ON,scHost.getMaintenanceState());
  HostRoleCommand command=storedTasks.get(0);
  Assert.assertEquals(Role.NAMENODE,command.getRole());
  Assert.assertEquals(RoleCommand.CUSTOM_COMMAND,command.getRoleCommand());
  Assert.assertEquals("DECOMMISSION",execCmd.getHostLevelParams().get("custom_command"));
  params=new HashMap<String,String>(){
{
      put("test","test");
      put("excluded_hosts","h1");
      put("align_maintenance_state","true");
    }
  }
;
  resourceFilter=new RequestResourceFilter("HDFS","NAMENODE",null);
  filters=new ArrayList<RequestResourceFilter>();
  filters.add(resourceFilter);
  request=new ExecuteActionRequest(clusterName,"DECOMMISSION",null,filters,level,params,false);
  response=controller.createAction(request,requestProperties);
  storedTasks=actionDB.getRequestTasks(response.getRequestId());
  execCmd=storedTasks.get(0).getExecutionCommandWrapper().getExecutionCommand();
  Map<String,String> cmdParams=execCmd.getCommandParams();
  Assert.assertTrue(cmdParams.containsKey("update_exclude_file_only"));
  Assert.assertTrue(cmdParams.get("update_exclude_file_only").equals("false"));
  Assert.assertNotNull(storedTasks);
  Assert.assertEquals(1,storedTasks.size());
  Assert.assertEquals(HostComponentAdminState.DECOMMISSIONED,scHost.getComponentAdminState());
  Assert.assertEquals(MaintenanceState.ON,scHost.getMaintenanceState());
  Assert.assertEquals("DECOMMISSION",execCmd.getHostLevelParams().get("custom_command"));
  createServiceComponentHost(clusterName,serviceName,componentName1,host2,null);
  ServiceComponentHostRequest r=new ServiceComponentHostRequest(clusterName,serviceName,componentName1,host2,State.INSTALLED.toString());
  Set<ServiceComponentHostRequest> requests=new HashSet<ServiceComponentHostRequest>();
  requests.add(r);
  updateHostComponents(requests,Collections.<String,String>emptyMap(),true);
  s.getServiceComponent(componentName1).getServiceComponentHost(host2).setState(State.INSTALLED);
  r=new ServiceComponentHostRequest(clusterName,serviceName,componentName1,host2,State.STARTED.toString());
  requests.clear();
  requests.add(r);
  updateHostComponents(requests,Collections.<String,String>emptyMap(),true);
  s.getServiceComponent(componentName1).getServiceComponentHost(host2).setState(State.STARTED);
  params=new HashMap<String,String>(){
{
      put("test","test");
      put("included_hosts","h1 , h2");
      put("align_maintenance_state","true");
    }
  }
;
  resourceFilter=new RequestResourceFilter("HDFS","NAMENODE",null);
  filters=new ArrayList<RequestResourceFilter>();
  filters.add(resourceFilter);
  request=new ExecuteActionRequest(clusterName,"DECOMMISSION",null,filters,level,params,false);
  response=controller.createAction(request,requestProperties);
  storedTasks=actionDB.getRequestTasks(response.getRequestId());
  Assert.assertNotNull(storedTasks);
  scHost=s.getServiceComponent("DATANODE").getServiceComponentHost("h2");
  Assert.assertEquals(HostComponentAdminState.INSERVICE,scHost.getComponentAdminState());
  Assert.assertEquals(MaintenanceState.OFF,scHost.getMaintenanceState());
  execCmd=storedTasks.get(0).getExecutionCommandWrapper().getExecutionCommand();
  Assert.assertNotNull(storedTasks);
  Assert.assertEquals(2,storedTasks.size());
  int countRefresh=0;
  for (  HostRoleCommand hrc : storedTasks) {
    Assert.assertTrue("DECOMMISSION, Included: h1,h2".equals(hrc.getCommandDetail()));
    Assert.assertTrue("DECOMMISSION".equals(hrc.getCustomCommandName()));
    cmdParams=hrc.getExecutionCommandWrapper().getExecutionCommand().getCommandParams();
    if (!cmdParams.containsKey("update_exclude_file_only") || !cmdParams.get("update_exclude_file_only").equals("true")) {
      countRefresh++;
    }
  }
  Assert.assertEquals(2,countRefresh);
  scHost.setComponentAdminState(null);
  Assert.assertEquals(HostComponentAdminState.INSERVICE,scHost.getComponentAdminState());
  Assert.assertEquals(MaintenanceState.OFF,scHost.getMaintenanceState());
}
