{
  Map<String,String> hostAttributes=null;
  HostRequest r1=new HostRequest("h1",null,hostAttributes);
  r1.toString();
  Set<HostRequest> requests=new HashSet<HostRequest>();
  requests.add(r1);
  try {
    HostResourceProviderTest.createHosts(controller,requests);
    fail("Create host should fail for non-bootstrapped host");
  }
 catch (  Exception e) {
  }
  clusters.addHost("h1");
  clusters.addHost("h2");
  setOsFamily(clusters.getHost("h1"),"redhat","5.9");
  setOsFamily(clusters.getHost("h2"),"redhat","5.9");
  clusters.getHost("h1").persist();
  clusters.getHost("h2").persist();
  requests.add(new HostRequest("h2","foo",new HashMap<String,String>()));
  try {
    HostResourceProviderTest.createHosts(controller,requests);
    fail("Create host should fail for invalid clusters");
  }
 catch (  Exception e) {
  }
  clusters.addCluster("foo",new StackId("HDP-0.1"));
  Cluster c=clusters.getCluster("foo");
  StackId stackId=new StackId("HDP-0.1");
  c.setDesiredStackVersion(stackId);
  c.setCurrentStackVersion(stackId);
  helper.getOrCreateRepositoryVersion(stackId,stackId.getStackVersion());
  c.createClusterVersion(stackId,stackId.getStackVersion(),"admin",RepositoryVersionState.UPGRADING);
  HostResourceProviderTest.createHosts(controller,requests);
  Assert.assertNotNull(clusters.getHost("h1"));
  Assert.assertNotNull(clusters.getHost("h2"));
  Assert.assertEquals(0,clusters.getClustersForHost("h1").size());
  Assert.assertEquals(1,clusters.getClustersForHost("h2").size());
}
