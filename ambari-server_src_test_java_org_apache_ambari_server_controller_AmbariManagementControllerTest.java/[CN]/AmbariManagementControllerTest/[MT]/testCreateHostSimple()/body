{
  String host1=getUniqueName();
  String host2=getUniqueName();
  Map<String,String> hostAttributes=null;
  HostRequest r1=new HostRequest(host1,null,hostAttributes);
  r1.toString();
  Set<HostRequest> requests=new HashSet<HostRequest>();
  requests.add(r1);
  try {
    HostResourceProviderTest.createHosts(controller,requests);
    fail("Create host should fail for non-bootstrapped host");
  }
 catch (  Exception e) {
  }
  clusters.addHost(host1);
  clusters.addHost(host2);
  setOsFamily(clusters.getHost(host1),"redhat","5.9");
  setOsFamily(clusters.getHost(host2),"redhat","5.9");
  clusters.getHost(host1).persist();
  clusters.getHost(host2).persist();
  requests.add(new HostRequest(host2,"foo",new HashMap<String,String>()));
  try {
    HostResourceProviderTest.createHosts(controller,requests);
    fail("Create host should fail for invalid clusters");
  }
 catch (  Exception e) {
  }
  clusters.addCluster("foo",new StackId("HDP-0.1"));
  Cluster c=clusters.getCluster("foo");
  StackId stackId=new StackId("HDP-0.1");
  c.setDesiredStackVersion(stackId);
  c.setCurrentStackVersion(stackId);
  helper.getOrCreateRepositoryVersion(stackId,stackId.getStackVersion());
  c.createClusterVersion(stackId,stackId.getStackVersion(),"admin",RepositoryVersionState.INSTALLING);
  HostResourceProviderTest.createHosts(controller,requests);
  Assert.assertNotNull(clusters.getHost(host1));
  Assert.assertNotNull(clusters.getHost(host2));
  Assert.assertEquals(0,clusters.getClustersForHost(host1).size());
  Assert.assertEquals(1,clusters.getClustersForHost(host2).size());
}
