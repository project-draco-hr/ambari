{
  String clusterName="foo1";
  createCluster(clusterName);
  Cluster cluster=clusters.getCluster(clusterName);
  cluster.setDesiredStackVersion(new StackId("HDP-0.1"));
  String serviceName="HDFS";
  createService(clusterName,serviceName,null);
  String componentName1="NAMENODE";
  String componentName2="DATANODE";
  String componentName3="HDFS_CLIENT";
  createServiceComponent(clusterName,serviceName,componentName1,State.INIT);
  createServiceComponent(clusterName,serviceName,componentName2,State.INIT);
  createServiceComponent(clusterName,serviceName,componentName3,State.INIT);
  String host1="h1";
  clusters.addHost(host1);
  clusters.getHost("h1").setOsType("centos5");
  clusters.getHost("h1").persist();
  String host2="h2";
  clusters.addHost(host2);
  clusters.getHost("h2").setOsType("centos6");
  clusters.getHost("h2").persist();
  String host3="h3";
  clusters.mapHostToCluster(host1,clusterName);
  createServiceComponentHost(clusterName,null,componentName1,host1,null);
  createServiceComponentHost(clusterName,serviceName,componentName2,host1,null);
  createServiceComponentHost(clusterName,serviceName,componentName3,host1,null);
  installService(clusterName,serviceName,false,false);
  Map<String,ServiceComponentHost> hostComponents=cluster.getService(serviceName).getServiceComponent(componentName1).getServiceComponentHosts();
  for (  Map.Entry<String,ServiceComponentHost> entry : hostComponents.entrySet()) {
    ServiceComponentHost cHost=entry.getValue();
    cHost.handleEvent(new ServiceComponentHostInstallEvent(cHost.getServiceComponentName(),cHost.getHostName(),System.currentTimeMillis(),cluster.getDesiredStackVersion().getStackId()));
    cHost.handleEvent(new ServiceComponentHostOpSucceededEvent(cHost.getServiceComponentName(),cHost.getHostName(),System.currentTimeMillis()));
  }
  hostComponents=cluster.getService(serviceName).getServiceComponent(componentName2).getServiceComponentHosts();
  for (  Map.Entry<String,ServiceComponentHost> entry : hostComponents.entrySet()) {
    ServiceComponentHost cHost=entry.getValue();
    cHost.handleEvent(new ServiceComponentHostInstallEvent(cHost.getServiceComponentName(),cHost.getHostName(),System.currentTimeMillis(),cluster.getDesiredStackVersion().getStackId()));
    cHost.handleEvent(new ServiceComponentHostOpSucceededEvent(cHost.getServiceComponentName(),cHost.getHostName(),System.currentTimeMillis()));
  }
  Set<HostRequest> requests=new HashSet<HostRequest>();
  requests.clear();
  requests.add(new HostRequest(host1,clusterName,null));
  try {
    controller.deleteHosts(requests);
    fail("Expect failure deleting hosts when components exist.");
  }
 catch (  Exception e) {
  }
  Set<ServiceComponentHostRequest> schRequests=new HashSet<ServiceComponentHostRequest>();
  schRequests.add(new ServiceComponentHostRequest(clusterName,serviceName,componentName1,host1,null,"MAINTENANCE"));
  schRequests.add(new ServiceComponentHostRequest(clusterName,serviceName,componentName2,host1,null,"MAINTENANCE"));
  controller.updateHostComponents(schRequests,new HashMap<String,String>(),false);
  schRequests.clear();
  schRequests.add(new ServiceComponentHostRequest(clusterName,serviceName,componentName1,host1,null,null));
  schRequests.add(new ServiceComponentHostRequest(clusterName,serviceName,componentName2,host1,null,null));
  schRequests.add(new ServiceComponentHostRequest(clusterName,serviceName,componentName3,host1,null,null));
  controller.deleteHostComponents(schRequests);
  Assert.assertEquals(0,cluster.getServiceComponentHosts(host1).size());
  requests.clear();
  requests.add(new HostRequest(host1,null,null));
  try {
    controller.deleteHosts(requests);
    fail("Expect failure when removing from host when it is part of a cluster.");
  }
 catch (  Exception e) {
  }
  requests.clear();
  requests.add(new HostRequest(host1,clusterName,null));
  controller.deleteHosts(requests);
  Assert.assertFalse(clusters.getHostsForCluster(clusterName).containsKey(host1));
  Assert.assertFalse(clusters.getClustersForHost(host1).contains(cluster));
  requests.clear();
  requests.add(new HostRequest(host1,null,null));
  controller.deleteHosts(requests);
  try {
    clusters.getHost(host1);
    Assert.fail("Expected a HostNotFoundException.");
  }
 catch (  HostNotFoundException e) {
  }
  requests.clear();
  requests.add(new HostRequest(host2,null,null));
  controller.deleteHosts(requests);
  try {
    clusters.getHost(host2);
    Assert.fail("Expected a HostNotFoundException.");
  }
 catch (  HostNotFoundException e) {
  }
  requests.clear();
  requests.add(new HostRequest(host3,null,null));
  try {
    controller.deleteHosts(requests);
    Assert.fail("Expected a HostNotFoundException trying to remove a host that was never added.");
  }
 catch (  HostNotFoundException e) {
  }
}
