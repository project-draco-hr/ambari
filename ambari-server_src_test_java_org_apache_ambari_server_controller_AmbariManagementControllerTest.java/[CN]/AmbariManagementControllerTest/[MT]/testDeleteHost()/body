{
  String cluster1=getUniqueName();
  createCluster(cluster1);
  Cluster cluster=clusters.getCluster(cluster1);
  cluster.setDesiredStackVersion(new StackId("HDP-0.1"));
  String serviceName="HDFS";
  createService(cluster1,serviceName,null);
  String componentName1="NAMENODE";
  String componentName2="DATANODE";
  String componentName3="HDFS_CLIENT";
  createServiceComponent(cluster1,serviceName,componentName1,State.INIT);
  createServiceComponent(cluster1,serviceName,componentName2,State.INIT);
  createServiceComponent(cluster1,serviceName,componentName3,State.INIT);
  String host1=getUniqueName();
  String host2=getUniqueName();
  addHostToCluster(host1,cluster1);
  addHostToCluster(host2,cluster1);
  String host3=getUniqueName();
  createServiceComponentHost(cluster1,serviceName,componentName1,host1,null);
  createServiceComponentHost(cluster1,serviceName,componentName2,host1,null);
  createServiceComponentHost(cluster1,serviceName,componentName3,host1,null);
  installService(cluster1,serviceName,false,false);
  Map<String,ServiceComponentHost> hostComponents=cluster.getService(serviceName).getServiceComponent(componentName1).getServiceComponentHosts();
  for (  Map.Entry<String,ServiceComponentHost> entry : hostComponents.entrySet()) {
    ServiceComponentHost cHost=entry.getValue();
    cHost.handleEvent(new ServiceComponentHostInstallEvent(cHost.getServiceComponentName(),cHost.getHostName(),System.currentTimeMillis(),cluster.getDesiredStackVersion().getStackId()));
    cHost.handleEvent(new ServiceComponentHostOpSucceededEvent(cHost.getServiceComponentName(),cHost.getHostName(),System.currentTimeMillis()));
  }
  hostComponents=cluster.getService(serviceName).getServiceComponent(componentName2).getServiceComponentHosts();
  for (  Map.Entry<String,ServiceComponentHost> entry : hostComponents.entrySet()) {
    ServiceComponentHost cHost=entry.getValue();
    cHost.handleEvent(new ServiceComponentHostInstallEvent(cHost.getServiceComponentName(),cHost.getHostName(),System.currentTimeMillis(),cluster.getDesiredStackVersion().getStackId()));
    cHost.handleEvent(new ServiceComponentHostOpSucceededEvent(cHost.getServiceComponentName(),cHost.getHostName(),System.currentTimeMillis()));
  }
  Set<HostRequest> requests=new HashSet<HostRequest>();
  requests.clear();
  requests.add(new HostRequest(host1,cluster1,null));
  try {
    HostResourceProviderTest.deleteHosts(controller,requests);
    fail("Expect failure deleting hosts when components exist and have not been deleted.");
  }
 catch (  Exception e) {
  }
  Set<ServiceComponentHostRequest> schRequests=new HashSet<ServiceComponentHostRequest>();
  schRequests.add(new ServiceComponentHostRequest(cluster1,serviceName,componentName1,host1,"DISABLED"));
  schRequests.add(new ServiceComponentHostRequest(cluster1,serviceName,componentName2,host1,"DISABLED"));
  updateHostComponents(schRequests,new HashMap<String,String>(),false);
  schRequests.clear();
  schRequests.add(new ServiceComponentHostRequest(cluster1,serviceName,componentName1,host1,null));
  schRequests.add(new ServiceComponentHostRequest(cluster1,serviceName,componentName2,host1,null));
  schRequests.add(new ServiceComponentHostRequest(cluster1,serviceName,componentName3,host1,null));
  controller.deleteHostComponents(schRequests);
  Assert.assertEquals(0,cluster.getServiceComponentHosts(host1).size());
  Assert.assertNull(topologyHostInfoDAO.findByHostname(host1));
  requests.clear();
  requests.add(new HostRequest(host1,null,null));
  try {
    HostResourceProviderTest.deleteHosts(controller,requests);
  }
 catch (  Exception e) {
    fail("Did not expect an error deleting the host from the cluster. Error: " + e.getMessage());
  }
  Assert.assertFalse(clusters.getHostsForCluster(cluster1).containsKey(host1));
  Assert.assertFalse(clusters.getClustersForHost(host1).contains(cluster));
  Assert.assertNull(topologyHostInfoDAO.findByHostname(host1));
  requests.clear();
  requests.add(new HostRequest(host2,cluster1,null));
  try {
    HostResourceProviderTest.deleteHosts(controller,requests);
  }
 catch (  Exception e) {
    fail("Did not expect an error deleting the host from the cluster. Error: " + e.getMessage());
  }
  Assert.assertFalse(clusters.getHostsForCluster(cluster1).containsKey(host2));
  Assert.assertFalse(clusters.getClustersForHost(host2).contains(cluster));
  Assert.assertNull(topologyHostInfoDAO.findByHostname(host2));
  requests.clear();
  requests.add(new HostRequest(host1,null,null));
  try {
    HostResourceProviderTest.deleteHosts(controller,requests);
    Assert.fail("Expected a HostNotFoundException trying to remove a host that was already deleted.");
  }
 catch (  HostNotFoundException e) {
  }
  try {
    clusters.getHost(host1);
    Assert.fail("Expected a HostNotFoundException.");
  }
 catch (  HostNotFoundException e) {
  }
  requests.clear();
  requests.add(new HostRequest(host3,null,null));
  try {
    HostResourceProviderTest.deleteHosts(controller,requests);
    Assert.fail("Expected a HostNotFoundException trying to remove a host that was never added.");
  }
 catch (  HostNotFoundException e) {
  }
}
