{
  String clusterName="foo1";
  createCluster(clusterName);
  clusters.getCluster(clusterName).setDesiredStackVersion(new StackId("HDP-0.1"));
  String serviceName="HDFS";
  createService(clusterName,serviceName,null);
  String componentName1="NAMENODE";
  String componentName2="DATANODE";
  String componentName3="HDFS_CLIENT";
  createServiceComponent(clusterName,serviceName,componentName1,State.INIT);
  createServiceComponent(clusterName,serviceName,componentName2,State.INIT);
  createServiceComponent(clusterName,serviceName,componentName3,State.INIT);
  String host1="h1";
  String host2="h2";
  addHost(host1,clusterName);
  addHost(host2,clusterName);
  Map<String,String> mapRequestProps=new HashMap<String,String>();
  mapRequestProps.put("context","Called from a test");
  createServiceComponentHost(clusterName,null,componentName1,host1,null);
  createServiceComponentHost(clusterName,serviceName,componentName2,host1,null);
  createServiceComponentHost(clusterName,serviceName,componentName2,host2,null);
  createServiceComponentHost(clusterName,serviceName,componentName3,host1,null);
  createServiceComponentHost(clusterName,serviceName,componentName3,host2,null);
  Assert.assertNotNull(clusters.getCluster(clusterName).getService(serviceName).getServiceComponent(componentName1).getServiceComponentHost(host1));
  Assert.assertNotNull(clusters.getCluster(clusterName).getService(serviceName).getServiceComponent(componentName2).getServiceComponentHost(host1));
  Assert.assertNotNull(clusters.getCluster(clusterName).getService(serviceName).getServiceComponent(componentName2).getServiceComponentHost(host2));
  Assert.assertNotNull(clusters.getCluster(clusterName).getService(serviceName).getServiceComponent(componentName3).getServiceComponentHost(host1));
  Assert.assertNotNull(clusters.getCluster(clusterName).getService(serviceName).getServiceComponent(componentName3).getServiceComponentHost(host2));
  ServiceRequest r=new ServiceRequest(clusterName,serviceName,State.INSTALLED.toString());
  Set<ServiceRequest> requests=new HashSet<ServiceRequest>();
  requests.add(r);
  ServiceResourceProviderTest.updateServices(controller,requests,mapRequestProps,true,false);
  Assert.assertEquals(State.INSTALLED,clusters.getCluster(clusterName).getService(serviceName).getDesiredState());
  for (  ServiceComponentHost sch : clusters.getCluster(clusterName).getServiceComponentHosts(host1)) {
    sch.setState(State.INSTALLED);
  }
  for (  ServiceComponentHost sch : clusters.getCluster(clusterName).getServiceComponentHosts(host2)) {
    sch.setState(State.UNKNOWN);
  }
  ServiceComponentHostRequest schr=new ServiceComponentHostRequest(clusterName,"HDFS","DATANODE",host2,"INSTALLED");
  Map<String,String> requestProps=new HashMap<String,String>();
  requestProps.put("datanode","dn_value");
  requestProps.put("namenode","nn_value");
  RequestStatusResponse rsr=updateHostComponents(Collections.singleton(schr),requestProps,false);
  List<Stage> stages=actionDB.getAllStages(rsr.getRequestId());
  Assert.assertEquals(1,stages.size());
  Stage stage=stages.iterator().next();
  List<ExecutionCommandWrapper> execWrappers=stage.getExecutionCommands(host2);
  Assert.assertEquals(1,execWrappers.size());
  ExecutionCommandWrapper execWrapper=execWrappers.iterator().next();
  Assert.assertTrue(execWrapper.getExecutionCommand().getCommandParams().containsKey("datanode"));
  Assert.assertFalse(execWrapper.getExecutionCommand().getCommandParams().containsKey("namendode"));
  for (  ServiceComponentHost sch : clusters.getCluster(clusterName).getServiceComponentHosts(host2)) {
    Assert.assertEquals(State.UNKNOWN,sch.getState());
  }
}
