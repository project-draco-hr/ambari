{
  String clusterName="foo1";
  createCluster(clusterName);
  clusters.getCluster(clusterName).setDesiredStackVersion(new StackId("HDP-2.0.7"));
  String serviceName="HDFS";
  createService(clusterName,serviceName,null);
  String componentName1="NAMENODE";
  String componentName2="DATANODE";
  String componentName3="HDFS_CLIENT";
  createServiceComponent(clusterName,serviceName,componentName1,State.INIT);
  createServiceComponent(clusterName,serviceName,componentName2,State.INIT);
  createServiceComponent(clusterName,serviceName,componentName3,State.INIT);
  String host1="h1";
  String host2="h2";
  addHost(host1,clusterName);
  addHost(host2,clusterName);
  createServiceComponentHost(clusterName,serviceName,componentName1,host1,null);
  createServiceComponentHost(clusterName,serviceName,componentName2,host1,null);
  createServiceComponentHost(clusterName,serviceName,componentName2,host2,null);
  createServiceComponentHost(clusterName,serviceName,componentName3,host1,null);
  createServiceComponentHost(clusterName,serviceName,componentName3,host2,null);
  installService(clusterName,serviceName,false,false);
  Map<String,String> configs=new HashMap<String,String>();
  configs.put("a","b");
  ConfigurationRequest cr1, cr2;
  cr1=new ConfigurationRequest(clusterName,"hdfs-site","version1",configs,null);
  ClusterRequest crReq=new ClusterRequest(null,clusterName,null,null);
  crReq.setDesiredConfig(Collections.singletonList(cr1));
  controller.updateClusters(Collections.singleton(crReq),null);
  startService(clusterName,serviceName,false,false);
  configs=new HashMap<String,String>();
  configs.put("a","c");
  final Config config=new ConfigImpl("hdfs-site");
  config.setProperties(configs);
  config.setTag("version122");
  Long groupId=createConfigGroup(clusters.getCluster(clusterName),"g1","t1",new ArrayList<String>(){
{
      add("h1");
      add("h2");
    }
  }
,new ArrayList<Config>(){
{
      add(config);
    }
  }
);
  Assert.assertNotNull(groupId);
  Cluster cluster=clusters.getCluster(clusterName);
  Service s=cluster.getService(serviceName);
  Assert.assertEquals(State.STARTED,s.getDesiredState());
  Map<String,String> params=new HashMap<String,String>(){
{
      put("test","test");
      put("excluded_hosts"," h1 ");
    }
  }
;
  RequestResourceFilter resourceFilter=new RequestResourceFilter("HDFS","NAMENODE",null);
  ExecuteActionRequest request=new ExecuteActionRequest(clusterName,"DECOMMISSION",params,false);
  request.getResourceFilters().add(resourceFilter);
  Map<String,String> requestProperties=new HashMap<String,String>();
  requestProperties.put(REQUEST_CONTEXT_PROPERTY,"Called from a test");
  RequestStatusResponse response=controller.createAction(request,requestProperties);
  List<HostRoleCommand> storedTasks=actionDB.getRequestTasks(response.getRequestId());
  ExecutionCommand execCmd=storedTasks.get(0).getExecutionCommandWrapper().getExecutionCommand();
  Assert.assertNotNull(storedTasks);
  Assert.assertNotNull(execCmd.getConfigurationTags().get("hdfs-site"));
  Assert.assertEquals(1,storedTasks.size());
  HostRoleCommand command=storedTasks.get(0);
  Assert.assertEquals(Role.NAMENODE,command.getRole());
  Assert.assertEquals(RoleCommand.CUSTOM_COMMAND,command.getRoleCommand());
  Assert.assertEquals("DECOMMISSION",execCmd.getHostLevelParams().get("custom_command"));
}
