{
  String cluster1=getUniqueName();
  createCluster(cluster1);
  clusters.getCluster(cluster1).setDesiredStackVersion(new StackId("HDP-0.1"));
  String serviceName1="HDFS";
  String serviceName2="MAPREDUCE";
  createService(cluster1,serviceName1,null);
  createService(cluster1,serviceName2,null);
  String componentName1_1="NAMENODE";
  String componentName1_2="DATANODE";
  String componentName1_3="HDFS_CLIENT";
  createServiceComponent(cluster1,serviceName1,componentName1_1,State.INIT);
  createServiceComponent(cluster1,serviceName1,componentName1_2,State.INIT);
  createServiceComponent(cluster1,serviceName1,componentName1_3,State.INIT);
  String componentName2_1="JOBTRACKER";
  String componentName2_2="TASKTRACKER";
  createServiceComponent(cluster1,serviceName2,componentName2_1,State.INIT);
  createServiceComponent(cluster1,serviceName2,componentName2_2,State.INIT);
  String host1=getUniqueName();
  String host2=getUniqueName();
  addHostToCluster(host1,cluster1);
  addHostToCluster(host2,cluster1);
  createServiceComponentHost(cluster1,serviceName1,componentName1_1,host1,null);
  createServiceComponentHost(cluster1,serviceName1,componentName1_2,host1,null);
  createServiceComponentHost(cluster1,serviceName1,componentName1_2,host2,null);
  createServiceComponentHost(cluster1,serviceName2,componentName2_1,host1,null);
  createServiceComponentHost(cluster1,serviceName2,componentName2_2,host2,null);
  MaintenanceStateHelper maintenanceStateHelper=MaintenanceStateHelperTest.getMaintenanceStateHelperInstance(clusters);
  installService(cluster1,serviceName1,false,false,maintenanceStateHelper,null);
  installService(cluster1,serviceName2,false,false,maintenanceStateHelper,null);
  startService(cluster1,serviceName1,false,false,maintenanceStateHelper);
  startService(cluster1,serviceName2,false,false,maintenanceStateHelper);
  Map<String,String> requestProperties=new HashMap<String,String>();
  requestProperties.put("context","Called from a test");
  Cluster cluster=clusters.getCluster(cluster1);
  for (  Service service : cluster.getServices().values()) {
    Assert.assertEquals(State.STARTED,service.getDesiredState());
  }
  Service service2=cluster.getService(serviceName2);
  service2.setMaintenanceState(MaintenanceState.ON);
  Set<ServiceRequest> srs=new HashSet<ServiceRequest>();
  srs.add(new ServiceRequest(cluster1,serviceName1,State.INSTALLED.name()));
  srs.add(new ServiceRequest(cluster1,serviceName2,State.INSTALLED.name()));
  RequestStatusResponse rsr=ServiceResourceProviderTest.updateServices(controller,srs,requestProperties,false,false,maintenanceStateHelper);
  for (  ShortTaskStatus sts : rsr.getTasks()) {
    String role=sts.getRole();
    Assert.assertFalse(role.equals(componentName2_1));
    Assert.assertFalse(role.equals(componentName2_2));
  }
  for (  Service service : cluster.getServices().values()) {
    if (service.getName().equals(serviceName2)) {
      Assert.assertEquals(State.STARTED,service.getDesiredState());
    }
 else {
      Assert.assertEquals(State.INSTALLED,service.getDesiredState());
    }
  }
  service2.setMaintenanceState(MaintenanceState.OFF);
  ServiceResourceProviderTest.updateServices(controller,srs,requestProperties,false,false,maintenanceStateHelper);
  for (  Service service : cluster.getServices().values()) {
    Assert.assertEquals(State.INSTALLED,service.getDesiredState());
  }
  startService(cluster1,serviceName1,false,false,maintenanceStateHelper);
  startService(cluster1,serviceName2,false,false,maintenanceStateHelper);
  Host h1=clusters.getHost(host1);
  h1.setMaintenanceState(cluster.getClusterId(),MaintenanceState.ON);
  srs=new HashSet<ServiceRequest>();
  srs.add(new ServiceRequest(cluster1,serviceName1,State.INSTALLED.name()));
  srs.add(new ServiceRequest(cluster1,serviceName2,State.INSTALLED.name()));
  rsr=ServiceResourceProviderTest.updateServices(controller,srs,requestProperties,false,false,maintenanceStateHelper);
  for (  ShortTaskStatus sts : rsr.getTasks()) {
    Assert.assertFalse(sts.getHostName().equals(host1));
  }
  h1.setMaintenanceState(cluster.getClusterId(),MaintenanceState.OFF);
  startService(cluster1,serviceName2,false,false,maintenanceStateHelper);
  service2.setMaintenanceState(MaintenanceState.ON);
  ServiceRequest sr=new ServiceRequest(cluster1,serviceName2,State.INSTALLED.name());
  rsr=ServiceResourceProviderTest.updateServices(controller,Collections.singleton(sr),requestProperties,false,false,maintenanceStateHelper);
  Assert.assertTrue("Service start request defaults to Cluster operation level," + "command does not create tasks",rsr == null || rsr.getTasks().size() == 0);
}
