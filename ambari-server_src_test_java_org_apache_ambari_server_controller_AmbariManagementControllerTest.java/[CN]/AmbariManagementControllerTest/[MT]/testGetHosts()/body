{
  setupClusterWithHosts("c1","HDP-0.2",new ArrayList<String>(){
{
      add("h1");
      add("h2");
    }
  }
,"centos5");
  setupClusterWithHosts("c2","HDP-0.2",new ArrayList<String>(){
{
      add("h3");
    }
  }
,"centos5");
  clusters.addHost("h4");
  setOsFamily(clusters.getHost("h4"),"redhat","5.9");
  clusters.getHost("h4").persist();
  Map<String,String> attrs=new HashMap<String,String>();
  attrs.put("a1","b1");
  clusters.getHost("h3").setHostAttributes(attrs);
  attrs.put("a2","b2");
  clusters.getHost("h4").setHostAttributes(attrs);
  HostRequest r=new HostRequest(null,null,null);
  Set<HostResponse> resps=HostResourceProviderTest.getHosts(controller,Collections.singleton(r));
  Assert.assertEquals(4,resps.size());
  Set<String> foundHosts=new HashSet<String>();
  for (  HostResponse resp : resps) {
    foundHosts.add(resp.getHostname());
    if (resp.getHostname().equals("h1")) {
      Assert.assertEquals("c1",resp.getClusterName());
      Assert.assertEquals(2,resp.getHostAttributes().size());
    }
 else     if (resp.getHostname().equals("h2")) {
      Assert.assertEquals("c1",resp.getClusterName());
      Assert.assertEquals(2,resp.getHostAttributes().size());
    }
 else     if (resp.getHostname().equals("h3")) {
      Assert.assertEquals("c2",resp.getClusterName());
      Assert.assertEquals(3,resp.getHostAttributes().size());
    }
 else     if (resp.getHostname().equals("h4")) {
      Assert.assertEquals("",resp.getClusterName());
      Assert.assertEquals(4,resp.getHostAttributes().size());
    }
 else {
      fail("Found invalid host");
    }
  }
  Assert.assertEquals(4,foundHosts.size());
  r=new HostRequest("h1",null,null);
  resps=HostResourceProviderTest.getHosts(controller,Collections.singleton(r));
  Assert.assertEquals(1,resps.size());
  HostResponse resp=resps.iterator().next();
  Assert.assertEquals("h1",resp.getHostname());
  Assert.assertEquals("c1",resp.getClusterName());
  Assert.assertEquals(2,resp.getHostAttributes().size());
}
