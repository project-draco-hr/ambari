{
  final String host1="h1";
  final String host2="h2";
  String clusterName="foo1";
  setupClusterWithHosts(clusterName,"HDP-2.0.7",new ArrayList<String>(){
{
      add(host1);
      add(host2);
    }
  }
,"centos5");
  String serviceName="HDFS";
  createService(clusterName,serviceName,null);
  String componentName1="NAMENODE";
  String componentName2="DATANODE";
  String componentName3="HDFS_CLIENT";
  createServiceComponent(clusterName,serviceName,componentName1,State.INIT);
  createServiceComponent(clusterName,serviceName,componentName2,State.INIT);
  createServiceComponent(clusterName,serviceName,componentName3,State.INIT);
  createServiceComponentHost(clusterName,serviceName,componentName1,host1,null);
  createServiceComponentHost(clusterName,serviceName,componentName2,host1,null);
  createServiceComponentHost(clusterName,serviceName,componentName3,host1,null);
  createServiceComponentHost(clusterName,serviceName,componentName2,host2,null);
  createServiceComponentHost(clusterName,serviceName,componentName3,host2,null);
  installService(clusterName,serviceName,false,false);
  startService(clusterName,serviceName,false,false);
  Service s1=clusters.getCluster(clusterName).getService(serviceName);
  s1.getServiceComponent(componentName2).getServiceComponentHost(host1).setComponentAdminState(HostComponentAdminState.DECOMMISSIONED);
  s1.getServiceComponent(componentName2).getServiceComponentHost(host2).setComponentAdminState(HostComponentAdminState.INSERVICE);
  ServiceComponentHostRequest r=new ServiceComponentHostRequest(clusterName,null,null,null,null);
  Set<ServiceComponentHostResponse> resps=controller.getHostComponents(Collections.singleton(r));
  Assert.assertEquals(5,resps.size());
  r=new ServiceComponentHostRequest(clusterName,null,null,null,null);
  r.setAdminState("DECOMMISSIONED");
  resps=controller.getHostComponents(Collections.singleton(r));
  Assert.assertEquals(1,resps.size());
  r=new ServiceComponentHostRequest(clusterName,null,null,null,null);
  r.setAdminState("INSERVICE");
  resps=controller.getHostComponents(Collections.singleton(r));
  Assert.assertEquals(1,resps.size());
  r=new ServiceComponentHostRequest(clusterName,null,null,null,null);
  r.setAdminState("INSTALLED");
  resps=controller.getHostComponents(Collections.singleton(r));
  Assert.assertEquals(0,resps.size());
  r=new ServiceComponentHostRequest(clusterName,"HDFS","DATANODE",host2,null);
  r.setAdminState("DECOMMISSIONED");
  try {
    updateHostComponents(Collections.singleton(r),new HashMap<String,String>(),false);
    Assert.fail("Must throw exception when decommission attribute is updated.");
  }
 catch (  IllegalArgumentException ex) {
    Assert.assertTrue(ex.getMessage().contains("Property adminState cannot be modified through update"));
  }
}
