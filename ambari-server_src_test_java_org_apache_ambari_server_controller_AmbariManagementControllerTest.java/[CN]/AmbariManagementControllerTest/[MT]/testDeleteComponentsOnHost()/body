{
  String cluster1=getUniqueName();
  createCluster(cluster1);
  Cluster cluster=clusters.getCluster(cluster1);
  cluster.setDesiredStackVersion(new StackId("HDP-0.1"));
  String serviceName="HDFS";
  createService(cluster1,serviceName,null);
  String componentName1="NAMENODE";
  String componentName2="DATANODE";
  String componentName3="HDFS_CLIENT";
  createServiceComponent(cluster1,serviceName,componentName1,State.INIT);
  createServiceComponent(cluster1,serviceName,componentName2,State.INIT);
  createServiceComponent(cluster1,serviceName,componentName3,State.INIT);
  String host1=getUniqueName();
  addHostToCluster(host1,cluster1);
  createServiceComponentHost(cluster1,null,componentName1,host1,null);
  createServiceComponentHost(cluster1,serviceName,componentName2,host1,null);
  createServiceComponentHost(cluster1,serviceName,componentName3,host1,null);
  installService(cluster1,serviceName,false,false);
  Map<String,ServiceComponentHost> hostComponents=cluster.getService(serviceName).getServiceComponent(componentName1).getServiceComponentHosts();
  for (  Map.Entry<String,ServiceComponentHost> entry : hostComponents.entrySet()) {
    ServiceComponentHost cHost=entry.getValue();
    cHost.handleEvent(new ServiceComponentHostInstallEvent(cHost.getServiceComponentName(),cHost.getHostName(),System.currentTimeMillis(),cluster.getDesiredStackVersion().getStackId()));
    cHost.handleEvent(new ServiceComponentHostOpSucceededEvent(cHost.getServiceComponentName(),cHost.getHostName(),System.currentTimeMillis()));
  }
  hostComponents=cluster.getService(serviceName).getServiceComponent(componentName2).getServiceComponentHosts();
  for (  Map.Entry<String,ServiceComponentHost> entry : hostComponents.entrySet()) {
    ServiceComponentHost cHost=entry.getValue();
    cHost.handleEvent(new ServiceComponentHostInstallEvent(cHost.getServiceComponentName(),cHost.getHostName(),System.currentTimeMillis(),cluster.getDesiredStackVersion().getStackId()));
    cHost.handleEvent(new ServiceComponentHostOpSucceededEvent(cHost.getServiceComponentName(),cHost.getHostName(),System.currentTimeMillis()));
  }
  ServiceComponentHost sch=cluster.getService(serviceName).getServiceComponent(componentName2).getServiceComponentHost(host1);
  Assert.assertNotNull(sch);
  sch.handleEvent(new ServiceComponentHostStartEvent(sch.getServiceComponentName(),sch.getHostName(),System.currentTimeMillis()));
  sch.handleEvent(new ServiceComponentHostStartedEvent(sch.getServiceComponentName(),sch.getHostName(),System.currentTimeMillis()));
  Set<ServiceComponentHostRequest> schRequests=new HashSet<ServiceComponentHostRequest>();
  schRequests.add(new ServiceComponentHostRequest(cluster1,null,null,host1,null));
  DeleteStatusMetaData deleteStatusMetaData=controller.deleteHostComponents(schRequests);
  Assert.assertEquals(1,deleteStatusMetaData.getExceptionForKeys().size());
  Assert.assertEquals(1,cluster.getServiceComponentHosts(host1).size());
  sch.handleEvent(new ServiceComponentHostStopEvent(sch.getServiceComponentName(),sch.getHostName(),System.currentTimeMillis()));
  sch.handleEvent(new ServiceComponentHostStoppedEvent(sch.getServiceComponentName(),sch.getHostName(),System.currentTimeMillis()));
  controller.deleteHostComponents(schRequests);
  Assert.assertEquals(0,cluster.getServiceComponentHosts(host1).size());
}
