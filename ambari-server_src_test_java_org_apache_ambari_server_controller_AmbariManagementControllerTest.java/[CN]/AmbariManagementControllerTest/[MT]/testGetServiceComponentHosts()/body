{
  Cluster c1=setupClusterWithHosts("c1","HDP-0.1",new ArrayList<String>(){
{
      add("h1");
    }
  }
,"centos5");
  Service s1=serviceFactory.createNew(c1,"HDFS");
  c1.addService(s1);
  s1.persist();
  ServiceComponent sc1=serviceComponentFactory.createNew(s1,"DATANODE");
  s1.addServiceComponent(sc1);
  sc1.setDesiredState(State.UNINSTALLED);
  sc1.persist();
  ServiceComponentHost sch1=serviceComponentHostFactory.createNew(sc1,"h1");
  sc1.addServiceComponentHost(sch1);
  sch1.setDesiredState(State.INSTALLED);
  sch1.setState(State.INSTALLING);
  sch1.setDesiredStackVersion(new StackId("HDP-1.2.0"));
  sch1.setStackVersion(new StackId("HDP-0.1"));
  sch1.persist();
  sch1.updateActualConfigs(new HashMap<String,Map<String,String>>(){
{
      put("global",new HashMap<String,String>(){
{
          put("tag","version1");
        }
      }
);
    }
  }
);
  ServiceComponentHostRequest r=new ServiceComponentHostRequest(c1.getClusterName(),null,null,null,null);
  Set<ServiceComponentHostResponse> resps=controller.getHostComponents(Collections.singleton(r));
  Assert.assertEquals(1,resps.size());
  ServiceComponentHostResponse resp=resps.iterator().next();
  Assert.assertEquals(c1.getClusterName(),resp.getClusterName());
  Assert.assertEquals(sc1.getName(),resp.getComponentName());
  Assert.assertEquals(s1.getName(),resp.getServiceName());
  Assert.assertEquals(sch1.getHostName(),resp.getHostname());
  Assert.assertEquals(sch1.getDesiredState().toString(),resp.getDesiredState());
  Assert.assertEquals(sch1.getState().toString(),resp.getLiveState());
  Assert.assertEquals(sch1.getStackVersion().getStackId(),resp.getStackVersion());
  Assert.assertNotNull(resp.getActualConfigs());
  Assert.assertEquals(1,resp.getActualConfigs().size());
}
