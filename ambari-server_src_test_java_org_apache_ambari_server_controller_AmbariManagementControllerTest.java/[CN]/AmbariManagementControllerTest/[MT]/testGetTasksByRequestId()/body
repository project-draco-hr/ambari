{
  final long requestId1=1;
  final long requestId2=2;
  final long requestId3=3;
  final String clusterName="c1";
  final String hostName1="h1";
  final String context="Test invocation";
  StackId stackID=new StackId("HDP-0.1");
  clusters.addCluster(clusterName,stackID);
  Cluster c=clusters.getCluster(clusterName);
  helper.getOrCreateRepositoryVersion(stackID,stackID.getStackVersion());
  c.createClusterVersion(stackID,stackID.getStackVersion(),"admin",RepositoryVersionState.UPGRADING);
  clusters.addHost(hostName1);
  setOsFamily(clusters.getHost("h1"),"redhat","5.9");
  clusters.getHost(hostName1).persist();
  clusters.mapHostsToCluster(new HashSet<String>(){
{
      add(hostName1);
    }
  }
,clusterName);
  List<Stage> stages=new ArrayList<Stage>();
  stages.add(stageFactory.createNew(requestId1,"/a1",clusterName,1L,context,CLUSTER_HOST_INFO,"",""));
  stages.get(0).setStageId(1);
  stages.get(0).addHostRoleExecutionCommand(hostName1,Role.HBASE_MASTER,RoleCommand.START,new ServiceComponentHostStartEvent(Role.HBASE_MASTER.toString(),hostName1,System.currentTimeMillis()),clusterName,"HBASE",false,false);
  stages.add(stageFactory.createNew(requestId1,"/a2",clusterName,1L,context,CLUSTER_HOST_INFO,"",""));
  stages.get(1).setStageId(2);
  stages.get(1).addHostRoleExecutionCommand(hostName1,Role.HBASE_CLIENT,RoleCommand.START,new ServiceComponentHostStartEvent(Role.HBASE_CLIENT.toString(),hostName1,System.currentTimeMillis()),clusterName,"HBASE",false,false);
  stages.add(stageFactory.createNew(requestId1,"/a3",clusterName,1L,context,CLUSTER_HOST_INFO,"",""));
  stages.get(2).setStageId(3);
  stages.get(2).addHostRoleExecutionCommand(hostName1,Role.HBASE_CLIENT,RoleCommand.START,new ServiceComponentHostStartEvent(Role.HBASE_CLIENT.toString(),hostName1,System.currentTimeMillis()),clusterName,"HBASE",false,false);
  Request request=new Request(stages,clusters);
  actionDB.persistActions(request);
  stages.clear();
  stages.add(stageFactory.createNew(requestId2,"/a4",clusterName,1L,context,CLUSTER_HOST_INFO,"",""));
  stages.get(0).setStageId(4);
  stages.get(0).addHostRoleExecutionCommand(hostName1,Role.HBASE_CLIENT,RoleCommand.START,new ServiceComponentHostStartEvent(Role.HBASE_CLIENT.toString(),hostName1,System.currentTimeMillis()),clusterName,"HBASE",false,false);
  stages.add(stageFactory.createNew(requestId2,"/a5",clusterName,1L,context,CLUSTER_HOST_INFO,"",""));
  stages.get(1).setStageId(5);
  stages.get(1).addHostRoleExecutionCommand(hostName1,Role.HBASE_CLIENT,RoleCommand.START,new ServiceComponentHostStartEvent(Role.HBASE_CLIENT.toString(),hostName1,System.currentTimeMillis()),clusterName,"HBASE",false,false);
  request=new Request(stages,clusters);
  actionDB.persistActions(request);
  ServiceComponentHostServerActionEvent serviceComponentHostServerActionEvent=new ServiceComponentHostServerActionEvent(Role.AMBARI_SERVER_ACTION.toString(),null,System.currentTimeMillis());
  stages.clear();
  stages.add(stageFactory.createNew(requestId3,"/a6",clusterName,1L,context,CLUSTER_HOST_INFO,"",""));
  stages.get(0).setStageId(6);
  stages.get(0).addServerActionCommand("some.action.class.name",null,Role.AMBARI_SERVER_ACTION,RoleCommand.EXECUTE,clusterName,serviceComponentHostServerActionEvent,null,null,null,null,false,false);
  assertEquals("_internal_ambari",stages.get(0).getOrderedHostRoleCommands().get(0).getHostName());
  request=new Request(stages,clusters);
  actionDB.persistActions(request);
  org.apache.ambari.server.controller.spi.Request spiRequest=PropertyHelper.getReadRequest(TaskResourceProvider.TASK_CLUSTER_NAME_PROPERTY_ID,TaskResourceProvider.TASK_REQUEST_ID_PROPERTY_ID,TaskResourceProvider.TASK_STAGE_ID_PROPERTY_ID);
  Predicate predicate=new PredicateBuilder().property(TaskResourceProvider.TASK_REQUEST_ID_PROPERTY_ID).equals(requestId1).toPredicate();
  List<HostRoleCommandEntity> entities=hostRoleCommandDAO.findAll(spiRequest,predicate);
  Assert.assertEquals(3,entities.size());
  predicate=new PredicateBuilder().property(TaskResourceProvider.TASK_REQUEST_ID_PROPERTY_ID).equals(requestId1).and().property(TaskResourceProvider.TASK_ID_PROPERTY_ID).equals(2L).toPredicate();
  entities=hostRoleCommandDAO.findAll(spiRequest,predicate);
  Assert.assertEquals(1,entities.size());
  predicate=new PredicateBuilder().property(TaskResourceProvider.TASK_REQUEST_ID_PROPERTY_ID).equals(requestId2).toPredicate();
  entities=hostRoleCommandDAO.findAll(spiRequest,predicate);
  Assert.assertEquals(2,entities.size());
  predicate=new PredicateBuilder().property(TaskResourceProvider.TASK_REQUEST_ID_PROPERTY_ID).equals(requestId1).and().property(TaskResourceProvider.TASK_ID_PROPERTY_ID).equals(2L).or().property(TaskResourceProvider.TASK_REQUEST_ID_PROPERTY_ID).equals(requestId2).toPredicate();
  entities=hostRoleCommandDAO.findAll(spiRequest,predicate);
  Assert.assertEquals(3,entities.size());
}
