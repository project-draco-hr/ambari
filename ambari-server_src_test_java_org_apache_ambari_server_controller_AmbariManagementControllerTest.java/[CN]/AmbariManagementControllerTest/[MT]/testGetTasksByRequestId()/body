{
  final long requestId1=1;
  final long requestId2=2;
  final String clusterName="c1";
  final String hostName1="h1";
  final String context="Test invocation";
  clusters.addCluster(clusterName);
  Cluster c=clusters.getCluster(clusterName);
  StackId stackID=new StackId("HDP-0.1");
  c.setDesiredStackVersion(stackID);
  helper.getOrCreateRepositoryVersion(stackID.getStackName(),stackID.getStackVersion());
  c.createClusterVersion(stackID.getStackName(),stackID.getStackVersion(),"admin",RepositoryVersionState.UPGRADING);
  clusters.addHost(hostName1);
  setOsFamily(clusters.getHost("h1"),"redhat","5.9");
  clusters.getHost(hostName1).persist();
  clusters.mapHostsToCluster(new HashSet<String>(){
{
      add(hostName1);
    }
  }
,clusterName);
  List<Stage> stages=new ArrayList<Stage>();
  stages.add(new Stage(requestId1,"/a1",clusterName,1L,context,CLUSTER_HOST_INFO,"",""));
  stages.get(0).setStageId(1);
  stages.get(0).addHostRoleExecutionCommand(hostName1,Role.HBASE_MASTER,RoleCommand.START,new ServiceComponentHostStartEvent(Role.HBASE_MASTER.toString(),hostName1,System.currentTimeMillis()),clusterName,"HBASE",false);
  stages.add(new Stage(requestId1,"/a2",clusterName,1L,context,CLUSTER_HOST_INFO,"",""));
  stages.get(1).setStageId(2);
  stages.get(1).addHostRoleExecutionCommand(hostName1,Role.HBASE_CLIENT,RoleCommand.START,new ServiceComponentHostStartEvent(Role.HBASE_CLIENT.toString(),hostName1,System.currentTimeMillis()),clusterName,"HBASE",false);
  stages.add(new Stage(requestId1,"/a3",clusterName,1L,context,CLUSTER_HOST_INFO,"",""));
  stages.get(2).setStageId(3);
  stages.get(2).addHostRoleExecutionCommand(hostName1,Role.HBASE_CLIENT,RoleCommand.START,new ServiceComponentHostStartEvent(Role.HBASE_CLIENT.toString(),hostName1,System.currentTimeMillis()),clusterName,"HBASE",false);
  Request request=new Request(stages,clusters);
  actionDB.persistActions(request);
  stages.clear();
  stages.add(new Stage(requestId2,"/a4",clusterName,1L,context,CLUSTER_HOST_INFO,"",""));
  stages.get(0).setStageId(4);
  stages.get(0).addHostRoleExecutionCommand(hostName1,Role.HBASE_CLIENT,RoleCommand.START,new ServiceComponentHostStartEvent(Role.HBASE_CLIENT.toString(),hostName1,System.currentTimeMillis()),clusterName,"HBASE",false);
  stages.add(new Stage(requestId2,"/a5",clusterName,1L,context,CLUSTER_HOST_INFO,"",""));
  stages.get(1).setStageId(5);
  stages.get(1).addHostRoleExecutionCommand(hostName1,Role.HBASE_CLIENT,RoleCommand.START,new ServiceComponentHostStartEvent(Role.HBASE_CLIENT.toString(),hostName1,System.currentTimeMillis()),clusterName,"HBASE",false);
  request=new Request(stages,clusters);
  actionDB.persistActions(request);
  Set<TaskStatusRequest> taskStatusRequests;
  Set<TaskStatusResponse> taskStatusResponses;
  taskStatusRequests=new HashSet<TaskStatusRequest>(){
{
      add(new TaskStatusRequest(requestId1,null));
    }
  }
;
  taskStatusResponses=controller.getTaskStatus(taskStatusRequests);
  assertEquals(3,taskStatusResponses.size());
  taskStatusRequests=new HashSet<TaskStatusRequest>(){
{
      add(new TaskStatusRequest(requestId1,2L));
    }
  }
;
  taskStatusResponses=controller.getTaskStatus(taskStatusRequests);
  assertEquals(1,taskStatusResponses.size());
  assertEquals(2L,taskStatusResponses.iterator().next().getTaskId());
  taskStatusRequests=new HashSet<TaskStatusRequest>(){
{
      add(new TaskStatusRequest(requestId2,null));
    }
  }
;
  taskStatusResponses=controller.getTaskStatus(taskStatusRequests);
  assertEquals(2,taskStatusResponses.size());
  taskStatusRequests=new HashSet<TaskStatusRequest>(){
{
      add(new TaskStatusRequest(requestId2,5L));
    }
  }
;
  taskStatusResponses=controller.getTaskStatus(taskStatusRequests);
  assertEquals(5L,taskStatusResponses.iterator().next().getTaskId());
  taskStatusRequests=new HashSet<TaskStatusRequest>(){
{
      add(new TaskStatusRequest(requestId1,5L));
    }
  }
;
  expectedException.expect(ObjectNotFoundException.class);
  expectedException.expectMessage("Task resource doesn't exist.");
  controller.getTaskStatus(taskStatusRequests);
  taskStatusRequests=new HashSet<TaskStatusRequest>(){
{
      add(new TaskStatusRequest(requestId2,2L));
    }
  }
;
  expectedException.expect(ObjectNotFoundException.class);
  expectedException.expectMessage("Task resource doesn't exist.");
  controller.getTaskStatus(taskStatusRequests);
}
