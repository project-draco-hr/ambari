{
  final String host1=getUniqueName();
  final String host2=getUniqueName();
  String cluster1=getUniqueName();
  Cluster c=setupClusterWithHosts(cluster1,"HDP-2.0.5",new ArrayList<String>(){
{
      add(host1);
      add(host2);
    }
  }
,"centos5");
  Long clusterId=c.getClusterId();
  String serviceName="HDFS";
  createService(cluster1,serviceName,null);
  String componentName1="NAMENODE";
  String componentName2="DATANODE";
  String componentName3="HDFS_CLIENT";
  createServiceComponent(cluster1,serviceName,componentName1,State.INIT);
  createServiceComponent(cluster1,serviceName,componentName2,State.INIT);
  createServiceComponent(cluster1,serviceName,componentName3,State.INIT);
  createServiceComponentHost(cluster1,serviceName,componentName1,host1,null);
  createServiceComponentHost(cluster1,serviceName,componentName2,host1,null);
  createServiceComponentHost(cluster1,serviceName,componentName3,host1,null);
  createServiceComponentHost(cluster1,serviceName,componentName2,host2,null);
  createServiceComponentHost(cluster1,serviceName,componentName3,host2,null);
  installService(cluster1,serviceName,false,false);
  Map<String,String> configs=new HashMap<String,String>();
  configs.put("a","b");
  ConfigurationRequest cr1;
  cr1=new ConfigurationRequest(cluster1,"hdfs-site","version1",configs,null);
  ClusterRequest crReq=new ClusterRequest(clusterId,cluster1,null,null);
  crReq.setDesiredConfig(Collections.singletonList(cr1));
  controller.updateClusters(Collections.singleton(crReq),null);
  startService(cluster1,serviceName,false,false);
  HashMap<String,Map<String,String>> actualConfig=new HashMap<String,Map<String,String>>(){
{
      put("hdfs-site",new HashMap<String,String>(){
{
          put("tag","version1");
        }
      }
);
    }
  }
;
  HashMap<String,Map<String,String>> actualConfigOld=new HashMap<String,Map<String,String>>(){
{
      put("hdfs-site",new HashMap<String,String>(){
{
          put("tag","version0");
        }
      }
);
    }
  }
;
  Service s1=clusters.getCluster(cluster1).getService(serviceName);
  s1.getServiceComponent(componentName1).getServiceComponentHost(host1).updateActualConfigs(actualConfig);
  s1.getServiceComponent(componentName2).getServiceComponentHost(host1).updateActualConfigs(actualConfig);
  s1.getServiceComponent(componentName3).getServiceComponentHost(host1).updateActualConfigs(actualConfigOld);
  s1.getServiceComponent(componentName2).getServiceComponentHost(host2).updateActualConfigs(actualConfigOld);
  s1.getServiceComponent(componentName3).getServiceComponentHost(host2).updateActualConfigs(actualConfig);
  ServiceComponentHostRequest r=new ServiceComponentHostRequest(cluster1,null,null,null,null);
  Set<ServiceComponentHostResponse> resps=controller.getHostComponents(Collections.singleton(r));
  Assert.assertEquals(5,resps.size());
  r=new ServiceComponentHostRequest(cluster1,null,null,null,null);
  r.setStaleConfig("true");
  resps=controller.getHostComponents(Collections.singleton(r));
  Assert.assertEquals(2,resps.size());
  r=new ServiceComponentHostRequest(cluster1,null,null,null,null);
  r.setStaleConfig("false");
  resps=controller.getHostComponents(Collections.singleton(r));
  Assert.assertEquals(3,resps.size());
  r=new ServiceComponentHostRequest(cluster1,null,null,host1,null);
  r.setStaleConfig("false");
  resps=controller.getHostComponents(Collections.singleton(r));
  Assert.assertEquals(2,resps.size());
  r=new ServiceComponentHostRequest(cluster1,null,null,host2,null);
  r.setStaleConfig("true");
  resps=controller.getHostComponents(Collections.singleton(r));
  Assert.assertEquals(1,resps.size());
}
