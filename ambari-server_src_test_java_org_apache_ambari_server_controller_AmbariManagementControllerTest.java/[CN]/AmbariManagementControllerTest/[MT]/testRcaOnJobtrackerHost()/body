{
  String clusterName="foo1";
  createCluster(clusterName);
  clusters.getCluster(clusterName).setDesiredStackVersion(new StackId("HDP-0.1"));
  String serviceName="MAPREDUCE";
  createService(clusterName,serviceName,null);
  String componentName1="JOBTRACKER";
  String componentName2="TASKTRACKER";
  String componentName3="MAPREDUCE_CLIENT";
  Map<String,String> mapRequestProps=new HashMap<String,String>();
  mapRequestProps.put("context","Called from a test");
  createServiceComponent(clusterName,serviceName,componentName1,State.INIT);
  createServiceComponent(clusterName,serviceName,componentName2,State.INIT);
  createServiceComponent(clusterName,serviceName,componentName3,State.INIT);
  String host1="h1";
  String host2="h2";
  addHost(host1,clusterName);
  addHost(host2,clusterName);
  createServiceComponentHost(clusterName,serviceName,componentName1,host1,null);
  createServiceComponentHost(clusterName,serviceName,componentName2,host1,null);
  createServiceComponentHost(clusterName,serviceName,componentName2,host2,null);
  createServiceComponentHost(clusterName,serviceName,componentName3,host1,null);
  createServiceComponentHost(clusterName,serviceName,componentName3,host2,null);
  Map<String,String> configs=new HashMap<String,String>();
  configs.put("a","b");
  configs.put("rca_enabled","true");
  ClusterRequest cr=new ClusterRequest(null,clusterName,null,null);
  cr.setDesiredConfig(new ConfigurationRequest(clusterName,"global","v1",configs,null));
  controller.updateClusters(Collections.singleton(cr),Collections.<String,String>emptyMap());
  Set<ServiceRequest> sReqs=new HashSet<ServiceRequest>();
  Map<String,String> configVersions=new HashMap<String,String>();
  configVersions.put("global","v1");
  sReqs.clear();
  sReqs.add(new ServiceRequest(clusterName,serviceName,State.INSTALLED.name()));
  RequestStatusResponse trackAction=ServiceResourceProviderTest.updateServices(controller,sReqs,mapRequestProps,true,false);
  List<Stage> stages=actionDB.getAllStages(trackAction.getRequestId());
  for (  ExecutionCommandWrapper cmd : stages.get(0).getExecutionCommands(host1)) {
    assertEquals("true",cmd.getExecutionCommand().getConfigurations().get("global").get("rca_enabled"));
  }
  for (  ExecutionCommandWrapper cmd : stages.get(0).getExecutionCommands(host2)) {
    assertEquals("false",cmd.getExecutionCommand().getConfigurations().get("global").get("rca_enabled"));
  }
}
