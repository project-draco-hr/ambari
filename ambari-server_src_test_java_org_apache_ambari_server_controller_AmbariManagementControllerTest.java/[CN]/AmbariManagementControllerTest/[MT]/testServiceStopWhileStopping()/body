{
  String cluster1=getUniqueName();
  createCluster(cluster1);
  clusters.getCluster(cluster1).setDesiredStackVersion(new StackId("HDP-0.1"));
  String serviceName="HDFS";
  createService(cluster1,serviceName,null);
  String componentName1="NAMENODE";
  String componentName2="DATANODE";
  String componentName3="HDFS_CLIENT";
  createServiceComponent(cluster1,serviceName,componentName1,State.INIT);
  createServiceComponent(cluster1,serviceName,componentName2,State.INIT);
  createServiceComponent(cluster1,serviceName,componentName3,State.INIT);
  final String host1=getUniqueName();
  final String host2=getUniqueName();
  addHostToCluster(host1,cluster1);
  addHostToCluster(host2,cluster1);
  Map<String,String> mapRequestProps=new HashMap<String,String>();
  mapRequestProps.put("context","Called from a test");
  createServiceComponentHost(cluster1,null,componentName1,host1,null);
  createServiceComponentHost(cluster1,serviceName,componentName2,host1,null);
  createServiceComponentHost(cluster1,serviceName,componentName2,host2,null);
  createServiceComponentHost(cluster1,serviceName,componentName3,host1,null);
  createServiceComponentHost(cluster1,serviceName,componentName3,host2,null);
  Assert.assertNotNull(clusters.getCluster(cluster1).getService(serviceName).getServiceComponent(componentName1).getServiceComponentHost(host1));
  Assert.assertNotNull(clusters.getCluster(cluster1).getService(serviceName).getServiceComponent(componentName2).getServiceComponentHost(host1));
  Assert.assertNotNull(clusters.getCluster(cluster1).getService(serviceName).getServiceComponent(componentName2).getServiceComponentHost(host2));
  Assert.assertNotNull(clusters.getCluster(cluster1).getService(serviceName).getServiceComponent(componentName3).getServiceComponentHost(host1));
  Assert.assertNotNull(clusters.getCluster(cluster1).getService(serviceName).getServiceComponent(componentName3).getServiceComponentHost(host2));
  ServiceRequest r=new ServiceRequest(cluster1,serviceName,State.INSTALLED.toString());
  Set<ServiceRequest> requests=new HashSet<ServiceRequest>();
  requests.add(r);
  ServiceResourceProviderTest.updateServices(controller,requests,mapRequestProps,true,false);
  Assert.assertEquals(State.INSTALLED,clusters.getCluster(cluster1).getService(serviceName).getDesiredState());
  for (  ServiceComponent sc : clusters.getCluster(cluster1).getService(serviceName).getServiceComponents().values()) {
    for (    ServiceComponentHost sch : sc.getServiceComponentHosts().values()) {
      sch.setState(State.INSTALLED);
    }
  }
  r=new ServiceRequest(cluster1,serviceName,State.STARTED.toString());
  requests.clear();
  requests.add(r);
  ServiceResourceProviderTest.updateServices(controller,requests,mapRequestProps,true,false);
  for (  ServiceComponent sc : clusters.getCluster(cluster1).getService(serviceName).getServiceComponents().values()) {
    for (    ServiceComponentHost sch : sc.getServiceComponentHosts().values()) {
      if (!sch.getServiceComponentName().equals("HDFS_CLIENT")) {
        sch.setState(State.STARTED);
      }
    }
  }
  Assert.assertEquals(State.STARTED,clusters.getCluster(cluster1).getService(serviceName).getDesiredState());
  clusters.getCluster(cluster1).getService(serviceName).setDesiredState(State.STOPPING);
  for (  ServiceComponent sc : clusters.getCluster(cluster1).getService(serviceName).getServiceComponents().values()) {
    for (    ServiceComponentHost sch : sc.getServiceComponentHosts().values()) {
      if (!sch.getServiceComponentName().equals("HDFS_CLIENT")) {
        Assert.assertEquals(State.STARTED,sch.getDesiredState());
        sch.setState(State.STOPPING);
      }
 else       if (sch.getServiceComponentName().equals("DATANODE")) {
        ServiceComponentHostRequest r1=new ServiceComponentHostRequest(cluster1,serviceName,sch.getServiceComponentName(),sch.getHostName(),State.INSTALLED.name());
        Set<ServiceComponentHostRequest> reqs1=new HashSet<ServiceComponentHostRequest>();
        reqs1.add(r1);
        updateHostComponents(reqs1,Collections.<String,String>emptyMap(),true);
        Assert.assertEquals(State.INSTALLED,sch.getDesiredState());
      }
    }
  }
  r=new ServiceRequest(cluster1,serviceName,State.INSTALLED.toString());
  requests.clear();
  requests.add(r);
  ServiceResourceProviderTest.updateServices(controller,requests,mapRequestProps,true,false);
  for (  ServiceComponent sc : clusters.getCluster(cluster1).getService(serviceName).getServiceComponents().values()) {
    for (    ServiceComponentHost sch : sc.getServiceComponentHosts().values()) {
      if (!sch.getServiceComponentName().equals("HDFS_CLIENT")) {
        Assert.assertEquals(State.INSTALLED,sch.getDesiredState());
      }
    }
  }
}
