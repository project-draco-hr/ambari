{
  String cluster1=getUniqueName();
  createCluster(cluster1);
  clusters.getCluster(cluster1).setDesiredStackVersion(new StackId("HDP-0.1"));
  String serviceName="HDFS";
  createService(cluster1,serviceName,null);
  String componentName1="NAMENODE";
  String componentName2="DATANODE";
  String componentName3="HDFS_CLIENT";
  Map<String,String> mapRequestProps=new HashMap<String,String>();
  mapRequestProps.put("context","Called from a test");
  createServiceComponent(cluster1,serviceName,componentName1,State.INIT);
  createServiceComponent(cluster1,serviceName,componentName2,State.INIT);
  createServiceComponent(cluster1,serviceName,componentName3,State.INIT);
  String host1=getUniqueName();
  String host2=getUniqueName();
  addHostToCluster(host1,cluster1);
  addHostToCluster(host2,cluster1);
  createServiceComponentHost(cluster1,null,componentName1,host1,null);
  createServiceComponentHost(cluster1,serviceName,componentName2,host1,null);
  createServiceComponentHost(cluster1,serviceName,componentName2,host2,null);
  createServiceComponentHost(cluster1,serviceName,componentName3,host1,null);
  createServiceComponentHost(cluster1,serviceName,componentName3,host2,null);
  ServiceRequest r=new ServiceRequest(cluster1,serviceName,State.INSTALLED.toString());
  Set<ServiceRequest> requests=new HashSet<ServiceRequest>();
  requests.add(r);
  ServiceResourceProviderTest.updateServices(controller,requests,mapRequestProps,true,false);
  Assert.assertEquals(State.INSTALLED,clusters.getCluster(cluster1).getService(serviceName).getDesiredState());
  for (  ServiceComponent sc : clusters.getCluster(cluster1).getService(serviceName).getServiceComponents().values()) {
    for (    ServiceComponentHost sch : sc.getServiceComponentHosts().values()) {
      sch.setState(State.INSTALLED);
    }
  }
  Map<String,String> configs=new HashMap<String,String>();
  configs.put("a","b");
  ConfigurationRequest cr1, cr2, cr3;
  cr1=new ConfigurationRequest(cluster1,"core-site","version1",configs,null);
  cr2=new ConfigurationRequest(cluster1,"hdfs-site","version1",configs,null);
  cr3=new ConfigurationRequest(cluster1,"core-site","version122",configs,null);
  controller.createConfiguration(cr1);
  controller.createConfiguration(cr2);
  controller.createConfiguration(cr3);
  Cluster cluster=clusters.getCluster(cluster1);
  Service s=cluster.getService(serviceName);
  ServiceComponent sc1=s.getServiceComponent(componentName1);
  ServiceComponent sc2=s.getServiceComponent(componentName2);
  ServiceComponentHost sch1=sc1.getServiceComponentHost(host1);
  Set<ServiceComponentHostRequest> schReqs=new HashSet<ServiceComponentHostRequest>();
  Set<ServiceComponentRequest> scReqs=new HashSet<ServiceComponentRequest>();
  Set<ServiceRequest> sReqs=new HashSet<ServiceRequest>();
  Map<String,String> configVersions=new HashMap<String,String>();
  configVersions.clear();
  configVersions.put("core-site","version1");
  configVersions.put("hdfs-site","version1");
  schReqs.clear();
  schReqs.add(new ServiceComponentHostRequest(cluster1,serviceName,componentName1,host1,null));
  Assert.assertNull(updateHostComponents(schReqs,Collections.<String,String>emptyMap(),true));
  configVersions.clear();
  configVersions.put("core-site","version122");
  schReqs.clear();
  schReqs.add(new ServiceComponentHostRequest(cluster1,serviceName,componentName1,host1,null));
  Assert.assertNull(updateHostComponents(schReqs,Collections.<String,String>emptyMap(),true));
  entityManager.clear();
  configVersions.clear();
  configVersions.put("core-site","version1");
  configVersions.put("hdfs-site","version1");
  scReqs.add(new ServiceComponentRequest(cluster1,serviceName,componentName2,null));
  Assert.assertNull(ComponentResourceProviderTest.updateComponents(controller,scReqs,Collections.<String,String>emptyMap(),true));
  scReqs.add(new ServiceComponentRequest(cluster1,serviceName,componentName1,null));
  Assert.assertNull(ComponentResourceProviderTest.updateComponents(controller,scReqs,Collections.<String,String>emptyMap(),true));
  configVersions.clear();
  configVersions.put("core-site","version122");
  scReqs.clear();
  scReqs.add(new ServiceComponentRequest(cluster1,serviceName,componentName2,null));
  Assert.assertNull(ComponentResourceProviderTest.updateComponents(controller,scReqs,Collections.<String,String>emptyMap(),true));
  scReqs.clear();
  scReqs.add(new ServiceComponentRequest(cluster1,serviceName,componentName1,null));
  Assert.assertNull(ComponentResourceProviderTest.updateComponents(controller,scReqs,Collections.<String,String>emptyMap(),true));
  entityManager.clear();
  configVersions.clear();
  configVersions.put("core-site","version1");
  configVersions.put("hdfs-site","version1");
  sReqs.clear();
  sReqs.add(new ServiceRequest(cluster1,serviceName,null));
  Assert.assertNull(ServiceResourceProviderTest.updateServices(controller,sReqs,mapRequestProps,true,false));
  configVersions.clear();
  configVersions.put("core-site","version122");
  sReqs.clear();
  sReqs.add(new ServiceRequest(cluster1,serviceName,null));
  Assert.assertNull(ServiceResourceProviderTest.updateServices(controller,sReqs,mapRequestProps,true,false));
  entityManager.clear();
}
