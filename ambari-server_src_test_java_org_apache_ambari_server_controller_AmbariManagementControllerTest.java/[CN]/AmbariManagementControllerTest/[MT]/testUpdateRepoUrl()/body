{
  String INCORRECT_URL_2="http://bar.com/foo";
  RepositoryInfo repo=ambariMetaInfo.getRepository(STACK_NAME,STACK_VERSION,OS_TYPE,REPO_ID);
  assertNotNull(repo);
  assertNotNull(repo.getBaseUrl());
  String original=repo.getBaseUrl();
  repo=ambariMetaInfo.getRepository(STACK_NAME,STACK_VERSION,OS_TYPE,REPO_ID);
  assertEquals(original,repo.getBaseUrl());
  ambariMetaInfo.updateRepoBaseURL(STACK_NAME,STACK_VERSION,OS_TYPE,REPO_ID,INCORRECT_BASE_URL);
  repo=ambariMetaInfo.getRepository(STACK_NAME,STACK_VERSION,OS_TYPE,REPO_ID);
  assertEquals(INCORRECT_BASE_URL,repo.getBaseUrl());
  assertEquals(original,repo.getDefaultBaseUrl());
  ambariMetaInfo.updateRepoBaseURL(STACK_NAME,STACK_VERSION,OS_TYPE,REPO_ID,INCORRECT_URL_2);
  repo=ambariMetaInfo.getRepository(STACK_NAME,STACK_VERSION,OS_TYPE,REPO_ID);
  assertFalse(INCORRECT_BASE_URL.equals(repo.getBaseUrl()));
  assertEquals(INCORRECT_URL_2,repo.getBaseUrl());
  assertEquals(original,repo.getDefaultBaseUrl());
  AmbariMetaInfo ami=new AmbariMetaInfo(new File("src/test/resources/stacks"),null,new File("target/version"));
  injector.injectMembers(ami);
  ami.init();
  repo=ami.getRepository(STACK_NAME,STACK_VERSION,OS_TYPE,REPO_ID);
  assertEquals(INCORRECT_URL_2,repo.getBaseUrl());
  assertNotNull(repo.getDefaultBaseUrl());
  assertEquals(original,repo.getDefaultBaseUrl());
  ami.updateRepoBaseURL(STACK_NAME,STACK_VERSION,OS_TYPE,REPO_ID,original);
  repo=ami.getRepository(STACK_NAME,STACK_VERSION,OS_TYPE,REPO_ID);
  assertEquals(original,repo.getBaseUrl());
  assertEquals(original,repo.getDefaultBaseUrl());
}
