{
  String INCORRECT_URL_2="http://bar.com/foo";
  RepositoryInfo repo=ambariMetaInfo.getRepository(STACK_NAME,STACK_VERSION,OS_TYPE,REPO_ID);
  assertNotNull(repo);
  assertNotNull(repo.getBaseUrl());
  String original=repo.getBaseUrl();
  repo=ambariMetaInfo.getRepository(STACK_NAME,STACK_VERSION,OS_TYPE,REPO_ID);
  assertEquals(original,repo.getBaseUrl());
  ambariMetaInfo.updateRepo(STACK_NAME,STACK_VERSION,OS_TYPE,REPO_ID,INCORRECT_BASE_URL,null);
  repo=ambariMetaInfo.getRepository(STACK_NAME,STACK_VERSION,OS_TYPE,REPO_ID);
  assertEquals(INCORRECT_BASE_URL,repo.getBaseUrl());
  assertEquals(original,repo.getDefaultBaseUrl());
  ambariMetaInfo.updateRepo(STACK_NAME,STACK_VERSION,OS_TYPE,REPO_ID,INCORRECT_URL_2,null);
  repo=ambariMetaInfo.getRepository(STACK_NAME,STACK_VERSION,OS_TYPE,REPO_ID);
  assertFalse(INCORRECT_BASE_URL.equals(repo.getBaseUrl()));
  assertEquals(INCORRECT_URL_2,repo.getBaseUrl());
  assertEquals(original,repo.getDefaultBaseUrl());
  Configuration configuration=injector.getInstance(Configuration.class);
  Properties properties=configuration.getProperties();
  properties.setProperty(Configuration.METADATA_DIR_PATH.getKey(),"src/test/resources/stacks");
  properties.setProperty(Configuration.SERVER_VERSION_FILE.getKey(),"src/test/resources/version");
  Configuration newConfiguration=new Configuration(properties);
  AmbariMetaInfo ami=new AmbariMetaInfo(newConfiguration);
  injector.injectMembers(ami);
  ami.init();
  repo=ami.getRepository(STACK_NAME,STACK_VERSION,OS_TYPE,REPO_ID);
  assertEquals(INCORRECT_URL_2,repo.getBaseUrl());
  assertNotNull(repo.getDefaultBaseUrl());
  assertEquals(original,repo.getDefaultBaseUrl());
  ami.updateRepo(STACK_NAME,STACK_VERSION,OS_TYPE,REPO_ID,original,null);
  repo=ami.getRepository(STACK_NAME,STACK_VERSION,OS_TYPE,REPO_ID);
  assertEquals(original,repo.getBaseUrl());
  assertEquals(original,repo.getDefaultBaseUrl());
}
