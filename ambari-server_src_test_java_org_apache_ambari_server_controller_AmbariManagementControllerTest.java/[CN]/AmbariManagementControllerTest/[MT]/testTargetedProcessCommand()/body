{
  final String host1=getUniqueName();
  String cluster1=getUniqueName();
  Cluster cluster=setupClusterWithHosts(cluster1,"HDP-2.0.5",Arrays.asList(host1),"centos5");
  String serviceName="HDFS";
  createService(cluster1,serviceName,null);
  String componentName1="NAMENODE";
  createServiceComponent(cluster1,serviceName,componentName1,State.INIT);
  createServiceComponentHost(cluster1,serviceName,componentName1,host1,null);
  installService(cluster1,serviceName,false,false);
  Map<String,String> hdfsConfigs=new HashMap<String,String>();
  hdfsConfigs.put("a","b");
  Map<String,Map<String,String>> hdfsConfigAttributes=new HashMap<String,Map<String,String>>(){
{
      put("final",new HashMap<String,String>(){
{
          put("a","true");
        }
      }
);
    }
  }
;
  ConfigurationRequest cr1=new ConfigurationRequest(cluster1,"hdfs-site","version1",hdfsConfigs,hdfsConfigAttributes);
  ClusterRequest crReq1=new ClusterRequest(cluster.getClusterId(),cluster1,null,null);
  crReq1.setDesiredConfig(Collections.singletonList(cr1));
  controller.updateClusters(Collections.singleton(crReq1),null);
  startService(cluster1,serviceName,false,false);
  ServiceComponentHostRequest req=new ServiceComponentHostRequest(cluster1,serviceName,componentName1,host1,"INSTALLED");
  Map<String,String> requestProperties=new HashMap<String,String>();
  requestProperties.put("namenode","p1");
  RequestStatusResponse resp=updateHostComponents(Collections.singleton(req),requestProperties,false);
  assertNotNull(resp);
  for (  ServiceComponentHost sch : clusters.getCluster(cluster1).getServiceComponentHosts(host1)) {
    sch.setState(State.INSTALLED);
  }
  resp=updateHostComponents(Collections.singleton(req),new HashMap<String,String>(),false);
  assertNull(resp);
  resp=updateHostComponents(Collections.singleton(req),requestProperties,false);
  assertNotNull(resp);
}
