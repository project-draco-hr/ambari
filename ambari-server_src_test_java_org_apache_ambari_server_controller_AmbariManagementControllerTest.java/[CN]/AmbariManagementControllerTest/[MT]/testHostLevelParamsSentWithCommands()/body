{
  String clusterName="foo1";
  createCluster(clusterName);
  clusters.getCluster(clusterName).setDesiredStackVersion(new StackId("HDP-0.1"));
  String serviceName="PIG";
  createService(clusterName,serviceName,null);
  String componentName1="PIG";
  createServiceComponent(clusterName,serviceName,componentName1,State.INIT);
  String host1="h1";
  String host2="h2";
  addHostToCluster(host1,clusterName);
  addHostToCluster(host2,clusterName);
  Map<String,String> mapRequestProps=new HashMap<String,String>();
  mapRequestProps.put("context","Called from a test");
  createServiceComponentHost(clusterName,null,componentName1,host1,null);
  createServiceComponentHost(clusterName,null,componentName1,host2,null);
  ServiceRequest r=new ServiceRequest(clusterName,serviceName,State.INSTALLED.toString());
  Set<ServiceRequest> requests=new HashSet<ServiceRequest>();
  requests.add(r);
  RequestStatusResponse trackAction=ServiceResourceProviderTest.updateServices(controller,requests,mapRequestProps,true,false);
  Assert.assertEquals(State.INSTALLED,clusters.getCluster(clusterName).getService(serviceName).getDesiredState());
  List<Stage> stages=actionDB.getAllStages(trackAction.getRequestId());
  Type type=new TypeToken<Map<String,String>>(){
  }
.getType();
  for (  Stage stage : stages) {
    Map<String,String> params=StageUtils.getGson().fromJson(stage.getHostParamsStage(),type);
    Assert.assertEquals("0.1",params.get("stack_version"));
    Assert.assertNotNull(params.get("jdk_location"));
    Assert.assertNotNull(params.get("db_name"));
    Assert.assertNotNull(params.get("mysql_jdbc_url"));
    Assert.assertNotNull(params.get("oracle_jdbc_url"));
  }
  Map<String,String> paramsCmd=stages.get(0).getOrderedHostRoleCommands().get(0).getExecutionCommandWrapper().getExecutionCommand().getHostLevelParams();
  Assert.assertNotNull(paramsCmd.get("repo_info"));
  Assert.assertNotNull(paramsCmd.get("clientsToUpdateConfigs"));
}
