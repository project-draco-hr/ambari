{
  Injector injector=createStrictMock(Injector.class);
  Capture<AmbariManagementController> controllerCapture=new Capture<AmbariManagementController>();
  Clusters clusters=createNiceMock(Clusters.class);
  MaintenanceStateHelper maintHelper=createNiceMock(MaintenanceStateHelper.class);
  Cluster cluster=createNiceMock(Cluster.class);
  Service service1=createNiceMock(Service.class);
  Service service2=createNiceMock(Service.class);
  ServiceResponse response=createNiceMock(ServiceResponse.class);
  ServiceResponse response2=createNiceMock(ServiceResponse.class);
  ServiceRequest request1=new ServiceRequest("cluster1","service1",null);
  ServiceRequest request2=new ServiceRequest("cluster1","service2",null);
  ServiceRequest request3=new ServiceRequest("cluster1","service3",null);
  ServiceRequest request4=new ServiceRequest("cluster1","service4",null);
  Set<ServiceRequest> setRequests=new HashSet<ServiceRequest>();
  setRequests.add(request1);
  setRequests.add(request2);
  setRequests.add(request3);
  setRequests.add(request4);
  injector.injectMembers(capture(controllerCapture));
  expect(injector.getInstance(Gson.class)).andReturn(null);
  expect(injector.getInstance(MaintenanceStateHelper.class)).andReturn(maintHelper);
  expect(injector.getInstance(KerberosHelper.class)).andReturn(createStrictMock(KerberosHelper.class));
  expect(clusters.getCluster("cluster1")).andReturn(cluster).times(4);
  expect(cluster.getService("service1")).andReturn(service1);
  expect(cluster.getService("service2")).andThrow(new ServiceNotFoundException("cluster1","service2"));
  expect(cluster.getService("service3")).andThrow(new ServiceNotFoundException("cluster1","service3"));
  expect(cluster.getService("service4")).andReturn(service2);
  expect(service1.convertToResponse()).andReturn(response);
  expect(service2.convertToResponse()).andReturn(response2);
  replay(maintHelper,injector,clusters,cluster,service1,service2,response,response2);
  AmbariManagementController controller=new AmbariManagementControllerImpl(null,clusters,injector);
  Set<ServiceResponse> setResponses=ServiceResourceProviderTest.getServices(controller,setRequests);
  assertSame(controller,controllerCapture.getValue());
  assertEquals(2,setResponses.size());
  assertTrue(setResponses.contains(response));
  assertTrue(setResponses.contains(response2));
  verify(injector,clusters,cluster,service1,service2,response,response2);
}
