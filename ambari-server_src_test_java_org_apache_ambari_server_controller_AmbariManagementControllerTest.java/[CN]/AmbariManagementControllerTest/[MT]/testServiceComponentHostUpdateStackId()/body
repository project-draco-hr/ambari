{
  String cluster1=getUniqueName();
  createCluster(cluster1);
  String serviceName1="HDFS";
  createService(cluster1,serviceName1,null);
  String componentName1="NAMENODE";
  String componentName2="DATANODE";
  createServiceComponent(cluster1,serviceName1,componentName1,State.INIT);
  createServiceComponent(cluster1,serviceName1,componentName2,State.INIT);
  String host1=getUniqueName();
  String host2=getUniqueName();
  addHostToCluster(host1,cluster1);
  addHostToCluster(host2,cluster1);
  Set<ServiceComponentHostRequest> set1=new HashSet<ServiceComponentHostRequest>();
  ServiceComponentHostRequest r1=new ServiceComponentHostRequest(cluster1,serviceName1,componentName1,host1,State.INIT.toString());
  ServiceComponentHostRequest r2=new ServiceComponentHostRequest(cluster1,serviceName1,componentName1,host2,State.INIT.toString());
  ServiceComponentHostRequest r3=new ServiceComponentHostRequest(cluster1,serviceName1,componentName2,host1,State.INIT.toString());
  set1.add(r1);
  set1.add(r2);
  set1.add(r3);
  controller.createHostComponents(set1);
  Cluster c1=clusters.getCluster(cluster1);
  Service s1=c1.getService(serviceName1);
  ServiceComponent sc1=s1.getServiceComponent(componentName1);
  ServiceComponent sc2=s1.getServiceComponent(componentName2);
  ServiceComponentHost sch1=sc1.getServiceComponentHost(host1);
  ServiceComponentHost sch2=sc1.getServiceComponentHost(host2);
  ServiceComponentHost sch3=sc2.getServiceComponentHost(host1);
  s1.setDesiredState(State.INSTALLED);
  sc1.setDesiredState(State.INSTALLED);
  sc2.setDesiredState(State.INSTALLED);
  ServiceComponentHostRequest req1;
  ServiceComponentHostRequest req2;
  ServiceComponentHostRequest req3;
  Set<ServiceComponentHostRequest> reqs=new HashSet<ServiceComponentHostRequest>();
  StackId newStack=new StackId("HDP-0.2");
  StackId oldStack=new StackId("HDP-0.1");
  c1.setCurrentStackVersion(newStack);
  c1.setDesiredStackVersion(newStack);
  sch1.setState(State.INSTALLED);
  sch2.setState(State.UPGRADING);
  sch1.setDesiredState(State.INSTALLED);
  sch2.setDesiredState(State.INSTALLED);
  sch1.setStackVersion(oldStack);
  sch2.setStackVersion(oldStack);
  sch1.setDesiredStackVersion(newStack);
  sch2.setDesiredStackVersion(oldStack);
  reqs.clear();
  req1=new ServiceComponentHostRequest(cluster1,serviceName1,componentName1,host1,State.INSTALLED.toString());
  req1.setDesiredStackId("HDP-0.2");
  reqs.add(req1);
  req2=new ServiceComponentHostRequest(cluster1,serviceName1,componentName1,host2,State.INSTALLED.toString());
  req2.setDesiredStackId("HDP-0.2");
  reqs.add(req2);
  Map<String,String> mapRequestProps=new HashMap<String,String>();
  mapRequestProps.put("context","testServiceComponentHostUpdateStackId");
  RequestStatusResponse resp=updateHostComponents(reqs,mapRequestProps,true);
  List<Stage> stages=actionDB.getAllStages(resp.getRequestId());
  Assert.assertEquals(1,stages.size());
  Assert.assertEquals(2,stages.get(0).getOrderedHostRoleCommands().size());
  Assert.assertEquals("testServiceComponentHostUpdateStackId",stages.get(0).getRequestContext());
  Assert.assertEquals(State.UPGRADING,sch1.getState());
  Assert.assertEquals(State.UPGRADING,sch2.getState());
  Assert.assertTrue(sch1.getDesiredStackVersion().compareTo(newStack) == 0);
  Assert.assertTrue(sch2.getDesiredStackVersion().compareTo(newStack) == 0);
  for (  HostRoleCommand command : stages.get(0).getOrderedHostRoleCommands()) {
    ExecutionCommand execCommand=command.getExecutionCommandWrapper().getExecutionCommand();
    Assert.assertTrue(execCommand.getCommandParams().containsKey("source_stack_version"));
    Assert.assertTrue(execCommand.getCommandParams().containsKey("target_stack_version"));
    Assert.assertEquals(RoleCommand.UPGRADE,execCommand.getRoleCommand());
  }
  sch1.setState(State.INSTALLED);
  sch1.setDesiredState(State.INSTALLED);
  sch2.setState(State.UPGRADING);
  sch2.setDesiredState(State.INSTALLED);
  sch3.setState(State.UPGRADING);
  sch3.setDesiredState(State.INSTALLED);
  sch3.setStackVersion(oldStack);
  sch3.setDesiredStackVersion(newStack);
  reqs.clear();
  req1=new ServiceComponentHostRequest(cluster1,serviceName1,componentName1,host1,State.INSTALLED.toString());
  req1.setDesiredStackId("HDP-0.2");
  reqs.add(req1);
  req2=new ServiceComponentHostRequest(cluster1,serviceName1,componentName1,host2,State.INSTALLED.toString());
  req2.setDesiredStackId("HDP-0.2");
  reqs.add(req2);
  req3=new ServiceComponentHostRequest(cluster1,serviceName1,componentName2,host1,State.INSTALLED.toString());
  req3.setDesiredStackId("HDP-0.2");
  reqs.add(req3);
  resp=updateHostComponents(reqs,Collections.<String,String>emptyMap(),true);
  stages=actionDB.getAllStages(resp.getRequestId());
  Assert.assertEquals(2,stages.size());
  Assert.assertEquals(2,stages.get(0).getOrderedHostRoleCommands().size());
  Assert.assertEquals("",stages.get(0).getRequestContext());
  Assert.assertEquals(State.UPGRADING,sch1.getState());
  Assert.assertEquals(State.UPGRADING,sch2.getState());
  Assert.assertEquals(State.UPGRADING,sch3.getState());
  Assert.assertTrue(sch1.getDesiredStackVersion().compareTo(newStack) == 0);
  Assert.assertTrue(sch2.getDesiredStackVersion().compareTo(newStack) == 0);
  Assert.assertTrue(sch3.getDesiredStackVersion().compareTo(newStack) == 0);
  for (  Stage stage : stages) {
    for (    HostRoleCommand command : stage.getOrderedHostRoleCommands()) {
      ExecutionCommand execCommand=command.getExecutionCommandWrapper().getExecutionCommand();
      Assert.assertTrue(execCommand.getCommandParams().containsKey("source_stack_version"));
      Assert.assertTrue(execCommand.getCommandParams().containsKey("target_stack_version"));
      Assert.assertEquals("{\"stackName\":\"HDP\",\"stackVersion\":\"0.2\"}",execCommand.getCommandParams().get("target_stack_version"));
      Assert.assertEquals(RoleCommand.UPGRADE,execCommand.getRoleCommand());
    }
  }
}
