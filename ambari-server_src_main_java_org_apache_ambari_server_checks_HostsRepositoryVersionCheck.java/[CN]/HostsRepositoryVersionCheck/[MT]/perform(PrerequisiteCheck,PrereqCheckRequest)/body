{
  final String clusterName=request.getClusterName();
  final Cluster cluster=clustersProvider.get().getCluster(clusterName);
  final Map<String,Host> clusterHosts=clustersProvider.get().getHostsForCluster(clusterName);
  final StackId stackId=cluster.getDesiredStackVersion();
  for (  Map.Entry<String,Host> hostEntry : clusterHosts.entrySet()) {
    final Host host=hostEntry.getValue();
    if (host.getMaintenanceState(cluster.getClusterId()) == MaintenanceState.OFF) {
      final RepositoryVersionEntity repositoryVersion=repositoryVersionDaoProvider.get().findByStackAndVersion(stackId.getStackId(),request.getRepositoryVersion());
      if (repositoryVersion == null) {
        prerequisiteCheck.setStatus(PrereqCheckStatus.FAIL);
        prerequisiteCheck.setFailReason(getFailReason("no_repo_version",prerequisiteCheck,request));
        prerequisiteCheck.getFailedOn().addAll(clusterHosts.keySet());
        return;
      }
      final HostVersionEntity hostVersion=hostVersionDaoProvider.get().findByClusterStackVersionAndHost(clusterName,repositoryVersion.getStack(),repositoryVersion.getVersion(),host.getHostName());
      if (hostVersion == null || hostVersion.getState() != RepositoryVersionState.INSTALLED) {
        prerequisiteCheck.getFailedOn().add(host.getHostName());
      }
    }
  }
  if (!prerequisiteCheck.getFailedOn().isEmpty()) {
    prerequisiteCheck.setStatus(PrereqCheckStatus.FAIL);
    prerequisiteCheck.setFailReason(getFailReason(prerequisiteCheck,request));
  }
}
