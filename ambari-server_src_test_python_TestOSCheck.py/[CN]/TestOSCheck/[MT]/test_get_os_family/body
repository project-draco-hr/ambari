@patch.object(OSCheck, 'os_distribution')
@patch('os.path.exists')
def test_get_os_family(self, mock_exists, mock_linux_distribution):
    mock_exists.return_value = False
    mock_linux_distribution.return_value = ('MY_os', '5.6.7', '')
    result = OSCheck.get_os_family()
    self.assertEquals(result, 'my_os')
    mock_exists.return_value = False
    mock_linux_distribution.return_value = ('Centos Linux', '2.4', '')
    result = OSCheck.get_os_family()
    self.assertEquals(result, 'redhat')
    mock_exists.return_value = False
    mock_linux_distribution.return_value = ('Ubuntu', '14.04', '')
    result = OSCheck.get_os_family()
    self.assertEquals(result, 'ubuntu')
    mock_exists.return_value = False
    mock_linux_distribution.return_value = ('suse linux enterprise server', '11.3', '')
    result = OSCheck.get_os_family()
    self.assertEquals(result, 'suse')
    mock_exists.return_value = False
    mock_linux_distribution.return_value = ('SLED', '1.2.3.4.5', '')
    result = OSCheck.get_os_family()
    self.assertEquals(result, 'suse')
    mock_linux_distribution.return_value = ('', '111', '2222')
    try:
        result = OSCheck.get_os_family()
        self.fail('Should throw exception in OSCheck.get_os_family()')
    except Exception as e:
        self.assertEquals('Cannot detect os type. Exiting...', str(e))
        pass
