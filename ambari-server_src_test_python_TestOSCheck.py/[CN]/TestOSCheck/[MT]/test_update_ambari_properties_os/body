@patch.object(ambari_server, 'get_conf_dir')
def test_update_ambari_properties_os(self, get_conf_dir_mock):
    properties = ['server.jdbc.user.name=ambari-server\n', 'server.jdbc.database=ambari\n', 'ambari-server.user=root\n', 'server.jdbc.user.name=ambari-server\n', 'jdk.name=jdk-6u31-linux-x64.bin\n', 'jce.name=jce_policy-6.zip\n', 'server.os_type=old_sys_os6\n', 'java.home=/usr/jdk64/jdk1.6.0_31\n']
    ambari_server.OS_FAMILY = 'family_of_trolls'
    ambari_server.OS_VERSION = '666'
    get_conf_dir_mock.return_value = '/etc/ambari-server/conf'
    (tf1, fn1) = tempfile.mkstemp()
    (tf2, fn2) = tempfile.mkstemp()
    ambari_server.AMBARI_PROPERTIES_RPMSAVE_FILE = fn1
    ambari_server.AMBARI_PROPERTIES_FILE = fn2
    with open(ambari_server.AMBARI_PROPERTIES_RPMSAVE_FILE, 'w') as f:
        for line in properties:
            f.write(line)
    ambari_server.update_ambari_properties()
    with open(ambari_server.AMBARI_PROPERTIES_FILE, 'r') as f:
        ambari_properties_content = f.readlines()
    count = 0
    for line in ambari_properties_content:
        if (not line.startswith('#')):
            count += 1
            if (line == 'server.os_type=old_sys_os6\n'):
                self.fail(('line=' + line))
            else:
                pass
    self.assertEquals(count, 8)
    result = ambari_server.update_ambari_properties()
    self.assertEquals(result, 0)
    os.unlink(fn2)
    prev_conf_file = glob.glob((ambari_server.AMBARI_PROPERTIES_RPMSAVE_FILE + '*'))
    os.unlink(prev_conf_file[0])
