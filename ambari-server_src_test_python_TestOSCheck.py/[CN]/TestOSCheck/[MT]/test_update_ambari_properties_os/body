@patch('ambari_server.serverConfiguration.get_conf_dir')
def test_update_ambari_properties_os(self, get_conf_dir_mock):
    from ambari_server import serverConfiguration
    properties = ['server.jdbc.user.name=ambari-server\n', 'server.jdbc.database_name=ambari\n', 'ambari-server.user=root\n', 'server.jdbc.user.name=ambari-server\n', 'jdk.name=jdk-6u31-linux-x64.bin\n', 'jce.name=jce_policy-6.zip\n', 'server.os_type=old_sys_os6\n', 'java.home=/usr/jdk64/jdk1.6.0_31\n']
    serverConfiguration.OS_FAMILY = 'family_of_trolls'
    serverConfiguration.OS_VERSION = '666'
    get_conf_dir_mock.return_value = '/etc/ambari-server/conf'
    (tf1, fn1) = tempfile.mkstemp()
    (tf2, fn2) = tempfile.mkstemp()
    configDefaults.AMBARI_PROPERTIES_BACKUP_FILE = fn1
    serverConfiguration.AMBARI_PROPERTIES_FILE = fn2
    f = open(configDefaults.AMBARI_PROPERTIES_BACKUP_FILE, 'w')
    try:
        for line in properties:
            f.write(line)
    finally:
        f.close()
    update_ambari_properties()
    f = open(serverConfiguration.AMBARI_PROPERTIES_FILE, 'r')
    try:
        ambari_properties_content = f.readlines()
    finally:
        f.close()
    count = 0
    for line in ambari_properties_content:
        if (not line.startswith('#')):
            count += 1
            if (line == 'server.os_type=old_sys_os6\n'):
                self.fail(('line=' + line))
            else:
                pass
    self.assertEquals(count, 9)
    result = update_ambari_properties()
    self.assertEquals(result, 0)
    pass
