@patch('platform.linux_distribution')
@patch('os.path.exists')
def test_get_os_type(self, mock_exists, mock_linux_distribution):
    mock_exists.return_value = False
    mock_linux_distribution.return_value = ('my_os', '', '')
    OSCheck._dist = get_os_distribution()
    result = OSCheck.get_os_type()
    self.assertEquals(result, 'my_os')
    mock_linux_distribution.return_value = ('', 'aaaa', 'bbbbb')
    OSCheck._dist = get_os_distribution()
    try:
        result = OSCheck.get_os_type()
        self.fail('Should throw exception in OSCheck.get_os_type()')
    except Exception as e:
        self.assertEquals('Cannot detect os type. Exiting...', str(e))
        pass
    mock_exists.return_value = True
    mock_linux_distribution.return_value = ('some_os', '', '')
    OSCheck._dist = get_os_distribution()
    result = OSCheck.get_os_type()
    self.assertEquals(result, 'oraclelinux')
    mock_exists.return_value = False
    mock_linux_distribution.return_value = ('CenToS', '', '')
    OSCheck._dist = get_os_distribution()
    result = OSCheck.get_os_type()
    self.assertEquals(result, 'centos')
    mock_exists.return_value = False
    mock_linux_distribution.return_value = ('Red Hat Enterprise Linux Server', '6.5', 'Santiago')
    OSCheck._dist = get_os_distribution()
    result = OSCheck.get_os_type()
    self.assertEquals(result, 'redhat')
    mock_linux_distribution.return_value = ('Red Hat Enterprise Linux Workstation', '6.4', 'Santiago')
    OSCheck._dist = get_os_distribution()
    result = OSCheck.get_os_type()
    self.assertEquals(result, 'redhat')
    mock_linux_distribution.return_value = ('Red Hat Enterprise Linux AS', '4', 'Nahant Update 3')
    OSCheck._dist = get_os_distribution()
    result = OSCheck.get_os_type()
    self.assertEquals(result, 'redhat')
