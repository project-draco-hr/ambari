{
  Cluster cluster=createNiceMock(Cluster.class);
  RepositoryVersionEntity repositoryVersionEntity=createNiceMock(RepositoryVersionEntity.class);
  UpgradePack upgradePack=createNiceMock(UpgradePack.class);
  StackEntity targetStack=createNiceMock(StackEntity.class);
  AmbariManagementController amc=m_injector.getInstance(AmbariManagementController.class);
  AmbariMetaInfo ambariMetaInfo=m_injector.getInstance(AmbariMetaInfo.class);
  ConfigHelper configHelper=m_injector.getInstance(ConfigHelper.class);
  RepositoryVersionDAO repositoryVersionDAO=m_injector.getInstance(RepositoryVersionDAO.class);
  EasyMock.expect(amc.getConfigHelper()).andReturn(configHelper);
  EasyMock.expect(cluster.getCurrentStackVersion()).andReturn(s_currentStackId);
  EasyMock.expect(cluster.getDesiredStackVersion()).andReturn(s_targetStackId);
  EasyMock.expect(targetStack.getStackName()).andReturn("HDP").anyTimes();
  EasyMock.expect(targetStack.getStackVersion()).andReturn("2.5").anyTimes();
  EasyMock.expect(repositoryVersionEntity.getStack()).andReturn(targetStack);
  EasyMock.expect(repositoryVersionDAO.findByStackNameAndVersion("HDP","2.5.0.0-1234")).andReturn(repositoryVersionEntity);
  EasyMock.expect(upgradePack.getGroups(Direction.UPGRADE)).andReturn(new ArrayList<Grouping>());
  EasyMock.expect(ambariMetaInfo.getServices("HDP","2.5")).andReturn(new HashMap<String,ServiceInfo>());
  Map<String,Map<String,String>> oldStackDefaultConfigurationsByType=new HashMap<>();
  oldStackDefaultConfigurationsByType.put("foo-type",new HashMap<String,String>());
  oldStackDefaultConfigurationsByType.get("foo-type").put("foo-property-1","foo-value-1");
  oldStackDefaultConfigurationsByType.get("foo-type").put("foo-property-2","foo-value-2");
  oldStackDefaultConfigurationsByType.put("bar-type",new HashMap<String,String>());
  oldStackDefaultConfigurationsByType.get("bar-type").put("bar-property-1","bar-value-1");
  Map<String,Map<String,String>> newConfigurationsByType=new HashMap<>();
  newConfigurationsByType.put("foo-type",new HashMap<String,String>());
  newConfigurationsByType.get("foo-type").put("foo-property-1","foo-value-1");
  newConfigurationsByType.get("foo-type").put("foo-property-2","foo-value-2");
  newConfigurationsByType.put("bar-type",new HashMap<String,String>());
  newConfigurationsByType.get("bar-type").put("bar-property-1","bar-value-1");
  newConfigurationsByType.get("bar-type").put("bar-property-20","bar-value-20");
  EasyMock.expect(configHelper.getDefaultProperties(EasyMock.eq(s_currentStackId),EasyMock.anyObject(Cluster.class),EasyMock.anyBoolean())).andReturn(oldStackDefaultConfigurationsByType);
  EasyMock.expect(configHelper.getDefaultProperties(EasyMock.eq(s_targetStackId),EasyMock.anyObject(Cluster.class),EasyMock.anyBoolean())).andReturn(newConfigurationsByType);
  Config currentClusterConfigFoo=createNiceMock(Config.class);
  Config currentClusterConfigBar=createNiceMock(Config.class);
  Map<String,String> existingPropertiesFoo=new HashMap<>();
  existingPropertiesFoo.put("foo-property-1","foo-value-1");
  existingPropertiesFoo.put("foo-property-99","foo-value-99");
  EasyMock.expect(currentClusterConfigFoo.getProperties()).andReturn(existingPropertiesFoo);
  Map<String,String> existingPropertiesBar=new HashMap<>();
  existingPropertiesBar.put("bar-property-1","bar-value-1");
  existingPropertiesBar.put("bar-property-99","bar-value-99");
  EasyMock.expect(currentClusterConfigBar.getProperties()).andReturn(existingPropertiesBar);
  EasyMock.expect(cluster.getDesiredConfigByType("foo-type")).andReturn(currentClusterConfigFoo);
  EasyMock.expect(cluster.getDesiredConfigByType("bar-type")).andReturn(currentClusterConfigBar);
  Map<String,DesiredConfig> existingDesiredConfigurationsByType=new HashMap<>();
  existingDesiredConfigurationsByType.put("foo-type",null);
  existingDesiredConfigurationsByType.put("bar-type",null);
  EasyMock.expect(cluster.getDesiredConfigs()).andReturn(existingDesiredConfigurationsByType);
  Capture<Map<String,Map<String,String>>> capturedArgument=EasyMock.newCapture();
  configHelper.createConfigTypes(EasyMock.anyObject(Cluster.class),EasyMock.anyObject(AmbariManagementController.class),EasyMock.capture(capturedArgument),EasyMock.anyString(),EasyMock.anyString());
  EasyMock.expectLastCall();
  replayAll();
  UpgradeResourceProvider upgradeResourceProvider=new UpgradeResourceProvider(amc);
  m_injector.injectMembers(upgradeResourceProvider);
  upgradeResourceProvider.applyStackAndProcessConfigurations("HDP",cluster,"2.5.0.0-1234",Direction.UPGRADE,upgradePack,"admin");
  Map<String,Map<String,String>> mergedConfigurations=capturedArgument.getValue();
  Map<String,String> mergedFooSite=mergedConfigurations.get("foo-type");
  Map<String,String> mergedBarSite=mergedConfigurations.get("bar-type");
  Assert.assertEquals("foo-value-1",mergedFooSite.get("foo-property-1"));
  Assert.assertEquals("foo-value-99",mergedFooSite.get("foo-property-99"));
  Assert.assertFalse(mergedFooSite.containsKey("foo-property-2"));
  Assert.assertEquals("bar-value-1",mergedBarSite.get("bar-property-1"));
  Assert.assertEquals("bar-value-20",mergedBarSite.get("bar-property-20"));
  Assert.assertEquals("bar-value-99",mergedBarSite.get("bar-property-99"));
  Assert.assertEquals(3,mergedBarSite.size());
}
