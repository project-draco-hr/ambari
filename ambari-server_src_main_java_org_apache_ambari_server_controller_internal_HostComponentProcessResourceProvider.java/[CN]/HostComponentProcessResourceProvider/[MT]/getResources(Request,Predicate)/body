{
  final Set<Map<String,Object>> requestMaps=getPropertyMaps(predicate);
  Set<String> requestedIds=getRequestPropertyIds(request,predicate);
  Set<HostComponentProcessResponse> responses=getResources(new Command<Set<HostComponentProcessResponse>>(){
    @Override public Set<HostComponentProcessResponse> invoke() throws AmbariException {
      return getHostComponentProcesses(requestMaps);
    }
  }
);
  Set<Resource> resources=new HashSet<Resource>();
  for (  HostComponentProcessResponse response : responses) {
    Resource r=new ResourceImpl(Resource.Type.HostComponentProcess);
    setResourceProperty(r,HC_PROCESS_CLUSTER_NAME_ID,response.getCluster(),requestedIds);
    setResourceProperty(r,HC_PROCESS_HOST_NAME_ID,response.getHost(),requestedIds);
    setResourceProperty(r,HC_PROCESS_COMPONENT_NAME_ID,response.getComponent(),requestedIds);
    setResourceProperty(r,HC_PROCESS_NAME_ID,response.getValueMap().get("name"),requestedIds);
    setResourceProperty(r,HC_PROCESS_STATUS_ID,response.getValueMap().get("status"),requestedIds);
    for (    Entry<String,String> entry : response.getValueMap().entrySet()) {
      if (entry.getKey().equals("name") || entry.getKey().equals("status"))       continue;
      setResourceProperty(r,"HostComponentProcess/" + entry.getKey(),entry.getValue(),requestedIds);
    }
    resources.add(r);
  }
  return resources;
}
