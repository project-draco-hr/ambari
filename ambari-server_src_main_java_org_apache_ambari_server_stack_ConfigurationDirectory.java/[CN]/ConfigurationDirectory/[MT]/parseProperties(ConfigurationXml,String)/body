{
  List<PropertyInfo> props=new ArrayList<PropertyInfo>();
  for (  PropertyInfo pi : configuration.getProperties()) {
    pi.setFilename(fileName);
    if (pi.getPropertyTypes().contains(PropertyInfo.PropertyType.VALUE_FROM_PROPERTY_FILE)) {
      if (propertiesDirFile != null && propertiesDirFile.exists() && propertiesDirFile.isDirectory()) {
        String propertyFileName=pi.getPropertyValueAttributes().getPropertyFileName();
        String propertyFileType=pi.getPropertyValueAttributes().getPropertyFileType();
        String propertyFilePath=propertiesDirFile.getAbsolutePath() + File.separator + propertyFileName;
        File propertyFile=new File(propertyFilePath);
        if (propertyFile.exists() && propertyFile.isFile()) {
          try {
            String propertyValue=FileUtils.readFileToString(propertyFile);
switch (propertyFileType.toLowerCase()) {
case "json":
              if (!JsonUtils.isValidJson(propertyValue)) {
                LOG.error("Failed to load value from property file. Property file {} is not a valid JSON file",propertyFilePath);
                break;
              }
case "text":
default :
            pi.setValue(propertyValue);
          break;
      }
    }
 catch (    IOException e) {
      LOG.error("Failed to load value from property file {}. Error Message {}",propertyFilePath,e.getMessage());
    }
  }
 else {
    LOG.error("Failed to load value from property file. Properties file {} does not exist",propertyFilePath);
  }
}
 else {
  LOG.error("Failed to load value from property file. Properties directory {} does not exist",propertiesDirFile.getAbsolutePath());
}
}
props.add(pi);
}
return props;
}
