{
  m_injector=Guice.createInjector(new InMemoryDefaultTestModule());
  m_injector.getInstance(GuiceJpaInitializer.class);
  m_helper=m_injector.getInstance(OrmTestHelper.class);
  m_clusterId=m_helper.createCluster();
  m_dao=m_injector.getInstance(AlertsDAO.class);
  m_definitionDao=m_injector.getInstance(AlertDefinitionDAO.class);
  m_serviceFactory=m_injector.getInstance(ServiceFactory.class);
  m_componentFactory=m_injector.getInstance(ServiceComponentFactory.class);
  m_schFactory=m_injector.getInstance(ServiceComponentHostFactory.class);
  m_eventPublisher=m_injector.getInstance(AmbariEventPublisher.class);
  m_clusters=m_injector.getInstance(Clusters.class);
  m_alertHelper=m_injector.getInstance(AlertDaoHelper.class);
  EventBus synchronizedBus=new EventBus();
  synchronizedBus.register(m_injector.getInstance(AlertMaintenanceModeListener.class));
  Field field=AmbariEventPublisher.class.getDeclaredField("m_eventBus");
  field.setAccessible(true);
  field.set(m_eventPublisher,synchronizedBus);
  for (int i=0; i < 5; i++) {
    AlertDefinitionEntity definition=new AlertDefinitionEntity();
    definition.setDefinitionName("Alert Definition " + i);
    definition.setServiceName("Service " + i);
    definition.setComponentName(null);
    definition.setClusterId(m_clusterId);
    definition.setHash(UUID.randomUUID().toString());
    definition.setScheduleInterval(Integer.valueOf(60));
    definition.setScope(Scope.SERVICE);
    definition.setSource("{\"type\" : \"SCRIPT\"}");
    definition.setSourceType(SourceType.SCRIPT);
    m_definitionDao.create(definition);
  }
  List<AlertDefinitionEntity> definitions=m_definitionDao.findAll();
  assertNotNull(definitions);
  assertEquals(5,definitions.size());
  calendar.clear();
  calendar.set(2014,Calendar.JANUARY,1);
  for (  AlertDefinitionEntity definition : definitions) {
    for (int i=0; i < 10; i++) {
      AlertHistoryEntity history=new AlertHistoryEntity();
      history.setServiceName(definition.getServiceName());
      history.setClusterId(m_clusterId);
      history.setAlertDefinition(definition);
      history.setAlertLabel(definition.getDefinitionName() + " " + i);
      history.setAlertText(definition.getDefinitionName() + " " + i);
      history.setAlertTimestamp(calendar.getTimeInMillis());
      history.setHostName("h1");
      history.setComponentName("Component " + i);
      history.setAlertState(AlertState.OK);
      if (i == 0 || i == 5) {
        history.setAlertState(AlertState.CRITICAL);
      }
      calendar.add(Calendar.DATE,1);
      m_dao.create(history);
    }
  }
  for (  AlertDefinitionEntity definition : definitions) {
    List<AlertHistoryEntity> alerts=m_dao.findAll();
    AlertHistoryEntity history=null;
    for (    AlertHistoryEntity alert : alerts) {
      if (definition.equals(alert.getAlertDefinition())) {
        history=alert;
      }
    }
    assertNotNull(history);
    AlertCurrentEntity current=new AlertCurrentEntity();
    current.setAlertHistory(history);
    current.setLatestTimestamp(new Date().getTime());
    current.setOriginalTimestamp(new Date().getTime() - 10800000);
    current.setMaintenanceState(MaintenanceState.OFF);
    m_dao.create(current);
  }
}
