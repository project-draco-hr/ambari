{
  injector=Guice.createInjector(new AbstractModule(){
    @Override protected void configure(){
      bind(EntityManager.class).toInstance(createNiceMock(EntityManager.class));
      bind(DBAccessor.class).toInstance(createNiceMock(DBAccessor.class));
      bind(ClusterFactory.class).toInstance(createNiceMock(ClusterFactory.class));
      bind(HostFactory.class).toInstance(createNiceMock(HostFactory.class));
      bind(SecurityHelper.class).toInstance(createNiceMock(SecurityHelper.class));
      bind(OsFamily.class).toInstance(createNiceMock(OsFamily.class));
      bind(CredentialStoreService.class).toInstance(createNiceMock(CredentialStoreService.class));
      bind(TopologyManager.class).toInstance(createNiceMock(TopologyManager.class));
      bind(AmbariMetaInfo.class).toInstance(createMock(AmbariMetaInfo.class));
      bind(Clusters.class).toInstance(createNiceMock(ClustersImpl.class));
      bind(StackManagerFactory.class).toInstance(createNiceMock(StackManagerFactory.class));
      bind(ServiceComponentHostFactory.class).toInstance(createNiceMock(ServiceComponentHostFactory.class));
      bind(StageFactory.class).to(StageFactoryImpl.class);
      bind(HostRoleCommandFactory.class).to(HostRoleCommandFactoryImpl.class);
      bind(HostDAO.class).toInstance(createNiceMock(HostDAO.class));
      bind(PersistedState.class).toInstance(createNiceMock(PersistedState.class));
    }
  }
);
  StageUtils.setTopologyManager(injector.getInstance(TopologyManager.class));
}
