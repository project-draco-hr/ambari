{
  PermissionEntity permissionEntity=createMock(PermissionEntity.class);
  expect(permissionEntity.getPermissionName()).andReturn("ADMINISTRATOR").atLeastOnce();
  expect(permissionEntity.getPermissionLabel()).andReturn("Ambari Administrator").atLeastOnce();
  PrincipalTypeEntity principalTypeEntity=createMock(PrincipalTypeEntity.class);
  expect(principalTypeEntity.getName()).andReturn("USER").atLeastOnce();
  PrincipalEntity principalEntity=createMock(PrincipalEntity.class);
  expect(principalEntity.getId()).andReturn(1L).atLeastOnce();
  expect(principalEntity.getPrincipalType()).andReturn(principalTypeEntity).atLeastOnce();
  ResourceTypeEntity resourceTypeEntity=createMock(ResourceTypeEntity.class);
  expect(resourceTypeEntity.getName()).andReturn("AMBARI").atLeastOnce();
  ResourceEntity resourceEntity=createMock(ResourceEntity.class);
  expect(resourceEntity.getResourceType()).andReturn(resourceTypeEntity).atLeastOnce();
  PrivilegeEntity privilegeEntity=createMock(PrivilegeEntity.class);
  expect(privilegeEntity.getId()).andReturn(1).atLeastOnce();
  expect(privilegeEntity.getPermission()).andReturn(permissionEntity).atLeastOnce();
  expect(privilegeEntity.getPrincipal()).andReturn(principalEntity).atLeastOnce();
  expect(privilegeEntity.getResource()).andReturn(resourceEntity).atLeastOnce();
  replay(permissionEntity,principalTypeEntity,principalEntity,resourceTypeEntity,resourceEntity,privilegeEntity);
  Map<Long,UserEntity> userEntities=new HashMap<>();
  Map<Long,GroupEntity> groupEntities=new HashMap<>();
  Map<Long,PermissionEntity> roleEntities=new HashMap<>();
  Map<Long,Object> resourceEntities=new HashMap<Long,Object>();
  AmbariPrivilegeResourceProvider provider=new AmbariPrivilegeResourceProvider();
  Resource resource=provider.toResource(privilegeEntity,userEntities,groupEntities,roleEntities,resourceEntities,provider.getPropertyIds());
  Assert.assertEquals(ResourceType.AMBARI.name(),resource.getPropertyValue(AmbariPrivilegeResourceProvider.PRIVILEGE_TYPE_PROPERTY_ID));
  verify(permissionEntity,principalTypeEntity,principalEntity,resourceTypeEntity,resourceEntity,privilegeEntity);
}
