{
  Injector injector=createInjector();
  PrincipalEntity principalEntity=createMockPrincipalEntity(2L,createMockPrincipalTypeEntity("USER"));
  ResourceTypeEntity clusterResourceTypeEntity=createMockResourceTypeEntity(ResourceType.CLUSTER);
  ResourceEntity clusterResourceEntity=createMockResourceEntity(1L,clusterResourceTypeEntity);
  PermissionEntity permissionEntity=createMockPermissionEntity("CLUSTER.OPERATOR","Cluster Operator",clusterResourceTypeEntity);
  PrivilegeEntity privilegeEntity=createMockPrivilegeEntity(2,clusterResourceEntity,principalEntity,permissionEntity);
  Set<PrivilegeEntity> privilegeEntities=new HashSet<PrivilegeEntity>();
  privilegeEntities.add(privilegeEntity);
  expect(principalEntity.getPrivileges()).andReturn(privilegeEntities).atLeastOnce();
  UserEntity userEntity=createMockUserEntity(principalEntity,"User1");
  PrivilegeDAO privilegeDAO=injector.getInstance(PrivilegeDAO.class);
  expect(privilegeDAO.exists(anyObject(PrivilegeEntity.class))).andReturn(false).atLeastOnce();
  privilegeDAO.create(anyObject(PrivilegeEntity.class));
  expectLastCall().once();
  UserDAO userDAO=injector.getInstance(UserDAO.class);
  expect(userDAO.findUserByName("User1")).andReturn(userEntity).atLeastOnce();
  PrincipalDAO principalDAO=injector.getInstance(PrincipalDAO.class);
  expect(principalDAO.findById(2L)).andReturn(principalEntity).atLeastOnce();
  expect(principalDAO.merge(principalEntity)).andReturn(principalEntity).once();
  ClusterDAO clusterDAO=injector.getInstance(ClusterDAO.class);
  expect(clusterDAO.findAll()).andReturn(Collections.<ClusterEntity>emptyList()).atLeastOnce();
  ResourceDAO resourceDAO=injector.getInstance(ResourceDAO.class);
  expect(resourceDAO.findById(1L)).andReturn(clusterResourceEntity).atLeastOnce();
  PermissionDAO permissionDAO=injector.getInstance(PermissionDAO.class);
  expect(permissionDAO.findPermissionByNameAndType("CLUSTER.OPERATOR",clusterResourceTypeEntity)).andReturn(permissionEntity).atLeastOnce();
  replayAll();
  SecurityContextHolder.getContext().setAuthentication(authentication);
  Map<String,Object> properties=new LinkedHashMap<String,Object>();
  properties.put(PrivilegeResourceProvider.PERMISSION_NAME_PROPERTY_ID,"CLUSTER.OPERATOR");
  properties.put(PrivilegeResourceProvider.PRINCIPAL_NAME_PROPERTY_ID,"User1");
  properties.put(PrivilegeResourceProvider.PRINCIPAL_TYPE_PROPERTY_ID,"USER");
  Request request=PropertyHelper.getUpdateRequest(properties,null);
  ResourceProvider provider=getResourceProvider(injector);
  provider.createResources(request);
  verifyAll();
}
