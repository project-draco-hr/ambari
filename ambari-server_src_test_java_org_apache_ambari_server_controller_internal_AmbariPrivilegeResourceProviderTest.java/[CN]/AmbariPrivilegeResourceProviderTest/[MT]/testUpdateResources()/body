{
  PrivilegeResourceProvider provider=new AmbariPrivilegeResourceProvider();
  PrivilegeEntity privilegeEntity=createNiceMock(PrivilegeEntity.class);
  ResourceEntity resourceEntity=createNiceMock(ResourceEntity.class);
  ResourceTypeEntity resourceTypeEntity=createNiceMock(ResourceTypeEntity.class);
  Request request=createNiceMock(Request.class);
  PermissionEntity permissionEntity=createNiceMock(PermissionEntity.class);
  PrincipalEntity principalEntity=createNiceMock(PrincipalEntity.class);
  UserEntity userEntity=createNiceMock(UserEntity.class);
  expect(privilegeDAO.findByResourceId(1L)).andReturn(Collections.singletonList(privilegeEntity)).anyTimes();
  privilegeDAO.remove(privilegeEntity);
  EasyMock.expectLastCall().anyTimes();
  expect(request.getProperties()).andReturn(new HashSet<Map<String,Object>>(){
{
      add(new HashMap<String,Object>(){
{
          put(PrivilegeResourceProvider.PERMISSION_NAME_PROPERTY_ID,"READ");
          put(PrivilegeResourceProvider.PRINCIPAL_NAME_PROPERTY_ID,"admin");
          put(PrivilegeResourceProvider.PRINCIPAL_TYPE_PROPERTY_ID,"user");
        }
      }
);
    }
  }
).anyTimes();
  expect(clusterDAO.findAll()).andReturn(Collections.<ClusterEntity>emptyList());
  expect(permissionDAO.findPermissionByNameAndType(EasyMock.eq("READ"),EasyMock.<ResourceTypeEntity>anyObject())).andReturn(permissionEntity);
  expect(resourceDAO.findById(EasyMock.anyLong())).andReturn(resourceEntity);
  expect(userDAO.findLocalUserByName("admin")).andReturn(userEntity);
  expect(principalDAO.findById(EasyMock.anyLong())).andReturn(principalEntity);
  expect(userEntity.getPrincipal()).andReturn(principalEntity).anyTimes();
  expect(principalEntity.getId()).andReturn(2L).anyTimes();
  expect(permissionEntity.getPermissionName()).andReturn("READ").anyTimes();
  expect(privilegeEntity.getPermission()).andReturn(permissionEntity).anyTimes();
  expect(resourceTypeEntity.getId()).andReturn(3).anyTimes();
  expect(resourceEntity.getResourceType()).andReturn(resourceTypeEntity).anyTimes();
  expect(permissionEntity.getResourceType()).andReturn(resourceTypeEntity).anyTimes();
  expect(privilegeEntity.getPrincipal()).andReturn(principalEntity).anyTimes();
  privilegeDAO.create(EasyMock.<PrivilegeEntity>anyObject());
  EasyMock.expectLastCall().anyTimes();
  replay(privilegeEntity,privilegeDAO,request,permissionDAO,permissionEntity,resourceEntity,resourceDAO,principalEntity,principalDAO,userDAO,userEntity,resourceTypeEntity,clusterDAO);
  provider.updateResources(request,null);
  verify(privilegeEntity,privilegeDAO,request,permissionDAO,permissionEntity,resourceEntity,resourceDAO,principalEntity,principalDAO,userDAO,userEntity,resourceTypeEntity);
}
