{
  Injector injector=createInjector();
  PrincipalEntity principalEntity1=createMockPrincipalEntity(1L,createMockPrincipalTypeEntity("USER"));
  PrincipalEntity principalEntity2=createMockPrincipalEntity(2L,createMockPrincipalTypeEntity("USER"));
  ResourceTypeEntity clusterResourceTypeEntity=createMockResourceTypeEntity(ResourceType.CLUSTER);
  ResourceEntity clusterResourceEntity=createMockResourceEntity(1L,clusterResourceTypeEntity);
  PermissionEntity permissionEntity=createMockPermissionEntity("CLUSTER.OPERATOR","Cluster Operator",clusterResourceTypeEntity);
  PrivilegeEntity privilegeEntity1=createMockPrivilegeEntity(1,clusterResourceEntity,principalEntity1,permissionEntity);
  PrivilegeEntity privilegeEntity2=createMockPrivilegeEntity(2,clusterResourceEntity,principalEntity2,permissionEntity);
  Set<PrivilegeEntity> privilege1Entities=new HashSet<PrivilegeEntity>();
  privilege1Entities.add(privilegeEntity1);
  Set<PrivilegeEntity> privilege2Entities=new HashSet<PrivilegeEntity>();
  privilege2Entities.add(privilegeEntity2);
  List<PrivilegeEntity> privilegeEntities=new LinkedList<PrivilegeEntity>();
  privilegeEntities.addAll(privilege1Entities);
  privilegeEntities.addAll(privilege2Entities);
  expect(principalEntity2.getPrivileges()).andReturn(privilege2Entities).atLeastOnce();
  UserEntity userEntity=createMockUserEntity(principalEntity1,requestedUsername);
  PrivilegeDAO privilegeDAO=injector.getInstance(PrivilegeDAO.class);
  expect(privilegeDAO.findByResourceId(1L)).andReturn(privilegeEntities).atLeastOnce();
  privilegeDAO.remove(privilegeEntity2);
  expectLastCall().atLeastOnce();
  UserDAO userDAO=injector.getInstance(UserDAO.class);
  expect(userDAO.findUserByName(requestedUsername)).andReturn(userEntity).atLeastOnce();
  PrincipalDAO principalDAO=injector.getInstance(PrincipalDAO.class);
  expect(principalDAO.findById(1L)).andReturn(principalEntity1).atLeastOnce();
  expect(principalDAO.merge(principalEntity2)).andReturn(principalEntity2).atLeastOnce();
  ClusterDAO clusterDAO=injector.getInstance(ClusterDAO.class);
  expect(clusterDAO.findAll()).andReturn(Collections.<ClusterEntity>emptyList()).atLeastOnce();
  ResourceDAO resourceDAO=injector.getInstance(ResourceDAO.class);
  expect(resourceDAO.findById(1L)).andReturn(clusterResourceEntity).atLeastOnce();
  PermissionDAO permissionDAO=injector.getInstance(PermissionDAO.class);
  expect(permissionDAO.findPermissionByNameAndType("CLUSTER.OPERATOR",clusterResourceTypeEntity)).andReturn(permissionEntity).atLeastOnce();
  replayAll();
  SecurityContextHolder.getContext().setAuthentication(authentication);
  Map<String,Object> properties=new LinkedHashMap<String,Object>();
  properties.put(PrivilegeResourceProvider.PERMISSION_NAME_PROPERTY_ID,"CLUSTER.OPERATOR");
  properties.put(PrivilegeResourceProvider.PRINCIPAL_NAME_PROPERTY_ID,requestedUsername);
  properties.put(PrivilegeResourceProvider.PRINCIPAL_TYPE_PROPERTY_ID,"USER");
  Request request=PropertyHelper.getUpdateRequest(properties,null);
  ResourceProvider provider=getResourceProvider(injector);
  provider.updateResources(request,createPredicate(1L));
  verifyAll();
}
