{
  List<PrivilegeEntity> privilegeEntities=new LinkedList<PrivilegeEntity>();
  PrivilegeEntity privilegeEntity=createNiceMock(PrivilegeEntity.class);
  ResourceEntity resourceEntity=createNiceMock(ResourceEntity.class);
  ResourceTypeEntity resourceTypeEntity=createNiceMock(ResourceTypeEntity.class);
  UserEntity userEntity=createNiceMock(UserEntity.class);
  PrincipalEntity principalEntity=createNiceMock(PrincipalEntity.class);
  PrincipalTypeEntity principalTypeEntity=createNiceMock(PrincipalTypeEntity.class);
  PermissionEntity permissionEntity=createNiceMock(PermissionEntity.class);
  List<PrincipalEntity> principalEntities=new LinkedList<PrincipalEntity>();
  principalEntities.add(principalEntity);
  List<UserEntity> userEntities=new LinkedList<UserEntity>();
  userEntities.add(userEntity);
  privilegeEntities.add(privilegeEntity);
  expect(privilegeDAO.findAll()).andReturn(privilegeEntities);
  expect(privilegeEntity.getResource()).andReturn(resourceEntity).anyTimes();
  expect(privilegeEntity.getPrincipal()).andReturn(principalEntity).anyTimes();
  expect(privilegeEntity.getPermission()).andReturn(permissionEntity).anyTimes();
  expect(resourceEntity.getId()).andReturn(1L).anyTimes();
  expect(resourceEntity.getResourceType()).andReturn(resourceTypeEntity).anyTimes();
  expect(resourceTypeEntity.getId()).andReturn(1).anyTimes();
  expect(principalEntity.getId()).andReturn(1L).anyTimes();
  expect(userEntity.getPrincipal()).andReturn(principalEntity).anyTimes();
  expect(userEntity.getUserName()).andReturn("joe").anyTimes();
  expect(permissionEntity.getPermissionName()).andReturn("AMBARI.ADMIN").anyTimes();
  expect(principalEntity.getPrincipalType()).andReturn(principalTypeEntity).anyTimes();
  expect(principalTypeEntity.getName()).andReturn("USER").anyTimes();
  expect(userDAO.findUsersByPrincipal(principalEntities)).andReturn(userEntities);
  expect(clusterDAO.findAll()).andReturn(Collections.<ClusterEntity>emptyList());
  expect(groupDAO.findGroupsByPrincipal(principalEntities)).andReturn(Collections.<GroupEntity>emptyList());
  replay(privilegeDAO,userDAO,groupDAO,principalDAO,permissionDAO,resourceDAO,clusterDAO,privilegeEntity,resourceEntity,resourceTypeEntity,userEntity,principalEntity,permissionEntity,principalTypeEntity);
  PrivilegeResourceProvider provider=new AmbariPrivilegeResourceProvider();
  Set<Resource> resources=provider.getResources(PropertyHelper.getReadRequest(),null);
  Assert.assertEquals(1,resources.size());
  Resource resource=resources.iterator().next();
  Assert.assertEquals("AMBARI.ADMIN",resource.getPropertyValue(AmbariPrivilegeResourceProvider.PERMISSION_NAME_PROPERTY_ID));
  Assert.assertEquals("joe",resource.getPropertyValue(AmbariPrivilegeResourceProvider.PRINCIPAL_NAME_PROPERTY_ID));
  Assert.assertEquals("USER",resource.getPropertyValue(AmbariPrivilegeResourceProvider.PRINCIPAL_TYPE_PROPERTY_ID));
  verify(privilegeDAO,userDAO,groupDAO,principalDAO,permissionDAO,resourceDAO,privilegeEntity,resourceEntity,userEntity,principalEntity,permissionEntity,principalTypeEntity);
}
