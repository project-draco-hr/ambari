def get_stack_feature_version(config):
    '\n  Uses the specified ConfigDictionary to determine which version to use for stack\n  feature checks.\n\n  Normally, the commandParams/version is the correct value to use as it represent the 4-digit\n  exact stack version/build being upgrade to or downgraded to. However, there are cases where the\n  commands being sent are to stop running services which are on a different stack version from the\n  version being upgraded/downgraded to. As a result, the configurations sent for these specific\n  stop commands do not match commandParams/version.\n  :param config:  a ConfigDictionary instance to extra the hostLevelParams\n                  and commandParams from.\n  :return: the version to use when checking stack features.\n  '
    from resource_management.libraries.functions.default import default
    if (('hostLevelParams' not in config) or ('commandParams' not in config)):
        raise Fail('Unable to determine the correct version since hostLevelParams and commandParams were not present in the configuration dictionary')
    stack_version = config['hostLevelParams']['stack_version']
    version = default('/commandParams/version', None)
    current_cluster_version = default('/hostLevelParams/current_version', None)
    upgrade_direction = default('/commandParams/upgrade_direction', None)
    version_for_stack_feature_checks = (version if (version is not None) else stack_version)
    if (upgrade_direction is None):
        Logger.info('Stack Feature Version Info: stack_version={0}, version={1}, current_cluster_version={2} -> {3}'.format(stack_version, version, current_cluster_version, version_for_stack_feature_checks))
        return version_for_stack_feature_checks
    is_stop_command = _is_stop_command(config)
    if (not is_stop_command):
        Logger.info('Stack Feature Version Info: stack_version={0}, version={1}, current_cluster_version={2}, upgrade_direction={3} -> {4}'.format(stack_version, version, current_cluster_version, upgrade_direction, version_for_stack_feature_checks))
        return version_for_stack_feature_checks
    original_stack = default('/commandParams/original_stack', None)
    target_stack = default('/commandParams/target_stack', None)
    downgrade_from_version = default('/commandParams/downgrade_from_version', None)
    if (upgrade_direction.lower() == Direction.DOWNGRADE.lower()):
        if (downgrade_from_version is None):
            Logger.warning('Unable to determine the version being downgraded when stopping services, using {0}'.format(version_for_stack_feature_checks))
        else:
            version_for_stack_feature_checks = downgrade_from_version
    elif (current_cluster_version is not None):
        version_for_stack_feature_checks = current_cluster_version
    elif (original_stack is not None):
        version_for_stack_feature_checks = original_stack
    else:
        version_for_stack_feature_checks = (version if (version is not None) else stack_version)
    Logger.info('Stack Feature Version Info: stack_version={0}, version={1}, current_cluster_version={2}, upgrade_direction={3}, original_stack={4}, target_stack={5}, downgrade_from_version={6}, stop_command={7} -> {8}'.format(stack_version, version, current_cluster_version, upgrade_direction, original_stack, target_stack, downgrade_from_version, is_stop_command, version_for_stack_feature_checks))
    return version_for_stack_feature_checks
