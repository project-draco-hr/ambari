{
  this.cluster=cluster;
  injector.injectMembers(this);
  this.requestScheduleEntity=requestScheduleEntity;
  batch=new Batch();
  schedule=new Schedule();
  BatchSettings batchSettings=new BatchSettings();
  batchSettings.setBatchSeparationInMinutes(requestScheduleEntity.getBatchSeparationInMinutes());
  batchSettings.setTaskFailureToleranceLimit(requestScheduleEntity.getBatchTolerationLimit());
  batch.setBatchSettings(batchSettings);
  Collection<RequestScheduleBatchRequestEntity> batchRequestEntities=requestScheduleEntity.getRequestScheduleBatchRequestEntities();
  if (batchRequestEntities != null) {
    for (    RequestScheduleBatchRequestEntity batchRequestEntity : batchRequestEntities) {
      BatchRequest batchRequest=new BatchRequest();
      batchRequest.setOrderId(batchRequestEntity.getBatchId());
      batchRequest.setType(BatchRequest.Type.valueOf(batchRequestEntity.getRequestType()));
      batchRequest.setUri(batchRequestEntity.getRequestUri());
      batchRequest.setStatus(batchRequestEntity.getRequestStatus());
      batchRequest.setReturnCode(batchRequestEntity.getReturnCode());
      batchRequest.setResponseMsg(batchRequestEntity.getReturnMessage());
      batch.getBatchRequests().add(batchRequest);
    }
  }
  schedule.setDayOfWeek(requestScheduleEntity.getDayOfWeek());
  schedule.setDaysOfMonth(requestScheduleEntity.getDaysOfMonth());
  schedule.setMinutes(requestScheduleEntity.getMinutes());
  schedule.setHours(requestScheduleEntity.getHours());
  schedule.setMonth(requestScheduleEntity.getMonth());
  schedule.setYear(requestScheduleEntity.getYear());
  schedule.setStartTime(requestScheduleEntity.getStartTime());
  schedule.setEndTime(requestScheduleEntity.getEndTime());
  isPersisted=true;
}
