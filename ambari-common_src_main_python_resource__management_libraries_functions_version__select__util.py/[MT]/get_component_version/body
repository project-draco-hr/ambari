def get_component_version(stack_name, component_name):
    '\n  For any stack name, returns the version currently installed for a given component.\n  Because each stack name may have different logic, the input is a generic dictionary.\n  :param stack_name: one of HDP, HDPWIN, BIGTOP, PHD, etc. usually retrieved from\n  the command-#.json file\'s ["hostLevelParams"]["stack_name"]\n  :param component_name: Component name as a string necessary to get the version\n  :return: Returns a string if found, e.g., 2.2.1.0-2175, otherwise, returns None\n  '
    version = None
    if ((stack_name is None) or (component_name is None)):
        Logger.error(('Could not determine component version because of the parameters is empty. stack_name: %s, component_name: %s' % (str(stack_name), str(component_name))))
        return version
    out = None
    code = (-1)
    if (not stack_name):
        Logger.error('Stack name not provided')
    elif (not component_name):
        Logger.error('Component name not provided')
    else:
        (stack_selector_name, stack_selector_path, stack_selector_package) = stack_tools.get_stack_tool(stack_tools.STACK_SELECTOR_NAME)
        if (stack_selector_name and stack_selector_path and os.path.exists(stack_selector_path)):
            tmpfile = tempfile.NamedTemporaryFile()
            get_stack_comp_version_cmd = ''
            try:
                with open(tmpfile.name, 'r') as file:
                    get_stack_comp_version_cmd = ('%s status %s > %s' % (stack_selector_path, component_name, tmpfile.name))
                    (code, stdoutdata) = shell.call(get_stack_comp_version_cmd, quiet=True)
                    out = file.read()
                if ((code != 0) or (out is None)):
                    raise Exception('Code is nonzero or output is empty')
                Logger.debug(('Command: %s\nOutput: %s' % (get_stack_comp_version_cmd, str(out))))
                matches = re.findall('([\\d\\.]+\\-\\d+)', out)
                version = (matches[0] if (matches and (len(matches) > 0)) else None)
            except Exception as e:
                Logger.error(("Could not determine stack version for component %s by calling '%s'. Return Code: %s, Output: %s." % (component_name, get_stack_comp_version_cmd, str(code), str(out))))
        else:
            Logger.error(('Could not find stack selector for stack: %s' % str(stack_name)))
    return version
