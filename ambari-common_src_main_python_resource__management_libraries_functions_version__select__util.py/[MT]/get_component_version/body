def get_component_version(stack_name, component_name):
    '\n  For any stack name, returns the version currently installed for a given component.\n  Because each stack name may have different logic, the input is a generic dictionary.\n  :param stack_name: one of HDP, HDPWIN, BIGTOP, PHD, etc. usually retrieved from\n  the command-#.json file\'s ["hostLevelParams"]["stack_name"]\n  :param component_name: Component name as a string necessary to get the version\n  :return: Returns a string if found, e.g., 2.2.1.0-2175, otherwise, returns None\n  '
    version = None
    if ((stack_name is None) or (component_name is None)):
        Logger.error(('Could not determine component version because of the parameters is empty. stack_name: %s, component_name: %s' % (str(stack_name), str(component_name))))
        return version
    out = None
    code = (-1)
    if (stack_name == 'HDP'):
        tmpfile = tempfile.NamedTemporaryFile()
        get_hdp_comp_version_cmd = ''
        try:
            with open(tmpfile.name, 'r') as file:
                get_hdp_comp_version_cmd = ('/usr/bin/hdp-select status %s > %s' % (component_name, tmpfile.name))
                (code, stdoutdata) = shell.call(get_hdp_comp_version_cmd)
                out = file.read()
            if ((code != 0) or (out is None)):
                raise Exception('Code is nonzero or output is empty')
            Logger.info(('Command: %s\nOutput: %s' % (get_hdp_comp_version_cmd, str(out))))
            matches = re.findall('([\\d\\.]+\\-\\d+)', out)
            version = (matches[0] if (matches and (len(matches) > 0)) else None)
        except Exception as e:
            Logger.error(("Could not determine HDP version for component %s by calling '%s'. Return Code: %s, Output: %s." % (component_name, get_hdp_comp_version_cmd, str(code), str(out))))
    elif (stack_name == 'HDPWIN'):
        pass
    elif (stack_name == 'GlusterFS'):
        pass
    elif (stack_name == 'PHD'):
        pass
    elif (stack_name == 'BIGTOP'):
        pass
    else:
        Logger.error(('Could not find a stack for stack name: %s' % str(stack_name)))
    return version
