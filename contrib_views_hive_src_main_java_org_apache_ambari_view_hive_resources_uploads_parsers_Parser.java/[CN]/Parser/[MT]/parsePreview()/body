{
  LOG.info("generating preview for : {}",this.parseOptions);
  ArrayList<Row> previewRows;
  List<ColumnDescription> header;
  try {
    numberOfPreviewRows=(Integer)parseOptions.getOption(ParseOptions.OPTIONS_NUMBER_OF_PREVIEW_ROWS);
  }
 catch (  Exception e) {
    LOG.debug("Illegal number of preview columns supplied {}",parseOptions.getOption(ParseOptions.OPTIONS_NUMBER_OF_PREVIEW_ROWS));
  }
  int numberOfRows=numberOfPreviewRows;
  previewRows=new ArrayList<>(numberOfPreviewRows);
  Row headerRow=null;
  Integer numOfCols=null;
  if (parseOptions.getOption(ParseOptions.OPTIONS_HEADER) != null && (parseOptions.getOption(ParseOptions.OPTIONS_HEADER).equals(ParseOptions.HEADER.FIRST_RECORD.toString()) || parseOptions.getOption(ParseOptions.OPTIONS_HEADER).equals(ParseOptions.HEADER.EMBEDDED.toString()))) {
    headerRow=extractHeader();
    numOfCols=headerRow.getRow().length;
  }
  Row r;
  if (iterator().hasNext()) {
    r=iterator().next();
    if (null == numOfCols) {
      numOfCols=r.getRow().length;
    }
  }
 else {
    LOG.error("No rows found in the file. returning error.");
    throw new NoSuchElementException("No rows in the file.");
  }
  while (true) {
    Object[] values=r.getRow();
    Object[] newValues=new Object[numOfCols];
    for (int colNum=0; colNum < numOfCols; colNum++) {
      if (colNum < values.length) {
        newValues[colNum]=values[colNum];
      }
 else {
        newValues[colNum]=null;
      }
    }
    previewRows.add(new Row(newValues));
    numberOfRows--;
    if (numberOfRows <= 0 || !iterator().hasNext())     break;
    r=iterator().next();
  }
  if (previewRows.size() <= 0) {
    LOG.error("No rows found in the file. returning error.");
    throw new NoSuchElementException("Does not contain any rows.");
  }
  header=generateHeader(headerRow,previewRows,numOfCols);
  return new PreviewData(header,previewRows);
}
