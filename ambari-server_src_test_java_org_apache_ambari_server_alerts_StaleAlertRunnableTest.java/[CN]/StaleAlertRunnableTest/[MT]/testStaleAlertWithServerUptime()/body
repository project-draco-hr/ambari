{
  reset(m_runtimeMXBean);
  expect(m_runtimeMXBean.getUptime()).andReturn(1000L);
  replay(m_runtimeMXBean);
  AlertDefinitionEntity definition=new AlertDefinitionEntity();
  definition.setClusterId(CLUSTER_ID);
  definition.setDefinitionName("foo-definition");
  definition.setServiceName("HDFS");
  definition.setComponentName("NAMENODE");
  definition.setEnabled(true);
  definition.setScheduleInterval(5);
  AlertCurrentEntity current1=createNiceMock(AlertCurrentEntity.class);
  AlertHistoryEntity history1=createNiceMock(AlertHistoryEntity.class);
  expect(current1.getAlertHistory()).andReturn(history1).atLeastOnce();
  expect(history1.getAlertDefinition()).andReturn(definition).atLeastOnce();
  long now=System.currentTimeMillis();
  long staleTime=now - (definition.getScheduleInterval() * 60 * 1000* 3);
  expect(current1.getMaintenanceState()).andReturn(MaintenanceState.OFF).atLeastOnce();
  expect(current1.getLatestTimestamp()).andReturn(staleTime).atLeastOnce();
  replay(current1,history1);
  m_currentAlerts.add(current1);
  assertEquals(0,m_listener.getAlertEventReceivedCount(AlertReceivedEvent.class));
  StaleAlertRunnable runnable=new StaleAlertRunnable(m_definition.getDefinitionName());
  m_injector.injectMembers(runnable);
  runnable.run();
  verify(m_runtimeMXBean);
  assertEquals(1,m_listener.getAlertEventReceivedCount(AlertReceivedEvent.class));
  List<AlertEvent> events=m_listener.getAlertEventInstances(AlertReceivedEvent.class);
  assertEquals(1,events.size());
  AlertReceivedEvent event=(AlertReceivedEvent)events.get(0);
  Alert alert=event.getAlert();
  assertEquals("AMBARI",alert.getService());
  assertEquals("AMBARI_SERVER",alert.getComponent());
  assertEquals(AlertState.OK,alert.getState());
  assertEquals(DEFINITION_NAME,alert.getName());
  m_listener.reset();
  long uptime=definition.getScheduleInterval() * 60 * 1000* 4;
  reset(m_runtimeMXBean);
  expect(m_runtimeMXBean.getUptime()).andReturn(uptime);
  replay(m_runtimeMXBean);
  runnable.run();
  events=m_listener.getAlertEventInstances(AlertReceivedEvent.class);
  assertEquals(1,events.size());
  event=(AlertReceivedEvent)events.get(0);
  alert=event.getAlert();
  assertEquals("AMBARI",alert.getService());
  assertEquals("AMBARI_SERVER",alert.getComponent());
  assertEquals(AlertState.CRITICAL,alert.getState());
  assertEquals(DEFINITION_NAME,alert.getName());
  assertEquals(1,m_listener.getAlertEventReceivedCount(AlertReceivedEvent.class));
}
