{
  AlertCurrentEntity current1=createNiceMock(AlertCurrentEntity.class);
  AlertHistoryEntity history1=createNiceMock(AlertHistoryEntity.class);
  AlertCurrentEntity current2=createNiceMock(AlertCurrentEntity.class);
  AlertHistoryEntity history2=createNiceMock(AlertHistoryEntity.class);
  expect(current1.getAlertHistory()).andReturn(history1).atLeastOnce();
  expect(history1.getAlertDefinition()).andReturn(m_definition).atLeastOnce();
  expect(current2.getAlertHistory()).andReturn(history2).atLeastOnce();
  expect(history2.getAlertDefinition()).andReturn(m_definition).atLeastOnce();
  expect(current1.getMaintenanceState()).andReturn(MaintenanceState.ON).atLeastOnce();
  expect(current1.getLatestTimestamp()).andReturn(1L).atLeastOnce();
  expect(current2.getMaintenanceState()).andReturn(MaintenanceState.OFF).atLeastOnce();
  expect(current2.getLatestTimestamp()).andReturn(System.currentTimeMillis()).atLeastOnce();
  replay(current1,history1,current2,history2);
  m_currentAlerts.add(current1);
  m_currentAlerts.add(current2);
  assertEquals(0,m_listener.getAlertEventReceivedCount(AlertReceivedEvent.class));
  StaleAlertRunnable runnable=new StaleAlertRunnable();
  m_injector.injectMembers(runnable);
  runnable.run();
  assertEquals(1,m_listener.getAlertEventReceivedCount(AlertReceivedEvent.class));
  List<AlertEvent> events=m_listener.getAlertEventInstances(AlertReceivedEvent.class);
  assertEquals(1,events.size());
  AlertReceivedEvent event=(AlertReceivedEvent)events.get(0);
  Alert alert=event.getAlert();
  assertEquals("AMBARI",alert.getService());
  assertEquals("AMBARI_SERVER",alert.getComponent());
  assertEquals(AlertState.OK,alert.getState());
  assertEquals(DEFINITION_NAME,alert.getName());
  verify(m_definition,m_cluster,m_clusters,m_definitionDao);
}
