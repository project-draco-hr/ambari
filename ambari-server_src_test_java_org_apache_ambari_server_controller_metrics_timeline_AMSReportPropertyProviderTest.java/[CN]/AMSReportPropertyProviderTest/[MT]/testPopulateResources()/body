{
  TestStreamProvider streamProvider=new TestStreamProvider(SINGLE_HOST_METRICS_FILE_PATH);
  injectCacheEntryFactoryWithStreamProvider(streamProvider);
  TestMetricHostProvider metricHostProvider=new TestMetricHostProvider();
  ComponentSSLConfiguration sslConfiguration=mock(ComponentSSLConfiguration.class);
  Map<String,Map<String,PropertyInfo>> propertyIds=PropertyHelper.getMetricPropertyIds(Resource.Type.Cluster);
  AMSReportPropertyProvider propertyProvider=new AMSReportPropertyProvider(propertyIds,streamProvider,sslConfiguration,cacheProvider,metricHostProvider,CLUSTER_NAME_PROPERTY_ID);
  String propertyId=PropertyHelper.getPropertyId("metrics/cpu","User");
  Resource resource=new ResourceImpl(Resource.Type.Cluster);
  resource.setProperty(CLUSTER_NAME_PROPERTY_ID,"c1");
  Map<String,TemporalInfo> temporalInfoMap=new HashMap<String,TemporalInfo>();
  temporalInfoMap.put(propertyId,new TemporalInfoImpl(1416445244800L,1416448936474L,1L));
  Request request=PropertyHelper.getReadRequest(Collections.singleton(propertyId),temporalInfoMap);
  Set<Resource> resources=propertyProvider.populateResources(Collections.singleton(resource),request,null);
  Assert.assertEquals(1,resources.size());
  Resource res=resources.iterator().next();
  Map<String,Object> properties=PropertyHelper.getProperties(resources.iterator().next());
  Assert.assertNotNull(properties);
  URIBuilder uriBuilder=AMSPropertyProvider.getAMSUriBuilder("localhost",6188,false);
  uriBuilder.addParameter("metricNames","cpu_user");
  uriBuilder.addParameter("appId","HOST");
  uriBuilder.addParameter("startTime","1416445244800");
  uriBuilder.addParameter("endTime","1416448936474");
  Assert.assertEquals(uriBuilder.toString(),streamProvider.getLastSpec());
  Number[][] val=(Number[][])res.getPropertyValue("metrics/cpu/User");
  Assert.assertEquals(111,val.length);
}
