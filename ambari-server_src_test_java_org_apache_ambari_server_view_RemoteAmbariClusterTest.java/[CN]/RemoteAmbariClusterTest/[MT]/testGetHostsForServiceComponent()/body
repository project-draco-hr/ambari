{
  final String componentHostsString="{\"host_components\": [{" + "\"HostRoles\": {" + "\"cluster_name\": \"Ambari\","+ "\"host_name\": \"host1\"}}, {"+ "\"HostRoles\": {"+ "\"cluster_name\": \"Ambari\","+ "\"host_name\": \"host2\"}}]}";
  AmbariStreamProvider clusterStreamProvider=createNiceMock(AmbariStreamProvider.class);
  String service="SERVICE";
  String component="COMPONENT";
  expect(clusterStreamProvider.readFrom(eq(String.format("services/%s/components/%s?" + "fields=host_components/HostRoles/host_name",service,component)),eq("GET"),(String)isNull(),(Map<String,String>)anyObject())).andReturn(new ByteArrayInputStream(componentHostsString.getBytes()));
  RemoteAmbariClusterEntity entity=createNiceMock(RemoteAmbariClusterEntity.class);
  replay(clusterStreamProvider,entity);
  RemoteAmbariCluster cluster=new RemoteAmbariCluster("Test",clusterStreamProvider);
  List<String> hosts=cluster.getHostsForServiceComponent(service,component);
  Assert.assertEquals(2,hosts.size());
  Assert.assertEquals("host1",hosts.get(0));
  Assert.assertEquals("host2",hosts.get(1));
  verify(clusterStreamProvider,entity);
}
