def hdfs_repo_properties(params):
    config_dict = dict()
    config_dict['username'] = params.config['configurations']['ranger-hdfs-plugin-properties']['REPOSITORY_CONFIG_USERNAME']
    config_dict['password'] = params.config['configurations']['ranger-hdfs-plugin-properties']['REPOSITORY_CONFIG_PASSWORD']
    config_dict['hadoop.security.authentication'] = params.config['configurations']['core-site']['hadoop.security.authentication']
    config_dict['hadoop.security.authorization'] = params.config['configurations']['core-site']['hadoop.security.authorization']
    config_dict['fs.default.name'] = params.config['configurations']['core-site']['fs.defaultFS']
    config_dict['hadoop.security.auth_to_local'] = params.config['configurations']['core-site']['hadoop.security.auth_to_local']
    config_dict['hadoop.rpc.protection'] = params.config['configurations']['ranger-hdfs-plugin-properties']['hadoop.rpc.protection']
    config_dict['commonNameForCertificate'] = params.config['configurations']['ranger-hdfs-plugin-properties']['common.name.for.certificate']
    if params.config['configurations']['cluster-env']['security_enabled']:
        config_dict['dfs.datanode.kerberos.principal'] = params.config['configurations']['hdfs-site']['dfs.datanode.kerberos.principal']
        config_dict['dfs.namenode.kerberos.principal'] = params.config['configurations']['hdfs-site']['dfs.namenode.kerberos.principal']
        config_dict['dfs.secondary.namenode.kerberos.principal'] = params.config['configurations']['hdfs-site']['dfs.secondary.namenode.kerberos.principal']
    else:
        config_dict['dfs.datanode.kerberos.principal'] = ''
        config_dict['dfs.namenode.kerberos.principal'] = ''
        config_dict['dfs.secondary.namenode.kerberos.principal'] = ''
    repo = dict()
    repo['isActive'] = 'true'
    repo['config'] = json.dumps(config_dict)
    repo['description'] = 'hdfs repo'
    repo['name'] = (params.config['clusterName'] + '_hadoop')
    repo['repositoryType'] = 'Hdfs'
    repo['assetType'] = '1'
    data = json.dumps(repo)
    return data
