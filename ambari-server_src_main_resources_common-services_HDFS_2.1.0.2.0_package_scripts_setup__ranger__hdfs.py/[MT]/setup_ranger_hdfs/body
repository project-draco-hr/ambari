def setup_ranger_hdfs():
    import params
    if params.has_ranger_admin:
        environment = {'no_proxy': format('{params.ambari_server_hostname}'), }
        Execute(('curl', '-kf', '-x', '', '--retry', '10', params.driver_curl_source, '-o', params.downloaded_custom_connector), not_if=format('test -f {params.downloaded_custom_connector}'), path=['/bin', '/usr/bin/'], environment=environment, sudo=True)
        if (not os.path.isfile(params.driver_curl_target)):
            Execute(('cp', '--remove-destination', params.downloaded_custom_connector, params.driver_curl_target), path=['/bin', '/usr/bin/'], sudo=True)
        try:
            command = 'hdp-select status hadoop-client'
            (return_code, hdp_output) = shell.call(command, timeout=20)
        except Exception as e:
            Logger.error(str(e))
            raise Fail('Unable to execute hdp-select command to retrieve the version.')
        if (return_code != 0):
            raise Fail('Unable to determine the current version because of a non-zero return code of {0}'.format(str(return_code)))
        hdp_version = re.sub('hadoop-client - ', '', hdp_output)
        match = re.match('[0-9]+.[0-9]+.[0-9]+.[0-9]+-[0-9]+', hdp_version)
        if (match is None):
            raise Fail('Failed to get extracted version')
        file_path = (('/usr/hdp/' + hdp_version) + '/ranger-hdfs-plugin/install.properties')
        ranger_hdfs_dict = ranger_hdfs_properties()
        hdfs_repo_data = hdfs_repo_properties()
        write_properties_to_file(file_path, ranger_hdfs_dict)
        if params.enable_ranger_hdfs:
            cmd = format('cd /usr/hdp/{hdp_version}/ranger-hdfs-plugin/ && sh enable-hdfs-plugin.sh')
            ranger_adm_obj = Rangeradmin(url=ranger_hdfs_dict['POLICY_MGR_URL'])
            (response_code, response_recieved) = ranger_adm_obj.check_ranger_login_urllib2((ranger_hdfs_dict['POLICY_MGR_URL'] + '/login.jsp'), 'test:test')
            if ((response_code is not None) and (response_code == 200)):
                (ambari_ranger_admin, ambari_ranger_password) = ranger_adm_obj.create_ambari_admin_user(params.ambari_ranger_admin, params.ambari_ranger_password, params.admin_uname_password)
                ambari_username_password_for_ranger = ((ambari_ranger_admin + ':') + ambari_ranger_password)
                if ((ambari_ranger_admin != '') and (ambari_ranger_password != '')):
                    repo = ranger_adm_obj.get_repository_by_name_urllib2(ranger_hdfs_dict['REPOSITORY_NAME'], 'hdfs', 'true', ambari_username_password_for_ranger)
                    if (repo and (repo['name'] == ranger_hdfs_dict['REPOSITORY_NAME'])):
                        Logger.info('HDFS Repository exist')
                    else:
                        response = ranger_adm_obj.create_repository_urllib2(hdfs_repo_data, ambari_username_password_for_ranger, params.policy_user)
                        if (response is not None):
                            Logger.info('HDFS Repository created in Ranger Admin')
                        else:
                            Logger.info('HDFS Repository creation failed in Ranger Admin')
                else:
                    Logger.info('Ambari admin username and password are blank ')
            else:
                Logger.info('Ranger service is not started on given host')
        else:
            cmd = format('cd /usr/hdp/{hdp_version}/ranger-hdfs-plugin/ && sh disable-hdfs-plugin.sh')
        Execute(cmd, environment={'JAVA_HOME': params.java_home, }, logoutput=True)
    else:
        Logger.info('Ranger admin not installed')
