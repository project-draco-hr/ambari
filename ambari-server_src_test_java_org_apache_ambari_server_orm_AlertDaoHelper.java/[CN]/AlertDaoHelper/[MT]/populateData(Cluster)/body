{
  List<AlertDefinitionEntity> definitions=m_definitionDao.findAll();
  for (  AlertDefinitionEntity definition : definitions) {
    m_definitionDao.remove(definition);
  }
  AlertTargetEntity administrators=new AlertTargetEntity();
  administrators.setDescription("The Administrators");
  administrators.setNotificationType("EMAIL");
  administrators.setTargetName("Administrators");
  m_dispatchDAO.create(administrators);
  AlertTargetEntity operators=new AlertTargetEntity();
  operators.setDescription("The Operators");
  operators.setNotificationType("EMAIL");
  operators.setTargetName("Operators");
  m_dispatchDAO.create(operators);
  AlertDefinitionEntity namenode=new AlertDefinitionEntity();
  namenode.setDefinitionName("NAMENODE");
  namenode.setServiceName("HDFS");
  namenode.setComponentName("NAMENODE");
  namenode.setClusterId(cluster.getClusterId());
  namenode.setHash(UUID.randomUUID().toString());
  namenode.setScheduleInterval(Integer.valueOf(60));
  namenode.setScope(Scope.ANY);
  namenode.setSource("{\"type\" : \"SCRIPT\"}");
  namenode.setSourceType(SourceType.SCRIPT);
  m_definitionDao.create(namenode);
  AlertDefinitionEntity datanode=new AlertDefinitionEntity();
  datanode.setDefinitionName("DATANODE");
  datanode.setServiceName("HDFS");
  datanode.setComponentName("DATANODE");
  datanode.setClusterId(cluster.getClusterId());
  datanode.setHash(UUID.randomUUID().toString());
  datanode.setScheduleInterval(Integer.valueOf(60));
  datanode.setScope(Scope.HOST);
  datanode.setSource("{\"type\" : \"SCRIPT\"}");
  datanode.setSourceType(SourceType.SCRIPT);
  m_definitionDao.create(datanode);
  AlertDefinitionEntity aggregate=new AlertDefinitionEntity();
  aggregate.setDefinitionName("YARN_AGGREGATE");
  aggregate.setServiceName("YARN");
  aggregate.setComponentName(null);
  aggregate.setClusterId(cluster.getClusterId());
  aggregate.setHash(UUID.randomUUID().toString());
  aggregate.setScheduleInterval(Integer.valueOf(60));
  aggregate.setScope(Scope.SERVICE);
  aggregate.setSource("{\"type\" : \"SCRIPT\"}");
  aggregate.setSourceType(SourceType.SCRIPT);
  m_definitionDao.create(aggregate);
  AlertHistoryEntity nnHistory=new AlertHistoryEntity();
  nnHistory.setAlertState(AlertState.OK);
  nnHistory.setServiceName(namenode.getServiceName());
  nnHistory.setComponentName(namenode.getComponentName());
  nnHistory.setClusterId(cluster.getClusterId());
  nnHistory.setAlertDefinition(namenode);
  nnHistory.setAlertLabel(namenode.getDefinitionName());
  nnHistory.setAlertText(namenode.getDefinitionName());
  nnHistory.setAlertTimestamp(calendar.getTimeInMillis());
  nnHistory.setHostName(HOSTNAME);
  m_alertsDAO.create(nnHistory);
  AlertHistoryEntity dnHistory=new AlertHistoryEntity();
  dnHistory.setAlertState(AlertState.WARNING);
  dnHistory.setServiceName(datanode.getServiceName());
  dnHistory.setComponentName(datanode.getComponentName());
  dnHistory.setClusterId(cluster.getClusterId());
  dnHistory.setAlertDefinition(datanode);
  dnHistory.setAlertLabel(datanode.getDefinitionName());
  dnHistory.setAlertText(datanode.getDefinitionName());
  dnHistory.setAlertTimestamp(calendar.getTimeInMillis());
  dnHistory.setHostName(HOSTNAME);
  m_alertsDAO.create(dnHistory);
  AlertHistoryEntity aggregateHistory=new AlertHistoryEntity();
  aggregateHistory.setAlertState(AlertState.CRITICAL);
  aggregateHistory.setServiceName(aggregate.getServiceName());
  aggregateHistory.setComponentName(aggregate.getComponentName());
  aggregateHistory.setClusterId(cluster.getClusterId());
  aggregateHistory.setAlertDefinition(aggregate);
  aggregateHistory.setAlertLabel(aggregate.getDefinitionName());
  aggregateHistory.setAlertText(aggregate.getDefinitionName());
  aggregateHistory.setAlertTimestamp(calendar.getTimeInMillis());
  m_alertsDAO.create(aggregateHistory);
  AlertNoticeEntity nnPendingNotice=new AlertNoticeEntity();
  nnPendingNotice.setAlertHistory(nnHistory);
  nnPendingNotice.setAlertTarget(administrators);
  nnPendingNotice.setNotifyState(NotificationState.PENDING);
  nnPendingNotice.setUuid(UUID.randomUUID().toString());
  m_dispatchDAO.create(nnPendingNotice);
  AlertNoticeEntity dnDeliveredNotice=new AlertNoticeEntity();
  dnDeliveredNotice.setAlertHistory(dnHistory);
  dnDeliveredNotice.setAlertTarget(administrators);
  dnDeliveredNotice.setNotifyState(NotificationState.FAILED);
  dnDeliveredNotice.setUuid(UUID.randomUUID().toString());
  m_dispatchDAO.create(dnDeliveredNotice);
  AlertNoticeEntity aggregateFailedNotice=new AlertNoticeEntity();
  aggregateFailedNotice.setAlertHistory(aggregateHistory);
  aggregateFailedNotice.setAlertTarget(operators);
  aggregateFailedNotice.setNotifyState(NotificationState.FAILED);
  aggregateFailedNotice.setUuid(UUID.randomUUID().toString());
  m_dispatchDAO.create(aggregateFailedNotice);
  List<AlertHistoryEntity> histories=m_alertsDAO.findAll();
  assertEquals(3,histories.size());
}
