{
  final ExecutionCommand mockExecutionCommand=mock(ExecutionCommand.class);
  final HostRoleCommand mockHostRoleCommand=mock(HostRoleCommand.class);
  temporaryDirectory=File.createTempFile("ambari_ut_",".d");
  Assert.assertTrue(temporaryDirectory.delete());
  Assert.assertTrue(temporaryDirectory.mkdirs());
  KerberosActionDataFileBuilder builder=new KerberosActionDataFileBuilder(new File(temporaryDirectory,KerberosActionDataFile.DATA_FILE_NAME));
  for (int i=0; i < 10; i++) {
    builder.addRecord("hostName","serviceName" + i,"serviceComponentName" + i,"principal|_HOST|_REALM" + i,"principalConfiguration" + i,"keytabFilePath" + i,"keytabFileOwnerName" + i,"keytabFileOwnerAccess" + i,"keytabFileGroupName" + i,"keytabFileGroupAccess" + i,"keytabFileConfiguration" + i);
  }
  builder.close();
  commandParams.put(KerberosServerAction.DATA_DIRECTORY,temporaryDirectory.getAbsolutePath());
  commandParams.put(KerberosServerAction.DEFAULT_REALM,"REALM.COM");
  commandParams.put(KerberosServerAction.KDC_TYPE,KDCType.MIT_KDC.toString());
  commandParams.put(KerberosServerAction.ADMINISTRATOR_PRINCIPAL,"principal");
  commandParams.put(KerberosServerAction.ADMINISTRATOR_PASSWORD,"password");
  commandParams.put(KerberosServerAction.ADMINISTRATOR_KEYTAB,"keytab");
  when(mockExecutionCommand.getCommandParams()).thenReturn(commandParams);
  action=new KerberosServerAction(){
    @Override protected CommandReport processIdentity(    Map<String,String> identityRecord,    String evaluatedPrincipal,    KerberosOperationHandler operationHandler,    Map<String,Object> requestSharedDataContext) throws AmbariException {
      Assert.assertNotNull(requestSharedDataContext);
      if (requestSharedDataContext.get("FAIL") != null) {
        return createCommandReport(1,HostRoleStatus.FAILED,"{}","ERROR","ERROR");
      }
 else {
        requestSharedDataContext.put(identityRecord.get(KerberosActionDataFile.PRINCIPAL),evaluatedPrincipal);
        return null;
      }
    }
    @Override public CommandReport execute(    ConcurrentMap<String,Object> requestSharedDataContext) throws AmbariException, InterruptedException {
      return processIdentities(requestSharedDataContext);
    }
  }
;
  action.setExecutionCommand(mockExecutionCommand);
  action.setHostRoleCommand(mockHostRoleCommand);
}
