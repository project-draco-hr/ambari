{
  m_injector=Guice.createInjector(new InMemoryDefaultTestModule());
  m_injector.getInstance(GuiceJpaInitializer.class);
  m_helper=m_injector.getInstance(OrmTestHelper.class);
  m_clusters=m_injector.getInstance(Clusters.class);
  m_serviceFactory=m_injector.getInstance(ServiceFactory.class);
  m_componentFactory=m_injector.getInstance(ServiceComponentFactory.class);
  m_schFactory=m_injector.getInstance(ServiceComponentHostFactory.class);
  m_cluster=m_helper.buildNewCluster(m_clusters,m_serviceFactory,m_componentFactory,m_schFactory,HOST1);
  m_dao=m_injector.getInstance(AlertsDAO.class);
  m_definitionDao=m_injector.getInstance(AlertDefinitionDAO.class);
  for (int i=0; i < 5; i++) {
    String serviceName="HDFS";
    String componentName="DATANODE";
    if (i >= 3) {
      serviceName="YARN";
      componentName="RESOURCEMANAGER";
    }
    AlertDefinitionEntity definition=new AlertDefinitionEntity();
    definition.setDefinitionName(ALERT_DEFINITION + i);
    definition.setServiceName(serviceName);
    definition.setComponentName(componentName);
    definition.setClusterId(m_cluster.getClusterId());
    definition.setHash(UUID.randomUUID().toString());
    definition.setScheduleInterval(Integer.valueOf(60));
    definition.setScope(Scope.SERVICE);
    definition.setSource("{\"type\" : \"SCRIPT\"}");
    definition.setSourceType(SourceType.SCRIPT);
    m_definitionDao.create(definition);
  }
}
