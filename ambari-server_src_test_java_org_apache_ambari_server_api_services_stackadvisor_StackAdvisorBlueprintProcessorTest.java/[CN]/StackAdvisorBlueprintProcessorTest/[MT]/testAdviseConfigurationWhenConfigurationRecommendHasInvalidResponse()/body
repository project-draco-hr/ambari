{
  Map<String,AdvisedConfiguration> advisedConfigurations=new HashMap<String,AdvisedConfiguration>();
  expect(clusterTopology.getBlueprint()).andReturn(blueprint).anyTimes();
  expect(clusterTopology.getHostGroupInfo()).andReturn(createHostGroupInfo()).anyTimes();
  expect(clusterTopology.getAdvisedConfigurations()).andReturn(advisedConfigurations).anyTimes();
  expect(clusterTopology.getConfiguration()).andReturn(configuration).anyTimes();
  expect(blueprint.getStack()).andReturn(stack).anyTimes();
  expect(stack.getVersion()).andReturn("2.3").anyTimes();
  expect(stack.getName()).andReturn("HDP").anyTimes();
  expect(blueprint.getServices()).andReturn(Arrays.asList("HDFS","YARN","HIVE")).anyTimes();
  expect(blueprint.getHostGroups()).andReturn(createHostGroupMap()).anyTimes();
  expect(hostGroup.getComponents()).andReturn(Arrays.asList("comp1","comp2")).anyTimes();
  expect(stackAdvisorHelper.recommend(anyObject(StackAdvisorRequest.class))).andReturn(new RecommendationResponse());
  expect(configuration.getFullProperties()).andReturn(createProps());
  replay(clusterTopology,blueprint,stack,hostGroup,configuration,stackAdvisorHelper);
  try {
    underTest.adviseConfiguration(clusterTopology);
    fail("Invalid state");
  }
 catch (  ConfigurationTopologyException e) {
    assertEquals(StackAdvisorBlueprintProcessor.INVALID_RESPONSE,e.getMessage());
  }
}
