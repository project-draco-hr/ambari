{
  Map<String,Object> jsonObj=new HashMap<>();
  jsonObj.put("type","testType");
  jsonObj.put("path","testPath");
  jsonObj.put("host","testHost");
  jsonObj.put("ip","testIp");
  jsonObj.put("level","testLevel");
  jsonObj.put("id","testId");
  Input mockInput=strictMock(Input.class);
  InputMarker inputMarker=new InputMarker(mockInput,null,0);
  Output output1=strictMock(Output.class);
  Output output2=strictMock(Output.class);
  Output output3=strictMock(Output.class);
  expect(mockInput.getContextFields()).andReturn(Collections.<String,String>emptyMap());
  expect(mockInput.isUseEventMD5()).andReturn(false);
  expect(mockInput.isGenEventMD5()).andReturn(false);
  expect(mockInput.getOutputList()).andReturn(Arrays.asList(output1,output2,output3));
  output1.write(jsonObj,inputMarker);
  expectLastCall();
  output2.write(jsonObj,inputMarker);
  expectLastCall();
  output3.write(jsonObj,inputMarker);
  expectLastCall();
  replay(output1,output2,output3,mockInput);
  OutputManager manager=new OutputManager();
  manager.add(output1);
  manager.add(output2);
  manager.add(output3);
  manager.write(jsonObj,inputMarker);
  verify(output1,output2,output3,mockInput);
}
