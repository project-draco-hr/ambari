@not_for_platform(PLATFORM_WINDOWS)
@patch.object(OSCheck, 'os_distribution', new=MagicMock(return_value=os_distro_value))
@patch('time.sleep')
@patch('os.path.exists')
def test_daemonize_and_stop(self, exists_mock, sleep_mock):
    from ambari_commons.shell import shellRunnerLinux
    oldpid = ProcessHelper.pidfile
    pid = str(os.getpid())
    (_, tmpoutfile) = tempfile.mkstemp()
    ProcessHelper.pidfile = tmpoutfile
    main.daemonize()
    saved = open(ProcessHelper.pidfile, 'r').read()
    self.assertEqual(pid, saved)
    main.GRACEFUL_STOP_TRIES = 1
    with patch('ambari_commons.shell.shellRunnerLinux.run') as kill_mock:
        exists_mock.return_value = False
        kill_mock.side_effect = [{'exitCode': 0, 'output': '', 'error': '', }, {'exitCode': 1, 'output': '', 'error': '', }]
        try:
            main.stop_agent()
            raise Exception('main.stop_agent() should raise sys.exit(0).')
        except SystemExit as e:
            self.assertEquals(0, e.code)
        kill_mock.assert_has_calls([call(['ambari-sudo.sh', 'kill', '-15', pid]), call(['ambari-sudo.sh', 'kill', '-0', pid])])
        kill_mock.reset_mock()
        kill_mock.side_effect = [{'exitCode': 0, 'output': '', 'error': '', }, {'exitCode': 0, 'output': '', 'error': '', }, {'exitCode': 0, 'output': '', 'error': '', }]
        exists_mock.return_value = True
        try:
            main.stop_agent()
            raise Exception('main.stop_agent() should raise sys.exit(0).')
        except SystemExit as e:
            self.assertEquals(0, e.code)
        kill_mock.assert_has_calls([call(['ambari-sudo.sh', 'kill', '-15', pid]), call(['ambari-sudo.sh', 'kill', '-0', pid]), call(['ambari-sudo.sh', 'kill', '-9', pid])])
    ProcessHelper.pidfile = oldpid
    os.remove(tmpoutfile)
