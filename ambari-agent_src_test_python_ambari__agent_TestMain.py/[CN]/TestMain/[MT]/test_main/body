@patch.object(OSCheck, 'os_distribution', new=MagicMock(return_value=os_distro_value))
@patch.object(socket, 'gethostbyname')
@patch.object(main, 'setup_logging')
@patch.object(main, 'bind_signal_handlers')
@patch.object(main, 'stop_agent')
@patch.object(AmbariConfig, 'getConfigFile')
@patch.object(main, 'perform_prestart_checks')
@patch.object(main, 'daemonize')
@patch.object(main, 'update_log_level')
@patch.object(NetUtil.NetUtil, 'try_to_connect')
@patch.object(Controller, '__init__')
@patch.object(Controller, 'start')
@patch.object(Controller, 'join')
@patch('optparse.OptionParser.parse_args')
@patch.object(DataCleaner, 'start')
@patch.object(DataCleaner, '__init__')
@patch.object(PingPortListener, 'start')
@patch.object(PingPortListener, '__init__')
@patch.object(ExitHelper, 'execute_cleanup')
def test_main(self, cleanup_mock, ping_port_init_mock, ping_port_start_mock, data_clean_init_mock, data_clean_start_mock, parse_args_mock, join_mock, start_mock, Controller_init_mock, try_to_connect_mock, update_log_level_mock, daemonize_mock, perform_prestart_checks_mock, ambari_config_mock, stop_mock, bind_signal_handlers_mock, setup_logging_mock, socket_mock):
    data_clean_init_mock.return_value = None
    Controller_init_mock.return_value = None
    ping_port_init_mock.return_value = None
    options = MagicMock()
    parse_args_mock.return_value = (options, MagicMock)
    try_to_connect_mock.return_value = (0, True)
    ambari_config_mock.return_value = self.init_ambari_config_mock()
    main.main()
    self.assertTrue(setup_logging_mock.called)
    self.assertTrue(bind_signal_handlers_mock.called)
    if (OSCheck.get_os_family() != OSConst.WINSRV_FAMILY):
        self.assertTrue(stop_mock.called)
    self.assertTrue(perform_prestart_checks_mock.called)
    if (OSCheck.get_os_family() != OSConst.WINSRV_FAMILY):
        self.assertTrue(daemonize_mock.called)
    self.assertTrue(update_log_level_mock.called)
    try_to_connect_mock.assert_called_once_with(ANY, (-1), ANY)
    self.assertTrue(start_mock.called)
    self.assertTrue(data_clean_init_mock.called)
    self.assertTrue(data_clean_start_mock.called)
    self.assertTrue(ping_port_init_mock.called)
    self.assertTrue(ping_port_start_mock.called)
    if (not (OSCheck.get_os_family() == OSConst.WINSRV_FAMILY)):
        self.assertTrue(cleanup_mock.called)
    perform_prestart_checks_mock.reset_mock()
    options.expected_hostname = 'test.hst'
    main.main()
    perform_prestart_checks_mock.assert_called_once_with(options.expected_hostname)
    pass
