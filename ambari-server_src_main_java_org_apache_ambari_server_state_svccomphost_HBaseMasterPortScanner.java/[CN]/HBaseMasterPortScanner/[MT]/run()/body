{
  while (true) {
    activeAwakeRequest=false;
    if (componentHostSet != null) {
      Iterator<ServiceComponentHost> iter=componentHostSet.iterator();
      while (iter.hasNext()) {
        ServiceComponentHost componentHost=iter.next();
        boolean active=scan(componentHost.getHostName());
        componentHost.setHAState((active) ? "active" : "passive");
        if (schedulerThread.isInterrupted()) {
          return;
        }
        if (activeAwakeRequest) {
          break;
        }
      }
    }
    if (activeAwakeRequest) {
      activeAwakeRequest=false;
      continue;
    }
    try {
synchronized (wakeupSyncObject) {
        wakeupSyncObject.wait();
      }
    }
 catch (    InterruptedException ex) {
      activeAwakeRequest=true;
    }
  }
}
