{
  LOG.debug("Registering requested host group information for {} hostgroups",requestedHostGroupInfoMap.size());
  checkForDuplicateHosts(requestedHostGroupInfoMap);
  for (  HostGroupInfo requestedHostGroupInfo : requestedHostGroupInfoMap.values()) {
    String hostGroupName=requestedHostGroupInfo.getHostGroupName();
    HostGroup baseHostGroup=getBlueprint().getHostGroup(hostGroupName);
    if (baseHostGroup == null) {
      throw new IllegalArgumentException("Invalid host_group specified: " + hostGroupName + ".  All request host groups must have a corresponding host group in the specified blueprint");
    }
    HostGroupInfo currentHostGroupInfo=hostGroupInfoMap.get(hostGroupName);
    if (currentHostGroupInfo == null) {
      Configuration bpHostGroupConfig=baseHostGroup.getConfiguration();
      Configuration parentConfiguration=new Configuration(bpHostGroupConfig.getProperties(),bpHostGroupConfig.getAttributes(),getConfiguration());
      requestedHostGroupInfo.getConfiguration().setParentConfiguration(parentConfiguration);
      hostGroupInfoMap.put(hostGroupName,requestedHostGroupInfo);
    }
 else {
      if (!requestedHostGroupInfo.getHostNames().isEmpty()) {
        try {
          addHostsToTopology(requestedHostGroupInfo);
        }
 catch (        NoSuchHostGroupException e) {
          throw new InvalidTopologyException("Attempted to add hosts to unknown host group: " + hostGroupName);
        }
      }
 else {
        currentHostGroupInfo.setRequestedCount(currentHostGroupInfo.getRequestedHostCount() + requestedHostGroupInfo.getRequestedHostCount());
      }
    }
  }
}
