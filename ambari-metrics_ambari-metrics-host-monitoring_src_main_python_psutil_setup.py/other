'psutil is a cross-platform library for retrieving information on\nrunning processes and system utilization (CPU, memory, disks, network)\nin Python.\n'
import os
import sys
try:
    from setuptools import setup, Extension
except ImportError:
    from distutils.core import setup, Extension
HERE = os.path.abspath(os.path.dirname(__file__))
if (os.name == 'posix'):
    posix_extension = Extension('_psutil_posix', sources=['psutil/_psutil_posix.c'])
if sys.platform.startswith('win32'):

    def get_winver():
        (maj, min) = sys.getwindowsversion()[0:2]
        return ('0x0%s' % ((maj * 100) + min))
    extensions = [Extension('_psutil_windows', sources=['psutil/_psutil_windows.c', 'psutil/_psutil_common.c', 'psutil/arch/windows/process_info.c', 'psutil/arch/windows/process_handles.c', 'psutil/arch/windows/security.c'], define_macros=[('_WIN32_WINNT', get_winver()), ('_AVAIL_WINVER_', get_winver()), ('PSAPI_VERSION', 1)], libraries=['psapi', 'kernel32', 'advapi32', 'shell32', 'netapi32', 'iphlpapi', 'wtsapi32'])]
elif sys.platform.startswith('darwin'):
    extensions = [Extension('_psutil_osx', sources=['psutil/_psutil_osx.c', 'psutil/_psutil_common.c', 'psutil/arch/osx/process_info.c'], extra_link_args=['-framework', 'CoreFoundation', '-framework', 'IOKit']), posix_extension]
elif sys.platform.startswith('freebsd'):
    extensions = [Extension('_psutil_bsd', sources=['psutil/_psutil_bsd.c', 'psutil/_psutil_common.c', 'psutil/arch/bsd/process_info.c'], libraries=['devstat']), posix_extension]
elif sys.platform.startswith('linux'):
    extensions = [Extension('_psutil_linux', sources=['psutil/_psutil_linux.c']), posix_extension]
elif sys.platform.lower().startswith('sunos'):
    extensions = [Extension('_psutil_sunos', sources=['psutil/_psutil_sunos.c'], libraries=['kstat', 'nsl']), posix_extension]
else:
    sys.exit(('platform %s is not supported' % sys.platform))
if (__name__ == '__main__'):
    main()
