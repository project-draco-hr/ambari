@patch('urllib2.urlopen')
@patch('ambari_server.setupSecurity.get_validated_string_input')
@patch('ambari_server.setupSecurity.get_ambari_properties')
@patch('ambari_server.setupSecurity.is_server_runing')
@patch('ambari_server.setupSecurity.is_root')
@patch('ambari_server.setupSecurity.logger')
def test_ldap_sync_error_status(self, logger_mock, is_root_method, is_server_runing_mock, get_ambari_properties_mock, get_validated_string_input_mock, urlopen_mock):
    is_root_method.return_value = True
    is_server_runing_mock.return_value = (True, 0)
    properties = Properties()
    properties.process_pair(IS_LDAP_CONFIGURED, 'true')
    get_ambari_properties_mock.return_value = properties
    get_validated_string_input_mock.side_effect = ['admin', 'admin']
    response = MagicMock()
    response.getcode.side_effect = [201, 200]
    response.read.side_effect = ['{"resources" : [{"href" : "http://c6401.ambari.apache.org:8080/api/v1/ldap_sync_events/16","Event" : {"id" : 16}}]}', '{"Event":{"status" : "ERROR","status_detail" : "Error!!","summary" : {"groups" : {"created" : 0,"removed" : 0,"updated" : 0},"memberships" : {"created" : 0,"removed" : 0},"users" : {"created" : 0,"removed" : 0,"updated" : 0}}}}']
    urlopen_mock.return_value = response
    options = self._create_empty_options_mock()
    options.ldap_sync_all = False
    options.ldap_sync_existing = False
    options.ldap_sync_users = None
    options.ldap_sync_groups = None
    try:
        sync_ldap(options)
        self.fail('Should fail with exception')
    except FatalException as e:
        pass
    pass
