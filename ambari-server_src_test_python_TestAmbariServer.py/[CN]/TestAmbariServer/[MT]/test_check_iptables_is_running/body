@patch.object(ambari_server, 'run_os_command')
@patch.object(ambari_server, 'print_warning_msg')
@patch.object(ambari_server, 'get_YN_input')
def test_check_iptables_is_running(self, get_YN_input_mock, print_warning_msg, run_os_command_mock):
    counter = 0
    for fwo_type in ambari_server.get_firewall_object_types():
        fwo = fwo_type()
        run_os_command_mock.return_value = fwo.get_running_result()
        get_YN_input_mock.side_effect = [True]
        fwo.check_iptables()
        self.assertEqual(len(print_warning_msg.call_args_list), (counter + 1))
        self.assertEqual(print_warning_msg.call_args_list[counter][0][0], (('%s is running. Confirm the necessary Ambari ports are accessible. ' % fwo.FIREWALL_SERVICE_NAME) + 'Refer to the Ambari documentation for more details on ports.'))
        counter += 1
