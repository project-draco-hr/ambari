@patch.object(OSCheck, 'get_os_family')
@patch.object(OSCheck, 'get_os_type')
@patch.object(OSCheck, 'get_os_major_version')
@patch('ambari_server.serverSetup.get_validated_string_input')
@patch('ambari_server.serverSetup.print_info_msg')
@patch('ambari_server.serverSetup.print_warning_msg')
@patch('ambari_server.serverSetup.run_os_command')
def test_create_custom_user(self, run_os_command_mock, print_warning_msg_mock, print_info_msg_mock, get_validated_string_input_mock, get_os_major_version_mock, get_os_type_mock, get_os_family_mock):
    user = 'dummy-user'
    get_validated_string_input_mock.return_value = user
    checks = AmbariUserChecks()
    run_os_command_mock.side_effect = [(0, '', '')]
    result = checks._create_custom_user()
    self.assertFalse(print_warning_msg_mock.called)
    self.assertEquals(result, (0, user))
    print_info_msg_mock.reset_mock()
    print_warning_msg_mock.reset_mock()
    run_os_command_mock.reset_mock()
    run_os_command_mock.side_effect = [(9, '', '')]
    result = checks._create_custom_user()
    self.assertTrue(('User dummy-user already exists' in str(print_info_msg_mock.call_args_list[1][0])))
    self.assertEquals(result, (0, user))
    print_info_msg_mock.reset_mock()
    print_warning_msg_mock.reset_mock()
    run_os_command_mock.reset_mock()
    run_os_command_mock.side_effect = [(1, '', '')]
    result = checks._create_custom_user()
    self.assertTrue(print_warning_msg_mock.called)
    self.assertEquals(result, (1, None))
