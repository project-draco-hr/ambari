@patch.object(OSCheck, 'os_distribution', new=MagicMock(return_value=os_distro_value))
@patch('ambari_server.serverSetup.get_validated_string_input')
@patch('ambari_server.serverSetup.print_info_msg')
@patch('ambari_server.serverSetup.print_warning_msg')
@patch('ambari_server.serverSetup.run_os_command')
def test_create_custom_user(self, run_os_command_mock, print_warning_msg_mock, print_info_msg_mock, get_validated_string_input_mock):
    options = MagicMock()
    user = 'dummy-user'
    get_validated_string_input_mock.return_value = user
    userChecks = AmbariUserChecks(options)
    run_os_command_mock.side_effect = [(0, '', '')]
    result = userChecks._create_custom_user()
    self.assertFalse(print_warning_msg_mock.called)
    self.assertEquals(result, 0)
    self.assertEquals(userChecks.user, user)
    print_info_msg_mock.reset_mock()
    print_warning_msg_mock.reset_mock()
    run_os_command_mock.reset_mock()
    run_os_command_mock.side_effect = [(9, '', '')]
    result = userChecks._create_custom_user()
    self.assertTrue(('User dummy-user already exists' in str(print_info_msg_mock.call_args_list[1][0])))
    self.assertEquals(result, 0)
    self.assertEquals(userChecks.user, user)
    print_info_msg_mock.reset_mock()
    print_warning_msg_mock.reset_mock()
    run_os_command_mock.reset_mock()
    run_os_command_mock.side_effect = [(1, '', '')]
    result = userChecks._create_custom_user()
    self.assertTrue(print_warning_msg_mock.called)
    self.assertEquals(result, 1)
    pass
