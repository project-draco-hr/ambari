@patch.object(OSCheck, 'os_distribution', new=MagicMock(return_value=os_distro_value))
@patch('ambari_server.serverSetup.read_ambari_user')
@patch('os.stat')
@patch('os.path.isfile')
@patch('os.path.exists')
@patch('os.chdir')
@patch('os.makedirs')
@patch('ambari_server.serverSetup.JDKSetupLinux.adjust_jce_permissions')
@patch('ambari_server.serverSetup.expand_jce_zip_file')
@patch('ambari_server.serverSetup.force_download_file')
@patch('ambari_server.serverSetup.get_YN_input')
@patch('ambari_server.serverSetup.run_os_command')
@patch('ambari_server.serverSetup.update_properties')
@patch('ambari_server.serverSetup.get_validated_string_input')
@patch('ambari_server.serverSetup.print_info_msg')
@patch('ambari_server.serverSetup.validate_jdk')
@patch('ambari_server.serverSetup.get_JAVA_HOME')
@patch('ambari_server.serverSetup.get_resources_location')
@patch('ambari_server.serverSetup.get_ambari_properties')
@patch('shutil.copyfile')
@patch('sys.exit')
def test_download_jdk(self, exit_mock, copyfile_mock, get_ambari_properties_mock, get_resources_location_mock, get_JAVA_HOME_mock, validate_jdk_mock, print_info_msg_mock, get_validated_string_input_mock, update_properties_mock, run_os_command_mock, get_YN_input_mock, force_download_file_mock, expand_jce_zip_file_mock, adjust_jce_permissions_mock, os_makedirs_mock, os_chdir_mock, path_existsMock, path_isfileMock, statMock, read_ambari_user_mock):

    @OsFamilyFuncImpl(OSConst.WINSRV_FAMILY)
    def _init_test_jdk_mocks():
        jdk1_url = 'http://somewhere/myjdk.exe'
        res_location = 'resources'
        p = Properties()
        p.process_pair('java.releases', 'jdk1')
        p.process_pair('jdk1.desc', 'JDK name')
        p.process_pair('jdk1.url', 'http://somewhere/myjdk.exe')
        p.process_pair('jdk1.dest-file', 'myjdk.exe')
        p.process_pair('jdk1.jcpol-url', 'http://somewhere/some-jcpol.zip')
        p.process_pair('jdk1.jcpol-file', 'some-jcpol.zip')
        p.process_pair('jdk1.home', 'C:\\jdk1')
        p.process_pair('jdk1.re', '(jdk.*)/jre')
        pem_side_effect1 = [False, True, False]
        return (p, jdk1_url, res_location, pem_side_effect1)

    @OsFamilyFuncImpl(OsFamilyImpl.DEFAULT)
    def _init_test_jdk_mocks():
        jdk1_url = 'http://somewhere/somewhere.tar.gz'
        res_location = MagicMock()
        p = Properties()
        p.process_pair('java.releases', 'jdk1')
        p.process_pair('jdk1.desc', 'JDK name')
        p.process_pair('jdk1.url', jdk1_url)
        p.process_pair('jdk1.dest-file', 'somewhere.tar.gz')
        p.process_pair('jdk1.jcpol-url', 'http://somewhere/some-jcpol.tar.gz')
        p.process_pair('jdk1.jcpol-file', 'some-jcpol.tar.gz')
        p.process_pair('jdk1.home', '/jdk1')
        p.process_pair('jdk1.re', '(jdk.*)/jre')
        pem_side_effect1 = [True, False, True, False]
        return (p, jdk1_url, res_location, pem_side_effect1)
    args = MagicMock()
    args.java_home = 'somewhere'
    args.silent = False
    (p, jdk1_url, res_location, pem_side_effect1) = _init_test_jdk_mocks()
    validate_jdk_mock.return_value = False
    path_existsMock.return_value = False
    get_resources_location_mock.return_value = res_location
    get_JAVA_HOME_mock.return_value = False
    read_ambari_user_mock.return_value = 'ambari'
    get_ambari_properties_mock.return_value = p
    try:
        download_and_install_jdk(args)
        self.fail('Should throw exception because of not found ambari.properties')
    except FatalException:
        self.assertTrue(get_ambari_properties_mock.called)
        pass
    args.java_home = None
    args.jdk_location = None
    get_JAVA_HOME_mock.return_value = 'some_jdk'
    validate_jdk_mock.return_value = True
    get_YN_input_mock.return_value = False
    path_existsMock.return_value = False
    run_os_command_mock.return_value = (0, '', '')
    rcode = download_and_install_jdk(args)
    self.assertEqual(0, rcode)
    args.java_home = 'somewhere'
    validate_jdk_mock.return_value = True
    path_existsMock.return_value = False
    get_JAVA_HOME_mock.return_value = None
    rcode = download_and_install_jdk(args)
    self.assertEqual(0, rcode)
    self.assertTrue(update_properties_mock.called)
    validate_jdk_mock.return_value = False
    path_existsMock.return_value = False
    get_ambari_properties_mock.return_value = p
    p.removeProp('jdk1.url')
    try:
        download_and_install_jdk(args)
        self.fail('Should throw exception')
    except FatalException:
        pass
    p.process_pair('jdk1.url', jdk1_url)
    validate_jdk_mock.return_value = False
    path_existsMock.return_value = False
    get_YN_input_mock.return_value = True
    get_validated_string_input_mock.return_value = '1'
    run_os_command_mock.return_value = (0, 'Wrong out', None)
    try:
        download_and_install_jdk(args)
        self.fail('Should throw exception')
    except FatalException:
        pass
    args.java_home = None
    validate_jdk_mock.return_value = False
    path_existsMock.reset_mock()
    path_existsMock.side_effect = [False, False, False]
    path_isfileMock.return_value = False
    args.jdk_location = None
    run_os_command_mock.return_value = (0, 'Creating jdk1/jre', None)
    statResult = MagicMock()
    statResult.st_size = 32000
    statMock.return_value = statResult
    try:
        rcode = download_and_install_jdk(args)
    except Exception as e:
        raise
    self.assertEqual(0, rcode)
    get_YN_input_mock.return_value = False
    path_existsMock.reset_mock()
    path_existsMock.side_effect = [False, False, True, False, True, False]
    download_and_install_jdk(args)
    self.assertTrue(exit_mock.called)
    args.jdk_location = None
    get_JAVA_HOME_mock.return_value = 'some_jdk'
    validate_jdk_mock.return_value = True
    get_YN_input_mock.return_value = False
    path_existsMock.reset_mock()
    path_existsMock.side_effect = pem_side_effect1
    force_download_file_mock.reset_mock()
    with patch('ambari_server.serverSetup.JDKSetup._download_jce_policy') as download_jce_policy_mock:
        rcode = download_and_install_jdk(args)
        self.assertFalse(download_jce_policy_mock.called)
        self.assertFalse(force_download_file_mock.called)
    update_properties_mock.reset_mock()
    args.java_home = 'somewhere'
    validate_jdk_mock.return_value = True
    path_existsMock.reset_mock()
    path_existsMock.side_effect = pem_side_effect1
    get_JAVA_HOME_mock.return_value = 'some_jdk'
    path_isfileMock.return_value = True
    download_and_install_jdk(args)
    self.assertTrue((update_properties_mock.call_count == 1))
    args.java_home = None
    args.jdk_location = None
    validate_jdk_mock.return_value = False
    update_properties_mock.reset_mock()
    path_existsMock.reset_mock()
    path_existsMock.side_effect = [True, True, True, True]
    get_validated_string_input_mock.return_value = '2'
    get_JAVA_HOME_mock.return_value = None
    rcode = download_and_install_jdk(args)
    self.assertEqual(0, rcode)
    self.assertTrue(update_properties_mock.called)
    update_properties_mock.reset_mock()
    validate_jdk_mock.return_value = False
    path_existsMock.reset_mock()
    path_existsMock.side_effect = pem_side_effect1
    get_validated_string_input_mock.return_value = '2'
    get_JAVA_HOME_mock.return_value = None
    try:
        download_and_install_jdk(args)
        self.fail('Should throw exception')
    except FatalException as fe:
        pass
    args.java_home = None
    validate_jdk_mock.return_value = False
    path_isfileMock.return_value = False
    update_properties_mock.reset_mock()
    path_existsMock.reset_mock()
    path_existsMock.side_effect = pem_side_effect1
    get_validated_string_input_mock.return_value = '2'
    get_JAVA_HOME_mock.return_value = None
    flag = False
    try:
        download_and_install_jdk(args)
        self.fail('Should throw exception')
    except FatalException as fe:
        flag = True
        pass
    self.assertTrue(flag)
    args.java_home = 'somewhere'
    validate_jdk_mock.return_value = False
    path_existsMock.reset_mock()
    path_existsMock.side_effect = pem_side_effect1
    try:
        download_and_install_jdk(args)
        self.fail('Should throw exception')
    except FatalException as fe:
        self.assertTrue(('Path to java home somewhere or java binary file does not exists' in fe.reason))
        pass
    pass
