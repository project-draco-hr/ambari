@patch.object(OSCheck, 'get_os_family')
@patch.object(OSCheck, 'get_os_type')
@patch.object(OSCheck, 'get_os_major_version')
@patch('time.sleep')
@patch('ambari_server.dbConfiguration_linux.run_os_command')
def test_setup_db(self, run_os_command_mock, sleep_mock, get_os_major_version_mock, get_os_type_mock, get_os_family_mock):
    args = MagicMock()
    properties = Properties()
    args.dbms_index = 0
    del args.dbms
    del args.database_host
    del args.database_port
    del args.database_name
    del args.database_username
    del args.database_password
    del args.silent
    run_os_command_mock.return_value = (0, None, None)
    factory = DBMSConfigFactory()
    dbConfig = factory.create(args, properties)
    self.assertTrue(dbConfig.dbms, 'postgres')
    self.assertTrue(dbConfig.persistence_type, 'local')
    result = dbConfig._setup_db()
    self.assertEqual((0, None, None), result)
