@patch('ambari_server.serverSetup.get_ambari_properties')
@patch('os.path.exists')
@patch('zipfile.ZipFile')
@patch('os.path.split')
@patch('os.listdir')
@patch('ambari_commons.os_utils.copy_files')
@patch('shutil.rmtree')
def test_unpack_jce_policy(self, rmtree_mock, copy_files_mock, os_listdir_mock, os_path_split_mock, zipfile_mock, exists_mock, get_ambari_properties_mock):
    properties = MagicMock()
    get_ambari_properties_mock.return_value = properties
    exists_mock.return_value = True
    zipfile = MagicMock()
    zipfile_mock.return_value = zipfile
    zip_members = ['US_export_policy.jar', 'local_policy.jar', 'README.txt']
    zipfile.namelist.return_value = zip_members
    os_path_split_mock.return_value = ['']
    unpack_jce_policy()
    self.assertTrue(get_ambari_properties_mock.called)
    self.assertTrue(exists_mock.called)
    self.assertTrue(zipfile_mock.called)
    self.assertTrue(os_path_split_mock.called)
    unziped_jce_path = 'jce'
    os_path_split_mock.return_value = unziped_jce_path
    unpack_jce_policy()
    self.assertTrue(get_ambari_properties_mock.called)
    self.assertTrue(exists_mock.called)
    self.assertTrue(zipfile_mock.called)
    self.assertTrue(os_listdir_mock.called)
    self.assertTrue(copy_files_mock.called)
    self.assertTrue(rmtree_mock.called)
    exists_mock.return_value = False
    try:
        unpack_jce_policy()
    except FatalException:
        self.assertTrue(True)
    exists_mock.return_value = True
    zipfile_mock.side_effect = FatalException(1, 'Extract error')
    try:
        unpack_jce_policy()
    except FatalException:
        self.assertTrue(True)
