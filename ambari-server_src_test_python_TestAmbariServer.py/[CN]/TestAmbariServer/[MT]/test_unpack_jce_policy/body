@patch.object(_ambari_server_, 'get_ambari_properties')
@patch('os.path.exists')
@patch.object(_ambari_server_, 'run_os_command')
@patch.object(_ambari_server_, 'validate_jdk')
def test_unpack_jce_policy(self, validate_jdk_mock, run_os_command_mock, exists_mock, get_ambari_properties_mock):
    properties = MagicMock()
    get_ambari_properties_mock.return_value = properties
    exists_mock.return_value = True
    run_os_command_mock.return_value = (0, '', '')
    validate_jdk_mock.return_value = True
    _ambari_server_.unpack_jce_policy()
    self.assertTrue(run_os_command_mock.called)
    self.assertTrue(validate_jdk_mock.called)
    exists_mock.return_value = False
    try:
        _ambari_server_.unpack_jce_policy()
    except FatalException:
        self.assertTrue(True)
    exists_mock.return_value = True
    validate_jdk_mock.return_value = False
    try:
        _ambari_server_.unpack_jce_policy()
    except FatalException:
        self.assertTrue(True)
    validate_jdk_mock.return_value = True
    run_os_command_mock.return_value = (3, '', '')
    try:
        _ambari_server_.unpack_jce_policy()
    except FatalException:
        self.assertTrue(True)
    run_os_command_mock.return_value = (0, '', '')
    run_os_command_mock.reset_mock()
    run_os_command_mock.side_effect = FatalException(1, 'The command fails.')
    try:
        _ambari_server_.unpack_jce_policy()
    except FatalException:
        self.assertTrue(True)
