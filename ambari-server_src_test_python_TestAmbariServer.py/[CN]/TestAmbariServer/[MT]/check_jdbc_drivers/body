@patch.object(_ambari_server_, 'get_ambari_properties')
@patch.object(_ambari_server_, 'find_jdbc_driver')
@patch.object(_ambari_server_, 'copy_files')
@patch.object(_ambari_server_, 'print_error_msg')
@patch.object(_ambari_server_, 'print_warning_msg')
@patch('__builtin__.raw_input')
@patch('sys.exit')
def check_jdbc_drivers(self, exit_mock, raw_input_mock, print_warning_msg, print_error_msg_mock, copy_files_mock, find_jdbc_driver_mock, get_ambari_properties_mock):
    out = StringIO.StringIO()
    sys.stdout = out
    args = MagicMock()
    drivers_list = ['driver_file']
    resources_dir = '/tmp'
    get_ambari_properties_mock.return_value = {_ambari_server_.RESOURCES_DIR_PROPERTY: resources_dir, }
    find_jdbc_driver_mock.return_value = drivers_list
    args.dbms = 'oracle'
    rcode = _ambari_server_.check_jdbc_drivers(args)
    self.assertEqual(0, rcode)
    copy_files_mock.assert_called_with(drivers_list, resources_dir)
    set_silent(True)
    find_jdbc_driver_mock.return_value = (-1)
    rcode = _ambari_server_.check_jdbc_drivers(args)
    self.assertTrue(print_error_msg_mock.called)
    self.assertTrue(exit_mock.called)
    set_silent(False)
    find_jdbc_driver_mock.return_value = (-1)
    rcode = _ambari_server_.check_jdbc_drivers(args)
    self.assertTrue(exit_mock.called)
    self.assertTrue(print_error_msg_mock.called)
    find_jdbc_driver_mock.side_effect = [(-1), drivers_list]
    rcode = _ambari_server_.check_jdbc_drivers(args)
    self.assertEqual(0, rcode)
    copy_files_mock.assert_called_with(drivers_list, resources_dir)
    find_jdbc_driver_mock.reset()
    find_jdbc_driver_mock.side_effect = [(-1), (-1)]
    rcode = _ambari_server_.check_jdbc_drivers(args)
    self.assertTrue(exit_mock.called)
    self.assertTrue(print_error_msg_mock.called)
    sys.stdout = sys.__stdout__
