@not_for_platform(PLATFORM_WINDOWS)
@patch.object(OSCheck, 'os_distribution', new=MagicMock(return_value=os_distro_value))
@patch('ambari_server.dbConfiguration.get_ambari_properties')
@patch('os.path.isdir')
@patch('os.path.isfile')
@patch('os.path.lexists')
@patch('os.remove')
@patch('os.symlink')
def test_check_jdbc_drivers(self, os_symlink_mock, os_remove_mock, lexists_mock, isfile_mock, isdir_mock, get_ambari_properties_mock):
    args = MagicMock()
    drivers_list = [os.path.join(os.sep, 'usr', 'share', 'java', 'ojdbc6.jar')]
    resources_dir = (os.sep + 'tmp')
    props = Properties()
    props.process_pair(RESOURCES_DIR_PROPERTY, resources_dir)
    get_ambari_properties_mock.return_value = props
    isdir_mock.return_value = True
    isfile_mock.side_effect = [True, False]
    del args.database_index
    del args.persistence_type
    del args.silent
    del args.sid_or_sname
    del args.jdbc_url
    lexists_mock.return_value = True
    check_jdbc_drivers(args)
    self.assertEquals(os_symlink_mock.call_count, 1)
    self.assertEquals(os_symlink_mock.call_args_list[0][0][0], os.path.join(os.sep, 'tmp', 'ojdbc6.jar'))
    self.assertEquals(os_symlink_mock.call_args_list[0][0][1], os.path.join(os.sep, 'tmp', 'oracle-jdbc-driver.jar'))
    get_ambari_properties_mock.reset_mock()
    os_symlink_mock.reset_mock()
    isfile_mock.side_effect = [False, False]
    check_jdbc_drivers(args)
    self.assertFalse(os_symlink_mock.called)
    pass
