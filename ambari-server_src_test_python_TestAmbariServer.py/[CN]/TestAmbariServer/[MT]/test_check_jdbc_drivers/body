@patch.object(OSCheck, 'get_os_family')
@patch.object(OSCheck, 'get_os_type')
@patch.object(OSCheck, 'get_os_major_version')
@patch('ambari_server.serverConfiguration.get_ambari_properties')
@patch('ambari_server.serverConfiguration.find_jdbc_driver')
@patch('ambari_commons.os_utils.copy_files')
@patch('ambari_commons.logging_utils.print_error_msg')
@patch('ambari_commons.logging_utils.print_warning_msg')
@patch('__builtin__.raw_input')
@patch('sys.exit')
def test_check_jdbc_drivers(self, exit_mock, raw_input_mock, print_warning_msg, print_error_msg_mock, copy_files_mock, find_jdbc_driver_mock, get_ambari_properties_mock, get_os_major_version_mock, get_os_type_mock, get_os_family_mock):
    out = StringIO.StringIO()
    sys.stdout = out
    args = MagicMock()
    drivers_list = ['driver_file']
    resources_dir = '/tmp'
    get_ambari_properties_mock.return_value = {ambari__server.RESOURCES_DIR_PROPERTY: resources_dir, }
    find_jdbc_driver_mock.return_value = drivers_list
    args.dbms = 'oracle'
    rcode = check_jdbc_drivers(args)
    self.assertEqual(0, rcode)
    copy_files_mock.assert_called_with(drivers_list, resources_dir)
    ambari__server.SILENT = True
    find_jdbc_driver_mock.return_value = (-1)
    rcode = check_jdbc_drivers(args)
    self.assertTrue(print_error_msg_mock.called)
    self.assertTrue(exit_mock.called)
    ambari__server.SILENT = False
    find_jdbc_driver_mock.return_value = (-1)
    rcode = check_jdbc_drivers(args)
    self.assertTrue(exit_mock.called)
    self.assertTrue(print_error_msg_mock.called)
    find_jdbc_driver_mock.side_effect = [(-1), drivers_list]
    rcode = check_jdbc_drivers(args)
    self.assertEqual(0, rcode)
    copy_files_mock.assert_called_with(drivers_list, resources_dir)
    find_jdbc_driver_mock.reset()
    find_jdbc_driver_mock.side_effect = [(-1), (-1)]
    rcode = check_jdbc_drivers(args)
    self.assertTrue(exit_mock.called)
    self.assertTrue(print_error_msg_mock.called)
    sys.stdout = sys.__stdout__
