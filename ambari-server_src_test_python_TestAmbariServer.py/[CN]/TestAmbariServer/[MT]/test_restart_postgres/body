@patch('time.sleep')
@patch('subprocess.Popen')
@patch.object(ambari_server, 'run_os_command')
@patch.object(ambari_server, 'get_postgre_status')
@patch.object(ambari_server, 'print_info_msg')
def test_restart_postgres(self, printInfoMsg_mock, get_postgre_status_mock, run_os_command_mock, popenMock, sleepMock):
    p = MagicMock()
    p.poll.return_value = 0
    popenMock.return_value = p
    (retcode, out, err) = ambari_server.restart_postgres()
    self.assertEqual(0, retcode)
    p.poll.return_value = None
    get_postgre_status_mock.return_value = ('stopped', 0, '', '')
    run_os_command_mock.return_value = (1, None, None)
    (retcode, out, err) = ambari_server.restart_postgres()
    self.assertEqual(1, retcode)
