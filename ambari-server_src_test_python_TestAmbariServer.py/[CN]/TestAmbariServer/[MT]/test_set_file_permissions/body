@patch('os.path.exists')
@patch.object(ambari_server, 'run_os_command')
@patch.object(ambari_server, 'print_warning_msg')
@patch.object(ambari_server, 'print_info_msg')
def test_set_file_permissions(self, print_info_msg_mock, print_warning_msg_mock, run_os_command_mock, exists_mock):
    exists_mock.return_value = False
    ambari_server.set_file_permissions('dummy-file', 'dummy-mod', 'dummy-user', False)
    self.assertFalse(run_os_command_mock.called)
    self.assertTrue(print_info_msg_mock.called)
    run_os_command_mock.reset_mock()
    print_warning_msg_mock.reset_mock()
    exists_mock.return_value = True
    run_os_command_mock.side_effect = [(0, '', ''), (0, '', '')]
    ambari_server.set_file_permissions('dummy-file', 'dummy-mod', 'dummy-user', False)
    self.assertTrue((len(run_os_command_mock.call_args_list) == 2))
    self.assertFalse(print_warning_msg_mock.called)
    run_os_command_mock.reset_mock()
    print_warning_msg_mock.reset_mock()
    run_os_command_mock.side_effect = [(1, '', ''), (0, '', '')]
    ambari_server.set_file_permissions('dummy-file', 'dummy-mod', 'dummy-user', False)
    self.assertTrue((len(run_os_command_mock.call_args_list) == 2))
    self.assertTrue(print_warning_msg_mock.called)
    run_os_command_mock.reset_mock()
    print_warning_msg_mock.reset_mock()
    run_os_command_mock.side_effect = [(0, '', ''), (1, '', '')]
    ambari_server.set_file_permissions('dummy-file', 'dummy-mod', 'dummy-user', False)
    self.assertTrue((len(run_os_command_mock.call_args_list) == 2))
    self.assertTrue(print_warning_msg_mock.called)
    run_os_command_mock.reset_mock()
    print_warning_msg_mock.reset_mock()
    exists_mock.return_value = True
    run_os_command_mock.side_effect = [(0, '', ''), (0, '', '')]
    ambari_server.set_file_permissions('dummy-file', 'dummy-mod', 'dummy-user', True)
    self.assertTrue((len(run_os_command_mock.call_args_list) == 2))
    self.assertTrue(('-R' in run_os_command_mock.call_args_list[0][0][0]))
    self.assertTrue(('-R' in run_os_command_mock.call_args_list[1][0][0]))
    self.assertFalse(print_warning_msg_mock.called)
    run_os_command_mock.reset_mock()
    print_warning_msg_mock.reset_mock()
    exists_mock.return_value = True
    run_os_command_mock.side_effect = [(0, '', ''), (0, '', '')]
    ambari_server.set_file_permissions('dummy-file', 'dummy-mod', 'dummy-user', False)
    self.assertTrue((len(run_os_command_mock.call_args_list) == 2))
    self.assertFalse(('-R' in run_os_command_mock.call_args_list[0][0][0]))
    self.assertFalse(('-R' in run_os_command_mock.call_args_list[1][0][0]))
    self.assertFalse(print_warning_msg_mock.called)
    run_os_command_mock.reset_mock()
    print_warning_msg_mock.reset_mock()
