@not_for_platform(PLATFORM_WINDOWS)
@patch.object(OSCheck, 'os_distribution', new=MagicMock(return_value=os_distro_value))
@patch.object(OSCheck, 'os_distribution', new=MagicMock(return_value=os_distro_value))
@patch('ambari_server.dbConfiguration_linux.run_os_command')
@patch('ambari_server.dbConfiguration_linux.print_error_msg')
def test_change_objects_owner_both(self, print_error_msg_mock, run_os_command_mock):
    args = MagicMock()
    args.master_key = None
    del args.database_index
    del args.dbms
    del args.database_host
    del args.database_port
    del args.database_name
    del args.database_username
    del args.database_password
    del args.persistence_type
    stdout = ' stdout '
    stderr = ' stderr '
    run_os_command_mock.return_value = (1, stdout, stderr)
    set_verbose(True)
    self.assertRaises(FatalException, change_objects_owner, args)
    print_error_msg_mock.assert_any_call('stderr:\nstderr')
    print_error_msg_mock.assert_any_call('stdout:\nstdout')
    pass
