@patch('ambari_server.serverConfiguration.get_conf_dir')
def test_update_ambari_properties(self, get_conf_dir_mock):
    from ambari_server import serverConfiguration
    properties = ['server.jdbc.user.name=ambari-server\n', 'server.jdbc.user.passwd=/etc/ambari-server/conf/password.dat\n', 'java.home=/usr/jdk64/jdk1.6.0_31\n', 'server.jdbc.database_name=ambari\n', 'ambari-server.user=ambari\n', 'agent.fqdn.service.url=URL\n']
    NEW_PROPERTY = 'some_new_property=some_value\n'
    JDK_NAME_PROPERTY = 'jdk.name=jdk-6u31-linux-x64.bin\n'
    JCE_NAME_PROPERTY = 'jce.name=jce_policy-6.zip\n'
    CHANGED_VALUE_PROPERTY = 'server.jdbc.database_name=should_not_overwrite_value\n'
    get_conf_dir_mock.return_value = '/etc/ambari-server/conf'
    (tf1, fn1) = tempfile.mkstemp()
    (tf2, fn2) = tempfile.mkstemp()
    configDefaults.AMBARI_PROPERTIES_BACKUP_FILE = fn1
    serverConfiguration.AMBARI_PROPERTIES_FILE = fn2
    with open(serverConfiguration.AMBARI_PROPERTIES_FILE, 'w') as f:
        f.write(NEW_PROPERTY)
        f.write(CHANGED_VALUE_PROPERTY)
    with open(configDefaults.AMBARI_PROPERTIES_BACKUP_FILE, 'w') as f:
        for line in properties:
            f.write(line)
    update_ambari_properties()
    timestamp = datetime.datetime.now()
    self.assertFalse(os.path.exists(configDefaults.AMBARI_PROPERTIES_BACKUP_FILE))
    self.assertTrue(os.path.exists(((configDefaults.AMBARI_PROPERTIES_BACKUP_FILE + '.') + timestamp.strftime('%Y%m%d%H%M%S'))))
    with open(serverConfiguration.AMBARI_PROPERTIES_FILE, 'r') as f:
        ambari_properties_content = f.readlines()
    for line in properties:
        if (line == 'agent.fqdn.service.url=URL\n'):
            if ((not ((GET_FQDN_SERVICE_URL + '=URL\n') in ambari_properties_content)) and (line in ambari_properties_content)):
                self.fail()
        elif (not (line in ambari_properties_content)):
            self.fail()
    if (not (NEW_PROPERTY in ambari_properties_content)):
        self.fail()
    if (not (JDK_NAME_PROPERTY in ambari_properties_content)):
        self.fail()
    if (not (JCE_NAME_PROPERTY in ambari_properties_content)):
        self.fail()
    if (CHANGED_VALUE_PROPERTY in ambari_properties_content):
        self.fail()
    result = update_ambari_properties()
    self.assertEquals(result, 0)
    os.unlink(fn2)
    (tf, fn) = tempfile.mkstemp()
    configDefaults.AMBARI_PROPERTIES_BACKUP_FILE = fn
    result = update_ambari_properties()
    self.assertNotEquals(result, 0)
    pass
