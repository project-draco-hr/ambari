@patch.object(ambari_server, 'parse_properties_file')
@patch.object(ambari_server, 'get_db_cli_tool')
@patch.object(ambari_server, 'print_error_msg')
@patch.object(ambari_server, 'get_YN_input')
@patch.object(ambari_server, 'setup_db')
@patch.object(ambari_server, 'run_os_command')
@patch.object(ambari_server, 'is_root')
@patch.object(ambari_server, 'check_database_name_property')
@patch.object(ambari_server, 'is_server_runing')
def test_reset_remote_db_wo_client(self, is_server_runing_mock, check_database_name_property_mock, is_root_mock, run_os_command_mock, setup_db_mock, get_YN_inputMock, print_error_msg_mock, get_db_cli_tool_mock, parse_properties_file_mock):
    args = MagicMock()
    get_YN_inputMock.return_value = True
    run_os_command_mock.return_value = (0, None, None)
    args.persistence_type = 'remote'
    get_db_cli_tool_mock.return_value = None
    is_root_mock.return_value = True
    is_server_runing_mock.return_value = (False, 0)
    try:
        ambari_server.reset(args)
        self.fail('Should throw exception')
    except NonFatalException as fe:
        self.assertTrue(("Client wasn't found" in fe.reason))
        pass
