@patch.object(FirewallChecks, 'run_os_command')
@patch.object(OSCheck, 'get_os_family')
@patch.object(OSCheck, 'get_os_type')
@patch.object(OSCheck, 'get_os_major_version')
@patch.object(ambari_server, 'verify_setup_allowed')
@patch('sys.exit')
@patch.object(ambari_server, 'get_YN_input')
@patch.object(ambari_server, 'get_db_cli_tool')
@patch.object(ambari_server, 'store_remote_properties')
@patch.object(ambari_server, 'is_local_database')
@patch.object(ambari_server, 'check_jdbc_drivers')
@patch.object(ambari_server, 'is_root')
@patch.object(ambari_server, 'check_ambari_user')
@patch.object(ambari_server, 'download_jdk')
@patch.object(ambari_server, 'configure_os_settings')
@patch('__builtin__.raw_input')
@patch.object(ambari_server, 'check_selinux')
def test_setup_remote_db_wo_client(self, check_selinux_mock, raw_input, configure_os_settings_mock, download_jdk_mock, check_ambari_user_mock, is_root_mock, check_jdbc_drivers_mock, is_local_db_mock, store_remote_properties_mock, get_db_cli_tool_mock, get_YN_input, exit_mock, verify_setup_allowed_method, get_os_major_version_mock, get_os_type_mock, get_os_family_mock, run_os_command_mock):
    args = MagicMock()
    args.jdbc_driver = None
    args.jdbc_db = None
    raw_input.return_value = ''
    is_root_mock.return_value = True
    is_local_db_mock.return_value = False
    get_YN_input.return_value = False
    check_selinux_mock.return_value = 0
    get_os_type_mock.return_value = ''
    get_os_family_mock.return_value = OSConst.REDHAT_FAMILY
    run_os_command_mock.return_value = (3, '', '')
    store_remote_properties_mock.return_value = 0
    get_db_cli_tool_mock.return_value = None
    check_jdbc_drivers_mock.return_value = 0
    check_ambari_user_mock.return_value = 0
    download_jdk_mock.return_value = 0
    configure_os_settings_mock.return_value = 0
    verify_setup_allowed_method.return_value = 0
    try:
        ambari_server.setup(args)
        self.fail('Should throw exception')
    except NonFatalException as fe:
        self.assertTrue(('Remote database setup aborted.' in fe.reason))
