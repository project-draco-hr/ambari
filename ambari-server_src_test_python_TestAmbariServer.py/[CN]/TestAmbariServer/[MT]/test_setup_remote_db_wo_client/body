@not_for_platform(PLATFORM_WINDOWS)
@patch.object(OSCheck, 'os_distribution', new=MagicMock(return_value=os_distro_value))
@patch('ambari_commons.firewall.run_os_command')
@patch('ambari_server.serverSetup.verify_setup_allowed')
@patch('sys.exit')
@patch('ambari_server.serverSetup.get_YN_input')
@patch('ambari_server.dbConfiguration.get_validated_string_input')
@patch('ambari_server.dbConfiguration_linux.get_YN_input')
@patch('ambari_server.dbConfiguration_linux.get_validated_string_input')
@patch('ambari_server.dbConfiguration_linux.PGConfig._store_remote_properties')
@patch('ambari_server.dbConfiguration_linux.LinuxDBMSConfig.ensure_jdbc_driver_installed')
@patch('ambari_server.dbConfiguration_linux.read_password')
@patch('ambari_server.serverSetup.check_jdbc_drivers')
@patch('ambari_server.serverSetup.is_root')
@patch('ambari_server.serverSetup.check_ambari_user')
@patch('ambari_server.serverSetup.download_and_install_jdk')
@patch('ambari_server.serverSetup.configure_os_settings')
@patch('__builtin__.raw_input')
@patch('ambari_server.serverSetup.disable_security_enhancements')
@patch('ambari_server.serverSetup.expand_jce_zip_file')
@patch('ambari_server.serverSetup.logger')
def test_setup_remote_db_wo_client(self, logger_mock, expand_jce_zip_file_mock, check_selinux_mock, raw_input, configure_os_settings_mock, download_jdk_mock, check_ambari_user_mock, is_root_mock, check_jdbc_drivers_mock, read_password_mock, ensure_jdbc_driver_installed_mock, store_remote_properties_mock, get_validated_string_input_0_mock, get_YN_input_0_mock, get_validated_string_input_mock, get_YN_input, exit_mock, verify_setup_allowed_method, run_os_command_mock):
    args = MagicMock()
    args.jdbc_driver = None
    args.jdbc_db = None
    args.silent = False
    del args.dbms
    del args.database_index
    del args.database_host
    del args.database_port
    del args.database_name
    del args.database_username
    del args.database_password
    del args.persistence_type
    raw_input.return_value = ''
    is_root_mock.return_value = True
    check_selinux_mock.return_value = (0, '')
    run_os_command_mock.return_value = (3, '', '')
    store_remote_properties_mock.return_value = 0
    get_YN_input.return_value = True
    get_validated_string_input_mock.side_effect = ['4']
    get_validated_string_input_0_mock.side_effect = ['localhost', '5432', 'ambari', 'ambari', 'admin']
    get_YN_input_0_mock.return_value = False
    read_password_mock.return_value = 'encrypted_bigdata'
    ensure_jdbc_driver_installed_mock.return_value = True
    check_jdbc_drivers_mock.return_value = 0
    check_ambari_user_mock.return_value = (0, False, 'user', None)
    download_jdk_mock.return_value = 0
    configure_os_settings_mock.return_value = 0
    verify_setup_allowed_method.return_value = 0
    expand_jce_zip_file_mock.return_value = 0
    try:
        setup(args)
        self.fail('Should throw exception')
    except NonFatalException as fe:
        self.assertTrue(('Remote database setup aborted.' in fe.reason))
    pass
