@not_for_platform(PLATFORM_WINDOWS)
@patch.object(OSCheck, 'os_distribution', new=MagicMock(return_value=os_distro_value))
@patch('pwd.getpwnam')
@patch('ambari_commons.firewall.run_os_command')
@patch('os.path.exists')
@patch('os.path.isfile')
@patch('ambari_commons.os_utils.remove_file')
@patch('ambari_server.dbConfiguration_linux.LinuxDBMSConfig.ensure_jdbc_driver_installed')
@patch('ambari_server.dbConfiguration_linux.get_YN_input')
@patch('ambari_server.serverSetup.update_properties')
@patch('ambari_server.dbConfiguration_linux.get_ambari_properties')
@patch('ambari_server.dbConfiguration_linux.store_password_file')
@patch('ambari_server.dbConfiguration_linux.run_os_command')
@patch('ambari_server.dbConfiguration_linux.PGConfig._configure_postgres')
@patch('ambari_server.dbConfiguration_linux.PGConfig._check_postgre_up')
@patch('ambari_server.dbConfiguration_linux.PGConfig._is_jdbc_user_changed')
@patch('ambari_server.serverSetup.verify_setup_allowed')
@patch('ambari_server.dbConfiguration_linux.read_password')
@patch('ambari_server.dbConfiguration_linux.get_validated_string_input')
@patch('ambari_server.dbConfiguration.get_validated_string_input')
@patch('ambari_server.serverSetup.get_YN_input')
@patch('ambari_server.serverSetup.get_ambari_properties')
@patch('ambari_server.serverSetup.configure_os_settings')
@patch('ambari_server.serverSetup.download_and_install_jdk')
@patch('ambari_server.serverSetup.check_ambari_user')
@patch('ambari_server.serverSetup.check_jdbc_drivers')
@patch('ambari_server.serverSetup.disable_security_enhancements')
@patch('ambari_server.serverSetup.is_root')
@patch('ambari_server.serverSetup.proceedJDBCProperties')
@patch('ambari_server.serverSetup.extract_views')
@patch('ambari_server.serverSetup.adjust_directory_permissions')
@patch('ambari_server.serverSetup.service_setup')
@patch('ambari_server.serverSetup.read_ambari_user')
@patch('ambari_server.serverSetup.expand_jce_zip_file')
def test_setup(self, expand_jce_zip_file_mock, read_ambari_user_mock, service_setup_mock, adjust_dirs_mock, extract_views_mock, proceedJDBCProperties_mock, is_root_mock, disable_security_enhancements_mock, check_jdbc_drivers_mock, check_ambari_user_mock, download_jdk_mock, configure_os_settings_mock, get_ambari_properties_mock, get_YN_input_mock, gvsi_mock, gvsi_1_mock, read_password_mock, verify_setup_allowed_method, is_jdbc_user_changed_mock, check_postgre_up_mock, configure_postgres_mock, run_os_command_1_mock, store_password_file_mock, get_ambari_properties_1_mock, update_properties_mock, get_YN_input_1_mock, ensure_jdbc_driver_installed_mock, remove_file_mock, isfile_mock, exists_mock, run_os_command_mock, get_pw_nam_mock):
    hostname = 'localhost'
    db_name = 'db_ambari'
    postgres_schema = 'sc_ambari'
    port = '1234'
    oracle_service = '1'
    oracle_service_name = 'ambari'
    user_name = 'ambari'
    args = MagicMock()
    del args.dbms
    del args.database_index
    del args.database_host
    del args.database_port
    del args.database_name
    del args.database_username
    del args.database_password
    args.silent = False
    failed = False
    properties = Properties()

    def side_effect(username):
        raise KeyError('')
    get_pw_nam_mock.side_effect = side_effect
    get_YN_input_mock.return_value = False
    isfile_mock.return_value = False
    verify_setup_allowed_method.return_value = 0
    exists_mock.return_value = False
    remove_file_mock.return_value = 0
    run_os_command_mock.return_value = (3, '', '')
    extract_views_mock.return_value = 0
    read_ambari_user_mock.return_value = 'ambari'
    read_password_mock.return_value = 'bigdata2'
    get_ambari_properties_mock.return_value = properties
    get_ambari_properties_1_mock.return_value = properties
    store_password_file_mock.return_value = 'encrypted_bigdata2'
    ensure_jdbc_driver_installed_mock.return_value = True
    check_postgre_up_mock.return_value = (PGConfig.PG_STATUS_RUNNING, 0, '', '')
    configure_postgres_mock.return_value = (0, '', '')
    run_os_command_1_mock.return_value = (0, '', '')
    expand_jce_zip_file_mock.return_value = 0

    def reset_mocks():
        is_jdbc_user_changed_mock.reset_mock()
        is_root_mock.reset_mock()
        disable_security_enhancements_mock.reset_mock()
        check_jdbc_drivers_mock.reset_mock()
        check_ambari_user_mock.reset_mock()
        run_os_command_mock.reset_mock()
        configure_os_settings_mock.reset_mock()
        run_os_command_1_mock.reset_mock()
        get_YN_input_1_mock.reset_mock()
        update_properties_mock.reset_mock()
        args = MagicMock()
        del args.dbms
        del args.database_index
        del args.database_host
        del args.database_port
        del args.database_name
        del args.database_username
        del args.database_password
        del args.persistence_type
        del args.sid_or_sname
        del args.jdbc_url
        del args.init_script_file
        del args.drop_script_file
        args.jdbc_driver = None
        args.jdbc_db = None
        args.silent = False
        return args
    is_root_mock.return_value = False
    try:
        setup(args)
        self.fail('Should throw exception')
    except FatalException as fe:
        self.assertTrue(('root-level' in fe.reason))
        pass
    args = reset_mocks()
    is_root_mock.return_value = True
    disable_security_enhancements_mock.return_value = (0, '')
    check_ambari_user_mock.return_value = (0, False, 'user', None)
    check_jdbc_drivers_mock.return_value = 0
    download_jdk_mock.return_value = 0
    configure_os_settings_mock.return_value = 0
    result = setup(args)
    self.assertEqual(None, result)
    self.assertTrue(check_ambari_user_mock.called)
    self.assertEqual(1, run_os_command_mock.call_count)
    args = reset_mocks()
    db_selection_values = ['1']
    postgres_values = [db_name, postgres_schema, hostname]
    postgres_values = postgres_values[::(-1)]

    def side_effect(*args, **kwargs):
        return db_selection_values.pop()
    gvsi_mock.side_effect = side_effect

    def side_effect_1(*args, **kwargs):
        return postgres_values.pop()
    gvsi_1_mock.side_effect = side_effect_1
    get_YN_input_mock.return_value = True
    is_jdbc_user_changed_mock.return_value = False
    try:
        result = setup(args)
    except FatalException:
        self.fail('Setup should be successful')
    self.assertEqual(None, result)
    self.assertTrue(is_jdbc_user_changed_mock.called)
    self.assertTrue(update_properties_mock.called)
    self.assertTrue(run_os_command_1_mock.called)
    self.assertFalse(remove_file_mock.called)
    self.assertTrue(('Ambari-DDL-Postgres-EMBEDDED-CREATE.sql' in run_os_command_1_mock.call_args[0][0][3]))
    args = reset_mocks()
    is_jdbc_user_changed_mock.return_value = True
    db_selection_values = ['1']
    postgres_values = [db_name, postgres_schema, hostname]
    postgres_values = postgres_values[::(-1)]
    try:
        result = setup(args)
    except FatalException:
        self.fail('Setup should be successful')
    self.assertEqual(None, result)
    self.assertTrue(is_jdbc_user_changed_mock.called)
    self.assertTrue(update_properties_mock.called)
    self.assertTrue(run_os_command_1_mock.called)
    self.assertFalse(remove_file_mock.called)
    args = reset_mocks()
    get_YN_input_1_mock.return_value = False
    db_selection_values = ['4']
    postgres_values = [hostname, port, db_name, postgres_schema, user_name]
    postgres_values = postgres_values[::(-1)]
    try:
        result = setup(args)
        self.fail('Should throw exception')
    except NonFatalException as fe:
        self.assertTrue(('Remote database setup aborted.' in fe.reason))
    self.assertFalse(run_os_command_1_mock.called)
    args = reset_mocks()
    args.jdbc_driver = 'path/to/driver'
    args.jdbc_db = 'test_db_name'
    setup(args)
    self.assertTrue(proceedJDBCProperties_mock.called)
    self.assertFalse(disable_security_enhancements_mock.called)
    self.assertFalse(check_ambari_user_mock.called)
    pass
