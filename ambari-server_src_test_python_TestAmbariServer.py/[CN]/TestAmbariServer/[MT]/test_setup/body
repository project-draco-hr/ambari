@patch.object(FirewallChecks, 'run_os_command')
@patch.object(OSCheck, 'get_os_family')
@patch.object(OSCheck, 'get_os_type')
@patch.object(OSCheck, 'get_os_major_version')
@patch('os.path.exists')
@patch('os.path.isfile')
@patch.object(ambari_server, 'remove_file')
@patch.object(ambari_server, 'is_jdbc_user_changed')
@patch.object(ambari_server, 'verify_setup_allowed')
@patch.object(ambari_server, 'get_YN_input')
@patch.object(ambari_server, 'configure_os_settings')
@patch.object(ambari_server, 'download_jdk')
@patch.object(ambari_server, 'configure_postgres')
@patch.object(ambari_server, 'setup_db')
@patch.object(ambari_server, 'check_postgre_up')
@patch.object(ambari_server, 'check_ambari_user')
@patch.object(ambari_server, 'check_jdbc_drivers')
@patch.object(ambari_server, 'check_selinux')
@patch.object(ambari_server, 'setup_remote_db')
@patch.object(ambari_server, 'store_remote_properties')
@patch.object(ambari_server, 'is_local_database')
@patch.object(ambari_server, 'store_local_properties')
@patch.object(ambari_server, 'is_root')
@patch.object(ambari_server, 'is_server_runing')
@patch.object(ambari_server, 'proceedJDBCProperties')
def test_setup(self, proceedJDBCProperties_mock, is_server_runing_mock, is_root_mock, store_local_properties_mock, is_local_database_mock, store_remote_properties_mock, setup_remote_db_mock, check_selinux_mock, check_jdbc_drivers_mock, check_ambari_user_mock, check_postgre_up_mock, setup_db_mock, configure_postgres_mock, download_jdk_mock, configure_os_settings_mock, get_YN_input, verify_setup_allowed_method, is_jdbc_user_changed_mock, remove_file_mock, isfile_mock, exists_mock, get_os_major_version_mock, get_os_type_mock, get_os_family_mock, run_os_command_mock):
    args = MagicMock()
    failed = False
    is_server_runing_mock.return_value = (False, 0)
    get_YN_input.return_value = False
    isfile_mock.return_value = False
    verify_setup_allowed_method.return_value = 0
    exists_mock.return_value = False
    remove_file_mock.return_value = 0
    get_os_type_mock.return_value = ''
    get_os_family_mock.return_value = OSConst.REDHAT_FAMILY
    run_os_command_mock.return_value = (3, '', '')

    def reset_mocks():
        is_jdbc_user_changed_mock.reset_mock()
        is_root_mock.reset_mock()
        store_local_properties_mock.reset_mock()
        store_remote_properties_mock.reset_mock()
        is_local_database_mock.reset_mock()
        setup_remote_db_mock.reset_mock()
        check_selinux_mock.reset_mock()
        check_jdbc_drivers_mock.reset_mock()
        check_ambari_user_mock.reset_mock()
        run_os_command_mock.reset_mock()
        check_postgre_up_mock.reset_mock()
        setup_db_mock.reset_mock()
        configure_postgres_mock.reset_mock()
        configure_os_settings_mock.reset_mock()
        pass
    is_root_mock.return_value = False
    try:
        ambari_server.setup(args)
        self.fail('Should throw exception')
    except FatalException as fe:
        self.assertTrue(('root-level' in fe.reason))
        pass
    is_root_mock.return_value = True
    check_selinux_mock.return_value = 0
    check_ambari_user_mock.return_value = 0
    check_jdbc_drivers_mock.return_value = 0
    check_postgre_up_mock.return_value = ('running', 0, '', '')
    setup_db_mock.return_value = (0, None, None)
    setup_remote_db_mock.return_value = 0
    is_local_database_mock.return_value = False
    configure_postgres_mock.return_value = (0, '', '')
    download_jdk_mock.return_value = 0
    configure_os_settings_mock.return_value = 0
    store_remote_properties_mock.return_value = 0
    store_local_properties_mock.return_value = 0
    args.jdbc_driver = None
    args.jdbc_db = None
    result = ambari_server.setup(args)
    self.assertEqual(None, result)
    self.assertTrue(check_ambari_user_mock.called)
    self.assertEqual(1, run_os_command_mock.call_count)
    self.assertEquals(True, store_remote_properties_mock.called)
    self.assertEquals(False, store_local_properties_mock.called)
    reset_mocks()
    is_local_database_mock.return_value = True
    is_jdbc_user_changed_mock.return_value = False
    try:
        result = ambari_server.setup(args)
    except FatalException:
        self.fail('Setup should be successful')
    self.assertEqual(None, result)
    self.assertEquals(True, store_local_properties_mock.called)
    self.assertEquals(False, store_remote_properties_mock.called)
    self.assertEquals(True, is_jdbc_user_changed_mock.called)
    self.assertEquals(False, remove_file_mock.called)
    reset_mocks()
    is_local_database_mock.return_value = True
    is_jdbc_user_changed_mock.return_value = True
    try:
        result = ambari_server.setup(args)
    except FatalException:
        self.fail('Setup should be successful')
    self.assertEqual(None, result)
    self.assertEquals(True, store_local_properties_mock.called)
    self.assertEquals(False, store_remote_properties_mock.called)
    self.assertEquals(True, is_jdbc_user_changed_mock.called)
    self.assertEquals(True, remove_file_mock.called)
    reset_mocks()
    is_local_database_mock.return_value = False
    setup_remote_db_mock.return_value = (-1)
    try:
        result = ambari_server.setup(args)
        self.fail('Should throw exception')
    except NonFatalException as fe:
        self.assertTrue(('Remote database setup aborted.' in fe.reason))
    reset_mocks()
    is_server_runing_mock.return_value = (False, 1)
    args.jdbc_driver = 'path/to/driver'
    args.jdbc_db = 'test_db_name'
    ambari_server.setup(args)
    self.assertTrue(proceedJDBCProperties_mock.called)
    self.assertFalse(check_selinux_mock.called)
    self.assertFalse(check_ambari_user_mock.called)
