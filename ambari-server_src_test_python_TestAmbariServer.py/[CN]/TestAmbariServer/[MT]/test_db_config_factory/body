@patch.object(OSCheck, 'get_os_family')
@patch.object(OSCheck, 'get_os_type')
@patch.object(OSCheck, 'get_os_major_version')
def test_db_config_factory(self, get_os_major_version_mock, get_os_type_mock, get_os_family_mock):
    args = MagicMock()
    properties = Properties()
    del args.dbms
    del args.dbms_index
    del args.database_host
    del args.database_port
    del args.database_name
    del args.database_username
    del args.database_password
    del args.silent
    factory = DBMSConfigFactory()
    dbConfig = factory.create(args, properties)
    self.assertEquals(dbConfig.dbms, 'postgres')
    self.assertEquals(dbConfig.database_host, 'localhost')
    self.assertEquals(dbConfig.database_port, '5432')
    self.assertEquals(dbConfig.database_name, 'ambari')
    self.assertEquals(dbConfig.database_username, 'ambari')
    self.assertEquals(dbConfig.database_password, 'bigdata')
    args = MagicMock()
    args.dbms = 'mysql'
    del args.dbms_index
    del args.database_host
    del args.database_port
    del args.database_name
    del args.database_username
    del args.database_password
    del args.silent
    dbConfig = factory.create(args, properties)
    self.assertEquals(dbConfig.dbms, 'mysql')
    self.assertEquals(dbConfig.database_port, '3306')
    args = MagicMock()
    args.dbms_index = 1
    del args.dbms
    del args.database_host
    del args.database_port
    del args.database_name
    del args.database_username
    del args.database_password
    del args.silent
    dbConfig = factory.create(args, properties)
    self.assertEquals(dbConfig.dbms, 'oracle')
    self.assertEquals(dbConfig.database_port, '1521')
    failed = False
    args = MagicMock()
    args.dbms_index = 999
    del args.dbms
    del args.database_host
    del args.database_port
    del args.database_name
    del args.database_username
    del args.database_password
    del args.silent
    try:
        dbConfig = factory.create(args, properties)
    except:
        failed = True
    self.assertTrue(failed)
