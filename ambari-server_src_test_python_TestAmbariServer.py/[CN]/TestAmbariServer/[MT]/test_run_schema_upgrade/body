@patch('os.path.isdir', new=MagicMock(return_value=True))
@patch('os.access', new=MagicMock(return_value=True))
@patch.object(ServerClassPath, 'get_full_ambari_classpath_escaped_for_shell', new=MagicMock(return_value=(((((('/etc/conf' + os.pathsep) + 'test') + os.pathsep) + 'path12') + os.pathsep) + '/path/to/jdbc.jar')))
@patch('ambari_server.serverUpgrade.ensure_jdbc_driver_is_installed')
@patch('ambari_server.serverUpgrade.get_jdbc_driver_path')
@patch('ambari_server.serverUpgrade.ensure_can_start_under_current_user')
@patch('ambari_server.serverUpgrade.generate_env')
@patch('ambari_server.serverUpgrade.read_ambari_user')
@patch('ambari_server.serverConfiguration.get_conf_dir')
@patch('ambari_server.serverUpgrade.run_os_command')
@patch('ambari_server.serverUpgrade.get_java_exe_path')
@patch('ambari_server.serverUpgrade.get_ambari_properties')
@patch('ambari_server.serverUpgrade.get_YN_input')
def test_run_schema_upgrade(self, get_YN_input_mock, get_ambari_properties_mock, java_exe_path_mock, run_os_command_mock, get_conf_dir_mock, read_ambari_user_mock, generate_env_mock, ensure_can_start_under_current_user_mock, get_jdbc_mock, ensure_jdbc_driver_is_installed_mock):
    java_exe_path_mock.return_value = '/usr/lib/java/bin/java'
    run_os_command_mock.return_value = (0, None, None)
    get_conf_dir_mock.return_value = '/etc/conf'
    command = (((((((((((((('/usr/lib/java/bin/java -cp /etc/conf' + os.pathsep) + 'test') + os.pathsep) + 'path12') + os.pathsep) + '/path/to/jdbc.jar org.apache.ambari.server.upgrade.SchemaUpgradeHelper > ') + os.sep) + 'var') + os.sep) + 'log') + os.sep) + 'ambari-server') + os.sep) + 'ambari-server.out 2>&1')
    environ = {}
    generate_env_mock.return_value = environ
    ensure_can_start_under_current_user_mock.return_value = 'root'
    read_ambari_user_mock.return_value = 'ambari'
    properties = Properties()
    properties.process_pair(PERSISTENCE_TYPE_PROPERTY, 'local')
    get_ambari_properties_mock.return_value = properties
    get_YN_input_mock.return_value = True
    get_jdbc_mock.return_value = '/path/to/jdbc.jar'
    run_schema_upgrade(None)
    self.assertTrue(java_exe_path_mock.called)
    self.assertTrue(ensure_can_start_under_current_user_mock.called)
    self.assertTrue(generate_env_mock.called)
    self.assertTrue(read_ambari_user_mock.called)
    self.assertTrue(run_os_command_mock.called)
    run_os_command_mock.assert_called_with(command, env=environ)
