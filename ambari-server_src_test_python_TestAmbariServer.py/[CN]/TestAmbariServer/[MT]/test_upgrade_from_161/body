@not_for_platform(PLATFORM_WINDOWS)
@patch.object(OSCheck, 'os_distribution', new=MagicMock(return_value=os_distro_value))
@patch('__builtin__.open')
@patch('os.path.isfile')
@patch('os.path.lexists')
@patch('os.path.exists')
@patch('os.remove')
@patch('os.symlink')
@patch.object(Properties, 'store')
@patch('ambari_server.serverUpgrade.adjust_directory_permissions')
@patch('ambari_server.serverUpgrade.print_warning_msg')
@patch('ambari_server.serverUpgrade.read_ambari_user')
@patch('ambari_server.serverUpgrade.run_schema_upgrade')
@patch('ambari_server.dbConfiguration_linux.run_os_command')
@patch('ambari_server.serverConfiguration.find_properties_file')
@patch('ambari_server.serverUpgrade.update_ambari_properties')
@patch('ambari_server.serverUpgrade.is_root')
@patch('ambari_server.serverConfiguration.write_property')
@patch('ambari_server.serverConfiguration.get_ambari_version')
@patch('ambari_server.dbConfiguration.get_ambari_properties')
@patch('ambari_server.serverConfiguration.get_ambari_properties')
@patch('ambari_server.serverUpgrade.get_ambari_properties')
@patch('ambari_server.serverUpgrade.upgrade_local_repo')
@patch('ambari_server.serverUpgrade.move_user_custom_actions')
@patch('ambari_server.serverUpgrade.update_krb_jaas_login_properties')
@patch('ambari_server.serverUpgrade.update_ambari_env')
@patch('ambari_server.setupMpacks.get_replay_log_file')
@patch('ambari_server.serverUpgrade.logger')
def test_upgrade_from_161(self, logger_mock, get_replay_log_file_mock, update_ambari_env_mock, update_krb_jaas_login_properties_mock, move_user_custom_actions_mock, upgrade_local_repo_mock, get_ambari_properties_mock, get_ambari_properties_2_mock, get_ambari_properties_3_mock, get_ambari_version_mock, write_property_mock, is_root_mock, update_ambari_properties_mock, find_properties_file_mock, run_os_command_mock, run_schema_upgrade_mock, read_ambari_user_mock, print_warning_msg_mock, adjust_directory_permissions_mock, properties_store_mock, os_symlink_mock, os_remove_mock, exists_mock, lexists_mock, isfile_mock, open_mock):

    def reset_mocks():
        run_os_command_mock.reset_mock()
        write_property_mock.reset_mock()
        isfile_mock.reset_mock()
        lexists_mock.reeset_mock()
        os_symlink_mock.reset_mock()
        lexists_mock.return_value = False
        args = MagicMock()
        del args.dbms
        del args.database_index
        del args.database_host
        del args.database_port
        del args.database_name
        del args.database_username
        del args.database_password
        del args.database_windows_auth
        del args.default_database_host
        del args.init_db_script_file
        del args.cleanup_db_script_file
        del args.must_set_database_options
        del args.sid_or_sname
        del args.jdbc_url
        args.jdbc_driver = None
        args.jdbc_db = None
        args.silent = False
        return args
    args = reset_mocks()
    args.dbms = 'postgres'
    is_root_mock.return_value = True
    update_ambari_properties_mock.return_value = 0
    update_ambari_env_mock.return_value = 0
    get_ambari_version_mock.return_value = '1.7.0'
    move_user_custom_actions_mock.return_value = None
    update_krb_jaas_login_properties_mock.return_value = (-2)
    properties = Properties()
    properties.process_pair(PERSISTENCE_TYPE_PROPERTY, 'local')
    properties.process_pair(JDBC_DATABASE_PROPERTY, 'ambari')
    properties.process_pair(RESOURCES_DIR_PROPERTY, '/tmp')
    get_ambari_properties_mock.return_value = properties
    properties2 = Properties()
    properties2.process_pair(PERSISTENCE_TYPE_PROPERTY, 'local')
    properties2.process_pair(JDBC_DATABASE_NAME_PROPERTY, 'ambari')
    properties2.process_pair(JDBC_DATABASE_PROPERTY, 'postgres')
    get_ambari_properties_3_mock.side_effect = get_ambari_properties_2_mock.side_effect = [properties, properties2, properties2]
    get_replay_log_file_mock.return_value = '/invalid_path/mpacks_replay.log'
    run_schema_upgrade_mock.return_value = 0
    read_ambari_user_mock.return_value = 'custom_user'
    run_os_command_mock.return_value = (0, '', '')
    isfile_mock.return_value = False
    try:
        upgrade(args)
    except FatalException as fe:
        self.fail(('Did not expect failure: ' + str(fe)))
    else:
        self.assertTrue(write_property_mock.called)
        self.assertEquals(write_property_mock.call_args_list[0][0][0], JDBC_DATABASE_NAME_PROPERTY)
        self.assertEquals(write_property_mock.call_args_list[0][0][1], 'ambari')
        self.assertEquals(write_property_mock.call_args_list[1][0][0], JDBC_DATABASE_PROPERTY)
        self.assertEquals(write_property_mock.call_args_list[1][0][1], 'postgres')
        self.assertTrue(run_os_command_mock.called)
        self.assertFalse(move_user_custom_actions_mock.called)
    args = reset_mocks()
    properties = Properties()
    properties.process_pair(PERSISTENCE_TYPE_PROPERTY, 'remote')
    properties.process_pair(JDBC_DATABASE_PROPERTY, 'postgres')
    properties.process_pair(JDBC_RCA_SCHEMA_PROPERTY, 'ambari')
    properties.process_pair(JDBC_URL_PROPERTY, 'jdbc:postgresql://c6410.ambari.apache.org:5432/ambari')
    properties2 = Properties()
    properties2.process_pair(PERSISTENCE_TYPE_PROPERTY, 'remote')
    properties2.process_pair(JDBC_DATABASE_NAME_PROPERTY, 'ambari')
    properties2.process_pair(JDBC_DATABASE_PROPERTY, 'postgres')
    properties2.process_pair(JDBC_RCA_SCHEMA_PROPERTY, 'ambari')
    properties2.process_pair(JDBC_URL_PROPERTY, 'jdbc:postgresql://c6410.ambari.apache.org:5432/ambari')
    get_ambari_properties_mock.return_value = properties
    get_ambari_properties_3_mock.side_effect = get_ambari_properties_2_mock.side_effect = [properties, properties2, properties2]
    exists_mock.return_value = True
    try:
        upgrade(args)
    except FatalException as fe:
        self.fail(('Did not expect failure: ' + str(fe)))
    else:
        self.assertTrue(write_property_mock.called)
        self.assertFalse(run_os_command_mock.called)
        self.assertFalse(move_user_custom_actions_mock.called)
    args = reset_mocks()
    properties = Properties()
    properties.process_pair(PERSISTENCE_TYPE_PROPERTY, 'remote')
    properties.process_pair(JDBC_RCA_SCHEMA_PROPERTY, 'ambari')
    properties.process_pair(JDBC_URL_PROPERTY, 'jdbc:postgresql://c6410.ambari.apache.org:5432/ambari')
    get_ambari_properties_mock.return_value = properties
    get_ambari_properties_3_mock.side_effect = get_ambari_properties_2_mock.side_effect = [properties, properties2, properties2]
    try:
        upgrade(args)
    except FatalException as fe:
        self.fail(('Did not expect failure: ' + str(fe)))
    else:
        self.assertTrue((write_property_mock.call_count == 2))
        self.assertFalse(move_user_custom_actions_mock.called)
    args = reset_mocks()
    properties = Properties()
    properties.process_pair(PERSISTENCE_TYPE_PROPERTY, 'remote')
    properties.process_pair(JDBC_DATABASE_PROPERTY, 'mysql')
    properties.process_pair(JDBC_RCA_SCHEMA_PROPERTY, 'ambari')
    properties.process_pair(JDBC_URL_PROPERTY, 'jdbc:mysql://c6409.ambari.apache.org:3306/ambari')
    properties2 = Properties()
    properties2.process_pair(PERSISTENCE_TYPE_PROPERTY, 'remote')
    properties2.process_pair(JDBC_DATABASE_PROPERTY, 'mysql')
    properties2.process_pair(JDBC_DATABASE_NAME_PROPERTY, 'ambari')
    properties2.process_pair(JDBC_RCA_SCHEMA_PROPERTY, 'ambari')
    properties2.process_pair(JDBC_URL_PROPERTY, 'jdbc:mysql://c6409.ambari.apache.org:3306/ambari')
    get_ambari_properties_mock.return_value = properties
    get_ambari_properties_3_mock.side_effect = get_ambari_properties_2_mock.side_effect = [properties, properties2, properties2]
    isfile_mock.side_effect = [False, True, False, False, False]
    try:
        upgrade(args)
    except FatalException as fe:
        self.fail(('Did not expect failure: ' + str(fe)))
    else:
        self.assertTrue(write_property_mock.called)
        self.assertFalse(move_user_custom_actions_mock.called)
        self.assertTrue(os_symlink_mock.called)
        self.assertTrue((os_symlink_mock.call_args_list[0][0][0] == '/var/lib/ambari-server/resources/mysql-connector-java.jar'))
        self.assertTrue((os_symlink_mock.call_args_list[0][0][1] == '/var/lib/ambari-server/resources/mysql-jdbc-driver.jar'))
    args = reset_mocks()
    properties = Properties()
    properties.process_pair(PERSISTENCE_TYPE_PROPERTY, 'remote')
    properties.process_pair(JDBC_RCA_SCHEMA_PROPERTY, 'ambari')
    properties.process_pair(JDBC_URL_PROPERTY, 'jdbc:mysql://c6409.ambari.apache.org:3306/ambari')
    get_ambari_properties_mock.return_value = properties
    get_ambari_properties_3_mock.side_effect = get_ambari_properties_2_mock.side_effect = [properties, properties2, properties2]
    isfile_mock.side_effect = None
    try:
        upgrade(args)
    except FatalException as fe:
        self.fail(('Did not expect failure: ' + str(fe)))
    else:
        self.assertTrue((write_property_mock.call_count == 2))
        self.assertFalse(move_user_custom_actions_mock.called)
    pass
