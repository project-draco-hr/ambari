@patch.object(_ambari_server_, 'write_property')
@patch.object(_ambari_server_, 'find_properties_file')
@patch.object(_ambari_server_, 'is_root')
@patch.object(_ambari_server_, 'get_ambari_version')
@patch.object(_ambari_server_, 'get_ambari_properties')
@patch.object(_ambari_server_, 'move_user_custom_actions')
def test_upgrade_from_161(self, move_user_custom_actions, get_ambari_properties_mock, get_ambari_version_mock, is_root_mock, find_properties_file_mock, write_property_mock):
    args = MagicMock()
    args.dbms = 'postgres'
    is_root_mock.return_value = True
    get_ambari_version_mock.return_value = '1.7.0'
    move_user_custom_actions.return_value = None
    properties = _ambari_server_.Properties()
    properties.process_pair(_ambari_server_.PERSISTENCE_TYPE_PROPERTY, 'local')
    properties.process_pair(_ambari_server_.JDBC_DATABASE_PROPERTY, 'ambari')
    get_ambari_properties_mock.return_value = properties
    try:
        _ambari_server_.upgrade(args)
    except FatalException as fe:
        self.fail(('Did not expect failure: ' + str(fe)))
    else:
        self.assertTrue(write_property_mock.called)
        self.assertFalse(move_user_custom_actions.called)
    write_property_mock.reset_mock()
    properties = _ambari_server_.Properties()
    properties.process_pair(_ambari_server_.PERSISTENCE_TYPE_PROPERTY, 'remote')
    properties.process_pair(_ambari_server_.JDBC_DATABASE_PROPERTY, 'postgres')
    properties.process_pair('server.jdbc.schema', 'ambari')
    properties.process_pair(_ambari_server_.JDBC_URL_PROPERTY, 'jdbc:postgresql://c6410.ambari.apache.org:5432/ambari')
    get_ambari_properties_mock.return_value = properties
    try:
        _ambari_server_.upgrade(args)
    except FatalException as fe:
        self.fail(('Did not expect failure: ' + str(fe)))
    else:
        self.assertTrue(write_property_mock.called)
        self.assertFalse(move_user_custom_actions.called)
    write_property_mock.reset_mock()
    properties = _ambari_server_.Properties()
    properties.process_pair(_ambari_server_.PERSISTENCE_TYPE_PROPERTY, 'remote')
    properties.process_pair('server.jdbc.schema', 'ambari')
    properties.process_pair(_ambari_server_.JDBC_URL_PROPERTY, 'jdbc:postgresql://c6410.ambari.apache.org:5432/ambari')
    get_ambari_properties_mock.return_value = properties
    try:
        _ambari_server_.upgrade(args)
    except FatalException as fe:
        self.fail(('Did not expect failure: ' + str(fe)))
    else:
        self.assertTrue((write_property_mock.call_count == 2))
        self.assertFalse(move_user_custom_actions.called)
    write_property_mock.reset_mock()
    properties = _ambari_server_.Properties()
    properties.process_pair(_ambari_server_.PERSISTENCE_TYPE_PROPERTY, 'remote')
    properties.process_pair(_ambari_server_.JDBC_DATABASE_PROPERTY, 'mysql')
    properties.process_pair('server.jdbc.schema', 'ambari')
    properties.process_pair(_ambari_server_.JDBC_URL_PROPERTY, 'jdbc:mysql://c6409.ambari.apache.org:3306/ambari')
    get_ambari_properties_mock.return_value = properties
    try:
        _ambari_server_.upgrade(args)
    except FatalException as fe:
        self.fail(('Did not expect failure: ' + str(fe)))
    else:
        self.assertTrue(write_property_mock.called)
        self.assertFalse(move_user_custom_actions.called)
    write_property_mock.reset_mock()
    properties = _ambari_server_.Properties()
    properties.process_pair(_ambari_server_.PERSISTENCE_TYPE_PROPERTY, 'remote')
    properties.process_pair('server.jdbc.schema', 'ambari')
    properties.process_pair(_ambari_server_.JDBC_URL_PROPERTY, 'jdbc:mysql://c6409.ambari.apache.org:3306/ambari')
    get_ambari_properties_mock.return_value = properties
    try:
        _ambari_server_.upgrade(args)
    except FatalException as fe:
        self.fail(('Did not expect failure: ' + str(fe)))
    else:
        self.assertTrue((write_property_mock.call_count == 2))
        self.assertFalse(move_user_custom_actions.called)
