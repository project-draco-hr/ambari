@patch('subprocess.Popen')
@patch.object(OSCheck, 'get_os_family')
@patch.object(OSCheck, 'get_os_type')
@patch.object(OSCheck, 'get_os_major_version')
def test_check_firewall_is_running(self, get_os_major_version_mock, get_os_type_mock, get_os_family_mock, popen_mock):
    get_os_major_version_mock.return_value = 18
    get_os_type_mock.return_value = OSConst.OS_FEDORA
    get_os_family_mock.return_value = OSConst.REDHAT_FAMILY
    firewall_obj = Firewall().getFirewallObject()
    p = MagicMock()
    p.communicate.return_value = ('active', 'err')
    p.returncode = 0
    popen_mock.return_value = p
    self.assertEqual('Fedora18FirewallChecks', firewall_obj.__class__.__name__)
    self.assertTrue(firewall_obj.check_firewall())
    p.communicate.return_value = ('', 'err')
    p.returncode = 3
    self.assertFalse(firewall_obj.check_firewall())
    self.assertEqual('err', firewall_obj.stderrdata)
    get_os_type_mock.return_value = OSConst.OS_UBUNTU
    get_os_family_mock.return_value = OSConst.UBUNTU_FAMILY
    firewall_obj = Firewall().getFirewallObject()
    p.communicate.return_value = ('Status: active', 'err')
    p.returncode = 0
    self.assertEqual('UbuntuFirewallChecks', firewall_obj.__class__.__name__)
    self.assertTrue(firewall_obj.check_firewall())
    p.communicate.return_value = ('Status: inactive', 'err')
    p.returncode = 0
    self.assertFalse(firewall_obj.check_firewall())
    self.assertEqual('err', firewall_obj.stderrdata)
    get_os_type_mock.return_value = ''
    get_os_family_mock.return_value = OSConst.SUSE_FAMILY
    firewall_obj = Firewall().getFirewallObject()
    p.communicate.return_value = ('running', 'err')
    p.returncode = 0
    self.assertEqual('SuseFirewallChecks', firewall_obj.__class__.__name__)
    self.assertTrue(firewall_obj.check_firewall())
    p.communicate.return_value = ('unused', 'err')
    p.returncode = 0
    self.assertFalse(firewall_obj.check_firewall())
    self.assertEqual('err', firewall_obj.stderrdata)
    get_os_type_mock.return_value = ''
    get_os_family_mock.return_value = OSConst.REDHAT_FAMILY
    get_os_major_version_mock.return_value = 6
    firewall_obj = Firewall().getFirewallObject()
    p.communicate.return_value = ('Table: filter', 'err')
    p.returncode = 0
    self.assertEqual('FirewallChecks', firewall_obj.__class__.__name__)
    self.assertTrue(firewall_obj.check_firewall())
    p.communicate.return_value = ('', 'err')
    p.returncode = 3
    self.assertFalse(firewall_obj.check_firewall())
    self.assertEqual('err', firewall_obj.stderrdata)
    get_os_major_version_mock.return_value = 7
    get_os_type_mock.return_value = ''
    get_os_family_mock.return_value = OSConst.REDHAT_FAMILY
    firewall_obj = Firewall().getFirewallObject()
    p.communicate.return_value = ('active\nactive', 'err')
    p.returncode = 0
    self.assertEqual('RedHat7FirewallChecks', firewall_obj.__class__.__name__)
    self.assertTrue(firewall_obj.check_firewall())
    p.communicate.return_value = ('inactive\nactive', 'err')
    p.returncode = 3
    self.assertTrue(firewall_obj.check_firewall())
    p.communicate.return_value = ('active\ninactive', 'err')
    p.returncode = 3
    self.assertTrue(firewall_obj.check_firewall())
    p.communicate.return_value = ('inactive\ninactive', 'err')
    p.returncode = 3
    self.assertFalse(firewall_obj.check_firewall())
    self.assertEqual('err', firewall_obj.stderrdata)
    pass
