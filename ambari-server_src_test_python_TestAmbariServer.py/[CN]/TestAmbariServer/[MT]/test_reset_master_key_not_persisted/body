@patch.object(ambari__server, 'get_is_persisted')
@patch.object(ambari__server, 'get_is_secure')
@patch.object(ambari__server, 'remove_password_file')
@patch('os.path.exists')
@patch.object(ambari__server, 'read_ambari_user')
@patch.object(ambari__server, 'get_master_key_location')
@patch('ambari_server.properties.Properties')
@patch.object(ambari__server, 'save_passwd_for_alias')
@patch.object(ambari__server, 'read_passwd_for_alias')
@patch.object(ambari__server, 'update_properties')
@patch.object(ambari__server, 'save_master_key')
@patch.object(ambari__server, 'get_validated_string_input')
@patch.object(ambari__server, 'get_YN_input')
@patch.object(ambari__server, 'search_file')
@patch.object(ambari__server, 'get_ambari_properties')
@patch.object(ambari__server, 'is_root')
def test_reset_master_key_not_persisted(self, is_root_method, get_ambari_properties_method, search_file_message, get_YN_input_method, get_validated_string_input_method, save_master_key_method, update_properties_method, read_passwd_for_alias_method, save_passwd_for_alias_method, Properties_mock, get_master_key_location_method, read_ambari_user_method, exists_mock, remove_password_file_method, get_is_secure_method, get_is_persisted_method):
    is_root_method.return_value = True
    search_file_message.return_value = False
    read_ambari_user_method.return_value = None
    p = get_ambari_properties_method.return_value
    p.get_property.side_effect = ['${alias=fakealias}', '${alias=fakealias}', '${alias=fakealias}', '${alias=fakealias}']
    get_YN_input_method.side_effect = [True, False]
    get_validated_string_input_method.return_value = 'aaa'
    read_passwd_for_alias_method.return_value = 'fakepassword'
    save_passwd_for_alias_method.return_value = 0
    exists_mock.return_value = False
    get_is_secure_method.return_value = True
    get_is_persisted_method.return_value = (True, 'filePath')
    ambari__server.setup_master_key()
    self.assertFalse(save_master_key_method.called)
    self.assertTrue(get_YN_input_method.called)
    self.assertTrue(get_validated_string_input_method.called)
    self.assertTrue(update_properties_method.called)
    self.assertTrue(read_passwd_for_alias_method.called)
    self.assertTrue(3, read_passwd_for_alias_method.call_count)
    self.assertTrue(3, save_passwd_for_alias_method.call_count)
    self.assertFalse(save_master_key_method.called)
    result_expected = {ambari__server.JDBC_PASSWORD_PROPERTY: ambari__server.get_alias_string(ambari__server.JDBC_RCA_PASSWORD_ALIAS), ambari__server.JDBC_RCA_PASSWORD_FILE_PROPERTY: ambari__server.get_alias_string(ambari__server.JDBC_RCA_PASSWORD_ALIAS), ambari__server.LDAP_MGR_PASSWORD_PROPERTY: ambari__server.get_alias_string(ambari__server.LDAP_MGR_PASSWORD_ALIAS), ambari__server.SSL_TRUSTSTORE_PASSWORD_PROPERTY: ambari__server.get_alias_string(ambari__server.SSL_TRUSTSTORE_PASSWORD_ALIAS), ambari__server.SECURITY_IS_ENCRYPTION_ENABLED: 'true', }
    sorted_x = sorted(result_expected.iteritems(), key=operator.itemgetter(0))
    sorted_y = sorted(update_properties_method.call_args[0][1].iteritems(), key=operator.itemgetter(0))
    self.assertEquals(sorted_x, sorted_y)
