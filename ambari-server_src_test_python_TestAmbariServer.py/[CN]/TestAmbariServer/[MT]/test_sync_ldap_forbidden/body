@patch('urllib2.urlopen')
@patch('urllib2.Request')
@patch('base64.encodestring')
@patch('ambari_server.setupSecurity.is_root')
@patch('ambari_server.setupSecurity.is_server_runing')
@patch('ambari_server.setupSecurity.get_ambari_properties')
@patch('ambari_server.setupSecurity.get_validated_string_input')
@patch('ambari_server.setupSecurity.logger')
def test_sync_ldap_forbidden(self, logger_mock, get_validated_string_input_method, get_ambari_properties_method, is_server_runing_method, is_root_method, encodestring_method, request_constructor, urlopen_method):
    options = self._create_empty_options_mock()
    options.ldap_sync_all = True
    options.ldap_sync_existing = False
    options.ldap_sync_users = None
    options.ldap_sync_groups = None
    is_root_method.return_value = False
    try:
        sync_ldap(options)
        self.fail('Should throw exception if not root')
    except FatalException as fe:
        self.assertTrue(('root-level' in fe.reason))
        pass
    is_root_method.return_value = True
    is_server_runing_method.return_value = (None, None)
    try:
        sync_ldap(options)
        self.fail('Should throw exception if ambari is stopped')
    except FatalException as fe:
        self.assertTrue(('not running' in fe.reason))
        pass
    is_server_runing_method.return_value = (True, None)
    configs = MagicMock()
    configs.get_property.return_value = None
    get_ambari_properties_method.return_value = configs
    try:
        sync_ldap(options)
        self.fail('Should throw exception if ldap is not configured')
    except FatalException as fe:
        self.assertTrue(('not configured' in fe.reason))
        pass
    configs.get_property.return_value = 'true'
    get_validated_string_input_method.return_value = 'admin'
    encodestring_method.return_value = 'qwe123'
    requestMocks = [MagicMock()]
    request_constructor.side_effect = requestMocks
    response = MagicMock()
    response.getcode.return_value = 403
    urlopen_method.return_value = response
    try:
        sync_ldap(options)
        self.fail('Should throw exception if return code != 200')
    except FatalException as fe:
        self.assertTrue(('status code' in fe.reason))
        pass
    pass
