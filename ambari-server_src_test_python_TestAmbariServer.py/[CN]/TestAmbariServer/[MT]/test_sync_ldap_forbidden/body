@patch('urllib2.urlopen')
@patch('urllib2.Request')
@patch('base64.encodestring')
@patch.object(ambari_server, 'is_root')
@patch.object(ambari_server, 'is_server_runing')
@patch.object(ambari_server, 'get_ambari_properties')
@patch.object(ambari_server, 'get_validated_string_input')
def test_sync_ldap_forbidden(self, get_validated_string_input_method, get_ambari_properties_method, is_server_runing_method, is_root_method, encodestring_method, request_constructor, urlopen_method):
    is_root_method.return_value = False
    try:
        ambari_server.sync_ldap()
        self.fail('Should throw exception if not root')
    except FatalException as fe:
        self.assertTrue(('root-level' in fe.reason))
        pass
    is_root_method.return_value = True
    is_server_runing_method.return_value = (None, None)
    try:
        ambari_server.sync_ldap()
        self.fail('Should throw exception if ambari is stopped')
    except FatalException as fe:
        self.assertTrue(('not running' in fe.reason))
        pass
    is_server_runing_method.return_value = (True, None)
    configs = MagicMock()
    configs.get_property.return_value = None
    get_ambari_properties_method.return_value = configs
    try:
        ambari_server.sync_ldap()
        self.fail('Should throw exception if ldap is not configured')
    except FatalException as fe:
        self.assertTrue(('not configured' in fe.reason))
        pass
    configs.get_property.return_value = 'true'
    get_validated_string_input_method.return_value = 'admin'
    encodestring_method.return_value = 'qwe123'
    requestMocks = [MagicMock()]
    request_constructor.side_effect = requestMocks
    response = MagicMock()
    response.getcode.return_value = 403
    urlopen_method.return_value = response
    try:
        ambari_server.sync_ldap()
        self.fail('Should throw exception if return code != 200')
    except FatalException as fe:
        self.assertTrue(('status code' in fe.reason))
        pass
