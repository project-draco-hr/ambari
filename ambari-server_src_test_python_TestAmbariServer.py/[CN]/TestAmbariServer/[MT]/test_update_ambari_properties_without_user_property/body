@patch.object(ambari_server, 'get_conf_dir')
def test_update_ambari_properties_without_user_property(self, get_conf_dir_mock):
    "\n      Checks: update_ambari_properties call should add ambari-server.user property if\n      it's absent\n    "
    properties = ['server.jdbc.user.name=ambari-server\n', 'server.jdbc.user.passwd=/etc/ambari-server/conf/password.dat\n', 'java.home=/usr/jdk64/jdk1.6.0_31\n', 'server.os_type=redhat6\n']
    get_conf_dir_mock.return_value = '/etc/ambari-server/conf'
    (tf1, fn1) = tempfile.mkstemp()
    (tf2, fn2) = tempfile.mkstemp()
    ambari_server.AMBARI_PROPERTIES_RPMSAVE_FILE = fn1
    ambari_server.AMBARI_PROPERTIES_FILE = fn2
    with open(ambari_server.AMBARI_PROPERTIES_RPMSAVE_FILE, 'w') as f:
        for line in properties:
            f.write(line)
    ambari_server.update_ambari_properties()
    ambari_properties = ambari_server.Properties()
    ambari_properties.load(open(fn2))
    self.assertTrue((ambari_server.NR_USER_PROPERTY in ambari_properties.keys()))
    value = ambari_properties[ambari_server.NR_USER_PROPERTY]
    self.assertEqual(value, 'root')
    os.unlink(fn2)
