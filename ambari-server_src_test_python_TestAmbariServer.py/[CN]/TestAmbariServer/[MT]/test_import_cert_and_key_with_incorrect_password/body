@patch('__builtin__.open')
@patch.object(_ambari_server_, 'copy_file')
@patch.object(_ambari_server_, 'is_root')
@patch.object(_ambari_server_, 'read_ambari_user')
@patch.object(_ambari_server_, 'set_file_permissions')
@patch.object(_ambari_server_, 'import_file_to_keystore')
@patch.object(_ambari_server_, 'run_os_command')
@patch('os.path.join')
@patch.object(_ambari_server_, 'get_validated_filepath_input')
@patch.object(_ambari_server_, 'get_validated_string_input')
def test_import_cert_and_key_with_incorrect_password(self, get_validated_string_input_mock, get_validated_filepath_input_mock, os_path_join_mock, run_os_command_mock, import_file_to_keystore_mock, set_file_permissions_mock, read_ambari_user_mock, is_root_mock, copy_file_mock, open_mock):
    get_validated_string_input_mock.return_value = 'incorrect_password'
    get_validated_filepath_input_mock.return_value = 'filename'
    open_mock.return_value = MagicMock()
    os_path_join_mock.return_value = ''
    is_root_mock.return_value = True
    run_os_command_mock.return_value = (1, '', 'Some error message')
    self.assertFalse(_ambari_server_.import_cert_and_key_action(*['key_dir', None]))
    self.assertFalse(_ambari_server_.import_cert_and_key('key_dir'))
