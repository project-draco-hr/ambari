@patch('__builtin__.open')
@patch('os.path.isfile')
@patch('os.path.lexists')
@patch('os.remove')
@patch('os.symlink')
@patch.object(ambari_server.Properties, 'store')
@patch.object(ambari_server, 'find_properties_file')
@patch.object(ambari_server, 'adjust_directory_permissions')
@patch.object(ambari_server, 'print_warning_msg')
@patch.object(ambari_server, 'read_ambari_user')
@patch.object(ambari_server, 'run_schema_upgrade')
@patch.object(ambari_server, 'update_ambari_properties')
@patch.object(ambari_server, 'parse_properties_file')
@patch.object(ambari_server, 'is_root')
@patch.object(ambari_server, 'get_ambari_properties')
@patch.object(ambari_server, 'upgrade_local_repo')
def test_upgrade(self, upgrade_local_repo_mock, get_ambari_properties_mock, is_root_mock, parse_properties_file_mock, update_ambari_properties_mock, run_schema_upgrade_mock, read_ambari_user_mock, print_warning_msg_mock, adjust_directory_permissions_mock, find_properties_file_mock, properties_store_mock, os_symlink_mock, os_remove_mock, lexists_mock, isfile_mock, open_mock):
    args = MagicMock()
    check_database_name_property_mock = MagicMock()
    update_ambari_properties_mock.return_value = 0
    run_schema_upgrade_mock.return_value = 0
    isfile_mock.return_value = False
    is_root_mock.return_value = False
    try:
        ambari_server.upgrade(args)
        self.fail('Should throw exception')
    except FatalException as fe:
        self.assertTrue(('root-level' in fe.reason))
        pass
    is_root_mock.return_value = True
    read_ambari_user_mock.return_value = None
    run_schema_upgrade_mock.return_value = 0
    ambari_server.upgrade(args)
    self.assertTrue(print_warning_msg_mock.called)
    warning_args = print_warning_msg_mock.call_args[0][0]
    self.assertTrue(('custom ambari user' in warning_args))
    self.assertTrue(upgrade_local_repo_mock.called)
    read_ambari_user_mock.return_value = 'ambari-custom-user'
    ambari_server.upgrade(args)
    self.assertTrue(adjust_directory_permissions_mock.called)
    properties = ambari_server.Properties()
    get_ambari_properties_mock.return_value = properties
    run_schema_upgrade_mock.return_value = 0
    parse_properties_file_mock.called = False
    retcode = ambari_server.upgrade(args)
    self.assertTrue(get_ambari_properties_mock.called)
    self.assertNotEqual((-1), retcode)
    self.assertTrue(parse_properties_file_mock.called)
    self.assertTrue(run_schema_upgrade_mock.called)
    get_ambari_properties_mock.return_value = (-1)
    fail = False
    try:
        ambari_server.upgrade(args)
    except FatalException as e:
        self.assertEquals('Error getting ambari properties', e.reason)
        fail = True
    self.assertTrue(fail)
    p = MagicMock()
    get_ambari_properties_mock.reset_mock()
    get_ambari_properties_mock.return_value = p
    p.__getitem__.side_effect = ['something', KeyError('test exception')]
    fail = False
    try:
        ambari_server.upgrade(args)
    except FatalException as e:
        fail = True
    self.assertTrue(fail)
    p.reset_mock()
    p.__getitem__.side_effect = ['something', 'resources']
    lexists_mock.return_value = True
    isfile_mock.side_effect = [True, False, False]
    ambari_server.upgrade(args)
    self.assertTrue(os_remove_mock.called)
    self.assertEquals(os_remove_mock.call_count, 1)
    self.assertEquals(os_remove_mock.call_args[0][0], os.path.join('resources', 'oracle-jdbc-driver.jar'))
    self.assertEquals(os_symlink_mock.call_count, 1)
    self.assertEquals(os_symlink_mock.call_args[0][0], os.path.join('resources', 'ojdbc6.jar'))
    self.assertEquals(os_symlink_mock.call_args[0][1], os.path.join('resources', 'oracle-jdbc-driver.jar'))
