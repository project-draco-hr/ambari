@patch.object(ambari_server, 'setup')
def test_main_db_options(self, setup_mock):
    base_args = ['ambari-server.py', 'setup']
    db_args = ['--database', 'postgres', '--databasehost', 'somehost.net', '--databaseport', '12345', '--databasename', 'ambari', '--databaseusername', 'ambari', '--databasepassword', 'bigdata']
    failed = False
    sys.argv = list(base_args)
    try:
        ambari_server.main()
    except SystemExit:
        failed = True
        pass
    self.assertFalse(failed)
    self.assertTrue(setup_mock.called)
    setup_mock.reset_mock()
    failed = False
    sys.argv = list(base_args)
    sys.argv.extend(db_args[(-10):])
    sys.argv.extend(['--database', 'embedded'])
    try:
        ambari_server.main()
    except SystemExit:
        failed = True
        pass
    self.assertFalse(failed)
    self.assertTrue(setup_mock.called)
    setup_mock.reset_mock()
    sys.argv = list(base_args)
    sys.argv.extend(db_args)
    try:
        ambari_server.main()
    except SystemExit:
        failed = True
        pass
    self.assertTrue(ambari_server.PROMPT_DATABASE_OPTIONS)
    self.assertFalse(failed)
    self.assertTrue(setup_mock.called)
    setup_mock.reset_mock()
    sys.argv = list(base_args)
    sys.argv.extend(['--database', 'postgres'])
    try:
        ambari_server.main()
    except SystemExit:
        failed = True
        pass
    self.assertFalse(setup_mock.called)
    self.assertTrue(failed)
    setup_mock.reset_mock()
    failed = False
    sys.argv = list(base_args)
    sys.argv.extend(['--database', 'unknown'])
    sys.argv.extend(db_args[2:])
    try:
        ambari_server.main()
    except SystemExit:
        failed = True
        pass
    self.assertTrue(failed)
    self.assertFalse(setup_mock.called)
    setup_mock.reset_mock()
    failed = False
    sys.argv = list(base_args)
    sys.argv.extend(['--databaseport', 'unknown'])
    sys.argv.extend(db_args[:4])
    sys.argv.extend(db_args[6:])
    try:
        ambari_server.main()
    except SystemExit:
        failed = True
        pass
    self.assertTrue(failed)
    self.assertFalse(setup_mock.called)
    pass
