@patch.object(ambari__server, 'save_passwd_for_alias')
@patch('os.path.exists')
@patch.object(ambari__server, 'get_is_secure')
@patch.object(ambari__server, 'get_is_persisted')
@patch.object(ambari__server, 'read_master_key')
@patch.object(ambari__server, 'read_ambari_user')
@patch.object(ambari__server, 'get_master_key_location')
@patch.object(ambari__server, 'update_properties')
@patch.object(ambari__server, 'save_master_key')
@patch.object(ambari__server, 'get_YN_input')
@patch.object(ambari__server, 'search_file')
@patch.object(ambari__server, 'get_ambari_properties')
@patch.object(ambari__server, 'is_root')
def test_setup_master_key_persist(self, is_root_method, get_ambari_properties_method, search_file_message, get_YN_input_method, save_master_key_method, update_properties_method, get_master_key_location_method, read_ambari_user_method, read_master_key_method, get_is_persisted_method, get_is_secure_method, exists_mock, save_passwd_for_alias_method):
    is_root_method.return_value = True
    p = get_ambari_properties_method.return_value
    p.get_property.side_effect = ['fakepasswd', None, None, None]
    read_master_key_method.return_value = 'aaa'
    get_YN_input_method.side_effect = [True, False]
    read_ambari_user_method.return_value = None
    get_is_persisted_method.return_value = (True, 'filepath')
    get_is_secure_method.return_value = False
    exists_mock.return_value = False
    save_passwd_for_alias_method.return_value = 0
    ambari__server.setup_master_key()
    self.assertTrue(get_YN_input_method.called)
    self.assertTrue(read_master_key_method.called)
    self.assertTrue(read_ambari_user_method.called)
    self.assertTrue(update_properties_method.called)
    self.assertTrue(save_master_key_method.called)
    result_expected = {ambari__server.JDBC_PASSWORD_PROPERTY: ambari__server.get_alias_string(ambari__server.JDBC_RCA_PASSWORD_ALIAS), ambari__server.SECURITY_IS_ENCRYPTION_ENABLED: 'true', }
    sorted_x = sorted(result_expected.iteritems(), key=operator.itemgetter(0))
    sorted_y = sorted(update_properties_method.call_args[0][1].iteritems(), key=operator.itemgetter(0))
    self.assertEquals(sorted_x, sorted_y)
