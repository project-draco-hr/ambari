@not_for_platform(PLATFORM_WINDOWS)
@patch.object(OSCheck, 'os_distribution', new=MagicMock(return_value=os_distro_value))
@patch('ambari_server.serverSetup.read_ambari_user')
@patch('ambari_server.serverSetup.get_YN_input')
@patch('ambari_server.serverSetup.get_validated_string_input')
@patch('ambari_server.serverSetup.adjust_directory_permissions')
@patch('ambari_server.serverSetup.run_os_command')
@patch('ambari_server.serverSetup.print_error_msg')
@patch('ambari_server.serverSetup.print_warning_msg')
@patch('ambari_server.serverSetup.print_info_msg')
def test_check_ambari_user(self, print_info_msg_mock, print_warning_msg_mock, print_error_msg_mock, run_os_command_mock, adjust_directory_permissions_mock, get_validated_string_input_mock, get_YN_input_mock, read_ambari_user_mock):

    def _reset_mocks():
        get_YN_input_mock.reset_mock()
        get_validated_string_input_mock.reset_mock()
        run_os_command_mock.reset_mock()
        adjust_directory_permissions_mock.reset_mock()
        pass
    options = self._create_empty_options_mock()
    run_os_command_mock.return_value = (0, '', '')
    read_ambari_user_mock.return_value = 'dummy-user'
    get_YN_input_mock.return_value = False
    result = check_ambari_user(options)
    self.assertTrue(get_YN_input_mock.called)
    self.assertFalse(get_validated_string_input_mock.called)
    self.assertFalse(run_os_command_mock.called)
    self.assertTrue(adjust_directory_permissions_mock.called)
    self.assertEqual(result[0], 0)
    _reset_mocks()
    read_ambari_user_mock.return_value = 'dummy-user'
    get_validated_string_input_mock.return_value = 'new-dummy-user'
    get_YN_input_mock.return_value = True
    result = check_ambari_user(options)
    self.assertTrue(get_YN_input_mock.called)
    self.assertTrue((result[2] == 'new-dummy-user'))
    self.assertTrue(get_validated_string_input_mock.called)
    self.assertTrue(adjust_directory_permissions_mock.called)
    self.assertEqual(result[0], 0)
    _reset_mocks()
    read_ambari_user_mock.return_value = 'dummy-user'
    run_os_command_mock.return_value = (1, '', '')
    get_YN_input_mock.return_value = True
    result = check_ambari_user(options)
    self.assertTrue(get_YN_input_mock.called)
    self.assertTrue(get_validated_string_input_mock.called)
    self.assertTrue(run_os_command_mock.called)
    self.assertFalse(adjust_directory_permissions_mock.called)
    self.assertEqual(result[0], 1)
    _reset_mocks()
    read_ambari_user_mock.return_value = None
    get_YN_input_mock.return_value = True
    get_validated_string_input_mock.return_value = 'dummy-user'
    run_os_command_mock.return_value = (0, '', '')
    result = check_ambari_user(options)
    self.assertTrue(get_YN_input_mock.called)
    self.assertTrue(get_validated_string_input_mock.called)
    self.assertTrue(run_os_command_mock.called)
    self.assertTrue((result[2] == 'dummy-user'))
    self.assertTrue(adjust_directory_permissions_mock.called)
    self.assertEqual(result[0], 0)
    _reset_mocks()
    read_ambari_user_mock.return_value = None
    get_YN_input_mock.return_value = True
    run_os_command_mock.return_value = (1, '', '')
    result = check_ambari_user(options)
    self.assertTrue(get_YN_input_mock.called)
    self.assertTrue(get_validated_string_input_mock.called)
    self.assertTrue(run_os_command_mock.called)
    self.assertFalse(adjust_directory_permissions_mock.called)
    self.assertEqual(result[0], 1)
    _reset_mocks()
    read_ambari_user_mock.return_value = None
    get_YN_input_mock.return_value = True
    run_os_command_mock.return_value = (1, '', '')
    result = check_ambari_user(options)
    self.assertTrue(get_YN_input_mock.called)
    self.assertTrue(get_validated_string_input_mock.called)
    self.assertTrue(run_os_command_mock.called)
    self.assertFalse(adjust_directory_permissions_mock.called)
    self.assertEqual(result[0], 1)
    _reset_mocks()
    read_ambari_user_mock.return_value = None
    get_YN_input_mock.return_value = False
    result = check_ambari_user(options)
    self.assertTrue(get_YN_input_mock.called)
    self.assertFalse(get_validated_string_input_mock.called)
    self.assertFalse(run_os_command_mock.called)
    self.assertTrue((result[2] == 'root'))
    self.assertTrue(adjust_directory_permissions_mock.called)
    self.assertEqual(result[0], 0)
    pass
