@patch.object(OSCheck, 'os_distribution', new=MagicMock(return_value=os_distro_value))
@patch('ambari_server.serverSetup.read_ambari_user')
@patch('ambari_server.serverSetup.get_YN_input')
@patch.object(AmbariUserChecksLinux, '_create_custom_user')
@patch.object(AmbariUserChecksWindows, '_create_custom_user')
@patch('ambari_server.serverSetup.write_property')
@patch('ambari_server.serverSetup.adjust_directory_permissions')
@patch('ambari_server.serverSetup.print_error_msg')
def test_check_ambari_user(self, print_error_msg_mock, adjust_directory_permissions_mock, write_property_mock, create_custom_user_mock, create_custom_user_2_mock, get_YN_input_mock, read_ambari_user_mock):
    read_ambari_user_mock.return_value = 'dummy-user'
    get_YN_input_mock.return_value = False
    result = check_ambari_user()
    self.assertTrue(get_YN_input_mock.called)
    self.assertFalse(write_property_mock.called)
    self.assertFalse((create_custom_user_mock.called or create_custom_user_2_mock.called))
    self.assertTrue(adjust_directory_permissions_mock.called)
    self.assertEqual(result, 0)
    get_YN_input_mock.reset_mock()
    write_property_mock.reset_mock()
    adjust_directory_permissions_mock.reset_mock()
    create_custom_user_mock.reset_mock()
    create_custom_user_2_mock.reset_mock()
    read_ambari_user_mock.return_value = 'dummy-user'
    create_custom_user_2_mock.return_value = create_custom_user_mock.return_value = (0, 'new-dummy-user')
    get_YN_input_mock.return_value = True
    result = check_ambari_user()
    self.assertTrue(get_YN_input_mock.called)
    self.assertTrue(write_property_mock.called)
    self.assertTrue((write_property_mock.call_args[0][1] == 'new-dummy-user'))
    self.assertTrue((create_custom_user_mock.called or create_custom_user_2_mock.called))
    self.assertTrue(adjust_directory_permissions_mock.called)
    self.assertEqual(result, 0)
    get_YN_input_mock.reset_mock()
    write_property_mock.reset_mock()
    adjust_directory_permissions_mock.reset_mock()
    create_custom_user_mock.reset_mock()
    create_custom_user_2_mock.reset_mock()
    read_ambari_user_mock.return_value = 'dummy-user'
    create_custom_user_2_mock.return_value = create_custom_user_mock.return_value = (1, None)
    get_YN_input_mock.return_value = True
    result = check_ambari_user()
    self.assertTrue(get_YN_input_mock.called)
    self.assertTrue((create_custom_user_mock.called or create_custom_user_2_mock.called))
    self.assertFalse(write_property_mock.called)
    self.assertFalse(adjust_directory_permissions_mock.called)
    self.assertEqual(result, 1)
    get_YN_input_mock.reset_mock()
    create_custom_user_mock.reset_mock()
    create_custom_user_2_mock.reset_mock()
    write_property_mock.reset_mock()
    adjust_directory_permissions_mock.reset_mock()
    read_ambari_user_mock.return_value = None
    get_YN_input_mock.return_value = True
    create_custom_user_2_mock.return_value = create_custom_user_mock.return_value = (0, 'dummy-user')
    result = check_ambari_user()
    self.assertTrue(get_YN_input_mock.called)
    self.assertTrue((create_custom_user_mock.called or create_custom_user_2_mock.called))
    self.assertTrue(write_property_mock.called)
    self.assertTrue((write_property_mock.call_args[0][1] == 'dummy-user'))
    self.assertTrue(adjust_directory_permissions_mock.called)
    self.assertEqual(result, 0)
    get_YN_input_mock.reset_mock()
    create_custom_user_mock.reset_mock()
    create_custom_user_2_mock.reset_mock()
    write_property_mock.reset_mock()
    adjust_directory_permissions_mock.reset_mock()
    read_ambari_user_mock.return_value = None
    get_YN_input_mock.return_value = True
    create_custom_user_2_mock.return_value = create_custom_user_mock.return_value = (1, None)
    result = check_ambari_user()
    self.assertTrue(get_YN_input_mock.called)
    self.assertTrue((create_custom_user_mock.called or create_custom_user_2_mock.called))
    self.assertFalse(write_property_mock.called)
    self.assertFalse(adjust_directory_permissions_mock.called)
    self.assertEqual(result, 1)
    get_YN_input_mock.reset_mock()
    create_custom_user_mock.reset_mock()
    create_custom_user_2_mock.reset_mock()
    write_property_mock.reset_mock()
    adjust_directory_permissions_mock.reset_mock()
    read_ambari_user_mock.return_value = None
    get_YN_input_mock.return_value = True
    create_custom_user_2_mock.return_value = create_custom_user_mock.return_value = (1, None)
    result = check_ambari_user()
    self.assertTrue(get_YN_input_mock.called)
    self.assertTrue((create_custom_user_mock.called or create_custom_user_2_mock.called))
    self.assertFalse(write_property_mock.called)
    self.assertFalse(adjust_directory_permissions_mock.called)
    self.assertEqual(result, 1)
    get_YN_input_mock.reset_mock()
    create_custom_user_mock.reset_mock()
    create_custom_user_2_mock.reset_mock()
    write_property_mock.reset_mock()
    adjust_directory_permissions_mock.reset_mock()
    read_ambari_user_mock.return_value = None
    get_YN_input_mock.return_value = False
    result = check_ambari_user()
    self.assertTrue(get_YN_input_mock.called)
    self.assertFalse((create_custom_user_mock.called or create_custom_user_2_mock.called))
    self.assertTrue(write_property_mock.called)
    self.assertTrue((write_property_mock.call_args[0][1] == 'root'))
    self.assertTrue(adjust_directory_permissions_mock.called)
    self.assertEqual(result, 0)
