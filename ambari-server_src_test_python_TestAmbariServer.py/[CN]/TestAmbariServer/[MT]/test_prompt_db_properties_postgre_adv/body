@patch.object(OSCheck, 'get_os_family')
@patch.object(OSCheck, 'get_os_type')
@patch.object(OSCheck, 'get_os_major_version')
@patch('ambari_server.dbConfiguration_linux.read_password')
@patch('ambari_server.dbConfiguration_linux.get_validated_string_input')
@patch('ambari_server.dbConfiguration_linux.get_YN_input')
def test_prompt_db_properties_postgre_adv(self, gyni_mock, gvsi_mock, rp_mock, get_os_major_version_mock, get_os_type_mock, get_os_family_mock):
    gyni_mock.return_value = True
    list_of_return_values = ['ambari-server', 'ambari', 'ambari']

    def side_effect(*args, **kwargs):
        return list_of_return_values.pop()
    gvsi_mock.side_effect = side_effect
    rp_mock.return_value = 'password'
    args = MagicMock()
    properties = Properties()
    args.dbms_index = 0
    args.silent = False
    del args.dbms
    del args.database_host
    del args.database_port
    del args.database_name
    del args.database_username
    del args.database_password
    factory = DBMSConfigFactory()
    dbConfig = factory.create(args, properties)
    dbConfig._prompt_db_properties()
    self.assertEqual(dbConfig.dbms, 'postgres')
    self.assertEqual(dbConfig.database_port, '5432')
    self.assertEqual(dbConfig.database_host, 'localhost')
    self.assertEqual(dbConfig.database_name, 'ambari')
    self.assertEqual(dbConfig.database_username, 'ambari-server')
    self.assertEqual(dbConfig.sid_or_sname, 'sname')
