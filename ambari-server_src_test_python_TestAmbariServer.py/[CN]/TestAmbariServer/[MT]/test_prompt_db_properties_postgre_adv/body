@not_for_platform(PLATFORM_WINDOWS)
@patch.object(OSCheck, 'os_distribution', new=MagicMock(return_value=os_distro_value))
@patch.object(PGConfig, '_setup_local_server')
@patch('ambari_server.dbConfiguration_linux.print_info_msg')
@patch('ambari_server.dbConfiguration_linux.read_password')
@patch('ambari_server.dbConfiguration_linux.get_validated_string_input')
@patch('ambari_server.dbConfiguration.get_validated_string_input')
@patch('ambari_server.serverSetup.get_YN_input')
def test_prompt_db_properties_postgre_adv(self, gyni_mock, gvsi_mock, gvsi_2_mock, rp_mock, print_info_msg_mock, sls_mock):
    gyni_mock.return_value = True
    list_of_return_values = ['ambari-server', 'ambari', 'ambari', '1']

    def side_effect(*args, **kwargs):
        return list_of_return_values.pop()
    gvsi_mock.side_effect = side_effect
    gvsi_2_mock.side_effect = side_effect
    rp_mock.return_value = 'password'
    args = MagicMock()
    args.must_set_database_options = True
    del args.database_index
    del args.dbms
    del args.database_host
    del args.database_port
    del args.database_name
    del args.database_username
    del args.database_password
    del args.persistence_type
    set_silent(False)
    prompt_db_properties(args)
    self.assertEqual(args.database_index, 0)
    props = Properties()
    factory = DBMSConfigFactory()
    dbmsConfig = factory.create(args, props)
    self.assertEqual(dbmsConfig.dbms, 'postgres')
    self.assertEqual(dbmsConfig.database_port, '5432')
    self.assertEqual(dbmsConfig.database_host, 'localhost')
    self.assertEqual(dbmsConfig.database_name, 'ambari')
    self.assertEqual(dbmsConfig.database_username, 'ambari')
    self.assertEqual(dbmsConfig.database_password, 'bigdata')
    dbmsConfig.configure_database(props)
    self.assertEqual(dbmsConfig.database_username, 'ambari-server')
    self.assertEqual(dbmsConfig.database_password, 'password')
    self.assertEqual(dbmsConfig.sid_or_sname, 'sid')
    pass
