@patch.object(FirewallChecks, 'run_os_command')
@patch.object(OSCheck, 'get_os_family')
@patch.object(OSCheck, 'get_os_type')
@patch.object(OSCheck, 'get_os_major_version')
@patch('ambari_server.serverSetup.prompt_db_properties')
@patch('ambari_server.serverSetup.verify_setup_allowed')
@patch('ambari_server.serverSetup.get_YN_input', side_effect=db_YN_Inputs_ret_test_ambariServerSetupWithCustomDbName)
@patch('ambari_server.serverSetup.configure_os_settings')
@patch('ambari_server.serverSetup.download_and_install_jdk')
@patch('ambari_server.serverSetup._check_jdbc_options')
@patch('ambari_server.serverSetup.check_ambari_user')
@patch('ambari_server.serverSetup.check_jdbc_drivers')
@patch('ambari_server.serverSetup._check_selinux')
@patch('ambari_server.serverSetup.proceedJDBCProperties')
@patch('ambari_server.serverSetup.is_root')
@patch('ambari_server.serverSetup.read_ambari_user')
@patch('ambari_server.dbConfiguration_linux.read_password')
@patch('ambari_server.dbConfiguration_linux.store_password_file')
@patch('ambari_server.serverSetup.extract_views')
@patch('ambari_server.serverSetup.adjust_directory_permissions')
@patch('ambari_server.setupSecurity.adjust_directory_permissions')
@patch('sys.exit')
@patch('__builtin__.raw_input')
def test_ambariServerSetupWithCustomDbName(self, raw_input, exit_mock, adjust_dirs_mock, adjust_dirs_2_mock, extract_views_mock, store_password_file_mock, read_password_mock, read_ambari_user_mock, is_root_mock, proceedJDBCProperties_mock, check_selinux_mock, check_jdbc_drivers_mock, check_ambari_user_mock, check_jdbc_options_mock, download_jdk_mock, configure_os_settings_mock, get_YN_input, verify_setup_allowed_method, prompt_db_properties_mock, get_os_major_version_mock, get_os_type_mock, get_os_family_mock, run_os_command_mock):
    args = MagicMock()
    raw_input.return_value = ''
    get_YN_input.return_value = False
    verify_setup_allowed_method.return_value = 0
    is_root_mock.return_value = True
    check_selinux_mock.return_value = 0
    check_jdbc_options_mock.return_value = False
    check_ambari_user_mock.return_value = 0
    check_jdbc_drivers_mock.return_value = 0
    prompt_db_properties_mock.return_value = True
    download_jdk_mock.return_value = 0
    configure_os_settings_mock.return_value = 0
    read_ambari_user_mock.return_value = 'username1'
    read_password_mock.return_value = 'bigdata'
    store_password_file_mock.return_value = 'password'
    extract_views_mock.return_value = 0
    get_os_type_mock.return_value = ''
    get_os_family_mock.return_value = OSConst.REDHAT_FAMILY
    run_os_command_mock.return_value = (3, '', '')
    new_db = 'newDBName'
    args.dbms = 'postgres'
    args.dbms_index = 3
    args.database_name = new_db
    args.postgres_schema = new_db
    args.database_username = 'user'
    args.database_password = 'password'
    args.jdbc_driver = None
    args.jdbc_db = None
    args.silent = False
    tempdir = tempfile.gettempdir()
    prop_file = os.path.join(tempdir, 'ambari.properties')
    with open(prop_file, 'w') as f:
        f.write('server.jdbc.database_name=oldDBName')
    f.close()
    os.environ[AMBARI_CONF_VAR] = tempdir
    try:
        result = setup(args)
    except FatalException as ex:
        self.fail('Setup should be successful')
    properties = get_ambari_properties()
    self.assertTrue((JDBC_DATABASE_NAME_PROPERTY in properties.keys()))
    value = properties[JDBC_DATABASE_NAME_PROPERTY]
    self.assertEqual(value, new_db)
    del os.environ[AMBARI_CONF_VAR]
    os.remove(prop_file)
