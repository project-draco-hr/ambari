@patch.object(_ambari_server_, 'run_os_command')
@patch.object(OSCheck, 'get_os_family')
@patch.object(OSCheck, 'get_os_type')
@patch.object(OSCheck, 'get_os_major_version')
@patch.object(_ambari_server_, 'is_jdbc_user_changed')
@patch.object(_ambari_server_, 'verify_setup_allowed')
@patch.object(_ambari_server_, 'get_YN_input')
@patch.object(_ambari_server_, 'configure_os_settings')
@patch.object(_ambari_server_, 'download_jdk')
@patch.object(_ambari_server_, 'configure_postgres')
@patch.object(_ambari_server_, 'check_postgre_up')
@patch.object(_ambari_server_, 'check_ambari_user')
@patch.object(_ambari_server_, 'check_jdbc_drivers')
@patch.object(_ambari_server_, 'check_selinux')
@patch.object(_ambari_server_, 'is_local_database')
@patch.object(_ambari_server_, 'is_root')
@patch.object(_ambari_server_, 'setup_db')
@patch.object(_ambari_server_, 'get_is_secure')
@patch.object(_ambari_server_, 'store_password_file')
@patch.object(_ambari_server_, 'extract_views')
@patch.object(_ambari_server_, 'adjust_directory_permissions')
@patch('sys.exit')
@patch('__builtin__.raw_input')
@patch.object(_ambari_server_, 'unpack_jce_policy')
def test_ambariServerSetupWithCustomDbName(self, unpack_jce_policy_mock, raw_input, exit_mock, adjust_dirs_mock, extract_views_mock, store_password_file_mock, get_is_secure_mock, setup_db_mock, is_root_mock, is_local_database_mock, check_selinux_mock, check_jdbc_drivers_mock, check_ambari_user_mock, check_postgre_up_mock, configure_postgres_mock, download_jdk_mock, configure_os_settings_mock, get_YN_input, verify_setup_allowed_method, is_jdbc_user_changed_mock, get_os_major_version_mock, get_os_type_mock, get_os_family_mock, run_os_command_mock):
    args = MagicMock()
    raw_input.return_value = ''
    get_YN_input.return_value = False
    verify_setup_allowed_method.return_value = 0
    is_root_mock.return_value = True
    check_selinux_mock.return_value = 0
    check_ambari_user_mock.return_value = 0
    check_jdbc_drivers_mock.return_value = 0
    check_postgre_up_mock.return_value = ('running', 0, '', '')
    is_local_database_mock.return_value = True
    configure_postgres_mock.return_value = (0, '', '')
    download_jdk_mock.return_value = 0
    configure_os_settings_mock.return_value = 0
    is_jdbc_user_changed_mock.return_value = False
    setup_db_mock.return_value = (0, None, None)
    get_is_secure_mock.return_value = False
    store_password_file_mock.return_value = 'password'
    extract_views_mock.return_value = 0
    get_os_type_mock.return_value = ''
    get_os_family_mock.return_value = OSConst.REDHAT_FAMILY
    run_os_command_mock.return_value = (3, '', '')
    unpack_jce_policy_mock.return_value = 0
    new_db = 'newDBName'
    args.dbms = 'postgres'
    args.database_name = new_db
    args.postgres_schema = new_db
    args.database_username = 'user'
    args.database_password = 'password'
    args.jdbc_driver = None
    args.jdbc_db = None
    tempdir = tempfile.gettempdir()
    prop_file = os.path.join(tempdir, 'ambari.properties')
    with open(prop_file, 'w') as f:
        f.write('server.jdbc.database_name=oldDBName')
    f.close()
    os.environ[_ambari_server_.AMBARI_CONF_VAR] = tempdir
    try:
        result = _ambari_server_.setup(args)
    except FatalException as ex:
        self.fail('Setup should be successful')
    properties = get_ambari_properties()
    self.assertTrue((_ambari_server_.JDBC_DATABASE_NAME_PROPERTY in properties.keys()))
    value = properties[_ambari_server_.JDBC_DATABASE_NAME_PROPERTY]
    self.assertEqual(value, new_db)
    del os.environ[_ambari_server_.AMBARI_CONF_VAR]
    os.remove(prop_file)
