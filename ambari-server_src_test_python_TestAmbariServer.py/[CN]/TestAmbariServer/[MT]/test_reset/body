@patch.object(ambari_server, 'get_remote_script_line')
@patch.object(ambari_server, 'is_server_runing')
@patch.object(ambari_server, 'get_YN_input')
@patch.object(ambari_server, 'setup_db')
@patch.object(ambari_server, 'print_info_msg')
@patch.object(ambari_server, 'run_os_command')
@patch.object(ambari_server, 'configure_database_username_password')
@patch.object(ambari_server, 'parse_properties_file')
@patch.object(ambari_server, 'is_root')
@patch.object(ambari_server, 'check_database_name_property')
def test_reset(self, check_database_name_property_mock, is_root_mock, parse_properties_file_mock, configure_database_username_password_mock, run_os_command_mock, print_info_msg_mock, setup_db_mock, get_YN_inputMock, is_server_running_mock, get_remote_script_line_mock):
    parse_properties_file_mock.return_value = 0
    args = MagicMock()
    args.persistence_type = 'local'
    get_YN_inputMock.return_value = False
    is_server_running_mock.return_value = (False, 0)
    setup_db_mock.side_effect = [(0, None, None), (0, None, "ERROR: database 'ambari' is being accessed by other users"), (0, None, "ERROR: user 'mapred' already exist")]
    is_root_mock.return_value = False
    try:
        ambari_server.reset(args)
        self.fail('Should throw exception')
    except FatalException as fe:
        self.assertTrue(('root-level' in fe.reason))
        pass
    is_root_mock.return_value = True
    try:
        ambari_server.reset(args)
        self.fail('Should throw exception')
    except FatalException as fe:
        self.assertFalse(('root-level' in fe.reason))
        pass
    get_YN_inputMock.return_value = True
    run_os_command_mock.return_value = (1, None, None)
    try:
        ambari_server.reset(args)
        self.fail('Should throw exception')
    except FatalException:
        pass
    run_os_command_mock.return_value = (0, None, None)
    ambari_server.reset(args)
    self.assertTrue(setup_db_mock.called)
    is_server_running_mock.side_effect = [(True, 123), (False, 0), (False, 0), (False, 0), (False, 0)]
    try:
        ambari_server.reset(args)
        self.fail('Should throw exception')
    except FatalException:
        pass
    try:
        ambari_server.reset(args)
        self.fail('Should throw exception')
    except NonFatalException:
        pass
    get_remote_script_line_mock.return_value = None
    try:
        args.persistence_type = 'remote'
        ambari_server.reset(args)
        self.fail('Should throw exception')
    except NonFatalException:
        pass
    get_remote_script_line_mock.reset_mock()
    get_remote_script_line_mock.side_effect = ['drop', 'create']
    try:
        args.persistence_type = 'remote'
        rcode = ambari_server.reset(args)
        self.fail('Should throw exception')
    except NonFatalException:
        self.assertTrue(get_remote_script_line_mock.called)
        pass
