@not_for_platform(PLATFORM_WINDOWS)
@patch.object(OSCheck, 'os_distribution', new=MagicMock(return_value=os_distro_value))
@patch.object(OracleConfig, '_get_remote_script_line')
@patch('ambari_server.serverSetup.is_server_runing')
@patch('ambari_server.dbConfiguration_linux.get_YN_input')
@patch('ambari_server.serverSetup.get_YN_input')
@patch.object(PGConfig, '_setup_db')
@patch('ambari_server.dbConfiguration_linux.print_warning_msg')
@patch('ambari_server.dbConfiguration_linux.print_info_msg')
@patch('ambari_server.dbConfiguration_linux.run_os_command')
@patch('ambari_server.dbConfiguration.decrypt_password_for_alias')
@patch('ambari_server.serverSetup.get_ambari_properties')
@patch('ambari_server.serverSetup.is_root')
def test_reset(self, is_root_mock, get_ambari_properties_mock, decrypt_password_for_alias_mock, run_os_command_mock, print_info_msg_mock, print_warning_msg_mock, setup_db_mock, get_YN_input_mock, get_YN_input_2_mock, is_server_running_mock, get_remote_script_line_mock):

    def reset_mocks():
        args = MagicMock()
        del args.dbms
        del args.database_index
        del args.database_host
        del args.database_port
        del args.database_name
        del args.database_username
        del args.database_password
        del args.persistence_type
        del args.init_script_file
        del args.drop_script_file
        del args.sid_or_sname
        del args.jdbc_url
        return args
    properties = Properties()
    get_ambari_properties_mock.return_value = properties
    args = reset_mocks()
    args.persistence_type = 'local'
    get_YN_input_mock.return_value = False
    decrypt_password_for_alias_mock.return_value = 'password'
    is_server_running_mock.return_value = (False, 0)
    setup_db_mock.side_effect = [(0, None, None), (0, None, "ERROR: database 'ambari' is being accessed by other users"), (0, None, "ERROR: user 'mapred' already exist")]
    is_root_mock.return_value = False
    try:
        reset(args)
        self.fail('Should throw exception')
    except FatalException as fe:
        self.assertTrue(('root-level' in fe.reason))
        pass
    is_root_mock.return_value = True
    try:
        reset(args)
        self.fail('Should throw exception')
    except FatalException as fe:
        self.assertFalse(('root-level' in fe.reason))
        pass
    get_YN_input_mock.return_value = True
    get_YN_input_2_mock.return_value = True
    run_os_command_mock.return_value = (1, None, None)
    try:
        reset(args)
        self.fail('Should throw exception')
    except FatalException:
        pass
    run_os_command_mock.return_value = (0, None, None)
    reset(args)
    self.assertTrue(setup_db_mock.called)
    is_server_running_mock.side_effect = [(True, 123), (False, 0), (False, 0), (False, 0), (False, 0)]
    try:
        reset(args)
        self.fail('Should throw exception')
    except FatalException:
        pass
    try:
        reset(args)
        self.fail('Should throw exception')
    except NonFatalException:
        pass
    args = reset_mocks()
    args.dbms = 'postgres'
    try:
        reset(args)
        self.fail('Should throw exception')
    except NonFatalException:
        pass
    args = reset_mocks()
    args.dbms = 'oracle'
    print_warning_msg_mock.reset_mock()
    get_remote_script_line_mock.reset_mock()
    get_remote_script_line_mock.side_effect = ['drop', 'create']
    try:
        rcode = reset(args)
        self.fail('Should throw exception')
    except NonFatalException:
        self.assertTrue(get_remote_script_line_mock.called)
        self.assertTrue(print_warning_msg_mock.called)
        pass
    pass
