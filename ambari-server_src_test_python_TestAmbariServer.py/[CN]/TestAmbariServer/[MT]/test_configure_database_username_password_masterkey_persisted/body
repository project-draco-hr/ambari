@patch.object(ambari_server, 'decrypt_password_for_alias')
@patch.object(ambari_server, 'is_alias_string')
@patch.object(ambari_server, 'get_ambari_properties')
def test_configure_database_username_password_masterkey_persisted(self, get_ambari_properties_method, is_alias_string_method, decrypt_password_for_alias_method):
    out = StringIO.StringIO()
    sys.stdout = out
    configs = {ambari_server.JDBC_USER_NAME_PROPERTY: 'fakeuser', ambari_server.JDBC_PASSWORD_PROPERTY: '${alias=somealias}', ambari_server.JDBC_DATABASE_NAME_PROPERTY: 'fakedbname', ambari_server.SECURITY_KEY_IS_PERSISTED: 'True', }
    get_ambari_properties_method.return_value = configs
    is_alias_string_method.return_value = True
    decrypt_password_for_alias_method.return_value = 'falepasswd'
    args = MagicMock()
    args.master_key = None
    ambari_server.configure_database_username_password(args)
    self.assertTrue(decrypt_password_for_alias_method.called)
    self.assertTrue(is_alias_string_method.called)
    self.assertEquals('fakeuser', args.database_username)
    self.assertEquals('falepasswd', args.database_password)
    sys.stdout = sys.__stdout__
