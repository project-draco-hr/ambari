@not_for_platform(PLATFORM_WINDOWS)
@patch('os.path.isabs')
@patch('ambari_server.dbConfiguration.decrypt_password_for_alias')
@patch('ambari_server.dbConfiguration_linux.get_ambari_properties')
def test_configure_database_username_password_masterkey_persisted(self, get_ambari_properties_method, decrypt_password_for_alias_method, path_isabs_method):
    out = StringIO.StringIO()
    sys.stdout = out
    properties = Properties()
    properties.process_pair(JDBC_USER_NAME_PROPERTY, 'fakeuser')
    properties.process_pair(JDBC_PASSWORD_PROPERTY, '${alias=somealias}')
    properties.process_pair(JDBC_DATABASE_NAME_PROPERTY, 'fakedbname')
    properties.process_pair(SECURITY_KEY_IS_PERSISTED, 'True')
    get_ambari_properties_method.return_value = properties
    decrypt_password_for_alias_method.return_value = 'falepasswd'
    args = MagicMock()
    args.master_key = None
    del args.database_index
    del args.dbms
    del args.database_host
    del args.database_port
    del args.database_name
    del args.database_username
    del args.database_password
    del args.sid_or_sname
    del args.jdbc_url
    dbms = OracleConfig(args, properties, 'local')
    self.assertTrue(decrypt_password_for_alias_method.called)
    self.assertFalse(path_isabs_method.called)
    self.assertEquals('fakeuser', dbms.database_username)
    self.assertEquals('falepasswd', dbms.database_password)
    sys.stdout = sys.__stdout__
    pass
