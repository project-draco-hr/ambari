@not_for_platform(PLATFORM_WINDOWS)
@patch('time.sleep')
@patch('subprocess.Popen')
@patch('ambari_server.dbConfiguration_linux.run_os_command')
@patch.object(PGConfig, '_get_postgre_status')
def test_check_postgre_up(self, get_postgre_status_mock, run_os_command_mock, popen_mock, sleep_mock):
    from ambari_server import serverConfiguration
    p = MagicMock()
    p.communicate.return_value = (None, None)
    p.returncode = 0
    popen_mock.return_value = p
    get_postgre_status_mock.return_value = ('running', 0, '', '')
    serverConfiguration.OS_TYPE = OSConst.OS_REDHAT
    p.poll.return_value = 0
    run_os_command_mock.return_value = (0, None, None)
    (pg_status, retcode, out, err) = PGConfig._check_postgre_up()
    self.assertEqual(0, retcode)
    serverConfiguration.OS_TYPE = OSConst.OS_SUSE
    run_os_command_mock.return_value = (0, None, None)
    p.poll.return_value = 0
    get_postgre_status_mock.return_value = ('stopped', 0, '', '')
    (pg_status, retcode, out, err) = PGConfig._check_postgre_up()
    self.assertEqual(0, retcode)
    pass
