@patch('os.path.isdir', new=MagicMock(return_value=True))
@patch('os.access', new=MagicMock(return_value=True))
@patch.object(ServerClassPath, 'get_full_ambari_classpath_escaped_for_shell', new=MagicMock(return_value=(('test' + os.pathsep) + 'path12')))
@patch('ambari_server.serverUtils.is_server_runing')
@patch('ambari_commons.os_utils.run_os_command')
@patch('ambari_server.setupSecurity.generate_env')
@patch('ambari_server.setupSecurity.ensure_can_start_under_current_user')
@patch('ambari_server.serverConfiguration.read_ambari_user')
@patch('ambari_server.dbConfiguration.ensure_jdbc_driver_is_installed')
@patch('ambari_server.serverConfiguration.parse_properties_file')
@patch('ambari_server.serverConfiguration.get_ambari_properties')
@patch('ambari_server.serverConfiguration.get_java_exe_path')
def test_check_database(self, getJavaExePathMock, getAmbariPropertiesMock, parsePropertiesFileMock, ensureDriverInstalledMock, readAmbariUserMock, ensureCanStartUnderCurrentUserMock, generateEnvMock, runOSCommandMock, isServerRunningMock):
    properties = Properties()
    properties.process_pair('server.jdbc.database', 'embedded')
    getJavaExePathMock.return_value = '/path/to/java'
    getAmbariPropertiesMock.return_value = properties
    readAmbariUserMock.return_value = 'test_user'
    ensureCanStartUnderCurrentUserMock.return_value = 'test_user'
    generateEnvMock.return_value = {}
    runOSCommandMock.return_value = (0, '', '')
    isServerRunningMock.return_value = (False, 1)
    check_database(properties)
    self.assertTrue(getJavaExePathMock.called)
    self.assertTrue(readAmbariUserMock.called)
    self.assertTrue(ensureCanStartUnderCurrentUserMock.called)
    self.assertTrue(generateEnvMock.called)
    self.assertEquals(runOSCommandMock.call_args[0][0], '/path/to/java -cp test:path12 org.apache.ambari.server.checks.CheckDatabaseHelper')
    pass
