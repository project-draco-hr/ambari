@patch.object(_ambari_server_, 'get_validated_filepath_input')
@patch.object(_ambari_server_, 'run_os_command')
@patch.object(_ambari_server_, 'get_truststore_type')
@patch('__builtin__.open')
@patch.object(_ambari_server_, 'find_properties_file')
@patch.object(_ambari_server_, 'run_component_https_cmd')
@patch.object(_ambari_server_, 'get_delete_cert_command')
@patch.object(_ambari_server_, 'get_truststore_password')
@patch.object(_ambari_server_, 'get_truststore_path')
@patch.object(_ambari_server_, 'get_YN_input')
@patch.object(_ambari_server_, 'get_ambari_properties')
@patch.object(_ambari_server_, 'find_jdk')
def test_setup_component_https(self, find_jdk_mock, get_ambari_properties_mock, get_YN_input_mock, get_truststore_path_mock, get_truststore_password_mock, get_delete_cert_command_mock, run_component_https_cmd_mock, find_properties_file_mock, open_mock, get_truststore_type_mock, run_os_command_mock, get_validated_filepath_input_mock):
    out = StringIO.StringIO()
    sys.stdout = out
    component = 'component'
    command = 'command'
    property = 'use_ssl'
    alias = 'alias'
    set_silent(True)
    _ambari_server_.setup_component_https(component, command, property, alias)
    self.assertEqual('command is not enabled in silent mode.\n', out.getvalue())
    sys.stdout = sys.__stdout__
    set_silent(False)
    p = get_ambari_properties_mock.return_value
    p.get_property.side_effect = ['true']
    get_YN_input_mock.side_effect = [False]
    _ambari_server_.setup_component_https(component, command, property, alias)
    self.assertTrue(p.get_property.called)
    self.assertTrue(get_YN_input_mock.called)
    p.get_property.reset_mock()
    get_YN_input_mock.reset_mock()
    p.get_property.side_effect = ['false']
    get_YN_input_mock.side_effect = [False]
    _ambari_server_.setup_component_https(component, command, property, alias)
    self.assertTrue(p.get_property.called)
    self.assertTrue(get_YN_input_mock.called)
    p.get_property.reset_mock()
    get_YN_input_mock.reset_mock()
    find_jdk_mock.return_value = None
    try:
        _ambari_server_.setup_component_https(component, command, property, alias)
        self.fail('Should throw exception')
    except FatalException as fe:
        self.assertTrue((('No JDK found, please run the "ambari-server setup" command to install a' + ' JDK automatically or install any JDK manually to ') in fe.reason))
        pass
    find_jdk_mock.return_value = '/jdk_path'
    p.get_property.side_effect = ['true']
    get_YN_input_mock.side_effect = [True]
    get_truststore_path_mock.return_value = '/truststore_path'
    get_truststore_password_mock.return_value = '/truststore_password'
    get_delete_cert_command_mock.return_value = 'rm -f'
    _ambari_server_.setup_component_https(component, command, property, alias)
    self.assertTrue(p.process_pair.called)
    self.assertTrue(get_truststore_path_mock.called)
    self.assertTrue(get_truststore_password_mock.called)
    self.assertTrue(get_delete_cert_command_mock.called)
    self.assertTrue(find_properties_file_mock.called)
    self.assertTrue(open_mock.called)
    self.assertTrue(p.store.called)
    self.assertTrue(run_component_https_cmd_mock.called)
    p.process_pair.reset_mock()
    get_truststore_path_mock.reset_mock()
    get_truststore_password_mock.reset_mock()
    get_delete_cert_command_mock.reset_mock()
    find_properties_file_mock.reset_mock()
    open_mock.reset_mock()
    p.store.reset_mock()
    p.get_property.side_effect = ['false']
    get_YN_input_mock.side_effect = [True]
    _ambari_server_.setup_component_https(component, command, property, alias)
    self.assertTrue(p.process_pair.called)
    self.assertTrue(get_truststore_type_mock.called)
    self.assertTrue(get_truststore_path_mock.called)
    self.assertTrue(get_truststore_password_mock.called)
    self.assertTrue(get_delete_cert_command_mock.called)
    self.assertTrue(find_properties_file_mock.called)
    self.assertTrue(open_mock.called)
    self.assertTrue(p.store.called)
    self.assertTrue(run_component_https_cmd_mock.called)
    self.assertTrue(run_os_command_mock.called)
    self.assertTrue(get_validated_filepath_input_mock.called)
    p.process_pair.reset_mock()
    get_truststore_type_mock.reset_mock()
    get_truststore_path_mock.reset_mock()
    get_truststore_password_mock.reset_mock()
    get_delete_cert_command_mock.reset_mock()
    find_properties_file_mock.reset_mock()
    open_mock.reset_mock()
    p.store.reset_mock()
    run_os_command_mock.reset_mock()
    get_validated_filepath_input_mock.reset_mock()
