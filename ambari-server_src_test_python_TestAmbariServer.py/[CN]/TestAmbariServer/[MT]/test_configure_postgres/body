@patch.object(_ambari_server_, 'restart_postgres')
@patch.object(_ambari_server_, 'get_postgre_status')
@patch.object(_ambari_server_, 'configure_postgresql_conf')
@patch.object(_ambari_server_, 'configure_pg_hba_ambaridb_users')
@patch.object(_ambari_server_, 'configure_pg_hba_postgres_user')
def test_configure_postgres(self, configure_pg_hba_postgres_user_mock, configure_pg_hba_ambaridb_users_mock, configure_postgresql_conf_mock, get_postgre_status_mock, restart_postgres_mock):
    tf1 = tempfile.NamedTemporaryFile()
    tf2 = tempfile.NamedTemporaryFile()
    _ambari_server_.PG_HBA_CONF_FILE = tf1.name
    _ambari_server_.PG_HBA_CONF_FILE_BACKUP = tf2.name
    args = MagicMock()
    out = StringIO.StringIO()
    sys.stdout = out
    (retcode, out1, err) = _ambari_server_.configure_postgres()
    sys.stdout = sys.__stdout__
    self.assertEqual(0, retcode)
    self.assertEqual('Backup for pg_hba found, reconfiguration not required\n', out.getvalue())
    _ambari_server_.PG_HBA_CONF_FILE_BACKUP = tempfile.mktemp()
    get_postgre_status_mock.return_value = (_ambari_server_.PG_STATUS_RUNNING, 0, '', '')
    restart_postgres_mock.return_value = (0, '', '')
    (rcode, out, err) = _ambari_server_.configure_postgres()
    self.assertTrue(os.path.isfile(_ambari_server_.PG_HBA_CONF_FILE_BACKUP), 'postgresql.conf backup not created')
    self.assertTrue(configure_pg_hba_postgres_user_mock.called)
    self.assertTrue(configure_pg_hba_ambaridb_users_mock.called)
    mode = oct(os.stat(_ambari_server_.PG_HBA_CONF_FILE)[stat.ST_MODE])
    str_mode = str(mode)[(-4):]
    self.assertEqual('0644', str_mode, 'Wrong file permissions')
    self.assertTrue(configure_postgresql_conf_mock.called)
    self.assertEqual(0, rcode)
    os.unlink(_ambari_server_.PG_HBA_CONF_FILE_BACKUP)
    get_postgre_status_mock.return_value = ('stopped', 0, '', '')
    (rcode, out, err) = _ambari_server_.configure_postgres()
    self.assertEqual(0, rcode)
    os.unlink(_ambari_server_.PG_HBA_CONF_FILE_BACKUP)
    sys.stdout = sys.__stdout__
