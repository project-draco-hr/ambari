@patch('__builtin__.raw_input')
def get_choice_string_input(self, raw_input_method):
    prompt = 'blablabla'
    default = 'default blablabla'
    firstChoice = set(['yes', 'ye', 'y'])
    secondChoice = set(['no', 'n'])
    raw_input_method.return_value = 'Y'
    result = _ambari_server_.get_choice_string_input(prompt, default, firstChoice, secondChoice)
    self.assertEquals(result, True)
    raw_input_method.reset_mock()
    raw_input_method.return_value = 'N'
    result = _ambari_server_.get_choice_string_input(prompt, default, firstChoice, secondChoice)
    self.assertEquals(result, False)
    raw_input_method.reset_mock()
    raw_input_method.return_value = ''
    result = _ambari_server_.get_choice_string_input(prompt, default, firstChoice, secondChoice)
    self.assertEquals(result, default)
    raw_input_method.reset_mock()
    list_of_return_values = ['yes', 'dsad', 'fdsfds']

    def side_effect(list):
        return list_of_return_values.pop()
    raw_input_method.side_effect = side_effect
    result = _ambari_server_.get_choice_string_input(prompt, default, firstChoice, secondChoice)
    self.assertEquals(result, True)
    self.assertEquals(raw_input_method.call_count, 3)
    pass
