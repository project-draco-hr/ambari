@patch.object(OSCheck, 'get_os_family')
@patch.object(OSCheck, 'get_os_type')
@patch.object(OSCheck, 'get_os_major_version')
@patch('ambari_server.serverSetup.get_YN_input')
@patch('ambari_server.dbConfiguration.get_validated_string_input')
def test_prompt_db_properties(self, get_validated_string_input_mock, get_YN_input_mock, get_os_major_version_mock, get_os_type_mock, get_os_family_mock):
    args = MagicMock()
    args.silent = True
    args.must_set_database_options = True
    args.dbms = 'postgres'
    del args.dbms_index
    prompt_db_properties(args)
    self.assertFalse(get_validated_string_input_mock.called)
    self.assertFalse(get_YN_input_mock.called)
    self.assertTrue((args.dbms_index == 0))
    get_validated_string_input_mock.reset_mock()
    get_YN_input_mock.reset_mock()
    args.silent = False
    get_YN_input_mock.return_value = False
    prompt_db_properties(args)
    self.assertTrue(get_YN_input_mock.called)
    self.assertFalse(get_validated_string_input_mock.called)
    self.assertTrue((args.dbms_index == 0))
    get_validated_string_input_mock.reset_mock()
    get_YN_input_mock.reset_mock()
    get_YN_input_mock.return_value = True
    get_validated_string_input_mock.return_value = '4'
    prompt_db_properties(args)
    self.assertTrue(get_YN_input_mock.called)
    self.assertTrue(get_validated_string_input_mock.called)
    self.assertEquals(args.dbms_index, 3)
    get_validated_string_input_mock.reset_mock()
    get_YN_input_mock.reset_mock()
