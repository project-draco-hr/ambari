@not_for_platform(PLATFORM_WINDOWS)
@patch.object(OSCheck, 'os_distribution', new=MagicMock(return_value=os_distro_value))
@patch('ambari_server.serverSetup.get_YN_input')
@patch('ambari_server.dbConfiguration.get_validated_string_input')
@patch('ambari_server.dbConfiguration_linux.print_info_msg')
@patch('ambari_server.dbConfiguration.get_ambari_properties')
def test_prompt_db_properties(self, get_ambari_properties_mock, print_info_msg_mock, get_validated_string_input_mock, get_YN_input_mock):

    def reset_mocks():
        get_validated_string_input_mock.reset_mock()
        get_YN_input_mock.reset_mock()
        args = MagicMock()
        del args.database_index
        del args.dbms
        del args.database_host
        del args.database_port
        del args.database_name
        del args.database_username
        del args.database_password
        del args.persistence_type
        return args
    args = reset_mocks()
    get_ambari_properties_mock.return_value = Properties()
    set_silent(False)
    args.must_set_database_options = False
    prompt_db_properties(args)
    self.assertFalse(get_validated_string_input_mock.called)
    self.assertFalse(get_YN_input_mock.called)
    args = reset_mocks()
    args.must_set_database_options = True
    get_YN_input_mock.return_value = False
    prompt_db_properties(args)
    self.assertTrue(get_YN_input_mock.called)
    self.assertFalse(get_validated_string_input_mock.called)
    args = reset_mocks()
    args.must_set_database_options = True
    get_YN_input_mock.return_value = True
    get_validated_string_input_mock.return_value = '4'
    prompt_db_properties(args)
    self.assertTrue(get_YN_input_mock.called)
    self.assertTrue(get_validated_string_input_mock.called)
    self.assertEquals(args.database_index, 3)
    pass
