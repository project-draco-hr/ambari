@not_for_platform(PLATFORM_WINDOWS)
@patch.object(OSCheck, 'os_distribution', new=MagicMock(return_value=os_distro_value))
@patch('ambari_server.dbConfiguration.get_ambari_properties')
@patch('ambari_server.dbConfiguration_linux.get_ambari_properties')
@patch('ambari_server.dbConfiguration_linux.print_error_msg')
@patch('ambari_server.dbConfiguration.print_error_msg')
@patch('ambari_server.dbConfiguration_linux.print_warning_msg')
@patch('__builtin__.raw_input')
@patch('glob.glob')
@patch('os.path.isdir')
@patch('os.path.lexists')
@patch('os.remove')
@patch('os.symlink')
@patch('shutil.copy')
@patch('os.path.isfile')
@patch('ambari_server.dbConfiguration.get_YN_input')
@patch('ambari_server.dbConfiguration.update_properties')
@patch('ambari_server.dbConfiguration.get_validated_string_input')
def test_ensure_jdbc_drivers_installed(self, get_valid_str_in_mock, update_properties_mock, getYN_mock, isfile_mock, shutil_copy_mock, os_symlink_mock, os_remove_mock, lexists_mock, isdir_mock, glob_mock, raw_input_mock, print_warning_msg, print_error_msg_mock, print_error_msg_2_mock, get_ambari_properties_mock, get_ambari_properties_2_mock):
    out = StringIO.StringIO()
    sys.stdout = out

    def reset_mocks():
        get_ambari_properties_mock.reset_mock()
        get_ambari_properties_2_mock.reset_mock()
        shutil_copy_mock.reset_mock()
        print_error_msg_mock.reset_mock()
        print_warning_msg.reset_mock()
        raw_input_mock.reset_mock()
        isfile_mock.reset_mock()
        os_remove_mock.reset_mock
        getYN_mock.reset_mock()
        get_valid_str_in_mock.reset_mock()
        update_properties_mock.reset_mock()
        args = MagicMock()
        del args.database_index
        del args.persistence_type
        del args.silent
        del args.sid_or_sname
        del args.jdbc_url
        args.dbms = 'oracle'
        return args
    drivers_list = [os.path.join(os.sep, 'usr', 'share', 'java', 'ojdbc6.jar')]
    resources_dir = (os.sep + 'tmp')
    props = Properties()
    props.process_pair(RESOURCES_DIR_PROPERTY, resources_dir)
    props.process_pair(JDBC_DRIVER_PATH_PROPERTY, '/some/test/path/to/oracle.-jdbc.jar')
    get_ambari_properties_2_mock.return_value = get_ambari_properties_mock.return_value = props
    factory = DBMSConfigFactory()
    args = reset_mocks()
    glob_mock.return_value = drivers_list
    isdir_mock.return_value = True
    lexists_mock.return_value = True
    isfile_mock.return_value = True
    getYN_mock.return_value = True
    dbms = factory.create(args, props)
    rcode = dbms.ensure_jdbc_driver_installed(props)
    self.assertEquals(update_properties_mock.call_count, 0)
    self.assertTrue(rcode)
    args = reset_mocks()
    isfile_mock.side_effect = [False, True]
    getYN_mock.return_value = True
    dbms = factory.create(args, props)
    rcode = dbms.ensure_jdbc_driver_installed(props)
    self.assertEquals(update_properties_mock.call_count, 1)
    self.assertEquals(getYN_mock.call_count, 1)
    self.assertTrue(rcode)
    args = reset_mocks()
    isfile_mock.side_effect = [False, False, True, True]
    get_valid_str_in_mock.return_value = '/test/full/path/to/oracle_jdbc.jar'
    rcode = dbms.ensure_jdbc_driver_installed(props)
    self.assertEquals(update_properties_mock.call_count, 1)
    self.assertTrue(rcode)
    self.assertEquals(props['server.jdbc.driver.path'], '/test/full/path/to/oracle_jdbc.jar')
    self.assertEquals(shutil_copy_mock.call_count, 1)
    self.assertEquals(shutil_copy_mock.call_count, 1)
    self.assertEquals(os_remove_mock.call_count, 1)
    args = reset_mocks()
    isfile_mock.side_effect = [False, False, False, False]
    rcode = dbms.ensure_jdbc_driver_installed(props)
    self.assertFalse(rcode)
    print_error_msg_mock.assert_called_once_with('Custom jdbc connector path is unavailable. Please put correct path to jdbc connector.')
    pass
