@patch.object(_ambari_server_, 'adjust_directory_permissions')
@patch.object(_ambari_server_, 'read_ambari_user')
@patch.object(_ambari_server_, 'get_validated_string_input')
@patch.object(_ambari_server_, 'find_properties_file')
@patch.object(_ambari_server_, 'get_ambari_properties')
@patch.object(_ambari_server_, 'is_server_runing')
@patch.object(_ambari_server_, 'import_cert_and_key_action')
@patch.object(_ambari_server_, 'get_YN_input')
@patch('__builtin__.open')
@patch('ambari-server.Properties')
@patch.object(_ambari_server_, 'is_root')
@patch.object(_ambari_server_, 'is_valid_cert_host')
@patch.object(_ambari_server_, 'is_valid_cert_exp')
def test_setup_https(self, is_valid_cert_exp_mock, is_valid_cert_host_mock, is_root_mock, Properties_mock, open_Mock, get_YN_input_mock, import_cert_and_key_action_mock, is_server_runing_mock, get_ambari_properties_mock, find_properties_file_mock, get_validated_string_input_mock, read_ambari_user_method, adjust_directory_permissions_mock):
    is_valid_cert_exp_mock.return_value = True
    is_valid_cert_host_mock.return_value = True
    args = MagicMock()
    open_Mock.return_value = file
    p = get_ambari_properties_mock.return_value
    is_root_mock.return_value = False
    try:
        _ambari_server_.setup_https(args)
        self.fail('Should throw exception')
    except FatalException as fe:
        self.assertTrue(('root-level' in fe.reason))
        pass
    is_root_mock.return_value = True
    read_ambari_user_method.return_value = 'user'
    p.get_property.side_effect = ['key_dir', '5555', '6666', 'true']
    get_YN_input_mock.side_effect = [False, True]
    get_validated_string_input_mock.side_effect = ['4444']
    get_property_expected = (("[call('security.server.keys_dir'),\n" + " call('client.api.ssl.port'),\n") + " call('client.api.ssl.port'),\n call('api.ssl')]")
    process_pair_expected = "[call('client.api.ssl.port', '4444')]"
    set_silent(False)
    _ambari_server_.setup_https(args)
    self.assertTrue(p.process_pair.called)
    self.assertTrue((p.get_property.call_count == 4))
    self.assertEqual(str(p.get_property.call_args_list), get_property_expected)
    self.assertEqual(str(p.process_pair.call_args_list), process_pair_expected)
    self.assertTrue(p.store.called)
    self.assertTrue(import_cert_and_key_action_mock.called)
    p.process_pair.reset_mock()
    p.get_property.reset_mock()
    p.store.reset_mock()
    import_cert_and_key_action_mock.reset_mock()
    p.get_property.side_effect = ['key_dir', '', 'true']
    get_YN_input_mock.side_effect = [True]
    get_validated_string_input_mock.side_effect = ['4444']
    get_property_expected = ("[call('security.server.keys_dir'),\n" + " call('client.api.ssl.port'),\n call('api.ssl')]")
    process_pair_expected = "[call('api.ssl', 'false')]"
    _ambari_server_.setup_https(args)
    self.assertTrue(p.process_pair.called)
    self.assertTrue((p.get_property.call_count == 3))
    self.assertEqual(str(p.get_property.call_args_list), get_property_expected)
    self.assertEqual(str(p.process_pair.call_args_list), process_pair_expected)
    self.assertTrue(p.store.called)
    self.assertFalse(import_cert_and_key_action_mock.called)
    p.process_pair.reset_mock()
    p.get_property.reset_mock()
    p.store.reset_mock()
    import_cert_and_key_action_mock.reset_mock()
    p.get_property.side_effect = ['key_dir', '', None]
    get_YN_input_mock.side_effect = [True, True]
    get_validated_string_input_mock.side_effect = ['4444']
    get_property_expected = ("[call('security.server.keys_dir'),\n" + " call('client.api.ssl.port'),\n call('api.ssl')]")
    process_pair_expected = "[call('client.api.ssl.port', '4444')]"
    _ambari_server_.setup_https(args)
    self.assertTrue(p.process_pair.called)
    self.assertTrue((p.get_property.call_count == 3))
    self.assertEqual(str(p.get_property.call_args_list), get_property_expected)
    self.assertEqual(str(p.process_pair.call_args_list), process_pair_expected)
    self.assertTrue(p.store.called)
    self.assertTrue(import_cert_and_key_action_mock.called)
    p.process_pair.reset_mock()
    p.get_property.reset_mock()
    p.store.reset_mock()
    import_cert_and_key_action_mock.reset_mock()
    p.get_property.side_effect = ['key_dir', '', None]
    get_YN_input_mock.side_effect = [False]
    get_validated_string_input_mock.side_effect = ['4444']
    get_property_expected = ("[call('security.server.keys_dir'),\n" + " call('client.api.ssl.port'),\n call('api.ssl')]")
    process_pair_expected = '[]'
    _ambari_server_.setup_https(args)
    self.assertFalse(p.process_pair.called)
    self.assertTrue((p.get_property.call_count == 3))
    self.assertEqual(str(p.get_property.call_args_list), get_property_expected)
    self.assertEqual(str(p.process_pair.call_args_list), process_pair_expected)
    self.assertFalse(p.store.called)
    self.assertFalse(import_cert_and_key_action_mock.called)
    p.process_pair.reset_mock()
    p.get_property.reset_mock()
    p.store.reset_mock()
    import_cert_and_key_action_mock.reset_mock()
    p.get_property.side_effect = ['key_dir', '', 'false']
    get_YN_input_mock.side_effect = [True]
    import_cert_and_key_action_mock.side_effect = [False]
    get_validated_string_input_mock.side_effect = ['4444']
    get_property_expected = ("[call('security.server.keys_dir'),\n" + " call('client.api.ssl.port'),\n call('api.ssl')]")
    process_pair_expected = "[call('client.api.ssl.port', '4444')]"
    self.assertFalse(_ambari_server_.setup_https(args))
    self.assertTrue(p.process_pair.called)
    self.assertTrue((p.get_property.call_count == 3))
    self.assertEqual(str(p.get_property.call_args_list), get_property_expected)
    self.assertEqual(str(p.process_pair.call_args_list), process_pair_expected)
    self.assertFalse(p.store.called)
    self.assertTrue(import_cert_and_key_action_mock.called)
    p.process_pair.reset_mock()
    p.get_property.reset_mock()
    p.store.reset_mock()
    import_cert_and_key_action_mock.reset_mock()
    set_silent(True)
    try:
        _ambari_server_.setup_https(args)
        self.fail('Should throw exception')
    except NonFatalException as fe:
        self.assertTrue(('setup-https is not enabled in silent mode' in fe.reason))
    p.process_pair.reset_mock()
    p.get_property.reset_mock()
    p.store.reset_mock()
    import_cert_and_key_action_mock.reset_mock()
    set_silent(False)
    find_properties_file_mock.return_value = 'propertyFile'
    p.get_property.side_effect = KeyError('Failed to read property')
    try:
        _ambari_server_.setup_https(args)
        self.fail('Should throw exception')
    except FatalException as fe:
        self.assertTrue(('Failed to read property' in fe.reason))
