@not_for_platform(PLATFORM_WINDOWS)
@patch.object(OSCheck, 'os_distribution', new=MagicMock(return_value=os_distro_value))
@patch('ambari_server.dbConfiguration_linux.store_password_file')
@patch('ambari_server.dbConfiguration_linux.read_password')
@patch('ambari_server.dbConfiguration_linux.get_validated_string_input')
@patch('ambari_server.dbConfiguration_linux.get_YN_input')
def test_prompt_db_properties_for_each_database_type(self, gyni_mock, gvsi_mock, rp_mock, spf_mock):
    '\n    :return: Validates that installation for each database type correctly stores the database type, database name,\n    and optionally the postgres schema name.\n    '
    from ambari_server import serverConfiguration
    gyni_mock.return_value = True
    rp_mock.return_value = 'password'
    spf_mock.return_value = 'encrypted password'
    hostname = 'localhost'
    db_name = 'db_ambari'
    postgres_schema = 'sc_ambari'
    port = '1234'
    local_admin_user = 'postgres'
    oracle_service = '1'
    oracle_service_name = 'ambari'
    user_name = 'ambari'
    postgres_embedded_values = [local_admin_user, db_name, postgres_schema, hostname]
    oracle_values = [hostname, port, oracle_service, oracle_service_name, user_name]
    mysql_values = [hostname, port, db_name, user_name]
    postgres_external_values = [hostname, port, db_name, postgres_schema, user_name]
    mssql_values = [hostname, port, db_name, user_name]
    list_of_return_values = ((((postgres_embedded_values + oracle_values) + mysql_values) + postgres_external_values) + mssql_values)
    list_of_return_values = list_of_return_values[::(-1)]

    def side_effect(*args, **kwargs):
        return list_of_return_values.pop()
    gvsi_mock.side_effect = side_effect
    if (AMBARI_CONF_VAR in os.environ):
        del os.environ[AMBARI_CONF_VAR]
    tempdir = tempfile.gettempdir()
    os.environ[AMBARI_CONF_VAR] = tempdir
    prop_file = os.path.join(tempdir, 'ambari.properties')
    for i in range(0, 5):
        if os.path.exists(prop_file):
            os.remove(prop_file)
        with open(prop_file, 'w') as f:
            f.write('server.jdbc.database_name=oldDBName')
        f.close()
        serverConfiguration.AMBARI_PROPERTIES_FILE = prop_file
        args = MagicMock()
        properties = Properties()
        args.database_index = i
        args.silent = False
        del args.dbms
        del args.database_host
        del args.local_admin_user
        del args.database_port
        del args.database_name
        del args.database_username
        del args.database_password
        del args.sid_or_sname
        del args.jdbc_url
        factory = DBMSConfigFactory()
        dbConfig = factory.create(args, properties)
        dbConfig._prompt_db_properties()
        if dbConfig._is_local_database():
            dbConfig._setup_local_server(properties, None)
        else:
            dbConfig._setup_remote_server(properties, None)
        if (i == 0):
            self.assertEqual(properties[JDBC_DATABASE_PROPERTY], 'postgres')
            self.assertEqual(properties[JDBC_DATABASE_NAME_PROPERTY], db_name)
            self.assertEqual(properties[JDBC_POSTGRES_SCHEMA_PROPERTY], postgres_schema)
            self.assertEqual(properties[PERSISTENCE_TYPE_PROPERTY], 'local')
        elif (i == 1):
            self.assertEqual(properties[JDBC_DATABASE_PROPERTY], 'oracle')
            self.assertFalse((JDBC_POSTGRES_SCHEMA_PROPERTY in properties.propertyNames()))
            self.assertEqual(properties[PERSISTENCE_TYPE_PROPERTY], 'remote')
        elif (i == 2):
            self.assertEqual(properties[JDBC_DATABASE_PROPERTY], 'mysql')
            self.assertFalse((JDBC_POSTGRES_SCHEMA_PROPERTY in properties.propertyNames()))
            self.assertEqual(properties[PERSISTENCE_TYPE_PROPERTY], 'remote')
        elif (i == 3):
            self.assertEqual(properties[JDBC_DATABASE_PROPERTY], 'postgres')
            self.assertEqual(properties[JDBC_DATABASE_NAME_PROPERTY], db_name)
            self.assertEqual(properties[JDBC_POSTGRES_SCHEMA_PROPERTY], postgres_schema)
            self.assertEqual(properties[PERSISTENCE_TYPE_PROPERTY], 'remote')
        elif (i == 4):
            self.assertEqual(properties[JDBC_DATABASE_PROPERTY], 'mssql')
            self.assertFalse((JDBC_POSTGRES_SCHEMA_PROPERTY in properties.propertyNames()))
            self.assertEqual(properties[PERSISTENCE_TYPE_PROPERTY], 'remote')
    pass
