@patch('os.makedirs')
@patch('os.path.exists')
@patch('os.rename')
@patch('os.stat')
@patch('urllib2.urlopen')
@patch('__builtin__.open')
@patch('ambari_commons.inet_utils.download_progress')
@patch('ambari_commons.inet_utils.print_info_msg')
def test_track_jdk(self, print_info_msg_mock, download_progress_mock, openMock, urlopenMock, os_stat_mock, os_rename_mock, os_path_exists_mock, os_makedirs_mock):
    os_path_exists_mock.return_value = False
    fsize = MagicMock()
    fsize.st_size = 24576
    os_stat_mock.return_value = fsize
    inf = MagicMock()
    inf.getheaders.return_value = ['bytes 0-24575/24576']
    u = MagicMock()
    u.info.return_value = inf
    chunks = [None, 'second', 'first']

    def side_effect(*args, **kwargs):
        return chunks.pop()
    u.read.side_effect = side_effect
    urlopenMock.return_value = u
    f = MagicMock()
    openMock.return_value = f
    force_download_file('base', 'url', progress_func=download_progress_mock)
    self.assertEqual(0, len(chunks))
    self.assertTrue(f.write.called)
    self.assertTrue(f.close.called)
    self.assertEqual(2, len(download_progress_mock.call_args_list))
    self.assertTrue(print_info_msg_mock.called)
