@patch.object(FirewallChecks, 'run_os_command')
@patch.object(OSCheck, 'get_os_family')
@patch.object(OSCheck, 'get_os_type')
@patch.object(OSCheck, 'get_os_major_version')
@patch('sys.exit')
@patch('ambari_server.userInput.get_YN_input')
@patch('ambari_commons.os_utils.is_root')
@patch('ambari_server.dbConfiguration_linux.store_password_file')
@patch('__builtin__.raw_input')
def test_store_remote_properties(self, raw_input_mock, store_password_file_mock, is_root_mock, get_YN_input, exit_mock, get_os_major_version_mock, get_os_type_mock, get_os_family_mock, run_os_command_mock):
    raw_input_mock.return_value = ''
    is_root_mock.return_value = True
    get_YN_input.return_value = False
    get_os_type_mock.return_value = ''
    get_os_family_mock.return_value = OSConst.REDHAT_FAMILY
    run_os_command_mock.return_value = (3, '', '')
    store_password_file_mock.return_value = 'encrypted_bigdata'
    import optparse
    args = optparse.Values()
    args.dbms = 'oracle'
    args.database_host = 'localhost'
    args.database_port = '1234'
    args.database_name = 'ambari'
    args.postgres_schema = 'ambari'
    args.sid_or_sname = 'foo'
    args.database_username = 'foo'
    args.database_password = 'foo'
    properties0 = Properties()
    properties = Properties()
    factory = DBMSConfigFactory()
    dbConfig = factory.create(args, properties0)
    dbConfig._store_remote_properties(properties)
    found = False
    for n in properties.propertyNames():
        if ((not found) and n.startswith('server.jdbc.properties')):
            found = True
    self.assertTrue(found)
