@patch.object(_ambari_server_, 'run_os_command')
@patch.object(OSCheck, 'get_os_family')
@patch.object(OSCheck, 'get_os_type')
@patch.object(OSCheck, 'get_os_major_version')
@patch.object(_ambari_server_, 'verify_setup_allowed')
@patch('sys.exit')
@patch.object(_ambari_server_, 'get_YN_input')
@patch.object(_ambari_server_, 'get_db_cli_tool')
@patch.object(_ambari_server_, 'is_local_database')
@patch.object(_ambari_server_, 'check_jdbc_drivers')
@patch.object(_ambari_server_, 'is_root')
@patch.object(_ambari_server_, 'check_ambari_user')
@patch.object(_ambari_server_, 'download_jdk')
@patch.object(_ambari_server_, 'configure_os_settings')
@patch('__builtin__.raw_input')
def test_store_remote_properties(self, raw_input, configure_os_settings_mock, download_jdk_mock, check_ambari_user_mock, is_root_mock, check_jdbc_drivers_mock, is_local_db_mock, get_db_cli_tool_mock, get_YN_input, exit_mock, verify_setup_allowed_method, get_os_major_version_mock, get_os_type_mock, get_os_family_mock, run_os_command_mock):
    raw_input.return_value = ''
    is_root_mock.return_value = True
    is_local_db_mock.return_value = False
    get_YN_input.return_value = False
    get_os_type_mock.return_value = ''
    get_os_family_mock.return_value = OSConst.REDHAT_FAMILY
    run_os_command_mock.return_value = (3, '', '')
    get_db_cli_tool_mock.return_value = None
    check_jdbc_drivers_mock.return_value = 0
    check_ambari_user_mock.return_value = 0
    download_jdk_mock.return_value = 0
    configure_os_settings_mock.return_value = 0
    verify_setup_allowed_method.return_value = 0
    import optparse
    args = optparse.Values()
    args.dbms = 'oracle'
    args.database_host = 'localhost'
    args.database_port = '1234'
    args.database_name = 'ambari'
    args.postgres_schema = 'ambari'
    args.sid_or_sname = 'foo'
    args.database_username = 'foo'
    args.database_password = 'foo'
    tempdir = tempfile.gettempdir()
    prop_file = os.path.join(tempdir, 'ambari.properties')
    with open(prop_file, 'w') as f:
        f.write('dummy=dummy')
    f.close()
    os.environ[_ambari_server_.AMBARI_CONF_VAR] = tempdir
    _ambari_server_.DATABASE_INDEX = 1
    _ambari_server_.store_remote_properties(args)
    properties = _ambari_server_.get_ambari_properties()
    found = False
    for n in properties.propertyNames():
        if ((not found) and n.startswith('server.jdbc.properties')):
            found = True
    _ambari_server_.DATABASE_INDEX = 0
    del os.environ[_ambari_server_.AMBARI_CONF_VAR]
    os.remove(prop_file)
    self.assertTrue(found)
