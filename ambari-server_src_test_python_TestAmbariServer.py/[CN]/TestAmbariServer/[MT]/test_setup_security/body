@patch.object(OSCheck, 'os_distribution', new=MagicMock(return_value=os_distro_value))
@patch.object(_ambari_server_, 'setup_ambari_krb5_jaas')
@patch.object(_ambari_server_, 'setup_master_key')
@patch('ambari_server.setupHttps.setup_component_https')
@patch.object(_ambari_server_, 'setup_https')
@patch.object(_ambari_server_, 'get_validated_string_input')
def test_setup_security(self, get_validated_string_input_mock, setup_https_mock, setup_component_https_mock, setup_master_key_mock, setup_ambari_krb5_jaas_mock):
    args = {}
    get_validated_string_input_mock.return_value = '1'
    _ambari_server_.setup_security(args)
    self.assertTrue(setup_https_mock.called)
    get_validated_string_input_mock.return_value = '2'
    _ambari_server_.setup_security(args)
    self.assertTrue(setup_component_https_mock.called)
    setup_component_https_mock.assert_called_with('Ganglia', 'setup-ganglia-https', GANGLIA_HTTPS, 'ganglia_cert')
    get_validated_string_input_mock.return_value = '3'
    _ambari_server_.setup_security(args)
    self.assertTrue(setup_master_key_mock.called)
    get_validated_string_input_mock.return_value = '4'
    _ambari_server_.setup_security(args)
    self.assertTrue(setup_ambari_krb5_jaas_mock.called)
    pass
