{
  LOG.info("Context parameters " + context);
  try {
    hostname=InetAddress.getLocalHost().getHostName();
    if ((hostname == null) || (!hostname.contains("."))) {
      hostname=InetAddress.getLocalHost().getCanonicalHostName();
    }
  }
 catch (  UnknownHostException e) {
    LOG.error("Could not identify hostname.");
    throw new FlumeException("Could not identify hostname.",e);
  }
  Configuration configuration=new Configuration("/flume-metrics2.properties");
  timeoutSeconds=Integer.parseInt(configuration.getProperty(METRICS_POST_TIMEOUT_SECONDS,String.valueOf(DEFAULT_POST_TIMEOUT_SECONDS)));
  maxRowCacheSize=Integer.parseInt(configuration.getProperty(MAX_METRIC_ROW_CACHE_SIZE,String.valueOf(TimelineMetricsCache.MAX_RECS_PER_NAME_DEFAULT)));
  metricsSendInterval=Integer.parseInt(configuration.getProperty(METRICS_SEND_INTERVAL,String.valueOf(TimelineMetricsCache.MAX_EVICTION_TIME_MILLIS)));
  metricsCaches=new HashMap<String,TimelineMetricsCache>();
  collectorHosts=parseHostsStringIntoCollection(configuration.getProperty(COLLECTOR_HOSTS_PROPERTY));
  zookeeperQuorum=configuration.getProperty("zookeeper.quorum");
  protocol=configuration.getProperty(COLLECTOR_PROTOCOL,"http");
  port=configuration.getProperty(COLLECTOR_PORT,"6188");
  super.init();
  collectorUri=constructTimelineMetricUri(protocol,findPreferredCollectHost(),port);
  if (protocol.contains("https")) {
    String trustStorePath=configuration.getProperty(SSL_KEYSTORE_PATH_PROPERTY).trim();
    String trustStoreType=configuration.getProperty(SSL_KEYSTORE_TYPE_PROPERTY).trim();
    String trustStorePwd=configuration.getProperty(SSL_KEYSTORE_PASSWORD_PROPERTY).trim();
    loadTruststore(trustStorePath,trustStoreType,trustStorePwd);
  }
  pollFrequency=Long.parseLong(configuration.getProperty("collectionFrequency"));
  String[] metrics=configuration.getProperty(COUNTER_METRICS_PROPERTY).trim().split(",");
  Collections.addAll(counterMetrics,metrics);
}
