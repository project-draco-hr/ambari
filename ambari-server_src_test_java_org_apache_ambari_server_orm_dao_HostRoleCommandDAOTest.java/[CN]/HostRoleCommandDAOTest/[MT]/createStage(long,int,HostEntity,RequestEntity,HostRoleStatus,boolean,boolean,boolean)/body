{
  long stageId=startStageId;
  ClusterEntity clusterEntity=m_clusterDAO.findByName("test_cluster1");
  StageEntity stageEntity=new StageEntity();
  stageEntity.setClusterId(clusterEntity.getClusterId());
  stageEntity.setRequest(requestEntity);
  stageEntity.setStageId(stageId);
  stageEntity.setHostRoleCommands(new ArrayList<HostRoleCommandEntity>());
  stageEntity.setSkippable(skipStage);
  stageEntity.setAutoSkipFailureSupported(supportsAutoSkipOnFailure);
  m_stageDAO.create(stageEntity);
  requestEntity.getStages().add(stageEntity);
  for (int i=0; i < count; i++) {
    HostRoleCommandEntity commandEntity=new HostRoleCommandEntity();
    commandEntity.setRequestId(requestEntity.getRequestId());
    commandEntity.setStageId(stageId);
    commandEntity.setRoleCommand(RoleCommand.INSTALL);
    commandEntity.setStatus(status);
    commandEntity.setRole(Role.DATANODE);
    commandEntity.setHostEntity(hostEntity);
    commandEntity.setStage(stageEntity);
    commandEntity.setAutoSkipOnFailure(autoSkipFailedCommandsInStage && skipStage && supportsAutoSkipOnFailure);
    m_hostRoleCommandDAO.create(commandEntity);
    hostEntity.getHostRoleCommandEntities().add(commandEntity);
    hostEntity=m_hostDAO.merge(hostEntity);
    stageEntity.getHostRoleCommands().add(commandEntity);
    m_stageDAO.merge(stageEntity);
  }
}
