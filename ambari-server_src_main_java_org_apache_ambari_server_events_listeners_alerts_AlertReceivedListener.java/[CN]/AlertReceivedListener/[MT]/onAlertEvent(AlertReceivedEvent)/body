{
  if (LOG.isDebugEnabled()) {
    LOG.debug(event.toString());
  }
  List<Alert> alerts=event.getAlerts();
  List<AlertCurrentEntity> toCreate=new ArrayList<>();
  List<AlertCurrentEntity> toMerge=new ArrayList<>();
  List<AlertCurrentEntity> toCreateHistoryAndMerge=new ArrayList<>();
  List<AlertEvent> alertEvents=new ArrayList<>(20);
  for (  Alert alert : alerts) {
    if (!isValid(alert)) {
      continue;
    }
    String clusterName=alert.getCluster();
    Long clusterId=getClusterIdByName(clusterName);
    if (clusterId == null) {
      clusterId=event.getClusterId();
    }
    AlertDefinitionEntity definition=m_definitionDao.findByName(clusterId,alert.getName());
    if (null == definition) {
      LOG.warn("Received an alert for {} which is a definition that does not exist anymore",alert.getName());
      continue;
    }
    if (!definition.getEnabled()) {
      LOG.debug("Received an alert for {} which is disabled. No more alerts should be received for this definition.",alert.getName());
      continue;
    }
    AlertCurrentEntity current;
    AlertState alertState=alert.getState();
    if (StringUtils.isBlank(alert.getHostName()) || definition.isHostIgnored()) {
      current=m_alertsDao.findCurrentByNameNoHost(clusterId,alert.getName());
    }
 else {
      current=m_alertsDao.findCurrentByHostAndName(clusterId,alert.getHostName(),alert.getName());
    }
    if (null == current) {
      if (alertState == AlertState.SKIPPED) {
        continue;
      }
      AlertHistoryEntity history=createHistory(clusterId,definition,alert);
      MaintenanceState maintenanceState=MaintenanceState.OFF;
      try {
        maintenanceState=m_maintenanceStateHelper.get().getEffectiveState(clusterId,alert);
      }
 catch (      Exception exception) {
        LOG.error("Unable to determine the maintenance mode state for {}, defaulting to OFF",alert,exception);
      }
      current=new AlertCurrentEntity();
      current.setMaintenanceState(maintenanceState);
      current.setAlertHistory(history);
      current.setLatestTimestamp(alert.getTimestamp());
      current.setOriginalTimestamp(alert.getTimestamp());
      current.setFirmness(AlertFirmness.HARD);
      toCreate.add(current);
      alertEvents.add(new InitialAlertEvent(clusterId,alert,current));
    }
 else     if (alertState == current.getAlertHistory().getAlertState() || alertState == AlertState.SKIPPED) {
      current.setLatestTimestamp(alert.getTimestamp());
      if (alertState != AlertState.SKIPPED) {
        current.setLatestText(alert.getText());
        long occurrences=current.getOccurrences() + 1;
        current.setOccurrences(occurrences);
        AlertFirmness currentFirmness=current.getFirmness();
        int repeatTolerance=definition.getRepeatTolerance();
        if (currentFirmness == AlertFirmness.SOFT && occurrences >= repeatTolerance) {
          current.setFirmness(AlertFirmness.HARD);
          alertEvents.add(new AlertStateChangeEvent(clusterId,alert,current,alertState));
        }
      }
      toMerge.add(current);
    }
 else {
      if (LOG.isDebugEnabled()) {
        LOG.debug("Alert State Changed: CurrentId {}, CurrentTimestamp {}, HistoryId {}, HistoryState {}",current.getAlertId(),current.getLatestTimestamp(),current.getAlertHistory().getAlertId(),current.getAlertHistory().getAlertState());
      }
      AlertHistoryEntity oldHistory=current.getAlertHistory();
      AlertState oldState=oldHistory.getAlertState();
      AlertHistoryEntity history=createHistory(clusterId,oldHistory.getAlertDefinition(),alert);
      current.setLatestTimestamp(alert.getTimestamp());
      current.setOriginalTimestamp(alert.getTimestamp());
      current.setLatestText(alert.getText());
      current.setAlertHistory(history);
switch (alertState) {
case OK:
        current.setOccurrences(1);
      break;
case CRITICAL:
case SKIPPED:
case UNKNOWN:
case WARNING:
    if (oldState == AlertState.OK) {
      current.setOccurrences(1);
    }
 else {
      current.setOccurrences(current.getOccurrences() + 1);
    }
  break;
default :
break;
}
AlertFirmness firmness=calculateFirmnessForStateChange(clusterName,definition,alertState,current.getOccurrences());
current.setFirmness(firmness);
toCreateHistoryAndMerge.add(current);
alertEvents.add(new AlertStateChangeEvent(clusterId,alert,current,oldState));
}
}
saveEntities(toCreate,toMerge,toCreateHistoryAndMerge);
for (AlertEvent eventToFire : alertEvents) {
m_alertEventPublisher.publish(eventToFire);
}
}
