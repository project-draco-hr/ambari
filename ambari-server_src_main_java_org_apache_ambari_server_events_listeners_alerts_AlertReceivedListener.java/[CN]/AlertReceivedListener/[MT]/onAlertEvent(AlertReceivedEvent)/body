{
  if (LOG.isDebugEnabled()) {
    LOG.debug(event.toString());
  }
  List<Alert> alerts=event.getAlerts();
  Map<Alert,AlertCurrentEntity> toCreate=new HashMap<Alert,AlertCurrentEntity>();
  Map<Alert,AlertCurrentEntity> toMerge=new HashMap<Alert,AlertCurrentEntity>();
  Map<Alert,AlertCurrentEntity> toCreateHistoryAndMerge=new HashMap<Alert,AlertCurrentEntity>();
  Map<Alert,AlertState> oldStates=new HashMap<Alert,AlertState>();
  for (  Alert alert : alerts) {
    if (!isValid(alert)) {
      continue;
    }
    Long clusterId=getClusterIdByName(alert.getCluster());
    if (clusterId == null) {
      clusterId=event.getClusterId();
    }
    AlertDefinitionEntity definition=m_definitionDao.findByName(clusterId,alert.getName());
    if (null == definition) {
      LOG.warn("Received an alert for {} which is a definition that does not exist anymore",alert.getName());
      continue;
    }
    if (!definition.getEnabled()) {
      LOG.debug("Received an alert for {} which is disabled. No more alerts should be received for this definition.",alert.getName());
      continue;
    }
    AlertCurrentEntity current;
    AlertState alertState=alert.getState();
    if (StringUtils.isBlank(alert.getHostName()) || definition.isHostIgnored()) {
      current=m_alertsDao.findCurrentByNameNoHost(clusterId,alert.getName());
    }
 else {
      current=m_alertsDao.findCurrentByHostAndName(clusterId,alert.getHostName(),alert.getName());
    }
    if (null == current) {
      if (alertState == AlertState.SKIPPED) {
        continue;
      }
      AlertHistoryEntity history=createHistory(clusterId,definition,alert);
      MaintenanceState maintenanceState=MaintenanceState.OFF;
      try {
        maintenanceState=m_maintenanceStateHelper.get().getEffectiveState(clusterId,alert);
      }
 catch (      Exception exception) {
        LOG.error("Unable to determine the maintenance mode state for {}, defaulting to OFF",alert,exception);
      }
      current=new AlertCurrentEntity();
      current.setMaintenanceState(maintenanceState);
      current.setAlertHistory(history);
      current.setLatestTimestamp(alert.getTimestamp());
      current.setOriginalTimestamp(alert.getTimestamp());
      toCreate.put(alert,current);
    }
 else     if (alertState == current.getAlertHistory().getAlertState() || alertState == AlertState.SKIPPED) {
      current.setLatestTimestamp(alert.getTimestamp());
      if (alertState != AlertState.SKIPPED) {
        current.setLatestText(alert.getText());
        current.setOccurrences(current.getOccurrences() + 1);
      }
      toMerge.put(alert,current);
    }
 else {
      if (LOG.isDebugEnabled()) {
        LOG.debug("Alert State Changed: CurrentId {}, CurrentTimestamp {}, HistoryId {}, HistoryState {}",current.getAlertId(),current.getLatestTimestamp(),current.getAlertHistory().getAlertId(),current.getAlertHistory().getAlertState());
      }
      AlertHistoryEntity oldHistory=current.getAlertHistory();
      AlertState oldState=oldHistory.getAlertState();
      AlertHistoryEntity history=createHistory(clusterId,oldHistory.getAlertDefinition(),alert);
      current.setLatestTimestamp(alert.getTimestamp());
      current.setOriginalTimestamp(alert.getTimestamp());
      current.setLatestText(alert.getText());
      current.setAlertHistory(history);
switch (alertState) {
case OK:
        current.setOccurrences(1);
      break;
case CRITICAL:
case SKIPPED:
case UNKNOWN:
case WARNING:
    if (oldState == AlertState.OK) {
      current.setOccurrences(1);
    }
 else {
      current.setOccurrences(current.getOccurrences() + 1);
    }
  break;
default :
break;
}
toCreateHistoryAndMerge.put(alert,current);
oldStates.put(alert,oldState);
}
}
saveEntities(toCreate,toMerge,toCreateHistoryAndMerge);
for (Map.Entry<Alert,AlertCurrentEntity> entry : toCreate.entrySet()) {
Alert alert=entry.getKey();
AlertCurrentEntity entity=entry.getValue();
Long clusterId=getClusterIdByName(alert.getCluster());
if (clusterId == null) {
LOG.error("Unable to process alert {} for an invalid cluster named {}",alert.getName(),alert.getCluster());
continue;
}
InitialAlertEvent initialAlertEvent=new InitialAlertEvent(clusterId,alert,entity);
m_alertEventPublisher.publish(initialAlertEvent);
}
for (Map.Entry<Alert,AlertCurrentEntity> entry : toCreateHistoryAndMerge.entrySet()) {
Alert alert=entry.getKey();
AlertCurrentEntity entity=entry.getValue();
Long clusterId=getClusterIdByName(alert.getCluster());
if (clusterId == null) {
LOG.error("Unable to process alert {} for an invalid cluster named {}",alert.getName(),alert.getCluster());
continue;
}
AlertStateChangeEvent alertChangedEvent=new AlertStateChangeEvent(clusterId,alert,entity,oldStates.get(alert));
m_alertEventPublisher.publish(alertChangedEvent);
}
}
