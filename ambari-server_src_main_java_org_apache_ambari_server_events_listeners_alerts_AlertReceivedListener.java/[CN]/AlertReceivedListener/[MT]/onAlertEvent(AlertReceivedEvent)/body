{
  if (LOG.isDebugEnabled()) {
    LOG.debug(event.toString());
  }
  List<Alert> alerts=event.getAlerts();
  Map<Alert,AlertCurrentEntity> toCreate=new HashMap<Alert,AlertCurrentEntity>();
  Map<Alert,AlertCurrentEntity> toMerge=new HashMap<Alert,AlertCurrentEntity>();
  Map<Alert,AlertCurrentEntity> toCreateHistoryAndMerge=new HashMap<Alert,AlertCurrentEntity>();
  Map<Alert,AlertState> oldStates=new HashMap<Alert,AlertState>();
  for (  Alert alert : alerts) {
    if (!isValid(alert)) {
      continue;
    }
    Long clusterId=getClusterIdByName(alert.getCluster());
    if (clusterId == null) {
      LOG.warn("Null cluster id is not supported for alerts as of now");
      continue;
    }
    AlertDefinitionEntity definition=m_definitionDao.findByName(clusterId,alert.getName());
    if (null == definition) {
      LOG.warn("Received an alert for {} which is a definition that does not exist anymore",alert.getName());
      continue;
    }
    if (!definition.getEnabled()) {
      LOG.debug("Received an alert for {} which is disabled. No more alerts should be received for this definition.",alert.getName());
      continue;
    }
    AlertCurrentEntity current;
    if (StringUtils.isBlank(alert.getHostName()) || definition.isHostIgnored()) {
      current=m_alertsDao.findCurrentByNameNoHost(clusterId,alert.getName());
    }
 else {
      current=m_alertsDao.findCurrentByHostAndName(clusterId,alert.getHostName(),alert.getName());
    }
    if (null == current) {
      AlertHistoryEntity history=createHistory(clusterId,definition,alert);
      current=new AlertCurrentEntity();
      current.setMaintenanceState(MaintenanceState.OFF);
      current.setAlertHistory(history);
      current.setLatestTimestamp(alert.getTimestamp());
      current.setOriginalTimestamp(alert.getTimestamp());
      toCreate.put(alert,current);
    }
 else     if (alert.getState() == current.getAlertHistory().getAlertState()) {
      current.setLatestTimestamp(alert.getTimestamp());
      current.setLatestText(alert.getText());
      toMerge.put(alert,current);
    }
 else {
      if (LOG.isDebugEnabled()) {
        LOG.debug("Alert State Changed: CurrentId {}, CurrentTimestamp {}, HistoryId {}, HistoryState {}",current.getAlertId(),current.getLatestTimestamp(),current.getAlertHistory().getAlertId(),current.getAlertHistory().getAlertState());
      }
      AlertHistoryEntity oldHistory=current.getAlertHistory();
      AlertState oldState=oldHistory.getAlertState();
      AlertHistoryEntity history=createHistory(clusterId,oldHistory.getAlertDefinition(),alert);
      current.setLatestTimestamp(alert.getTimestamp());
      current.setOriginalTimestamp(alert.getTimestamp());
      current.setLatestText(alert.getText());
      current.setAlertHistory(history);
      toCreateHistoryAndMerge.put(alert,current);
      oldStates.put(alert,oldState);
    }
  }
  saveEntities(toCreate,toMerge,toCreateHistoryAndMerge);
  for (  Map.Entry<Alert,AlertCurrentEntity> entry : toCreate.entrySet()) {
    Alert alert=entry.getKey();
    AlertCurrentEntity entity=entry.getValue();
    Long clusterId=getClusterIdByName(alert.getCluster());
    if (clusterId == null) {
      LOG.error("Unable to process alert {} for an invalid cluster named {}",alert.getName(),alert.getCluster());
      continue;
    }
    InitialAlertEvent initialAlertEvent=new InitialAlertEvent(clusterId,alert,entity);
    m_alertEventPublisher.publish(initialAlertEvent);
  }
  for (  Map.Entry<Alert,AlertCurrentEntity> entry : toCreateHistoryAndMerge.entrySet()) {
    Alert alert=entry.getKey();
    AlertCurrentEntity entity=entry.getValue();
    Long clusterId=getClusterIdByName(alert.getCluster());
    if (clusterId == null) {
      LOG.error("Unable to process alert {} for an invalid cluster named {}",alert.getName(),alert.getCluster());
      continue;
    }
    AlertStateChangeEvent alertChangedEvent=new AlertStateChangeEvent(clusterId,alert,entity,oldStates.get(alert));
    m_alertEventPublisher.publish(alertChangedEvent);
  }
}
