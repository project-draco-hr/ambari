{
  m_configMap.put("policymgr_external_url",RANGER_URL);
  m_configMap.put("admin_username","admin");
  m_configMap.put("admin_password","pass");
  m_configMap.put("ranger_admin_username","r_admin");
  m_configMap.put("ranger_admin_password","r_pass");
  Cluster cluster=EasyMock.createMock(Cluster.class);
  Config config=EasyMock.createMock(Config.class);
  final Map<String,Service> services=new HashMap<>();
  final Service service=EasyMock.createMock(Service.class);
  services.put("RANGER",service);
  Map<String,DesiredConfig> desiredMap=new HashMap<>();
  DesiredConfig dc=EasyMock.createMock(DesiredConfig.class);
  desiredMap.put("admin-properties",dc);
  desiredMap.put("ranger-env",dc);
  expect(dc.getTag()).andReturn("").anyTimes();
  expect(config.getProperties()).andReturn(m_configMap).anyTimes();
  expect(cluster.getServices()).andReturn(services).anyTimes();
  expect(cluster.getService("RANGER")).andReturn(service).anyTimes();
  expect(cluster.getDesiredConfigs()).andReturn(desiredMap).anyTimes();
  expect(cluster.getDesiredConfigByType((String)anyObject())).andReturn(config).anyTimes();
  expect(cluster.getConfig((String)anyObject(),(String)anyObject())).andReturn(config).anyTimes();
  expect(m_clusters.getCluster((String)anyObject())).andReturn(cluster).anyTimes();
  replay(m_clusters,cluster,dc,config);
  m_rpc=new RangerPasswordCheck();
  m_rpc.clustersProvider=new Provider<Clusters>(){
    @Override public Clusters get(){
      return m_clusters;
    }
  }
;
  EasyMock.reset(m_streamProvider);
  PowerMockito.whenNew(URLStreamProvider.class).withAnyArguments().thenReturn(m_streamProvider);
}
