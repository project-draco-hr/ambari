{
  HttpURLConnection conn=EasyMock.createMock(HttpURLConnection.class);
  URLStreamProvider streamProvider=EasyMock.createMock(URLStreamProvider.class);
  expect(conn.getResponseCode()).andReturn(200);
  expect(conn.getInputStream()).andReturn(new ByteArrayInputStream(GOOD_LOGIN_RESPONSE.getBytes())).once();
  expect(conn.getResponseCode()).andReturn(200);
  expect(conn.getInputStream()).andReturn(new ByteArrayInputStream(GOOD_USER_RESPONSE.getBytes())).once();
  expect(conn.getResponseCode()).andThrow(new IOException("again!"));
  expect(streamProvider.processURL((String)anyObject(),(String)anyObject(),(InputStream)anyObject(),(Map<String,List<String>>)anyObject())).andReturn(conn).anyTimes();
  replay(conn,streamProvider);
  m_rpc.m_streamProvider=streamProvider;
  PrerequisiteCheck check=new PrerequisiteCheck(null,null);
  m_rpc.perform(check,new PrereqCheckRequest("cluster"));
  assertEquals(PrereqCheckStatus.WARNING,check.getStatus());
  assertEquals("Could not access Ranger to verify user 'r_admin' against " + RANGER_URL + "service/public/api/repository/count. again!",check.getFailReason());
  verify(conn,streamProvider);
}
