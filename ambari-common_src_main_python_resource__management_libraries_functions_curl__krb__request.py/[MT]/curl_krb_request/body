def curl_krb_request(tmp_dir, keytab, principal, url, cache_file_prefix, krb_exec_search_paths, return_only_http_code, alert_name, user, connection_timeout=CONNECTION_TIMEOUT_DEFAULT):
    import uuid
    ccache_file_name = _md5('{0}|{1}'.format(principal, keytab)).hexdigest()
    ccache_file_path = '{0}{1}{2}_{3}_cc_{4}'.format(tmp_dir, os.sep, cache_file_prefix, user, ccache_file_name)
    kerberos_env = {'KRB5CCNAME': ccache_file_path, }
    if krb_exec_search_paths:
        klist_path_local = get_klist_path(krb_exec_search_paths)
    else:
        klist_path_local = get_klist_path()
    if (shell.call('{0} -s {1}'.format(klist_path_local, ccache_file_path), user=user)[0] != 0):
        if krb_exec_search_paths:
            kinit_path_local = get_kinit_path(krb_exec_search_paths)
        else:
            kinit_path_local = get_kinit_path()
        logger.debug('[Alert][{0}] Enabling Kerberos authentication via GSSAPI using ccache at {1}.'.format(alert_name, ccache_file_path))
        shell.checked_call('{0} -l 5m -c {1} -kt {2} {3} > /dev/null'.format(kinit_path_local, ccache_file_path, keytab, principal), user=user)
    else:
        logger.debug('[Alert][{0}] Kerberos authentication via GSSAPI already enabled using ccache at {1}.'.format(alert_name, ccache_file_path))
    cookies_dir = os.path.join(tmp_dir, 'cookies')
    if (not os.path.exists(cookies_dir)):
        os.makedirs(cookies_dir)
    cookie_file_name = str(uuid.uuid4())
    cookie_file = os.path.join(cookies_dir, cookie_file_name)
    start_time = time.time()
    error_msg = None
    connection_timeout = int(connection_timeout)
    maximum_timeout = (connection_timeout + 2)
    try:
        try:
            if return_only_http_code:
                (_, curl_stdout, curl_stderr) = get_user_call_output(['curl', '-L', '-k', '--negotiate', '-u', ':', '-b', cookie_file, '-c', cookie_file, '-w', '%{http_code}', url, '--connect-timeout', str(connection_timeout), '--max-time', str(maximum_timeout), '-o', '/dev/null'], user=user, env=kerberos_env)
            else:
                (_, curl_stdout, curl_stderr) = get_user_call_output(['curl', '-L', '-k', '--negotiate', '-u', ':', '-b', cookie_file, '-c', cookie_file, url, '--connect-timeout', str(connection_timeout), '--max-time', str(maximum_timeout)], user=user, env=kerberos_env)
        except Fail:
            if logger.isEnabledFor(logging.DEBUG):
                logger.exception('[Alert][{0}] Unable to make a web request.'.format(alert_name))
            raise
    finally:
        if os.path.isfile(cookie_file):
            os.remove(cookie_file)
    if curl_stderr:
        error_msg = curl_stderr
    time_millis = (time.time() - start_time)
    if curl_stdout:
        if return_only_http_code:
            return (int(curl_stdout), error_msg, time_millis)
        else:
            return (curl_stdout, error_msg, time_millis)
    logger.debug('[Alert][{0}] Curl response is empty! Please take a look at error message: '.format(alert_name, str(error_msg)))
    return ('', error_msg, time_millis)
