{
  String c1="c1";
  final String h1="h1";
  final String h2="h2";
  clusters.addCluster(c1);
  Cluster cluster=clusters.getCluster(c1);
  cluster.setDesiredStackVersion(new StackId("HDP-0.1"));
  Config config=injector.getInstance(ConfigFactory.class).createNew(cluster,"t1",new HashMap<String,String>(){
{
      put("prop1","val1");
    }
  }
);
  config.setVersionTag("1");
  config.persist();
  clusters.addHost(h1);
  clusters.addHost(h2);
  Host host1=clusters.getHost(h1);
  host1.setOsType("centos5");
  Host host2=clusters.getHost(h2);
  host2.setOsType("centos5");
  host1.persist();
  host2.persist();
  clusters.mapHostsToCluster(new HashSet<String>(){
{
      addAll(Arrays.asList(h1,h2));
    }
  }
,c1);
  Service hdfs=cluster.addService("HDFS");
  hdfs.persist();
  assertNotNull(injector.getInstance(ClusterServiceDAO.class).findByClusterAndServiceNames(c1,"HDFS"));
  ServiceComponent nameNode=hdfs.addServiceComponent("NAMENODE");
  nameNode.persist();
  ServiceComponent dataNode=hdfs.addServiceComponent("DATANODE");
  dataNode.persist();
  ServiceComponentHost nameNodeHost=nameNode.addServiceComponentHost(h1);
  nameNodeHost.persist();
  ServiceComponentHost dataNodeHost=dataNode.addServiceComponentHost(h2);
  dataNodeHost.persist();
  HostComponentStateEntityPK hkspk=new HostComponentStateEntityPK();
  HostComponentDesiredStateEntityPK hkdspk=new HostComponentDesiredStateEntityPK();
  hkspk.setClusterId(nameNodeHost.getClusterId());
  hkspk.setHostName(nameNodeHost.getHostName());
  hkspk.setServiceName(nameNodeHost.getServiceName());
  hkspk.setComponentName(nameNodeHost.getServiceComponentName());
  hkdspk.setClusterId(nameNodeHost.getClusterId());
  hkdspk.setHostName(nameNodeHost.getHostName());
  hkdspk.setServiceName(nameNodeHost.getServiceName());
  hkdspk.setComponentName(nameNodeHost.getServiceComponentName());
  assertNotNull(injector.getInstance(HostComponentStateDAO.class).findByPK(hkspk));
  assertNotNull(injector.getInstance(HostComponentDesiredStateDAO.class).findByPK(hkdspk));
  assertEquals(1,injector.getProvider(EntityManager.class).get().createQuery("SELECT config FROM ClusterConfigEntity config").getResultList().size());
  clusters.deleteCluster(c1);
  assertEquals(2,injector.getInstance(HostDAO.class).findAll().size());
  assertNull(injector.getInstance(HostComponentStateDAO.class).findByPK(hkspk));
  assertNull(injector.getInstance(HostComponentDesiredStateDAO.class).findByPK(hkdspk));
  assertEquals(0,injector.getProvider(EntityManager.class).get().createQuery("SELECT config FROM ClusterConfigEntity config").getResultList().size());
}
