{
  String c1="c1";
  String c2="c2";
  String h1="h1";
  String h2="h2";
  String h3="h3";
  String h4="h4";
  try {
    clusters.mapHostToCluster(h1,c1);
    fail("Expected exception for invalid cluster/host");
  }
 catch (  Exception e) {
  }
  StackId stackId=new StackId("HDP-0.1");
  clusters.addCluster(c1,stackId);
  clusters.addCluster(c2,stackId);
  Cluster cluster1=clusters.getCluster(c1);
  Cluster cluster2=clusters.getCluster(c2);
  Assert.assertNotNull(clusters.getCluster(c1));
  Assert.assertNotNull(clusters.getCluster(c2));
  cluster1.setDesiredStackVersion(stackId);
  helper.getOrCreateRepositoryVersion(stackId,stackId.getStackVersion());
  cluster1.createClusterVersion(stackId,stackId.getStackVersion(),"admin",RepositoryVersionState.INSTALLING);
  cluster1.transitionClusterVersion(stackId,stackId.getStackVersion(),RepositoryVersionState.CURRENT);
  cluster2.setDesiredStackVersion(stackId);
  cluster2.createClusterVersion(stackId,stackId.getStackVersion(),"admin",RepositoryVersionState.INSTALLING);
  cluster2.transitionClusterVersion(stackId,stackId.getStackVersion(),RepositoryVersionState.CURRENT);
  try {
    clusters.mapHostToCluster(h1,c1);
    fail("Expected exception for invalid host");
  }
 catch (  Exception e) {
  }
  clusters.addHost(h1);
  clusters.addHost(h2);
  clusters.addHost(h3);
  Assert.assertNotNull(clusters.getHost(h1));
  setOsFamily(clusters.getHost(h1),"redhat","6.4");
  setOsFamily(clusters.getHost(h2),"redhat","5.9");
  setOsFamily(clusters.getHost(h3),"redhat","6.4");
  try {
    clusters.getClustersForHost(h4);
    fail("Expected exception for invalid host");
  }
 catch (  HostNotFoundException e) {
  }
  Set<Cluster> c=clusters.getClustersForHost(h3);
  Assert.assertEquals(0,c.size());
  clusters.mapHostToCluster(h1,c1);
  clusters.mapHostToCluster(h2,c1);
  try {
    clusters.mapHostToCluster(h1,c1);
    fail("Expected exception for duplicate");
  }
 catch (  DuplicateResourceException e) {
  }
  Cluster c3=(Cluster)clusters.getClustersForHost(h1).toArray()[0];
  Cluster c4=(Cluster)clusters.getClustersForHost(h2).toArray()[0];
  Assert.assertEquals(c3,c4);
  Set<String> hostnames=new HashSet<String>();
  hostnames.add(h1);
  hostnames.add(h2);
  clusters.mapHostsToCluster(hostnames,c2);
  c=clusters.getClustersForHost(h1);
  Assert.assertEquals(2,c.size());
  c=clusters.getClustersForHost(h2);
  Assert.assertEquals(2,c.size());
  Map<String,Host> hostsForC1=clusters.getHostsForCluster(c1);
  Assert.assertEquals(2,hostsForC1.size());
  Assert.assertTrue(hostsForC1.containsKey(h1));
  Assert.assertTrue(hostsForC1.containsKey(h2));
  Assert.assertNotNull(hostsForC1.get(h1));
  Assert.assertNotNull(hostsForC1.get(h2));
}
