{
  final String groupName="MyHostGroup";
  Blueprint bp=createNiceMock(Blueprint.class);
  expect(bp.getName()).andReturn("TestBluePrint").anyTimes();
  Configuration clusterConfig=new Configuration(Maps.<String,Map<String,String>>newHashMap(),Maps.<String,Map<String,Map<String,String>>>newHashMap());
  Map<String,HostGroupInfo> hostGroups=new HashMap<>();
  HostGroupInfo hostGroupInfo=new HostGroupInfo(groupName);
  hostGroupInfo.setConfiguration(clusterConfig);
  hostGroupInfo.addHost(hostName);
  hostGroupInfo.addHost(hostName + "2");
  hostGroupInfo.addHost(hostName + "3");
  hostGroups.put(groupName,hostGroupInfo);
  TopologyRequest topologyRequest=createNiceMock(TopologyRequest.class);
  expect(topologyRequest.getType()).andReturn(TopologyRequest.Type.PROVISION).anyTimes();
  expect(topologyRequest.getBlueprint()).andReturn(bp).anyTimes();
  expect(topologyRequest.getClusterId()).andReturn(cluster.getClusterId()).anyTimes();
  expect(topologyRequest.getConfiguration()).andReturn(clusterConfig).anyTimes();
  expect(topologyRequest.getDescription()).andReturn("Test description").anyTimes();
  expect(topologyRequest.getHostGroupInfo()).andReturn(hostGroups).anyTimes();
  replay(bp,topologyRequest);
  persistedState.persistTopologyRequest(topologyRequest);
  createTopologyLogicalRequest(cluster,hostName);
}
