{
  AmbariManagementController amc=createMock(AmbariManagementController.class);
  Clusters clusters=createMock(Clusters.class);
  Cluster cluster=createMock(Cluster.class);
  expect(amc.getClusters()).andReturn(clusters).atLeastOnce();
  expect(clusters.getCluster((String)anyObject())).andReturn(cluster).atLeastOnce();
  expect(cluster.getClusterId()).andReturn(Long.valueOf(1)).atLeastOnce();
  Capture<WidgetLayoutEntity> entityCapture=new Capture<WidgetLayoutEntity>();
  dao.create(capture(entityCapture));
  expectLastCall();
  WidgetEntity widgetEntity=new WidgetEntity();
  widgetEntity.setId(1L);
  widgetEntity.setListWidgetLayoutUserWidgetEntity(new ArrayList<WidgetLayoutUserWidgetEntity>());
  WidgetEntity widgetEntity2=new WidgetEntity();
  widgetEntity2.setId(2L);
  widgetEntity2.setListWidgetLayoutUserWidgetEntity(new ArrayList<WidgetLayoutUserWidgetEntity>());
  expect(widgetDAO.findById(1L)).andReturn(widgetEntity).atLeastOnce();
  replay(amc,clusters,cluster,dao,widgetDAO);
  Map<String,Object> requestProps=new HashMap<String,Object>();
  requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_CLUSTER_NAME_PROPERTY_ID,"c1");
  requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_LAYOUT_NAME_PROPERTY_ID,"layout_name");
  requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_DISPLAY_NAME_PROPERTY_ID,"display_name");
  requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_SECTION_NAME_PROPERTY_ID,"section_name");
  requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_USERNAME_PROPERTY_ID,"admin");
  requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_SCOPE_PROPERTY_ID,"CLUSTER");
  Set widgetsInfo=new LinkedHashSet();
  Map<String,String> widget=new HashMap<String,String>();
  widget.put("id","1");
  widgetsInfo.add(widget);
  requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_WIDGETS_PROPERTY_ID,widgetsInfo);
  Request request=PropertyHelper.getCreateRequest(Collections.singleton(requestProps),null);
  WidgetLayoutResourceProvider provider=createProvider(amc);
  provider.createResources(request);
  Assert.assertTrue(entityCapture.hasCaptured());
  WidgetLayoutEntity entity=entityCapture.getValue();
  Assert.assertNotNull(entity);
  Predicate predicate=new PredicateBuilder().property(WidgetLayoutResourceProvider.WIDGETLAYOUT_CLUSTER_NAME_PROPERTY_ID).equals("c1").and().property(WidgetLayoutResourceProvider.WIDGETLAYOUT_ID_PROPERTY_ID).equals("1").and().property(WidgetLayoutResourceProvider.WIDGETLAYOUT_USERNAME_PROPERTY_ID).equals("username").toPredicate();
  entity.setId(Long.valueOf(1));
  String oldLayoutName=entity.getLayoutName();
  String oldScope=entity.getScope();
  resetToStrict(dao,widgetDAO);
  expect(dao.findById(1L)).andReturn(entity).anyTimes();
  expect(dao.merge((WidgetLayoutEntity)anyObject())).andReturn(entity).anyTimes();
  expect(widgetDAO.merge(widgetEntity)).andReturn(widgetEntity).anyTimes();
  expect(widgetDAO.findById(2L)).andReturn(widgetEntity2).anyTimes();
  replay(dao,widgetDAO);
  requestProps=new HashMap<String,Object>();
  requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_LAYOUT_NAME_PROPERTY_ID,"layout_name_new");
  requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_SCOPE_PROPERTY_ID,"USER");
  requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_ID_PROPERTY_ID,"1");
  widget.put("id","2");
  widgetsInfo.add(widget);
  requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_WIDGETS_PROPERTY_ID,widgetsInfo);
  request=PropertyHelper.getUpdateRequest(requestProps,null);
  provider.updateResources(request,predicate);
  Assert.assertFalse(oldLayoutName.equals(entity.getLayoutName()));
  Assert.assertFalse(oldScope.equals(entity.getScope()));
  verify(amc,clusters,cluster,dao,widgetDAO);
}
