def service(name, action='start'):
    import params
    import status_params
    pid_file = status_params.pid_files[name]
    no_op_test = as_user(format('ls {pid_file} >/dev/null 2>&1 && ps -p `cat {pid_file}` >/dev/null 2>&1'), user=params.storm_user)
    if (name == 'ui'):
        process_grep = 'storm.ui.core$'
    elif (name == 'rest_api'):
        process_grep = format('{rest_lib_dir}/storm-rest-.*\\.jar$')
    else:
        process_grep = format('storm.daemon.{name}$')
    find_proc = format('{jps_binary} -l  | grep {process_grep}')
    write_pid = format("{find_proc} | awk {{'print $1'}} > {pid_file}")
    crt_pid_cmd = format('{find_proc} && {write_pid}')
    storm_env = format('source {conf_dir}/storm-env.sh ; export PATH=$JAVA_HOME/bin:$PATH')
    if (action == 'start'):
        if (name == 'rest_api'):
            process_cmd = format('{storm_env} ; java -jar {rest_lib_dir}/`ls {rest_lib_dir} | grep -wE storm-rest-[0-9.-]+\\.jar` server')
            cmd = format('{process_cmd} {rest_api_conf_file} > {log_dir}/restapi.log 2>&1')
        else:
            cmd = format('{storm_env} ; storm {name} > {log_dir}/{name}.out 2>&1')
        cmd = format('{cmd} &\n echo $! > {pid_file}')
        Execute(cmd, not_if=no_op_test, user=params.storm_user, path=params.storm_bin_dir)
        File(pid_file, owner=params.storm_user, group=params.user_group)
    elif (action == 'stop'):
        process_dont_exist = format('! ({no_op_test})')
        if os.path.exists(pid_file):
            pid = get_user_call_output.get_user_call_output(format('! test -f {pid_file} ||  cat {pid_file}'), user=params.storm_user)[1]
            pid = pid.replace('\n', ' ')
            Execute(format('{sudo} kill {pid}'), not_if=process_dont_exist)
            Execute(format('{sudo} kill -9 {pid}'), not_if=format('sleep 2; {process_dont_exist} || sleep 20; {process_dont_exist}'), ignore_failures=True)
            File(pid_file, action='delete')
