{
  String from=getFrom((String)searchCriteria.getParamValue("startTime"));
  String to=getTo((String)searchCriteria.getParamValue("endTime"));
  String unit=getUnit((String)searchCriteria.getParamValue("unit"));
  SolrQuery solrQuery=queryGenerator.commonAuditFilterQuery(searchCriteria);
  BarGraphDataListResponse dataList=new BarGraphDataListResponse();
  List<BarGraphData> histogramData=new ArrayList<BarGraphData>();
  SolrUtil.setFacetSort(solrQuery,LogSearchConstants.FACET_INDEX);
  String jsonHistogramQuery=queryGenerator.buildJSONFacetTermTimeRangeQuery(LogSearchConstants.AUDIT_REQUEST_USER,LogSearchConstants.AUDIT_EVTTIME,from,to,unit).replace("\\","");
  try {
    SolrUtil.setJSONFacet(solrQuery,jsonHistogramQuery);
    SolrUtil.setRowCount(solrQuery,0);
    QueryResponse response=auditSolrDao.process(solrQuery);
    if (response == null) {
      return dataList;
    }
    SimpleOrderedMap<Object> jsonFacetResponse=(SimpleOrderedMap<Object>)response.getResponse().get("facets");
    if (jsonFacetResponse == null || jsonFacetResponse.toString().equals("{count=0}")) {
      return dataList;
    }
    extractValuesFromBucket(jsonFacetResponse,"x","y",histogramData);
    dataList.setGraphData(histogramData);
    return dataList;
  }
 catch (  SolrException|IOException|SolrServerException e) {
    logger.error("Error during solrQuery=" + solrQuery,e);
    throw RESTErrorUtil.createRESTException(MessageEnums.SOLR_ERROR.getMessage().getMessage(),MessageEnums.ERROR_SYSTEM);
  }
}
