{
  String jsonUserQuery="{ Users: { type: terms, field: reqUser, facet:  {Repo: {  type: terms, field: repo, facet: {  eventCount: \"sum(event_count)\"}}}},x:{ type: terms,field: resource, facet: {y: {  type: terms, field: repo,facet: {  eventCount: \"sum(event_count)\"}}}}}";
  SolrQuery solrQuery=queryGenerator.commonAuditFilterQuery(searchCriteria);
  String startTime=(String)searchCriteria.getParamValue("startTime");
  String endTime=(String)searchCriteria.getParamValue("endTime");
  startTime=startTime == null ? "" : startTime;
  endTime=endTime == null ? "" : "_" + endTime;
  SolrUtil.setJSONFacet(solrQuery,jsonUserQuery);
  SolrUtil.setRowCount(solrQuery,0);
  String dataFormat=(String)searchCriteria.getParamValue("format");
  FileOutputStream fis=null;
  try {
    QueryResponse queryResponse=auditSolrDao.process(solrQuery);
    if (queryResponse == null) {
      VResponse response=new VResponse();
      response.setMsgDesc("Query was not able to execute " + solrQuery);
      throw RESTErrorUtil.createRESTException(response);
    }
    NamedList<Object> namedList=queryResponse.getResponse();
    if (namedList == null) {
      VResponse response=new VResponse();
      response.setMsgDesc("Query was not able to execute " + solrQuery);
      throw RESTErrorUtil.createRESTException(response);
    }
    BarGraphDataListResponse vBarUserDataList=new BarGraphDataListResponse();
    BarGraphDataListResponse vBarResourceDataList=new BarGraphDataListResponse();
    SimpleOrderedMap<Object> jsonFacetResponse=(SimpleOrderedMap<Object>)namedList.get("facets");
    vBarUserDataList=BizUtil.buildSummaryForTopCounts(jsonFacetResponse,"Repo","Users");
    vBarResourceDataList=BizUtil.buildSummaryForTopCounts(jsonFacetResponse,"y","x");
    String data="";
    String summary="";
    if ("text".equals(dataFormat)) {
      int users=0;
      int resources=0;
      summary+="\n\n\n\n";
      data+=addBlank("Users") + "Components/Access" + "\n";
      data+="--------------------------------------------------------------------------\n";
      Collection<BarGraphData> tableUserData=vBarUserDataList.getGraphData();
      for (      BarGraphData graphData : tableUserData) {
        String userName=graphData.getName();
        String largeUserName="";
        if (userName.length() > 45) {
          largeUserName=userName.substring(0,45);
          data+=addBlank(largeUserName);
        }
 else         data+=addBlank(userName);
        Collection<NameValueData> vnameValueList=graphData.getDataCount();
        int count=0;
        String blank="";
        for (        NameValueData vNameValue : vnameValueList) {
          data+=blank + vNameValue.getName() + " "+ vNameValue.getValue()+ "\n";
          if (count == 0)           blank=addBlank(blank);
          count++;
        }
        while (largeUserName.length() > 0) {
          data+=largeUserName.substring(0,45) + "\n";
        }
        users+=1;
      }
      data+="\n\n\n\n\n\n";
      data+=addBlank("Resources") + "Components/Access" + "\n";
      data+="--------------------------------------------------------------------------\n";
      Collection<BarGraphData> tableResourceData=vBarResourceDataList.getGraphData();
      for (      BarGraphData graphData : tableResourceData) {
        String resourceName=graphData.getName();
        String largeResourceName=resourceName;
        if (largeResourceName.length() > 45) {
          resourceName=largeResourceName.substring(0,45);
          largeResourceName=largeResourceName.substring(45,largeResourceName.length());
        }
 else {
          largeResourceName="";
        }
        data+=addBlank(resourceName);
        Collection<NameValueData> vnameValueList=graphData.getDataCount();
        int count=0;
        String blank="";
        for (        NameValueData vNameValue : vnameValueList) {
          data+=blank + vNameValue.getName() + " "+ vNameValue.getValue()+ "\n";
          if (count == 0)           blank=addBlank(blank);
          count++;
        }
        String tempLargeResourceName=largeResourceName;
        while (largeResourceName.length() > 45) {
          largeResourceName=tempLargeResourceName.substring(0,45);
          tempLargeResourceName=tempLargeResourceName.substring(45,tempLargeResourceName.length());
          data+=largeResourceName + "\n";
        }
        if (largeResourceName.length() < 45 && !largeResourceName.isEmpty()) {
          data+=largeResourceName + "\n";
        }
        resources+=1;
      }
      String header="--------------------------------SUMMARY-----------------------------------\n";
      summary=header + "Users  = " + users+ "\nResources  = "+ resources+ "\n"+ summary;
      data=summary + data;
    }
 else {
      data="{" + convertObjToString(vBarUserDataList) + ","+ convertObjToString(vBarResourceDataList)+ "}";
      dataFormat="json";
    }
    String fileName="Users_Resource" + startTime + endTime+ ".";
    File file=File.createTempFile(fileName,dataFormat);
    fis=new FileOutputStream(file);
    fis.write(data.getBytes());
    return Response.ok(file,MediaType.APPLICATION_OCTET_STREAM).header("Content-Disposition","attachment;filename=" + fileName + dataFormat).build();
  }
 catch (  SolrServerException|SolrException|IOException e) {
    logger.error("Error during solrQuery=" + e);
    throw RESTErrorUtil.createRESTException(MessageEnums.SOLR_ERROR.getMessage().getMessage(),MessageEnums.ERROR_SYSTEM);
  }
 finally {
    if (fis != null) {
      try {
        fis.close();
      }
 catch (      IOException e) {
      }
    }
  }
}
