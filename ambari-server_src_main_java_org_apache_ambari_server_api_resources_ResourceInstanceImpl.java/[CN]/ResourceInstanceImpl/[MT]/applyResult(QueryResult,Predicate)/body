{
  Result result=createResult();
  Map<String,ResourceInstanceImpl> mapSubResources=queryResult.getResourceInstance().m_mapQuerySubResources;
  ResourceInstance resourceInstance=queryResult.getResourceInstance();
  Resource.Type resourceType=resourceInstance.getResourceDefinition().getType();
  if (resourceInstance.getIds().get(resourceType) == null) {
    addCollectionProperties(resourceType);
    result.getResultTree().setProperty("isCollection","true");
  }
  TreeNode<Resource> tree=result.getResultTree();
  int count=1;
  for (  Resource resource : queryResult.getResources()) {
    if (parentPredicate == null || parentPredicate.evaluate(resource)) {
      TreeNode<Resource> node=tree.addChild(resource,resource.getType() + ":" + count++);
      for (      Map.Entry<String,ResourceInstanceImpl> entry : mapSubResources.entrySet()) {
        String subResCategory=entry.getKey();
        ResourceInstanceImpl r=entry.getValue();
        Resource.Type subResourceType=r.getResourceDefinition().getType();
        QueryResult subQueryResult=queryResult.getSubResources().get(subResourceType);
        if (subQueryResult != null) {
          setParentIdsOnSubResource(resource,r);
          Predicate subPredicate=r.getQuery().getPredicate();
          TreeNode<Resource> childResult=r.applyResult(subQueryResult,subPredicate).getResultTree();
          childResult.setName(subResCategory);
          childResult.setProperty("isCollection","false");
          node.addChild(childResult);
        }
      }
    }
  }
  return result;
}
