{
  Unmarshaller um;
  try {
    um=jaxbContext.createUnmarshaller();
    Component component=(Component)um.unmarshal(in);
    provides=component.provides;
    pkg=component.pkg;
    int i=0;
    if (component.requires == null) {
      dependencies=new String[0];
    }
 else {
      dependencies=new String[component.requires.size()];
      for (      Requires r : component.requires) {
        dependencies[i]=r.name;
      }
    }
    i=0;
    if (component.roles == null) {
      roles=new String[0];
    }
 else {
      roles=new String[component.roles.size()];
      for (      Role r : component.roles) {
        roles[i]=r.name;
      }
    }
    installCommand=getCommand(component.install);
    installUser=getUser(component.install,component.user);
    configureCommand=getCommand(component.configure);
    configureUser=getUser(component.configure,component.user);
    startCommand=getCommand(component.start);
    startUser=getUser(component.start,component.user);
    checkCommand=getCommand(component.check);
    checkUser=getUser(component.check,component.user);
    preinstallCommand=getCommand(component.preinstall);
    preinstallUser=getUser(component.preinstall,component.user);
    if (component.check != null) {
      checkRole=component.check.runOn;
    }
 else {
      checkRole=null;
    }
    if (component.preinstall != null) {
      preinstallRole=component.preinstall.runPreinstallOn;
    }
 else {
      preinstallRole=null;
    }
    uninstallCommand=getCommand(component.uninstall);
    uninstallUser=getUser(component.uninstall,component.user);
  }
 catch (  JAXBException e) {
    throw new IOException("Problem parsing component defintion",e);
  }
}
