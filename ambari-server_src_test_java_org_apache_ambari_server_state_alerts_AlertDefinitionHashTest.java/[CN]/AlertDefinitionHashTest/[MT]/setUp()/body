{
  super.setUp();
  m_injector=Guice.createInjector(Modules.override(new InMemoryDefaultTestModule()).with(new MockModule()));
  m_mockClusters=m_injector.getInstance(Clusters.class);
  m_mockCluster=m_injector.getInstance(Cluster.class);
  m_mockDao=m_injector.getInstance(AlertDefinitionDAO.class);
  List<ServiceComponentHost> serviceComponentHosts=new ArrayList<ServiceComponentHost>();
  ServiceComponentHost sch=EasyMock.createNiceMock(ServiceComponentHost.class);
  expect(sch.getServiceName()).andReturn("HDFS").anyTimes();
  expect(sch.getServiceComponentName()).andReturn("NAMENODE").anyTimes();
  expect(sch.getHostName()).andReturn(HOSTNAME).anyTimes();
  EasyMock.replay(sch);
  serviceComponentHosts.add(sch);
  sch=EasyMock.createNiceMock(ServiceComponentHost.class);
  expect(sch.getServiceName()).andReturn("HDFS").anyTimes();
  expect(sch.getServiceComponentName()).andReturn("DATANODE").anyTimes();
  expect(sch.getHostName()).andReturn(HOSTNAME).anyTimes();
  EasyMock.replay(sch);
  serviceComponentHosts.add(sch);
  Map<String,ServiceComponentHost> mapComponentHosts=new HashMap<String,ServiceComponentHost>();
  ServiceComponentHost host=EasyMock.createNiceMock(ServiceComponentHost.class);
  expect(host.getHostName()).andReturn(HOSTNAME).anyTimes();
  mapComponentHosts.put(HOSTNAME,host);
  Map<String,ServiceComponent> serviceComponents=new HashMap<String,ServiceComponent>();
  ServiceComponent namenode=EasyMock.createNiceMock(ServiceComponent.class);
  expect(namenode.getServiceComponentHosts()).andReturn(mapComponentHosts).anyTimes();
  expect(namenode.isMasterComponent()).andReturn(true).anyTimes();
  serviceComponents.put("NAMENODE",namenode);
  Map<String,Service> services=new HashMap<String,Service>();
  String hdfsName="HDFS";
  Service hdfs=EasyMock.createNiceMock(Service.class);
  expect(hdfs.getName()).andReturn("HDFS").anyTimes();
  expect(hdfs.getServiceComponents()).andReturn(serviceComponents).anyTimes();
  services.put(hdfsName,hdfs);
  EasyMock.replay(hdfs,host,namenode);
  expect(m_mockClusters.getCluster((String)anyObject())).andReturn(m_mockCluster).atLeastOnce();
  expect(m_mockCluster.getClusterId()).andReturn(Long.valueOf(1)).anyTimes();
  expect(m_mockCluster.getClusterName()).andReturn(CLUSTERNAME).anyTimes();
  expect(m_mockCluster.getServices()).andReturn(services).anyTimes();
  expect(m_mockCluster.getServiceComponentHosts(EasyMock.anyObject(String.class))).andReturn(serviceComponentHosts).anyTimes();
  AlertDefinitionEntity hdfsService=new AlertDefinitionEntity();
  hdfsService.setDefinitionId(1L);
  hdfsService.setClusterId(1L);
  hdfsService.setHash(UUID.randomUUID().toString());
  hdfsService.setServiceName("HDFS");
  hdfsService.setComponentName("NAMENODE");
  hdfsService.setScope(Scope.SERVICE);
  AlertDefinitionEntity hdfsHost=new AlertDefinitionEntity();
  hdfsHost.setDefinitionId(2L);
  hdfsHost.setClusterId(1L);
  hdfsHost.setHash(UUID.randomUUID().toString());
  hdfsHost.setServiceName("HDFS");
  hdfsHost.setComponentName("DATANODE");
  hdfsHost.setScope(Scope.HOST);
  AlertDefinitionEntity agentScoped=new AlertDefinitionEntity();
  agentScoped.setDefinitionId(3L);
  agentScoped.setClusterId(1L);
  agentScoped.setHash(UUID.randomUUID().toString());
  agentScoped.setServiceName("AMBARI");
  agentScoped.setComponentName("AMBARI_AGENT");
  agentScoped.setScope(Scope.HOST);
  EasyMock.expect(m_mockDao.findByServiceMaster(EasyMock.anyInt(),(Set<String>)EasyMock.anyObject())).andReturn(Collections.singletonList(hdfsService)).anyTimes();
  EasyMock.expect(m_mockDao.findByServiceComponent(EasyMock.anyInt(),EasyMock.anyObject(String.class),EasyMock.anyObject(String.class))).andReturn(Collections.singletonList(hdfsHost)).anyTimes();
  EasyMock.expect(m_mockDao.findAgentScoped(EasyMock.anyInt())).andReturn(Collections.singletonList(agentScoped)).anyTimes();
  EasyMock.replay(m_mockClusters,m_mockCluster,m_mockDao);
  m_hash=m_injector.getInstance(AlertDefinitionHash.class);
}
