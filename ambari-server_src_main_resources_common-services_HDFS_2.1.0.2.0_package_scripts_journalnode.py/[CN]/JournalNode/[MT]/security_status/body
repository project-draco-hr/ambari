def security_status(self, env):
    import status_params
    env.set_params(status_params)
    props_value_check = {'hadoop.security.authentication': 'kerberos', 'hadoop.security.authorization': 'true', }
    props_empty_check = ['hadoop.security.auth_to_local']
    props_read_check = None
    core_site_expectations = build_expectations('core-site', props_value_check, props_empty_check, props_read_check)
    props_value_check = None
    props_empty_check = ['dfs.journalnode.keytab.file', 'dfs.journalnode.kerberos.principal']
    props_read_check = ['dfs.journalnode.keytab.file']
    hdfs_site_expectations = build_expectations('hdfs-site', props_value_check, props_empty_check, props_read_check)
    hdfs_expectations = {}
    hdfs_expectations.update(hdfs_site_expectations)
    hdfs_expectations.update(core_site_expectations)
    security_params = get_params_from_filesystem(status_params.hadoop_conf_dir, {'core-site.xml': FILE_TYPE_XML, })
    result_issues = validate_security_config_properties(security_params, hdfs_expectations)
    if (not result_issues):
        try:
            if (('hdfs-site' not in security_params) or ('dfs.journalnode.kerberos.keytab.file' not in security_params['hdfs-site']) or ('dfs.journalnode.kerberos.principal' not in security_params['hdfs-site'])):
                self.put_structured_out({'securityState': 'UNSECURED', })
                self.put_structured_out({'securityIssuesFound': 'Keytab file or principal are not set property.', })
                return
            cached_kinit_executor(status_params.kinit_path_local, status_params.hdfs_user, security_params['hdfs-site']['dfs.journalnode.kerberos.keytab.file'], security_params['hdfs-site']['dfs.journalnode.kerberos.principal'], status_params.hostname, status_params.tmp_dir)
            self.put_structured_out({'securityState': 'SECURED_KERBEROS', })
        except Exception as e:
            self.put_structured_out({'securityState': 'ERROR', })
            self.put_structured_out({'securityStateErrorInfo': str(e), })
    else:
        issues = []
        for cf in result_issues:
            issues.append(('Configuration file %s did not pass the validation. Reason: %s' % (cf, result_issues[cf])))
        self.put_structured_out({'securityIssuesFound': '. '.join(issues), })
        self.put_structured_out({'securityState': 'UNSECURED', })
