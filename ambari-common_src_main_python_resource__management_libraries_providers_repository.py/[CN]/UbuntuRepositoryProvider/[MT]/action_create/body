def action_create(self):
    with Environment.get_instance_copy() as env:
        with tempfile.NamedTemporaryFile() as tmpf:
            with tempfile.NamedTemporaryFile() as old_repo_tmpf:
                repo_file_name = format('{repo_file_name}.list', repo_file_name=self.resource.repo_file_name)
                repo_file_path = format('{repo_dir}/{repo_file_name}', repo_dir=self.repo_dir)
                new_content = InlineTemplate(self.resource.repo_template, package_type=self.package_type, base_url=self.resource.base_url, components=' '.join(self.resource.components)).get_content()
                old_content = ''
                if (self.resource.append_to_file and os.path.isfile(repo_file_path)):
                    old_content = (sudo.read_file(repo_file_path) + '\n')
                File(tmpf.name, content=(old_content + new_content))
                if os.path.isfile(repo_file_path):
                    File(old_repo_tmpf.name, content=StaticFile(repo_file_path))
                if ((not os.path.isfile(repo_file_path)) or (not filecmp.cmp(tmpf.name, old_repo_tmpf.name))):
                    File(repo_file_path, content=StaticFile(tmpf.name))
                    update_cmd_formatted = [format(x) for x in self.update_cmd]
                    (retcode, out) = checked_call(update_cmd_formatted, sudo=True, quiet=False)
                    missing_pkeys = set(re.findall(self.missing_pkey_regex, out))
                    for pkey in missing_pkeys:
                        Execute((self.app_pkey_cmd_prefix + (pkey,)), timeout=15, ignore_failures=True, sudo=True)
