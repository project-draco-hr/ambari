{
  Set<Map<String,Object>> setProperties=getTestProperties();
  setConfigurationProperties(setProperties);
  Request request=createMock(Request.class);
  Map<String,ServiceInfo> services=new HashMap<String,ServiceInfo>();
  ServiceInfo service=new ServiceInfo();
  service.setName("test-service");
  services.put("test-service",service);
  List<ComponentInfo> serviceComponents=new ArrayList<ComponentInfo>();
  ComponentInfo component1=new ComponentInfo();
  component1.setName("component1");
  ComponentInfo component2=new ComponentInfo();
  component2.setName("component2");
  serviceComponents.add(component1);
  serviceComponents.add(component2);
  Capture<BlueprintEntity> entityCapture=new Capture<BlueprintEntity>();
  expect(request.getProperties()).andReturn(setProperties);
  expect(dao.findByName(BLUEPRINT_NAME)).andReturn(null);
  expect(metaInfo.getServices("test-stack-name","test-stack-version")).andReturn(services).anyTimes();
  expect(metaInfo.getComponentsByService("test-stack-name","test-stack-version","test-service")).andReturn(serviceComponents).anyTimes();
  dao.create(capture(entityCapture));
  replay(dao,metaInfo,request);
  ResourceProvider provider=createProvider();
  AbstractResourceProviderTest.TestObserver observer=new AbstractResourceProviderTest.TestObserver();
  ((ObservableResourceProvider)provider).addObserver(observer);
  provider.createResources(request);
  ResourceProviderEvent lastEvent=observer.getLastEvent();
  assertNotNull(lastEvent);
  assertEquals(Resource.Type.Blueprint,lastEvent.getResourceType());
  assertEquals(ResourceProviderEvent.Type.Create,lastEvent.getType());
  assertEquals(request,lastEvent.getRequest());
  assertNull(lastEvent.getPredicate());
  validateEntity(entityCapture.getValue(),true);
  verify(dao,metaInfo,request);
}
