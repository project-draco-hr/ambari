{
  Request request=createMock(Request.class);
  Map<String,ServiceInfo> services=new HashMap<String,ServiceInfo>();
  ServiceInfo service=new ServiceInfo();
  service.setName("test-service");
  services.put("test-service",service);
  List<ComponentInfo> serviceComponents=new ArrayList<ComponentInfo>();
  ComponentInfo component1=new ComponentInfo();
  component1.setName("foo");
  ComponentInfo component2=new ComponentInfo();
  component2.setName("component2");
  serviceComponents.add(component1);
  serviceComponents.add(component2);
  Set<Map<String,Object>> setProperties=getTestProperties();
  expect(request.getProperties()).andReturn(setProperties);
  expect(request.getRequestInfoProperties()).andReturn(Collections.<String,String>emptyMap());
  expect(metaInfo.getServices("test-stack-name","test-stack-version")).andReturn(services).anyTimes();
  expect(metaInfo.getComponentsByService("test-stack-name","test-stack-version","test-service")).andReturn(serviceComponents).anyTimes();
  replay(dao,metaInfo,request);
  try {
    provider.createResources(request);
    fail("Exception expected");
  }
 catch (  IllegalArgumentException e) {
  }
  verify(dao,metaInfo,request);
}
