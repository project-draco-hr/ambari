{
  BlueprintConfiguration config1=new BlueprintConfigEntity();
  config1.setType("type1");
  config1.setConfigData("{\"key1\":\"value1\"}");
  BlueprintConfiguration config2=new BlueprintConfigEntity();
  config2.setType("type2");
  config2.setConfigData("{\"key2\":\"value2\"}");
  config2.setConfigAttributes("{}");
  BlueprintConfiguration config3=new BlueprintConfigEntity();
  config3.setType("type3");
  config3.setConfigData("{\"key3\":\"value3\",\"key4\":\"value4\"}");
  config3.setConfigAttributes("{\"final\":{\"key3\":\"attrValue1\",\"key4\":\"attrValue2\"}}");
  List<Map<String,Map<String,Object>>> configs=provider.populateConfigurationList(Arrays.asList(config1,config2,config3));
  assertNotNull(configs);
  assertEquals(3,configs.size());
  Map<String,Map<String,Object>> configuration1=configs.get(0);
  assertNotNull(configuration1);
  assertEquals(1,configuration1.size());
  assertTrue(configuration1.containsKey("type1"));
  Map<String,Object> typeConfig1=configuration1.get("type1");
  assertNotNull(typeConfig1);
  assertEquals(1,typeConfig1.size());
  assertTrue(typeConfig1.containsKey(BlueprintResourceProvider.PROPERTIES_PROPERTY_ID));
  Map<String,String> confProperties1=(Map<String,String>)typeConfig1.get(BlueprintResourceProvider.PROPERTIES_PROPERTY_ID);
  assertNotNull(confProperties1);
  assertEquals(1,confProperties1.size());
  assertEquals("value1",confProperties1.get("key1"));
  Map<String,Map<String,Object>> configuration2=configs.get(1);
  assertNotNull(configuration2);
  assertEquals(1,configuration2.size());
  assertTrue(configuration2.containsKey("type2"));
  Map<String,Object> typeConfig2=configuration2.get("type2");
  assertNotNull(typeConfig2);
  assertEquals(1,typeConfig2.size());
  assertTrue(typeConfig2.containsKey(BlueprintResourceProvider.PROPERTIES_PROPERTY_ID));
  Map<String,String> confProperties2=(Map<String,String>)typeConfig2.get(BlueprintResourceProvider.PROPERTIES_PROPERTY_ID);
  assertNotNull(confProperties2);
  assertEquals(1,confProperties2.size());
  assertEquals("value2",confProperties2.get("key2"));
  Map<String,Map<String,Object>> configuration3=configs.get(2);
  assertNotNull(configuration3);
  assertEquals(1,configuration3.size());
  assertTrue(configuration3.containsKey("type3"));
  Map<String,Object> typeConfig3=configuration3.get("type3");
  assertNotNull(typeConfig3);
  assertEquals(2,typeConfig3.size());
  assertTrue(typeConfig3.containsKey(BlueprintResourceProvider.PROPERTIES_PROPERTY_ID));
  Map<String,String> confProperties3=(Map<String,String>)typeConfig3.get(BlueprintResourceProvider.PROPERTIES_PROPERTY_ID);
  assertNotNull(confProperties3);
  assertEquals(2,confProperties3.size());
  assertEquals("value3",confProperties3.get("key3"));
  assertEquals("value4",confProperties3.get("key4"));
  assertTrue(typeConfig3.containsKey(BlueprintResourceProvider.PROPERTIES_ATTRIBUTES_PROPERTY_ID));
  Map<String,Map<String,String>> confAttributes3=(Map<String,Map<String,String>>)typeConfig3.get(BlueprintResourceProvider.PROPERTIES_ATTRIBUTES_PROPERTY_ID);
  assertNotNull(confAttributes3);
  assertEquals(1,confAttributes3.size());
  assertTrue(confAttributes3.containsKey("final"));
  Map<String,String> finalAttrs=confAttributes3.get("final");
  assertEquals(2,finalAttrs.size());
  assertEquals("attrValue1",finalAttrs.get("key3"));
  assertEquals("attrValue2",finalAttrs.get("key4"));
}
