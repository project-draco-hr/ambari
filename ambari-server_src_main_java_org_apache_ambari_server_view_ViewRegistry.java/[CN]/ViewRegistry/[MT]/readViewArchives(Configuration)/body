{
  File viewDir=configuration.getViewsDir();
  File[] files=viewDir.listFiles();
  Set<ViewInstanceEntity> instanceDefinitions=new HashSet<ViewInstanceEntity>();
  if (files != null) {
    for (    final File fileEntry : files) {
      if (!fileEntry.isDirectory()) {
        try {
          ClassLoader cl=URLClassLoader.newInstance(new URL[]{fileEntry.toURI().toURL()});
          InputStream configStream=cl.getResourceAsStream(VIEW_XML);
          JAXBContext jaxbContext=JAXBContext.newInstance(ViewConfig.class);
          Unmarshaller jaxbUnmarshaller=jaxbContext.createUnmarshaller();
          ViewConfig viewConfig=(ViewConfig)jaxbUnmarshaller.unmarshal(configStream);
          ViewEntity viewDefinition=installView(viewConfig,configuration,cl,fileEntry.getAbsolutePath());
          for (          InstanceConfig instanceConfig : viewConfig.getInstances()) {
            ViewInstanceEntity viewInstanceDefinition=new ViewInstanceEntity(viewDefinition,instanceConfig);
            for (            PropertyConfig propertyConfig : instanceConfig.getProperties()) {
              viewInstanceDefinition.putProperty(propertyConfig.getKey(),propertyConfig.getValue());
            }
            _installViewInstance(viewDefinition,viewInstanceDefinition);
            instanceDefinitions.add(viewInstanceDefinition);
          }
        }
 catch (        Exception e) {
          LOG.error("Caught exception loading view from " + fileEntry.getAbsolutePath(),e);
        }
      }
    }
    try {
      instanceDefinitions.addAll(persistViews());
    }
 catch (    ClassNotFoundException e) {
      LOG.error("Caught exception persisting views.",e);
    }
  }
  return instanceDefinitions;
}
