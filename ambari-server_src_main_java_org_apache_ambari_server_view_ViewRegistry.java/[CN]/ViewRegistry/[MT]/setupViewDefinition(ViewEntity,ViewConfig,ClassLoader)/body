{
  viewDefinition.setClassLoader(cl);
  List<ParameterConfig> parameterConfigurations=viewConfig.getParameters();
  Collection<ViewParameterEntity> parameters=new HashSet<ViewParameterEntity>();
  String viewName=viewDefinition.getName();
  for (  ParameterConfig parameterConfiguration : parameterConfigurations) {
    ViewParameterEntity viewParameterEntity=new ViewParameterEntity();
    viewParameterEntity.setViewName(viewName);
    viewParameterEntity.setName(parameterConfiguration.getName());
    viewParameterEntity.setDescription(parameterConfiguration.getDescription());
    viewParameterEntity.setLabel(parameterConfiguration.getLabel());
    viewParameterEntity.setPlaceholder(parameterConfiguration.getPlaceholder());
    viewParameterEntity.setDefaultValue(parameterConfiguration.getDefaultValue());
    viewParameterEntity.setRequired(parameterConfiguration.isRequired());
    viewParameterEntity.setMasked(parameterConfiguration.isMasked());
    viewParameterEntity.setViewEntity(viewDefinition);
    parameters.add(viewParameterEntity);
  }
  viewDefinition.setParameters(parameters);
  List<ResourceConfig> resourceConfigurations=viewConfig.getResources();
  Resource.Type externalResourceType=viewDefinition.getExternalResourceType();
  ViewExternalSubResourceProvider viewExternalSubResourceProvider=new ViewExternalSubResourceProvider(externalResourceType,viewDefinition);
  viewDefinition.addResourceProvider(externalResourceType,viewExternalSubResourceProvider);
  resourceProviders.put(externalResourceType,viewExternalSubResourceProvider);
  ResourceInstanceFactoryImpl.addResourceDefinition(externalResourceType,new ViewExternalSubResourceDefinition(externalResourceType));
  Collection<ViewResourceEntity> resources=new HashSet<ViewResourceEntity>();
  for (  ResourceConfig resourceConfiguration : resourceConfigurations) {
    ViewResourceEntity viewResourceEntity=new ViewResourceEntity();
    viewResourceEntity.setViewName(viewName);
    viewResourceEntity.setName(resourceConfiguration.getName());
    viewResourceEntity.setPluralName(resourceConfiguration.getPluralName());
    viewResourceEntity.setIdProperty(resourceConfiguration.getIdProperty());
    viewResourceEntity.setResource(resourceConfiguration.getResource());
    viewResourceEntity.setService(resourceConfiguration.getService());
    viewResourceEntity.setProvider(resourceConfiguration.getProvider());
    viewResourceEntity.setSubResourceNames(resourceConfiguration.getSubResourceNames());
    viewResourceEntity.setViewEntity(viewDefinition);
    ViewSubResourceDefinition resourceDefinition=new ViewSubResourceDefinition(viewDefinition,resourceConfiguration);
    viewDefinition.addResourceDefinition(resourceDefinition);
    Resource.Type type=resourceDefinition.getType();
    viewDefinition.addResourceConfiguration(type,resourceConfiguration);
    if (resourceConfiguration.isExternal()) {
      viewExternalSubResourceProvider.addResourceName(resourceConfiguration.getName());
    }
 else {
      ResourceInstanceFactoryImpl.addResourceDefinition(type,resourceDefinition);
      Class<?> clazz=resourceConfiguration.getResourceClass(cl);
      String idProperty=resourceConfiguration.getIdProperty();
      ViewSubResourceProvider provider=new ViewSubResourceProvider(type,clazz,idProperty,viewDefinition);
      viewDefinition.addResourceProvider(type,provider);
      resourceProviders.put(type,provider);
      resources.add(viewResourceEntity);
    }
    viewDefinition.setResources(resources);
  }
  ResourceTypeEntity resourceTypeEntity=new ResourceTypeEntity();
  resourceTypeEntity.setName(viewName);
  viewDefinition.setResourceType(resourceTypeEntity);
  List<PermissionConfig> permissionConfigurations=viewConfig.getPermissions();
  Collection<PermissionEntity> permissions=new HashSet<PermissionEntity>();
  for (  PermissionConfig permissionConfiguration : permissionConfigurations) {
    PermissionEntity permissionEntity=new PermissionEntity();
    permissionEntity.setPermissionName(permissionConfiguration.getName());
    permissionEntity.setResourceType(resourceTypeEntity);
    permissions.add(permissionEntity);
  }
  viewDefinition.setPermissions(permissions);
  View view=null;
  if (viewConfig.getView() != null) {
    view=getView(viewConfig.getViewClass(cl),new ViewContextImpl(viewDefinition,this));
  }
  viewDefinition.setView(view);
  Validator validator=null;
  if (viewConfig.getValidator() != null) {
    validator=getValidator(viewConfig.getValidatorClass(cl),new ViewContextImpl(viewDefinition,this));
  }
  viewDefinition.setValidator(validator);
  viewDefinition.setMask(viewConfig.getMasker());
  Set<SubResourceDefinition> subResourceDefinitions=new HashSet<SubResourceDefinition>();
  for (  Resource.Type type : viewDefinition.getViewResourceTypes()) {
    subResourceDefinitions.add(new SubResourceDefinition(type));
  }
  subResourceDefinitionsMap.put(viewName,subResourceDefinitions);
  return viewDefinition;
}
