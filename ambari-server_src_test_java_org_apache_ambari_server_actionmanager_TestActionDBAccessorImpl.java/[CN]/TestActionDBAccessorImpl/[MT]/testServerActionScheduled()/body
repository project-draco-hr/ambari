{
  populateActionDBWithServerAction(db,serverHostName,requestId,stageId);
  final String roleName=Role.AMBARI_SERVER_ACTION.toString();
  Stage stage=db.getStage(StageUtils.getActionId(requestId,stageId));
  assertEquals(HostRoleStatus.PENDING,stage.getHostRoleStatus(serverHostName,roleName));
  List<HostRoleCommandEntity> entities=hostRoleCommandDAO.findByHostRole(serverHostName,requestId,stageId,roleName);
  assertEquals(HostRoleStatus.PENDING,entities.get(0).getStatus());
  stage.setHostRoleStatus(serverHostName,roleName,HostRoleStatus.QUEUED);
  entities=hostRoleCommandDAO.findByHostRole(serverHostName,requestId,stageId,roleName);
  assertEquals(HostRoleStatus.QUEUED,stage.getHostRoleStatus(serverHostName,roleName));
  assertEquals(HostRoleStatus.PENDING,entities.get(0).getStatus());
  db.hostRoleScheduled(stage,serverHostName,roleName);
  entities=hostRoleCommandDAO.findByHostRole(serverHostName,requestId,stageId,roleName);
  assertEquals(HostRoleStatus.QUEUED,entities.get(0).getStatus());
  Thread thread=new Thread(){
    @Override public void run(){
      Stage stage1=db.getStage("23-31");
      stage1.setHostRoleStatus(serverHostName,roleName,HostRoleStatus.COMPLETED);
      db.hostRoleScheduled(stage1,serverHostName,roleName);
      injector.getInstance(EntityManager.class).clear();
    }
  }
;
  thread.start();
  thread.join();
  injector.getInstance(EntityManager.class).clear();
  entities=hostRoleCommandDAO.findByHostRole(serverHostName,requestId,stageId,roleName);
  assertEquals("Concurrent update failed",HostRoleStatus.COMPLETED,entities.get(0).getStatus());
}
