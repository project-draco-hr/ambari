{
  Stack stack=new Stack(blueprint.getStackName(),blueprint.getStackVersion());
  Map<String,HostGroup> hostGroupMap=parseBlueprintHostGroups(blueprint,stack);
  Collection<HostGroup> hostGroups=hostGroupMap.values();
  Map<String,Map<String,Collection<DependencyInfo>>> missingDependencies=new HashMap<String,Map<String,Collection<DependencyInfo>>>();
  Collection<String> services=getTopologyServices(hostGroups);
  for (  HostGroup group : hostGroups) {
    Map<String,Collection<DependencyInfo>> missingGroupDependencies=group.validateTopology(hostGroups,services);
    if (!missingGroupDependencies.isEmpty()) {
      missingDependencies.put(group.getEntity().getName(),missingGroupDependencies);
    }
  }
  Collection<String> cardinalityFailures=new HashSet<String>();
  for (  String service : services) {
    for (    String component : stack.getComponents(service)) {
      Cardinality cardinality=stack.getCardinality(component);
      AutoDeployInfo autoDeploy=stack.getAutoDeployInfo(component);
      if (cardinality.isAll()) {
        cardinalityFailures.addAll(verifyComponentInAllHostGroups(blueprint,hostGroups,component,autoDeploy));
      }
 else {
        cardinalityFailures.addAll(verifyComponentCardinalityCount(blueprint,hostGroups,component,cardinality,autoDeploy));
      }
    }
  }
  if (!missingDependencies.isEmpty() || !cardinalityFailures.isEmpty()) {
    generateInvalidTopologyException(missingDependencies,cardinalityFailures);
  }
  return blueprint;
}
