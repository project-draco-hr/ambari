{
  Collection<String> cardinalityFailures=new HashSet<String>();
  if (BlueprintConfigurationProcessor.isNameNodeHAEnabled(clusterConfig) && (component.equals("SECONDARY_NAMENODE"))) {
    cardinality=new Cardinality("0");
  }
  int actualCount=getHostGroupsForComponent(component,hostGroups).size();
  if (!cardinality.isValidCount(actualCount)) {
    boolean validated=!isDependencyManaged(stack,component,clusterConfig);
    if (!validated && autoDeploy != null && autoDeploy.isEnabled() && cardinality.supportsAutoDeploy()) {
      String coLocateName=autoDeploy.getCoLocate();
      if (coLocateName != null && !coLocateName.isEmpty()) {
        Collection<HostGroupImpl> coLocateHostGroups=getHostGroupsForComponent(coLocateName.split("/")[1],hostGroups);
        if (!coLocateHostGroups.isEmpty()) {
          validated=true;
          HostGroupImpl group=coLocateHostGroups.iterator().next();
          if (group.addComponent(component)) {
            addComponentToBlueprint(blueprint,group.getEntity().getName(),component);
          }
        }
      }
    }
    if (!validated) {
      cardinalityFailures.add(component + "(actual=" + actualCount+ ", required="+ cardinality.cardinality+ ")");
    }
  }
  return cardinalityFailures;
}
