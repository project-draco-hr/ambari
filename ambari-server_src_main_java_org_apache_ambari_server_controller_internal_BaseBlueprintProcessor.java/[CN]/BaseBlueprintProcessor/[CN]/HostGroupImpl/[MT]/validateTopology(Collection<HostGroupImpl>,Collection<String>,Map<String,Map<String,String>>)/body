{
  Map<String,Collection<DependencyInfo>> missingDependencies=new HashMap<String,Collection<DependencyInfo>>();
  for (  String component : new HashSet<String>(components)) {
    Collection<DependencyInfo> dependenciesForComponent=stack.getDependenciesForComponent(component);
    for (    DependencyInfo dependency : dependenciesForComponent) {
      String conditionalService=stack.getConditionalServiceForDependency(dependency);
      if (conditionalService != null && !services.contains(conditionalService)) {
        continue;
      }
      BlueprintEntity entity=hostGroup.getBlueprintEntity();
      String dependencyScope=dependency.getScope();
      String componentName=dependency.getComponentName();
      AutoDeployInfo autoDeployInfo=dependency.getAutoDeploy();
      boolean resolved=false;
      if (dependencyScope.equals("cluster")) {
        Collection<String> missingDependencyInfo=blueprintProcessor.verifyComponentCardinalityCount(entity,hostGroups,componentName,new Cardinality("1+"),autoDeployInfo,stack,clusterConfig);
        resolved=missingDependencyInfo.isEmpty();
      }
 else       if (dependencyScope.equals("host")) {
        if (components.contains(component) || (autoDeployInfo != null && autoDeployInfo.isEnabled())) {
          resolved=true;
          if (addComponent(componentName)) {
            blueprintProcessor.addComponentToBlueprint(hostGroup.getBlueprintEntity(),getEntity().getName(),componentName);
          }
        }
      }
      if (!resolved) {
        Collection<DependencyInfo> missingCompDependencies=missingDependencies.get(component);
        if (missingCompDependencies == null) {
          missingCompDependencies=new HashSet<DependencyInfo>();
          missingDependencies.put(component,missingCompDependencies);
        }
        missingCompDependencies.add(dependency);
      }
    }
  }
  return missingDependencies;
}
