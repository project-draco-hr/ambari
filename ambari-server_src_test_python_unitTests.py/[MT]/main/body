def main():
    if (not os.path.exists(newtmpdirpath)):
        os.makedirs(newtmpdirpath)
    custom_tests = False
    if (len(sys.argv) > 1):
        if (sys.argv[1] == 'true'):
            custom_tests = True
    pwd = os.path.abspath(os.path.dirname(__file__))
    ambari_server_folder = get_parent_path(pwd, 'ambari-server')
    ambari_agent_folder = os.path.normpath(os.path.join(ambari_server_folder, '../ambari-agent'))
    ambari_common_folder = os.path.normpath(os.path.join(ambari_server_folder, '../ambari-common'))
    sys.path.append(os.path.join(ambari_common_folder, 'src/main/python'))
    sys.path.append(os.path.join(ambari_common_folder, 'src/main/python/ambari_jinja2'))
    sys.path.append(os.path.join(ambari_common_folder, 'src/test/python'))
    sys.path.append(os.path.join(ambari_agent_folder, 'src/main/python'))
    sys.path.append(os.path.join(ambari_server_folder, 'src/test/python'))
    sys.path.append(os.path.join(ambari_server_folder, 'src/main/python'))
    sys.path.append(os.path.join(ambari_server_folder, 'src/main/resources/scripts'))
    sys.path.append(os.path.join(ambari_server_folder, 'src/main/resources/custom_actions/scripts'))
    sys.path.append(os.path.join(ambari_server_folder, 'src/main/resources/host_scripts'))
    stacks_folder = os.path.join(pwd, 'stacks')
    test_variants = []
    for stack in os.listdir(stacks_folder):
        current_stack_dir = os.path.join(stacks_folder, stack)
        if (os.path.isdir(current_stack_dir) and (stack not in STACK_EXCLUDE)):
            for service in os.listdir(current_stack_dir):
                current_service_dir = os.path.join(current_stack_dir, service)
                if (os.path.isdir(current_service_dir) and (service not in SERVICE_EXCLUDE)):
                    if (service == 'hooks'):
                        for hook in os.listdir(current_service_dir):
                            test_variants.append({'directory': os.path.join(current_service_dir, hook), 'service': hook, 'stack': stack, })
                    else:
                        test_variants.append({'directory': current_service_dir, 'service': service, 'stack': stack, })
    has_failures = False
    test_runs = 0
    test_failures = []
    test_errors = []
    for variant in test_variants:
        executor_result = multiprocessing.Queue()
        sys.stderr.write('Running tests for stack:{0} service:{1}\n'.format(variant['stack'], variant['service']))
        process = multiprocessing.Process(target=stack_test_executor, args=(variant['directory'], variant['service'], variant['stack'], custom_tests, executor_result))
        process.start()
        while process.is_alive():
            process.join(10)
            sys.stdout.flush()
            sys.stderr.flush()
            try:
                variant_result = executor_result.get_nowait()
                break
            except Empty as ex:
                pass
        test_runs += variant_result['tests_run']
        test_errors.extend(variant_result['errors'])
        test_failures.extend(variant_result['failures'])
        if (variant_result['exit_code'] != 0):
            has_failures = True
    sys.stderr.write('Running tests for ambari-server\n')
    if custom_tests:
        test_mask = CUSTOM_TEST_MASK
    else:
        test_mask = TEST_MASK
    test_dirs = [(os.path.join(pwd, 'custom_actions'), '\nRunning tests for custom actions\n'), (os.path.join(pwd, 'host_scripts'), '\nRunning tests for host scripts\n'), (pwd, '\nRunning tests for ambari-server\n')]
    for (test_dir, msg) in test_dirs:
        sys.stderr.write(msg)
        tests = get_test_files(test_dir, mask=test_mask, recursive=False)
        modules = [os.path.basename(s)[:(-3)] for s in tests]
        suites = [unittest.defaultTestLoader.loadTestsFromName(name) for name in modules]
        testSuite = unittest.TestSuite(suites)
        textRunner = unittest.TextTestRunner(verbosity=2).run(testSuite)
        test_runs += textRunner.testsRun
        test_errors.extend([(str(item[0]), str(item[1]), 'ERROR') for item in textRunner.errors])
        test_failures.extend([(str(item[0]), str(item[1]), 'FAIL') for item in textRunner.failures])
    if ((len(test_errors) > 0) or (len(test_failures) > 0)):
        has_failures = True
    if has_failures:
        sys.stderr.write('----------------------------------------------------------------------\n')
        sys.stderr.write('Failed tests:\n')
        for failed_tests in [test_errors, test_failures]:
            for err in failed_tests:
                sys.stderr.write('{0}: {1}\n'.format(err[2], err[0]))
                sys.stderr.write('----------------------------------------------------------------------\n')
                sys.stderr.write('{0}\n'.format(err[1]))
    sys.stderr.write('----------------------------------------------------------------------\n')
    sys.stderr.write('Total run:{0}\n'.format(test_runs))
    sys.stderr.write('Total errors:{0}\n'.format(len(test_errors)))
    sys.stderr.write('Total failures:{0}\n'.format(len(test_failures)))
    try:
        shutil.rmtree(newtmpdirpath)
    except:
        pass
    tempfile.tempdir = oldtmpdirpath
    tempfile.oldtmpdirpath = None
    if (not has_failures):
        sys.stderr.write('OK\n')
        exit_code = 0
    else:
        sys.stderr.write('ERROR\n')
        exit_code = 1
    return exit_code
