'\nLicensed to the Apache Software Foundation (ASF) under one\nor more contributor license agreements.  See the NOTICE file\ndistributed with this work for additional information\nregarding copyright ownership.  The ASF licenses this file\nto you under the Apache License, Version 2.0 (the\n"License"); you may not use this file except in compliance\nwith the License.  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\nAmbari Agent\n\n'
from ambari_commons.str_utils import ensure_double_backslashes
from resource_management.libraries.script.script import Script
from resource_management.libraries.functions import is_empty
import status_params
config = Script.get_config()
config_dir = None
stack_root = None
try:
    config_dir = os.environ['ZOOKEEPER_CONF_DIR']
    stack_root = os.environ['HADOOP_NODE_INSTALL_ROOT']
except:
    pass
hadoop_user = config['configurations']['cluster-env']['hadoop.user.name']
zk_user = hadoop_user
zk_log_dir = config['configurations']['zookeeper-env']['zk_log_dir']
zk_data_dir = ensure_double_backslashes(config['configurations']['zoo.cfg']['dataDir'])
tickTime = config['configurations']['zoo.cfg']['tickTime']
initLimit = config['configurations']['zoo.cfg']['initLimit']
syncLimit = config['configurations']['zoo.cfg']['syncLimit']
clientPort = config['configurations']['zoo.cfg']['clientPort']
if ('zoo.cfg' in config['configurations']):
    zoo_cfg_properties_map = config['configurations']['zoo.cfg'].copy()
    zoo_cfg_properties_map['dataDir'] = zk_data_dir
else:
    zoo_cfg_properties_map = {}
zoo_cfg_properties_map_length = len(zoo_cfg_properties_map)
zookeeper_hosts = config['clusterHostInfo']['zookeeper_hosts']
zookeeper_hosts.sort()
hostname = config['hostname']
_authentication = config['configurations']['core-site']['hadoop.security.authentication']
security_enabled = ((not is_empty(_authentication)) and (_authentication == 'kerberos'))
user_group = None
zookeeper_win_service_name = status_params.zookeeper_win_service_name
if (('zookeeper-log4j' in config['configurations']) and ('content' in config['configurations']['zookeeper-log4j'])):
    log4j_props = config['configurations']['zookeeper-log4j']['content']
else:
    log4j_props = None
