{
  List<ServiceTestInvocation> listInvocations=new ArrayList<ServiceTestInvocation>();
  BlueprintService BlueprintService=new TestBlueprintService("blueprintName");
  Method m=BlueprintService.getClass().getMethod("getBlueprint",String.class,HttpHeaders.class,UriInfo.class,String.class);
  Object[] args=new Object[]{null,getHttpHeaders(),getUriInfo(),"blueprintName"};
  listInvocations.add(new ServiceTestInvocation(Request.Type.GET,BlueprintService,m,args,null));
  BlueprintService=new TestBlueprintService(null);
  m=BlueprintService.getClass().getMethod("getBlueprints",String.class,HttpHeaders.class,UriInfo.class);
  args=new Object[]{null,getHttpHeaders(),getUriInfo()};
  listInvocations.add(new ServiceTestInvocation(Request.Type.GET,BlueprintService,m,args,null));
  BlueprintService=new TestBlueprintService("blueprintName");
  m=BlueprintService.getClass().getMethod("createBlueprint",String.class,HttpHeaders.class,UriInfo.class,String.class);
  args=new Object[]{"body",getHttpHeaders(),getUriInfo(),"blueprintName"};
  listInvocations.add(new ServiceTestInvocation(Request.Type.POST,BlueprintService,m,args,"body"));
  BlueprintService=new TestBlueprintService("blueprintName");
  m=BlueprintService.getClass().getMethod("deleteBlueprint",HttpHeaders.class,UriInfo.class,String.class);
  args=new Object[]{getHttpHeaders(),getUriInfo(),"blueprintName"};
  listInvocations.add(new ServiceTestInvocation(Request.Type.DELETE,BlueprintService,m,args,null));
  BlueprintService=new TestBlueprintService(null);
  m=BlueprintService.getClass().getMethod("deleteBlueprints",HttpHeaders.class,UriInfo.class);
  args=new Object[]{getHttpHeaders(),getUriInfo()};
  listInvocations.add(new ServiceTestInvocation(Request.Type.DELETE,BlueprintService,m,args,null));
  return listInvocations;
}
