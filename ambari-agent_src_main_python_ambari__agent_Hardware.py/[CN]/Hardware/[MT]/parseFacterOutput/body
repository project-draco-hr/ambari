def parseFacterOutput(self, facterOutput):
    retDict = {}
    compiled_pattern = re.compile(self.SSH_KEY_PATTERN)
    allLines = facterOutput.splitlines()
    for line in allLines:
        keyValue = line.split('=>')
        if (len(keyValue) == 2):
            'Ignoring values that are just spaces or do not confirm to the \n        format'
            strippedKey = keyValue[0].strip()
            logger.info(('Stripped key is ' + strippedKey))
            if (strippedKey in ['memoryfree', 'memorysize', 'memorytotal']):
                value = keyValue[1].strip()
                'Convert to KB'
                parts = value.split()
                if (len(parts) == 2):
                    mem_size = parts[1].upper()
                    if (mem_size in ['GB', 'G']):
                        mem_in_kb = long(((float(parts[0]) * 1024) * 1024))
                    elif (mem_size in ['MB', 'M']):
                        mem_in_kb = long((float(parts[0]) * 1024))
                    elif (mem_size in ['KB', 'K']):
                        mem_in_kb = long(float(parts[0]))
                    else:
                        mem_in_kb = long((float(parts[0]) / 1024))
                else:
                    mem_in_kb = long((float(parts[0]) / 1024))
                retDict[strippedKey] = mem_in_kb
                pass
            else:
                if (not compiled_pattern.match(strippedKey)):
                    retDict[strippedKey] = keyValue[1].strip()
                pass
            pass
        pass
    ' Convert the needed types to the true values '
    if ('physicalprocessorcount' in retDict.keys()):
        retDict['physicalprocessorcount'] = int(retDict['physicalprocessorcount'])
        pass
    if ('is_virtual' in retDict.keys()):
        retDict['is_virtual'] = ('true' == retDict['is_virtual'])
        pass
    logger.info(('Facter info : \n' + pprint.pformat(retDict)))
    return retDict
