def facterInfo(self):
    facterHome = self.config.get('puppet', 'facter_home')
    facterEnv = os.environ
    logger.info(('Using facter home as: ' + facterHome))
    facterInfo = {}
    try:
        if os.path.exists(facterHome):
            rubyLib = ''
            if os.environ.has_key('RUBYLIB'):
                rubyLib = os.environ['RUBYLIB']
                logger.info(('RUBYLIB from Env ' + rubyLib))
            if (not (self.facterLib(facterHome) in rubyLib)):
                rubyLib = ((rubyLib + ':') + self.facterLib(facterHome))
            facterEnv['RUBYLIB'] = rubyLib
            facterEnv = self.configureEnviron(facterEnv)
            logger.info(('Setting RUBYLIB as: ' + rubyLib))
            facter = subprocess.Popen([self.facterBin(facterHome)], stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=facterEnv)
            stderr_out = facter.communicate()
            if (facter.returncode != 0):
                logging.error(('Error getting facter info: ' + stderr_out[1]))
                pass
            facterOutput = stderr_out[0]
            infoDict = self.parseFacterOutput(facterOutput)
            facterInfo = infoDict
            pass
        else:
            logger.error((('Facter home at ' + facterHome) + ' does not exist'))
    except:
        logger.info(('Traceback ' + traceback.format_exc()))
        pass
    return facterInfo
