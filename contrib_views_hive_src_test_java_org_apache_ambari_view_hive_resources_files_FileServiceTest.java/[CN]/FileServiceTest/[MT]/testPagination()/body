{
  createFile("/tmp/testPagination","1234567890");
  Response response=fileService.getFilePage("/tmp/testPagination",0L);
  ServiceTestUtils.assertHTTPResponseOK(response);
  JSONObject obj=((JSONObject)response.getEntity());
  assertFileJsonResponseSanity(obj);
  FileResource firstPage=(FileResource)obj.get("file");
  Assert.assertEquals("1234",firstPage.getFileContent());
  Assert.assertEquals(3,firstPage.getPageCount());
  Assert.assertEquals(0,firstPage.getPage());
  Assert.assertTrue(firstPage.isHasNext());
  Assert.assertEquals("/tmp/testPagination",firstPage.getFilePath());
  response=fileService.getFilePage("/tmp/testPagination",1L);
  ServiceTestUtils.assertHTTPResponseOK(response);
  FileResource secondPage=(FileResource)((JSONObject)response.getEntity()).get("file");
  Assert.assertEquals("5678",secondPage.getFileContent());
  Assert.assertEquals(1,secondPage.getPage());
  Assert.assertTrue(secondPage.isHasNext());
  response=fileService.getFilePage("/tmp/testPagination",2L);
  ServiceTestUtils.assertHTTPResponseOK(response);
  FileResource thirdPage=(FileResource)((JSONObject)response.getEntity()).get("file");
  Assert.assertEquals("90",thirdPage.getFileContent());
  Assert.assertEquals(2,thirdPage.getPage());
  Assert.assertFalse(thirdPage.isHasNext());
  thrown.expect(BadRequestFormattedException.class);
  fileService.getFilePage("/tmp/testPagination",3L);
}
