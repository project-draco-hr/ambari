{
  Collection<HostRoleStatus> stageStatuses=new HashSet<>();
  Collection<HostRoleStatus> stageDisplayStatuses=new HashSet<>();
  Collection<HostRoleStatus> taskStatuses=new ArrayList<>();
  for (  Long stageId : stageIds) {
    if (!stageDto.containsKey(stageId)) {
      continue;
    }
    HostRoleCommandStatusSummaryDTO summary=stageDto.get(stageId);
    int total=summary.getTaskTotal();
    boolean skip=summary.isStageSkippable();
    Map<HostRoleStatus,Integer> counts=calculateStatusCounts(summary.getTaskStatuses());
    HostRoleStatus stageStatus=calculateSummaryStatusOfStage(counts,total,skip);
    HostRoleStatus stageDisplayStatus=calculateSummaryDisplayStatus(counts,total,skip);
    stageStatuses.add(stageStatus);
    stageDisplayStatuses.add(stageDisplayStatus);
    taskStatuses.addAll(summary.getTaskStatuses());
  }
  Map<HostRoleStatus,Integer> counts=calculateStatusCounts(stageStatuses);
  Map<HostRoleStatus,Integer> displayCounts=calculateStatusCounts(stageDisplayStatuses);
  HostRoleStatus status=calculateSummaryStatusOfUpgrade(counts,stageStatuses.size());
  HostRoleStatus displayStatus=calculateSummaryDisplayStatus(displayCounts,stageDisplayStatuses.size(),false);
  double progressPercent=calculateProgressPercent(calculateStatusCounts(taskStatuses),taskStatuses.size());
  return new CalculatedStatus(status,displayStatus,progressPercent);
}
