{
  StateRecoveryManager stateRecoveryManager=injector.getInstance(StateRecoveryManager.class);
  final Capture<RepositoryVersionState> installFailedHostVersionCapture=new Capture<RepositoryVersionState>();
  final Capture<RepositoryVersionState> installingHostVersionCapture=new Capture<RepositoryVersionState>();
  final Capture<RepositoryVersionState> installedHostVersionCapture=new Capture<RepositoryVersionState>();
  final Capture<RepositoryVersionState> outOfSyncHostVersionCapture=new Capture<RepositoryVersionState>();
  final Capture<RepositoryVersionState> upgradeFailedHostVersionCapture=new Capture<RepositoryVersionState>();
  final Capture<RepositoryVersionState> upgradingHostVersionCapture=new Capture<RepositoryVersionState>();
  final Capture<RepositoryVersionState> upgradedHostVersionCapture=new Capture<RepositoryVersionState>();
  final Capture<RepositoryVersionState> currentHostVersionCapture=new Capture<RepositoryVersionState>();
  expect(hostVersionDAOMock.findAll()).andReturn(new ArrayList<HostVersionEntity>(){
{
      add(getHostVersionMock("install_failed_version",RepositoryVersionState.INSTALL_FAILED,installFailedHostVersionCapture));
      add(getHostVersionMock("installing_version",RepositoryVersionState.INSTALLING,installingHostVersionCapture));
      add(getHostVersionMock("installed_version",RepositoryVersionState.INSTALLED,installedHostVersionCapture));
      add(getHostVersionMock("out_of_sync_version",RepositoryVersionState.OUT_OF_SYNC,outOfSyncHostVersionCapture));
      add(getHostVersionMock("current_version",RepositoryVersionState.CURRENT,currentHostVersionCapture));
    }
  }
);
  final Capture<RepositoryVersionState> installFailedClusterVersionCapture=new Capture<RepositoryVersionState>();
  final Capture<RepositoryVersionState> installingClusterVersionCapture=new Capture<RepositoryVersionState>();
  final Capture<RepositoryVersionState> installedClusterVersionCapture=new Capture<RepositoryVersionState>();
  final Capture<RepositoryVersionState> outOfSyncClusterVersionCapture=new Capture<RepositoryVersionState>();
  final Capture<RepositoryVersionState> upgradeFailedClusterVersionCapture=new Capture<RepositoryVersionState>();
  final Capture<RepositoryVersionState> upgradingClusterVersionCapture=new Capture<RepositoryVersionState>();
  final Capture<RepositoryVersionState> upgradedClusterVersionCapture=new Capture<RepositoryVersionState>();
  final Capture<RepositoryVersionState> currentClusterVersionCapture=new Capture<RepositoryVersionState>();
  expect(clusterVersionDAOMock.findAll()).andReturn(new ArrayList<ClusterVersionEntity>(){
{
      add(getClusterVersionMock("install_failed_version",RepositoryVersionState.INSTALL_FAILED,installFailedClusterVersionCapture));
      add(getClusterVersionMock("installing_version",RepositoryVersionState.INSTALLING,installingClusterVersionCapture));
      add(getClusterVersionMock("installed_version",RepositoryVersionState.INSTALLED,installedClusterVersionCapture));
      add(getClusterVersionMock("out_of_sync_version",RepositoryVersionState.OUT_OF_SYNC,outOfSyncClusterVersionCapture));
      add(getClusterVersionMock("current_version",RepositoryVersionState.CURRENT,currentClusterVersionCapture));
    }
  }
);
  replay(hostVersionDAOMock,clusterVersionDAOMock);
  stateRecoveryManager.checkHostAndClusterVersions();
  assertFalse(installFailedHostVersionCapture.hasCaptured());
  assertEquals(installingHostVersionCapture.getValue(),RepositoryVersionState.INSTALL_FAILED);
  assertFalse(installedHostVersionCapture.hasCaptured());
  assertFalse(outOfSyncHostVersionCapture.hasCaptured());
  assertFalse(upgradeFailedHostVersionCapture.hasCaptured());
  assertFalse(upgradingHostVersionCapture.hasCaptured());
  assertFalse(upgradedHostVersionCapture.hasCaptured());
  assertFalse(currentHostVersionCapture.hasCaptured());
  assertFalse(installFailedClusterVersionCapture.hasCaptured());
  assertEquals(installingClusterVersionCapture.getValue(),RepositoryVersionState.INSTALL_FAILED);
  assertFalse(installedClusterVersionCapture.hasCaptured());
  assertFalse(outOfSyncClusterVersionCapture.hasCaptured());
  assertFalse(upgradeFailedClusterVersionCapture.hasCaptured());
  assertFalse(upgradingClusterVersionCapture.hasCaptured());
  assertFalse(upgradedClusterVersionCapture.hasCaptured());
  assertFalse(currentClusterVersionCapture.hasCaptured());
}
