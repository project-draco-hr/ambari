{
  Resource.Type type=Resource.Type.Request;
  Capture<ExecuteActionRequest> actionRequest=new Capture<ExecuteActionRequest>();
  Capture<HashMap<String,String>> propertyMap=new Capture<HashMap<String,String>>();
  AmbariManagementController managementController=createMock(AmbariManagementController.class);
  RequestStatusResponse response=createNiceMock(RequestStatusResponse.class);
  expect(managementController.createAction(capture(actionRequest),capture(propertyMap))).andReturn(response).anyTimes();
  replay(managementController);
  Set<Map<String,Object>> propertySet=new LinkedHashSet<Map<String,Object>>();
  Map<String,Object> properties=new LinkedHashMap<String,Object>();
  properties.put(RequestResourceProvider.REQUEST_CLUSTER_NAME_PROPERTY_ID,"c1");
  final RequestResourceFilter resourceFilter=new RequestResourceFilter("HDFS",null,null);
  resourceFilter.getHostNames().add("host1");
  resourceFilter.getHostNames().add("host2");
  resourceFilter.getHostNames().add("host3");
  List<RequestResourceFilter> resourceFilters=new ArrayList<RequestResourceFilter>(){
{
      add(resourceFilter);
    }
  }
;
  Type listType=new TypeToken<List<RequestResourceFilter>>(){
  }
.getType();
  String filterJson=new Gson().toJson(resourceFilters,listType);
  properties.put(RequestResourceProvider.REQUEST_RESOURCE_FILTER_ID,filterJson);
  propertySet.add(properties);
  Map<String,String> requestInfoProperties=new HashMap<String,String>();
  requestInfoProperties.put("/parameters/param1","value1");
  requestInfoProperties.put("/parameters/param2","value2");
  String[] expectedHosts=new String[]{"host1","host2","host3"};
  Map<String,String> expectedParams=new HashMap<String,String>(){
{
      put("param1","value1");
      put("param2","value2");
    }
  }
;
  Request request=PropertyHelper.getCreateRequest(propertySet,requestInfoProperties);
  ResourceProvider provider=AbstractControllerResourceProvider.getResourceProvider(type,PropertyHelper.getPropertyIds(type),PropertyHelper.getKeyPropertyIds(type),managementController);
  try {
    provider.createResources(request);
  }
 catch (  UnsupportedOperationException ex) {
    Assert.assertTrue(ex.getMessage().contains("Either command or action must be specified"));
  }
  requestInfoProperties.put(RequestResourceProvider.COMMAND_ID,"HDFS_SERVICE_CHECK");
  requestInfoProperties.put(RequestResourceProvider.ACTION_ID,"a1");
  try {
    provider.createResources(request);
  }
 catch (  UnsupportedOperationException ex) {
    Assert.assertTrue(ex.getMessage().contains("Both command and action cannot be specified"));
  }
  requestInfoProperties.remove(RequestResourceProvider.ACTION_ID);
  provider.createResources(request);
  Assert.assertTrue(actionRequest.hasCaptured());
  ExecuteActionRequest capturedRequest=actionRequest.getValue();
  Assert.assertTrue(capturedRequest.isCommand());
  Assert.assertEquals(null,capturedRequest.getActionName());
  Assert.assertEquals("HDFS_SERVICE_CHECK",capturedRequest.getCommandName());
  Assert.assertEquals(1,capturedRequest.getResourceFilters().size());
  RequestResourceFilter capturedResourceFilter=capturedRequest.getResourceFilters().get(0);
  Assert.assertEquals("HDFS",capturedResourceFilter.getServiceName());
  Assert.assertEquals(null,capturedResourceFilter.getComponentName());
  Assert.assertEquals(3,capturedResourceFilter.getHostNames().size());
  Assert.assertArrayEquals(expectedHosts,capturedResourceFilter.getHostNames().toArray());
  Assert.assertEquals(2,capturedRequest.getParameters().size());
  for (  String key : expectedParams.keySet()) {
    Assert.assertEquals(expectedParams.get(key),capturedRequest.getParameters().get(key));
  }
}
