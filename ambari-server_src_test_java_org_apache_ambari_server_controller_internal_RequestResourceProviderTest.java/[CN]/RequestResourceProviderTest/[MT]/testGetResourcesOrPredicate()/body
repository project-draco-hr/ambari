{
  Resource.Type type=Resource.Type.Request;
  AmbariManagementController managementController=createMock(AmbariManagementController.class);
  ActionManager actionManager=createNiceMock(ActionManager.class);
  RequestEntity requestMock=createNiceMock(RequestEntity.class);
  expect(requestMock.getRequestContext()).andReturn("this is a context").anyTimes();
  expect(requestMock.getRequestId()).andReturn(100L).anyTimes();
  RequestEntity requestMock1=createNiceMock(RequestEntity.class);
  expect(requestMock1.getRequestContext()).andReturn("this is a context").anyTimes();
  expect(requestMock1.getRequestId()).andReturn(101L).anyTimes();
  Capture<Collection<Long>> requestIdsCapture=new Capture<Collection<Long>>();
  expect(managementController.getActionManager()).andReturn(actionManager).anyTimes();
  expect(requestDAO.findByPks(capture(requestIdsCapture),eq(true))).andReturn(Arrays.asList(requestMock,requestMock1)).anyTimes();
  expect(hrcDAO.findAggregateCounts((Long)anyObject())).andReturn(new HashMap<Long,HostRoleCommandStatusSummaryDTO>(){
{
      put(1L,HostRoleCommandStatusSummaryDTO.create().inProgress(1));
    }
  }
).anyTimes();
  replay(managementController,actionManager,requestMock,requestMock1,requestDAO,hrcDAO);
  ResourceProvider provider=AbstractControllerResourceProvider.getResourceProvider(type,PropertyHelper.getPropertyIds(type),PropertyHelper.getKeyPropertyIds(type),managementController);
  Set<String> propertyIds=new HashSet<String>();
  propertyIds.add(RequestResourceProvider.REQUEST_ID_PROPERTY_ID);
  Predicate predicate=new PredicateBuilder().property(RequestResourceProvider.REQUEST_ID_PROPERTY_ID).equals("100").or().property(RequestResourceProvider.REQUEST_ID_PROPERTY_ID).equals("101").toPredicate();
  Request request=PropertyHelper.getReadRequest(propertyIds);
  Set<Resource> resources=provider.getResources(request,predicate);
  Assert.assertEquals(2,resources.size());
  for (  Resource resource : resources) {
    long id=(Long)resource.getPropertyValue(RequestResourceProvider.REQUEST_ID_PROPERTY_ID);
    Assert.assertTrue(id == 100L || id == 101L);
  }
  verify(managementController,actionManager,requestMock,requestMock1,requestDAO,hrcDAO);
}
