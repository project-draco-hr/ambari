{
  Resource.Type type=Resource.Type.Request;
  AmbariManagementController managementController=createMock(AmbariManagementController.class);
  ActionManager actionManager=createNiceMock(ActionManager.class);
  HostRoleCommand hostRoleCommand=createNiceMock(HostRoleCommand.class);
  Stage stage=createNiceMock(Stage.class);
  Stage stage2=createNiceMock(Stage.class);
  List<HostRoleCommand> hostRoleCommands=new LinkedList<HostRoleCommand>();
  hostRoleCommands.add(hostRoleCommand);
  Collection<Stage> stages=new HashSet<Stage>();
  stages.add(stage);
  stages.add(stage2);
  org.apache.ambari.server.actionmanager.Request requestMock=createNiceMock(org.apache.ambari.server.actionmanager.Request.class);
  expect(requestMock.getCommands()).andReturn(hostRoleCommands).anyTimes();
  expect(requestMock.getStages()).andReturn(stages).anyTimes();
  expect(requestMock.getRequestContext()).andReturn("this is a context").anyTimes();
  expect(requestMock.getRequestId()).andReturn(100L).anyTimes();
  org.apache.ambari.server.actionmanager.Request requestMock1=createNiceMock(org.apache.ambari.server.actionmanager.Request.class);
  expect(requestMock1.getCommands()).andReturn(hostRoleCommands).anyTimes();
  expect(requestMock1.getStages()).andReturn(stages).anyTimes();
  expect(requestMock1.getRequestContext()).andReturn("this is a context").anyTimes();
  expect(requestMock1.getRequestId()).andReturn(101L).anyTimes();
  Capture<Collection<Long>> requestIdsCapture=new Capture<Collection<Long>>();
  expect(stage.getOrderedHostRoleCommands()).andReturn(hostRoleCommands).anyTimes();
  expect(stage2.getOrderedHostRoleCommands()).andReturn(hostRoleCommands).anyTimes();
  expect(managementController.getActionManager()).andReturn(actionManager).anyTimes();
  expect(actionManager.getRequests(capture(requestIdsCapture))).andReturn(Arrays.asList(requestMock,requestMock1)).anyTimes();
  expect(hostRoleCommand.getStatus()).andReturn(HostRoleStatus.IN_PROGRESS).anyTimes();
  replay(managementController,actionManager,hostRoleCommand,requestMock,requestMock1,stage,stage2);
  ResourceProvider provider=AbstractControllerResourceProvider.getResourceProvider(type,PropertyHelper.getPropertyIds(type),PropertyHelper.getKeyPropertyIds(type),managementController);
  Set<String> propertyIds=new HashSet<String>();
  propertyIds.add(RequestResourceProvider.REQUEST_ID_PROPERTY_ID);
  Predicate predicate=new PredicateBuilder().property(RequestResourceProvider.REQUEST_ID_PROPERTY_ID).equals("100").or().property(RequestResourceProvider.REQUEST_ID_PROPERTY_ID).equals("101").toPredicate();
  Request request=PropertyHelper.getReadRequest(propertyIds);
  Set<Resource> resources=provider.getResources(request,predicate);
  Assert.assertEquals(2,resources.size());
  for (  Resource resource : resources) {
    long id=(Long)resource.getPropertyValue(RequestResourceProvider.REQUEST_ID_PROPERTY_ID);
    Assert.assertTrue(id == 100L || id == 101L);
  }
  verify(managementController,actionManager,hostRoleCommand,stage,stage2);
}
