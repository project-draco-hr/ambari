{
  Resource.Type type=Resource.Type.Request;
  AmbariManagementController managementController=createMock(AmbariManagementController.class);
  Set<RequestStatusResponse> response1=new HashSet<RequestStatusResponse>();
  response1.add(new RequestStatusResponse(100L));
  Set<RequestStatusResponse> response2=new HashSet<RequestStatusResponse>();
  response2.add(new RequestStatusResponse(101L));
  expect(managementController.getRequestStatus(AbstractResourceProviderTest.Matcher.getRequestRequest(100L))).andReturn(response1).once();
  expect(managementController.getRequestStatus(AbstractResourceProviderTest.Matcher.getRequestRequest(101L))).andReturn(response2).once();
  replay(managementController);
  ResourceProvider provider=AbstractControllerResourceProvider.getResourceProvider(type,PropertyHelper.getPropertyIds(type),PropertyHelper.getKeyPropertyIds(type),managementController);
  Set<String> propertyIds=new HashSet<String>();
  propertyIds.add(RequestResourceProvider.REQUEST_ID_PROPERTY_ID);
  Predicate predicate=new PredicateBuilder().property(RequestResourceProvider.REQUEST_ID_PROPERTY_ID).equals("100").or().property(RequestResourceProvider.REQUEST_ID_PROPERTY_ID).equals("101").toPredicate();
  Request request=PropertyHelper.getReadRequest(propertyIds);
  Set<Resource> resources=provider.getResources(request,predicate);
  Assert.assertEquals(2,resources.size());
  for (  Resource resource : resources) {
    long id=(Long)resource.getPropertyValue(RequestResourceProvider.REQUEST_ID_PROPERTY_ID);
    Assert.assertTrue(id == 100L || id == 101L);
  }
  verify(managementController);
}
