{
  Resource.Type type=Resource.Type.Request;
  AmbariManagementController managementController=createMock(AmbariManagementController.class);
  ActionManager actionManager=createNiceMock(ActionManager.class);
  HostRoleCommand hostRoleCommand=createNiceMock(HostRoleCommand.class);
  List<HostRoleCommand> hostRoleCommands=new LinkedList<HostRoleCommand>();
  hostRoleCommands.add(hostRoleCommand);
  Capture<Collection<Long>> requestIdsCapture=new Capture<Collection<Long>>();
  Capture<List<Long>> requestIdListCapture=new Capture<List<Long>>();
  Map<Long,String> requestContexts=new HashMap<Long,String>();
  requestContexts.put(100L,"this is a context");
  expect(managementController.getActionManager()).andReturn(actionManager).anyTimes();
  expect(actionManager.getAllTasksByRequestIds(capture(requestIdsCapture))).andReturn(hostRoleCommands).anyTimes();
  expect(actionManager.getRequestContext(capture(requestIdListCapture))).andReturn(requestContexts).anyTimes();
  expect(hostRoleCommand.getRequestId()).andReturn(100L);
  expect(hostRoleCommand.getRequestId()).andReturn(101L);
  expect(hostRoleCommand.getStatus()).andReturn(HostRoleStatus.IN_PROGRESS).anyTimes();
  replay(managementController,actionManager,hostRoleCommand);
  ResourceProvider provider=AbstractControllerResourceProvider.getResourceProvider(type,PropertyHelper.getPropertyIds(type),PropertyHelper.getKeyPropertyIds(type),managementController);
  Set<String> propertyIds=new HashSet<String>();
  propertyIds.add(RequestResourceProvider.REQUEST_ID_PROPERTY_ID);
  Predicate predicate=new PredicateBuilder().property(RequestResourceProvider.REQUEST_ID_PROPERTY_ID).equals("100").or().property(RequestResourceProvider.REQUEST_ID_PROPERTY_ID).equals("101").toPredicate();
  Request request=PropertyHelper.getReadRequest(propertyIds);
  Set<Resource> resources=provider.getResources(request,predicate);
  Assert.assertEquals(2,resources.size());
  for (  Resource resource : resources) {
    long id=(Long)resource.getPropertyValue(RequestResourceProvider.REQUEST_ID_PROPERTY_ID);
    Assert.assertTrue(id == 100L || id == 101L);
  }
  verify(managementController,actionManager,hostRoleCommand);
}
