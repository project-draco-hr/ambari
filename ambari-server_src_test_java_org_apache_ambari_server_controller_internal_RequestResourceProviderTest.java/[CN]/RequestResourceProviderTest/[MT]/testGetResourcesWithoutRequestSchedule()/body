{
  Resource.Type type=Resource.Type.Request;
  AmbariManagementController managementController=createMock(AmbariManagementController.class);
  ActionManager actionManager=createNiceMock(ActionManager.class);
  RequestEntity requestMock=createNiceMock(RequestEntity.class);
  expect(requestMock.getRequestContext()).andReturn("this is a context").anyTimes();
  expect(requestMock.getRequestId()).andReturn(100L).anyTimes();
  expect(requestMock.getRequestScheduleId()).andReturn(null).anyTimes();
  Capture<Collection<Long>> requestIdsCapture=new Capture<Collection<Long>>();
  expect(managementController.getActionManager()).andReturn(actionManager);
  expect(requestDAO.findByPks(capture(requestIdsCapture),eq(true))).andReturn(Collections.singletonList(requestMock)).anyTimes();
  expect(hrcDAO.findAggregateCounts((Long)anyObject())).andReturn(new HashMap<Long,HostRoleCommandStatusSummaryDTO>(){
{
      put(1L,HostRoleCommandStatusSummaryDTO.create().inProgress(1));
    }
  }
).anyTimes();
  replay(managementController,actionManager,requestMock,requestDAO,hrcDAO);
  ResourceProvider provider=AbstractControllerResourceProvider.getResourceProvider(type,PropertyHelper.getPropertyIds(type),PropertyHelper.getKeyPropertyIds(type),managementController);
  Set<String> propertyIds=new HashSet<String>();
  propertyIds.add(RequestResourceProvider.REQUEST_ID_PROPERTY_ID);
  propertyIds.add(RequestResourceProvider.REQUEST_STATUS_PROPERTY_ID);
  propertyIds.add(RequestResourceProvider.REQUEST_SOURCE_SCHEDULE);
  Predicate predicate=new PredicateBuilder().property(RequestResourceProvider.REQUEST_ID_PROPERTY_ID).equals("100").toPredicate();
  Request request=PropertyHelper.getReadRequest(propertyIds);
  Set<Resource> resources=provider.getResources(request,predicate);
  Assert.assertEquals(1,resources.size());
  for (  Resource resource : resources) {
    Assert.assertEquals(100L,(long)(Long)resource.getPropertyValue(RequestResourceProvider.REQUEST_ID_PROPERTY_ID));
    Assert.assertEquals("IN_PROGRESS",resource.getPropertyValue(RequestResourceProvider.REQUEST_STATUS_PROPERTY_ID));
    Assert.assertEquals(null,resource.getPropertyValue(RequestResourceProvider.REQUEST_SOURCE_SCHEDULE));
  }
  verify(managementController,actionManager,requestMock,requestDAO,hrcDAO);
}
