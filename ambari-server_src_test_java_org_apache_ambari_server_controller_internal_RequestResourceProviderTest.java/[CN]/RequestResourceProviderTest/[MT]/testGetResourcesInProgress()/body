{
  Resource.Type type=Resource.Type.Request;
  AmbariManagementController managementController=createMock(AmbariManagementController.class);
  ActionManager actionManager=createNiceMock(ActionManager.class);
  HostRoleCommand hostRoleCommand0=createNiceMock(HostRoleCommand.class);
  HostRoleCommand hostRoleCommand1=createNiceMock(HostRoleCommand.class);
  HostRoleCommand hostRoleCommand2=createNiceMock(HostRoleCommand.class);
  HostRoleCommand hostRoleCommand3=createNiceMock(HostRoleCommand.class);
  Stage stage=createNiceMock(Stage.class);
  Stage stage2=createNiceMock(Stage.class);
  List<HostRoleCommand> hostRoleCommands0=new LinkedList<HostRoleCommand>();
  hostRoleCommands0.add(hostRoleCommand0);
  hostRoleCommands0.add(hostRoleCommand1);
  List<HostRoleCommand> hostRoleCommands1=new LinkedList<HostRoleCommand>();
  hostRoleCommands1.add(hostRoleCommand2);
  hostRoleCommands1.add(hostRoleCommand3);
  Collection<Stage> stages=new HashSet<Stage>();
  stages.add(stage);
  Collection<Stage> stages2=new HashSet<Stage>();
  stages2.add(stage2);
  org.apache.ambari.server.actionmanager.Request requestMock0=createNiceMock(org.apache.ambari.server.actionmanager.Request.class);
  expect(requestMock0.getCommands()).andReturn(hostRoleCommands0).anyTimes();
  expect(requestMock0.getRequestContext()).andReturn("this is a context").anyTimes();
  expect(requestMock0.getRequestId()).andReturn(100L).anyTimes();
  org.apache.ambari.server.actionmanager.Request requestMock1=createNiceMock(org.apache.ambari.server.actionmanager.Request.class);
  expect(requestMock1.getCommands()).andReturn(hostRoleCommands1).anyTimes();
  expect(requestMock1.getRequestContext()).andReturn("this is a context").anyTimes();
  expect(requestMock1.getRequestId()).andReturn(101L).anyTimes();
  expect(requestMock0.getStages()).andReturn(stages).anyTimes();
  expect(requestMock1.getStages()).andReturn(stages2).anyTimes();
  expect(stage.getOrderedHostRoleCommands()).andReturn(hostRoleCommands0).anyTimes();
  expect(stage2.getOrderedHostRoleCommands()).andReturn(hostRoleCommands1).anyTimes();
  Capture<Collection<Long>> requestIdsCapture=new Capture<Collection<Long>>();
  expect(managementController.getActionManager()).andReturn(actionManager).anyTimes();
  expect(actionManager.getRequests(capture(requestIdsCapture))).andReturn(Arrays.asList(requestMock0));
  expect(actionManager.getRequests(capture(requestIdsCapture))).andReturn(Arrays.asList(requestMock1));
  expect(hostRoleCommand0.getRequestId()).andReturn(100L).anyTimes();
  expect(hostRoleCommand1.getRequestId()).andReturn(100L).anyTimes();
  expect(hostRoleCommand2.getRequestId()).andReturn(101L).anyTimes();
  expect(hostRoleCommand3.getRequestId()).andReturn(101L).anyTimes();
  expect(hostRoleCommand0.getStatus()).andReturn(HostRoleStatus.IN_PROGRESS).anyTimes();
  expect(hostRoleCommand1.getStatus()).andReturn(HostRoleStatus.PENDING).anyTimes();
  expect(hostRoleCommand2.getStatus()).andReturn(HostRoleStatus.IN_PROGRESS).anyTimes();
  expect(hostRoleCommand3.getStatus()).andReturn(HostRoleStatus.QUEUED).anyTimes();
  replay(managementController,actionManager,hostRoleCommand0,hostRoleCommand1,hostRoleCommand2,hostRoleCommand3,requestMock0,requestMock1,stage,stage2);
  ResourceProvider provider=AbstractControllerResourceProvider.getResourceProvider(type,PropertyHelper.getPropertyIds(type),PropertyHelper.getKeyPropertyIds(type),managementController);
  Set<String> propertyIds=new HashSet<String>();
  propertyIds.add(RequestResourceProvider.REQUEST_ID_PROPERTY_ID);
  propertyIds.add(RequestResourceProvider.REQUEST_STATUS_PROPERTY_ID);
  propertyIds.add(RequestResourceProvider.REQUEST_TASK_CNT_ID);
  propertyIds.add(RequestResourceProvider.REQUEST_COMPLETED_TASK_CNT_ID);
  propertyIds.add(RequestResourceProvider.REQUEST_FAILED_TASK_CNT_ID);
  propertyIds.add(RequestResourceProvider.REQUEST_QUEUED_TASK_CNT_ID);
  propertyIds.add(RequestResourceProvider.REQUEST_PROGRESS_PERCENT_ID);
  Predicate predicate=new PredicateBuilder().property(RequestResourceProvider.REQUEST_ID_PROPERTY_ID).equals("100").or().property(RequestResourceProvider.REQUEST_ID_PROPERTY_ID).equals("101").toPredicate();
  Request request=PropertyHelper.getReadRequest(propertyIds);
  Set<Resource> resources=provider.getResources(request,predicate);
  Assert.assertEquals(2,resources.size());
  for (  Resource resource : resources) {
    long id=(Long)resource.getPropertyValue(RequestResourceProvider.REQUEST_ID_PROPERTY_ID);
    Assert.assertTrue(id == 100L || id == 101L);
    Assert.assertEquals("IN_PROGRESS",resource.getPropertyValue(RequestResourceProvider.REQUEST_STATUS_PROPERTY_ID));
    Assert.assertEquals(2,resource.getPropertyValue(RequestResourceProvider.REQUEST_TASK_CNT_ID));
    Assert.assertEquals(0,resource.getPropertyValue(RequestResourceProvider.REQUEST_FAILED_TASK_CNT_ID));
    if (id == 100L) {
      Assert.assertEquals(0,resource.getPropertyValue(RequestResourceProvider.REQUEST_QUEUED_TASK_CNT_ID));
      int progressPercent=((Double)resource.getPropertyValue(RequestResourceProvider.REQUEST_PROGRESS_PERCENT_ID)).intValue();
      Assert.assertEquals(17,progressPercent);
    }
 else {
      Assert.assertEquals(1,resource.getPropertyValue(RequestResourceProvider.REQUEST_QUEUED_TASK_CNT_ID));
      int progressPercent=((Double)resource.getPropertyValue(RequestResourceProvider.REQUEST_PROGRESS_PERCENT_ID)).intValue();
      Assert.assertEquals(21,progressPercent);
    }
    Assert.assertEquals(0,resource.getPropertyValue(RequestResourceProvider.REQUEST_COMPLETED_TASK_CNT_ID));
  }
  verify(managementController,actionManager,hostRoleCommand0,hostRoleCommand1,hostRoleCommand2,hostRoleCommand3,stage,stage2);
}
