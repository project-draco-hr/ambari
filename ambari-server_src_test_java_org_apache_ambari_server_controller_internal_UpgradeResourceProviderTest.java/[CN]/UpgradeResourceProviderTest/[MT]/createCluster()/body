{
  Cluster cluster=createMock(Cluster.class);
  expect(cluster.getClusterId()).andReturn(Long.valueOf(1)).anyTimes();
  expect(cluster.getDesiredStackVersion()).andReturn(new StackId("HDP-2.1.1")).atLeastOnce();
  final ServiceComponentHost zk_server_host_comp=createStrictMock(ServiceComponentHost.class);
  Map<String,ServiceComponentHost> zk_host_comp_map=new HashMap<String,ServiceComponentHost>(){
{
      put("h1",zk_server_host_comp);
    }
  }
;
  final ServiceComponent zk_server_comp=createStrictMock(ServiceComponent.class);
  expect(zk_server_comp.getServiceComponentHosts()).andReturn(zk_host_comp_map).atLeastOnce();
  Map<String,ServiceComponent> zk_comp_map=new HashMap<String,ServiceComponent>(){
{
      put("ZOOKEEPER_SERVER",zk_server_comp);
    }
  }
;
  final Service zk=createStrictMock(Service.class);
  expect(zk.getServiceComponents()).andReturn(zk_comp_map).atLeastOnce();
  Map<String,Service> servicesMap=new HashMap<String,Service>(){
{
      put("ZOOKEEPER",zk);
    }
  }
;
  expect(cluster.getServices()).andReturn(servicesMap).anyTimes();
  replay(zk_server_host_comp,zk_server_comp,zk);
  return cluster;
}
