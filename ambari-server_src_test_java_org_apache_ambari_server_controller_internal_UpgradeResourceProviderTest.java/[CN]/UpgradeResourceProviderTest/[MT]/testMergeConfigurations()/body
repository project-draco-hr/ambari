{
  StackId stack211=new StackId("HDP-2.1.1");
  StackId stack220=new StackId("HDP-2.2.0");
  Set<PropertyInfo> stack211FirstConfig=newHashSet(createProperty("1","one",new PropertyUpgradeBehavior(true,false,false)),createProperty("11","one-one",new PropertyUpgradeBehavior(true,false,false)));
  Set<PropertyInfo> stack211SecondConfig=newHashSet(createProperty("2","two",new PropertyUpgradeBehavior(true,false,false)));
  Set<PropertyInfo> stack211ThirdConfig=newHashSet(createProperty("3","three",new PropertyUpgradeBehavior(true,false,false)));
  Map<String,Set<PropertyInfo>> stack211Configs=new HashMap<>(of("first-site",stack211FirstConfig,"second-site",stack211SecondConfig,"third-site",stack211ThirdConfig));
  Set<PropertyInfo> stack220FirstConfig=newHashSet(createProperty("1","one-new",new PropertyUpgradeBehavior(false,false,true)),createProperty("11","any",new PropertyUpgradeBehavior(false,true,false)),createProperty("111","one-one-one",new PropertyUpgradeBehavior(true,false,false)),createProperty("2","two",new PropertyUpgradeBehavior(false,false,true)));
  Set<PropertyInfo> stack220ThirdConfig=newHashSet(createProperty("3","three-ignored",new PropertyUpgradeBehavior(false,false,false)));
  Set<PropertyInfo> stack220FlumeEnvConfig=newHashSet(createProperty("flume_env_key","flume-env-value",new PropertyUpgradeBehavior(false,false,false)));
  Map<String,Set<PropertyInfo>> stack220Configs=new HashMap<>(of("first-site",stack220FirstConfig,"third-site",stack220ThirdConfig,"flume-env",stack220FlumeEnvConfig));
  Map<String,String> firstConfigProperties=new HashMap<>(of("1","one","11","one-one"));
  Map<String,String> secondConfigProperties=new HashMap<>(of("2","two"));
  Map<String,String> thirdConfigProperties=new HashMap<>(of("3","three-changed"));
  Config firstConfig=EasyMock.createNiceMock(Config.class);
  Config secondConfig=EasyMock.createNiceMock(Config.class);
  Config thirdConfig=EasyMock.createNiceMock(Config.class);
  expect(firstConfig.getProperties()).andReturn(firstConfigProperties);
  expect(secondConfig.getProperties()).andReturn(secondConfigProperties);
  expect(thirdConfig.getProperties()).andReturn(thirdConfigProperties);
  Map<String,DesiredConfig> desiredConfigurations=new HashMap<>();
  desiredConfigurations.put("first-site",null);
  desiredConfigurations.put("second-site",null);
  desiredConfigurations.put("third-site",null);
  Cluster cluster=EasyMock.createNiceMock(Cluster.class);
  expect(cluster.getCurrentStackVersion()).andReturn(stack211);
  expect(cluster.getDesiredStackVersion()).andReturn(stack220);
  expect(cluster.getDesiredConfigs()).andReturn(desiredConfigurations);
  expect(cluster.getDesiredConfigByType("first-site")).andReturn(firstConfig);
  expect(cluster.getDesiredConfigByType("second-site")).andReturn(secondConfig);
  expect(cluster.getDesiredConfigByType("third-site")).andReturn(thirdConfig);
  EasyMock.reset(configHelper);
  expect(configHelper.getDefaultProperties(EasyMock.eq(stack211),EasyMock.anyObject(Cluster.class))).andReturn(stack211Configs).anyTimes();
  expect(configHelper.getDefaultProperties(EasyMock.eq(stack220),EasyMock.anyObject(Cluster.class))).andReturn(stack220Configs).anyTimes();
  Capture<Map<String,Map<String,String>>> expectedConfigurationsCapture=new Capture<Map<String,Map<String,String>>>();
  configHelper.createConfigTypes(EasyMock.anyObject(Cluster.class),EasyMock.anyObject(AmbariManagementController.class),EasyMock.capture(expectedConfigurationsCapture),EasyMock.anyObject(String.class),EasyMock.anyObject(String.class));
  EasyMock.expectLastCall().once();
  EasyMock.replay(configHelper,cluster,firstConfig,secondConfig,thirdConfig);
  UpgradeResourceProvider upgradeResourceProvider=createProvider(amc);
  Map<String,UpgradePack> upgradePacks=ambariMetaInfo.getUpgradePacks("HDP","2.1.1");
  UpgradePack upgrade=upgradePacks.get("upgrade_to_new_stack");
  upgradeResourceProvider.applyStackAndProcessConfigurations(stack211.getStackName(),cluster,"2.2.0.0",Direction.UPGRADE,upgrade,"admin");
  Map<String,Map<String,String>> expectedConfigurations=expectedConfigurationsCapture.getValue();
  Map<String,String> resultingFirstConfig=expectedConfigurations.get("first-site");
  Map<String,String> resultingSecondConfig=expectedConfigurations.get("second-site");
  Map<String,String> resultingThirdConfig=expectedConfigurations.get("third-site");
  assertFalse(expectedConfigurations.containsKey("flume-env"));
  assertEquals("one-new",resultingFirstConfig.get("1"));
  assertEquals(null,resultingFirstConfig.get("11"));
  assertEquals("one-one-one",resultingFirstConfig.get("111"));
  assertEquals("two",resultingSecondConfig.get("2"));
  assertEquals("three-changed",resultingThirdConfig.get("3"));
}
