{
  org.apache.ambari.server.controller.spi.RequestStatus status=testCreateResources();
  Set<Resource> createdResources=status.getAssociatedResources();
  assertEquals(1,createdResources.size());
  Resource res=createdResources.iterator().next();
  Long id=(Long)res.getPropertyValue("Upgrade/request_id");
  assertNotNull(id);
  assertEquals(Long.valueOf(1),id);
  StageDAO stageDao=injector.getInstance(StageDAO.class);
  HostRoleCommandDAO hrcDao=injector.getInstance(HostRoleCommandDAO.class);
  List<StageEntity> stages=stageDao.findByRequestId(id);
  List<HostRoleCommandEntity> tasks=hrcDao.findByRequest(id);
  Set<Long> stageIds=new HashSet<Long>();
  for (  StageEntity se : stages) {
    stageIds.add(se.getStageId());
  }
  CalculatedStatus calc=null;
  int i=0;
  for (  HostRoleCommandEntity hrce : tasks) {
    hrce.setStatus(HostRoleStatus.IN_PROGRESS);
    hrcDao.merge(hrce);
    calc=CalculatedStatus.statusFromStageSummary(hrcDao.findAggregateCounts(id),stageIds);
    assertEquals(((i++) + 1) * 4.375d,calc.getPercent(),0.01d);
    assertEquals(HostRoleStatus.IN_PROGRESS,calc.getStatus());
  }
  i=0;
  for (  HostRoleCommandEntity hrce : tasks) {
    hrce.setStatus(HostRoleStatus.COMPLETED);
    hrcDao.merge(hrce);
    calc=CalculatedStatus.statusFromStageSummary(hrcDao.findAggregateCounts(id),stageIds);
    assertEquals(35 + (((i++) + 1) * 8.125),calc.getPercent(),0.01d);
    if (i < 8) {
      assertEquals(HostRoleStatus.IN_PROGRESS,calc.getStatus());
    }
  }
  calc=CalculatedStatus.statusFromStageSummary(hrcDao.findAggregateCounts(id),stageIds);
  assertEquals(HostRoleStatus.COMPLETED,calc.getStatus());
  assertEquals(100d,calc.getPercent(),0.01d);
}
