{
  clusters.addHost("h2");
  Host host=clusters.getHost("h2");
  Map<String,String> hostAttributes=new HashMap<String,String>();
  hostAttributes.put("os_family","redhat");
  hostAttributes.put("os_release_version","6.3");
  host.setHostAttributes(hostAttributes);
  host.persist();
  clusters.mapHostToCluster("h2","c1");
  Cluster cluster=clusters.getCluster("c1");
  Service service=cluster.getService("ZOOKEEPER");
  ServiceComponent component=service.getServiceComponent("ZOOKEEPER_SERVER");
  ServiceComponentHost sch=component.addServiceComponentHost("h2");
  sch.setVersion("2.2.2.2");
  List<UpgradeEntity> upgrades=upgradeDao.findUpgrades(cluster.getClusterId());
  assertEquals(0,upgrades.size());
  UpgradeEntity upgradeEntity=new UpgradeEntity();
  upgradeEntity.setClusterId(cluster.getClusterId());
  upgradeEntity.setDirection(Direction.UPGRADE);
  upgradeEntity.setFromVersion("2.1.1.1");
  upgradeEntity.setToVersion("2.2.2.2");
  upgradeEntity.setUpgradePackage("upgrade_test");
  upgradeEntity.setUpgradeType(UpgradeType.ROLLING);
  upgradeEntity.setRequestId(1L);
  upgradeDao.create(upgradeEntity);
  upgrades=upgradeDao.findUpgrades(cluster.getClusterId());
  assertEquals(1,upgrades.size());
  UpgradeEntity lastUpgrade=upgradeDao.findLastUpgradeForCluster(cluster.getClusterId());
  assertNotNull(lastUpgrade);
  Map<String,Object> requestProps=new HashMap<String,Object>();
  requestProps.put(UpgradeResourceProvider.UPGRADE_CLUSTER_NAME,"c1");
  requestProps.put(UpgradeResourceProvider.UPGRADE_VERSION,"2.1.1.1");
  Map<String,String> requestInfoProperties=new HashMap<String,String>();
  requestInfoProperties.put(UpgradeResourceDefinition.DOWNGRADE_DIRECTIVE,"true");
  ResourceProvider upgradeResourceProvider=createProvider(amc);
  Request request=PropertyHelper.getCreateRequest(Collections.singleton(requestProps),requestInfoProperties);
  upgradeResourceProvider.createResources(request);
  upgrades=upgradeDao.findUpgrades(cluster.getClusterId());
  assertEquals(2,upgrades.size());
  UpgradeEntity downgrade=upgrades.get(1);
  assertEquals(cluster.getClusterId(),downgrade.getClusterId().longValue());
  List<UpgradeGroupEntity> upgradeGroups=downgrade.getUpgradeGroups();
  assertEquals(3,upgradeGroups.size());
  UpgradeGroupEntity group=upgradeGroups.get(1);
  assertEquals("ZOOKEEPER",group.getName());
  assertEquals(4,group.getItems().size());
}
